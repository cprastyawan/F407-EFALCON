
F407-EFALCON.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc24  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000598  0800cdb8  0800cdb8  0001cdb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d350  0800d350  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d350  0800d350  0001d350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d358  0800d358  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d358  0800d358  0001d358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d35c  0800d35c  0001d35c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800d360  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b68  200001e0  0800d540  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d48  0800d540  00020d48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014b5d  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000028af  00000000  00000000  00034d6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011d0  00000000  00000000  00037620  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010d0  00000000  00000000  000387f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000223fe  00000000  00000000  000398c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000db35  00000000  00000000  0005bcbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ce52d  00000000  00000000  000697f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00137d20  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005840  00000000  00000000  00137d9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cd9c 	.word	0x0800cd9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800cd9c 	.word	0x0800cd9c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_ldivmod>:
 8000c48:	b97b      	cbnz	r3, 8000c6a <__aeabi_ldivmod+0x22>
 8000c4a:	b972      	cbnz	r2, 8000c6a <__aeabi_ldivmod+0x22>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bfbe      	ittt	lt
 8000c50:	2000      	movlt	r0, #0
 8000c52:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c56:	e006      	blt.n	8000c66 <__aeabi_ldivmod+0x1e>
 8000c58:	bf08      	it	eq
 8000c5a:	2800      	cmpeq	r0, #0
 8000c5c:	bf1c      	itt	ne
 8000c5e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c62:	f04f 30ff 	movne.w	r0, #4294967295
 8000c66:	f000 b9bd 	b.w	8000fe4 <__aeabi_idiv0>
 8000c6a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c6e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c72:	2900      	cmp	r1, #0
 8000c74:	db09      	blt.n	8000c8a <__aeabi_ldivmod+0x42>
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	db1a      	blt.n	8000cb0 <__aeabi_ldivmod+0x68>
 8000c7a:	f000 f84d 	bl	8000d18 <__udivmoddi4>
 8000c7e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c86:	b004      	add	sp, #16
 8000c88:	4770      	bx	lr
 8000c8a:	4240      	negs	r0, r0
 8000c8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	db1b      	blt.n	8000ccc <__aeabi_ldivmod+0x84>
 8000c94:	f000 f840 	bl	8000d18 <__udivmoddi4>
 8000c98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca0:	b004      	add	sp, #16
 8000ca2:	4240      	negs	r0, r0
 8000ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca8:	4252      	negs	r2, r2
 8000caa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cae:	4770      	bx	lr
 8000cb0:	4252      	negs	r2, r2
 8000cb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cb6:	f000 f82f 	bl	8000d18 <__udivmoddi4>
 8000cba:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc2:	b004      	add	sp, #16
 8000cc4:	4240      	negs	r0, r0
 8000cc6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cca:	4770      	bx	lr
 8000ccc:	4252      	negs	r2, r2
 8000cce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd2:	f000 f821 	bl	8000d18 <__udivmoddi4>
 8000cd6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cde:	b004      	add	sp, #16
 8000ce0:	4252      	negs	r2, r2
 8000ce2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b972 	b.w	8000fe4 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f806 	bl	8000d18 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__udivmoddi4>:
 8000d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d1c:	9e08      	ldr	r6, [sp, #32]
 8000d1e:	4604      	mov	r4, r0
 8000d20:	4688      	mov	r8, r1
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d14b      	bne.n	8000dbe <__udivmoddi4+0xa6>
 8000d26:	428a      	cmp	r2, r1
 8000d28:	4615      	mov	r5, r2
 8000d2a:	d967      	bls.n	8000dfc <__udivmoddi4+0xe4>
 8000d2c:	fab2 f282 	clz	r2, r2
 8000d30:	b14a      	cbz	r2, 8000d46 <__udivmoddi4+0x2e>
 8000d32:	f1c2 0720 	rsb	r7, r2, #32
 8000d36:	fa01 f302 	lsl.w	r3, r1, r2
 8000d3a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d3e:	4095      	lsls	r5, r2
 8000d40:	ea47 0803 	orr.w	r8, r7, r3
 8000d44:	4094      	lsls	r4, r2
 8000d46:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d4a:	0c23      	lsrs	r3, r4, #16
 8000d4c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d50:	fa1f fc85 	uxth.w	ip, r5
 8000d54:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d58:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d5c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d60:	4299      	cmp	r1, r3
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x60>
 8000d64:	18eb      	adds	r3, r5, r3
 8000d66:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d6a:	f080 811b 	bcs.w	8000fa4 <__udivmoddi4+0x28c>
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	f240 8118 	bls.w	8000fa4 <__udivmoddi4+0x28c>
 8000d74:	3f02      	subs	r7, #2
 8000d76:	442b      	add	r3, r5
 8000d78:	1a5b      	subs	r3, r3, r1
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d88:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d8c:	45a4      	cmp	ip, r4
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x8c>
 8000d90:	192c      	adds	r4, r5, r4
 8000d92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d96:	f080 8107 	bcs.w	8000fa8 <__udivmoddi4+0x290>
 8000d9a:	45a4      	cmp	ip, r4
 8000d9c:	f240 8104 	bls.w	8000fa8 <__udivmoddi4+0x290>
 8000da0:	3802      	subs	r0, #2
 8000da2:	442c      	add	r4, r5
 8000da4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000da8:	eba4 040c 	sub.w	r4, r4, ip
 8000dac:	2700      	movs	r7, #0
 8000dae:	b11e      	cbz	r6, 8000db8 <__udivmoddi4+0xa0>
 8000db0:	40d4      	lsrs	r4, r2
 8000db2:	2300      	movs	r3, #0
 8000db4:	e9c6 4300 	strd	r4, r3, [r6]
 8000db8:	4639      	mov	r1, r7
 8000dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d909      	bls.n	8000dd6 <__udivmoddi4+0xbe>
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	f000 80eb 	beq.w	8000f9e <__udivmoddi4+0x286>
 8000dc8:	2700      	movs	r7, #0
 8000dca:	e9c6 0100 	strd	r0, r1, [r6]
 8000dce:	4638      	mov	r0, r7
 8000dd0:	4639      	mov	r1, r7
 8000dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd6:	fab3 f783 	clz	r7, r3
 8000dda:	2f00      	cmp	r7, #0
 8000ddc:	d147      	bne.n	8000e6e <__udivmoddi4+0x156>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d302      	bcc.n	8000de8 <__udivmoddi4+0xd0>
 8000de2:	4282      	cmp	r2, r0
 8000de4:	f200 80fa 	bhi.w	8000fdc <__udivmoddi4+0x2c4>
 8000de8:	1a84      	subs	r4, r0, r2
 8000dea:	eb61 0303 	sbc.w	r3, r1, r3
 8000dee:	2001      	movs	r0, #1
 8000df0:	4698      	mov	r8, r3
 8000df2:	2e00      	cmp	r6, #0
 8000df4:	d0e0      	beq.n	8000db8 <__udivmoddi4+0xa0>
 8000df6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dfa:	e7dd      	b.n	8000db8 <__udivmoddi4+0xa0>
 8000dfc:	b902      	cbnz	r2, 8000e00 <__udivmoddi4+0xe8>
 8000dfe:	deff      	udf	#255	; 0xff
 8000e00:	fab2 f282 	clz	r2, r2
 8000e04:	2a00      	cmp	r2, #0
 8000e06:	f040 808f 	bne.w	8000f28 <__udivmoddi4+0x210>
 8000e0a:	1b49      	subs	r1, r1, r5
 8000e0c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e10:	fa1f f885 	uxth.w	r8, r5
 8000e14:	2701      	movs	r7, #1
 8000e16:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e1a:	0c23      	lsrs	r3, r4, #16
 8000e1c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e24:	fb08 f10c 	mul.w	r1, r8, ip
 8000e28:	4299      	cmp	r1, r3
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x124>
 8000e2c:	18eb      	adds	r3, r5, r3
 8000e2e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e32:	d202      	bcs.n	8000e3a <__udivmoddi4+0x122>
 8000e34:	4299      	cmp	r1, r3
 8000e36:	f200 80cd 	bhi.w	8000fd4 <__udivmoddi4+0x2bc>
 8000e3a:	4684      	mov	ip, r0
 8000e3c:	1a59      	subs	r1, r3, r1
 8000e3e:	b2a3      	uxth	r3, r4
 8000e40:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e44:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e48:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e4c:	fb08 f800 	mul.w	r8, r8, r0
 8000e50:	45a0      	cmp	r8, r4
 8000e52:	d907      	bls.n	8000e64 <__udivmoddi4+0x14c>
 8000e54:	192c      	adds	r4, r5, r4
 8000e56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e5a:	d202      	bcs.n	8000e62 <__udivmoddi4+0x14a>
 8000e5c:	45a0      	cmp	r8, r4
 8000e5e:	f200 80b6 	bhi.w	8000fce <__udivmoddi4+0x2b6>
 8000e62:	4618      	mov	r0, r3
 8000e64:	eba4 0408 	sub.w	r4, r4, r8
 8000e68:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e6c:	e79f      	b.n	8000dae <__udivmoddi4+0x96>
 8000e6e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e72:	40bb      	lsls	r3, r7
 8000e74:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e78:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e7c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e80:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e84:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e88:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e8c:	4325      	orrs	r5, r4
 8000e8e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e92:	0c2c      	lsrs	r4, r5, #16
 8000e94:	fb08 3319 	mls	r3, r8, r9, r3
 8000e98:	fa1f fa8e 	uxth.w	sl, lr
 8000e9c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ea0:	fb09 f40a 	mul.w	r4, r9, sl
 8000ea4:	429c      	cmp	r4, r3
 8000ea6:	fa02 f207 	lsl.w	r2, r2, r7
 8000eaa:	fa00 f107 	lsl.w	r1, r0, r7
 8000eae:	d90b      	bls.n	8000ec8 <__udivmoddi4+0x1b0>
 8000eb0:	eb1e 0303 	adds.w	r3, lr, r3
 8000eb4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eb8:	f080 8087 	bcs.w	8000fca <__udivmoddi4+0x2b2>
 8000ebc:	429c      	cmp	r4, r3
 8000ebe:	f240 8084 	bls.w	8000fca <__udivmoddi4+0x2b2>
 8000ec2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ec6:	4473      	add	r3, lr
 8000ec8:	1b1b      	subs	r3, r3, r4
 8000eca:	b2ad      	uxth	r5, r5
 8000ecc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ed0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ed4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ed8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000edc:	45a2      	cmp	sl, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1da>
 8000ee0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ee4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ee8:	d26b      	bcs.n	8000fc2 <__udivmoddi4+0x2aa>
 8000eea:	45a2      	cmp	sl, r4
 8000eec:	d969      	bls.n	8000fc2 <__udivmoddi4+0x2aa>
 8000eee:	3802      	subs	r0, #2
 8000ef0:	4474      	add	r4, lr
 8000ef2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ef6:	fba0 8902 	umull	r8, r9, r0, r2
 8000efa:	eba4 040a 	sub.w	r4, r4, sl
 8000efe:	454c      	cmp	r4, r9
 8000f00:	46c2      	mov	sl, r8
 8000f02:	464b      	mov	r3, r9
 8000f04:	d354      	bcc.n	8000fb0 <__udivmoddi4+0x298>
 8000f06:	d051      	beq.n	8000fac <__udivmoddi4+0x294>
 8000f08:	2e00      	cmp	r6, #0
 8000f0a:	d069      	beq.n	8000fe0 <__udivmoddi4+0x2c8>
 8000f0c:	ebb1 050a 	subs.w	r5, r1, sl
 8000f10:	eb64 0403 	sbc.w	r4, r4, r3
 8000f14:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f18:	40fd      	lsrs	r5, r7
 8000f1a:	40fc      	lsrs	r4, r7
 8000f1c:	ea4c 0505 	orr.w	r5, ip, r5
 8000f20:	e9c6 5400 	strd	r5, r4, [r6]
 8000f24:	2700      	movs	r7, #0
 8000f26:	e747      	b.n	8000db8 <__udivmoddi4+0xa0>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f30:	4095      	lsls	r5, r2
 8000f32:	fa01 f002 	lsl.w	r0, r1, r2
 8000f36:	fa21 f303 	lsr.w	r3, r1, r3
 8000f3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f3e:	4338      	orrs	r0, r7
 8000f40:	0c01      	lsrs	r1, r0, #16
 8000f42:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f46:	fa1f f885 	uxth.w	r8, r5
 8000f4a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f52:	fb07 f308 	mul.w	r3, r7, r8
 8000f56:	428b      	cmp	r3, r1
 8000f58:	fa04 f402 	lsl.w	r4, r4, r2
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x256>
 8000f5e:	1869      	adds	r1, r5, r1
 8000f60:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f64:	d22f      	bcs.n	8000fc6 <__udivmoddi4+0x2ae>
 8000f66:	428b      	cmp	r3, r1
 8000f68:	d92d      	bls.n	8000fc6 <__udivmoddi4+0x2ae>
 8000f6a:	3f02      	subs	r7, #2
 8000f6c:	4429      	add	r1, r5
 8000f6e:	1acb      	subs	r3, r1, r3
 8000f70:	b281      	uxth	r1, r0
 8000f72:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f76:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb00 f308 	mul.w	r3, r0, r8
 8000f82:	428b      	cmp	r3, r1
 8000f84:	d907      	bls.n	8000f96 <__udivmoddi4+0x27e>
 8000f86:	1869      	adds	r1, r5, r1
 8000f88:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f8c:	d217      	bcs.n	8000fbe <__udivmoddi4+0x2a6>
 8000f8e:	428b      	cmp	r3, r1
 8000f90:	d915      	bls.n	8000fbe <__udivmoddi4+0x2a6>
 8000f92:	3802      	subs	r0, #2
 8000f94:	4429      	add	r1, r5
 8000f96:	1ac9      	subs	r1, r1, r3
 8000f98:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f9c:	e73b      	b.n	8000e16 <__udivmoddi4+0xfe>
 8000f9e:	4637      	mov	r7, r6
 8000fa0:	4630      	mov	r0, r6
 8000fa2:	e709      	b.n	8000db8 <__udivmoddi4+0xa0>
 8000fa4:	4607      	mov	r7, r0
 8000fa6:	e6e7      	b.n	8000d78 <__udivmoddi4+0x60>
 8000fa8:	4618      	mov	r0, r3
 8000faa:	e6fb      	b.n	8000da4 <__udivmoddi4+0x8c>
 8000fac:	4541      	cmp	r1, r8
 8000fae:	d2ab      	bcs.n	8000f08 <__udivmoddi4+0x1f0>
 8000fb0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000fb4:	eb69 020e 	sbc.w	r2, r9, lr
 8000fb8:	3801      	subs	r0, #1
 8000fba:	4613      	mov	r3, r2
 8000fbc:	e7a4      	b.n	8000f08 <__udivmoddi4+0x1f0>
 8000fbe:	4660      	mov	r0, ip
 8000fc0:	e7e9      	b.n	8000f96 <__udivmoddi4+0x27e>
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	e795      	b.n	8000ef2 <__udivmoddi4+0x1da>
 8000fc6:	4667      	mov	r7, ip
 8000fc8:	e7d1      	b.n	8000f6e <__udivmoddi4+0x256>
 8000fca:	4681      	mov	r9, r0
 8000fcc:	e77c      	b.n	8000ec8 <__udivmoddi4+0x1b0>
 8000fce:	3802      	subs	r0, #2
 8000fd0:	442c      	add	r4, r5
 8000fd2:	e747      	b.n	8000e64 <__udivmoddi4+0x14c>
 8000fd4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fd8:	442b      	add	r3, r5
 8000fda:	e72f      	b.n	8000e3c <__udivmoddi4+0x124>
 8000fdc:	4638      	mov	r0, r7
 8000fde:	e708      	b.n	8000df2 <__udivmoddi4+0xda>
 8000fe0:	4637      	mov	r7, r6
 8000fe2:	e6e9      	b.n	8000db8 <__udivmoddi4+0xa0>

08000fe4 <__aeabi_idiv0>:
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop

08000fe8 <HMC5883L_initialize>:
 * averaging, 15 Hz data output rate, normal measurement bias, a,d 1090 gain (in
 * terms of LSB/Gauss). Be sure to adjust any settings you need specifically
 * after initialization, especially the gain settings if you happen to be seeing
 * a lot of -4096 values (see the datasheet for mor information).
 */
void HMC5883L_initialize() {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
    devAddr = HMC5883L_DEFAULT_ADDRESS;
 8000fec:	4b08      	ldr	r3, [pc, #32]	; (8001010 <HMC5883L_initialize+0x28>)
 8000fee:	221e      	movs	r2, #30
 8000ff0:	701a      	strb	r2, [r3, #0]
    // write CONFIG_A register
    I2Cdev_writeByte(devAddr, HMC5883L_RA_CONFIG_A,
 8000ff2:	4b07      	ldr	r3, [pc, #28]	; (8001010 <HMC5883L_initialize+0x28>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	2270      	movs	r2, #112	; 0x70
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 f8a8 	bl	8001150 <I2Cdev_writeByte>
        (HMC5883L_AVERAGING_8 << (HMC5883L_CRA_AVERAGE_BIT - HMC5883L_CRA_AVERAGE_LENGTH + 1)) |
        (HMC5883L_RATE_15     << (HMC5883L_CRA_RATE_BIT - HMC5883L_CRA_RATE_LENGTH + 1)) |
        (HMC5883L_BIAS_NORMAL << (HMC5883L_CRA_BIAS_BIT - HMC5883L_CRA_BIAS_LENGTH + 1)));

    // write CONFIG_B register
    HMC5883L_setGain(HMC5883L_GAIN_1090);
 8001000:	2001      	movs	r0, #1
 8001002:	f000 f831 	bl	8001068 <HMC5883L_setGain>

    // write MODE register
    HMC5883L_setMode(HMC5883L_MODE_CONTINUOUS);
 8001006:	2000      	movs	r0, #0
 8001008:	f000 f842 	bl	8001090 <HMC5883L_setMode>
}
 800100c:	bf00      	nop
 800100e:	bd80      	pop	{r7, pc}
 8001010:	200001fc 	.word	0x200001fc

08001014 <HMC5883L_testConnection>:

/** Verify the I2C connection.
 * Make sure the device is connected and responds as expected.
 * @return True if connection is valid, false otherwise
 */
bool HMC5883L_testConnection() {
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af02      	add	r7, sp, #8
    if (I2Cdev_readBytes(devAddr, HMC5883L_RA_ID_A, 3, buffer, 0) == 3) {
 800101a:	4b11      	ldr	r3, [pc, #68]	; (8001060 <HMC5883L_testConnection+0x4c>)
 800101c:	7818      	ldrb	r0, [r3, #0]
 800101e:	2300      	movs	r3, #0
 8001020:	9300      	str	r3, [sp, #0]
 8001022:	4b10      	ldr	r3, [pc, #64]	; (8001064 <HMC5883L_testConnection+0x50>)
 8001024:	2203      	movs	r2, #3
 8001026:	210a      	movs	r1, #10
 8001028:	f000 f85a 	bl	80010e0 <I2Cdev_readBytes>
 800102c:	4603      	mov	r3, r0
 800102e:	2b03      	cmp	r3, #3
 8001030:	d112      	bne.n	8001058 <HMC5883L_testConnection+0x44>
        return (buffer[0] == 'H' && buffer[1] == '4' && buffer[2] == '3');
 8001032:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <HMC5883L_testConnection+0x50>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	2b48      	cmp	r3, #72	; 0x48
 8001038:	d109      	bne.n	800104e <HMC5883L_testConnection+0x3a>
 800103a:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <HMC5883L_testConnection+0x50>)
 800103c:	785b      	ldrb	r3, [r3, #1]
 800103e:	2b34      	cmp	r3, #52	; 0x34
 8001040:	d105      	bne.n	800104e <HMC5883L_testConnection+0x3a>
 8001042:	4b08      	ldr	r3, [pc, #32]	; (8001064 <HMC5883L_testConnection+0x50>)
 8001044:	789b      	ldrb	r3, [r3, #2]
 8001046:	2b33      	cmp	r3, #51	; 0x33
 8001048:	d101      	bne.n	800104e <HMC5883L_testConnection+0x3a>
 800104a:	2301      	movs	r3, #1
 800104c:	e000      	b.n	8001050 <HMC5883L_testConnection+0x3c>
 800104e:	2300      	movs	r3, #0
 8001050:	f003 0301 	and.w	r3, r3, #1
 8001054:	b2db      	uxtb	r3, r3
 8001056:	e000      	b.n	800105a <HMC5883L_testConnection+0x46>
    }
    return false;
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	200001fc 	.word	0x200001fc
 8001064:	20000200 	.word	0x20000200

08001068 <HMC5883L_setGain>:
 * @see getGain()
 * @see HMC5883L_RA_CONFIG_B
 * @see HMC5883L_CRB_GAIN_BIT
 * @see HMC5883L_CRB_GAIN_LENGTH
 */
void HMC5883L_setGain(uint8_t gain) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
    // use this method to guarantee that bits 4-0 are set to zero, which is a
    // requirement specified in the datasheet; it's actually more efficient than
    // using the I2Cdev.writeBits method
    I2Cdev_writeByte(devAddr, HMC5883L_RA_CONFIG_B, gain << (HMC5883L_CRB_GAIN_BIT - HMC5883L_CRB_GAIN_LENGTH + 1));
 8001072:	4b06      	ldr	r3, [pc, #24]	; (800108c <HMC5883L_setGain+0x24>)
 8001074:	7818      	ldrb	r0, [r3, #0]
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	015b      	lsls	r3, r3, #5
 800107a:	b2db      	uxtb	r3, r3
 800107c:	461a      	mov	r2, r3
 800107e:	2101      	movs	r1, #1
 8001080:	f000 f866 	bl	8001150 <I2Cdev_writeByte>
}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	200001fc 	.word	0x200001fc

08001090 <HMC5883L_setMode>:
 * @see HMC5883L_MODE_IDLE
 * @see HMC5883L_RA_MODE
 * @see HMC5883L_MODEREG_BIT
 * @see HMC5883L_MODEREG_LENGTH
 */
void HMC5883L_setMode(uint8_t newMode) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	71fb      	strb	r3, [r7, #7]
    // use this method to guarantee that bits 7-2 are set to zero, which is a
    // requirement specified in the datasheet; it's actually more efficient than
    // using the I2Cdev.writeBits method
    I2Cdev_writeByte(devAddr, HMC5883L_RA_MODE, newMode << (HMC5883L_MODEREG_BIT - HMC5883L_MODEREG_LENGTH + 1));
 800109a:	4b07      	ldr	r3, [pc, #28]	; (80010b8 <HMC5883L_setMode+0x28>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	79fa      	ldrb	r2, [r7, #7]
 80010a0:	2102      	movs	r1, #2
 80010a2:	4618      	mov	r0, r3
 80010a4:	f000 f854 	bl	8001150 <I2Cdev_writeByte>
    mode = newMode; // track to tell if we have to clear bit 7 after a read
 80010a8:	4a04      	ldr	r2, [pc, #16]	; (80010bc <HMC5883L_setMode+0x2c>)
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	7013      	strb	r3, [r2, #0]
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	200001fc 	.word	0x200001fc
 80010bc:	20000206 	.word	0x20000206

080010c0 <I2Cdev_init>:
uint16_t I2Cdev_readTimeout = I2CDEV_DEFAULT_READ_TIMEOUT;

/** Sets device handle to use for communications
 * You can call this function and set any other device at any moment
 */
void I2Cdev_init(I2C_HandleTypeDef * hi2c){
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	I2Cdev_hi2c = hi2c;
 80010c8:	4a04      	ldr	r2, [pc, #16]	; (80010dc <I2Cdev_init+0x1c>)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6013      	str	r3, [r2, #0]
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	20000208 	.word	0x20000208

080010e0 <I2Cdev_readBytes>:
 * @param data Buffer to store read data in
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev_readTimeout)
 * @return Number of bytes read (-1 indicates failure)
 */
uint8_t I2Cdev_readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data, uint16_t timeout)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af02      	add	r7, sp, #8
 80010e6:	603b      	str	r3, [r7, #0]
 80010e8:	4603      	mov	r3, r0
 80010ea:	71fb      	strb	r3, [r7, #7]
 80010ec:	460b      	mov	r3, r1
 80010ee:	71bb      	strb	r3, [r7, #6]
 80010f0:	4613      	mov	r3, r2
 80010f2:	717b      	strb	r3, [r7, #5]
    uint16_t tout = timeout > 0 ? timeout : I2CDEV_DEFAULT_READ_TIMEOUT;
 80010f4:	8b3b      	ldrh	r3, [r7, #24]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <I2Cdev_readBytes+0x1e>
 80010fa:	8b3b      	ldrh	r3, [r7, #24]
 80010fc:	e001      	b.n	8001102 <I2Cdev_readBytes+0x22>
 80010fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001102:	81fb      	strh	r3, [r7, #14]

    HAL_I2C_Master_Transmit(I2Cdev_hi2c, devAddr << 1, &regAddr, 1, tout);
 8001104:	4b11      	ldr	r3, [pc, #68]	; (800114c <I2Cdev_readBytes+0x6c>)
 8001106:	6818      	ldr	r0, [r3, #0]
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	b29b      	uxth	r3, r3
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	b299      	uxth	r1, r3
 8001110:	89fb      	ldrh	r3, [r7, #14]
 8001112:	1dba      	adds	r2, r7, #6
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	2301      	movs	r3, #1
 8001118:	f004 fd20 	bl	8005b5c <HAL_I2C_Master_Transmit>
    if (HAL_I2C_Master_Receive(I2Cdev_hi2c, devAddr << 1, data, length, tout) == HAL_OK) return length;
 800111c:	4b0b      	ldr	r3, [pc, #44]	; (800114c <I2Cdev_readBytes+0x6c>)
 800111e:	6818      	ldr	r0, [r3, #0]
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	b29b      	uxth	r3, r3
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	b299      	uxth	r1, r3
 8001128:	797b      	ldrb	r3, [r7, #5]
 800112a:	b29a      	uxth	r2, r3
 800112c:	89fb      	ldrh	r3, [r7, #14]
 800112e:	9300      	str	r3, [sp, #0]
 8001130:	4613      	mov	r3, r2
 8001132:	683a      	ldr	r2, [r7, #0]
 8001134:	f004 fe10 	bl	8005d58 <HAL_I2C_Master_Receive>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d101      	bne.n	8001142 <I2Cdev_readBytes+0x62>
 800113e:	797b      	ldrb	r3, [r7, #5]
 8001140:	e000      	b.n	8001144 <I2Cdev_readBytes+0x64>
    return -1;
 8001142:	23ff      	movs	r3, #255	; 0xff
}
 8001144:	4618      	mov	r0, r3
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20000208 	.word	0x20000208

08001150 <I2Cdev_writeByte>:
 * @param regAddr Register address to write to
 * @param data New byte value to write
 * @return Status of operation (true = success)
 */
uint16_t I2Cdev_writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
 800115a:	460b      	mov	r3, r1
 800115c:	71bb      	strb	r3, [r7, #6]
 800115e:	4613      	mov	r3, r2
 8001160:	717b      	strb	r3, [r7, #5]
    return I2Cdev_writeBytes(devAddr, regAddr, 1, &data);
 8001162:	1d7b      	adds	r3, r7, #5
 8001164:	79b9      	ldrb	r1, [r7, #6]
 8001166:	79f8      	ldrb	r0, [r7, #7]
 8001168:	2201      	movs	r2, #1
 800116a:	f000 f805 	bl	8001178 <I2Cdev_writeBytes>
 800116e:	4603      	mov	r3, r0
}
 8001170:	4618      	mov	r0, r3
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <I2Cdev_writeBytes>:
 * @param length Number of bytes to write
 * @param data Buffer to copy new data from
 * @return Status of operation (true = success)
 */
uint16_t I2Cdev_writeBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t* pData)
{
 8001178:	b590      	push	{r4, r7, lr}
 800117a:	b089      	sub	sp, #36	; 0x24
 800117c:	af04      	add	r7, sp, #16
 800117e:	603b      	str	r3, [r7, #0]
 8001180:	4603      	mov	r3, r0
 8001182:	71fb      	strb	r3, [r7, #7]
 8001184:	460b      	mov	r3, r1
 8001186:	71bb      	strb	r3, [r7, #6]
 8001188:	4613      	mov	r3, r2
 800118a:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef status = HAL_I2C_Mem_Write(I2Cdev_hi2c, devAddr << 1, regAddr, I2C_MEMADD_SIZE_8BIT, pData, length, 1000);
 800118c:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <I2Cdev_writeBytes+0x58>)
 800118e:	6818      	ldr	r0, [r3, #0]
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	b29b      	uxth	r3, r3
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	b299      	uxth	r1, r3
 8001198:	79bb      	ldrb	r3, [r7, #6]
 800119a:	b29c      	uxth	r4, r3
 800119c:	797b      	ldrb	r3, [r7, #5]
 800119e:	b29b      	uxth	r3, r3
 80011a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011a4:	9202      	str	r2, [sp, #8]
 80011a6:	9301      	str	r3, [sp, #4]
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	2301      	movs	r3, #1
 80011ae:	4622      	mov	r2, r4
 80011b0:	f004 fff8 	bl	80061a4 <HAL_I2C_Mem_Write>
 80011b4:	4603      	mov	r3, r0
 80011b6:	73fb      	strb	r3, [r7, #15]
    return status == HAL_OK;
 80011b8:	7bfb      	ldrb	r3, [r7, #15]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	bf0c      	ite	eq
 80011be:	2301      	moveq	r3, #1
 80011c0:	2300      	movne	r3, #0
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	b29b      	uxth	r3, r3
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3714      	adds	r7, #20
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd90      	pop	{r4, r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000208 	.word	0x20000208

080011d4 <kalman_init>:
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	ed87 0a02 	vstr	s0, [r7, #8]
 80011e0:	edc7 0a01 	vstr	s1, [r7, #4]
 80011e4:	ed87 1a00 	vstr	s2, [r7]
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	683a      	ldr	r2, [r7, #0]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	bf00      	nop
 80011fc:	3714      	adds	r7, #20
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 8001206:	b480      	push	{r7}
 8001208:	b083      	sub	sp, #12
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2203      	movs	r2, #3
 8001212:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_2;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2201      	movs	r2, #1
 8001218:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_HIGH_RES;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2204      	movs	r2, #4
 800121e:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_ULTRA_LOW_POWER;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2201      	movs	r2, #1
 8001224:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_SKIPPED;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2200      	movs	r2, #0
 800122a:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_05;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	715a      	strb	r2, [r3, #5]
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 800123e:	b580      	push	{r7, lr}
 8001240:	b08a      	sub	sp, #40	; 0x28
 8001242:	af04      	add	r7, sp, #16
 8001244:	60f8      	str	r0, [r7, #12]
 8001246:	460b      	mov	r3, r1
 8001248:	607a      	str	r2, [r7, #4]
 800124a:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001258:	7afb      	ldrb	r3, [r7, #11]
 800125a:	b29a      	uxth	r2, r3
 800125c:	8af9      	ldrh	r1, [r7, #22]
 800125e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001262:	9302      	str	r3, [sp, #8]
 8001264:	2302      	movs	r3, #2
 8001266:	9301      	str	r3, [sp, #4]
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	9300      	str	r3, [sp, #0]
 800126e:	2301      	movs	r3, #1
 8001270:	f005 f892 	bl	8006398 <HAL_I2C_Mem_Read>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d10b      	bne.n	8001292 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 800127a:	7d7b      	ldrb	r3, [r7, #21]
 800127c:	021b      	lsls	r3, r3, #8
 800127e:	b21a      	sxth	r2, r3
 8001280:	7d3b      	ldrb	r3, [r7, #20]
 8001282:	b21b      	sxth	r3, r3
 8001284:	4313      	orrs	r3, r2
 8001286:	b21b      	sxth	r3, r3
 8001288:	b29a      	uxth	r2, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	801a      	strh	r2, [r3, #0]
		return true;
 800128e:	2301      	movs	r3, #1
 8001290:	e000      	b.n	8001294 <read_register16+0x56>
	} else
		return false;
 8001292:	2300      	movs	r3, #0

}
 8001294:	4618      	mov	r0, r3
 8001296:	3718      	adds	r7, #24
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 800129c:	b590      	push	{r4, r7, lr}
 800129e:	b08b      	sub	sp, #44	; 0x2c
 80012a0:	af04      	add	r7, sp, #16
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	607a      	str	r2, [r7, #4]
 80012a6:	461a      	mov	r2, r3
 80012a8:	460b      	mov	r3, r1
 80012aa:	72fb      	strb	r3, [r7, #11]
 80012ac:	4613      	mov	r3, r2
 80012ae:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80012bc:	7afb      	ldrb	r3, [r7, #11]
 80012be:	b29c      	uxth	r4, r3
 80012c0:	7abb      	ldrb	r3, [r7, #10]
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	8af9      	ldrh	r1, [r7, #22]
 80012c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80012ca:	9202      	str	r2, [sp, #8]
 80012cc:	9301      	str	r3, [sp, #4]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	2301      	movs	r3, #1
 80012d4:	4622      	mov	r2, r4
 80012d6:	f005 f85f 	bl	8006398 <HAL_I2C_Mem_Read>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d101      	bne.n	80012e4 <read_data+0x48>
		return 0;
 80012e0:	2300      	movs	r3, #0
 80012e2:	e000      	b.n	80012e6 <read_data+0x4a>
	else
		return 1;
 80012e4:	2301      	movs	r3, #1

}
 80012e6:	4618      	mov	r0, r3
 80012e8:	371c      	adds	r7, #28
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd90      	pop	{r4, r7, pc}

080012ee <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b082      	sub	sp, #8
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	461a      	mov	r2, r3
 80012fa:	2188      	movs	r1, #136	; 0x88
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff ff9e 	bl	800123e <read_register16>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d06f      	beq.n	80013e8 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3302      	adds	r3, #2
 800130c:	461a      	mov	r2, r3
 800130e:	218a      	movs	r1, #138	; 0x8a
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f7ff ff94 	bl	800123e <read_register16>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d065      	beq.n	80013e8 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3304      	adds	r3, #4
 8001320:	461a      	mov	r2, r3
 8001322:	218c      	movs	r1, #140	; 0x8c
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff ff8a 	bl	800123e <read_register16>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d05b      	beq.n	80013e8 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3306      	adds	r3, #6
 8001334:	461a      	mov	r2, r3
 8001336:	218e      	movs	r1, #142	; 0x8e
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f7ff ff80 	bl	800123e <read_register16>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d051      	beq.n	80013e8 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3308      	adds	r3, #8
 8001348:	461a      	mov	r2, r3
 800134a:	2190      	movs	r1, #144	; 0x90
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f7ff ff76 	bl	800123e <read_register16>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d047      	beq.n	80013e8 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	330a      	adds	r3, #10
 800135c:	461a      	mov	r2, r3
 800135e:	2192      	movs	r1, #146	; 0x92
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff ff6c 	bl	800123e <read_register16>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d03d      	beq.n	80013e8 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	330c      	adds	r3, #12
 8001370:	461a      	mov	r2, r3
 8001372:	2194      	movs	r1, #148	; 0x94
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f7ff ff62 	bl	800123e <read_register16>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d033      	beq.n	80013e8 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	330e      	adds	r3, #14
 8001384:	461a      	mov	r2, r3
 8001386:	2196      	movs	r1, #150	; 0x96
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff ff58 	bl	800123e <read_register16>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d029      	beq.n	80013e8 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	3310      	adds	r3, #16
 8001398:	461a      	mov	r2, r3
 800139a:	2198      	movs	r1, #152	; 0x98
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f7ff ff4e 	bl	800123e <read_register16>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d01f      	beq.n	80013e8 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3312      	adds	r3, #18
 80013ac:	461a      	mov	r2, r3
 80013ae:	219a      	movs	r1, #154	; 0x9a
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f7ff ff44 	bl	800123e <read_register16>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d015      	beq.n	80013e8 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3314      	adds	r3, #20
 80013c0:	461a      	mov	r2, r3
 80013c2:	219c      	movs	r1, #156	; 0x9c
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7ff ff3a 	bl	800123e <read_register16>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d00b      	beq.n	80013e8 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 80013d4:	461a      	mov	r2, r3
 80013d6:	219e      	movs	r1, #158	; 0x9e
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f7ff ff30 	bl	800123e <read_register16>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <read_calibration_data+0xfa>

		return true;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e000      	b.n	80013ea <read_calibration_data+0xfc>
	}

	return false;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b084      	sub	sp, #16
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f103 0218 	add.w	r2, r3, #24
 8001400:	2301      	movs	r3, #1
 8001402:	21a1      	movs	r1, #161	; 0xa1
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f7ff ff49 	bl	800129c <read_data>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d14b      	bne.n	80014a8 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	331a      	adds	r3, #26
 8001414:	461a      	mov	r2, r3
 8001416:	21e1      	movs	r1, #225	; 0xe1
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f7ff ff10 	bl	800123e <read_register16>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d041      	beq.n	80014a8 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f103 021c 	add.w	r2, r3, #28
 800142a:	2301      	movs	r3, #1
 800142c:	21e3      	movs	r1, #227	; 0xe3
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f7ff ff34 	bl	800129c <read_data>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d136      	bne.n	80014a8 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 800143a:	f107 030e 	add.w	r3, r7, #14
 800143e:	461a      	mov	r2, r3
 8001440:	21e4      	movs	r1, #228	; 0xe4
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff fefb 	bl	800123e <read_register16>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d02c      	beq.n	80014a8 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 800144e:	f107 030c 	add.w	r3, r7, #12
 8001452:	461a      	mov	r2, r3
 8001454:	21e5      	movs	r1, #229	; 0xe5
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f7ff fef1 	bl	800123e <read_register16>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d022      	beq.n	80014a8 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8001468:	2301      	movs	r3, #1
 800146a:	21e7      	movs	r1, #231	; 0xe7
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f7ff ff15 	bl	800129c <read_data>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d117      	bne.n	80014a8 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8001478:	89fb      	ldrh	r3, [r7, #14]
 800147a:	011b      	lsls	r3, r3, #4
 800147c:	b21b      	sxth	r3, r3
 800147e:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 8001482:	b21a      	sxth	r2, r3
 8001484:	89fb      	ldrh	r3, [r7, #14]
 8001486:	121b      	asrs	r3, r3, #8
 8001488:	b21b      	sxth	r3, r3
 800148a:	f003 030f 	and.w	r3, r3, #15
 800148e:	b21b      	sxth	r3, r3
 8001490:	4313      	orrs	r3, r2
 8001492:	b21a      	sxth	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 8001498:	89bb      	ldrh	r3, [r7, #12]
 800149a:	091b      	lsrs	r3, r3, #4
 800149c:	b29b      	uxth	r3, r3
 800149e:	b21a      	sxth	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	841a      	strh	r2, [r3, #32]

		return true;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e000      	b.n	80014aa <read_hum_calibration_data+0xb8>
	}

	return false;
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b088      	sub	sp, #32
 80014b6:	af04      	add	r7, sp, #16
 80014b8:	6078      	str	r0, [r7, #4]
 80014ba:	460b      	mov	r3, r1
 80014bc:	70fb      	strb	r3, [r7, #3]
 80014be:	4613      	mov	r3, r2
 80014c0:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80014ce:	78fb      	ldrb	r3, [r7, #3]
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	89f9      	ldrh	r1, [r7, #14]
 80014d4:	f242 7310 	movw	r3, #10000	; 0x2710
 80014d8:	9302      	str	r3, [sp, #8]
 80014da:	2301      	movs	r3, #1
 80014dc:	9301      	str	r3, [sp, #4]
 80014de:	1cbb      	adds	r3, r7, #2
 80014e0:	9300      	str	r3, [sp, #0]
 80014e2:	2301      	movs	r3, #1
 80014e4:	f004 fe5e 	bl	80061a4 <HAL_I2C_Mem_Write>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d101      	bne.n	80014f2 <write_register8+0x40>
		return false;
 80014ee:	2300      	movs	r3, #0
 80014f0:	e000      	b.n	80014f4 <write_register8+0x42>
	else
		return true;
 80014f2:	2301      	movs	r3, #1
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3710      	adds	r7, #16
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800150a:	2b76      	cmp	r3, #118	; 0x76
 800150c:	d005      	beq.n	800151a <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001512:	2b77      	cmp	r3, #119	; 0x77
 8001514:	d001      	beq.n	800151a <bmp280_init+0x1e>

		return false;
 8001516:	2300      	movs	r3, #0
 8001518:	e099      	b.n	800164e <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001520:	2301      	movs	r3, #1
 8001522:	21d0      	movs	r1, #208	; 0xd0
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f7ff feb9 	bl	800129c <read_data>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <bmp280_init+0x38>
		return false;
 8001530:	2300      	movs	r3, #0
 8001532:	e08c      	b.n	800164e <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800153a:	2b58      	cmp	r3, #88	; 0x58
 800153c:	d006      	beq.n	800154c <bmp280_init+0x50>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001544:	2b60      	cmp	r3, #96	; 0x60
 8001546:	d001      	beq.n	800154c <bmp280_init+0x50>

		return false;
 8001548:	2300      	movs	r3, #0
 800154a:	e080      	b.n	800164e <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 800154c:	22b6      	movs	r2, #182	; 0xb6
 800154e:	21e0      	movs	r1, #224	; 0xe0
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7ff ffae 	bl	80014b2 <write_register8>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <bmp280_init+0x64>
		return false;
 800155c:	2300      	movs	r3, #0
 800155e:	e076      	b.n	800164e <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8001560:	f107 020c 	add.w	r2, r7, #12
 8001564:	2301      	movs	r3, #1
 8001566:	21f3      	movs	r1, #243	; 0xf3
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7ff fe97 	bl	800129c <read_data>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d1f5      	bne.n	8001560 <bmp280_init+0x64>
				&& (status & 1) == 0)
 8001574:	7b3b      	ldrb	r3, [r7, #12]
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1f0      	bne.n	8001560 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f7ff feb5 	bl	80012ee <read_calibration_data>
 8001584:	4603      	mov	r3, r0
 8001586:	f083 0301 	eor.w	r3, r3, #1
 800158a:	b2db      	uxtb	r3, r3
 800158c:	2b00      	cmp	r3, #0
 800158e:	d100      	bne.n	8001592 <bmp280_init+0x96>
 8001590:	e001      	b.n	8001596 <bmp280_init+0x9a>
		return false;
 8001592:	2300      	movs	r3, #0
 8001594:	e05b      	b.n	800164e <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800159c:	2b60      	cmp	r3, #96	; 0x60
 800159e:	d10a      	bne.n	80015b6 <bmp280_init+0xba>
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f7ff ff26 	bl	80013f2 <read_hum_calibration_data>
 80015a6:	4603      	mov	r3, r0
 80015a8:	f083 0301 	eor.w	r3, r3, #1
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <bmp280_init+0xba>
		return false;
 80015b2:	2300      	movs	r3, #0
 80015b4:	e04b      	b.n	800164e <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	795b      	ldrb	r3, [r3, #5]
 80015ba:	015b      	lsls	r3, r3, #5
 80015bc:	b25a      	sxtb	r2, r3
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	785b      	ldrb	r3, [r3, #1]
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	b25b      	sxtb	r3, r3
 80015c6:	4313      	orrs	r3, r2
 80015c8:	b25b      	sxtb	r3, r3
 80015ca:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 80015cc:	7bfb      	ldrb	r3, [r7, #15]
 80015ce:	461a      	mov	r2, r3
 80015d0:	21f5      	movs	r1, #245	; 0xf5
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7ff ff6d 	bl	80014b2 <write_register8>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <bmp280_init+0xe6>
		return false;
 80015de:	2300      	movs	r3, #0
 80015e0:	e035      	b.n	800164e <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d102      	bne.n	80015f0 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	2200      	movs	r2, #0
 80015ee:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	78db      	ldrb	r3, [r3, #3]
 80015f4:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 80015f6:	b25a      	sxtb	r2, r3
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	789b      	ldrb	r3, [r3, #2]
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	b25b      	sxtb	r3, r3
 8001600:	4313      	orrs	r3, r2
 8001602:	b25a      	sxtb	r2, r3
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	b25b      	sxtb	r3, r3
 800160a:	4313      	orrs	r3, r2
 800160c:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 800160e:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001616:	2b60      	cmp	r3, #96	; 0x60
 8001618:	d10d      	bne.n	8001636 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	791b      	ldrb	r3, [r3, #4]
 800161e:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8001620:	7b7b      	ldrb	r3, [r7, #13]
 8001622:	461a      	mov	r2, r3
 8001624:	21f2      	movs	r1, #242	; 0xf2
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f7ff ff43 	bl	80014b2 <write_register8>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <bmp280_init+0x13a>
			return false;
 8001632:	2300      	movs	r3, #0
 8001634:	e00b      	b.n	800164e <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8001636:	7bbb      	ldrb	r3, [r7, #14]
 8001638:	461a      	mov	r2, r3
 800163a:	21f4      	movs	r1, #244	; 0xf4
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f7ff ff38 	bl	80014b2 <write_register8>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <bmp280_init+0x150>
		return false;
 8001648:	2300      	movs	r3, #0
 800164a:	e000      	b.n	800164e <bmp280_init+0x152>
	}

	return true;
 800164c:	2301      	movs	r3, #1
}
 800164e:	4618      	mov	r0, r3
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <bmp280_is_measuring>:
		return false;
	}
	return true;
}

bool bmp280_is_measuring(BMP280_HandleTypedef *dev) {
 8001656:	b580      	push	{r7, lr}
 8001658:	b084      	sub	sp, #16
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
	uint8_t status;
	if (read_data(dev, BMP280_REG_STATUS, &status, 1))
 800165e:	f107 020f 	add.w	r2, r7, #15
 8001662:	2301      	movs	r3, #1
 8001664:	21f3      	movs	r1, #243	; 0xf3
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f7ff fe18 	bl	800129c <read_data>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <bmp280_is_measuring+0x20>
		return false;
 8001672:	2300      	movs	r3, #0
 8001674:	e007      	b.n	8001686 <bmp280_is_measuring+0x30>
	if (status & (1 << 3)) {
 8001676:	7bfb      	ldrb	r3, [r7, #15]
 8001678:	f003 0308 	and.w	r3, r3, #8
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <bmp280_is_measuring+0x2e>
		return true;
 8001680:	2301      	movs	r3, #1
 8001682:	e000      	b.n	8001686 <bmp280_is_measuring+0x30>
	}
	return false;
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 800168e:	b480      	push	{r7}
 8001690:	b087      	sub	sp, #28
 8001692:	af00      	add	r7, sp, #0
 8001694:	60f8      	str	r0, [r7, #12]
 8001696:	60b9      	str	r1, [r7, #8]
 8001698:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	10da      	asrs	r2, r3, #3
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	881b      	ldrh	r3, [r3, #0]
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 80016a6:	68fa      	ldr	r2, [r7, #12]
 80016a8:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80016ac:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80016b0:	12db      	asrs	r3, r3, #11
 80016b2:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	111b      	asrs	r3, r3, #4
 80016b8:	68fa      	ldr	r2, [r7, #12]
 80016ba:	8812      	ldrh	r2, [r2, #0]
 80016bc:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 80016be:	68ba      	ldr	r2, [r7, #8]
 80016c0:	1112      	asrs	r2, r2, #4
 80016c2:	68f9      	ldr	r1, [r7, #12]
 80016c4:	8809      	ldrh	r1, [r1, #0]
 80016c6:	1a52      	subs	r2, r2, r1
 80016c8:	fb02 f303 	mul.w	r3, r2, r3
 80016cc:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80016d4:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80016d8:	139b      	asrs	r3, r3, #14
 80016da:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 80016dc:	697a      	ldr	r2, [r7, #20]
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	441a      	add	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	4613      	mov	r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	4413      	add	r3, r2
 80016f0:	3380      	adds	r3, #128	; 0x80
 80016f2:	121b      	asrs	r3, r3, #8
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	371c      	adds	r7, #28
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8001700:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8001704:	b08a      	sub	sp, #40	; 0x28
 8001706:	af00      	add	r7, sp, #0
 8001708:	60f8      	str	r0, [r7, #12]
 800170a:	60b9      	str	r1, [r7, #8]
 800170c:	607a      	str	r2, [r7, #4]
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4619      	mov	r1, r3
 8001712:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001716:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 800171a:	f142 34ff 	adc.w	r4, r2, #4294967295
 800171e:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8001722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001724:	6a3a      	ldr	r2, [r7, #32]
 8001726:	fb02 f203 	mul.w	r2, r2, r3
 800172a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172c:	6a39      	ldr	r1, [r7, #32]
 800172e:	fb01 f303 	mul.w	r3, r1, r3
 8001732:	441a      	add	r2, r3
 8001734:	6a39      	ldr	r1, [r7, #32]
 8001736:	6a3b      	ldr	r3, [r7, #32]
 8001738:	fba1 3403 	umull	r3, r4, r1, r3
 800173c:	4422      	add	r2, r4
 800173e:	4614      	mov	r4, r2
 8001740:	68fa      	ldr	r2, [r7, #12]
 8001742:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8001746:	b211      	sxth	r1, r2
 8001748:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800174c:	fb01 f504 	mul.w	r5, r1, r4
 8001750:	fb03 f002 	mul.w	r0, r3, r2
 8001754:	4428      	add	r0, r5
 8001756:	fba3 3401 	umull	r3, r4, r3, r1
 800175a:	1902      	adds	r2, r0, r4
 800175c:	4614      	mov	r4, r2
 800175e:	e9c7 3406 	strd	r3, r4, [r7, #24]
 8001762:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800176c:	b21b      	sxth	r3, r3
 800176e:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001772:	6a3a      	ldr	r2, [r7, #32]
 8001774:	fb04 f102 	mul.w	r1, r4, r2
 8001778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800177a:	fb03 f202 	mul.w	r2, r3, r2
 800177e:	1888      	adds	r0, r1, r2
 8001780:	6a3a      	ldr	r2, [r7, #32]
 8001782:	fba2 1203 	umull	r1, r2, r2, r3
 8001786:	1883      	adds	r3, r0, r2
 8001788:	461a      	mov	r2, r3
 800178a:	f04f 0500 	mov.w	r5, #0
 800178e:	f04f 0600 	mov.w	r6, #0
 8001792:	0456      	lsls	r6, r2, #17
 8001794:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 8001798:	044d      	lsls	r5, r1, #17
 800179a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800179e:	186b      	adds	r3, r5, r1
 80017a0:	eb46 0402 	adc.w	r4, r6, r2
 80017a4:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80017ae:	b219      	sxth	r1, r3
 80017b0:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80017b4:	f04f 0500 	mov.w	r5, #0
 80017b8:	f04f 0600 	mov.w	r6, #0
 80017bc:	00ce      	lsls	r6, r1, #3
 80017be:	2500      	movs	r5, #0
 80017c0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80017c4:	186b      	adds	r3, r5, r1
 80017c6:	eb46 0402 	adc.w	r4, r6, r2
 80017ca:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80017ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d0:	6a3a      	ldr	r2, [r7, #32]
 80017d2:	fb02 f203 	mul.w	r2, r2, r3
 80017d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d8:	6a39      	ldr	r1, [r7, #32]
 80017da:	fb01 f303 	mul.w	r3, r1, r3
 80017de:	441a      	add	r2, r3
 80017e0:	6a39      	ldr	r1, [r7, #32]
 80017e2:	6a3b      	ldr	r3, [r7, #32]
 80017e4:	fba1 3403 	umull	r3, r4, r1, r3
 80017e8:	4422      	add	r2, r4
 80017ea:	4614      	mov	r4, r2
 80017ec:	68fa      	ldr	r2, [r7, #12]
 80017ee:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 80017f2:	b211      	sxth	r1, r2
 80017f4:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80017f8:	fb01 f504 	mul.w	r5, r1, r4
 80017fc:	fb03 f002 	mul.w	r0, r3, r2
 8001800:	4428      	add	r0, r5
 8001802:	fba3 3401 	umull	r3, r4, r3, r1
 8001806:	1902      	adds	r2, r0, r4
 8001808:	4614      	mov	r4, r2
 800180a:	f04f 0100 	mov.w	r1, #0
 800180e:	f04f 0200 	mov.w	r2, #0
 8001812:	0a19      	lsrs	r1, r3, #8
 8001814:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 8001818:	1222      	asrs	r2, r4, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001820:	b21b      	sxth	r3, r3
 8001822:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001826:	6a38      	ldr	r0, [r7, #32]
 8001828:	fb04 f500 	mul.w	r5, r4, r0
 800182c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800182e:	fb03 f000 	mul.w	r0, r3, r0
 8001832:	4428      	add	r0, r5
 8001834:	6a3d      	ldr	r5, [r7, #32]
 8001836:	fba5 5603 	umull	r5, r6, r5, r3
 800183a:	1983      	adds	r3, r0, r6
 800183c:	461e      	mov	r6, r3
 800183e:	f04f 0b00 	mov.w	fp, #0
 8001842:	f04f 0c00 	mov.w	ip, #0
 8001846:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 800184a:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 800184e:	ea4f 3b05 	mov.w	fp, r5, lsl #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001852:	eb1b 0301 	adds.w	r3, fp, r1
 8001856:	eb4c 0402 	adc.w	r4, ip, r2
 800185a:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 800185e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001862:	1c19      	adds	r1, r3, #0
 8001864:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	88db      	ldrh	r3, [r3, #6]
 800186c:	b29b      	uxth	r3, r3
 800186e:	f04f 0400 	mov.w	r4, #0
 8001872:	fb03 f502 	mul.w	r5, r3, r2
 8001876:	fb01 f004 	mul.w	r0, r1, r4
 800187a:	4428      	add	r0, r5
 800187c:	fba1 3403 	umull	r3, r4, r1, r3
 8001880:	1902      	adds	r2, r0, r4
 8001882:	4614      	mov	r4, r2
 8001884:	f04f 0100 	mov.w	r1, #0
 8001888:	f04f 0200 	mov.w	r2, #0
 800188c:	1061      	asrs	r1, r4, #1
 800188e:	17e2      	asrs	r2, r4, #31
 8001890:	e9c7 1208 	strd	r1, r2, [r7, #32]

	if (var1 == 0) {
 8001894:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001898:	4323      	orrs	r3, r4
 800189a:	d101      	bne.n	80018a0 <compensate_pressure+0x1a0>
		return 0;  // avoid exception caused by division by zero
 800189c:	2300      	movs	r3, #0
 800189e:	e0d4      	b.n	8001a4a <compensate_pressure+0x34a>
	}

	p = 1048576 - adc_press;
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80018a6:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80018aa:	e9c7 3404 	strd	r3, r4, [r7, #16]
	p = (((p << 31) - var2) * 3125) / var1;
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	ea4f 0963 	mov.w	r9, r3, asr #1
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	ea4f 78c3 	mov.w	r8, r3, lsl #31
 80018ba:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80018be:	4645      	mov	r5, r8
 80018c0:	464e      	mov	r6, r9
 80018c2:	1aed      	subs	r5, r5, r3
 80018c4:	eb66 0604 	sbc.w	r6, r6, r4
 80018c8:	46a8      	mov	r8, r5
 80018ca:	46b1      	mov	r9, r6
 80018cc:	eb18 0308 	adds.w	r3, r8, r8
 80018d0:	eb49 0409 	adc.w	r4, r9, r9
 80018d4:	4698      	mov	r8, r3
 80018d6:	46a1      	mov	r9, r4
 80018d8:	eb18 0805 	adds.w	r8, r8, r5
 80018dc:	eb49 0906 	adc.w	r9, r9, r6
 80018e0:	f04f 0100 	mov.w	r1, #0
 80018e4:	f04f 0200 	mov.w	r2, #0
 80018e8:	ea4f 1289 	mov.w	r2, r9, lsl #6
 80018ec:	ea42 6298 	orr.w	r2, r2, r8, lsr #26
 80018f0:	ea4f 1188 	mov.w	r1, r8, lsl #6
 80018f4:	eb18 0801 	adds.w	r8, r8, r1
 80018f8:	eb49 0902 	adc.w	r9, r9, r2
 80018fc:	f04f 0100 	mov.w	r1, #0
 8001900:	f04f 0200 	mov.w	r2, #0
 8001904:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8001908:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 800190c:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8001910:	4688      	mov	r8, r1
 8001912:	4691      	mov	r9, r2
 8001914:	eb18 0805 	adds.w	r8, r8, r5
 8001918:	eb49 0906 	adc.w	r9, r9, r6
 800191c:	f04f 0100 	mov.w	r1, #0
 8001920:	f04f 0200 	mov.w	r2, #0
 8001924:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8001928:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 800192c:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8001930:	4688      	mov	r8, r1
 8001932:	4691      	mov	r9, r2
 8001934:	eb18 0005 	adds.w	r0, r8, r5
 8001938:	eb49 0106 	adc.w	r1, r9, r6
 800193c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001940:	f7ff f982 	bl	8000c48 <__aeabi_ldivmod>
 8001944:	4603      	mov	r3, r0
 8001946:	460c      	mov	r4, r1
 8001948:	e9c7 3404 	strd	r3, r4, [r7, #16]
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001952:	b219      	sxth	r1, r3
 8001954:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001958:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 800195c:	f04f 0300 	mov.w	r3, #0
 8001960:	f04f 0400 	mov.w	r4, #0
 8001964:	0b6b      	lsrs	r3, r5, #13
 8001966:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 800196a:	1374      	asrs	r4, r6, #13
 800196c:	fb03 f502 	mul.w	r5, r3, r2
 8001970:	fb01 f004 	mul.w	r0, r1, r4
 8001974:	4428      	add	r0, r5
 8001976:	fba1 1203 	umull	r1, r2, r1, r3
 800197a:	1883      	adds	r3, r0, r2
 800197c:	461a      	mov	r2, r3
 800197e:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 8001982:	f04f 0300 	mov.w	r3, #0
 8001986:	f04f 0400 	mov.w	r4, #0
 800198a:	0b6b      	lsrs	r3, r5, #13
 800198c:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8001990:	1374      	asrs	r4, r6, #13
 8001992:	fb03 f502 	mul.w	r5, r3, r2
 8001996:	fb01 f004 	mul.w	r0, r1, r4
 800199a:	4428      	add	r0, r5
 800199c:	fba1 1203 	umull	r1, r2, r1, r3
 80019a0:	1883      	adds	r3, r0, r2
 80019a2:	461a      	mov	r2, r3
 80019a4:	f04f 0300 	mov.w	r3, #0
 80019a8:	f04f 0400 	mov.w	r4, #0
 80019ac:	0e4b      	lsrs	r3, r1, #25
 80019ae:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80019b2:	1654      	asrs	r4, r2, #25
 80019b4:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80019be:	b21b      	sxth	r3, r3
 80019c0:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	fb04 f102 	mul.w	r1, r4, r2
 80019ca:	697a      	ldr	r2, [r7, #20]
 80019cc:	fb03 f202 	mul.w	r2, r3, r2
 80019d0:	1888      	adds	r0, r1, r2
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	fba2 1203 	umull	r1, r2, r2, r3
 80019d8:	1883      	adds	r3, r0, r2
 80019da:	461a      	mov	r2, r3
 80019dc:	f04f 0300 	mov.w	r3, #0
 80019e0:	f04f 0400 	mov.w	r4, #0
 80019e4:	0ccb      	lsrs	r3, r1, #19
 80019e6:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 80019ea:	14d4      	asrs	r4, r2, #19
 80019ec:	e9c7 3406 	strd	r3, r4, [r7, #24]

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 80019f0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80019f4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80019f8:	eb11 0803 	adds.w	r8, r1, r3
 80019fc:	eb42 0904 	adc.w	r9, r2, r4
 8001a00:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001a04:	eb13 0508 	adds.w	r5, r3, r8
 8001a08:	eb44 0609 	adc.w	r6, r4, r9
 8001a0c:	f04f 0100 	mov.w	r1, #0
 8001a10:	f04f 0200 	mov.w	r2, #0
 8001a14:	0a29      	lsrs	r1, r5, #8
 8001a16:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 8001a1a:	1232      	asrs	r2, r6, #8
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001a22:	b21d      	sxth	r5, r3
 8001a24:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8001a28:	f04f 0800 	mov.w	r8, #0
 8001a2c:	f04f 0900 	mov.w	r9, #0
 8001a30:	ea4f 1906 	mov.w	r9, r6, lsl #4
 8001a34:	ea49 7915 	orr.w	r9, r9, r5, lsr #28
 8001a38:	ea4f 1805 	mov.w	r8, r5, lsl #4
 8001a3c:	eb18 0301 	adds.w	r3, r8, r1
 8001a40:	eb49 0402 	adc.w	r4, r9, r2
 8001a44:	e9c7 3404 	strd	r3, r4, [r7, #16]
	return p;
 8001a48:	693b      	ldr	r3, [r7, #16]
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3728      	adds	r7, #40	; 0x28
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}

08001a54 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8001a54:	b480      	push	{r7}
 8001a56:	b087      	sub	sp, #28
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001a66:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	039a      	lsls	r2, r3, #14
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001a72:	051b      	lsls	r3, r3, #20
 8001a74:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	fb03 f301 	mul.w	r3, r3, r1
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001a8a:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8001a8c:	68fa      	ldr	r2, [r7, #12]
 8001a8e:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 8001a92:	4611      	mov	r1, r2
 8001a94:	697a      	ldr	r2, [r7, #20]
 8001a96:	fb02 f201 	mul.w	r2, r2, r1
 8001a9a:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001a9c:	68f9      	ldr	r1, [r7, #12]
 8001a9e:	7f09      	ldrb	r1, [r1, #28]
 8001aa0:	4608      	mov	r0, r1
 8001aa2:	6979      	ldr	r1, [r7, #20]
 8001aa4:	fb01 f100 	mul.w	r1, r1, r0
 8001aa8:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001aaa:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001aae:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001ab2:	1292      	asrs	r2, r2, #10
 8001ab4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001ab8:	68f9      	ldr	r1, [r7, #12]
 8001aba:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001abe:	fb01 f202 	mul.w	r2, r1, r2
 8001ac2:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001ac6:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001ac8:	fb02 f303 	mul.w	r3, r2, r3
 8001acc:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	13db      	asrs	r3, r3, #15
 8001ad2:	697a      	ldr	r2, [r7, #20]
 8001ad4:	13d2      	asrs	r2, r2, #15
 8001ad6:	fb02 f303 	mul.w	r3, r2, r3
 8001ada:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8001adc:	68fa      	ldr	r2, [r7, #12]
 8001ade:	7e12      	ldrb	r2, [r2, #24]
 8001ae0:	fb02 f303 	mul.w	r3, r2, r3
 8001ae4:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001af2:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001afa:	bfa8      	it	ge
 8001afc:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001b00:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	131b      	asrs	r3, r3, #12
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	371c      	adds	r7, #28
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b08c      	sub	sp, #48	; 0x30
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	60f8      	str	r0, [r7, #12]
 8001b1a:	60b9      	str	r1, [r7, #8]
 8001b1c:	607a      	str	r2, [r7, #4]
 8001b1e:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001b26:	2b60      	cmp	r3, #96	; 0x60
 8001b28:	d007      	beq.n	8001b3a <bmp280_read_fixed+0x28>
		if (humidity)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d002      	beq.n	8001b36 <bmp280_read_fixed+0x24>
			*humidity = 0;
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <bmp280_read_fixed+0x32>
 8001b40:	2308      	movs	r3, #8
 8001b42:	e000      	b.n	8001b46 <bmp280_read_fixed+0x34>
 8001b44:	2306      	movs	r3, #6
 8001b46:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8001b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	f107 0218 	add.w	r2, r7, #24
 8001b50:	21f7      	movs	r1, #247	; 0xf7
 8001b52:	68f8      	ldr	r0, [r7, #12]
 8001b54:	f7ff fba2 	bl	800129c <read_data>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <bmp280_read_fixed+0x50>
		return false;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	e038      	b.n	8001bd4 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001b62:	7e3b      	ldrb	r3, [r7, #24]
 8001b64:	031a      	lsls	r2, r3, #12
 8001b66:	7e7b      	ldrb	r3, [r7, #25]
 8001b68:	011b      	lsls	r3, r3, #4
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	7eba      	ldrb	r2, [r7, #26]
 8001b6e:	0912      	lsrs	r2, r2, #4
 8001b70:	b2d2      	uxtb	r2, r2
 8001b72:	4313      	orrs	r3, r2
 8001b74:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001b76:	7efb      	ldrb	r3, [r7, #27]
 8001b78:	031a      	lsls	r2, r3, #12
 8001b7a:	7f3b      	ldrb	r3, [r7, #28]
 8001b7c:	011b      	lsls	r3, r3, #4
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	7f7a      	ldrb	r2, [r7, #29]
 8001b82:	0912      	lsrs	r2, r2, #4
 8001b84:	b2d2      	uxtb	r2, r2
 8001b86:	4313      	orrs	r3, r2
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8001b8a:	f107 0314 	add.w	r3, r7, #20
 8001b8e:	461a      	mov	r2, r3
 8001b90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b92:	68f8      	ldr	r0, [r7, #12]
 8001b94:	f7ff fd7b 	bl	800168e <compensate_temperature>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ba4:	68f8      	ldr	r0, [r7, #12]
 8001ba6:	f7ff fdab 	bl	8001700 <compensate_pressure>
 8001baa:	4602      	mov	r2, r0
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d00d      	beq.n	8001bd2 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001bb6:	7fbb      	ldrb	r3, [r7, #30]
 8001bb8:	021b      	lsls	r3, r3, #8
 8001bba:	7ffa      	ldrb	r2, [r7, #31]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	6a39      	ldr	r1, [r7, #32]
 8001bc6:	68f8      	ldr	r0, [r7, #12]
 8001bc8:	f7ff ff44 	bl	8001a54 <compensate_humidity>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001bd2:	2301      	movs	r3, #1
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3730      	adds	r7, #48	; 0x30
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b088      	sub	sp, #32
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
 8001be8:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d002      	beq.n	8001bf6 <bmp280_read_float+0x1a>
 8001bf0:	f107 0314 	add.w	r3, r7, #20
 8001bf4:	e000      	b.n	8001bf8 <bmp280_read_float+0x1c>
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	f107 0218 	add.w	r2, r7, #24
 8001bfc:	f107 011c 	add.w	r1, r7, #28
 8001c00:	68f8      	ldr	r0, [r7, #12]
 8001c02:	f7ff ff86 	bl	8001b12 <bmp280_read_fixed>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d028      	beq.n	8001c5e <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	ee07 3a90 	vmov	s15, r3
 8001c12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c16:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001c68 <bmp280_read_float+0x8c>
 8001c1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	ee07 3a90 	vmov	s15, r3
 8001c2a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c2e:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001c6c <bmp280_read_float+0x90>
 8001c32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d00b      	beq.n	8001c5a <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	ee07 3a90 	vmov	s15, r3
 8001c48:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c4c:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001c70 <bmp280_read_float+0x94>
 8001c50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e000      	b.n	8001c60 <bmp280_read_float+0x84>
	}

	return false;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3720      	adds	r7, #32
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	42c80000 	.word	0x42c80000
 8001c6c:	43800000 	.word	0x43800000
 8001c70:	44800000 	.word	0x44800000
 8001c74:	00000000 	.word	0x00000000

08001c78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c78:	b5b0      	push	{r4, r5, r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c7c:	f002 ff70 	bl	8004b60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c80:	f000 f934 	bl	8001eec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c84:	f000 fd7e 	bl	8002784 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c88:	f000 fd54 	bl	8002734 <MX_DMA_Init>
  MX_I2C1_Init();
 8001c8c:	f000 f998 	bl	8001fc0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001c90:	f000 fcd2 	bl	8002638 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001c94:	f000 fd24 	bl	80026e0 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8001c98:	f000 fcf8 	bl	800268c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001c9c:	f000 fa84 	bl	80021a8 <MX_TIM3_Init>
  MX_I2C3_Init();
 8001ca0:	f000 f9bc 	bl	800201c <MX_I2C3_Init>
  MX_TIM2_Init();
 8001ca4:	f000 f9e8 	bl	8002078 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001ca8:	f000 fafa 	bl	80022a0 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001cac:	f000 fb68 	bl	8002380 <MX_TIM5_Init>
  MX_TIM9_Init();
 8001cb0:	f000 fc42 	bl	8002538 <MX_TIM9_Init>
  MX_TIM7_Init();
 8001cb4:	f000 fc0a 	bl	80024cc <MX_TIM7_Init>
  MX_TIM6_Init();
 8001cb8:	f000 fbd2 	bl	8002460 <MX_TIM6_Init>
  MX_TIM10_Init();
 8001cbc:	f000 fc98 	bl	80025f0 <MX_TIM10_Init>
  PIDControl(&PIDPitch, (float)IMU_Data->PITCH, RC_CH1.DutyCycleVal);
  PIDControl(&PIDYaw, (float)IMU_Data->YAW, RC_CH4.DutyCycleVal);*/

  //init sensor

  CompassInit();
 8001cc0:	f001 f80a 	bl	8002cd8 <CompassInit>
  BMPInit();
 8001cc4:	f000 fee2 	bl	8002a8c <BMPInit>
  GPSInit();
 8001cc8:	f000 ffce 	bl	8002c68 <GPSInit>
  IMUInit();
 8001ccc:	f001 f8e4 	bl	8002e98 <IMUInit>

  //Remote init
  RemoteInit();
 8001cd0:	f001 f85a 	bl	8002d88 <RemoteInit>

  //Inisialisasi PID
  //ROLL
  //PIDInit(&PIDRoll, 0.47f, 0.0f, 1.0f, 0.01); //kp = 1, kd = 1, ki = 1, timesampling = 0.04
  PIDInit(&PIDRoll, 0.25, 0.1, 0.058, 0.01);
 8001cd4:	ed9f 3b68 	vldr	d3, [pc, #416]	; 8001e78 <main+0x200>
 8001cd8:	ed9f 2b69 	vldr	d2, [pc, #420]	; 8001e80 <main+0x208>
 8001cdc:	ed9f 1b6a 	vldr	d1, [pc, #424]	; 8001e88 <main+0x210>
 8001ce0:	ed9f 0b6b 	vldr	d0, [pc, #428]	; 8001e90 <main+0x218>
 8001ce4:	486e      	ldr	r0, [pc, #440]	; (8001ea0 <main+0x228>)
 8001ce6:	f001 fed7 	bl	8003a98 <PIDInit>
  //PITCH
  PIDInit(&PIDPitch, 0.0f, 0.0f, 0.0f, 0.01); //kp = 1, kd = 1, ki = 1, timesampling = 0.04
 8001cea:	ed9f 3b63 	vldr	d3, [pc, #396]	; 8001e78 <main+0x200>
 8001cee:	ed9f 2b6a 	vldr	d2, [pc, #424]	; 8001e98 <main+0x220>
 8001cf2:	ed9f 1b69 	vldr	d1, [pc, #420]	; 8001e98 <main+0x220>
 8001cf6:	ed9f 0b68 	vldr	d0, [pc, #416]	; 8001e98 <main+0x220>
 8001cfa:	486a      	ldr	r0, [pc, #424]	; (8001ea4 <main+0x22c>)
 8001cfc:	f001 fecc 	bl	8003a98 <PIDInit>

  //YAW
  PIDInit(&PIDYaw, 0.0f, 0.0f, 0.0f, 0.01); //kp = 1, kd = 1, ki = 1, timesampling = 0.04
 8001d00:	ed9f 3b5d 	vldr	d3, [pc, #372]	; 8001e78 <main+0x200>
 8001d04:	ed9f 2b64 	vldr	d2, [pc, #400]	; 8001e98 <main+0x220>
 8001d08:	ed9f 1b63 	vldr	d1, [pc, #396]	; 8001e98 <main+0x220>
 8001d0c:	ed9f 0b62 	vldr	d0, [pc, #392]	; 8001e98 <main+0x220>
 8001d10:	4865      	ldr	r0, [pc, #404]	; (8001ea8 <main+0x230>)
 8001d12:	f001 fec1 	bl	8003a98 <PIDInit>

  ESCInit();
 8001d16:	f000 fdef 	bl	80028f8 <ESCInit>

  HAL_TIM_Base_Start_IT(&htim10);
 8001d1a:	4864      	ldr	r0, [pc, #400]	; (8001eac <main+0x234>)
 8001d1c:	f005 feb7 	bl	8007a8e <HAL_TIM_Base_Start_IT>


  strSize = sprintf((char*)buffer, "Mulai\r\n");
 8001d20:	4a63      	ldr	r2, [pc, #396]	; (8001eb0 <main+0x238>)
 8001d22:	4b64      	ldr	r3, [pc, #400]	; (8001eb4 <main+0x23c>)
 8001d24:	cb03      	ldmia	r3!, {r0, r1}
 8001d26:	6010      	str	r0, [r2, #0]
 8001d28:	6051      	str	r1, [r2, #4]
 8001d2a:	2307      	movs	r3, #7
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	4b62      	ldr	r3, [pc, #392]	; (8001eb8 <main+0x240>)
 8001d30:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart1, buffer, strSize, 10);
 8001d32:	4b61      	ldr	r3, [pc, #388]	; (8001eb8 <main+0x240>)
 8001d34:	881a      	ldrh	r2, [r3, #0]
 8001d36:	230a      	movs	r3, #10
 8001d38:	495d      	ldr	r1, [pc, #372]	; (8001eb0 <main+0x238>)
 8001d3a:	4860      	ldr	r0, [pc, #384]	; (8001ebc <main+0x244>)
 8001d3c:	f007 f8a3 	bl	8008e86 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  if(inputFlyMode >= 1000 && inputFlyMode <= 1050 && fly_mode != FLY_MODE_OFF){
 8001d40:	4b5f      	ldr	r3, [pc, #380]	; (8001ec0 <main+0x248>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d48:	db39      	blt.n	8001dbe <main+0x146>
 8001d4a:	4b5d      	ldr	r3, [pc, #372]	; (8001ec0 <main+0x248>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f240 421a 	movw	r2, #1050	; 0x41a
 8001d52:	4293      	cmp	r3, r2
 8001d54:	dc33      	bgt.n	8001dbe <main+0x146>
 8001d56:	4b5b      	ldr	r3, [pc, #364]	; (8001ec4 <main+0x24c>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d02f      	beq.n	8001dbe <main+0x146>
		  HAL_TIM_Base_Stop_IT(&htim7);
 8001d5e:	485a      	ldr	r0, [pc, #360]	; (8001ec8 <main+0x250>)
 8001d60:	f005 feb9 	bl	8007ad6 <HAL_TIM_Base_Stop_IT>
		  fly_mode = FLY_MODE_OFF;
 8001d64:	4b57      	ldr	r3, [pc, #348]	; (8001ec4 <main+0x24c>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	701a      	strb	r2, [r3, #0]
		  PIDReset(&PIDRoll);
 8001d6a:	484d      	ldr	r0, [pc, #308]	; (8001ea0 <main+0x228>)
 8001d6c:	f001 fe6c 	bl	8003a48 <PIDReset>
		  PIDReset(&PIDPitch);
 8001d70:	484c      	ldr	r0, [pc, #304]	; (8001ea4 <main+0x22c>)
 8001d72:	f001 fe69 	bl	8003a48 <PIDReset>
		  PIDReset(&PIDYaw);
 8001d76:	484c      	ldr	r0, [pc, #304]	; (8001ea8 <main+0x230>)
 8001d78:	f001 fe66 	bl	8003a48 <PIDReset>
		  pulseESC1 = pulseESC2 = pulseESC3 = pulseESC4 = 1000;
 8001d7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d80:	4a52      	ldr	r2, [pc, #328]	; (8001ecc <main+0x254>)
 8001d82:	6013      	str	r3, [r2, #0]
 8001d84:	4a52      	ldr	r2, [pc, #328]	; (8001ed0 <main+0x258>)
 8001d86:	6013      	str	r3, [r2, #0]
 8001d88:	4a52      	ldr	r2, [pc, #328]	; (8001ed4 <main+0x25c>)
 8001d8a:	6013      	str	r3, [r2, #0]
 8001d8c:	4a52      	ldr	r2, [pc, #328]	; (8001ed8 <main+0x260>)
 8001d8e:	6013      	str	r3, [r2, #0]
		  strSize = sprintf((char*)buffer, "Wahana Mode Off\r\n");
 8001d90:	4a47      	ldr	r2, [pc, #284]	; (8001eb0 <main+0x238>)
 8001d92:	4b52      	ldr	r3, [pc, #328]	; (8001edc <main+0x264>)
 8001d94:	4615      	mov	r5, r2
 8001d96:	461c      	mov	r4, r3
 8001d98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d9a:	6028      	str	r0, [r5, #0]
 8001d9c:	6069      	str	r1, [r5, #4]
 8001d9e:	60aa      	str	r2, [r5, #8]
 8001da0:	60eb      	str	r3, [r5, #12]
 8001da2:	8823      	ldrh	r3, [r4, #0]
 8001da4:	822b      	strh	r3, [r5, #16]
 8001da6:	2311      	movs	r3, #17
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	4b43      	ldr	r3, [pc, #268]	; (8001eb8 <main+0x240>)
 8001dac:	801a      	strh	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1, buffer, strSize, 10);
 8001dae:	4b42      	ldr	r3, [pc, #264]	; (8001eb8 <main+0x240>)
 8001db0:	881a      	ldrh	r2, [r3, #0]
 8001db2:	230a      	movs	r3, #10
 8001db4:	493e      	ldr	r1, [pc, #248]	; (8001eb0 <main+0x238>)
 8001db6:	4841      	ldr	r0, [pc, #260]	; (8001ebc <main+0x244>)
 8001db8:	f007 f865 	bl	8008e86 <HAL_UART_Transmit>
 8001dbc:	e057      	b.n	8001e6e <main+0x1f6>
	  } else if(inputFlyMode >= 1450 && inputFlyMode <= 1550 && fly_mode != FLY_MODE_ON){
 8001dbe:	4b40      	ldr	r3, [pc, #256]	; (8001ec0 <main+0x248>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f240 52a9 	movw	r2, #1449	; 0x5a9
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	dd26      	ble.n	8001e18 <main+0x1a0>
 8001dca:	4b3d      	ldr	r3, [pc, #244]	; (8001ec0 <main+0x248>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f240 620e 	movw	r2, #1550	; 0x60e
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	dc20      	bgt.n	8001e18 <main+0x1a0>
 8001dd6:	4b3b      	ldr	r3, [pc, #236]	; (8001ec4 <main+0x24c>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d01c      	beq.n	8001e18 <main+0x1a0>
		  fly_mode = FLY_MODE_ON;
 8001dde:	4b39      	ldr	r3, [pc, #228]	; (8001ec4 <main+0x24c>)
 8001de0:	2201      	movs	r2, #1
 8001de2:	701a      	strb	r2, [r3, #0]
		  strSize = sprintf((char*)buffer, "Wahana Mode On\r\n");
 8001de4:	4a32      	ldr	r2, [pc, #200]	; (8001eb0 <main+0x238>)
 8001de6:	4b3e      	ldr	r3, [pc, #248]	; (8001ee0 <main+0x268>)
 8001de8:	4615      	mov	r5, r2
 8001dea:	461c      	mov	r4, r3
 8001dec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dee:	6028      	str	r0, [r5, #0]
 8001df0:	6069      	str	r1, [r5, #4]
 8001df2:	60aa      	str	r2, [r5, #8]
 8001df4:	60eb      	str	r3, [r5, #12]
 8001df6:	7823      	ldrb	r3, [r4, #0]
 8001df8:	742b      	strb	r3, [r5, #16]
 8001dfa:	2310      	movs	r3, #16
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	4b2e      	ldr	r3, [pc, #184]	; (8001eb8 <main+0x240>)
 8001e00:	801a      	strh	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1, buffer, strSize, 10);
 8001e02:	4b2d      	ldr	r3, [pc, #180]	; (8001eb8 <main+0x240>)
 8001e04:	881a      	ldrh	r2, [r3, #0]
 8001e06:	230a      	movs	r3, #10
 8001e08:	4929      	ldr	r1, [pc, #164]	; (8001eb0 <main+0x238>)
 8001e0a:	482c      	ldr	r0, [pc, #176]	; (8001ebc <main+0x244>)
 8001e0c:	f007 f83b 	bl	8008e86 <HAL_UART_Transmit>
		  HAL_TIM_Base_Start_IT(&htim7);
 8001e10:	482d      	ldr	r0, [pc, #180]	; (8001ec8 <main+0x250>)
 8001e12:	f005 fe3c 	bl	8007a8e <HAL_TIM_Base_Start_IT>
 8001e16:	e02a      	b.n	8001e6e <main+0x1f6>
	  } else if(inputFlyMode >= 1900 && inputFlyMode <= 2000 && fly_mode != FLY_MODE_HOLD){
 8001e18:	4b29      	ldr	r3, [pc, #164]	; (8001ec0 <main+0x248>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f240 726b 	movw	r2, #1899	; 0x76b
 8001e20:	4293      	cmp	r3, r2
 8001e22:	dd24      	ble.n	8001e6e <main+0x1f6>
 8001e24:	4b26      	ldr	r3, [pc, #152]	; (8001ec0 <main+0x248>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001e2c:	dc1f      	bgt.n	8001e6e <main+0x1f6>
 8001e2e:	4b25      	ldr	r3, [pc, #148]	; (8001ec4 <main+0x24c>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d01b      	beq.n	8001e6e <main+0x1f6>
		  fly_mode = FLY_MODE_HOLD;
 8001e36:	4b23      	ldr	r3, [pc, #140]	; (8001ec4 <main+0x24c>)
 8001e38:	2202      	movs	r2, #2
 8001e3a:	701a      	strb	r2, [r3, #0]
		  strSize = sprintf((char*)buffer, "Wahana Mode Hold\r\n");
 8001e3c:	4a1c      	ldr	r2, [pc, #112]	; (8001eb0 <main+0x238>)
 8001e3e:	4b29      	ldr	r3, [pc, #164]	; (8001ee4 <main+0x26c>)
 8001e40:	4615      	mov	r5, r2
 8001e42:	461c      	mov	r4, r3
 8001e44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e46:	6028      	str	r0, [r5, #0]
 8001e48:	6069      	str	r1, [r5, #4]
 8001e4a:	60aa      	str	r2, [r5, #8]
 8001e4c:	60eb      	str	r3, [r5, #12]
 8001e4e:	8823      	ldrh	r3, [r4, #0]
 8001e50:	78a2      	ldrb	r2, [r4, #2]
 8001e52:	822b      	strh	r3, [r5, #16]
 8001e54:	4613      	mov	r3, r2
 8001e56:	74ab      	strb	r3, [r5, #18]
 8001e58:	2312      	movs	r3, #18
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	4b16      	ldr	r3, [pc, #88]	; (8001eb8 <main+0x240>)
 8001e5e:	801a      	strh	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1, buffer, strSize, 10);
 8001e60:	4b15      	ldr	r3, [pc, #84]	; (8001eb8 <main+0x240>)
 8001e62:	881a      	ldrh	r2, [r3, #0]
 8001e64:	230a      	movs	r3, #10
 8001e66:	4912      	ldr	r1, [pc, #72]	; (8001eb0 <main+0x238>)
 8001e68:	4814      	ldr	r0, [pc, #80]	; (8001ebc <main+0x244>)
 8001e6a:	f007 f80c 	bl	8008e86 <HAL_UART_Transmit>
	  //HAL_UART_Transmit(&huart1, buffer, strSize, 100);

	  //strSize = sprintf((char*)buffer, "YAW: %f\tPITCH: %f\tROLL: %f\r\n", sensorYaw, sensorPitch, sensorRoll);
	  //HAL_UART_Transmit(&huart1, buffer, strSize, 10);

	  getIMUData(&IMU_Data);
 8001e6e:	481e      	ldr	r0, [pc, #120]	; (8001ee8 <main+0x270>)
 8001e70:	f001 f8ea 	bl	8003048 <getIMUData>
	  if(inputFlyMode >= 1000 && inputFlyMode <= 1050 && fly_mode != FLY_MODE_OFF){
 8001e74:	e764      	b.n	8001d40 <main+0xc8>
 8001e76:	bf00      	nop
 8001e78:	47ae147b 	.word	0x47ae147b
 8001e7c:	3f847ae1 	.word	0x3f847ae1
 8001e80:	0e560419 	.word	0x0e560419
 8001e84:	3fadb22d 	.word	0x3fadb22d
 8001e88:	9999999a 	.word	0x9999999a
 8001e8c:	3fb99999 	.word	0x3fb99999
 8001e90:	00000000 	.word	0x00000000
 8001e94:	3fd00000 	.word	0x3fd00000
	...
 8001ea0:	20000b38 	.word	0x20000b38
 8001ea4:	20000228 	.word	0x20000228
 8001ea8:	20000778 	.word	0x20000778
 8001eac:	20000460 	.word	0x20000460
 8001eb0:	200007e4 	.word	0x200007e4
 8001eb4:	0800cdb8 	.word	0x0800cdb8
 8001eb8:	20000d20 	.word	0x20000d20
 8001ebc:	200007a4 	.word	0x200007a4
 8001ec0:	20000254 	.word	0x20000254
 8001ec4:	20000bbc 	.word	0x20000bbc
 8001ec8:	20000ca4 	.word	0x20000ca4
 8001ecc:	200008ac 	.word	0x200008ac
 8001ed0:	20000d00 	.word	0x20000d00
 8001ed4:	20000250 	.word	0x20000250
 8001ed8:	20000ce4 	.word	0x20000ce4
 8001edc:	0800cdc0 	.word	0x0800cdc0
 8001ee0:	0800cdd4 	.word	0x0800cdd4
 8001ee4:	0800cde8 	.word	0x0800cde8
 8001ee8:	200006cc 	.word	0x200006cc

08001eec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b094      	sub	sp, #80	; 0x50
 8001ef0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ef2:	f107 0320 	add.w	r3, r7, #32
 8001ef6:	2230      	movs	r2, #48	; 0x30
 8001ef8:	2100      	movs	r1, #0
 8001efa:	4618      	mov	r0, r3
 8001efc:	f007 fdab 	bl	8009a56 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f00:	f107 030c 	add.w	r3, r7, #12
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	605a      	str	r2, [r3, #4]
 8001f0a:	609a      	str	r2, [r3, #8]
 8001f0c:	60da      	str	r2, [r3, #12]
 8001f0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f10:	2300      	movs	r3, #0
 8001f12:	60bb      	str	r3, [r7, #8]
 8001f14:	4b28      	ldr	r3, [pc, #160]	; (8001fb8 <SystemClock_Config+0xcc>)
 8001f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f18:	4a27      	ldr	r2, [pc, #156]	; (8001fb8 <SystemClock_Config+0xcc>)
 8001f1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f1e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f20:	4b25      	ldr	r3, [pc, #148]	; (8001fb8 <SystemClock_Config+0xcc>)
 8001f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f28:	60bb      	str	r3, [r7, #8]
 8001f2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	607b      	str	r3, [r7, #4]
 8001f30:	4b22      	ldr	r3, [pc, #136]	; (8001fbc <SystemClock_Config+0xd0>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a21      	ldr	r2, [pc, #132]	; (8001fbc <SystemClock_Config+0xd0>)
 8001f36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f3a:	6013      	str	r3, [r2, #0]
 8001f3c:	4b1f      	ldr	r3, [pc, #124]	; (8001fbc <SystemClock_Config+0xd0>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f44:	607b      	str	r3, [r7, #4]
 8001f46:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f50:	2310      	movs	r3, #16
 8001f52:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f54:	2302      	movs	r3, #2
 8001f56:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001f5c:	2308      	movs	r3, #8
 8001f5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001f60:	23a8      	movs	r3, #168	; 0xa8
 8001f62:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f64:	2302      	movs	r3, #2
 8001f66:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f68:	2304      	movs	r3, #4
 8001f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f6c:	f107 0320 	add.w	r3, r7, #32
 8001f70:	4618      	mov	r0, r3
 8001f72:	f005 f8dd 	bl	8007130 <HAL_RCC_OscConfig>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001f7c:	f001 fc90 	bl	80038a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f80:	230f      	movs	r3, #15
 8001f82:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f84:	2302      	movs	r3, #2
 8001f86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001f8c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001f90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 8001f92:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001f96:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f98:	f107 030c 	add.w	r3, r7, #12
 8001f9c:	2105      	movs	r1, #5
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f005 fb36 	bl	8007610 <HAL_RCC_ClockConfig>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001faa:	f001 fc79 	bl	80038a0 <Error_Handler>
  }
}
 8001fae:	bf00      	nop
 8001fb0:	3750      	adds	r7, #80	; 0x50
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40023800 	.word	0x40023800
 8001fbc:	40007000 	.word	0x40007000

08001fc0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001fc4:	4b12      	ldr	r3, [pc, #72]	; (8002010 <MX_I2C1_Init+0x50>)
 8001fc6:	4a13      	ldr	r2, [pc, #76]	; (8002014 <MX_I2C1_Init+0x54>)
 8001fc8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001fca:	4b11      	ldr	r3, [pc, #68]	; (8002010 <MX_I2C1_Init+0x50>)
 8001fcc:	4a12      	ldr	r2, [pc, #72]	; (8002018 <MX_I2C1_Init+0x58>)
 8001fce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001fd0:	4b0f      	ldr	r3, [pc, #60]	; (8002010 <MX_I2C1_Init+0x50>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001fd6:	4b0e      	ldr	r3, [pc, #56]	; (8002010 <MX_I2C1_Init+0x50>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fdc:	4b0c      	ldr	r3, [pc, #48]	; (8002010 <MX_I2C1_Init+0x50>)
 8001fde:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fe2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fe4:	4b0a      	ldr	r3, [pc, #40]	; (8002010 <MX_I2C1_Init+0x50>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001fea:	4b09      	ldr	r3, [pc, #36]	; (8002010 <MX_I2C1_Init+0x50>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ff0:	4b07      	ldr	r3, [pc, #28]	; (8002010 <MX_I2C1_Init+0x50>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ff6:	4b06      	ldr	r3, [pc, #24]	; (8002010 <MX_I2C1_Init+0x50>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ffc:	4804      	ldr	r0, [pc, #16]	; (8002010 <MX_I2C1_Init+0x50>)
 8001ffe:	f003 fc75 	bl	80058ec <HAL_I2C_Init>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002008:	f001 fc4a 	bl	80038a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800200c:	bf00      	nop
 800200e:	bd80      	pop	{r7, pc}
 8002010:	2000040c 	.word	0x2000040c
 8002014:	40005400 	.word	0x40005400
 8002018:	000186a0 	.word	0x000186a0

0800201c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002020:	4b12      	ldr	r3, [pc, #72]	; (800206c <MX_I2C3_Init+0x50>)
 8002022:	4a13      	ldr	r2, [pc, #76]	; (8002070 <MX_I2C3_Init+0x54>)
 8002024:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002026:	4b11      	ldr	r3, [pc, #68]	; (800206c <MX_I2C3_Init+0x50>)
 8002028:	4a12      	ldr	r2, [pc, #72]	; (8002074 <MX_I2C3_Init+0x58>)
 800202a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800202c:	4b0f      	ldr	r3, [pc, #60]	; (800206c <MX_I2C3_Init+0x50>)
 800202e:	2200      	movs	r2, #0
 8002030:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002032:	4b0e      	ldr	r3, [pc, #56]	; (800206c <MX_I2C3_Init+0x50>)
 8002034:	2200      	movs	r2, #0
 8002036:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002038:	4b0c      	ldr	r3, [pc, #48]	; (800206c <MX_I2C3_Init+0x50>)
 800203a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800203e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002040:	4b0a      	ldr	r3, [pc, #40]	; (800206c <MX_I2C3_Init+0x50>)
 8002042:	2200      	movs	r2, #0
 8002044:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002046:	4b09      	ldr	r3, [pc, #36]	; (800206c <MX_I2C3_Init+0x50>)
 8002048:	2200      	movs	r2, #0
 800204a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800204c:	4b07      	ldr	r3, [pc, #28]	; (800206c <MX_I2C3_Init+0x50>)
 800204e:	2200      	movs	r2, #0
 8002050:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002052:	4b06      	ldr	r3, [pc, #24]	; (800206c <MX_I2C3_Init+0x50>)
 8002054:	2200      	movs	r2, #0
 8002056:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002058:	4804      	ldr	r0, [pc, #16]	; (800206c <MX_I2C3_Init+0x50>)
 800205a:	f003 fc47 	bl	80058ec <HAL_I2C_Init>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002064:	f001 fc1c 	bl	80038a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002068:	bf00      	nop
 800206a:	bd80      	pop	{r7, pc}
 800206c:	200002b8 	.word	0x200002b8
 8002070:	40005c00 	.word	0x40005c00
 8002074:	000186a0 	.word	0x000186a0

08002078 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b08e      	sub	sp, #56	; 0x38
 800207c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800207e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002082:	2200      	movs	r2, #0
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	605a      	str	r2, [r3, #4]
 8002088:	609a      	str	r2, [r3, #8]
 800208a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800208c:	f107 0320 	add.w	r3, r7, #32
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002096:	1d3b      	adds	r3, r7, #4
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	605a      	str	r2, [r3, #4]
 800209e:	609a      	str	r2, [r3, #8]
 80020a0:	60da      	str	r2, [r3, #12]
 80020a2:	611a      	str	r2, [r3, #16]
 80020a4:	615a      	str	r2, [r3, #20]
 80020a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020a8:	4b3e      	ldr	r3, [pc, #248]	; (80021a4 <MX_TIM2_Init+0x12c>)
 80020aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 42 - 1;
 80020b0:	4b3c      	ldr	r3, [pc, #240]	; (80021a4 <MX_TIM2_Init+0x12c>)
 80020b2:	2229      	movs	r2, #41	; 0x29
 80020b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020b6:	4b3b      	ldr	r3, [pc, #236]	; (80021a4 <MX_TIM2_Init+0x12c>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000 - 1;
 80020bc:	4b39      	ldr	r3, [pc, #228]	; (80021a4 <MX_TIM2_Init+0x12c>)
 80020be:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80020c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020c4:	4b37      	ldr	r3, [pc, #220]	; (80021a4 <MX_TIM2_Init+0x12c>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ca:	4b36      	ldr	r3, [pc, #216]	; (80021a4 <MX_TIM2_Init+0x12c>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020d0:	4834      	ldr	r0, [pc, #208]	; (80021a4 <MX_TIM2_Init+0x12c>)
 80020d2:	f005 fc8d 	bl	80079f0 <HAL_TIM_Base_Init>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80020dc:	f001 fbe0 	bl	80038a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020e4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020ea:	4619      	mov	r1, r3
 80020ec:	482d      	ldr	r0, [pc, #180]	; (80021a4 <MX_TIM2_Init+0x12c>)
 80020ee:	f006 f899 	bl	8008224 <HAL_TIM_ConfigClockSource>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80020f8:	f001 fbd2 	bl	80038a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80020fc:	4829      	ldr	r0, [pc, #164]	; (80021a4 <MX_TIM2_Init+0x12c>)
 80020fe:	f005 fd15 	bl	8007b2c <HAL_TIM_PWM_Init>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002108:	f001 fbca 	bl	80038a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800210c:	2300      	movs	r3, #0
 800210e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002110:	2300      	movs	r3, #0
 8002112:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002114:	f107 0320 	add.w	r3, r7, #32
 8002118:	4619      	mov	r1, r3
 800211a:	4822      	ldr	r0, [pc, #136]	; (80021a4 <MX_TIM2_Init+0x12c>)
 800211c:	f006 fdd6 	bl	8008ccc <HAL_TIMEx_MasterConfigSynchronization>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002126:	f001 fbbb 	bl	80038a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800212a:	2360      	movs	r3, #96	; 0x60
 800212c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2000 - 1;
 800212e:	f240 73cf 	movw	r3, #1999	; 0x7cf
 8002132:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002134:	2300      	movs	r3, #0
 8002136:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002138:	2300      	movs	r3, #0
 800213a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800213c:	1d3b      	adds	r3, r7, #4
 800213e:	2200      	movs	r2, #0
 8002140:	4619      	mov	r1, r3
 8002142:	4818      	ldr	r0, [pc, #96]	; (80021a4 <MX_TIM2_Init+0x12c>)
 8002144:	f005 ffa8 	bl	8008098 <HAL_TIM_PWM_ConfigChannel>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800214e:	f001 fba7 	bl	80038a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002152:	1d3b      	adds	r3, r7, #4
 8002154:	2204      	movs	r2, #4
 8002156:	4619      	mov	r1, r3
 8002158:	4812      	ldr	r0, [pc, #72]	; (80021a4 <MX_TIM2_Init+0x12c>)
 800215a:	f005 ff9d 	bl	8008098 <HAL_TIM_PWM_ConfigChannel>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8002164:	f001 fb9c 	bl	80038a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002168:	1d3b      	adds	r3, r7, #4
 800216a:	2208      	movs	r2, #8
 800216c:	4619      	mov	r1, r3
 800216e:	480d      	ldr	r0, [pc, #52]	; (80021a4 <MX_TIM2_Init+0x12c>)
 8002170:	f005 ff92 	bl	8008098 <HAL_TIM_PWM_ConfigChannel>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 800217a:	f001 fb91 	bl	80038a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800217e:	1d3b      	adds	r3, r7, #4
 8002180:	220c      	movs	r2, #12
 8002182:	4619      	mov	r1, r3
 8002184:	4807      	ldr	r0, [pc, #28]	; (80021a4 <MX_TIM2_Init+0x12c>)
 8002186:	f005 ff87 	bl	8008098 <HAL_TIM_PWM_ConfigChannel>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8002190:	f001 fb86 	bl	80038a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002194:	4803      	ldr	r0, [pc, #12]	; (80021a4 <MX_TIM2_Init+0x12c>)
 8002196:	f002 fa93 	bl	80046c0 <HAL_TIM_MspPostInit>

}
 800219a:	bf00      	nop
 800219c:	3738      	adds	r7, #56	; 0x38
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	20000bc4 	.word	0x20000bc4

080021a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b08a      	sub	sp, #40	; 0x28
 80021ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021ae:	f107 0318 	add.w	r3, r7, #24
 80021b2:	2200      	movs	r2, #0
 80021b4:	601a      	str	r2, [r3, #0]
 80021b6:	605a      	str	r2, [r3, #4]
 80021b8:	609a      	str	r2, [r3, #8]
 80021ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021bc:	f107 0310 	add.w	r3, r7, #16
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80021c6:	463b      	mov	r3, r7
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	605a      	str	r2, [r3, #4]
 80021ce:	609a      	str	r2, [r3, #8]
 80021d0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80021d2:	4b31      	ldr	r3, [pc, #196]	; (8002298 <MX_TIM3_Init+0xf0>)
 80021d4:	4a31      	ldr	r2, [pc, #196]	; (800229c <MX_TIM3_Init+0xf4>)
 80021d6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42 - 1;
 80021d8:	4b2f      	ldr	r3, [pc, #188]	; (8002298 <MX_TIM3_Init+0xf0>)
 80021da:	2229      	movs	r2, #41	; 0x29
 80021dc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021de:	4b2e      	ldr	r3, [pc, #184]	; (8002298 <MX_TIM3_Init+0xf0>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF;
 80021e4:	4b2c      	ldr	r3, [pc, #176]	; (8002298 <MX_TIM3_Init+0xf0>)
 80021e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021ec:	4b2a      	ldr	r3, [pc, #168]	; (8002298 <MX_TIM3_Init+0xf0>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021f2:	4b29      	ldr	r3, [pc, #164]	; (8002298 <MX_TIM3_Init+0xf0>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80021f8:	4827      	ldr	r0, [pc, #156]	; (8002298 <MX_TIM3_Init+0xf0>)
 80021fa:	f005 fbf9 	bl	80079f0 <HAL_TIM_Base_Init>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8002204:	f001 fb4c 	bl	80038a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002208:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800220c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800220e:	f107 0318 	add.w	r3, r7, #24
 8002212:	4619      	mov	r1, r3
 8002214:	4820      	ldr	r0, [pc, #128]	; (8002298 <MX_TIM3_Init+0xf0>)
 8002216:	f006 f805 	bl	8008224 <HAL_TIM_ConfigClockSource>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002220:	f001 fb3e 	bl	80038a0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002224:	481c      	ldr	r0, [pc, #112]	; (8002298 <MX_TIM3_Init+0xf0>)
 8002226:	f005 fcf5 	bl	8007c14 <HAL_TIM_IC_Init>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002230:	f001 fb36 	bl	80038a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002234:	2300      	movs	r3, #0
 8002236:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002238:	2300      	movs	r3, #0
 800223a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800223c:	f107 0310 	add.w	r3, r7, #16
 8002240:	4619      	mov	r1, r3
 8002242:	4815      	ldr	r0, [pc, #84]	; (8002298 <MX_TIM3_Init+0xf0>)
 8002244:	f006 fd42 	bl	8008ccc <HAL_TIMEx_MasterConfigSynchronization>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 800224e:	f001 fb27 	bl	80038a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002252:	2300      	movs	r3, #0
 8002254:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002256:	2301      	movs	r3, #1
 8002258:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800225a:	2300      	movs	r3, #0
 800225c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800225e:	2300      	movs	r3, #0
 8002260:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002262:	463b      	mov	r3, r7
 8002264:	2200      	movs	r2, #0
 8002266:	4619      	mov	r1, r3
 8002268:	480b      	ldr	r0, [pc, #44]	; (8002298 <MX_TIM3_Init+0xf0>)
 800226a:	f005 fe79 	bl	8007f60 <HAL_TIM_IC_ConfigChannel>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8002274:	f001 fb14 	bl	80038a0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002278:	463b      	mov	r3, r7
 800227a:	2204      	movs	r2, #4
 800227c:	4619      	mov	r1, r3
 800227e:	4806      	ldr	r0, [pc, #24]	; (8002298 <MX_TIM3_Init+0xf0>)
 8002280:	f005 fe6e 	bl	8007f60 <HAL_TIM_IC_ConfigChannel>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 800228a:	f001 fb09 	bl	80038a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800228e:	bf00      	nop
 8002290:	3728      	adds	r7, #40	; 0x28
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	20000734 	.word	0x20000734
 800229c:	40000400 	.word	0x40000400

080022a0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b08a      	sub	sp, #40	; 0x28
 80022a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022a6:	f107 0318 	add.w	r3, r7, #24
 80022aa:	2200      	movs	r2, #0
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	605a      	str	r2, [r3, #4]
 80022b0:	609a      	str	r2, [r3, #8]
 80022b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022b4:	f107 0310 	add.w	r3, r7, #16
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80022be:	463b      	mov	r3, r7
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	605a      	str	r2, [r3, #4]
 80022c6:	609a      	str	r2, [r3, #8]
 80022c8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80022ca:	4b2b      	ldr	r3, [pc, #172]	; (8002378 <MX_TIM4_Init+0xd8>)
 80022cc:	4a2b      	ldr	r2, [pc, #172]	; (800237c <MX_TIM4_Init+0xdc>)
 80022ce:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 42 - 1;
 80022d0:	4b29      	ldr	r3, [pc, #164]	; (8002378 <MX_TIM4_Init+0xd8>)
 80022d2:	2229      	movs	r2, #41	; 0x29
 80022d4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022d6:	4b28      	ldr	r3, [pc, #160]	; (8002378 <MX_TIM4_Init+0xd8>)
 80022d8:	2200      	movs	r2, #0
 80022da:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xFFFF;
 80022dc:	4b26      	ldr	r3, [pc, #152]	; (8002378 <MX_TIM4_Init+0xd8>)
 80022de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022e2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022e4:	4b24      	ldr	r3, [pc, #144]	; (8002378 <MX_TIM4_Init+0xd8>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022ea:	4b23      	ldr	r3, [pc, #140]	; (8002378 <MX_TIM4_Init+0xd8>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80022f0:	4821      	ldr	r0, [pc, #132]	; (8002378 <MX_TIM4_Init+0xd8>)
 80022f2:	f005 fb7d 	bl	80079f0 <HAL_TIM_Base_Init>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 80022fc:	f001 fad0 	bl	80038a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002300:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002304:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002306:	f107 0318 	add.w	r3, r7, #24
 800230a:	4619      	mov	r1, r3
 800230c:	481a      	ldr	r0, [pc, #104]	; (8002378 <MX_TIM4_Init+0xd8>)
 800230e:	f005 ff89 	bl	8008224 <HAL_TIM_ConfigClockSource>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002318:	f001 fac2 	bl	80038a0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800231c:	4816      	ldr	r0, [pc, #88]	; (8002378 <MX_TIM4_Init+0xd8>)
 800231e:	f005 fc79 	bl	8007c14 <HAL_TIM_IC_Init>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002328:	f001 faba 	bl	80038a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800232c:	2300      	movs	r3, #0
 800232e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002330:	2300      	movs	r3, #0
 8002332:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002334:	f107 0310 	add.w	r3, r7, #16
 8002338:	4619      	mov	r1, r3
 800233a:	480f      	ldr	r0, [pc, #60]	; (8002378 <MX_TIM4_Init+0xd8>)
 800233c:	f006 fcc6 	bl	8008ccc <HAL_TIMEx_MasterConfigSynchronization>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8002346:	f001 faab 	bl	80038a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800234a:	2300      	movs	r3, #0
 800234c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800234e:	2301      	movs	r3, #1
 8002350:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002352:	2300      	movs	r3, #0
 8002354:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002356:	2300      	movs	r3, #0
 8002358:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800235a:	463b      	mov	r3, r7
 800235c:	2200      	movs	r2, #0
 800235e:	4619      	mov	r1, r3
 8002360:	4805      	ldr	r0, [pc, #20]	; (8002378 <MX_TIM4_Init+0xd8>)
 8002362:	f005 fdfd 	bl	8007f60 <HAL_TIM_IC_ConfigChannel>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 800236c:	f001 fa98 	bl	80038a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002370:	bf00      	nop
 8002372:	3728      	adds	r7, #40	; 0x28
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	2000030c 	.word	0x2000030c
 800237c:	40000800 	.word	0x40000800

08002380 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b08a      	sub	sp, #40	; 0x28
 8002384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002386:	f107 0318 	add.w	r3, r7, #24
 800238a:	2200      	movs	r2, #0
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	605a      	str	r2, [r3, #4]
 8002390:	609a      	str	r2, [r3, #8]
 8002392:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002394:	f107 0310 	add.w	r3, r7, #16
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800239e:	463b      	mov	r3, r7
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	605a      	str	r2, [r3, #4]
 80023a6:	609a      	str	r2, [r3, #8]
 80023a8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80023aa:	4b2b      	ldr	r3, [pc, #172]	; (8002458 <MX_TIM5_Init+0xd8>)
 80023ac:	4a2b      	ldr	r2, [pc, #172]	; (800245c <MX_TIM5_Init+0xdc>)
 80023ae:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 42 - 1;
 80023b0:	4b29      	ldr	r3, [pc, #164]	; (8002458 <MX_TIM5_Init+0xd8>)
 80023b2:	2229      	movs	r2, #41	; 0x29
 80023b4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023b6:	4b28      	ldr	r3, [pc, #160]	; (8002458 <MX_TIM5_Init+0xd8>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xFFFF;
 80023bc:	4b26      	ldr	r3, [pc, #152]	; (8002458 <MX_TIM5_Init+0xd8>)
 80023be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023c2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023c4:	4b24      	ldr	r3, [pc, #144]	; (8002458 <MX_TIM5_Init+0xd8>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023ca:	4b23      	ldr	r3, [pc, #140]	; (8002458 <MX_TIM5_Init+0xd8>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80023d0:	4821      	ldr	r0, [pc, #132]	; (8002458 <MX_TIM5_Init+0xd8>)
 80023d2:	f005 fb0d 	bl	80079f0 <HAL_TIM_Base_Init>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <MX_TIM5_Init+0x60>
  {
    Error_Handler();
 80023dc:	f001 fa60 	bl	80038a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023e4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80023e6:	f107 0318 	add.w	r3, r7, #24
 80023ea:	4619      	mov	r1, r3
 80023ec:	481a      	ldr	r0, [pc, #104]	; (8002458 <MX_TIM5_Init+0xd8>)
 80023ee:	f005 ff19 	bl	8008224 <HAL_TIM_ConfigClockSource>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80023f8:	f001 fa52 	bl	80038a0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 80023fc:	4816      	ldr	r0, [pc, #88]	; (8002458 <MX_TIM5_Init+0xd8>)
 80023fe:	f005 fc09 	bl	8007c14 <HAL_TIM_IC_Init>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002408:	f001 fa4a 	bl	80038a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800240c:	2300      	movs	r3, #0
 800240e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002410:	2300      	movs	r3, #0
 8002412:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002414:	f107 0310 	add.w	r3, r7, #16
 8002418:	4619      	mov	r1, r3
 800241a:	480f      	ldr	r0, [pc, #60]	; (8002458 <MX_TIM5_Init+0xd8>)
 800241c:	f006 fc56 	bl	8008ccc <HAL_TIMEx_MasterConfigSynchronization>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <MX_TIM5_Init+0xaa>
  {
    Error_Handler();
 8002426:	f001 fa3b 	bl	80038a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800242a:	2300      	movs	r3, #0
 800242c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800242e:	2301      	movs	r3, #1
 8002430:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002432:	2300      	movs	r3, #0
 8002434:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002436:	2300      	movs	r3, #0
 8002438:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800243a:	463b      	mov	r3, r7
 800243c:	2200      	movs	r2, #0
 800243e:	4619      	mov	r1, r3
 8002440:	4805      	ldr	r0, [pc, #20]	; (8002458 <MX_TIM5_Init+0xd8>)
 8002442:	f005 fd8d 	bl	8007f60 <HAL_TIM_IC_ConfigChannel>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <MX_TIM5_Init+0xd0>
  {
    Error_Handler();
 800244c:	f001 fa28 	bl	80038a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002450:	bf00      	nop
 8002452:	3728      	adds	r7, #40	; 0x28
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	200006d8 	.word	0x200006d8
 800245c:	40000c00 	.word	0x40000c00

08002460 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002466:	463b      	mov	r3, r7
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800246e:	4b15      	ldr	r3, [pc, #84]	; (80024c4 <MX_TIM6_Init+0x64>)
 8002470:	4a15      	ldr	r2, [pc, #84]	; (80024c8 <MX_TIM6_Init+0x68>)
 8002472:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 42 - 1;
 8002474:	4b13      	ldr	r3, [pc, #76]	; (80024c4 <MX_TIM6_Init+0x64>)
 8002476:	2229      	movs	r2, #41	; 0x29
 8002478:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800247a:	4b12      	ldr	r3, [pc, #72]	; (80024c4 <MX_TIM6_Init+0x64>)
 800247c:	2200      	movs	r2, #0
 800247e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xFFFF;
 8002480:	4b10      	ldr	r3, [pc, #64]	; (80024c4 <MX_TIM6_Init+0x64>)
 8002482:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002486:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002488:	4b0e      	ldr	r3, [pc, #56]	; (80024c4 <MX_TIM6_Init+0x64>)
 800248a:	2200      	movs	r2, #0
 800248c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800248e:	480d      	ldr	r0, [pc, #52]	; (80024c4 <MX_TIM6_Init+0x64>)
 8002490:	f005 faae 	bl	80079f0 <HAL_TIM_Base_Init>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800249a:	f001 fa01 	bl	80038a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800249e:	2300      	movs	r3, #0
 80024a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024a2:	2300      	movs	r3, #0
 80024a4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80024a6:	463b      	mov	r3, r7
 80024a8:	4619      	mov	r1, r3
 80024aa:	4806      	ldr	r0, [pc, #24]	; (80024c4 <MX_TIM6_Init+0x64>)
 80024ac:	f006 fc0e 	bl	8008ccc <HAL_TIMEx_MasterConfigSynchronization>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80024b6:	f001 f9f3 	bl	80038a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80024ba:	bf00      	nop
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	20000ad8 	.word	0x20000ad8
 80024c8:	40001000 	.word	0x40001000

080024cc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024d2:	463b      	mov	r3, r7
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80024da:	4b15      	ldr	r3, [pc, #84]	; (8002530 <MX_TIM7_Init+0x64>)
 80024dc:	4a15      	ldr	r2, [pc, #84]	; (8002534 <MX_TIM7_Init+0x68>)
 80024de:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 42000 - 1;
 80024e0:	4b13      	ldr	r3, [pc, #76]	; (8002530 <MX_TIM7_Init+0x64>)
 80024e2:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80024e6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024e8:	4b11      	ldr	r3, [pc, #68]	; (8002530 <MX_TIM7_Init+0x64>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10;
 80024ee:	4b10      	ldr	r3, [pc, #64]	; (8002530 <MX_TIM7_Init+0x64>)
 80024f0:	220a      	movs	r2, #10
 80024f2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024f4:	4b0e      	ldr	r3, [pc, #56]	; (8002530 <MX_TIM7_Init+0x64>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80024fa:	480d      	ldr	r0, [pc, #52]	; (8002530 <MX_TIM7_Init+0x64>)
 80024fc:	f005 fa78 	bl	80079f0 <HAL_TIM_Base_Init>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8002506:	f001 f9cb 	bl	80038a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800250a:	2300      	movs	r3, #0
 800250c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800250e:	2300      	movs	r3, #0
 8002510:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002512:	463b      	mov	r3, r7
 8002514:	4619      	mov	r1, r3
 8002516:	4806      	ldr	r0, [pc, #24]	; (8002530 <MX_TIM7_Init+0x64>)
 8002518:	f006 fbd8 	bl	8008ccc <HAL_TIMEx_MasterConfigSynchronization>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8002522:	f001 f9bd 	bl	80038a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002526:	bf00      	nop
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	20000ca4 	.word	0x20000ca4
 8002534:	40001400 	.word	0x40001400

08002538 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b088      	sub	sp, #32
 800253c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800253e:	f107 0310 	add.w	r3, r7, #16
 8002542:	2200      	movs	r2, #0
 8002544:	601a      	str	r2, [r3, #0]
 8002546:	605a      	str	r2, [r3, #4]
 8002548:	609a      	str	r2, [r3, #8]
 800254a:	60da      	str	r2, [r3, #12]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800254c:	463b      	mov	r3, r7
 800254e:	2200      	movs	r2, #0
 8002550:	601a      	str	r2, [r3, #0]
 8002552:	605a      	str	r2, [r3, #4]
 8002554:	609a      	str	r2, [r3, #8]
 8002556:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002558:	4b23      	ldr	r3, [pc, #140]	; (80025e8 <MX_TIM9_Init+0xb0>)
 800255a:	4a24      	ldr	r2, [pc, #144]	; (80025ec <MX_TIM9_Init+0xb4>)
 800255c:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 42 - 1;
 800255e:	4b22      	ldr	r3, [pc, #136]	; (80025e8 <MX_TIM9_Init+0xb0>)
 8002560:	2229      	movs	r2, #41	; 0x29
 8002562:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002564:	4b20      	ldr	r3, [pc, #128]	; (80025e8 <MX_TIM9_Init+0xb0>)
 8002566:	2200      	movs	r2, #0
 8002568:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 0xFFFF;
 800256a:	4b1f      	ldr	r3, [pc, #124]	; (80025e8 <MX_TIM9_Init+0xb0>)
 800256c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002570:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002572:	4b1d      	ldr	r3, [pc, #116]	; (80025e8 <MX_TIM9_Init+0xb0>)
 8002574:	2200      	movs	r2, #0
 8002576:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002578:	4b1b      	ldr	r3, [pc, #108]	; (80025e8 <MX_TIM9_Init+0xb0>)
 800257a:	2200      	movs	r2, #0
 800257c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800257e:	481a      	ldr	r0, [pc, #104]	; (80025e8 <MX_TIM9_Init+0xb0>)
 8002580:	f005 fa36 	bl	80079f0 <HAL_TIM_Base_Init>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <MX_TIM9_Init+0x56>
  {
    Error_Handler();
 800258a:	f001 f989 	bl	80038a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800258e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002592:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002594:	f107 0310 	add.w	r3, r7, #16
 8002598:	4619      	mov	r1, r3
 800259a:	4813      	ldr	r0, [pc, #76]	; (80025e8 <MX_TIM9_Init+0xb0>)
 800259c:	f005 fe42 	bl	8008224 <HAL_TIM_ConfigClockSource>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <MX_TIM9_Init+0x72>
  {
    Error_Handler();
 80025a6:	f001 f97b 	bl	80038a0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim9) != HAL_OK)
 80025aa:	480f      	ldr	r0, [pc, #60]	; (80025e8 <MX_TIM9_Init+0xb0>)
 80025ac:	f005 fb32 	bl	8007c14 <HAL_TIM_IC_Init>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <MX_TIM9_Init+0x82>
  {
    Error_Handler();
 80025b6:	f001 f973 	bl	80038a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80025ba:	2300      	movs	r3, #0
 80025bc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80025be:	2301      	movs	r3, #1
 80025c0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80025c2:	2300      	movs	r3, #0
 80025c4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80025c6:	2300      	movs	r3, #0
 80025c8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80025ca:	463b      	mov	r3, r7
 80025cc:	2204      	movs	r2, #4
 80025ce:	4619      	mov	r1, r3
 80025d0:	4805      	ldr	r0, [pc, #20]	; (80025e8 <MX_TIM9_Init+0xb0>)
 80025d2:	f005 fcc5 	bl	8007f60 <HAL_TIM_IC_ConfigChannel>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <MX_TIM9_Init+0xa8>
  {
    Error_Handler();
 80025dc:	f001 f960 	bl	80038a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80025e0:	bf00      	nop
 80025e2:	3720      	adds	r7, #32
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	20000b60 	.word	0x20000b60
 80025ec:	40014000 	.word	0x40014000

080025f0 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80025f4:	4b0e      	ldr	r3, [pc, #56]	; (8002630 <MX_TIM10_Init+0x40>)
 80025f6:	4a0f      	ldr	r2, [pc, #60]	; (8002634 <MX_TIM10_Init+0x44>)
 80025f8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 42000 - 1;
 80025fa:	4b0d      	ldr	r3, [pc, #52]	; (8002630 <MX_TIM10_Init+0x40>)
 80025fc:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8002600:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002602:	4b0b      	ldr	r3, [pc, #44]	; (8002630 <MX_TIM10_Init+0x40>)
 8002604:	2200      	movs	r2, #0
 8002606:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 11 - 1;
 8002608:	4b09      	ldr	r3, [pc, #36]	; (8002630 <MX_TIM10_Init+0x40>)
 800260a:	220a      	movs	r2, #10
 800260c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800260e:	4b08      	ldr	r3, [pc, #32]	; (8002630 <MX_TIM10_Init+0x40>)
 8002610:	2200      	movs	r2, #0
 8002612:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002614:	4b06      	ldr	r3, [pc, #24]	; (8002630 <MX_TIM10_Init+0x40>)
 8002616:	2200      	movs	r2, #0
 8002618:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800261a:	4805      	ldr	r0, [pc, #20]	; (8002630 <MX_TIM10_Init+0x40>)
 800261c:	f005 f9e8 	bl	80079f0 <HAL_TIM_Base_Init>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8002626:	f001 f93b 	bl	80038a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800262a:	bf00      	nop
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	20000460 	.word	0x20000460
 8002634:	40014400 	.word	0x40014400

08002638 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800263c:	4b11      	ldr	r3, [pc, #68]	; (8002684 <MX_USART1_UART_Init+0x4c>)
 800263e:	4a12      	ldr	r2, [pc, #72]	; (8002688 <MX_USART1_UART_Init+0x50>)
 8002640:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002642:	4b10      	ldr	r3, [pc, #64]	; (8002684 <MX_USART1_UART_Init+0x4c>)
 8002644:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002648:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800264a:	4b0e      	ldr	r3, [pc, #56]	; (8002684 <MX_USART1_UART_Init+0x4c>)
 800264c:	2200      	movs	r2, #0
 800264e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002650:	4b0c      	ldr	r3, [pc, #48]	; (8002684 <MX_USART1_UART_Init+0x4c>)
 8002652:	2200      	movs	r2, #0
 8002654:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002656:	4b0b      	ldr	r3, [pc, #44]	; (8002684 <MX_USART1_UART_Init+0x4c>)
 8002658:	2200      	movs	r2, #0
 800265a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800265c:	4b09      	ldr	r3, [pc, #36]	; (8002684 <MX_USART1_UART_Init+0x4c>)
 800265e:	220c      	movs	r2, #12
 8002660:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002662:	4b08      	ldr	r3, [pc, #32]	; (8002684 <MX_USART1_UART_Init+0x4c>)
 8002664:	2200      	movs	r2, #0
 8002666:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002668:	4b06      	ldr	r3, [pc, #24]	; (8002684 <MX_USART1_UART_Init+0x4c>)
 800266a:	2200      	movs	r2, #0
 800266c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800266e:	4805      	ldr	r0, [pc, #20]	; (8002684 <MX_USART1_UART_Init+0x4c>)
 8002670:	f006 fbbc 	bl	8008dec <HAL_UART_Init>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800267a:	f001 f911 	bl	80038a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800267e:	bf00      	nop
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	200007a4 	.word	0x200007a4
 8002688:	40011000 	.word	0x40011000

0800268c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002690:	4b11      	ldr	r3, [pc, #68]	; (80026d8 <MX_USART2_UART_Init+0x4c>)
 8002692:	4a12      	ldr	r2, [pc, #72]	; (80026dc <MX_USART2_UART_Init+0x50>)
 8002694:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002696:	4b10      	ldr	r3, [pc, #64]	; (80026d8 <MX_USART2_UART_Init+0x4c>)
 8002698:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800269c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800269e:	4b0e      	ldr	r3, [pc, #56]	; (80026d8 <MX_USART2_UART_Init+0x4c>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80026a4:	4b0c      	ldr	r3, [pc, #48]	; (80026d8 <MX_USART2_UART_Init+0x4c>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80026aa:	4b0b      	ldr	r3, [pc, #44]	; (80026d8 <MX_USART2_UART_Init+0x4c>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80026b0:	4b09      	ldr	r3, [pc, #36]	; (80026d8 <MX_USART2_UART_Init+0x4c>)
 80026b2:	220c      	movs	r2, #12
 80026b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026b6:	4b08      	ldr	r3, [pc, #32]	; (80026d8 <MX_USART2_UART_Init+0x4c>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80026bc:	4b06      	ldr	r3, [pc, #24]	; (80026d8 <MX_USART2_UART_Init+0x4c>)
 80026be:	2200      	movs	r2, #0
 80026c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80026c2:	4805      	ldr	r0, [pc, #20]	; (80026d8 <MX_USART2_UART_Init+0x4c>)
 80026c4:	f006 fb92 	bl	8008dec <HAL_UART_Init>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80026ce:	f001 f8e7 	bl	80038a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80026d2:	bf00      	nop
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	20000c64 	.word	0x20000c64
 80026dc:	40004400 	.word	0x40004400

080026e0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80026e4:	4b11      	ldr	r3, [pc, #68]	; (800272c <MX_USART3_UART_Init+0x4c>)
 80026e6:	4a12      	ldr	r2, [pc, #72]	; (8002730 <MX_USART3_UART_Init+0x50>)
 80026e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80026ea:	4b10      	ldr	r3, [pc, #64]	; (800272c <MX_USART3_UART_Init+0x4c>)
 80026ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80026f2:	4b0e      	ldr	r3, [pc, #56]	; (800272c <MX_USART3_UART_Init+0x4c>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80026f8:	4b0c      	ldr	r3, [pc, #48]	; (800272c <MX_USART3_UART_Init+0x4c>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80026fe:	4b0b      	ldr	r3, [pc, #44]	; (800272c <MX_USART3_UART_Init+0x4c>)
 8002700:	2200      	movs	r2, #0
 8002702:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002704:	4b09      	ldr	r3, [pc, #36]	; (800272c <MX_USART3_UART_Init+0x4c>)
 8002706:	220c      	movs	r2, #12
 8002708:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800270a:	4b08      	ldr	r3, [pc, #32]	; (800272c <MX_USART3_UART_Init+0x4c>)
 800270c:	2200      	movs	r2, #0
 800270e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002710:	4b06      	ldr	r3, [pc, #24]	; (800272c <MX_USART3_UART_Init+0x4c>)
 8002712:	2200      	movs	r2, #0
 8002714:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002716:	4805      	ldr	r0, [pc, #20]	; (800272c <MX_USART3_UART_Init+0x4c>)
 8002718:	f006 fb68 	bl	8008dec <HAL_UART_Init>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002722:	f001 f8bd 	bl	80038a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002726:	bf00      	nop
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	200003b0 	.word	0x200003b0
 8002730:	40004800 	.word	0x40004800

08002734 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800273a:	2300      	movs	r3, #0
 800273c:	607b      	str	r3, [r7, #4]
 800273e:	4b10      	ldr	r3, [pc, #64]	; (8002780 <MX_DMA_Init+0x4c>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002742:	4a0f      	ldr	r2, [pc, #60]	; (8002780 <MX_DMA_Init+0x4c>)
 8002744:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002748:	6313      	str	r3, [r2, #48]	; 0x30
 800274a:	4b0d      	ldr	r3, [pc, #52]	; (8002780 <MX_DMA_Init+0x4c>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002752:	607b      	str	r3, [r7, #4]
 8002754:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002756:	2200      	movs	r2, #0
 8002758:	2100      	movs	r1, #0
 800275a:	200c      	movs	r0, #12
 800275c:	f002 fb6f 	bl	8004e3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002760:	200c      	movs	r0, #12
 8002762:	f002 fb88 	bl	8004e76 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002766:	2200      	movs	r2, #0
 8002768:	2100      	movs	r1, #0
 800276a:	2010      	movs	r0, #16
 800276c:	f002 fb67 	bl	8004e3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002770:	2010      	movs	r0, #16
 8002772:	f002 fb80 	bl	8004e76 <HAL_NVIC_EnableIRQ>

}
 8002776:	bf00      	nop
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	40023800 	.word	0x40023800

08002784 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b08c      	sub	sp, #48	; 0x30
 8002788:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800278a:	f107 031c 	add.w	r3, r7, #28
 800278e:	2200      	movs	r2, #0
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	605a      	str	r2, [r3, #4]
 8002794:	609a      	str	r2, [r3, #8]
 8002796:	60da      	str	r2, [r3, #12]
 8002798:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800279a:	2300      	movs	r3, #0
 800279c:	61bb      	str	r3, [r7, #24]
 800279e:	4b35      	ldr	r3, [pc, #212]	; (8002874 <MX_GPIO_Init+0xf0>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	4a34      	ldr	r2, [pc, #208]	; (8002874 <MX_GPIO_Init+0xf0>)
 80027a4:	f043 0310 	orr.w	r3, r3, #16
 80027a8:	6313      	str	r3, [r2, #48]	; 0x30
 80027aa:	4b32      	ldr	r3, [pc, #200]	; (8002874 <MX_GPIO_Init+0xf0>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	f003 0310 	and.w	r3, r3, #16
 80027b2:	61bb      	str	r3, [r7, #24]
 80027b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80027b6:	2300      	movs	r3, #0
 80027b8:	617b      	str	r3, [r7, #20]
 80027ba:	4b2e      	ldr	r3, [pc, #184]	; (8002874 <MX_GPIO_Init+0xf0>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	4a2d      	ldr	r2, [pc, #180]	; (8002874 <MX_GPIO_Init+0xf0>)
 80027c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027c4:	6313      	str	r3, [r2, #48]	; 0x30
 80027c6:	4b2b      	ldr	r3, [pc, #172]	; (8002874 <MX_GPIO_Init+0xf0>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ce:	617b      	str	r3, [r7, #20]
 80027d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027d2:	2300      	movs	r3, #0
 80027d4:	613b      	str	r3, [r7, #16]
 80027d6:	4b27      	ldr	r3, [pc, #156]	; (8002874 <MX_GPIO_Init+0xf0>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027da:	4a26      	ldr	r2, [pc, #152]	; (8002874 <MX_GPIO_Init+0xf0>)
 80027dc:	f043 0301 	orr.w	r3, r3, #1
 80027e0:	6313      	str	r3, [r2, #48]	; 0x30
 80027e2:	4b24      	ldr	r3, [pc, #144]	; (8002874 <MX_GPIO_Init+0xf0>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	613b      	str	r3, [r7, #16]
 80027ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027ee:	2300      	movs	r3, #0
 80027f0:	60fb      	str	r3, [r7, #12]
 80027f2:	4b20      	ldr	r3, [pc, #128]	; (8002874 <MX_GPIO_Init+0xf0>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	4a1f      	ldr	r2, [pc, #124]	; (8002874 <MX_GPIO_Init+0xf0>)
 80027f8:	f043 0308 	orr.w	r3, r3, #8
 80027fc:	6313      	str	r3, [r2, #48]	; 0x30
 80027fe:	4b1d      	ldr	r3, [pc, #116]	; (8002874 <MX_GPIO_Init+0xf0>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	f003 0308 	and.w	r3, r3, #8
 8002806:	60fb      	str	r3, [r7, #12]
 8002808:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800280a:	2300      	movs	r3, #0
 800280c:	60bb      	str	r3, [r7, #8]
 800280e:	4b19      	ldr	r3, [pc, #100]	; (8002874 <MX_GPIO_Init+0xf0>)
 8002810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002812:	4a18      	ldr	r2, [pc, #96]	; (8002874 <MX_GPIO_Init+0xf0>)
 8002814:	f043 0304 	orr.w	r3, r3, #4
 8002818:	6313      	str	r3, [r2, #48]	; 0x30
 800281a:	4b16      	ldr	r3, [pc, #88]	; (8002874 <MX_GPIO_Init+0xf0>)
 800281c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281e:	f003 0304 	and.w	r3, r3, #4
 8002822:	60bb      	str	r3, [r7, #8]
 8002824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002826:	2300      	movs	r3, #0
 8002828:	607b      	str	r3, [r7, #4]
 800282a:	4b12      	ldr	r3, [pc, #72]	; (8002874 <MX_GPIO_Init+0xf0>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	4a11      	ldr	r2, [pc, #68]	; (8002874 <MX_GPIO_Init+0xf0>)
 8002830:	f043 0302 	orr.w	r3, r3, #2
 8002834:	6313      	str	r3, [r2, #48]	; 0x30
 8002836:	4b0f      	ldr	r3, [pc, #60]	; (8002874 <MX_GPIO_Init+0xf0>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	607b      	str	r3, [r7, #4]
 8002840:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : RC_CH6_Pin */
  GPIO_InitStruct.Pin = RC_CH6_Pin;
 8002842:	2308      	movs	r3, #8
 8002844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002846:	4b0c      	ldr	r3, [pc, #48]	; (8002878 <MX_GPIO_Init+0xf4>)
 8002848:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800284a:	2302      	movs	r3, #2
 800284c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(RC_CH6_GPIO_Port, &GPIO_InitStruct);
 800284e:	f107 031c 	add.w	r3, r7, #28
 8002852:	4619      	mov	r1, r3
 8002854:	4809      	ldr	r0, [pc, #36]	; (800287c <MX_GPIO_Init+0xf8>)
 8002856:	f002 fe97 	bl	8005588 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800285a:	2200      	movs	r2, #0
 800285c:	2100      	movs	r1, #0
 800285e:	2009      	movs	r0, #9
 8002860:	f002 faed 	bl	8004e3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002864:	2009      	movs	r0, #9
 8002866:	f002 fb06 	bl	8004e76 <HAL_NVIC_EnableIRQ>

}
 800286a:	bf00      	nop
 800286c:	3730      	adds	r7, #48	; 0x30
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	40023800 	.word	0x40023800
 8002878:	10310000 	.word	0x10310000
 800287c:	40020c00 	.word	0x40020c00

08002880 <initPWM_DATA>:

/* USER CODE BEGIN 4 */



void initPWM_DATA(PWM_DATA* pwm_data, TIM_HandleTypeDef *htim, uint32_t channel){
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
	pwm_data->onFallingEdge = false;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2200      	movs	r2, #0
 8002890:	765a      	strb	r2, [r3, #25]
	pwm_data->onRisingEdge = true;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2201      	movs	r2, #1
 8002896:	761a      	strb	r2, [r3, #24]
	pwm_data->channel = channel;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	605a      	str	r2, [r3, #4]
	pwm_data->htim = htim;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	68ba      	ldr	r2, [r7, #8]
 80028a2:	601a      	str	r2, [r3, #0]
}
 80028a4:	bf00      	nop
 80028a6:	3714      	adds	r7, #20
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <setPWM>:

void setPWM(TIM_HandleTypeDef htim, uint32_t channel, uint32_t dutyCycle){
 80028b0:	b084      	sub	sp, #16
 80028b2:	b490      	push	{r4, r7}
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	f107 0408 	add.w	r4, r7, #8
 80028ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	__HAL_TIM_SET_COMPARE(&htim, channel, dutyCycle);
 80028be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d103      	bne.n	80028cc <setPWM+0x1c>
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80028c8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80028ca:	e010      	b.n	80028ee <setPWM+0x3e>
	__HAL_TIM_SET_COMPARE(&htim, channel, dutyCycle);
 80028cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028ce:	2b04      	cmp	r3, #4
 80028d0:	d103      	bne.n	80028da <setPWM+0x2a>
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80028d6:	639a      	str	r2, [r3, #56]	; 0x38
}
 80028d8:	e009      	b.n	80028ee <setPWM+0x3e>
	__HAL_TIM_SET_COMPARE(&htim, channel, dutyCycle);
 80028da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028dc:	2b08      	cmp	r3, #8
 80028de:	d103      	bne.n	80028e8 <setPWM+0x38>
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80028e4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80028e6:	e002      	b.n	80028ee <setPWM+0x3e>
	__HAL_TIM_SET_COMPARE(&htim, channel, dutyCycle);
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80028ec:	641a      	str	r2, [r3, #64]	; 0x40
}
 80028ee:	bf00      	nop
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bc90      	pop	{r4, r7}
 80028f4:	b004      	add	sp, #16
 80028f6:	4770      	bx	lr

080028f8 <ESCInit>:

void ESCInit(){
 80028f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028fa:	b08f      	sub	sp, #60	; 0x3c
 80028fc:	af0e      	add	r7, sp, #56	; 0x38
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80028fe:	2100      	movs	r1, #0
 8002900:	4861      	ldr	r0, [pc, #388]	; (8002a88 <ESCInit+0x190>)
 8002902:	f005 f949 	bl	8007b98 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8002906:	2104      	movs	r1, #4
 8002908:	485f      	ldr	r0, [pc, #380]	; (8002a88 <ESCInit+0x190>)
 800290a:	f005 f945 	bl	8007b98 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800290e:	2108      	movs	r1, #8
 8002910:	485d      	ldr	r0, [pc, #372]	; (8002a88 <ESCInit+0x190>)
 8002912:	f005 f941 	bl	8007b98 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8002916:	210c      	movs	r1, #12
 8002918:	485b      	ldr	r0, [pc, #364]	; (8002a88 <ESCInit+0x190>)
 800291a:	f005 f93d 	bl	8007b98 <HAL_TIM_PWM_Start>
	setPWM(htim2, TIM_CHANNEL_1, ESC_PWM_MAX);
 800291e:	4e5a      	ldr	r6, [pc, #360]	; (8002a88 <ESCInit+0x190>)
 8002920:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002924:	930d      	str	r3, [sp, #52]	; 0x34
 8002926:	2300      	movs	r3, #0
 8002928:	930c      	str	r3, [sp, #48]	; 0x30
 800292a:	466d      	mov	r5, sp
 800292c:	f106 0410 	add.w	r4, r6, #16
 8002930:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002932:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002934:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002936:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002938:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800293c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002940:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002944:	f7ff ffb4 	bl	80028b0 <setPWM>
	setPWM(htim2, TIM_CHANNEL_2, ESC_PWM_MAX);
 8002948:	4e4f      	ldr	r6, [pc, #316]	; (8002a88 <ESCInit+0x190>)
 800294a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800294e:	930d      	str	r3, [sp, #52]	; 0x34
 8002950:	2304      	movs	r3, #4
 8002952:	930c      	str	r3, [sp, #48]	; 0x30
 8002954:	466d      	mov	r5, sp
 8002956:	f106 0410 	add.w	r4, r6, #16
 800295a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800295c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800295e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002960:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002962:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002966:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800296a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800296e:	f7ff ff9f 	bl	80028b0 <setPWM>
	setPWM(htim2, TIM_CHANNEL_3, ESC_PWM_MAX);
 8002972:	4e45      	ldr	r6, [pc, #276]	; (8002a88 <ESCInit+0x190>)
 8002974:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002978:	930d      	str	r3, [sp, #52]	; 0x34
 800297a:	2308      	movs	r3, #8
 800297c:	930c      	str	r3, [sp, #48]	; 0x30
 800297e:	466d      	mov	r5, sp
 8002980:	f106 0410 	add.w	r4, r6, #16
 8002984:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002986:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002988:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800298a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800298c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002990:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002994:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002998:	f7ff ff8a 	bl	80028b0 <setPWM>
	setPWM(htim2, TIM_CHANNEL_4, ESC_PWM_MAX);
 800299c:	4e3a      	ldr	r6, [pc, #232]	; (8002a88 <ESCInit+0x190>)
 800299e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80029a2:	930d      	str	r3, [sp, #52]	; 0x34
 80029a4:	230c      	movs	r3, #12
 80029a6:	930c      	str	r3, [sp, #48]	; 0x30
 80029a8:	466d      	mov	r5, sp
 80029aa:	f106 0410 	add.w	r4, r6, #16
 80029ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029b6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80029ba:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80029be:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80029c2:	f7ff ff75 	bl	80028b0 <setPWM>
	HAL_Delay(2000);
 80029c6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80029ca:	f002 f93b 	bl	8004c44 <HAL_Delay>
	setPWM(htim2, TIM_CHANNEL_1, ESC_PWM_MIN);
 80029ce:	4e2e      	ldr	r6, [pc, #184]	; (8002a88 <ESCInit+0x190>)
 80029d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029d4:	930d      	str	r3, [sp, #52]	; 0x34
 80029d6:	2300      	movs	r3, #0
 80029d8:	930c      	str	r3, [sp, #48]	; 0x30
 80029da:	466d      	mov	r5, sp
 80029dc:	f106 0410 	add.w	r4, r6, #16
 80029e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029e8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80029ec:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80029f0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80029f4:	f7ff ff5c 	bl	80028b0 <setPWM>
	setPWM(htim2, TIM_CHANNEL_2, ESC_PWM_MIN);
 80029f8:	4e23      	ldr	r6, [pc, #140]	; (8002a88 <ESCInit+0x190>)
 80029fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029fe:	930d      	str	r3, [sp, #52]	; 0x34
 8002a00:	2304      	movs	r3, #4
 8002a02:	930c      	str	r3, [sp, #48]	; 0x30
 8002a04:	466d      	mov	r5, sp
 8002a06:	f106 0410 	add.w	r4, r6, #16
 8002a0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a12:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002a16:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002a1a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002a1e:	f7ff ff47 	bl	80028b0 <setPWM>
	setPWM(htim2, TIM_CHANNEL_3, ESC_PWM_MIN);
 8002a22:	4e19      	ldr	r6, [pc, #100]	; (8002a88 <ESCInit+0x190>)
 8002a24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a28:	930d      	str	r3, [sp, #52]	; 0x34
 8002a2a:	2308      	movs	r3, #8
 8002a2c:	930c      	str	r3, [sp, #48]	; 0x30
 8002a2e:	466d      	mov	r5, sp
 8002a30:	f106 0410 	add.w	r4, r6, #16
 8002a34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a3c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002a40:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002a44:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002a48:	f7ff ff32 	bl	80028b0 <setPWM>
	setPWM(htim2, TIM_CHANNEL_4, ESC_PWM_MIN);
 8002a4c:	4e0e      	ldr	r6, [pc, #56]	; (8002a88 <ESCInit+0x190>)
 8002a4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a52:	930d      	str	r3, [sp, #52]	; 0x34
 8002a54:	230c      	movs	r3, #12
 8002a56:	930c      	str	r3, [sp, #48]	; 0x30
 8002a58:	466d      	mov	r5, sp
 8002a5a:	f106 0410 	add.w	r4, r6, #16
 8002a5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a66:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002a6a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002a6e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002a72:	f7ff ff1d 	bl	80028b0 <setPWM>
	HAL_Delay(2000);
 8002a76:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002a7a:	f002 f8e3 	bl	8004c44 <HAL_Delay>
}
 8002a7e:	bf00      	nop
 8002a80:	3704      	adds	r7, #4
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a86:	bf00      	nop
 8002a88:	20000bc4 	.word	0x20000bc4

08002a8c <BMPInit>:

void BMPInit(){
 8002a8c:	b5b0      	push	{r4, r5, r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
	kalman_init(&kalman_altitude, 0.1, 0.1, 0.03);
 8002a92:	ed9f 1a62 	vldr	s2, [pc, #392]	; 8002c1c <BMPInit+0x190>
 8002a96:	eddf 0a62 	vldr	s1, [pc, #392]	; 8002c20 <BMPInit+0x194>
 8002a9a:	ed9f 0a61 	vldr	s0, [pc, #388]	; 8002c20 <BMPInit+0x194>
 8002a9e:	4861      	ldr	r0, [pc, #388]	; (8002c24 <BMPInit+0x198>)
 8002aa0:	f7fe fb98 	bl	80011d4 <kalman_init>
	bmp280_init_default_params(&bmp280.params);
 8002aa4:	4860      	ldr	r0, [pc, #384]	; (8002c28 <BMPInit+0x19c>)
 8002aa6:	f7fe fbae 	bl	8001206 <bmp280_init_default_params>
	bmp280.addr = BMP280_I2C_ADDRESS_0;
 8002aaa:	4b60      	ldr	r3, [pc, #384]	; (8002c2c <BMPInit+0x1a0>)
 8002aac:	2276      	movs	r2, #118	; 0x76
 8002aae:	849a      	strh	r2, [r3, #36]	; 0x24
	bmp280.i2c = &hi2c1;
 8002ab0:	4b5e      	ldr	r3, [pc, #376]	; (8002c2c <BMPInit+0x1a0>)
 8002ab2:	4a5f      	ldr	r2, [pc, #380]	; (8002c30 <BMPInit+0x1a4>)
 8002ab4:	629a      	str	r2, [r3, #40]	; 0x28

	while(!bmp280_init(&bmp280, &bmp280.params)){
 8002ab6:	e020      	b.n	8002afa <BMPInit+0x6e>
		strSize = sprintf((char*)buffer, "BMP280 initialization failed\r\n");
 8002ab8:	4a5e      	ldr	r2, [pc, #376]	; (8002c34 <BMPInit+0x1a8>)
 8002aba:	4b5f      	ldr	r3, [pc, #380]	; (8002c38 <BMPInit+0x1ac>)
 8002abc:	4615      	mov	r5, r2
 8002abe:	461c      	mov	r4, r3
 8002ac0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ac2:	6028      	str	r0, [r5, #0]
 8002ac4:	6069      	str	r1, [r5, #4]
 8002ac6:	60aa      	str	r2, [r5, #8]
 8002ac8:	60eb      	str	r3, [r5, #12]
 8002aca:	cc07      	ldmia	r4!, {r0, r1, r2}
 8002acc:	6128      	str	r0, [r5, #16]
 8002ace:	6169      	str	r1, [r5, #20]
 8002ad0:	61aa      	str	r2, [r5, #24]
 8002ad2:	8823      	ldrh	r3, [r4, #0]
 8002ad4:	78a2      	ldrb	r2, [r4, #2]
 8002ad6:	83ab      	strh	r3, [r5, #28]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	77ab      	strb	r3, [r5, #30]
 8002adc:	231e      	movs	r3, #30
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	4b56      	ldr	r3, [pc, #344]	; (8002c3c <BMPInit+0x1b0>)
 8002ae2:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, buffer, strSize, 1000);
 8002ae4:	4b55      	ldr	r3, [pc, #340]	; (8002c3c <BMPInit+0x1b0>)
 8002ae6:	881a      	ldrh	r2, [r3, #0]
 8002ae8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002aec:	4951      	ldr	r1, [pc, #324]	; (8002c34 <BMPInit+0x1a8>)
 8002aee:	4854      	ldr	r0, [pc, #336]	; (8002c40 <BMPInit+0x1b4>)
 8002af0:	f006 f9c9 	bl	8008e86 <HAL_UART_Transmit>
		HAL_Delay(50);
 8002af4:	2032      	movs	r0, #50	; 0x32
 8002af6:	f002 f8a5 	bl	8004c44 <HAL_Delay>
	while(!bmp280_init(&bmp280, &bmp280.params)){
 8002afa:	494b      	ldr	r1, [pc, #300]	; (8002c28 <BMPInit+0x19c>)
 8002afc:	484b      	ldr	r0, [pc, #300]	; (8002c2c <BMPInit+0x1a0>)
 8002afe:	f7fe fcfd 	bl	80014fc <bmp280_init>
 8002b02:	4603      	mov	r3, r0
 8002b04:	f083 0301 	eor.w	r3, r3, #1
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d1d4      	bne.n	8002ab8 <BMPInit+0x2c>
	}
	HAL_Delay(1000);
 8002b0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b12:	f002 f897 	bl	8004c44 <HAL_Delay>
	bme280p = bmp280.id == BME280_CHIP_ID;
 8002b16:	4b45      	ldr	r3, [pc, #276]	; (8002c2c <BMPInit+0x1a0>)
 8002b18:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002b1c:	2b60      	cmp	r3, #96	; 0x60
 8002b1e:	bf0c      	ite	eq
 8002b20:	2301      	moveq	r3, #1
 8002b22:	2300      	movne	r3, #0
 8002b24:	b2da      	uxtb	r2, r3
 8002b26:	4b47      	ldr	r3, [pc, #284]	; (8002c44 <BMPInit+0x1b8>)
 8002b28:	701a      	strb	r2, [r3, #0]
	strSize = sprintf((char*)buffer, "BMP280: found %s\r\n", bme280p ? "BME280" : "BMP280");
 8002b2a:	4b46      	ldr	r3, [pc, #280]	; (8002c44 <BMPInit+0x1b8>)
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <BMPInit+0xaa>
 8002b32:	4b45      	ldr	r3, [pc, #276]	; (8002c48 <BMPInit+0x1bc>)
 8002b34:	e000      	b.n	8002b38 <BMPInit+0xac>
 8002b36:	4b45      	ldr	r3, [pc, #276]	; (8002c4c <BMPInit+0x1c0>)
 8002b38:	461a      	mov	r2, r3
 8002b3a:	4945      	ldr	r1, [pc, #276]	; (8002c50 <BMPInit+0x1c4>)
 8002b3c:	483d      	ldr	r0, [pc, #244]	; (8002c34 <BMPInit+0x1a8>)
 8002b3e:	f007 fbef 	bl	800a320 <siprintf>
 8002b42:	4603      	mov	r3, r0
 8002b44:	b29a      	uxth	r2, r3
 8002b46:	4b3d      	ldr	r3, [pc, #244]	; (8002c3c <BMPInit+0x1b0>)
 8002b48:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, buffer, strSize, 1000);
 8002b4a:	4b3c      	ldr	r3, [pc, #240]	; (8002c3c <BMPInit+0x1b0>)
 8002b4c:	881a      	ldrh	r2, [r3, #0]
 8002b4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b52:	4938      	ldr	r1, [pc, #224]	; (8002c34 <BMPInit+0x1a8>)
 8002b54:	483a      	ldr	r0, [pc, #232]	; (8002c40 <BMPInit+0x1b4>)
 8002b56:	f006 f996 	bl	8008e86 <HAL_UART_Transmit>

	strSize = sprintf((char*)buffer, "Calibrating.\r\n");
 8002b5a:	4a36      	ldr	r2, [pc, #216]	; (8002c34 <BMPInit+0x1a8>)
 8002b5c:	4b3d      	ldr	r3, [pc, #244]	; (8002c54 <BMPInit+0x1c8>)
 8002b5e:	4614      	mov	r4, r2
 8002b60:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002b62:	6020      	str	r0, [r4, #0]
 8002b64:	6061      	str	r1, [r4, #4]
 8002b66:	60a2      	str	r2, [r4, #8]
 8002b68:	881a      	ldrh	r2, [r3, #0]
 8002b6a:	789b      	ldrb	r3, [r3, #2]
 8002b6c:	81a2      	strh	r2, [r4, #12]
 8002b6e:	73a3      	strb	r3, [r4, #14]
 8002b70:	230e      	movs	r3, #14
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	4b31      	ldr	r3, [pc, #196]	; (8002c3c <BMPInit+0x1b0>)
 8002b76:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, buffer, strSize, 10);
 8002b78:	4b30      	ldr	r3, [pc, #192]	; (8002c3c <BMPInit+0x1b0>)
 8002b7a:	881a      	ldrh	r2, [r3, #0]
 8002b7c:	230a      	movs	r3, #10
 8002b7e:	492d      	ldr	r1, [pc, #180]	; (8002c34 <BMPInit+0x1a8>)
 8002b80:	482f      	ldr	r0, [pc, #188]	; (8002c40 <BMPInit+0x1b4>)
 8002b82:	f006 f980 	bl	8008e86 <HAL_UART_Transmit>

	float pres_total = 0;
 8002b86:	f04f 0300 	mov.w	r3, #0
 8002b8a:	617b      	str	r3, [r7, #20]
	float pressure, temperature, humidity;

	for(int i = 0; i < 100; ++i){
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	613b      	str	r3, [r7, #16]
 8002b90:	e01f      	b.n	8002bd2 <BMPInit+0x146>
		while(bmp280_is_measuring(&bmp280)) continue;
 8002b92:	bf00      	nop
 8002b94:	4825      	ldr	r0, [pc, #148]	; (8002c2c <BMPInit+0x1a0>)
 8002b96:	f7fe fd5e 	bl	8001656 <bmp280_is_measuring>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1f8      	bne.n	8002b92 <BMPInit+0x106>
		bmp280_read_float(&bmp280, &temperature, &pressure, &humidity);
 8002ba0:	1d3b      	adds	r3, r7, #4
 8002ba2:	f107 020c 	add.w	r2, r7, #12
 8002ba6:	f107 0108 	add.w	r1, r7, #8
 8002baa:	4820      	ldr	r0, [pc, #128]	; (8002c2c <BMPInit+0x1a0>)
 8002bac:	f7ff f816 	bl	8001bdc <bmp280_read_float>
		HAL_UART_Transmit(&huart1, (uint8_t*)".", 1, 10);
 8002bb0:	230a      	movs	r3, #10
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	4928      	ldr	r1, [pc, #160]	; (8002c58 <BMPInit+0x1cc>)
 8002bb6:	4822      	ldr	r0, [pc, #136]	; (8002c40 <BMPInit+0x1b4>)
 8002bb8:	f006 f965 	bl	8008e86 <HAL_UART_Transmit>
		pres_total = pres_total + pressure;
 8002bbc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bc0:	ed97 7a05 	vldr	s14, [r7, #20]
 8002bc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bc8:	edc7 7a05 	vstr	s15, [r7, #20]
	for(int i = 0; i < 100; ++i){
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	3301      	adds	r3, #1
 8002bd0:	613b      	str	r3, [r7, #16]
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	2b63      	cmp	r3, #99	; 0x63
 8002bd6:	dddd      	ble.n	8002b94 <BMPInit+0x108>
	}

	pressureRef = pres_total / 100;
 8002bd8:	ed97 7a05 	vldr	s14, [r7, #20]
 8002bdc:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8002c5c <BMPInit+0x1d0>
 8002be0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002be4:	4b1e      	ldr	r3, [pc, #120]	; (8002c60 <BMPInit+0x1d4>)
 8002be6:	edc3 7a00 	vstr	s15, [r3]
	strSize = sprintf((char*)buffer,"Done!\r\n");
 8002bea:	4a12      	ldr	r2, [pc, #72]	; (8002c34 <BMPInit+0x1a8>)
 8002bec:	4b1d      	ldr	r3, [pc, #116]	; (8002c64 <BMPInit+0x1d8>)
 8002bee:	cb03      	ldmia	r3!, {r0, r1}
 8002bf0:	6010      	str	r0, [r2, #0]
 8002bf2:	6051      	str	r1, [r2, #4]
 8002bf4:	2307      	movs	r3, #7
 8002bf6:	b29a      	uxth	r2, r3
 8002bf8:	4b10      	ldr	r3, [pc, #64]	; (8002c3c <BMPInit+0x1b0>)
 8002bfa:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, buffer, strSize, 10);
 8002bfc:	4b0f      	ldr	r3, [pc, #60]	; (8002c3c <BMPInit+0x1b0>)
 8002bfe:	881a      	ldrh	r2, [r3, #0]
 8002c00:	230a      	movs	r3, #10
 8002c02:	490c      	ldr	r1, [pc, #48]	; (8002c34 <BMPInit+0x1a8>)
 8002c04:	480e      	ldr	r0, [pc, #56]	; (8002c40 <BMPInit+0x1b4>)
 8002c06:	f006 f93e 	bl	8008e86 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8002c0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c0e:	f002 f819 	bl	8004c44 <HAL_Delay>
}
 8002c12:	bf00      	nop
 8002c14:	3718      	adds	r7, #24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bdb0      	pop	{r4, r5, r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	3cf5c28f 	.word	0x3cf5c28f
 8002c20:	3dcccccd 	.word	0x3dcccccd
 8002c24:	200006b0 	.word	0x200006b0
 8002c28:	20000c5c 	.word	0x20000c5c
 8002c2c:	20000c30 	.word	0x20000c30
 8002c30:	2000040c 	.word	0x2000040c
 8002c34:	200007e4 	.word	0x200007e4
 8002c38:	0800cdfc 	.word	0x0800cdfc
 8002c3c:	20000d20 	.word	0x20000d20
 8002c40:	200007a4 	.word	0x200007a4
 8002c44:	20000774 	.word	0x20000774
 8002c48:	0800ce1c 	.word	0x0800ce1c
 8002c4c:	0800ce24 	.word	0x0800ce24
 8002c50:	0800ce2c 	.word	0x0800ce2c
 8002c54:	0800ce40 	.word	0x0800ce40
 8002c58:	0800ce50 	.word	0x0800ce50
 8002c5c:	42c80000 	.word	0x42c80000
 8002c60:	2000020c 	.word	0x2000020c
 8002c64:	0800ce54 	.word	0x0800ce54

08002c68 <GPSInit>:

void GPSInit(){
 8002c68:	b598      	push	{r3, r4, r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
	  //__HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);

	  if(HAL_UART_Receive_DMA(&huart3, gps_rx_buf, GPS_BUF_SIZE) != HAL_OK){
 8002c6c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002c70:	4913      	ldr	r1, [pc, #76]	; (8002cc0 <GPSInit+0x58>)
 8002c72:	4814      	ldr	r0, [pc, #80]	; (8002cc4 <GPSInit+0x5c>)
 8002c74:	f006 f9a0 	bl	8008fb8 <HAL_UART_Receive_DMA>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <GPSInit+0x1a>
		  Error_Handler();
 8002c7e:	f000 fe0f 	bl	80038a0 <Error_Handler>
	  }

	  __HAL_DMA_DISABLE_IT(huart3.hdmarx, DMA_IT_HT);
 8002c82:	4b10      	ldr	r3, [pc, #64]	; (8002cc4 <GPSInit+0x5c>)
 8002c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	4b0e      	ldr	r3, [pc, #56]	; (8002cc4 <GPSInit+0x5c>)
 8002c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f022 0208 	bic.w	r2, r2, #8
 8002c94:	601a      	str	r2, [r3, #0]

	  strSize = sprintf((char*)buffer, "GPS Done!\r\n");
 8002c96:	4a0c      	ldr	r2, [pc, #48]	; (8002cc8 <GPSInit+0x60>)
 8002c98:	4b0c      	ldr	r3, [pc, #48]	; (8002ccc <GPSInit+0x64>)
 8002c9a:	4614      	mov	r4, r2
 8002c9c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002c9e:	6020      	str	r0, [r4, #0]
 8002ca0:	6061      	str	r1, [r4, #4]
 8002ca2:	60a2      	str	r2, [r4, #8]
 8002ca4:	230b      	movs	r3, #11
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	4b09      	ldr	r3, [pc, #36]	; (8002cd0 <GPSInit+0x68>)
 8002caa:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1, buffer, strSize, 10);
 8002cac:	4b08      	ldr	r3, [pc, #32]	; (8002cd0 <GPSInit+0x68>)
 8002cae:	881a      	ldrh	r2, [r3, #0]
 8002cb0:	230a      	movs	r3, #10
 8002cb2:	4905      	ldr	r1, [pc, #20]	; (8002cc8 <GPSInit+0x60>)
 8002cb4:	4807      	ldr	r0, [pc, #28]	; (8002cd4 <GPSInit+0x6c>)
 8002cb6:	f006 f8e6 	bl	8008e86 <HAL_UART_Transmit>
}
 8002cba:	bf00      	nop
 8002cbc:	bd98      	pop	{r3, r4, r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	200008b8 	.word	0x200008b8
 8002cc4:	200003b0 	.word	0x200003b0
 8002cc8:	200007e4 	.word	0x200007e4
 8002ccc:	0800ce5c 	.word	0x0800ce5c
 8002cd0:	20000d20 	.word	0x20000d20
 8002cd4:	200007a4 	.word	0x200007a4

08002cd8 <CompassInit>:

void CompassInit(){
 8002cd8:	b5b0      	push	{r4, r5, r7, lr}
 8002cda:	af00      	add	r7, sp, #0
	I2Cdev_init(&hi2c3);
 8002cdc:	4824      	ldr	r0, [pc, #144]	; (8002d70 <CompassInit+0x98>)
 8002cde:	f7fe f9ef 	bl	80010c0 <I2Cdev_init>

	HMC5883L_initialize();
 8002ce2:	f7fe f981 	bl	8000fe8 <HMC5883L_initialize>
	while(!HMC5883L_testConnection()){
 8002ce6:	e01f      	b.n	8002d28 <CompassInit+0x50>
		strSize = sprintf((char*)buffer, "Inisialisasi HMC5883L gagal!\r\n");
 8002ce8:	4a22      	ldr	r2, [pc, #136]	; (8002d74 <CompassInit+0x9c>)
 8002cea:	4b23      	ldr	r3, [pc, #140]	; (8002d78 <CompassInit+0xa0>)
 8002cec:	4615      	mov	r5, r2
 8002cee:	461c      	mov	r4, r3
 8002cf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cf2:	6028      	str	r0, [r5, #0]
 8002cf4:	6069      	str	r1, [r5, #4]
 8002cf6:	60aa      	str	r2, [r5, #8]
 8002cf8:	60eb      	str	r3, [r5, #12]
 8002cfa:	cc07      	ldmia	r4!, {r0, r1, r2}
 8002cfc:	6128      	str	r0, [r5, #16]
 8002cfe:	6169      	str	r1, [r5, #20]
 8002d00:	61aa      	str	r2, [r5, #24]
 8002d02:	8823      	ldrh	r3, [r4, #0]
 8002d04:	78a2      	ldrb	r2, [r4, #2]
 8002d06:	83ab      	strh	r3, [r5, #28]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	77ab      	strb	r3, [r5, #30]
 8002d0c:	231e      	movs	r3, #30
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	4b1a      	ldr	r3, [pc, #104]	; (8002d7c <CompassInit+0xa4>)
 8002d12:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, buffer, strSize, 10);
 8002d14:	4b19      	ldr	r3, [pc, #100]	; (8002d7c <CompassInit+0xa4>)
 8002d16:	881a      	ldrh	r2, [r3, #0]
 8002d18:	230a      	movs	r3, #10
 8002d1a:	4916      	ldr	r1, [pc, #88]	; (8002d74 <CompassInit+0x9c>)
 8002d1c:	4818      	ldr	r0, [pc, #96]	; (8002d80 <CompassInit+0xa8>)
 8002d1e:	f006 f8b2 	bl	8008e86 <HAL_UART_Transmit>
		HAL_Delay(10);
 8002d22:	200a      	movs	r0, #10
 8002d24:	f001 ff8e 	bl	8004c44 <HAL_Delay>
	while(!HMC5883L_testConnection()){
 8002d28:	f7fe f974 	bl	8001014 <HMC5883L_testConnection>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	f083 0301 	eor.w	r3, r3, #1
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1d7      	bne.n	8002ce8 <CompassInit+0x10>
	}
	strSize = sprintf((char*)buffer, "HMC5883L Sukses!\r\n");
 8002d38:	4a0e      	ldr	r2, [pc, #56]	; (8002d74 <CompassInit+0x9c>)
 8002d3a:	4b12      	ldr	r3, [pc, #72]	; (8002d84 <CompassInit+0xac>)
 8002d3c:	4615      	mov	r5, r2
 8002d3e:	461c      	mov	r4, r3
 8002d40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d42:	6028      	str	r0, [r5, #0]
 8002d44:	6069      	str	r1, [r5, #4]
 8002d46:	60aa      	str	r2, [r5, #8]
 8002d48:	60eb      	str	r3, [r5, #12]
 8002d4a:	8823      	ldrh	r3, [r4, #0]
 8002d4c:	78a2      	ldrb	r2, [r4, #2]
 8002d4e:	822b      	strh	r3, [r5, #16]
 8002d50:	4613      	mov	r3, r2
 8002d52:	74ab      	strb	r3, [r5, #18]
 8002d54:	2312      	movs	r3, #18
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	4b08      	ldr	r3, [pc, #32]	; (8002d7c <CompassInit+0xa4>)
 8002d5a:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, buffer, strSize, 10);
 8002d5c:	4b07      	ldr	r3, [pc, #28]	; (8002d7c <CompassInit+0xa4>)
 8002d5e:	881a      	ldrh	r2, [r3, #0]
 8002d60:	230a      	movs	r3, #10
 8002d62:	4904      	ldr	r1, [pc, #16]	; (8002d74 <CompassInit+0x9c>)
 8002d64:	4806      	ldr	r0, [pc, #24]	; (8002d80 <CompassInit+0xa8>)
 8002d66:	f006 f88e 	bl	8008e86 <HAL_UART_Transmit>
}
 8002d6a:	bf00      	nop
 8002d6c:	bdb0      	pop	{r4, r5, r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	200002b8 	.word	0x200002b8
 8002d74:	200007e4 	.word	0x200007e4
 8002d78:	0800ce68 	.word	0x0800ce68
 8002d7c:	20000d20 	.word	0x20000d20
 8002d80:	200007a4 	.word	0x200007a4
 8002d84:	0800ce88 	.word	0x0800ce88

08002d88 <RemoteInit>:

void RemoteInit(){
 8002d88:	b5b0      	push	{r4, r5, r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
	  fly_mode = FLY_MODE_OFF;
 8002d8c:	4b32      	ldr	r3, [pc, #200]	; (8002e58 <RemoteInit+0xd0>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	701a      	strb	r2, [r3, #0]
	  strSize = sprintf((char*)buffer, "Wahana Mode Off\r\n");
 8002d92:	4a32      	ldr	r2, [pc, #200]	; (8002e5c <RemoteInit+0xd4>)
 8002d94:	4b32      	ldr	r3, [pc, #200]	; (8002e60 <RemoteInit+0xd8>)
 8002d96:	4615      	mov	r5, r2
 8002d98:	461c      	mov	r4, r3
 8002d9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d9c:	6028      	str	r0, [r5, #0]
 8002d9e:	6069      	str	r1, [r5, #4]
 8002da0:	60aa      	str	r2, [r5, #8]
 8002da2:	60eb      	str	r3, [r5, #12]
 8002da4:	8823      	ldrh	r3, [r4, #0]
 8002da6:	822b      	strh	r3, [r5, #16]
 8002da8:	2311      	movs	r3, #17
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	4b2d      	ldr	r3, [pc, #180]	; (8002e64 <RemoteInit+0xdc>)
 8002dae:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1, buffer, strSize, 10);
 8002db0:	4b2c      	ldr	r3, [pc, #176]	; (8002e64 <RemoteInit+0xdc>)
 8002db2:	881a      	ldrh	r2, [r3, #0]
 8002db4:	230a      	movs	r3, #10
 8002db6:	4929      	ldr	r1, [pc, #164]	; (8002e5c <RemoteInit+0xd4>)
 8002db8:	482b      	ldr	r0, [pc, #172]	; (8002e68 <RemoteInit+0xe0>)
 8002dba:	f006 f864 	bl	8008e86 <HAL_UART_Transmit>

	  initPWM_DATA(&RC_CH1, &htim3, TIM_CHANNEL_2);
 8002dbe:	2204      	movs	r2, #4
 8002dc0:	492a      	ldr	r1, [pc, #168]	; (8002e6c <RemoteInit+0xe4>)
 8002dc2:	482b      	ldr	r0, [pc, #172]	; (8002e70 <RemoteInit+0xe8>)
 8002dc4:	f7ff fd5c 	bl	8002880 <initPWM_DATA>
	  initPWM_DATA(&RC_CH2, &htim9, TIM_CHANNEL_2);
 8002dc8:	2204      	movs	r2, #4
 8002dca:	492a      	ldr	r1, [pc, #168]	; (8002e74 <RemoteInit+0xec>)
 8002dcc:	482a      	ldr	r0, [pc, #168]	; (8002e78 <RemoteInit+0xf0>)
 8002dce:	f7ff fd57 	bl	8002880 <initPWM_DATA>
	  initPWM_DATA(&RC_CH3, &htim5, TIM_CHANNEL_1);
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	4929      	ldr	r1, [pc, #164]	; (8002e7c <RemoteInit+0xf4>)
 8002dd6:	482a      	ldr	r0, [pc, #168]	; (8002e80 <RemoteInit+0xf8>)
 8002dd8:	f7ff fd52 	bl	8002880 <initPWM_DATA>
	  initPWM_DATA(&RC_CH4, &htim3, TIM_CHANNEL_1);
 8002ddc:	2200      	movs	r2, #0
 8002dde:	4923      	ldr	r1, [pc, #140]	; (8002e6c <RemoteInit+0xe4>)
 8002de0:	4828      	ldr	r0, [pc, #160]	; (8002e84 <RemoteInit+0xfc>)
 8002de2:	f7ff fd4d 	bl	8002880 <initPWM_DATA>
	  initPWM_DATA(&RC_CH5, &htim4, TIM_CHANNEL_1);
 8002de6:	2200      	movs	r2, #0
 8002de8:	4927      	ldr	r1, [pc, #156]	; (8002e88 <RemoteInit+0x100>)
 8002dea:	4828      	ldr	r0, [pc, #160]	; (8002e8c <RemoteInit+0x104>)
 8002dec:	f7ff fd48 	bl	8002880 <initPWM_DATA>
	  initPWM_DATA(&RC_CH6, &htim6, 0);
 8002df0:	2200      	movs	r2, #0
 8002df2:	4927      	ldr	r1, [pc, #156]	; (8002e90 <RemoteInit+0x108>)
 8002df4:	4827      	ldr	r0, [pc, #156]	; (8002e94 <RemoteInit+0x10c>)
 8002df6:	f7ff fd43 	bl	8002880 <initPWM_DATA>

	  HAL_TIM_IC_Start_IT(RC_CH1.htim, RC_CH1.channel);
 8002dfa:	4b1d      	ldr	r3, [pc, #116]	; (8002e70 <RemoteInit+0xe8>)
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	4b1c      	ldr	r3, [pc, #112]	; (8002e70 <RemoteInit+0xe8>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	4619      	mov	r1, r3
 8002e04:	4610      	mov	r0, r2
 8002e06:	f004 ff3b 	bl	8007c80 <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(RC_CH2.htim, RC_CH2.channel);
 8002e0a:	4b1b      	ldr	r3, [pc, #108]	; (8002e78 <RemoteInit+0xf0>)
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	4b1a      	ldr	r3, [pc, #104]	; (8002e78 <RemoteInit+0xf0>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	4619      	mov	r1, r3
 8002e14:	4610      	mov	r0, r2
 8002e16:	f004 ff33 	bl	8007c80 <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(RC_CH3.htim, RC_CH3.channel);
 8002e1a:	4b19      	ldr	r3, [pc, #100]	; (8002e80 <RemoteInit+0xf8>)
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	4b18      	ldr	r3, [pc, #96]	; (8002e80 <RemoteInit+0xf8>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	4619      	mov	r1, r3
 8002e24:	4610      	mov	r0, r2
 8002e26:	f004 ff2b 	bl	8007c80 <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(RC_CH4.htim, RC_CH4.channel);
 8002e2a:	4b16      	ldr	r3, [pc, #88]	; (8002e84 <RemoteInit+0xfc>)
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	4b15      	ldr	r3, [pc, #84]	; (8002e84 <RemoteInit+0xfc>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	4619      	mov	r1, r3
 8002e34:	4610      	mov	r0, r2
 8002e36:	f004 ff23 	bl	8007c80 <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(RC_CH5.htim, RC_CH5.channel);
 8002e3a:	4b14      	ldr	r3, [pc, #80]	; (8002e8c <RemoteInit+0x104>)
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	4b13      	ldr	r3, [pc, #76]	; (8002e8c <RemoteInit+0x104>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	4619      	mov	r1, r3
 8002e44:	4610      	mov	r0, r2
 8002e46:	f004 ff1b 	bl	8007c80 <HAL_TIM_IC_Start_IT>
	  HAL_TIM_Base_Start(RC_CH6.htim);
 8002e4a:	4b12      	ldr	r3, [pc, #72]	; (8002e94 <RemoteInit+0x10c>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f004 fdf9 	bl	8007a46 <HAL_TIM_Base_Start>
}
 8002e54:	bf00      	nop
 8002e56:	bdb0      	pop	{r4, r5, r7, pc}
 8002e58:	20000bbc 	.word	0x20000bbc
 8002e5c:	200007e4 	.word	0x200007e4
 8002e60:	0800cdc0 	.word	0x0800cdc0
 8002e64:	20000d20 	.word	0x20000d20
 8002e68:	200007a4 	.word	0x200007a4
 8002e6c:	20000734 	.word	0x20000734
 8002e70:	20000718 	.word	0x20000718
 8002e74:	20000b60 	.word	0x20000b60
 8002e78:	20000d24 	.word	0x20000d24
 8002e7c:	200006d8 	.word	0x200006d8
 8002e80:	20000c04 	.word	0x20000c04
 8002e84:	200003f0 	.word	0x200003f0
 8002e88:	2000030c 	.word	0x2000030c
 8002e8c:	20000d04 	.word	0x20000d04
 8002e90:	20000ad8 	.word	0x20000ad8
 8002e94:	20000b18 	.word	0x20000b18

08002e98 <IMUInit>:

void IMUInit(){
 8002e98:	b5b0      	push	{r4, r5, r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
	  HAL_UART_Transmit(&huart2, (u_char*)0xA5, 1, 10);
 8002e9e:	230a      	movs	r3, #10
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	21a5      	movs	r1, #165	; 0xa5
 8002ea4:	485b      	ldr	r0, [pc, #364]	; (8003014 <IMUInit+0x17c>)
 8002ea6:	f005 ffee 	bl	8008e86 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, (u_char*)0x54, 1, 10);
 8002eaa:	230a      	movs	r3, #10
 8002eac:	2201      	movs	r2, #1
 8002eae:	2154      	movs	r1, #84	; 0x54
 8002eb0:	4858      	ldr	r0, [pc, #352]	; (8003014 <IMUInit+0x17c>)
 8002eb2:	f005 ffe8 	bl	8008e86 <HAL_UART_Transmit>

	  HAL_Delay(3000);
 8002eb6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002eba:	f001 fec3 	bl	8004c44 <HAL_Delay>
	  strSize = sprintf((char*)buffer,"Kalibrasi tilt done\r\n");
 8002ebe:	4a56      	ldr	r2, [pc, #344]	; (8003018 <IMUInit+0x180>)
 8002ec0:	4b56      	ldr	r3, [pc, #344]	; (800301c <IMUInit+0x184>)
 8002ec2:	4615      	mov	r5, r2
 8002ec4:	461c      	mov	r4, r3
 8002ec6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ec8:	6028      	str	r0, [r5, #0]
 8002eca:	6069      	str	r1, [r5, #4]
 8002ecc:	60aa      	str	r2, [r5, #8]
 8002ece:	60eb      	str	r3, [r5, #12]
 8002ed0:	6820      	ldr	r0, [r4, #0]
 8002ed2:	6128      	str	r0, [r5, #16]
 8002ed4:	88a3      	ldrh	r3, [r4, #4]
 8002ed6:	82ab      	strh	r3, [r5, #20]
 8002ed8:	2315      	movs	r3, #21
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	4b50      	ldr	r3, [pc, #320]	; (8003020 <IMUInit+0x188>)
 8002ede:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1, buffer, strSize, 100);
 8002ee0:	4b4f      	ldr	r3, [pc, #316]	; (8003020 <IMUInit+0x188>)
 8002ee2:	881a      	ldrh	r2, [r3, #0]
 8002ee4:	2364      	movs	r3, #100	; 0x64
 8002ee6:	494c      	ldr	r1, [pc, #304]	; (8003018 <IMUInit+0x180>)
 8002ee8:	484e      	ldr	r0, [pc, #312]	; (8003024 <IMUInit+0x18c>)
 8002eea:	f005 ffcc 	bl	8008e86 <HAL_UART_Transmit>

	  //Kalibrasi heading
	  HAL_UART_Transmit(&huart2, (u_char*)0xA5, 1, 10);
 8002eee:	230a      	movs	r3, #10
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	21a5      	movs	r1, #165	; 0xa5
 8002ef4:	4847      	ldr	r0, [pc, #284]	; (8003014 <IMUInit+0x17c>)
 8002ef6:	f005 ffc6 	bl	8008e86 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, (u_char*)0x55, 1, 10);
 8002efa:	230a      	movs	r3, #10
 8002efc:	2201      	movs	r2, #1
 8002efe:	2155      	movs	r1, #85	; 0x55
 8002f00:	4844      	ldr	r0, [pc, #272]	; (8003014 <IMUInit+0x17c>)
 8002f02:	f005 ffc0 	bl	8008e86 <HAL_UART_Transmit>
	  HAL_Delay(3000);
 8002f06:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002f0a:	f001 fe9b 	bl	8004c44 <HAL_Delay>

	  strSize = sprintf((char*)buffer,"Kalibrasi heading done\r\n");
 8002f0e:	4a42      	ldr	r2, [pc, #264]	; (8003018 <IMUInit+0x180>)
 8002f10:	4b45      	ldr	r3, [pc, #276]	; (8003028 <IMUInit+0x190>)
 8002f12:	4615      	mov	r5, r2
 8002f14:	461c      	mov	r4, r3
 8002f16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f18:	6028      	str	r0, [r5, #0]
 8002f1a:	6069      	str	r1, [r5, #4]
 8002f1c:	60aa      	str	r2, [r5, #8]
 8002f1e:	60eb      	str	r3, [r5, #12]
 8002f20:	cc03      	ldmia	r4!, {r0, r1}
 8002f22:	6128      	str	r0, [r5, #16]
 8002f24:	6169      	str	r1, [r5, #20]
 8002f26:	7823      	ldrb	r3, [r4, #0]
 8002f28:	762b      	strb	r3, [r5, #24]
 8002f2a:	2318      	movs	r3, #24
 8002f2c:	b29a      	uxth	r2, r3
 8002f2e:	4b3c      	ldr	r3, [pc, #240]	; (8003020 <IMUInit+0x188>)
 8002f30:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1, buffer, strSize, 100);
 8002f32:	4b3b      	ldr	r3, [pc, #236]	; (8003020 <IMUInit+0x188>)
 8002f34:	881a      	ldrh	r2, [r3, #0]
 8002f36:	2364      	movs	r3, #100	; 0x64
 8002f38:	4937      	ldr	r1, [pc, #220]	; (8003018 <IMUInit+0x180>)
 8002f3a:	483a      	ldr	r0, [pc, #232]	; (8003024 <IMUInit+0x18c>)
 8002f3c:	f005 ffa3 	bl	8008e86 <HAL_UART_Transmit>

	  //Konfigurasi Output ASCII
	  HAL_UART_Transmit(&huart2, (u_char*)0xA5, 1, 10);
 8002f40:	230a      	movs	r3, #10
 8002f42:	2201      	movs	r2, #1
 8002f44:	21a5      	movs	r1, #165	; 0xa5
 8002f46:	4833      	ldr	r0, [pc, #204]	; (8003014 <IMUInit+0x17c>)
 8002f48:	f005 ff9d 	bl	8008e86 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, (u_char*)0x52, 1, 10);
 8002f4c:	230a      	movs	r3, #10
 8002f4e:	2201      	movs	r2, #1
 8002f50:	2152      	movs	r1, #82	; 0x52
 8002f52:	4830      	ldr	r0, [pc, #192]	; (8003014 <IMUInit+0x17c>)
 8002f54:	f005 ff97 	bl	8008e86 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8002f58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002f5c:	f001 fe72 	bl	8004c44 <HAL_Delay>

	  HAL_UART_Receive_DMA(&huart2, IMUBuffer, 16);
 8002f60:	2210      	movs	r2, #16
 8002f62:	4932      	ldr	r1, [pc, #200]	; (800302c <IMUInit+0x194>)
 8002f64:	482b      	ldr	r0, [pc, #172]	; (8003014 <IMUInit+0x17c>)
 8002f66:	f006 f827 	bl	8008fb8 <HAL_UART_Receive_DMA>

	  float pitchTotal = 0, yawTotal = 0, rollTotal = 0;
 8002f6a:	f04f 0300 	mov.w	r3, #0
 8002f6e:	60fb      	str	r3, [r7, #12]
 8002f70:	f04f 0300 	mov.w	r3, #0
 8002f74:	60bb      	str	r3, [r7, #8]
 8002f76:	f04f 0300 	mov.w	r3, #0
 8002f7a:	607b      	str	r3, [r7, #4]

	  int i = 0;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	603b      	str	r3, [r7, #0]
	  while(i < 100){
 8002f80:	e026      	b.n	8002fd0 <IMUInit+0x138>
		  if(IMUDataStatus){
 8002f82:	4b2b      	ldr	r3, [pc, #172]	; (8003030 <IMUInit+0x198>)
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d021      	beq.n	8002fce <IMUInit+0x136>
			  i += 1;
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	603b      	str	r3, [r7, #0]
			  getIMUData(&IMU_Data);
 8002f90:	4828      	ldr	r0, [pc, #160]	; (8003034 <IMUInit+0x19c>)
 8002f92:	f000 f859 	bl	8003048 <getIMUData>
			  pitchTotal += IMU_Data.PITCH;
 8002f96:	4b27      	ldr	r3, [pc, #156]	; (8003034 <IMUInit+0x19c>)
 8002f98:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f9c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002fa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fa4:	edc7 7a03 	vstr	s15, [r7, #12]
			  yawTotal += IMU_Data.YAW;
 8002fa8:	4b22      	ldr	r3, [pc, #136]	; (8003034 <IMUInit+0x19c>)
 8002faa:	edd3 7a00 	vldr	s15, [r3]
 8002fae:	ed97 7a02 	vldr	s14, [r7, #8]
 8002fb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fb6:	edc7 7a02 	vstr	s15, [r7, #8]
			  rollTotal += IMU_Data.ROLL;
 8002fba:	4b1e      	ldr	r3, [pc, #120]	; (8003034 <IMUInit+0x19c>)
 8002fbc:	edd3 7a02 	vldr	s15, [r3, #8]
 8002fc0:	ed97 7a01 	vldr	s14, [r7, #4]
 8002fc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fc8:	edc7 7a01 	vstr	s15, [r7, #4]
 8002fcc:	e000      	b.n	8002fd0 <IMUInit+0x138>
		  } else continue;
 8002fce:	bf00      	nop
	  while(i < 100){
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	2b63      	cmp	r3, #99	; 0x63
 8002fd4:	ddd5      	ble.n	8002f82 <IMUInit+0xea>
	  }
	  pitchRef = pitchTotal / 100;
 8002fd6:	ed97 7a03 	vldr	s14, [r7, #12]
 8002fda:	eddf 6a17 	vldr	s13, [pc, #92]	; 8003038 <IMUInit+0x1a0>
 8002fde:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002fe2:	4b16      	ldr	r3, [pc, #88]	; (800303c <IMUInit+0x1a4>)
 8002fe4:	edc3 7a00 	vstr	s15, [r3]
	  yawRef = yawTotal / 100;
 8002fe8:	ed97 7a02 	vldr	s14, [r7, #8]
 8002fec:	eddf 6a12 	vldr	s13, [pc, #72]	; 8003038 <IMUInit+0x1a0>
 8002ff0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ff4:	4b12      	ldr	r3, [pc, #72]	; (8003040 <IMUInit+0x1a8>)
 8002ff6:	edc3 7a00 	vstr	s15, [r3]
	  rollRef = rollTotal / 100;
 8002ffa:	ed97 7a01 	vldr	s14, [r7, #4]
 8002ffe:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8003038 <IMUInit+0x1a0>
 8003002:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003006:	4b0f      	ldr	r3, [pc, #60]	; (8003044 <IMUInit+0x1ac>)
 8003008:	edc3 7a00 	vstr	s15, [r3]
}
 800300c:	bf00      	nop
 800300e:	3710      	adds	r7, #16
 8003010:	46bd      	mov	sp, r7
 8003012:	bdb0      	pop	{r4, r5, r7, pc}
 8003014:	20000c64 	.word	0x20000c64
 8003018:	200007e4 	.word	0x200007e4
 800301c:	0800ce9c 	.word	0x0800ce9c
 8003020:	20000d20 	.word	0x20000d20
 8003024:	200007a4 	.word	0x200007a4
 8003028:	0800ceb4 	.word	0x0800ceb4
 800302c:	20000c20 	.word	0x20000c20
 8003030:	200004b8 	.word	0x200004b8
 8003034:	200006cc 	.word	0x200006cc
 8003038:	42c80000 	.word	0x42c80000
 800303c:	20000210 	.word	0x20000210
 8003040:	20000214 	.word	0x20000214
 8003044:	20000218 	.word	0x20000218

08003048 <getIMUData>:
		  while(pointer != NULL);
		  GPSDataStatus = false;
	  }
}

void getIMUData(IMU_DATA *IMU_Data){
 8003048:	b580      	push	{r7, lr}
 800304a:	b086      	sub	sp, #24
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
	if(IMUDataStatus){
 8003050:	4b59      	ldr	r3, [pc, #356]	; (80031b8 <getIMUData+0x170>)
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	2b00      	cmp	r3, #0
 8003056:	f000 80aa 	beq.w	80031ae <getIMUData+0x166>
		  uint8_t YPR[8];
		  IMU_Data->YAW = 1000.0f, IMU_Data->PITCH = 1000.0f, IMU_Data->ROLL = 1000.0f;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a57      	ldr	r2, [pc, #348]	; (80031bc <getIMUData+0x174>)
 800305e:	601a      	str	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a56      	ldr	r2, [pc, #344]	; (80031bc <getIMUData+0x174>)
 8003064:	605a      	str	r2, [r3, #4]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a54      	ldr	r2, [pc, #336]	; (80031bc <getIMUData+0x174>)
 800306a:	609a      	str	r2, [r3, #8]
		  char* buf;
		  buf = memchr(IMUBuffer, 0xAA, 16);
 800306c:	2210      	movs	r2, #16
 800306e:	21aa      	movs	r1, #170	; 0xaa
 8003070:	4853      	ldr	r0, [pc, #332]	; (80031c0 <getIMUData+0x178>)
 8003072:	f7fd f8ad 	bl	80001d0 <memchr>
 8003076:	6178      	str	r0, [r7, #20]
		  memcpy(YPR, buf, 8);
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	f107 030c 	add.w	r3, r7, #12
 800307e:	6810      	ldr	r0, [r2, #0]
 8003080:	6851      	ldr	r1, [r2, #4]
 8003082:	c303      	stmia	r3!, {r0, r1}
		  if(YPR[0] == 0xAA && YPR[7] == 0x55){
 8003084:	7b3b      	ldrb	r3, [r7, #12]
 8003086:	2baa      	cmp	r3, #170	; 0xaa
 8003088:	f040 808e 	bne.w	80031a8 <getIMUData+0x160>
 800308c:	7cfb      	ldrb	r3, [r7, #19]
 800308e:	2b55      	cmp	r3, #85	; 0x55
 8003090:	f040 808a 	bne.w	80031a8 <getIMUData+0x160>
			  IMU_Data->YAW = (float)((YPR[1] << 8 | YPR[2]) * 0.01f);
 8003094:	7b7b      	ldrb	r3, [r7, #13]
 8003096:	021b      	lsls	r3, r3, #8
 8003098:	7bba      	ldrb	r2, [r7, #14]
 800309a:	4313      	orrs	r3, r2
 800309c:	ee07 3a90 	vmov	s15, r3
 80030a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030a4:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80031c4 <getIMUData+0x17c>
 80030a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	edc3 7a00 	vstr	s15, [r3]
			  if(IMU_Data->YAW > 179) IMU_Data->YAW = IMU_Data->YAW - 655;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	edd3 7a00 	vldr	s15, [r3]
 80030b8:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80031c8 <getIMUData+0x180>
 80030bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030c4:	dd09      	ble.n	80030da <getIMUData+0x92>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	edd3 7a00 	vldr	s15, [r3]
 80030cc:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80031cc <getIMUData+0x184>
 80030d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	edc3 7a00 	vstr	s15, [r3]

			  sensorYaw = IMU_Data->YAW - yawRef;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	ed93 7a00 	vldr	s14, [r3]
 80030e0:	4b3b      	ldr	r3, [pc, #236]	; (80031d0 <getIMUData+0x188>)
 80030e2:	edd3 7a00 	vldr	s15, [r3]
 80030e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030ea:	4b3a      	ldr	r3, [pc, #232]	; (80031d4 <getIMUData+0x18c>)
 80030ec:	edc3 7a00 	vstr	s15, [r3]

			  IMU_Data->PITCH = (float)((YPR[3] << 8 | YPR[4]) * 0.01f);
 80030f0:	7bfb      	ldrb	r3, [r7, #15]
 80030f2:	021b      	lsls	r3, r3, #8
 80030f4:	7c3a      	ldrb	r2, [r7, #16]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	ee07 3a90 	vmov	s15, r3
 80030fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003100:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80031c4 <getIMUData+0x17c>
 8003104:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	edc3 7a01 	vstr	s15, [r3, #4]
			  if(IMU_Data->PITCH > 179) IMU_Data->PITCH = IMU_Data->PITCH - 655;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	edd3 7a01 	vldr	s15, [r3, #4]
 8003114:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80031c8 <getIMUData+0x180>
 8003118:	eef4 7ac7 	vcmpe.f32	s15, s14
 800311c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003120:	dd09      	ble.n	8003136 <getIMUData+0xee>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	edd3 7a01 	vldr	s15, [r3, #4]
 8003128:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80031cc <getIMUData+0x184>
 800312c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	edc3 7a01 	vstr	s15, [r3, #4]

			  sensorPitch = IMU_Data->PITCH - pitchRef;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	ed93 7a01 	vldr	s14, [r3, #4]
 800313c:	4b26      	ldr	r3, [pc, #152]	; (80031d8 <getIMUData+0x190>)
 800313e:	edd3 7a00 	vldr	s15, [r3]
 8003142:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003146:	4b25      	ldr	r3, [pc, #148]	; (80031dc <getIMUData+0x194>)
 8003148:	edc3 7a00 	vstr	s15, [r3]

			  IMU_Data->ROLL = (float)((YPR[5] << 8 | YPR[6]) * 0.01f);
 800314c:	7c7b      	ldrb	r3, [r7, #17]
 800314e:	021b      	lsls	r3, r3, #8
 8003150:	7cba      	ldrb	r2, [r7, #18]
 8003152:	4313      	orrs	r3, r2
 8003154:	ee07 3a90 	vmov	s15, r3
 8003158:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800315c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80031c4 <getIMUData+0x17c>
 8003160:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	edc3 7a02 	vstr	s15, [r3, #8]
			  if(IMU_Data->ROLL > 179) IMU_Data->ROLL = IMU_Data->ROLL - 655;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003170:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80031c8 <getIMUData+0x180>
 8003174:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800317c:	dd09      	ble.n	8003192 <getIMUData+0x14a>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	edd3 7a02 	vldr	s15, [r3, #8]
 8003184:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80031cc <getIMUData+0x184>
 8003188:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	edc3 7a02 	vstr	s15, [r3, #8]

			  sensorRoll = IMU_Data->ROLL - rollRef;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	ed93 7a02 	vldr	s14, [r3, #8]
 8003198:	4b11      	ldr	r3, [pc, #68]	; (80031e0 <getIMUData+0x198>)
 800319a:	edd3 7a00 	vldr	s15, [r3]
 800319e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031a2:	4b10      	ldr	r3, [pc, #64]	; (80031e4 <getIMUData+0x19c>)
 80031a4:	edc3 7a00 	vstr	s15, [r3]

			  //strSize = sprintf((char*)buffer, "Y: %f, P: %f, R: %f\r\n", sensorYaw, sensorPitch, sensorRoll);
			  //HAL_UART_Transmit(&huart1, buffer, strSize, 100);
		  }
		  IMUDataStatus = false;
 80031a8:	4b03      	ldr	r3, [pc, #12]	; (80031b8 <getIMUData+0x170>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	701a      	strb	r2, [r3, #0]
	}

}
 80031ae:	bf00      	nop
 80031b0:	3718      	adds	r7, #24
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	200004b8 	.word	0x200004b8
 80031bc:	447a0000 	.word	0x447a0000
 80031c0:	20000c20 	.word	0x20000c20
 80031c4:	3c23d70a 	.word	0x3c23d70a
 80031c8:	43330000 	.word	0x43330000
 80031cc:	4423c000 	.word	0x4423c000
 80031d0:	20000214 	.word	0x20000214
 80031d4:	20000aac 	.word	0x20000aac
 80031d8:	20000210 	.word	0x20000210
 80031dc:	20000bc0 	.word	0x20000bc0
 80031e0:	20000218 	.word	0x20000218
 80031e4:	200004a4 	.word	0x200004a4

080031e8 <setPWM_DATA>:

void setPWM_DATA(PWM_DATA* pwm_data){
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
	if(pwm_data->onRisingEdge && !pwm_data->onFallingEdge){
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	7e1b      	ldrb	r3, [r3, #24]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	f000 8087 	beq.w	8003308 <setPWM_DATA+0x120>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	7e5b      	ldrb	r3, [r3, #25]
 80031fe:	f083 0301 	eor.w	r3, r3, #1
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b00      	cmp	r3, #0
 8003206:	d07f      	beq.n	8003308 <setPWM_DATA+0x120>
		pwm_data->onRisingEdge = false;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	761a      	strb	r2, [r3, #24]
		pwm_data->onFallingEdge = true;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	765a      	strb	r2, [r3, #25]
		pwm_data->RisingEdgeVal = HAL_TIM_ReadCapturedValue(pwm_data->htim, pwm_data->channel);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	4619      	mov	r1, r3
 800321e:	4610      	mov	r0, r2
 8003220:	f005 f8b8 	bl	8008394 <HAL_TIM_ReadCapturedValue>
 8003224:	4602      	mov	r2, r0
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	609a      	str	r2, [r3, #8]
		__HAL_TIM_SET_CAPTUREPOLARITY(pwm_data->htim, pwm_data->channel, TIM_INPUTCHANNELPOLARITY_FALLING);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10a      	bne.n	8003248 <setPWM_DATA+0x60>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6a1a      	ldr	r2, [r3, #32]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 020a 	bic.w	r2, r2, #10
 8003244:	621a      	str	r2, [r3, #32]
 8003246:	e027      	b.n	8003298 <setPWM_DATA+0xb0>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	2b04      	cmp	r3, #4
 800324e:	d10a      	bne.n	8003266 <setPWM_DATA+0x7e>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	6a1a      	ldr	r2, [r3, #32]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003262:	621a      	str	r2, [r3, #32]
 8003264:	e018      	b.n	8003298 <setPWM_DATA+0xb0>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	2b08      	cmp	r3, #8
 800326c:	d10a      	bne.n	8003284 <setPWM_DATA+0x9c>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	6a1a      	ldr	r2, [r3, #32]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8003280:	621a      	str	r2, [r3, #32]
 8003282:	e009      	b.n	8003298 <setPWM_DATA+0xb0>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	6a1a      	ldr	r2, [r3, #32]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 8003296:	621a      	str	r2, [r3, #32]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d10a      	bne.n	80032b6 <setPWM_DATA+0xce>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6a1a      	ldr	r2, [r3, #32]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f042 0202 	orr.w	r2, r2, #2
 80032b2:	621a      	str	r2, [r3, #32]
 80032b4:	e0aa      	b.n	800340c <setPWM_DATA+0x224>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2b04      	cmp	r3, #4
 80032bc:	d10a      	bne.n	80032d4 <setPWM_DATA+0xec>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6a1a      	ldr	r2, [r3, #32]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f042 0220 	orr.w	r2, r2, #32
 80032d0:	621a      	str	r2, [r3, #32]
 80032d2:	e09b      	b.n	800340c <setPWM_DATA+0x224>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	2b08      	cmp	r3, #8
 80032da:	d10a      	bne.n	80032f2 <setPWM_DATA+0x10a>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	6a1a      	ldr	r2, [r3, #32]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032ee:	621a      	str	r2, [r3, #32]
 80032f0:	e08c      	b.n	800340c <setPWM_DATA+0x224>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6a1a      	ldr	r2, [r3, #32]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003304:	621a      	str	r2, [r3, #32]
 8003306:	e081      	b.n	800340c <setPWM_DATA+0x224>

	} else if(pwm_data->onFallingEdge && !pwm_data->onRisingEdge) {
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	7e5b      	ldrb	r3, [r3, #25]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d07d      	beq.n	800340c <setPWM_DATA+0x224>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	7e1b      	ldrb	r3, [r3, #24]
 8003314:	f083 0301 	eor.w	r3, r3, #1
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d076      	beq.n	800340c <setPWM_DATA+0x224>
		pwm_data->onFallingEdge = false;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	765a      	strb	r2, [r3, #25]
		pwm_data->onRisingEdge =  true;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	761a      	strb	r2, [r3, #24]
		pwm_data->FallingEdgeVal = HAL_TIM_ReadCapturedValue(pwm_data->htim, pwm_data->channel);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	4619      	mov	r1, r3
 8003334:	4610      	mov	r0, r2
 8003336:	f005 f82d 	bl	8008394 <HAL_TIM_ReadCapturedValue>
 800333a:	4602      	mov	r2, r0
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_CAPTUREPOLARITY(pwm_data->htim, pwm_data->channel, TIM_INPUTCHANNELPOLARITY_RISING);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d10a      	bne.n	800335e <setPWM_DATA+0x176>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6a1a      	ldr	r2, [r3, #32]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 020a 	bic.w	r2, r2, #10
 800335a:	621a      	str	r2, [r3, #32]
 800335c:	e027      	b.n	80033ae <setPWM_DATA+0x1c6>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	2b04      	cmp	r3, #4
 8003364:	d10a      	bne.n	800337c <setPWM_DATA+0x194>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6a1a      	ldr	r2, [r3, #32]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003378:	621a      	str	r2, [r3, #32]
 800337a:	e018      	b.n	80033ae <setPWM_DATA+0x1c6>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	2b08      	cmp	r3, #8
 8003382:	d10a      	bne.n	800339a <setPWM_DATA+0x1b2>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	6a1a      	ldr	r2, [r3, #32]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8003396:	621a      	str	r2, [r3, #32]
 8003398:	e009      	b.n	80033ae <setPWM_DATA+0x1c6>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6a1a      	ldr	r2, [r3, #32]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 80033ac:	621a      	str	r2, [r3, #32]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d108      	bne.n	80033c8 <setPWM_DATA+0x1e0>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	6a12      	ldr	r2, [r2, #32]
 80033c4:	621a      	str	r2, [r3, #32]
 80033c6:	e021      	b.n	800340c <setPWM_DATA+0x224>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	2b04      	cmp	r3, #4
 80033ce:	d108      	bne.n	80033e2 <setPWM_DATA+0x1fa>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6a12      	ldr	r2, [r2, #32]
 80033de:	621a      	str	r2, [r3, #32]
 80033e0:	e014      	b.n	800340c <setPWM_DATA+0x224>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	2b08      	cmp	r3, #8
 80033e8:	d108      	bne.n	80033fc <setPWM_DATA+0x214>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	6a12      	ldr	r2, [r2, #32]
 80033f8:	621a      	str	r2, [r3, #32]
 80033fa:	e007      	b.n	800340c <setPWM_DATA+0x224>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6a12      	ldr	r2, [r2, #32]
 800340a:	621a      	str	r2, [r3, #32]
	}
	if(pwm_data->FallingEdgeVal >= pwm_data->RisingEdgeVal){
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	68da      	ldr	r2, [r3, #12]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	429a      	cmp	r2, r3
 8003416:	d30c      	bcc.n	8003432 <setPWM_DATA+0x24a>
		pwm_data->DutyCycleVal = pwm_data->FallingEdgeVal - pwm_data->RisingEdgeVal;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	68da      	ldr	r2, [r3, #12]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	1ad2      	subs	r2, r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	611a      	str	r2, [r3, #16]
		pwm_data->FallingEdgeVal = 0;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	60da      	str	r2, [r3, #12]
		pwm_data->RisingEdgeVal = 0;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	609a      	str	r2, [r3, #8]
	}
}
 8003432:	bf00      	nop
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
	...

0800343c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
  //HAL_UART_Transmit(&huart3, RxBuffer, 8, 100);
  if(huart->Instance == USART2 && !IMUDataStatus)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a10      	ldr	r2, [pc, #64]	; (800348c <HAL_UART_RxCpltCallback+0x50>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d109      	bne.n	8003462 <HAL_UART_RxCpltCallback+0x26>
 800344e:	4b10      	ldr	r3, [pc, #64]	; (8003490 <HAL_UART_RxCpltCallback+0x54>)
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	f083 0301 	eor.w	r3, r3, #1
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b00      	cmp	r3, #0
 800345a:	d002      	beq.n	8003462 <HAL_UART_RxCpltCallback+0x26>
	  IMUDataStatus = true;
 800345c:	4b0c      	ldr	r3, [pc, #48]	; (8003490 <HAL_UART_RxCpltCallback+0x54>)
 800345e:	2201      	movs	r2, #1
 8003460:	701a      	strb	r2, [r3, #0]

  if(huart->Instance == USART3){
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a0b      	ldr	r2, [pc, #44]	; (8003494 <HAL_UART_RxCpltCallback+0x58>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d10b      	bne.n	8003484 <HAL_UART_RxCpltCallback+0x48>
	  memcpy(GPSBuffer, gps_rx_buf, GPS_BUF_SIZE);
 800346c:	4a0a      	ldr	r2, [pc, #40]	; (8003498 <HAL_UART_RxCpltCallback+0x5c>)
 800346e:	4b0b      	ldr	r3, [pc, #44]	; (800349c <HAL_UART_RxCpltCallback+0x60>)
 8003470:	4610      	mov	r0, r2
 8003472:	4619      	mov	r1, r3
 8003474:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003478:	461a      	mov	r2, r3
 800347a:	f006 fae1 	bl	8009a40 <memcpy>
	  GPSDataStatus = true;
 800347e:	4b08      	ldr	r3, [pc, #32]	; (80034a0 <HAL_UART_RxCpltCallback+0x64>)
 8003480:	2201      	movs	r2, #1
 8003482:	701a      	strb	r2, [r3, #0]
  }
 }
 8003484:	bf00      	nop
 8003486:	3708      	adds	r7, #8
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	40004400 	.word	0x40004400
 8003490:	200004b8 	.word	0x200004b8
 8003494:	40004800 	.word	0x40004800
 8003498:	200004bc 	.word	0x200004bc
 800349c:	200008b8 	.word	0x200008b8
 80034a0:	20000ba0 	.word	0x20000ba0

080034a4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80034a4:	b590      	push	{r4, r7, lr}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7 && (fly_mode == FLY_MODE_ON || fly_mode == FLY_MODE_HOLD)){
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a30      	ldr	r2, [pc, #192]	; (8003574 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d13c      	bne.n	8003530 <HAL_TIM_PeriodElapsedCallback+0x8c>
 80034b6:	4b30      	ldr	r3, [pc, #192]	; (8003578 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d003      	beq.n	80034c6 <HAL_TIM_PeriodElapsedCallback+0x22>
 80034be:	4b2e      	ldr	r3, [pc, #184]	; (8003578 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d134      	bne.n	8003530 <HAL_TIM_PeriodElapsedCallback+0x8c>
		PIDRoll.timesampling = PIDYaw.timesampling = PIDPitch.timesampling = 0.01;
 80034c6:	4b2d      	ldr	r3, [pc, #180]	; (800357c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80034c8:	4a2d      	ldr	r2, [pc, #180]	; (8003580 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80034ca:	625a      	str	r2, [r3, #36]	; 0x24
 80034cc:	4b2b      	ldr	r3, [pc, #172]	; (800357c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80034ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d0:	4a2c      	ldr	r2, [pc, #176]	; (8003584 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80034d2:	6253      	str	r3, [r2, #36]	; 0x24
 80034d4:	4b2b      	ldr	r3, [pc, #172]	; (8003584 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80034d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d8:	4a2b      	ldr	r2, [pc, #172]	; (8003588 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80034da:	6253      	str	r3, [r2, #36]	; 0x24
		PIDControl(&PIDRoll, sensorRoll, inputRoll);
 80034dc:	4b2b      	ldr	r3, [pc, #172]	; (800358c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80034de:	edd3 7a00 	vldr	s15, [r3]
 80034e2:	4b2b      	ldr	r3, [pc, #172]	; (8003590 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80034e4:	ed93 7a00 	vldr	s14, [r3]
 80034e8:	eef0 0a47 	vmov.f32	s1, s14
 80034ec:	eeb0 0a67 	vmov.f32	s0, s15
 80034f0:	4825      	ldr	r0, [pc, #148]	; (8003588 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80034f2:	f000 f9dd 	bl	80038b0 <PIDControl>
		PIDControl(&PIDPitch, sensorPitch, inputPitch);
 80034f6:	4b27      	ldr	r3, [pc, #156]	; (8003594 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80034f8:	edd3 7a00 	vldr	s15, [r3]
 80034fc:	4b26      	ldr	r3, [pc, #152]	; (8003598 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80034fe:	ed93 7a00 	vldr	s14, [r3]
 8003502:	eef0 0a47 	vmov.f32	s1, s14
 8003506:	eeb0 0a67 	vmov.f32	s0, s15
 800350a:	481c      	ldr	r0, [pc, #112]	; (800357c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800350c:	f000 f9d0 	bl	80038b0 <PIDControl>
		PIDControl(&PIDYaw, sensorYaw, inputYaw);
 8003510:	4b22      	ldr	r3, [pc, #136]	; (800359c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8003512:	edd3 7a00 	vldr	s15, [r3]
 8003516:	4b22      	ldr	r3, [pc, #136]	; (80035a0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8003518:	ed93 7a00 	vldr	s14, [r3]
 800351c:	eef0 0a47 	vmov.f32	s1, s14
 8003520:	eeb0 0a67 	vmov.f32	s0, s15
 8003524:	4817      	ldr	r0, [pc, #92]	; (8003584 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8003526:	f000 f9c3 	bl	80038b0 <PIDControl>
		trustControl();
 800352a:	f000 fae5 	bl	8003af8 <trustControl>
		  //HAL_UART_Transmit(&huart1, buffer, strSize, 100);

		strSize = sprintf((char*)buffer, "%f\r\n", sensorRoll);
		HAL_UART_Transmit(&huart1, buffer, strSize, 10);
	}
}
 800352e:	e01c      	b.n	800356a <HAL_TIM_PeriodElapsedCallback+0xc6>
	}else if(htim->Instance == TIM10){
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a1b      	ldr	r2, [pc, #108]	; (80035a4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d117      	bne.n	800356a <HAL_TIM_PeriodElapsedCallback+0xc6>
		strSize = sprintf((char*)buffer, "%f\r\n", sensorRoll);
 800353a:	4b14      	ldr	r3, [pc, #80]	; (800358c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4618      	mov	r0, r3
 8003540:	f7fd f802 	bl	8000548 <__aeabi_f2d>
 8003544:	4603      	mov	r3, r0
 8003546:	460c      	mov	r4, r1
 8003548:	461a      	mov	r2, r3
 800354a:	4623      	mov	r3, r4
 800354c:	4916      	ldr	r1, [pc, #88]	; (80035a8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800354e:	4817      	ldr	r0, [pc, #92]	; (80035ac <HAL_TIM_PeriodElapsedCallback+0x108>)
 8003550:	f006 fee6 	bl	800a320 <siprintf>
 8003554:	4603      	mov	r3, r0
 8003556:	b29a      	uxth	r2, r3
 8003558:	4b15      	ldr	r3, [pc, #84]	; (80035b0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800355a:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, buffer, strSize, 10);
 800355c:	4b14      	ldr	r3, [pc, #80]	; (80035b0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800355e:	881a      	ldrh	r2, [r3, #0]
 8003560:	230a      	movs	r3, #10
 8003562:	4912      	ldr	r1, [pc, #72]	; (80035ac <HAL_TIM_PeriodElapsedCallback+0x108>)
 8003564:	4813      	ldr	r0, [pc, #76]	; (80035b4 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8003566:	f005 fc8e 	bl	8008e86 <HAL_UART_Transmit>
}
 800356a:	bf00      	nop
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	bd90      	pop	{r4, r7, pc}
 8003572:	bf00      	nop
 8003574:	40001400 	.word	0x40001400
 8003578:	20000bbc 	.word	0x20000bbc
 800357c:	20000228 	.word	0x20000228
 8003580:	3c23d70a 	.word	0x3c23d70a
 8003584:	20000778 	.word	0x20000778
 8003588:	20000b38 	.word	0x20000b38
 800358c:	200004a4 	.word	0x200004a4
 8003590:	200008b0 	.word	0x200008b0
 8003594:	20000bc0 	.word	0x20000bc0
 8003598:	200007a0 	.word	0x200007a0
 800359c:	20000aac 	.word	0x20000aac
 80035a0:	20000ba4 	.word	0x20000ba4
 80035a4:	40014400 	.word	0x40014400
 80035a8:	0800cee8 	.word	0x0800cee8
 80035ac:	200007e4 	.word	0x200007e4
 80035b0:	20000d20 	.word	0x20000d20
 80035b4:	200007a4 	.word	0x200007a4

080035b8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
	if(htim == RC_CH1.htim){
 80035c0:	4b81      	ldr	r3, [pc, #516]	; (80037c8 <HAL_TIM_IC_CaptureCallback+0x210>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d17a      	bne.n	80036c0 <HAL_TIM_IC_CaptureCallback+0x108>
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2){
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	7f1b      	ldrb	r3, [r3, #28]
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d138      	bne.n	8003644 <HAL_TIM_IC_CaptureCallback+0x8c>
			setPWM_DATA(&RC_CH1);
 80035d2:	487d      	ldr	r0, [pc, #500]	; (80037c8 <HAL_TIM_IC_CaptureCallback+0x210>)
 80035d4:	f7ff fe08 	bl	80031e8 <setPWM_DATA>
			inputRoll = map((float)RC_CH1.DutyCycleVal, 1000, 2000, -30, 30);
 80035d8:	4b7b      	ldr	r3, [pc, #492]	; (80037c8 <HAL_TIM_IC_CaptureCallback+0x210>)
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	ee07 3a90 	vmov	s15, r3
 80035e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035e4:	ed9f 7a79 	vldr	s14, [pc, #484]	; 80037cc <HAL_TIM_IC_CaptureCallback+0x214>
 80035e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80035ec:	ed9f 7a78 	vldr	s14, [pc, #480]	; 80037d0 <HAL_TIM_IC_CaptureCallback+0x218>
 80035f0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80035f4:	eddf 6a75 	vldr	s13, [pc, #468]	; 80037cc <HAL_TIM_IC_CaptureCallback+0x214>
 80035f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035fc:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003600:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003604:	4b73      	ldr	r3, [pc, #460]	; (80037d4 <HAL_TIM_IC_CaptureCallback+0x21c>)
 8003606:	edc3 7a00 	vstr	s15, [r3]
			inputRoll = constrain(inputRoll, -30, 30);
 800360a:	4b72      	ldr	r3, [pc, #456]	; (80037d4 <HAL_TIM_IC_CaptureCallback+0x21c>)
 800360c:	edd3 7a00 	vldr	s15, [r3]
 8003610:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 8003614:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800361c:	d501      	bpl.n	8003622 <HAL_TIM_IC_CaptureCallback+0x6a>
 800361e:	4b6e      	ldr	r3, [pc, #440]	; (80037d8 <HAL_TIM_IC_CaptureCallback+0x220>)
 8003620:	e00d      	b.n	800363e <HAL_TIM_IC_CaptureCallback+0x86>
 8003622:	4b6c      	ldr	r3, [pc, #432]	; (80037d4 <HAL_TIM_IC_CaptureCallback+0x21c>)
 8003624:	edd3 7a00 	vldr	s15, [r3]
 8003628:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800362c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003634:	dd01      	ble.n	800363a <HAL_TIM_IC_CaptureCallback+0x82>
 8003636:	4b69      	ldr	r3, [pc, #420]	; (80037dc <HAL_TIM_IC_CaptureCallback+0x224>)
 8003638:	e001      	b.n	800363e <HAL_TIM_IC_CaptureCallback+0x86>
 800363a:	4b66      	ldr	r3, [pc, #408]	; (80037d4 <HAL_TIM_IC_CaptureCallback+0x21c>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a65      	ldr	r2, [pc, #404]	; (80037d4 <HAL_TIM_IC_CaptureCallback+0x21c>)
 8003640:	6013      	str	r3, [r2, #0]
	}
	else if(htim == RC_CH5.htim) {
		setPWM_DATA(&RC_CH5);
		inputFlyMode = constrain(RC_CH5.DutyCycleVal, 1000, 2000);
	}
}
 8003642:	e0bd      	b.n	80037c0 <HAL_TIM_IC_CaptureCallback+0x208>
		} else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	7f1b      	ldrb	r3, [r3, #28]
 8003648:	2b01      	cmp	r3, #1
 800364a:	f040 80b9 	bne.w	80037c0 <HAL_TIM_IC_CaptureCallback+0x208>
			setPWM_DATA(&RC_CH4);
 800364e:	4864      	ldr	r0, [pc, #400]	; (80037e0 <HAL_TIM_IC_CaptureCallback+0x228>)
 8003650:	f7ff fdca 	bl	80031e8 <setPWM_DATA>
			inputYaw = map((float)RC_CH4.DutyCycleVal, 1000, 2000, -30, 30);
 8003654:	4b62      	ldr	r3, [pc, #392]	; (80037e0 <HAL_TIM_IC_CaptureCallback+0x228>)
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	ee07 3a90 	vmov	s15, r3
 800365c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003660:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 80037cc <HAL_TIM_IC_CaptureCallback+0x214>
 8003664:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003668:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80037d0 <HAL_TIM_IC_CaptureCallback+0x218>
 800366c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003670:	eddf 6a56 	vldr	s13, [pc, #344]	; 80037cc <HAL_TIM_IC_CaptureCallback+0x214>
 8003674:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003678:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800367c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003680:	4b58      	ldr	r3, [pc, #352]	; (80037e4 <HAL_TIM_IC_CaptureCallback+0x22c>)
 8003682:	edc3 7a00 	vstr	s15, [r3]
			inputYaw = constrain(inputYaw, -30, 30);
 8003686:	4b57      	ldr	r3, [pc, #348]	; (80037e4 <HAL_TIM_IC_CaptureCallback+0x22c>)
 8003688:	edd3 7a00 	vldr	s15, [r3]
 800368c:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 8003690:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003698:	d501      	bpl.n	800369e <HAL_TIM_IC_CaptureCallback+0xe6>
 800369a:	4b4f      	ldr	r3, [pc, #316]	; (80037d8 <HAL_TIM_IC_CaptureCallback+0x220>)
 800369c:	e00d      	b.n	80036ba <HAL_TIM_IC_CaptureCallback+0x102>
 800369e:	4b51      	ldr	r3, [pc, #324]	; (80037e4 <HAL_TIM_IC_CaptureCallback+0x22c>)
 80036a0:	edd3 7a00 	vldr	s15, [r3]
 80036a4:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80036a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036b0:	dd01      	ble.n	80036b6 <HAL_TIM_IC_CaptureCallback+0xfe>
 80036b2:	4b4a      	ldr	r3, [pc, #296]	; (80037dc <HAL_TIM_IC_CaptureCallback+0x224>)
 80036b4:	e001      	b.n	80036ba <HAL_TIM_IC_CaptureCallback+0x102>
 80036b6:	4b4b      	ldr	r3, [pc, #300]	; (80037e4 <HAL_TIM_IC_CaptureCallback+0x22c>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a4a      	ldr	r2, [pc, #296]	; (80037e4 <HAL_TIM_IC_CaptureCallback+0x22c>)
 80036bc:	6013      	str	r3, [r2, #0]
}
 80036be:	e07f      	b.n	80037c0 <HAL_TIM_IC_CaptureCallback+0x208>
	else if(htim == RC_CH2.htim){
 80036c0:	4b49      	ldr	r3, [pc, #292]	; (80037e8 <HAL_TIM_IC_CaptureCallback+0x230>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d138      	bne.n	800373c <HAL_TIM_IC_CaptureCallback+0x184>
		setPWM_DATA(&RC_CH2);
 80036ca:	4847      	ldr	r0, [pc, #284]	; (80037e8 <HAL_TIM_IC_CaptureCallback+0x230>)
 80036cc:	f7ff fd8c 	bl	80031e8 <setPWM_DATA>
		inputPitch = map((float)RC_CH2.DutyCycleVal, 1000, 2000, -30, 30);
 80036d0:	4b45      	ldr	r3, [pc, #276]	; (80037e8 <HAL_TIM_IC_CaptureCallback+0x230>)
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	ee07 3a90 	vmov	s15, r3
 80036d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036dc:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80037cc <HAL_TIM_IC_CaptureCallback+0x214>
 80036e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80036e4:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80037d0 <HAL_TIM_IC_CaptureCallback+0x218>
 80036e8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80036ec:	eddf 6a37 	vldr	s13, [pc, #220]	; 80037cc <HAL_TIM_IC_CaptureCallback+0x214>
 80036f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80036f4:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80036f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80036fc:	4b3b      	ldr	r3, [pc, #236]	; (80037ec <HAL_TIM_IC_CaptureCallback+0x234>)
 80036fe:	edc3 7a00 	vstr	s15, [r3]
		inputPitch = constrain(inputPitch, -30, 30);
 8003702:	4b3a      	ldr	r3, [pc, #232]	; (80037ec <HAL_TIM_IC_CaptureCallback+0x234>)
 8003704:	edd3 7a00 	vldr	s15, [r3]
 8003708:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 800370c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003714:	d501      	bpl.n	800371a <HAL_TIM_IC_CaptureCallback+0x162>
 8003716:	4b30      	ldr	r3, [pc, #192]	; (80037d8 <HAL_TIM_IC_CaptureCallback+0x220>)
 8003718:	e00d      	b.n	8003736 <HAL_TIM_IC_CaptureCallback+0x17e>
 800371a:	4b34      	ldr	r3, [pc, #208]	; (80037ec <HAL_TIM_IC_CaptureCallback+0x234>)
 800371c:	edd3 7a00 	vldr	s15, [r3]
 8003720:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003724:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800372c:	dd01      	ble.n	8003732 <HAL_TIM_IC_CaptureCallback+0x17a>
 800372e:	4b2b      	ldr	r3, [pc, #172]	; (80037dc <HAL_TIM_IC_CaptureCallback+0x224>)
 8003730:	e001      	b.n	8003736 <HAL_TIM_IC_CaptureCallback+0x17e>
 8003732:	4b2e      	ldr	r3, [pc, #184]	; (80037ec <HAL_TIM_IC_CaptureCallback+0x234>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a2d      	ldr	r2, [pc, #180]	; (80037ec <HAL_TIM_IC_CaptureCallback+0x234>)
 8003738:	6013      	str	r3, [r2, #0]
}
 800373a:	e041      	b.n	80037c0 <HAL_TIM_IC_CaptureCallback+0x208>
	else if(htim == RC_CH3.htim) {
 800373c:	4b2c      	ldr	r3, [pc, #176]	; (80037f0 <HAL_TIM_IC_CaptureCallback+0x238>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	429a      	cmp	r2, r3
 8003744:	d123      	bne.n	800378e <HAL_TIM_IC_CaptureCallback+0x1d6>
		setPWM_DATA(&RC_CH3);
 8003746:	482a      	ldr	r0, [pc, #168]	; (80037f0 <HAL_TIM_IC_CaptureCallback+0x238>)
 8003748:	f7ff fd4e 	bl	80031e8 <setPWM_DATA>
		if(RC_CH3.DutyCycleVal >= 1150){
 800374c:	4b28      	ldr	r3, [pc, #160]	; (80037f0 <HAL_TIM_IC_CaptureCallback+0x238>)
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	f240 427d 	movw	r2, #1149	; 0x47d
 8003754:	4293      	cmp	r3, r2
 8003756:	d911      	bls.n	800377c <HAL_TIM_IC_CaptureCallback+0x1c4>
			inputThrottle = constrain(RC_CH3.DutyCycleVal, 1000, 2000);
 8003758:	4b25      	ldr	r3, [pc, #148]	; (80037f0 <HAL_TIM_IC_CaptureCallback+0x238>)
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003760:	d307      	bcc.n	8003772 <HAL_TIM_IC_CaptureCallback+0x1ba>
 8003762:	4b23      	ldr	r3, [pc, #140]	; (80037f0 <HAL_TIM_IC_CaptureCallback+0x238>)
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800376a:	bf28      	it	cs
 800376c:	f44f 63fa 	movcs.w	r3, #2000	; 0x7d0
 8003770:	e001      	b.n	8003776 <HAL_TIM_IC_CaptureCallback+0x1be>
 8003772:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003776:	4a1f      	ldr	r2, [pc, #124]	; (80037f4 <HAL_TIM_IC_CaptureCallback+0x23c>)
 8003778:	6013      	str	r3, [r2, #0]
}
 800377a:	e021      	b.n	80037c0 <HAL_TIM_IC_CaptureCallback+0x208>
			RC_CH3.DutyCycleVal = 1000;
 800377c:	4b1c      	ldr	r3, [pc, #112]	; (80037f0 <HAL_TIM_IC_CaptureCallback+0x238>)
 800377e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003782:	611a      	str	r2, [r3, #16]
			inputThrottle = 1000;
 8003784:	4b1b      	ldr	r3, [pc, #108]	; (80037f4 <HAL_TIM_IC_CaptureCallback+0x23c>)
 8003786:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800378a:	601a      	str	r2, [r3, #0]
}
 800378c:	e018      	b.n	80037c0 <HAL_TIM_IC_CaptureCallback+0x208>
	else if(htim == RC_CH5.htim) {
 800378e:	4b1a      	ldr	r3, [pc, #104]	; (80037f8 <HAL_TIM_IC_CaptureCallback+0x240>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	429a      	cmp	r2, r3
 8003796:	d113      	bne.n	80037c0 <HAL_TIM_IC_CaptureCallback+0x208>
		setPWM_DATA(&RC_CH5);
 8003798:	4817      	ldr	r0, [pc, #92]	; (80037f8 <HAL_TIM_IC_CaptureCallback+0x240>)
 800379a:	f7ff fd25 	bl	80031e8 <setPWM_DATA>
		inputFlyMode = constrain(RC_CH5.DutyCycleVal, 1000, 2000);
 800379e:	4b16      	ldr	r3, [pc, #88]	; (80037f8 <HAL_TIM_IC_CaptureCallback+0x240>)
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037a6:	d307      	bcc.n	80037b8 <HAL_TIM_IC_CaptureCallback+0x200>
 80037a8:	4b13      	ldr	r3, [pc, #76]	; (80037f8 <HAL_TIM_IC_CaptureCallback+0x240>)
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80037b0:	bf28      	it	cs
 80037b2:	f44f 63fa 	movcs.w	r3, #2000	; 0x7d0
 80037b6:	e001      	b.n	80037bc <HAL_TIM_IC_CaptureCallback+0x204>
 80037b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037bc:	4a0f      	ldr	r2, [pc, #60]	; (80037fc <HAL_TIM_IC_CaptureCallback+0x244>)
 80037be:	6013      	str	r3, [r2, #0]
}
 80037c0:	bf00      	nop
 80037c2:	3708      	adds	r7, #8
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	20000718 	.word	0x20000718
 80037cc:	447a0000 	.word	0x447a0000
 80037d0:	42700000 	.word	0x42700000
 80037d4:	200008b0 	.word	0x200008b0
 80037d8:	c1f00000 	.word	0xc1f00000
 80037dc:	41f00000 	.word	0x41f00000
 80037e0:	200003f0 	.word	0x200003f0
 80037e4:	20000ba4 	.word	0x20000ba4
 80037e8:	20000d24 	.word	0x20000d24
 80037ec:	200007a0 	.word	0x200007a0
 80037f0:	20000c04 	.word	0x20000c04
 80037f4:	200003ac 	.word	0x200003ac
 80037f8:	20000d04 	.word	0x20000d04
 80037fc:	20000254 	.word	0x20000254

08003800 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	4603      	mov	r3, r0
 8003808:	80fb      	strh	r3, [r7, #6]
	if(RC_CH6.onRisingEdge && !RC_CH6.onFallingEdge){
 800380a:	4b24      	ldr	r3, [pc, #144]	; (800389c <HAL_GPIO_EXTI_Callback+0x9c>)
 800380c:	7e1b      	ldrb	r3, [r3, #24]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d013      	beq.n	800383a <HAL_GPIO_EXTI_Callback+0x3a>
 8003812:	4b22      	ldr	r3, [pc, #136]	; (800389c <HAL_GPIO_EXTI_Callback+0x9c>)
 8003814:	7e5b      	ldrb	r3, [r3, #25]
 8003816:	f083 0301 	eor.w	r3, r3, #1
 800381a:	b2db      	uxtb	r3, r3
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00c      	beq.n	800383a <HAL_GPIO_EXTI_Callback+0x3a>
		RC_CH6.onRisingEdge = false;
 8003820:	4b1e      	ldr	r3, [pc, #120]	; (800389c <HAL_GPIO_EXTI_Callback+0x9c>)
 8003822:	2200      	movs	r2, #0
 8003824:	761a      	strb	r2, [r3, #24]
		RC_CH6.onFallingEdge = true;
 8003826:	4b1d      	ldr	r3, [pc, #116]	; (800389c <HAL_GPIO_EXTI_Callback+0x9c>)
 8003828:	2201      	movs	r2, #1
 800382a:	765a      	strb	r2, [r3, #25]
		RC_CH6.RisingEdgeVal = __HAL_TIM_GET_COUNTER(RC_CH6.htim);
 800382c:	4b1b      	ldr	r3, [pc, #108]	; (800389c <HAL_GPIO_EXTI_Callback+0x9c>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003834:	4a19      	ldr	r2, [pc, #100]	; (800389c <HAL_GPIO_EXTI_Callback+0x9c>)
 8003836:	6093      	str	r3, [r2, #8]
 8003838:	e016      	b.n	8003868 <HAL_GPIO_EXTI_Callback+0x68>

	} else if(RC_CH6.onFallingEdge && !RC_CH6.onRisingEdge) {
 800383a:	4b18      	ldr	r3, [pc, #96]	; (800389c <HAL_GPIO_EXTI_Callback+0x9c>)
 800383c:	7e5b      	ldrb	r3, [r3, #25]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d012      	beq.n	8003868 <HAL_GPIO_EXTI_Callback+0x68>
 8003842:	4b16      	ldr	r3, [pc, #88]	; (800389c <HAL_GPIO_EXTI_Callback+0x9c>)
 8003844:	7e1b      	ldrb	r3, [r3, #24]
 8003846:	f083 0301 	eor.w	r3, r3, #1
 800384a:	b2db      	uxtb	r3, r3
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00b      	beq.n	8003868 <HAL_GPIO_EXTI_Callback+0x68>
		RC_CH6.onFallingEdge = false;
 8003850:	4b12      	ldr	r3, [pc, #72]	; (800389c <HAL_GPIO_EXTI_Callback+0x9c>)
 8003852:	2200      	movs	r2, #0
 8003854:	765a      	strb	r2, [r3, #25]
		RC_CH6.onRisingEdge =  true;
 8003856:	4b11      	ldr	r3, [pc, #68]	; (800389c <HAL_GPIO_EXTI_Callback+0x9c>)
 8003858:	2201      	movs	r2, #1
 800385a:	761a      	strb	r2, [r3, #24]
		RC_CH6.FallingEdgeVal = __HAL_TIM_GET_COUNTER(RC_CH6.htim);
 800385c:	4b0f      	ldr	r3, [pc, #60]	; (800389c <HAL_GPIO_EXTI_Callback+0x9c>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003864:	4a0d      	ldr	r2, [pc, #52]	; (800389c <HAL_GPIO_EXTI_Callback+0x9c>)
 8003866:	60d3      	str	r3, [r2, #12]
	}
	if(RC_CH6.FallingEdgeVal >= RC_CH6.RisingEdgeVal){
 8003868:	4b0c      	ldr	r3, [pc, #48]	; (800389c <HAL_GPIO_EXTI_Callback+0x9c>)
 800386a:	68da      	ldr	r2, [r3, #12]
 800386c:	4b0b      	ldr	r3, [pc, #44]	; (800389c <HAL_GPIO_EXTI_Callback+0x9c>)
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	429a      	cmp	r2, r3
 8003872:	d30c      	bcc.n	800388e <HAL_GPIO_EXTI_Callback+0x8e>
		RC_CH6.DutyCycleVal = RC_CH6.FallingEdgeVal - RC_CH6.RisingEdgeVal;
 8003874:	4b09      	ldr	r3, [pc, #36]	; (800389c <HAL_GPIO_EXTI_Callback+0x9c>)
 8003876:	68da      	ldr	r2, [r3, #12]
 8003878:	4b08      	ldr	r3, [pc, #32]	; (800389c <HAL_GPIO_EXTI_Callback+0x9c>)
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	4a07      	ldr	r2, [pc, #28]	; (800389c <HAL_GPIO_EXTI_Callback+0x9c>)
 8003880:	6113      	str	r3, [r2, #16]
		RC_CH6.FallingEdgeVal = 0;
 8003882:	4b06      	ldr	r3, [pc, #24]	; (800389c <HAL_GPIO_EXTI_Callback+0x9c>)
 8003884:	2200      	movs	r2, #0
 8003886:	60da      	str	r2, [r3, #12]
		RC_CH6.RisingEdgeVal = 0;
 8003888:	4b04      	ldr	r3, [pc, #16]	; (800389c <HAL_GPIO_EXTI_Callback+0x9c>)
 800388a:	2200      	movs	r2, #0
 800388c:	609a      	str	r2, [r3, #8]
	}
}
 800388e:	bf00      	nop
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	20000b18 	.word	0x20000b18

080038a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80038a4:	bf00      	nop
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
	...

080038b0 <PIDControl>:

#include "pid.h"

extern TIM_HandleTypeDef htim2;

void PIDControl(PIDType_t *pidtype, float dataSensor, float setPoint){
 80038b0:	b480      	push	{r7}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	ed87 0a02 	vstr	s0, [r7, #8]
 80038bc:	edc7 0a01 	vstr	s1, [r7, #4]
	pidtype->setPoint = constrain(setPoint, -30, 30);
 80038c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80038c4:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 80038c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038d0:	d501      	bpl.n	80038d6 <PIDControl+0x26>
 80038d2:	4b54      	ldr	r3, [pc, #336]	; (8003a24 <PIDControl+0x174>)
 80038d4:	e00b      	b.n	80038ee <PIDControl+0x3e>
 80038d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80038da:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80038de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038e6:	dd01      	ble.n	80038ec <PIDControl+0x3c>
 80038e8:	4b4f      	ldr	r3, [pc, #316]	; (8003a28 <PIDControl+0x178>)
 80038ea:	e000      	b.n	80038ee <PIDControl+0x3e>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	6113      	str	r3, [r2, #16]
	pidtype->error = pidtype->setPoint - dataSensor;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	ed93 7a04 	vldr	s14, [r3, #16]
 80038f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80038fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	edc3 7a00 	vstr	s15, [r3]

	if(pidtype->error >= 180) pidtype->error -= 360;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	edd3 7a00 	vldr	s15, [r3]
 800390c:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8003a2c <PIDControl+0x17c>
 8003910:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003918:	db0a      	blt.n	8003930 <PIDControl+0x80>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	edd3 7a00 	vldr	s15, [r3]
 8003920:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8003a30 <PIDControl+0x180>
 8003924:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	edc3 7a00 	vstr	s15, [r3]
 800392e:	e013      	b.n	8003958 <PIDControl+0xa8>
	else if(pidtype->error < -180) pidtype->error += 360;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	edd3 7a00 	vldr	s15, [r3]
 8003936:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8003a34 <PIDControl+0x184>
 800393a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800393e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003942:	d509      	bpl.n	8003958 <PIDControl+0xa8>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	edd3 7a00 	vldr	s15, [r3]
 800394a:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8003a30 <PIDControl+0x180>
 800394e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	edc3 7a00 	vstr	s15, [r3]

	pidtype->sumIntegral += pidtype->error * pidtype->timesampling;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	ed93 7a03 	vldr	s14, [r3, #12]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	edd3 6a00 	vldr	s13, [r3]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800396a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800396e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	edc3 7a03 	vstr	s15, [r3, #12]
	pidtype->sumIntegral = constrain(pidtype->sumIntegral, -500, 500);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	edd3 7a03 	vldr	s15, [r3, #12]
 800397e:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8003a38 <PIDControl+0x188>
 8003982:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800398a:	d501      	bpl.n	8003990 <PIDControl+0xe0>
 800398c:	4b2b      	ldr	r3, [pc, #172]	; (8003a3c <PIDControl+0x18c>)
 800398e:	e00d      	b.n	80039ac <PIDControl+0xfc>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	edd3 7a03 	vldr	s15, [r3, #12]
 8003996:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8003a40 <PIDControl+0x190>
 800399a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800399e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039a2:	dd01      	ble.n	80039a8 <PIDControl+0xf8>
 80039a4:	4b27      	ldr	r3, [pc, #156]	; (8003a44 <PIDControl+0x194>)
 80039a6:	e001      	b.n	80039ac <PIDControl+0xfc>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	60d3      	str	r3, [r2, #12]

	pidtype->derivative = (pidtype->error - pidtype->preverror) / pidtype->timesampling;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	ed93 7a00 	vldr	s14, [r3]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	edd3 7a01 	vldr	s15, [r3, #4]
 80039bc:	ee77 6a67 	vsub.f32	s13, s14, s15
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80039c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	edc3 7a02 	vstr	s15, [r3, #8]
	pidtype->preverror = pidtype->error;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	605a      	str	r2, [r3, #4]

	pidtype->output = (pidtype->kp * pidtype->error) + (pidtype->kd * pidtype->derivative) + (pidtype->ki * pidtype->sumIntegral);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	ed93 7a06 	vldr	s14, [r3, #24]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	edd3 7a00 	vldr	s15, [r3]
 80039e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	edd3 6a07 	vldr	s13, [r3, #28]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	edd3 7a02 	vldr	s15, [r3, #8]
 80039f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	edd3 6a08 	vldr	s13, [r3, #32]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	edd3 7a03 	vldr	s15, [r3, #12]
 8003a08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8003a16:	bf00      	nop
 8003a18:	3714      	adds	r7, #20
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	c1f00000 	.word	0xc1f00000
 8003a28:	41f00000 	.word	0x41f00000
 8003a2c:	43340000 	.word	0x43340000
 8003a30:	43b40000 	.word	0x43b40000
 8003a34:	c3340000 	.word	0xc3340000
 8003a38:	c3fa0000 	.word	0xc3fa0000
 8003a3c:	c3fa0000 	.word	0xc3fa0000
 8003a40:	43fa0000 	.word	0x43fa0000
 8003a44:	43fa0000 	.word	0x43fa0000

08003a48 <PIDReset>:

}
void PIDControlPITCH(PIDType_t *pidtype, float dataPitch){

}*/
void PIDReset(PIDType_t *pidtype){
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
	pidtype->sumIntegral = 0;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f04f 0200 	mov.w	r2, #0
 8003a56:	60da      	str	r2, [r3, #12]
	pidtype->output = 0;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f04f 0200 	mov.w	r2, #0
 8003a5e:	615a      	str	r2, [r3, #20]

	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,1000);
 8003a60:	4b0c      	ldr	r3, [pc, #48]	; (8003a94 <PIDReset+0x4c>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a68:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,1000);
 8003a6a:	4b0a      	ldr	r3, [pc, #40]	; (8003a94 <PIDReset+0x4c>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a72:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,1000);
 8003a74:	4b07      	ldr	r3, [pc, #28]	; (8003a94 <PIDReset+0x4c>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a7c:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,1000);
 8003a7e:	4b05      	ldr	r3, [pc, #20]	; (8003a94 <PIDReset+0x4c>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a86:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr
 8003a94:	20000bc4 	.word	0x20000bc4

08003a98 <PIDInit>:
void PIDInit(PIDType_t *pidtype, double kp, double ki, double kd, double timesampling){
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b08a      	sub	sp, #40	; 0x28
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6278      	str	r0, [r7, #36]	; 0x24
 8003aa0:	ed87 0b06 	vstr	d0, [r7, #24]
 8003aa4:	ed87 1b04 	vstr	d1, [r7, #16]
 8003aa8:	ed87 2b02 	vstr	d2, [r7, #8]
 8003aac:	ed87 3b00 	vstr	d3, [r7]
	PIDReset(pidtype);
 8003ab0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ab2:	f7ff ffc9 	bl	8003a48 <PIDReset>

	pidtype->kp = kp;
 8003ab6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003aba:	f7fd f875 	bl	8000ba8 <__aeabi_d2f>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac2:	619a      	str	r2, [r3, #24]
	pidtype->kd = kd;
 8003ac4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003ac8:	f7fd f86e 	bl	8000ba8 <__aeabi_d2f>
 8003acc:	4602      	mov	r2, r0
 8003ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad0:	61da      	str	r2, [r3, #28]
	pidtype->ki = ki;
 8003ad2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003ad6:	f7fd f867 	bl	8000ba8 <__aeabi_d2f>
 8003ada:	4602      	mov	r2, r0
 8003adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ade:	621a      	str	r2, [r3, #32]

	pidtype->timesampling = timesampling;
 8003ae0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003ae4:	f7fd f860 	bl	8000ba8 <__aeabi_d2f>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aec:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003aee:	bf00      	nop
 8003af0:	3728      	adds	r7, #40	; 0x28
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
	...

08003af8 <trustControl>:
void trustControl(){
 8003af8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003afc:	b094      	sub	sp, #80	; 0x50
 8003afe:	af00      	add	r7, sp, #0
	float motor1Thrust,motor2Thrust,motor3Thrust,motor4Thrust;
	float motor1Torque,motor2Torque,motor3Torque,motor4Torque;
	float thrust;
	int RPMmotor1,RPMmotor2,RPMmotor3,RPMmotor4;

	const float RADS = 57.29577795;
 8003b00:	4be1      	ldr	r3, [pc, #900]	; (8003e88 <trustControl+0x390>)
 8003b02:	64fb      	str	r3, [r7, #76]	; 0x4c
	const float angleMotor1 = 45;
 8003b04:	4be1      	ldr	r3, [pc, #900]	; (8003e8c <trustControl+0x394>)
 8003b06:	64bb      	str	r3, [r7, #72]	; 0x48
	const float angleMotor2 = 135;
 8003b08:	4be1      	ldr	r3, [pc, #900]	; (8003e90 <trustControl+0x398>)
 8003b0a:	647b      	str	r3, [r7, #68]	; 0x44
	const float angleMotor3 = 225;
 8003b0c:	4be1      	ldr	r3, [pc, #900]	; (8003e94 <trustControl+0x39c>)
 8003b0e:	643b      	str	r3, [r7, #64]	; 0x40
	const float angleMotor4 = 315;
 8003b10:	4be1      	ldr	r3, [pc, #900]	; (8003e98 <trustControl+0x3a0>)
 8003b12:	63fb      	str	r3, [r7, #60]	; 0x3c
	const float L = 0.225;
 8003b14:	4be1      	ldr	r3, [pc, #900]	; (8003e9c <trustControl+0x3a4>)
 8003b16:	63bb      	str	r3, [r7, #56]	; 0x38

	thrust = map(inputThrottle, 1000, 2000, 0, 49.663985);
 8003b18:	4be1      	ldr	r3, [pc, #900]	; (8003ea0 <trustControl+0x3a8>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7fc fcff 	bl	8000524 <__aeabi_i2d>
 8003b26:	a3d6      	add	r3, pc, #856	; (adr r3, 8003e80 <trustControl+0x388>)
 8003b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b2c:	f7fc fd64 	bl	80005f8 <__aeabi_dmul>
 8003b30:	4603      	mov	r3, r0
 8003b32:	460c      	mov	r4, r1
 8003b34:	4618      	mov	r0, r3
 8003b36:	4621      	mov	r1, r4
 8003b38:	f04f 0200 	mov.w	r2, #0
 8003b3c:	4bd9      	ldr	r3, [pc, #868]	; (8003ea4 <trustControl+0x3ac>)
 8003b3e:	f7fc fe85 	bl	800084c <__aeabi_ddiv>
 8003b42:	4603      	mov	r3, r0
 8003b44:	460c      	mov	r4, r1
 8003b46:	4618      	mov	r0, r3
 8003b48:	4621      	mov	r1, r4
 8003b4a:	f04f 0200 	mov.w	r2, #0
 8003b4e:	f04f 0300 	mov.w	r3, #0
 8003b52:	f7fc fb9b 	bl	800028c <__adddf3>
 8003b56:	4603      	mov	r3, r0
 8003b58:	460c      	mov	r4, r1
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	4621      	mov	r1, r4
 8003b5e:	f7fd f823 	bl	8000ba8 <__aeabi_d2f>
 8003b62:	4603      	mov	r3, r0
 8003b64:	637b      	str	r3, [r7, #52]	; 0x34

	motor1Torque = (thrust/4 + PIDPitch.output * sin(angleMotor1/RADS) + PIDRoll.output * cos(angleMotor1 / RADS) - PIDYaw.output) * L;
 8003b66:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003b6a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003b6e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003b72:	ee16 0a90 	vmov	r0, s13
 8003b76:	f7fc fce7 	bl	8000548 <__aeabi_f2d>
 8003b7a:	4604      	mov	r4, r0
 8003b7c:	460d      	mov	r5, r1
 8003b7e:	4bca      	ldr	r3, [pc, #808]	; (8003ea8 <trustControl+0x3b0>)
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7fc fce0 	bl	8000548 <__aeabi_f2d>
 8003b88:	4680      	mov	r8, r0
 8003b8a:	4689      	mov	r9, r1
 8003b8c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8003b90:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003b94:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003b98:	ee16 0a90 	vmov	r0, s13
 8003b9c:	f7fc fcd4 	bl	8000548 <__aeabi_f2d>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	ec43 2b10 	vmov	d0, r2, r3
 8003ba8:	f007 ffd6 	bl	800bb58 <sin>
 8003bac:	ec53 2b10 	vmov	r2, r3, d0
 8003bb0:	4640      	mov	r0, r8
 8003bb2:	4649      	mov	r1, r9
 8003bb4:	f7fc fd20 	bl	80005f8 <__aeabi_dmul>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	460b      	mov	r3, r1
 8003bbc:	4620      	mov	r0, r4
 8003bbe:	4629      	mov	r1, r5
 8003bc0:	f7fc fb64 	bl	800028c <__adddf3>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	460c      	mov	r4, r1
 8003bc8:	4625      	mov	r5, r4
 8003bca:	461c      	mov	r4, r3
 8003bcc:	4bb7      	ldr	r3, [pc, #732]	; (8003eac <trustControl+0x3b4>)
 8003bce:	695b      	ldr	r3, [r3, #20]
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7fc fcb9 	bl	8000548 <__aeabi_f2d>
 8003bd6:	4680      	mov	r8, r0
 8003bd8:	4689      	mov	r9, r1
 8003bda:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8003bde:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003be2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003be6:	ee16 0a90 	vmov	r0, s13
 8003bea:	f7fc fcad 	bl	8000548 <__aeabi_f2d>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	ec43 2b10 	vmov	d0, r2, r3
 8003bf6:	f007 ff6b 	bl	800bad0 <cos>
 8003bfa:	ec53 2b10 	vmov	r2, r3, d0
 8003bfe:	4640      	mov	r0, r8
 8003c00:	4649      	mov	r1, r9
 8003c02:	f7fc fcf9 	bl	80005f8 <__aeabi_dmul>
 8003c06:	4602      	mov	r2, r0
 8003c08:	460b      	mov	r3, r1
 8003c0a:	4620      	mov	r0, r4
 8003c0c:	4629      	mov	r1, r5
 8003c0e:	f7fc fb3d 	bl	800028c <__adddf3>
 8003c12:	4603      	mov	r3, r0
 8003c14:	460c      	mov	r4, r1
 8003c16:	4625      	mov	r5, r4
 8003c18:	461c      	mov	r4, r3
 8003c1a:	4ba5      	ldr	r3, [pc, #660]	; (8003eb0 <trustControl+0x3b8>)
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7fc fc92 	bl	8000548 <__aeabi_f2d>
 8003c24:	4602      	mov	r2, r0
 8003c26:	460b      	mov	r3, r1
 8003c28:	4620      	mov	r0, r4
 8003c2a:	4629      	mov	r1, r5
 8003c2c:	f7fc fb2c 	bl	8000288 <__aeabi_dsub>
 8003c30:	4603      	mov	r3, r0
 8003c32:	460c      	mov	r4, r1
 8003c34:	4625      	mov	r5, r4
 8003c36:	461c      	mov	r4, r3
 8003c38:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003c3a:	f7fc fc85 	bl	8000548 <__aeabi_f2d>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	460b      	mov	r3, r1
 8003c42:	4620      	mov	r0, r4
 8003c44:	4629      	mov	r1, r5
 8003c46:	f7fc fcd7 	bl	80005f8 <__aeabi_dmul>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	460c      	mov	r4, r1
 8003c4e:	4618      	mov	r0, r3
 8003c50:	4621      	mov	r1, r4
 8003c52:	f7fc ffa9 	bl	8000ba8 <__aeabi_d2f>
 8003c56:	4603      	mov	r3, r0
 8003c58:	633b      	str	r3, [r7, #48]	; 0x30
	motor2Torque = (thrust/4 + PIDPitch.output * sin(angleMotor2/RADS) + PIDRoll.output * cos(angleMotor2 / RADS) + PIDYaw.output) * L;
 8003c5a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003c5e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003c62:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003c66:	ee16 0a90 	vmov	r0, s13
 8003c6a:	f7fc fc6d 	bl	8000548 <__aeabi_f2d>
 8003c6e:	4604      	mov	r4, r0
 8003c70:	460d      	mov	r5, r1
 8003c72:	4b8d      	ldr	r3, [pc, #564]	; (8003ea8 <trustControl+0x3b0>)
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7fc fc66 	bl	8000548 <__aeabi_f2d>
 8003c7c:	4680      	mov	r8, r0
 8003c7e:	4689      	mov	r9, r1
 8003c80:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003c84:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003c88:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003c8c:	ee16 0a90 	vmov	r0, s13
 8003c90:	f7fc fc5a 	bl	8000548 <__aeabi_f2d>
 8003c94:	4602      	mov	r2, r0
 8003c96:	460b      	mov	r3, r1
 8003c98:	ec43 2b10 	vmov	d0, r2, r3
 8003c9c:	f007 ff5c 	bl	800bb58 <sin>
 8003ca0:	ec53 2b10 	vmov	r2, r3, d0
 8003ca4:	4640      	mov	r0, r8
 8003ca6:	4649      	mov	r1, r9
 8003ca8:	f7fc fca6 	bl	80005f8 <__aeabi_dmul>
 8003cac:	4602      	mov	r2, r0
 8003cae:	460b      	mov	r3, r1
 8003cb0:	4620      	mov	r0, r4
 8003cb2:	4629      	mov	r1, r5
 8003cb4:	f7fc faea 	bl	800028c <__adddf3>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	460c      	mov	r4, r1
 8003cbc:	4625      	mov	r5, r4
 8003cbe:	461c      	mov	r4, r3
 8003cc0:	4b7a      	ldr	r3, [pc, #488]	; (8003eac <trustControl+0x3b4>)
 8003cc2:	695b      	ldr	r3, [r3, #20]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7fc fc3f 	bl	8000548 <__aeabi_f2d>
 8003cca:	4680      	mov	r8, r0
 8003ccc:	4689      	mov	r9, r1
 8003cce:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003cd2:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003cd6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003cda:	ee16 0a90 	vmov	r0, s13
 8003cde:	f7fc fc33 	bl	8000548 <__aeabi_f2d>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	ec43 2b10 	vmov	d0, r2, r3
 8003cea:	f007 fef1 	bl	800bad0 <cos>
 8003cee:	ec53 2b10 	vmov	r2, r3, d0
 8003cf2:	4640      	mov	r0, r8
 8003cf4:	4649      	mov	r1, r9
 8003cf6:	f7fc fc7f 	bl	80005f8 <__aeabi_dmul>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	4620      	mov	r0, r4
 8003d00:	4629      	mov	r1, r5
 8003d02:	f7fc fac3 	bl	800028c <__adddf3>
 8003d06:	4603      	mov	r3, r0
 8003d08:	460c      	mov	r4, r1
 8003d0a:	4625      	mov	r5, r4
 8003d0c:	461c      	mov	r4, r3
 8003d0e:	4b68      	ldr	r3, [pc, #416]	; (8003eb0 <trustControl+0x3b8>)
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7fc fc18 	bl	8000548 <__aeabi_f2d>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	4620      	mov	r0, r4
 8003d1e:	4629      	mov	r1, r5
 8003d20:	f7fc fab4 	bl	800028c <__adddf3>
 8003d24:	4603      	mov	r3, r0
 8003d26:	460c      	mov	r4, r1
 8003d28:	4625      	mov	r5, r4
 8003d2a:	461c      	mov	r4, r3
 8003d2c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003d2e:	f7fc fc0b 	bl	8000548 <__aeabi_f2d>
 8003d32:	4602      	mov	r2, r0
 8003d34:	460b      	mov	r3, r1
 8003d36:	4620      	mov	r0, r4
 8003d38:	4629      	mov	r1, r5
 8003d3a:	f7fc fc5d 	bl	80005f8 <__aeabi_dmul>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	460c      	mov	r4, r1
 8003d42:	4618      	mov	r0, r3
 8003d44:	4621      	mov	r1, r4
 8003d46:	f7fc ff2f 	bl	8000ba8 <__aeabi_d2f>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
	motor3Torque = (thrust/4 + PIDPitch.output * sin(angleMotor3/RADS) + PIDRoll.output * cos(angleMotor3 / RADS) - PIDYaw.output) * L;
 8003d4e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003d52:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003d56:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003d5a:	ee16 0a90 	vmov	r0, s13
 8003d5e:	f7fc fbf3 	bl	8000548 <__aeabi_f2d>
 8003d62:	4604      	mov	r4, r0
 8003d64:	460d      	mov	r5, r1
 8003d66:	4b50      	ldr	r3, [pc, #320]	; (8003ea8 <trustControl+0x3b0>)
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7fc fbec 	bl	8000548 <__aeabi_f2d>
 8003d70:	4680      	mov	r8, r0
 8003d72:	4689      	mov	r9, r1
 8003d74:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003d78:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003d7c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003d80:	ee16 0a90 	vmov	r0, s13
 8003d84:	f7fc fbe0 	bl	8000548 <__aeabi_f2d>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	ec43 2b10 	vmov	d0, r2, r3
 8003d90:	f007 fee2 	bl	800bb58 <sin>
 8003d94:	ec53 2b10 	vmov	r2, r3, d0
 8003d98:	4640      	mov	r0, r8
 8003d9a:	4649      	mov	r1, r9
 8003d9c:	f7fc fc2c 	bl	80005f8 <__aeabi_dmul>
 8003da0:	4602      	mov	r2, r0
 8003da2:	460b      	mov	r3, r1
 8003da4:	4620      	mov	r0, r4
 8003da6:	4629      	mov	r1, r5
 8003da8:	f7fc fa70 	bl	800028c <__adddf3>
 8003dac:	4603      	mov	r3, r0
 8003dae:	460c      	mov	r4, r1
 8003db0:	4625      	mov	r5, r4
 8003db2:	461c      	mov	r4, r3
 8003db4:	4b3d      	ldr	r3, [pc, #244]	; (8003eac <trustControl+0x3b4>)
 8003db6:	695b      	ldr	r3, [r3, #20]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7fc fbc5 	bl	8000548 <__aeabi_f2d>
 8003dbe:	4680      	mov	r8, r0
 8003dc0:	4689      	mov	r9, r1
 8003dc2:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003dc6:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003dca:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003dce:	ee16 0a90 	vmov	r0, s13
 8003dd2:	f7fc fbb9 	bl	8000548 <__aeabi_f2d>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	460b      	mov	r3, r1
 8003dda:	ec43 2b10 	vmov	d0, r2, r3
 8003dde:	f007 fe77 	bl	800bad0 <cos>
 8003de2:	ec53 2b10 	vmov	r2, r3, d0
 8003de6:	4640      	mov	r0, r8
 8003de8:	4649      	mov	r1, r9
 8003dea:	f7fc fc05 	bl	80005f8 <__aeabi_dmul>
 8003dee:	4602      	mov	r2, r0
 8003df0:	460b      	mov	r3, r1
 8003df2:	4620      	mov	r0, r4
 8003df4:	4629      	mov	r1, r5
 8003df6:	f7fc fa49 	bl	800028c <__adddf3>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	460c      	mov	r4, r1
 8003dfe:	4625      	mov	r5, r4
 8003e00:	461c      	mov	r4, r3
 8003e02:	4b2b      	ldr	r3, [pc, #172]	; (8003eb0 <trustControl+0x3b8>)
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7fc fb9e 	bl	8000548 <__aeabi_f2d>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	460b      	mov	r3, r1
 8003e10:	4620      	mov	r0, r4
 8003e12:	4629      	mov	r1, r5
 8003e14:	f7fc fa38 	bl	8000288 <__aeabi_dsub>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	460c      	mov	r4, r1
 8003e1c:	4625      	mov	r5, r4
 8003e1e:	461c      	mov	r4, r3
 8003e20:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003e22:	f7fc fb91 	bl	8000548 <__aeabi_f2d>
 8003e26:	4602      	mov	r2, r0
 8003e28:	460b      	mov	r3, r1
 8003e2a:	4620      	mov	r0, r4
 8003e2c:	4629      	mov	r1, r5
 8003e2e:	f7fc fbe3 	bl	80005f8 <__aeabi_dmul>
 8003e32:	4603      	mov	r3, r0
 8003e34:	460c      	mov	r4, r1
 8003e36:	4618      	mov	r0, r3
 8003e38:	4621      	mov	r1, r4
 8003e3a:	f7fc feb5 	bl	8000ba8 <__aeabi_d2f>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	62bb      	str	r3, [r7, #40]	; 0x28
	motor4Torque = (thrust/4 + PIDPitch.output * sin(angleMotor4/RADS) + PIDRoll.output * cos(angleMotor4 / RADS) + PIDYaw.output) * L;
 8003e42:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003e46:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003e4a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003e4e:	ee16 0a90 	vmov	r0, s13
 8003e52:	f7fc fb79 	bl	8000548 <__aeabi_f2d>
 8003e56:	4604      	mov	r4, r0
 8003e58:	460d      	mov	r5, r1
 8003e5a:	4b13      	ldr	r3, [pc, #76]	; (8003ea8 <trustControl+0x3b0>)
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7fc fb72 	bl	8000548 <__aeabi_f2d>
 8003e64:	4680      	mov	r8, r0
 8003e66:	4689      	mov	r9, r1
 8003e68:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003e6c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003e70:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003e74:	ee16 0a90 	vmov	r0, s13
 8003e78:	e01c      	b.n	8003eb4 <trustControl+0x3bc>
 8003e7a:	bf00      	nop
 8003e7c:	f3af 8000 	nop.w
 8003e80:	75e2046c 	.word	0x75e2046c
 8003e84:	4048d4fd 	.word	0x4048d4fd
 8003e88:	42652ee0 	.word	0x42652ee0
 8003e8c:	42340000 	.word	0x42340000
 8003e90:	43070000 	.word	0x43070000
 8003e94:	43610000 	.word	0x43610000
 8003e98:	439d8000 	.word	0x439d8000
 8003e9c:	3e666666 	.word	0x3e666666
 8003ea0:	200003ac 	.word	0x200003ac
 8003ea4:	408f4000 	.word	0x408f4000
 8003ea8:	20000228 	.word	0x20000228
 8003eac:	20000b38 	.word	0x20000b38
 8003eb0:	20000778 	.word	0x20000778
 8003eb4:	f7fc fb48 	bl	8000548 <__aeabi_f2d>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	460b      	mov	r3, r1
 8003ebc:	ec43 2b10 	vmov	d0, r2, r3
 8003ec0:	f007 fe4a 	bl	800bb58 <sin>
 8003ec4:	ec53 2b10 	vmov	r2, r3, d0
 8003ec8:	4640      	mov	r0, r8
 8003eca:	4649      	mov	r1, r9
 8003ecc:	f7fc fb94 	bl	80005f8 <__aeabi_dmul>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	4620      	mov	r0, r4
 8003ed6:	4629      	mov	r1, r5
 8003ed8:	f7fc f9d8 	bl	800028c <__adddf3>
 8003edc:	4603      	mov	r3, r0
 8003ede:	460c      	mov	r4, r1
 8003ee0:	4625      	mov	r5, r4
 8003ee2:	461c      	mov	r4, r3
 8003ee4:	4bbc      	ldr	r3, [pc, #752]	; (80041d8 <trustControl+0x6e0>)
 8003ee6:	695b      	ldr	r3, [r3, #20]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7fc fb2d 	bl	8000548 <__aeabi_f2d>
 8003eee:	4680      	mov	r8, r0
 8003ef0:	4689      	mov	r9, r1
 8003ef2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003ef6:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003efa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003efe:	ee16 0a90 	vmov	r0, s13
 8003f02:	f7fc fb21 	bl	8000548 <__aeabi_f2d>
 8003f06:	4602      	mov	r2, r0
 8003f08:	460b      	mov	r3, r1
 8003f0a:	ec43 2b10 	vmov	d0, r2, r3
 8003f0e:	f007 fddf 	bl	800bad0 <cos>
 8003f12:	ec53 2b10 	vmov	r2, r3, d0
 8003f16:	4640      	mov	r0, r8
 8003f18:	4649      	mov	r1, r9
 8003f1a:	f7fc fb6d 	bl	80005f8 <__aeabi_dmul>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	460b      	mov	r3, r1
 8003f22:	4620      	mov	r0, r4
 8003f24:	4629      	mov	r1, r5
 8003f26:	f7fc f9b1 	bl	800028c <__adddf3>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	460c      	mov	r4, r1
 8003f2e:	4625      	mov	r5, r4
 8003f30:	461c      	mov	r4, r3
 8003f32:	4baa      	ldr	r3, [pc, #680]	; (80041dc <trustControl+0x6e4>)
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7fc fb06 	bl	8000548 <__aeabi_f2d>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	460b      	mov	r3, r1
 8003f40:	4620      	mov	r0, r4
 8003f42:	4629      	mov	r1, r5
 8003f44:	f7fc f9a2 	bl	800028c <__adddf3>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	460c      	mov	r4, r1
 8003f4c:	4625      	mov	r5, r4
 8003f4e:	461c      	mov	r4, r3
 8003f50:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003f52:	f7fc faf9 	bl	8000548 <__aeabi_f2d>
 8003f56:	4602      	mov	r2, r0
 8003f58:	460b      	mov	r3, r1
 8003f5a:	4620      	mov	r0, r4
 8003f5c:	4629      	mov	r1, r5
 8003f5e:	f7fc fb4b 	bl	80005f8 <__aeabi_dmul>
 8003f62:	4603      	mov	r3, r0
 8003f64:	460c      	mov	r4, r1
 8003f66:	4618      	mov	r0, r3
 8003f68:	4621      	mov	r1, r4
 8003f6a:	f7fc fe1d 	bl	8000ba8 <__aeabi_d2f>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	627b      	str	r3, [r7, #36]	; 0x24

	motor1Thrust = motor1Torque/L;
 8003f72:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8003f76:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003f7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f7e:	edc7 7a08 	vstr	s15, [r7, #32]
	motor2Thrust = motor2Torque/L;
 8003f82:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8003f86:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003f8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f8e:	edc7 7a07 	vstr	s15, [r7, #28]
	motor3Thrust = motor3Torque/L;
 8003f92:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8003f96:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003f9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f9e:	edc7 7a06 	vstr	s15, [r7, #24]
	motor4Thrust = motor4Torque/L;
 8003fa2:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8003fa6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003faa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fae:	edc7 7a05 	vstr	s15, [r7, #20]

	RPMmotor1 = sqrt(motor1Thrust/ 0.0449289729)/0.0019896667;
 8003fb2:	6a38      	ldr	r0, [r7, #32]
 8003fb4:	f7fc fac8 	bl	8000548 <__aeabi_f2d>
 8003fb8:	a383      	add	r3, pc, #524	; (adr r3, 80041c8 <trustControl+0x6d0>)
 8003fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fbe:	f7fc fc45 	bl	800084c <__aeabi_ddiv>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	460c      	mov	r4, r1
 8003fc6:	ec44 3b17 	vmov	d7, r3, r4
 8003fca:	eeb0 0a47 	vmov.f32	s0, s14
 8003fce:	eef0 0a67 	vmov.f32	s1, s15
 8003fd2:	f007 fe09 	bl	800bbe8 <sqrt>
 8003fd6:	ec51 0b10 	vmov	r0, r1, d0
 8003fda:	a37d      	add	r3, pc, #500	; (adr r3, 80041d0 <trustControl+0x6d8>)
 8003fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe0:	f7fc fc34 	bl	800084c <__aeabi_ddiv>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	460c      	mov	r4, r1
 8003fe8:	4618      	mov	r0, r3
 8003fea:	4621      	mov	r1, r4
 8003fec:	f7fc fdb4 	bl	8000b58 <__aeabi_d2iz>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	613b      	str	r3, [r7, #16]
	RPMmotor2 = sqrt(motor2Thrust/ 0.0449289729)/0.0019896667;
 8003ff4:	69f8      	ldr	r0, [r7, #28]
 8003ff6:	f7fc faa7 	bl	8000548 <__aeabi_f2d>
 8003ffa:	a373      	add	r3, pc, #460	; (adr r3, 80041c8 <trustControl+0x6d0>)
 8003ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004000:	f7fc fc24 	bl	800084c <__aeabi_ddiv>
 8004004:	4603      	mov	r3, r0
 8004006:	460c      	mov	r4, r1
 8004008:	ec44 3b17 	vmov	d7, r3, r4
 800400c:	eeb0 0a47 	vmov.f32	s0, s14
 8004010:	eef0 0a67 	vmov.f32	s1, s15
 8004014:	f007 fde8 	bl	800bbe8 <sqrt>
 8004018:	ec51 0b10 	vmov	r0, r1, d0
 800401c:	a36c      	add	r3, pc, #432	; (adr r3, 80041d0 <trustControl+0x6d8>)
 800401e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004022:	f7fc fc13 	bl	800084c <__aeabi_ddiv>
 8004026:	4603      	mov	r3, r0
 8004028:	460c      	mov	r4, r1
 800402a:	4618      	mov	r0, r3
 800402c:	4621      	mov	r1, r4
 800402e:	f7fc fd93 	bl	8000b58 <__aeabi_d2iz>
 8004032:	4603      	mov	r3, r0
 8004034:	60fb      	str	r3, [r7, #12]
	RPMmotor3 = sqrt(motor3Thrust/ 0.0449289729)/0.0019896667;
 8004036:	69b8      	ldr	r0, [r7, #24]
 8004038:	f7fc fa86 	bl	8000548 <__aeabi_f2d>
 800403c:	a362      	add	r3, pc, #392	; (adr r3, 80041c8 <trustControl+0x6d0>)
 800403e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004042:	f7fc fc03 	bl	800084c <__aeabi_ddiv>
 8004046:	4603      	mov	r3, r0
 8004048:	460c      	mov	r4, r1
 800404a:	ec44 3b17 	vmov	d7, r3, r4
 800404e:	eeb0 0a47 	vmov.f32	s0, s14
 8004052:	eef0 0a67 	vmov.f32	s1, s15
 8004056:	f007 fdc7 	bl	800bbe8 <sqrt>
 800405a:	ec51 0b10 	vmov	r0, r1, d0
 800405e:	a35c      	add	r3, pc, #368	; (adr r3, 80041d0 <trustControl+0x6d8>)
 8004060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004064:	f7fc fbf2 	bl	800084c <__aeabi_ddiv>
 8004068:	4603      	mov	r3, r0
 800406a:	460c      	mov	r4, r1
 800406c:	4618      	mov	r0, r3
 800406e:	4621      	mov	r1, r4
 8004070:	f7fc fd72 	bl	8000b58 <__aeabi_d2iz>
 8004074:	4603      	mov	r3, r0
 8004076:	60bb      	str	r3, [r7, #8]
	RPMmotor4 = sqrt(motor4Thrust/ 0.0449289729)/0.0019896667;
 8004078:	6978      	ldr	r0, [r7, #20]
 800407a:	f7fc fa65 	bl	8000548 <__aeabi_f2d>
 800407e:	a352      	add	r3, pc, #328	; (adr r3, 80041c8 <trustControl+0x6d0>)
 8004080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004084:	f7fc fbe2 	bl	800084c <__aeabi_ddiv>
 8004088:	4603      	mov	r3, r0
 800408a:	460c      	mov	r4, r1
 800408c:	ec44 3b17 	vmov	d7, r3, r4
 8004090:	eeb0 0a47 	vmov.f32	s0, s14
 8004094:	eef0 0a67 	vmov.f32	s1, s15
 8004098:	f007 fda6 	bl	800bbe8 <sqrt>
 800409c:	ec51 0b10 	vmov	r0, r1, d0
 80040a0:	a34b      	add	r3, pc, #300	; (adr r3, 80041d0 <trustControl+0x6d8>)
 80040a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a6:	f7fc fbd1 	bl	800084c <__aeabi_ddiv>
 80040aa:	4603      	mov	r3, r0
 80040ac:	460c      	mov	r4, r1
 80040ae:	4618      	mov	r0, r3
 80040b0:	4621      	mov	r1, r4
 80040b2:	f7fc fd51 	bl	8000b58 <__aeabi_d2iz>
 80040b6:	4603      	mov	r3, r0
 80040b8:	607b      	str	r3, [r7, #4]

	RPMmotor1 = constrain(RPMmotor1,0,12000);
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	db06      	blt.n	80040ce <trustControl+0x5d6>
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 80040c6:	4293      	cmp	r3, r2
 80040c8:	bfa8      	it	ge
 80040ca:	4613      	movge	r3, r2
 80040cc:	e000      	b.n	80040d0 <trustControl+0x5d8>
 80040ce:	2300      	movs	r3, #0
 80040d0:	613b      	str	r3, [r7, #16]
	RPMmotor2 = constrain(RPMmotor2,0,12000);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	db06      	blt.n	80040e6 <trustControl+0x5ee>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 80040de:	4293      	cmp	r3, r2
 80040e0:	bfa8      	it	ge
 80040e2:	4613      	movge	r3, r2
 80040e4:	e000      	b.n	80040e8 <trustControl+0x5f0>
 80040e6:	2300      	movs	r3, #0
 80040e8:	60fb      	str	r3, [r7, #12]
	RPMmotor3 = constrain(RPMmotor3,0,12000);
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	db06      	blt.n	80040fe <trustControl+0x606>
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 80040f6:	4293      	cmp	r3, r2
 80040f8:	bfa8      	it	ge
 80040fa:	4613      	movge	r3, r2
 80040fc:	e000      	b.n	8004100 <trustControl+0x608>
 80040fe:	2300      	movs	r3, #0
 8004100:	60bb      	str	r3, [r7, #8]
	RPMmotor4 = constrain(RPMmotor4,0,12000);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2b00      	cmp	r3, #0
 8004106:	db06      	blt.n	8004116 <trustControl+0x61e>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 800410e:	4293      	cmp	r3, r2
 8004110:	bfa8      	it	ge
 8004112:	4613      	movge	r3, r2
 8004114:	e000      	b.n	8004118 <trustControl+0x620>
 8004116:	2300      	movs	r3, #0
 8004118:	607b      	str	r3, [r7, #4]

	pulseESC1 = map(RPMmotor1,0,12000,1000,2000);
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004120:	fb02 f303 	mul.w	r3, r2, r3
 8004124:	4a2e      	ldr	r2, [pc, #184]	; (80041e0 <trustControl+0x6e8>)
 8004126:	fb82 1203 	smull	r1, r2, r2, r3
 800412a:	1212      	asrs	r2, r2, #8
 800412c:	17db      	asrs	r3, r3, #31
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8004134:	4a2b      	ldr	r2, [pc, #172]	; (80041e4 <trustControl+0x6ec>)
 8004136:	6013      	str	r3, [r2, #0]
	pulseESC2 = map(RPMmotor2,0,12000,1000,2000);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800413e:	fb02 f303 	mul.w	r3, r2, r3
 8004142:	4a27      	ldr	r2, [pc, #156]	; (80041e0 <trustControl+0x6e8>)
 8004144:	fb82 1203 	smull	r1, r2, r2, r3
 8004148:	1212      	asrs	r2, r2, #8
 800414a:	17db      	asrs	r3, r3, #31
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8004152:	4a25      	ldr	r2, [pc, #148]	; (80041e8 <trustControl+0x6f0>)
 8004154:	6013      	str	r3, [r2, #0]
	pulseESC3 = map(RPMmotor3,0,12000,1000,2000);
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800415c:	fb02 f303 	mul.w	r3, r2, r3
 8004160:	4a1f      	ldr	r2, [pc, #124]	; (80041e0 <trustControl+0x6e8>)
 8004162:	fb82 1203 	smull	r1, r2, r2, r3
 8004166:	1212      	asrs	r2, r2, #8
 8004168:	17db      	asrs	r3, r3, #31
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8004170:	4a1e      	ldr	r2, [pc, #120]	; (80041ec <trustControl+0x6f4>)
 8004172:	6013      	str	r3, [r2, #0]
	pulseESC4 = map(RPMmotor4,0,12000,1000,2000);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800417a:	fb02 f303 	mul.w	r3, r2, r3
 800417e:	4a18      	ldr	r2, [pc, #96]	; (80041e0 <trustControl+0x6e8>)
 8004180:	fb82 1203 	smull	r1, r2, r2, r3
 8004184:	1212      	asrs	r2, r2, #8
 8004186:	17db      	asrs	r3, r3, #31
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800418e:	4a18      	ldr	r2, [pc, #96]	; (80041f0 <trustControl+0x6f8>)
 8004190:	6013      	str	r3, [r2, #0]

	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,pulseESC1);
 8004192:	4b14      	ldr	r3, [pc, #80]	; (80041e4 <trustControl+0x6ec>)
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	4b17      	ldr	r3, [pc, #92]	; (80041f4 <trustControl+0x6fc>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,pulseESC2);
 800419c:	4b12      	ldr	r3, [pc, #72]	; (80041e8 <trustControl+0x6f0>)
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	4b14      	ldr	r3, [pc, #80]	; (80041f4 <trustControl+0x6fc>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,pulseESC3);
 80041a6:	4b11      	ldr	r3, [pc, #68]	; (80041ec <trustControl+0x6f4>)
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	4b12      	ldr	r3, [pc, #72]	; (80041f4 <trustControl+0x6fc>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,pulseESC4);
 80041b0:	4b0f      	ldr	r3, [pc, #60]	; (80041f0 <trustControl+0x6f8>)
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	4b0f      	ldr	r3, [pc, #60]	; (80041f4 <trustControl+0x6fc>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	641a      	str	r2, [r3, #64]	; 0x40

}
 80041ba:	bf00      	nop
 80041bc:	3750      	adds	r7, #80	; 0x50
 80041be:	46bd      	mov	sp, r7
 80041c0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80041c4:	f3af 8000 	nop.w
 80041c8:	2a7f2a64 	.word	0x2a7f2a64
 80041cc:	3fa700ee 	.word	0x3fa700ee
 80041d0:	2d018ef8 	.word	0x2d018ef8
 80041d4:	3f604ca2 	.word	0x3f604ca2
 80041d8:	20000b38 	.word	0x20000b38
 80041dc:	20000778 	.word	0x20000778
 80041e0:	057619f1 	.word	0x057619f1
 80041e4:	20000ce4 	.word	0x20000ce4
 80041e8:	20000250 	.word	0x20000250
 80041ec:	20000d00 	.word	0x20000d00
 80041f0:	200008ac 	.word	0x200008ac
 80041f4:	20000bc4 	.word	0x20000bc4

080041f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041fe:	2300      	movs	r3, #0
 8004200:	607b      	str	r3, [r7, #4]
 8004202:	4b10      	ldr	r3, [pc, #64]	; (8004244 <HAL_MspInit+0x4c>)
 8004204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004206:	4a0f      	ldr	r2, [pc, #60]	; (8004244 <HAL_MspInit+0x4c>)
 8004208:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800420c:	6453      	str	r3, [r2, #68]	; 0x44
 800420e:	4b0d      	ldr	r3, [pc, #52]	; (8004244 <HAL_MspInit+0x4c>)
 8004210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004212:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004216:	607b      	str	r3, [r7, #4]
 8004218:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800421a:	2300      	movs	r3, #0
 800421c:	603b      	str	r3, [r7, #0]
 800421e:	4b09      	ldr	r3, [pc, #36]	; (8004244 <HAL_MspInit+0x4c>)
 8004220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004222:	4a08      	ldr	r2, [pc, #32]	; (8004244 <HAL_MspInit+0x4c>)
 8004224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004228:	6413      	str	r3, [r2, #64]	; 0x40
 800422a:	4b06      	ldr	r3, [pc, #24]	; (8004244 <HAL_MspInit+0x4c>)
 800422c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004232:	603b      	str	r3, [r7, #0]
 8004234:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004236:	bf00      	nop
 8004238:	370c      	adds	r7, #12
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	40023800 	.word	0x40023800

08004248 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b08c      	sub	sp, #48	; 0x30
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004250:	f107 031c 	add.w	r3, r7, #28
 8004254:	2200      	movs	r2, #0
 8004256:	601a      	str	r2, [r3, #0]
 8004258:	605a      	str	r2, [r3, #4]
 800425a:	609a      	str	r2, [r3, #8]
 800425c:	60da      	str	r2, [r3, #12]
 800425e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a42      	ldr	r2, [pc, #264]	; (8004370 <HAL_I2C_MspInit+0x128>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d12d      	bne.n	80042c6 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800426a:	2300      	movs	r3, #0
 800426c:	61bb      	str	r3, [r7, #24]
 800426e:	4b41      	ldr	r3, [pc, #260]	; (8004374 <HAL_I2C_MspInit+0x12c>)
 8004270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004272:	4a40      	ldr	r2, [pc, #256]	; (8004374 <HAL_I2C_MspInit+0x12c>)
 8004274:	f043 0302 	orr.w	r3, r3, #2
 8004278:	6313      	str	r3, [r2, #48]	; 0x30
 800427a:	4b3e      	ldr	r3, [pc, #248]	; (8004374 <HAL_I2C_MspInit+0x12c>)
 800427c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427e:	f003 0302 	and.w	r3, r3, #2
 8004282:	61bb      	str	r3, [r7, #24]
 8004284:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004286:	f44f 7340 	mov.w	r3, #768	; 0x300
 800428a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800428c:	2312      	movs	r3, #18
 800428e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004290:	2301      	movs	r3, #1
 8004292:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004294:	2303      	movs	r3, #3
 8004296:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004298:	2304      	movs	r3, #4
 800429a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800429c:	f107 031c 	add.w	r3, r7, #28
 80042a0:	4619      	mov	r1, r3
 80042a2:	4835      	ldr	r0, [pc, #212]	; (8004378 <HAL_I2C_MspInit+0x130>)
 80042a4:	f001 f970 	bl	8005588 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80042a8:	2300      	movs	r3, #0
 80042aa:	617b      	str	r3, [r7, #20]
 80042ac:	4b31      	ldr	r3, [pc, #196]	; (8004374 <HAL_I2C_MspInit+0x12c>)
 80042ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b0:	4a30      	ldr	r2, [pc, #192]	; (8004374 <HAL_I2C_MspInit+0x12c>)
 80042b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80042b6:	6413      	str	r3, [r2, #64]	; 0x40
 80042b8:	4b2e      	ldr	r3, [pc, #184]	; (8004374 <HAL_I2C_MspInit+0x12c>)
 80042ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042c0:	617b      	str	r3, [r7, #20]
 80042c2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80042c4:	e050      	b.n	8004368 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a2c      	ldr	r2, [pc, #176]	; (800437c <HAL_I2C_MspInit+0x134>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d14b      	bne.n	8004368 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80042d0:	2300      	movs	r3, #0
 80042d2:	613b      	str	r3, [r7, #16]
 80042d4:	4b27      	ldr	r3, [pc, #156]	; (8004374 <HAL_I2C_MspInit+0x12c>)
 80042d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d8:	4a26      	ldr	r2, [pc, #152]	; (8004374 <HAL_I2C_MspInit+0x12c>)
 80042da:	f043 0304 	orr.w	r3, r3, #4
 80042de:	6313      	str	r3, [r2, #48]	; 0x30
 80042e0:	4b24      	ldr	r3, [pc, #144]	; (8004374 <HAL_I2C_MspInit+0x12c>)
 80042e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e4:	f003 0304 	and.w	r3, r3, #4
 80042e8:	613b      	str	r3, [r7, #16]
 80042ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042ec:	2300      	movs	r3, #0
 80042ee:	60fb      	str	r3, [r7, #12]
 80042f0:	4b20      	ldr	r3, [pc, #128]	; (8004374 <HAL_I2C_MspInit+0x12c>)
 80042f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f4:	4a1f      	ldr	r2, [pc, #124]	; (8004374 <HAL_I2C_MspInit+0x12c>)
 80042f6:	f043 0301 	orr.w	r3, r3, #1
 80042fa:	6313      	str	r3, [r2, #48]	; 0x30
 80042fc:	4b1d      	ldr	r3, [pc, #116]	; (8004374 <HAL_I2C_MspInit+0x12c>)
 80042fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004300:	f003 0301 	and.w	r3, r3, #1
 8004304:	60fb      	str	r3, [r7, #12]
 8004306:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004308:	f44f 7300 	mov.w	r3, #512	; 0x200
 800430c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800430e:	2312      	movs	r3, #18
 8004310:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004312:	2301      	movs	r3, #1
 8004314:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004316:	2303      	movs	r3, #3
 8004318:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800431a:	2304      	movs	r3, #4
 800431c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800431e:	f107 031c 	add.w	r3, r7, #28
 8004322:	4619      	mov	r1, r3
 8004324:	4816      	ldr	r0, [pc, #88]	; (8004380 <HAL_I2C_MspInit+0x138>)
 8004326:	f001 f92f 	bl	8005588 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800432a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800432e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004330:	2312      	movs	r3, #18
 8004332:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004334:	2301      	movs	r3, #1
 8004336:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004338:	2303      	movs	r3, #3
 800433a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800433c:	2304      	movs	r3, #4
 800433e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004340:	f107 031c 	add.w	r3, r7, #28
 8004344:	4619      	mov	r1, r3
 8004346:	480f      	ldr	r0, [pc, #60]	; (8004384 <HAL_I2C_MspInit+0x13c>)
 8004348:	f001 f91e 	bl	8005588 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800434c:	2300      	movs	r3, #0
 800434e:	60bb      	str	r3, [r7, #8]
 8004350:	4b08      	ldr	r3, [pc, #32]	; (8004374 <HAL_I2C_MspInit+0x12c>)
 8004352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004354:	4a07      	ldr	r2, [pc, #28]	; (8004374 <HAL_I2C_MspInit+0x12c>)
 8004356:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800435a:	6413      	str	r3, [r2, #64]	; 0x40
 800435c:	4b05      	ldr	r3, [pc, #20]	; (8004374 <HAL_I2C_MspInit+0x12c>)
 800435e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004360:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004364:	60bb      	str	r3, [r7, #8]
 8004366:	68bb      	ldr	r3, [r7, #8]
}
 8004368:	bf00      	nop
 800436a:	3730      	adds	r7, #48	; 0x30
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	40005400 	.word	0x40005400
 8004374:	40023800 	.word	0x40023800
 8004378:	40020400 	.word	0x40020400
 800437c:	40005c00 	.word	0x40005c00
 8004380:	40020800 	.word	0x40020800
 8004384:	40020000 	.word	0x40020000

08004388 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b094      	sub	sp, #80	; 0x50
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004390:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004394:	2200      	movs	r2, #0
 8004396:	601a      	str	r2, [r3, #0]
 8004398:	605a      	str	r2, [r3, #4]
 800439a:	609a      	str	r2, [r3, #8]
 800439c:	60da      	str	r2, [r3, #12]
 800439e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043a8:	d116      	bne.n	80043d8 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80043aa:	2300      	movs	r3, #0
 80043ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80043ae:	4ba6      	ldr	r3, [pc, #664]	; (8004648 <HAL_TIM_Base_MspInit+0x2c0>)
 80043b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b2:	4aa5      	ldr	r2, [pc, #660]	; (8004648 <HAL_TIM_Base_MspInit+0x2c0>)
 80043b4:	f043 0301 	orr.w	r3, r3, #1
 80043b8:	6413      	str	r3, [r2, #64]	; 0x40
 80043ba:	4ba3      	ldr	r3, [pc, #652]	; (8004648 <HAL_TIM_Base_MspInit+0x2c0>)
 80043bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80043c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80043c6:	2200      	movs	r2, #0
 80043c8:	2100      	movs	r1, #0
 80043ca:	201c      	movs	r0, #28
 80043cc:	f000 fd37 	bl	8004e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80043d0:	201c      	movs	r0, #28
 80043d2:	f000 fd50 	bl	8004e76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80043d6:	e16a      	b.n	80046ae <HAL_TIM_Base_MspInit+0x326>
  else if(htim_base->Instance==TIM3)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a9b      	ldr	r2, [pc, #620]	; (800464c <HAL_TIM_Base_MspInit+0x2c4>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d152      	bne.n	8004488 <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80043e2:	2300      	movs	r3, #0
 80043e4:	637b      	str	r3, [r7, #52]	; 0x34
 80043e6:	4b98      	ldr	r3, [pc, #608]	; (8004648 <HAL_TIM_Base_MspInit+0x2c0>)
 80043e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ea:	4a97      	ldr	r2, [pc, #604]	; (8004648 <HAL_TIM_Base_MspInit+0x2c0>)
 80043ec:	f043 0302 	orr.w	r3, r3, #2
 80043f0:	6413      	str	r3, [r2, #64]	; 0x40
 80043f2:	4b95      	ldr	r3, [pc, #596]	; (8004648 <HAL_TIM_Base_MspInit+0x2c0>)
 80043f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	637b      	str	r3, [r7, #52]	; 0x34
 80043fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043fe:	2300      	movs	r3, #0
 8004400:	633b      	str	r3, [r7, #48]	; 0x30
 8004402:	4b91      	ldr	r3, [pc, #580]	; (8004648 <HAL_TIM_Base_MspInit+0x2c0>)
 8004404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004406:	4a90      	ldr	r2, [pc, #576]	; (8004648 <HAL_TIM_Base_MspInit+0x2c0>)
 8004408:	f043 0304 	orr.w	r3, r3, #4
 800440c:	6313      	str	r3, [r2, #48]	; 0x30
 800440e:	4b8e      	ldr	r3, [pc, #568]	; (8004648 <HAL_TIM_Base_MspInit+0x2c0>)
 8004410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004412:	f003 0304 	and.w	r3, r3, #4
 8004416:	633b      	str	r3, [r7, #48]	; 0x30
 8004418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800441a:	2300      	movs	r3, #0
 800441c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800441e:	4b8a      	ldr	r3, [pc, #552]	; (8004648 <HAL_TIM_Base_MspInit+0x2c0>)
 8004420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004422:	4a89      	ldr	r2, [pc, #548]	; (8004648 <HAL_TIM_Base_MspInit+0x2c0>)
 8004424:	f043 0302 	orr.w	r3, r3, #2
 8004428:	6313      	str	r3, [r2, #48]	; 0x30
 800442a:	4b87      	ldr	r3, [pc, #540]	; (8004648 <HAL_TIM_Base_MspInit+0x2c0>)
 800442c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004436:	2380      	movs	r3, #128	; 0x80
 8004438:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800443a:	2302      	movs	r3, #2
 800443c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800443e:	2300      	movs	r3, #0
 8004440:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004442:	2300      	movs	r3, #0
 8004444:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004446:	2302      	movs	r3, #2
 8004448:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800444a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800444e:	4619      	mov	r1, r3
 8004450:	487f      	ldr	r0, [pc, #508]	; (8004650 <HAL_TIM_Base_MspInit+0x2c8>)
 8004452:	f001 f899 	bl	8005588 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004456:	2310      	movs	r3, #16
 8004458:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800445a:	2302      	movs	r3, #2
 800445c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800445e:	2300      	movs	r3, #0
 8004460:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004462:	2300      	movs	r3, #0
 8004464:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004466:	2302      	movs	r3, #2
 8004468:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800446a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800446e:	4619      	mov	r1, r3
 8004470:	4878      	ldr	r0, [pc, #480]	; (8004654 <HAL_TIM_Base_MspInit+0x2cc>)
 8004472:	f001 f889 	bl	8005588 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004476:	2200      	movs	r2, #0
 8004478:	2100      	movs	r1, #0
 800447a:	201d      	movs	r0, #29
 800447c:	f000 fcdf 	bl	8004e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004480:	201d      	movs	r0, #29
 8004482:	f000 fcf8 	bl	8004e76 <HAL_NVIC_EnableIRQ>
}
 8004486:	e112      	b.n	80046ae <HAL_TIM_Base_MspInit+0x326>
  else if(htim_base->Instance==TIM4)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a72      	ldr	r2, [pc, #456]	; (8004658 <HAL_TIM_Base_MspInit+0x2d0>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d135      	bne.n	80044fe <HAL_TIM_Base_MspInit+0x176>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004492:	2300      	movs	r3, #0
 8004494:	62bb      	str	r3, [r7, #40]	; 0x28
 8004496:	4b6c      	ldr	r3, [pc, #432]	; (8004648 <HAL_TIM_Base_MspInit+0x2c0>)
 8004498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449a:	4a6b      	ldr	r2, [pc, #428]	; (8004648 <HAL_TIM_Base_MspInit+0x2c0>)
 800449c:	f043 0304 	orr.w	r3, r3, #4
 80044a0:	6413      	str	r3, [r2, #64]	; 0x40
 80044a2:	4b69      	ldr	r3, [pc, #420]	; (8004648 <HAL_TIM_Base_MspInit+0x2c0>)
 80044a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a6:	f003 0304 	and.w	r3, r3, #4
 80044aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80044ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80044ae:	2300      	movs	r3, #0
 80044b0:	627b      	str	r3, [r7, #36]	; 0x24
 80044b2:	4b65      	ldr	r3, [pc, #404]	; (8004648 <HAL_TIM_Base_MspInit+0x2c0>)
 80044b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b6:	4a64      	ldr	r2, [pc, #400]	; (8004648 <HAL_TIM_Base_MspInit+0x2c0>)
 80044b8:	f043 0308 	orr.w	r3, r3, #8
 80044bc:	6313      	str	r3, [r2, #48]	; 0x30
 80044be:	4b62      	ldr	r3, [pc, #392]	; (8004648 <HAL_TIM_Base_MspInit+0x2c0>)
 80044c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c2:	f003 0308 	and.w	r3, r3, #8
 80044c6:	627b      	str	r3, [r7, #36]	; 0x24
 80044c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80044ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044ce:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044d0:	2302      	movs	r3, #2
 80044d2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044d4:	2300      	movs	r3, #0
 80044d6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044d8:	2300      	movs	r3, #0
 80044da:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80044dc:	2302      	movs	r3, #2
 80044de:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80044e0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80044e4:	4619      	mov	r1, r3
 80044e6:	485d      	ldr	r0, [pc, #372]	; (800465c <HAL_TIM_Base_MspInit+0x2d4>)
 80044e8:	f001 f84e 	bl	8005588 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80044ec:	2200      	movs	r2, #0
 80044ee:	2100      	movs	r1, #0
 80044f0:	201e      	movs	r0, #30
 80044f2:	f000 fca4 	bl	8004e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80044f6:	201e      	movs	r0, #30
 80044f8:	f000 fcbd 	bl	8004e76 <HAL_NVIC_EnableIRQ>
}
 80044fc:	e0d7      	b.n	80046ae <HAL_TIM_Base_MspInit+0x326>
  else if(htim_base->Instance==TIM5)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a57      	ldr	r2, [pc, #348]	; (8004660 <HAL_TIM_Base_MspInit+0x2d8>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d134      	bne.n	8004572 <HAL_TIM_Base_MspInit+0x1ea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004508:	2300      	movs	r3, #0
 800450a:	623b      	str	r3, [r7, #32]
 800450c:	4b4e      	ldr	r3, [pc, #312]	; (8004648 <HAL_TIM_Base_MspInit+0x2c0>)
 800450e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004510:	4a4d      	ldr	r2, [pc, #308]	; (8004648 <HAL_TIM_Base_MspInit+0x2c0>)
 8004512:	f043 0308 	orr.w	r3, r3, #8
 8004516:	6413      	str	r3, [r2, #64]	; 0x40
 8004518:	4b4b      	ldr	r3, [pc, #300]	; (8004648 <HAL_TIM_Base_MspInit+0x2c0>)
 800451a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451c:	f003 0308 	and.w	r3, r3, #8
 8004520:	623b      	str	r3, [r7, #32]
 8004522:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004524:	2300      	movs	r3, #0
 8004526:	61fb      	str	r3, [r7, #28]
 8004528:	4b47      	ldr	r3, [pc, #284]	; (8004648 <HAL_TIM_Base_MspInit+0x2c0>)
 800452a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452c:	4a46      	ldr	r2, [pc, #280]	; (8004648 <HAL_TIM_Base_MspInit+0x2c0>)
 800452e:	f043 0301 	orr.w	r3, r3, #1
 8004532:	6313      	str	r3, [r2, #48]	; 0x30
 8004534:	4b44      	ldr	r3, [pc, #272]	; (8004648 <HAL_TIM_Base_MspInit+0x2c0>)
 8004536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004538:	f003 0301 	and.w	r3, r3, #1
 800453c:	61fb      	str	r3, [r7, #28]
 800453e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004540:	2301      	movs	r3, #1
 8004542:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004544:	2302      	movs	r3, #2
 8004546:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004548:	2300      	movs	r3, #0
 800454a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800454c:	2300      	movs	r3, #0
 800454e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004550:	2302      	movs	r3, #2
 8004552:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004554:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004558:	4619      	mov	r1, r3
 800455a:	4842      	ldr	r0, [pc, #264]	; (8004664 <HAL_TIM_Base_MspInit+0x2dc>)
 800455c:	f001 f814 	bl	8005588 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8004560:	2200      	movs	r2, #0
 8004562:	2100      	movs	r1, #0
 8004564:	2032      	movs	r0, #50	; 0x32
 8004566:	f000 fc6a 	bl	8004e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800456a:	2032      	movs	r0, #50	; 0x32
 800456c:	f000 fc83 	bl	8004e76 <HAL_NVIC_EnableIRQ>
}
 8004570:	e09d      	b.n	80046ae <HAL_TIM_Base_MspInit+0x326>
  else if(htim_base->Instance==TIM6)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a3c      	ldr	r2, [pc, #240]	; (8004668 <HAL_TIM_Base_MspInit+0x2e0>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d10e      	bne.n	800459a <HAL_TIM_Base_MspInit+0x212>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800457c:	2300      	movs	r3, #0
 800457e:	61bb      	str	r3, [r7, #24]
 8004580:	4b31      	ldr	r3, [pc, #196]	; (8004648 <HAL_TIM_Base_MspInit+0x2c0>)
 8004582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004584:	4a30      	ldr	r2, [pc, #192]	; (8004648 <HAL_TIM_Base_MspInit+0x2c0>)
 8004586:	f043 0310 	orr.w	r3, r3, #16
 800458a:	6413      	str	r3, [r2, #64]	; 0x40
 800458c:	4b2e      	ldr	r3, [pc, #184]	; (8004648 <HAL_TIM_Base_MspInit+0x2c0>)
 800458e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004590:	f003 0310 	and.w	r3, r3, #16
 8004594:	61bb      	str	r3, [r7, #24]
 8004596:	69bb      	ldr	r3, [r7, #24]
}
 8004598:	e089      	b.n	80046ae <HAL_TIM_Base_MspInit+0x326>
  else if(htim_base->Instance==TIM7)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a33      	ldr	r2, [pc, #204]	; (800466c <HAL_TIM_Base_MspInit+0x2e4>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d116      	bne.n	80045d2 <HAL_TIM_Base_MspInit+0x24a>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80045a4:	2300      	movs	r3, #0
 80045a6:	617b      	str	r3, [r7, #20]
 80045a8:	4b27      	ldr	r3, [pc, #156]	; (8004648 <HAL_TIM_Base_MspInit+0x2c0>)
 80045aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ac:	4a26      	ldr	r2, [pc, #152]	; (8004648 <HAL_TIM_Base_MspInit+0x2c0>)
 80045ae:	f043 0320 	orr.w	r3, r3, #32
 80045b2:	6413      	str	r3, [r2, #64]	; 0x40
 80045b4:	4b24      	ldr	r3, [pc, #144]	; (8004648 <HAL_TIM_Base_MspInit+0x2c0>)
 80045b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b8:	f003 0320 	and.w	r3, r3, #32
 80045bc:	617b      	str	r3, [r7, #20]
 80045be:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 80045c0:	2200      	movs	r2, #0
 80045c2:	2101      	movs	r1, #1
 80045c4:	2037      	movs	r0, #55	; 0x37
 80045c6:	f000 fc3a 	bl	8004e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80045ca:	2037      	movs	r0, #55	; 0x37
 80045cc:	f000 fc53 	bl	8004e76 <HAL_NVIC_EnableIRQ>
}
 80045d0:	e06d      	b.n	80046ae <HAL_TIM_Base_MspInit+0x326>
  else if(htim_base->Instance==TIM9)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a26      	ldr	r2, [pc, #152]	; (8004670 <HAL_TIM_Base_MspInit+0x2e8>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d14d      	bne.n	8004678 <HAL_TIM_Base_MspInit+0x2f0>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80045dc:	2300      	movs	r3, #0
 80045de:	613b      	str	r3, [r7, #16]
 80045e0:	4b19      	ldr	r3, [pc, #100]	; (8004648 <HAL_TIM_Base_MspInit+0x2c0>)
 80045e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e4:	4a18      	ldr	r2, [pc, #96]	; (8004648 <HAL_TIM_Base_MspInit+0x2c0>)
 80045e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045ea:	6453      	str	r3, [r2, #68]	; 0x44
 80045ec:	4b16      	ldr	r3, [pc, #88]	; (8004648 <HAL_TIM_Base_MspInit+0x2c0>)
 80045ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045f4:	613b      	str	r3, [r7, #16]
 80045f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80045f8:	2300      	movs	r3, #0
 80045fa:	60fb      	str	r3, [r7, #12]
 80045fc:	4b12      	ldr	r3, [pc, #72]	; (8004648 <HAL_TIM_Base_MspInit+0x2c0>)
 80045fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004600:	4a11      	ldr	r2, [pc, #68]	; (8004648 <HAL_TIM_Base_MspInit+0x2c0>)
 8004602:	f043 0310 	orr.w	r3, r3, #16
 8004606:	6313      	str	r3, [r2, #48]	; 0x30
 8004608:	4b0f      	ldr	r3, [pc, #60]	; (8004648 <HAL_TIM_Base_MspInit+0x2c0>)
 800460a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460c:	f003 0310 	and.w	r3, r3, #16
 8004610:	60fb      	str	r3, [r7, #12]
 8004612:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004614:	2340      	movs	r3, #64	; 0x40
 8004616:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004618:	2302      	movs	r3, #2
 800461a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800461c:	2300      	movs	r3, #0
 800461e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004620:	2300      	movs	r3, #0
 8004622:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8004624:	2303      	movs	r3, #3
 8004626:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004628:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800462c:	4619      	mov	r1, r3
 800462e:	4811      	ldr	r0, [pc, #68]	; (8004674 <HAL_TIM_Base_MspInit+0x2ec>)
 8004630:	f000 ffaa 	bl	8005588 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8004634:	2200      	movs	r2, #0
 8004636:	2100      	movs	r1, #0
 8004638:	2018      	movs	r0, #24
 800463a:	f000 fc00 	bl	8004e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800463e:	2018      	movs	r0, #24
 8004640:	f000 fc19 	bl	8004e76 <HAL_NVIC_EnableIRQ>
}
 8004644:	e033      	b.n	80046ae <HAL_TIM_Base_MspInit+0x326>
 8004646:	bf00      	nop
 8004648:	40023800 	.word	0x40023800
 800464c:	40000400 	.word	0x40000400
 8004650:	40020800 	.word	0x40020800
 8004654:	40020400 	.word	0x40020400
 8004658:	40000800 	.word	0x40000800
 800465c:	40020c00 	.word	0x40020c00
 8004660:	40000c00 	.word	0x40000c00
 8004664:	40020000 	.word	0x40020000
 8004668:	40001000 	.word	0x40001000
 800466c:	40001400 	.word	0x40001400
 8004670:	40014000 	.word	0x40014000
 8004674:	40021000 	.word	0x40021000
  else if(htim_base->Instance==TIM10)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a0e      	ldr	r2, [pc, #56]	; (80046b8 <HAL_TIM_Base_MspInit+0x330>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d115      	bne.n	80046ae <HAL_TIM_Base_MspInit+0x326>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004682:	2300      	movs	r3, #0
 8004684:	60bb      	str	r3, [r7, #8]
 8004686:	4b0d      	ldr	r3, [pc, #52]	; (80046bc <HAL_TIM_Base_MspInit+0x334>)
 8004688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800468a:	4a0c      	ldr	r2, [pc, #48]	; (80046bc <HAL_TIM_Base_MspInit+0x334>)
 800468c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004690:	6453      	str	r3, [r2, #68]	; 0x44
 8004692:	4b0a      	ldr	r3, [pc, #40]	; (80046bc <HAL_TIM_Base_MspInit+0x334>)
 8004694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800469a:	60bb      	str	r3, [r7, #8]
 800469c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 2, 0);
 800469e:	2200      	movs	r2, #0
 80046a0:	2102      	movs	r1, #2
 80046a2:	2019      	movs	r0, #25
 80046a4:	f000 fbcb 	bl	8004e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80046a8:	2019      	movs	r0, #25
 80046aa:	f000 fbe4 	bl	8004e76 <HAL_NVIC_EnableIRQ>
}
 80046ae:	bf00      	nop
 80046b0:	3750      	adds	r7, #80	; 0x50
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	40014400 	.word	0x40014400
 80046bc:	40023800 	.word	0x40023800

080046c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b088      	sub	sp, #32
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046c8:	f107 030c 	add.w	r3, r7, #12
 80046cc:	2200      	movs	r2, #0
 80046ce:	601a      	str	r2, [r3, #0]
 80046d0:	605a      	str	r2, [r3, #4]
 80046d2:	609a      	str	r2, [r3, #8]
 80046d4:	60da      	str	r2, [r3, #12]
 80046d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046e0:	d11e      	bne.n	8004720 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046e2:	2300      	movs	r3, #0
 80046e4:	60bb      	str	r3, [r7, #8]
 80046e6:	4b10      	ldr	r3, [pc, #64]	; (8004728 <HAL_TIM_MspPostInit+0x68>)
 80046e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ea:	4a0f      	ldr	r2, [pc, #60]	; (8004728 <HAL_TIM_MspPostInit+0x68>)
 80046ec:	f043 0301 	orr.w	r3, r3, #1
 80046f0:	6313      	str	r3, [r2, #48]	; 0x30
 80046f2:	4b0d      	ldr	r3, [pc, #52]	; (8004728 <HAL_TIM_MspPostInit+0x68>)
 80046f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	60bb      	str	r3, [r7, #8]
 80046fc:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 80046fe:	f248 030e 	movw	r3, #32782	; 0x800e
 8004702:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004704:	2302      	movs	r3, #2
 8004706:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004708:	2300      	movs	r3, #0
 800470a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800470c:	2300      	movs	r3, #0
 800470e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004710:	2301      	movs	r3, #1
 8004712:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004714:	f107 030c 	add.w	r3, r7, #12
 8004718:	4619      	mov	r1, r3
 800471a:	4804      	ldr	r0, [pc, #16]	; (800472c <HAL_TIM_MspPostInit+0x6c>)
 800471c:	f000 ff34 	bl	8005588 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004720:	bf00      	nop
 8004722:	3720      	adds	r7, #32
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	40023800 	.word	0x40023800
 800472c:	40020000 	.word	0x40020000

08004730 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b08e      	sub	sp, #56	; 0x38
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004738:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800473c:	2200      	movs	r2, #0
 800473e:	601a      	str	r2, [r3, #0]
 8004740:	605a      	str	r2, [r3, #4]
 8004742:	609a      	str	r2, [r3, #8]
 8004744:	60da      	str	r2, [r3, #12]
 8004746:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a7b      	ldr	r2, [pc, #492]	; (800493c <HAL_UART_MspInit+0x20c>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d12d      	bne.n	80047ae <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004752:	2300      	movs	r3, #0
 8004754:	623b      	str	r3, [r7, #32]
 8004756:	4b7a      	ldr	r3, [pc, #488]	; (8004940 <HAL_UART_MspInit+0x210>)
 8004758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800475a:	4a79      	ldr	r2, [pc, #484]	; (8004940 <HAL_UART_MspInit+0x210>)
 800475c:	f043 0310 	orr.w	r3, r3, #16
 8004760:	6453      	str	r3, [r2, #68]	; 0x44
 8004762:	4b77      	ldr	r3, [pc, #476]	; (8004940 <HAL_UART_MspInit+0x210>)
 8004764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004766:	f003 0310 	and.w	r3, r3, #16
 800476a:	623b      	str	r3, [r7, #32]
 800476c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800476e:	2300      	movs	r3, #0
 8004770:	61fb      	str	r3, [r7, #28]
 8004772:	4b73      	ldr	r3, [pc, #460]	; (8004940 <HAL_UART_MspInit+0x210>)
 8004774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004776:	4a72      	ldr	r2, [pc, #456]	; (8004940 <HAL_UART_MspInit+0x210>)
 8004778:	f043 0301 	orr.w	r3, r3, #1
 800477c:	6313      	str	r3, [r2, #48]	; 0x30
 800477e:	4b70      	ldr	r3, [pc, #448]	; (8004940 <HAL_UART_MspInit+0x210>)
 8004780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	61fb      	str	r3, [r7, #28]
 8004788:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800478a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800478e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004790:	2302      	movs	r3, #2
 8004792:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004794:	2300      	movs	r3, #0
 8004796:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004798:	2303      	movs	r3, #3
 800479a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800479c:	2307      	movs	r3, #7
 800479e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047a4:	4619      	mov	r1, r3
 80047a6:	4867      	ldr	r0, [pc, #412]	; (8004944 <HAL_UART_MspInit+0x214>)
 80047a8:	f000 feee 	bl	8005588 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80047ac:	e0c1      	b.n	8004932 <HAL_UART_MspInit+0x202>
  else if(huart->Instance==USART2)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a65      	ldr	r2, [pc, #404]	; (8004948 <HAL_UART_MspInit+0x218>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d15b      	bne.n	8004870 <HAL_UART_MspInit+0x140>
    __HAL_RCC_USART2_CLK_ENABLE();
 80047b8:	2300      	movs	r3, #0
 80047ba:	61bb      	str	r3, [r7, #24]
 80047bc:	4b60      	ldr	r3, [pc, #384]	; (8004940 <HAL_UART_MspInit+0x210>)
 80047be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c0:	4a5f      	ldr	r2, [pc, #380]	; (8004940 <HAL_UART_MspInit+0x210>)
 80047c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047c6:	6413      	str	r3, [r2, #64]	; 0x40
 80047c8:	4b5d      	ldr	r3, [pc, #372]	; (8004940 <HAL_UART_MspInit+0x210>)
 80047ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047d0:	61bb      	str	r3, [r7, #24]
 80047d2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80047d4:	2300      	movs	r3, #0
 80047d6:	617b      	str	r3, [r7, #20]
 80047d8:	4b59      	ldr	r3, [pc, #356]	; (8004940 <HAL_UART_MspInit+0x210>)
 80047da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047dc:	4a58      	ldr	r2, [pc, #352]	; (8004940 <HAL_UART_MspInit+0x210>)
 80047de:	f043 0308 	orr.w	r3, r3, #8
 80047e2:	6313      	str	r3, [r2, #48]	; 0x30
 80047e4:	4b56      	ldr	r3, [pc, #344]	; (8004940 <HAL_UART_MspInit+0x210>)
 80047e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e8:	f003 0308 	and.w	r3, r3, #8
 80047ec:	617b      	str	r3, [r7, #20]
 80047ee:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80047f0:	2360      	movs	r3, #96	; 0x60
 80047f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047f4:	2302      	movs	r3, #2
 80047f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047f8:	2300      	movs	r3, #0
 80047fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047fc:	2303      	movs	r3, #3
 80047fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004800:	2307      	movs	r3, #7
 8004802:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004804:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004808:	4619      	mov	r1, r3
 800480a:	4850      	ldr	r0, [pc, #320]	; (800494c <HAL_UART_MspInit+0x21c>)
 800480c:	f000 febc 	bl	8005588 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004810:	4b4f      	ldr	r3, [pc, #316]	; (8004950 <HAL_UART_MspInit+0x220>)
 8004812:	4a50      	ldr	r2, [pc, #320]	; (8004954 <HAL_UART_MspInit+0x224>)
 8004814:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8004816:	4b4e      	ldr	r3, [pc, #312]	; (8004950 <HAL_UART_MspInit+0x220>)
 8004818:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800481c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800481e:	4b4c      	ldr	r3, [pc, #304]	; (8004950 <HAL_UART_MspInit+0x220>)
 8004820:	2200      	movs	r2, #0
 8004822:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004824:	4b4a      	ldr	r3, [pc, #296]	; (8004950 <HAL_UART_MspInit+0x220>)
 8004826:	2200      	movs	r2, #0
 8004828:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800482a:	4b49      	ldr	r3, [pc, #292]	; (8004950 <HAL_UART_MspInit+0x220>)
 800482c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004830:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004832:	4b47      	ldr	r3, [pc, #284]	; (8004950 <HAL_UART_MspInit+0x220>)
 8004834:	2200      	movs	r2, #0
 8004836:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004838:	4b45      	ldr	r3, [pc, #276]	; (8004950 <HAL_UART_MspInit+0x220>)
 800483a:	2200      	movs	r2, #0
 800483c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800483e:	4b44      	ldr	r3, [pc, #272]	; (8004950 <HAL_UART_MspInit+0x220>)
 8004840:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004844:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004846:	4b42      	ldr	r3, [pc, #264]	; (8004950 <HAL_UART_MspInit+0x220>)
 8004848:	2200      	movs	r2, #0
 800484a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800484c:	4b40      	ldr	r3, [pc, #256]	; (8004950 <HAL_UART_MspInit+0x220>)
 800484e:	2200      	movs	r2, #0
 8004850:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004852:	483f      	ldr	r0, [pc, #252]	; (8004950 <HAL_UART_MspInit+0x220>)
 8004854:	f000 fb2a 	bl	8004eac <HAL_DMA_Init>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d001      	beq.n	8004862 <HAL_UART_MspInit+0x132>
      Error_Handler();
 800485e:	f7ff f81f 	bl	80038a0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a3a      	ldr	r2, [pc, #232]	; (8004950 <HAL_UART_MspInit+0x220>)
 8004866:	635a      	str	r2, [r3, #52]	; 0x34
 8004868:	4a39      	ldr	r2, [pc, #228]	; (8004950 <HAL_UART_MspInit+0x220>)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800486e:	e060      	b.n	8004932 <HAL_UART_MspInit+0x202>
  else if(huart->Instance==USART3)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a38      	ldr	r2, [pc, #224]	; (8004958 <HAL_UART_MspInit+0x228>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d15b      	bne.n	8004932 <HAL_UART_MspInit+0x202>
    __HAL_RCC_USART3_CLK_ENABLE();
 800487a:	2300      	movs	r3, #0
 800487c:	613b      	str	r3, [r7, #16]
 800487e:	4b30      	ldr	r3, [pc, #192]	; (8004940 <HAL_UART_MspInit+0x210>)
 8004880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004882:	4a2f      	ldr	r2, [pc, #188]	; (8004940 <HAL_UART_MspInit+0x210>)
 8004884:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004888:	6413      	str	r3, [r2, #64]	; 0x40
 800488a:	4b2d      	ldr	r3, [pc, #180]	; (8004940 <HAL_UART_MspInit+0x210>)
 800488c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004892:	613b      	str	r3, [r7, #16]
 8004894:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004896:	2300      	movs	r3, #0
 8004898:	60fb      	str	r3, [r7, #12]
 800489a:	4b29      	ldr	r3, [pc, #164]	; (8004940 <HAL_UART_MspInit+0x210>)
 800489c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489e:	4a28      	ldr	r2, [pc, #160]	; (8004940 <HAL_UART_MspInit+0x210>)
 80048a0:	f043 0304 	orr.w	r3, r3, #4
 80048a4:	6313      	str	r3, [r2, #48]	; 0x30
 80048a6:	4b26      	ldr	r3, [pc, #152]	; (8004940 <HAL_UART_MspInit+0x210>)
 80048a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048aa:	f003 0304 	and.w	r3, r3, #4
 80048ae:	60fb      	str	r3, [r7, #12]
 80048b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80048b2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80048b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048b8:	2302      	movs	r3, #2
 80048ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048bc:	2300      	movs	r3, #0
 80048be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048c0:	2303      	movs	r3, #3
 80048c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80048c4:	2307      	movs	r3, #7
 80048c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048cc:	4619      	mov	r1, r3
 80048ce:	4823      	ldr	r0, [pc, #140]	; (800495c <HAL_UART_MspInit+0x22c>)
 80048d0:	f000 fe5a 	bl	8005588 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80048d4:	4b22      	ldr	r3, [pc, #136]	; (8004960 <HAL_UART_MspInit+0x230>)
 80048d6:	4a23      	ldr	r2, [pc, #140]	; (8004964 <HAL_UART_MspInit+0x234>)
 80048d8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80048da:	4b21      	ldr	r3, [pc, #132]	; (8004960 <HAL_UART_MspInit+0x230>)
 80048dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80048e0:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80048e2:	4b1f      	ldr	r3, [pc, #124]	; (8004960 <HAL_UART_MspInit+0x230>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80048e8:	4b1d      	ldr	r3, [pc, #116]	; (8004960 <HAL_UART_MspInit+0x230>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80048ee:	4b1c      	ldr	r3, [pc, #112]	; (8004960 <HAL_UART_MspInit+0x230>)
 80048f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80048f4:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80048f6:	4b1a      	ldr	r3, [pc, #104]	; (8004960 <HAL_UART_MspInit+0x230>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80048fc:	4b18      	ldr	r3, [pc, #96]	; (8004960 <HAL_UART_MspInit+0x230>)
 80048fe:	2200      	movs	r2, #0
 8004900:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8004902:	4b17      	ldr	r3, [pc, #92]	; (8004960 <HAL_UART_MspInit+0x230>)
 8004904:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004908:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800490a:	4b15      	ldr	r3, [pc, #84]	; (8004960 <HAL_UART_MspInit+0x230>)
 800490c:	2200      	movs	r2, #0
 800490e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004910:	4b13      	ldr	r3, [pc, #76]	; (8004960 <HAL_UART_MspInit+0x230>)
 8004912:	2200      	movs	r2, #0
 8004914:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004916:	4812      	ldr	r0, [pc, #72]	; (8004960 <HAL_UART_MspInit+0x230>)
 8004918:	f000 fac8 	bl	8004eac <HAL_DMA_Init>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d001      	beq.n	8004926 <HAL_UART_MspInit+0x1f6>
      Error_Handler();
 8004922:	f7fe ffbd 	bl	80038a0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a0d      	ldr	r2, [pc, #52]	; (8004960 <HAL_UART_MspInit+0x230>)
 800492a:	635a      	str	r2, [r3, #52]	; 0x34
 800492c:	4a0c      	ldr	r2, [pc, #48]	; (8004960 <HAL_UART_MspInit+0x230>)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6393      	str	r3, [r2, #56]	; 0x38
}
 8004932:	bf00      	nop
 8004934:	3738      	adds	r7, #56	; 0x38
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	40011000 	.word	0x40011000
 8004940:	40023800 	.word	0x40023800
 8004944:	40020000 	.word	0x40020000
 8004948:	40004400 	.word	0x40004400
 800494c:	40020c00 	.word	0x40020c00
 8004950:	20000258 	.word	0x20000258
 8004954:	40026088 	.word	0x40026088
 8004958:	40004800 	.word	0x40004800
 800495c:	40020800 	.word	0x40020800
 8004960:	2000034c 	.word	0x2000034c
 8004964:	40026028 	.word	0x40026028

08004968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004968:	b480      	push	{r7}
 800496a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800496c:	bf00      	nop
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr

08004976 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004976:	b480      	push	{r7}
 8004978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800497a:	e7fe      	b.n	800497a <HardFault_Handler+0x4>

0800497c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800497c:	b480      	push	{r7}
 800497e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004980:	e7fe      	b.n	8004980 <MemManage_Handler+0x4>

08004982 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004982:	b480      	push	{r7}
 8004984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004986:	e7fe      	b.n	8004986 <BusFault_Handler+0x4>

08004988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004988:	b480      	push	{r7}
 800498a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800498c:	e7fe      	b.n	800498c <UsageFault_Handler+0x4>

0800498e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800498e:	b480      	push	{r7}
 8004990:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004992:	bf00      	nop
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800499c:	b480      	push	{r7}
 800499e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80049a0:	bf00      	nop
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr

080049aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80049aa:	b480      	push	{r7}
 80049ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80049ae:	bf00      	nop
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	HAL_IncTick();
 80049bc:	f000 f922 	bl	8004c04 <HAL_IncTick>
  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80049c0:	bf00      	nop
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80049c8:	2008      	movs	r0, #8
 80049ca:	f000 ff77 	bl	80058bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80049ce:	bf00      	nop
 80049d0:	bd80      	pop	{r7, pc}
	...

080049d4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80049d8:	4802      	ldr	r0, [pc, #8]	; (80049e4 <DMA1_Stream1_IRQHandler+0x10>)
 80049da:	f000 fb6d 	bl	80050b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80049de:	bf00      	nop
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	2000034c 	.word	0x2000034c

080049e8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80049ec:	4802      	ldr	r0, [pc, #8]	; (80049f8 <DMA1_Stream5_IRQHandler+0x10>)
 80049ee:	f000 fb63 	bl	80050b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80049f2:	bf00      	nop
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	20000258 	.word	0x20000258

080049fc <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8004a00:	4802      	ldr	r0, [pc, #8]	; (8004a0c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8004a02:	f003 f9a5 	bl	8007d50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8004a06:	bf00      	nop
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	20000b60 	.word	0x20000b60

08004a10 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8004a14:	4802      	ldr	r0, [pc, #8]	; (8004a20 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004a16:	f003 f99b 	bl	8007d50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004a1a:	bf00      	nop
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	20000460 	.word	0x20000460

08004a24 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004a28:	4802      	ldr	r0, [pc, #8]	; (8004a34 <TIM2_IRQHandler+0x10>)
 8004a2a:	f003 f991 	bl	8007d50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004a2e:	bf00      	nop
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	20000bc4 	.word	0x20000bc4

08004a38 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004a3c:	4802      	ldr	r0, [pc, #8]	; (8004a48 <TIM3_IRQHandler+0x10>)
 8004a3e:	f003 f987 	bl	8007d50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004a42:	bf00      	nop
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	20000734 	.word	0x20000734

08004a4c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004a50:	4802      	ldr	r0, [pc, #8]	; (8004a5c <TIM4_IRQHandler+0x10>)
 8004a52:	f003 f97d 	bl	8007d50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004a56:	bf00      	nop
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	2000030c 	.word	0x2000030c

08004a60 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004a64:	4802      	ldr	r0, [pc, #8]	; (8004a70 <TIM5_IRQHandler+0x10>)
 8004a66:	f003 f973 	bl	8007d50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004a6a:	bf00      	nop
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	200006d8 	.word	0x200006d8

08004a74 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004a78:	4802      	ldr	r0, [pc, #8]	; (8004a84 <TIM7_IRQHandler+0x10>)
 8004a7a:	f003 f969 	bl	8007d50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004a7e:	bf00      	nop
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	20000ca4 	.word	0x20000ca4

08004a88 <_sbrk>:
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	4b11      	ldr	r3, [pc, #68]	; (8004ad8 <_sbrk+0x50>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d102      	bne.n	8004a9e <_sbrk+0x16>
 8004a98:	4b0f      	ldr	r3, [pc, #60]	; (8004ad8 <_sbrk+0x50>)
 8004a9a:	4a10      	ldr	r2, [pc, #64]	; (8004adc <_sbrk+0x54>)
 8004a9c:	601a      	str	r2, [r3, #0]
 8004a9e:	4b0e      	ldr	r3, [pc, #56]	; (8004ad8 <_sbrk+0x50>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	60fb      	str	r3, [r7, #12]
 8004aa4:	4b0c      	ldr	r3, [pc, #48]	; (8004ad8 <_sbrk+0x50>)
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4413      	add	r3, r2
 8004aac:	466a      	mov	r2, sp
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d907      	bls.n	8004ac2 <_sbrk+0x3a>
 8004ab2:	f004 ff9b 	bl	80099ec <__errno>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	230c      	movs	r3, #12
 8004aba:	6013      	str	r3, [r2, #0]
 8004abc:	f04f 33ff 	mov.w	r3, #4294967295
 8004ac0:	e006      	b.n	8004ad0 <_sbrk+0x48>
 8004ac2:	4b05      	ldr	r3, [pc, #20]	; (8004ad8 <_sbrk+0x50>)
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4413      	add	r3, r2
 8004aca:	4a03      	ldr	r2, [pc, #12]	; (8004ad8 <_sbrk+0x50>)
 8004acc:	6013      	str	r3, [r2, #0]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3710      	adds	r7, #16
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	2000021c 	.word	0x2000021c
 8004adc:	20000d48 	.word	0x20000d48

08004ae0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004ae4:	4b08      	ldr	r3, [pc, #32]	; (8004b08 <SystemInit+0x28>)
 8004ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aea:	4a07      	ldr	r2, [pc, #28]	; (8004b08 <SystemInit+0x28>)
 8004aec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004af0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004af4:	4b04      	ldr	r3, [pc, #16]	; (8004b08 <SystemInit+0x28>)
 8004af6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004afa:	609a      	str	r2, [r3, #8]
#endif
}
 8004afc:	bf00      	nop
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	e000ed00 	.word	0xe000ed00

08004b0c <Reset_Handler>:
 8004b0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004b44 <LoopFillZerobss+0x14>
 8004b10:	2100      	movs	r1, #0
 8004b12:	e003      	b.n	8004b1c <LoopCopyDataInit>

08004b14 <CopyDataInit>:
 8004b14:	4b0c      	ldr	r3, [pc, #48]	; (8004b48 <LoopFillZerobss+0x18>)
 8004b16:	585b      	ldr	r3, [r3, r1]
 8004b18:	5043      	str	r3, [r0, r1]
 8004b1a:	3104      	adds	r1, #4

08004b1c <LoopCopyDataInit>:
 8004b1c:	480b      	ldr	r0, [pc, #44]	; (8004b4c <LoopFillZerobss+0x1c>)
 8004b1e:	4b0c      	ldr	r3, [pc, #48]	; (8004b50 <LoopFillZerobss+0x20>)
 8004b20:	1842      	adds	r2, r0, r1
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d3f6      	bcc.n	8004b14 <CopyDataInit>
 8004b26:	4a0b      	ldr	r2, [pc, #44]	; (8004b54 <LoopFillZerobss+0x24>)
 8004b28:	e002      	b.n	8004b30 <LoopFillZerobss>

08004b2a <FillZerobss>:
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	f842 3b04 	str.w	r3, [r2], #4

08004b30 <LoopFillZerobss>:
 8004b30:	4b09      	ldr	r3, [pc, #36]	; (8004b58 <LoopFillZerobss+0x28>)
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d3f9      	bcc.n	8004b2a <FillZerobss>
 8004b36:	f7ff ffd3 	bl	8004ae0 <SystemInit>
 8004b3a:	f004 ff5d 	bl	80099f8 <__libc_init_array>
 8004b3e:	f7fd f89b 	bl	8001c78 <main>
 8004b42:	4770      	bx	lr
 8004b44:	20020000 	.word	0x20020000
 8004b48:	0800d360 	.word	0x0800d360
 8004b4c:	20000000 	.word	0x20000000
 8004b50:	200001e0 	.word	0x200001e0
 8004b54:	200001e0 	.word	0x200001e0
 8004b58:	20000d48 	.word	0x20000d48

08004b5c <ADC_IRQHandler>:
 8004b5c:	e7fe      	b.n	8004b5c <ADC_IRQHandler>
	...

08004b60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004b64:	4b0e      	ldr	r3, [pc, #56]	; (8004ba0 <HAL_Init+0x40>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a0d      	ldr	r2, [pc, #52]	; (8004ba0 <HAL_Init+0x40>)
 8004b6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004b70:	4b0b      	ldr	r3, [pc, #44]	; (8004ba0 <HAL_Init+0x40>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a0a      	ldr	r2, [pc, #40]	; (8004ba0 <HAL_Init+0x40>)
 8004b76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b7c:	4b08      	ldr	r3, [pc, #32]	; (8004ba0 <HAL_Init+0x40>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a07      	ldr	r2, [pc, #28]	; (8004ba0 <HAL_Init+0x40>)
 8004b82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b88:	2003      	movs	r0, #3
 8004b8a:	f000 f94d 	bl	8004e28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004b8e:	2000      	movs	r0, #0
 8004b90:	f000 f808 	bl	8004ba4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004b94:	f7ff fb30 	bl	80041f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	40023c00 	.word	0x40023c00

08004ba4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004bac:	4b12      	ldr	r3, [pc, #72]	; (8004bf8 <HAL_InitTick+0x54>)
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	4b12      	ldr	r3, [pc, #72]	; (8004bfc <HAL_InitTick+0x58>)
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004bba:	fbb3 f3f1 	udiv	r3, r3, r1
 8004bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f000 f965 	bl	8004e92 <HAL_SYSTICK_Config>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d001      	beq.n	8004bd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e00e      	b.n	8004bf0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2b0f      	cmp	r3, #15
 8004bd6:	d80a      	bhi.n	8004bee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004bd8:	2200      	movs	r2, #0
 8004bda:	6879      	ldr	r1, [r7, #4]
 8004bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8004be0:	f000 f92d 	bl	8004e3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004be4:	4a06      	ldr	r2, [pc, #24]	; (8004c00 <HAL_InitTick+0x5c>)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
 8004bec:	e000      	b.n	8004bf0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3708      	adds	r7, #8
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	20000000 	.word	0x20000000
 8004bfc:	20000008 	.word	0x20000008
 8004c00:	20000004 	.word	0x20000004

08004c04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c04:	b480      	push	{r7}
 8004c06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004c08:	4b06      	ldr	r3, [pc, #24]	; (8004c24 <HAL_IncTick+0x20>)
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	4b06      	ldr	r3, [pc, #24]	; (8004c28 <HAL_IncTick+0x24>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4413      	add	r3, r2
 8004c14:	4a04      	ldr	r2, [pc, #16]	; (8004c28 <HAL_IncTick+0x24>)
 8004c16:	6013      	str	r3, [r2, #0]
}
 8004c18:	bf00      	nop
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	20000008 	.word	0x20000008
 8004c28:	20000d40 	.word	0x20000d40

08004c2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	af00      	add	r7, sp, #0
  return uwTick;
 8004c30:	4b03      	ldr	r3, [pc, #12]	; (8004c40 <HAL_GetTick+0x14>)
 8004c32:	681b      	ldr	r3, [r3, #0]
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop
 8004c40:	20000d40 	.word	0x20000d40

08004c44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004c4c:	f7ff ffee 	bl	8004c2c <HAL_GetTick>
 8004c50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c5c:	d005      	beq.n	8004c6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004c5e:	4b09      	ldr	r3, [pc, #36]	; (8004c84 <HAL_Delay+0x40>)
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	461a      	mov	r2, r3
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	4413      	add	r3, r2
 8004c68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004c6a:	bf00      	nop
 8004c6c:	f7ff ffde 	bl	8004c2c <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d8f7      	bhi.n	8004c6c <HAL_Delay+0x28>
  {
  }
}
 8004c7c:	bf00      	nop
 8004c7e:	3710      	adds	r7, #16
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	20000008 	.word	0x20000008

08004c88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b085      	sub	sp, #20
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f003 0307 	and.w	r3, r3, #7
 8004c96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c98:	4b0c      	ldr	r3, [pc, #48]	; (8004ccc <__NVIC_SetPriorityGrouping+0x44>)
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c9e:	68ba      	ldr	r2, [r7, #8]
 8004ca0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004cb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004cba:	4a04      	ldr	r2, [pc, #16]	; (8004ccc <__NVIC_SetPriorityGrouping+0x44>)
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	60d3      	str	r3, [r2, #12]
}
 8004cc0:	bf00      	nop
 8004cc2:	3714      	adds	r7, #20
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr
 8004ccc:	e000ed00 	.word	0xe000ed00

08004cd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004cd4:	4b04      	ldr	r3, [pc, #16]	; (8004ce8 <__NVIC_GetPriorityGrouping+0x18>)
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	0a1b      	lsrs	r3, r3, #8
 8004cda:	f003 0307 	and.w	r3, r3, #7
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr
 8004ce8:	e000ed00 	.word	0xe000ed00

08004cec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	db0b      	blt.n	8004d16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004cfe:	79fb      	ldrb	r3, [r7, #7]
 8004d00:	f003 021f 	and.w	r2, r3, #31
 8004d04:	4907      	ldr	r1, [pc, #28]	; (8004d24 <__NVIC_EnableIRQ+0x38>)
 8004d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d0a:	095b      	lsrs	r3, r3, #5
 8004d0c:	2001      	movs	r0, #1
 8004d0e:	fa00 f202 	lsl.w	r2, r0, r2
 8004d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004d16:	bf00      	nop
 8004d18:	370c      	adds	r7, #12
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr
 8004d22:	bf00      	nop
 8004d24:	e000e100 	.word	0xe000e100

08004d28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	4603      	mov	r3, r0
 8004d30:	6039      	str	r1, [r7, #0]
 8004d32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	db0a      	blt.n	8004d52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	b2da      	uxtb	r2, r3
 8004d40:	490c      	ldr	r1, [pc, #48]	; (8004d74 <__NVIC_SetPriority+0x4c>)
 8004d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d46:	0112      	lsls	r2, r2, #4
 8004d48:	b2d2      	uxtb	r2, r2
 8004d4a:	440b      	add	r3, r1
 8004d4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d50:	e00a      	b.n	8004d68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	b2da      	uxtb	r2, r3
 8004d56:	4908      	ldr	r1, [pc, #32]	; (8004d78 <__NVIC_SetPriority+0x50>)
 8004d58:	79fb      	ldrb	r3, [r7, #7]
 8004d5a:	f003 030f 	and.w	r3, r3, #15
 8004d5e:	3b04      	subs	r3, #4
 8004d60:	0112      	lsls	r2, r2, #4
 8004d62:	b2d2      	uxtb	r2, r2
 8004d64:	440b      	add	r3, r1
 8004d66:	761a      	strb	r2, [r3, #24]
}
 8004d68:	bf00      	nop
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr
 8004d74:	e000e100 	.word	0xe000e100
 8004d78:	e000ed00 	.word	0xe000ed00

08004d7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b089      	sub	sp, #36	; 0x24
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f003 0307 	and.w	r3, r3, #7
 8004d8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	f1c3 0307 	rsb	r3, r3, #7
 8004d96:	2b04      	cmp	r3, #4
 8004d98:	bf28      	it	cs
 8004d9a:	2304      	movcs	r3, #4
 8004d9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	3304      	adds	r3, #4
 8004da2:	2b06      	cmp	r3, #6
 8004da4:	d902      	bls.n	8004dac <NVIC_EncodePriority+0x30>
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	3b03      	subs	r3, #3
 8004daa:	e000      	b.n	8004dae <NVIC_EncodePriority+0x32>
 8004dac:	2300      	movs	r3, #0
 8004dae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004db0:	f04f 32ff 	mov.w	r2, #4294967295
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dba:	43da      	mvns	r2, r3
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	401a      	ands	r2, r3
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004dc4:	f04f 31ff 	mov.w	r1, #4294967295
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	fa01 f303 	lsl.w	r3, r1, r3
 8004dce:	43d9      	mvns	r1, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004dd4:	4313      	orrs	r3, r2
         );
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3724      	adds	r7, #36	; 0x24
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
	...

08004de4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	3b01      	subs	r3, #1
 8004df0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004df4:	d301      	bcc.n	8004dfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004df6:	2301      	movs	r3, #1
 8004df8:	e00f      	b.n	8004e1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004dfa:	4a0a      	ldr	r2, [pc, #40]	; (8004e24 <SysTick_Config+0x40>)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e02:	210f      	movs	r1, #15
 8004e04:	f04f 30ff 	mov.w	r0, #4294967295
 8004e08:	f7ff ff8e 	bl	8004d28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e0c:	4b05      	ldr	r3, [pc, #20]	; (8004e24 <SysTick_Config+0x40>)
 8004e0e:	2200      	movs	r2, #0
 8004e10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e12:	4b04      	ldr	r3, [pc, #16]	; (8004e24 <SysTick_Config+0x40>)
 8004e14:	2207      	movs	r2, #7
 8004e16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3708      	adds	r7, #8
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	e000e010 	.word	0xe000e010

08004e28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f7ff ff29 	bl	8004c88 <__NVIC_SetPriorityGrouping>
}
 8004e36:	bf00      	nop
 8004e38:	3708      	adds	r7, #8
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b086      	sub	sp, #24
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	4603      	mov	r3, r0
 8004e46:	60b9      	str	r1, [r7, #8]
 8004e48:	607a      	str	r2, [r7, #4]
 8004e4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004e50:	f7ff ff3e 	bl	8004cd0 <__NVIC_GetPriorityGrouping>
 8004e54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	68b9      	ldr	r1, [r7, #8]
 8004e5a:	6978      	ldr	r0, [r7, #20]
 8004e5c:	f7ff ff8e 	bl	8004d7c <NVIC_EncodePriority>
 8004e60:	4602      	mov	r2, r0
 8004e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e66:	4611      	mov	r1, r2
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f7ff ff5d 	bl	8004d28 <__NVIC_SetPriority>
}
 8004e6e:	bf00      	nop
 8004e70:	3718      	adds	r7, #24
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}

08004e76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e76:	b580      	push	{r7, lr}
 8004e78:	b082      	sub	sp, #8
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e84:	4618      	mov	r0, r3
 8004e86:	f7ff ff31 	bl	8004cec <__NVIC_EnableIRQ>
}
 8004e8a:	bf00      	nop
 8004e8c:	3708      	adds	r7, #8
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}

08004e92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e92:	b580      	push	{r7, lr}
 8004e94:	b082      	sub	sp, #8
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f7ff ffa2 	bl	8004de4 <SysTick_Config>
 8004ea0:	4603      	mov	r3, r0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3708      	adds	r7, #8
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
	...

08004eac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b086      	sub	sp, #24
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004eb8:	f7ff feb8 	bl	8004c2c <HAL_GetTick>
 8004ebc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d101      	bne.n	8004ec8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e099      	b.n	8004ffc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2202      	movs	r2, #2
 8004ed4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f022 0201 	bic.w	r2, r2, #1
 8004ee6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ee8:	e00f      	b.n	8004f0a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004eea:	f7ff fe9f 	bl	8004c2c <HAL_GetTick>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	2b05      	cmp	r3, #5
 8004ef6:	d908      	bls.n	8004f0a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2220      	movs	r2, #32
 8004efc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2203      	movs	r2, #3
 8004f02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e078      	b.n	8004ffc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0301 	and.w	r3, r3, #1
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d1e8      	bne.n	8004eea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004f20:	697a      	ldr	r2, [r7, #20]
 8004f22:	4b38      	ldr	r3, [pc, #224]	; (8005004 <HAL_DMA_Init+0x158>)
 8004f24:	4013      	ands	r3, r2
 8004f26:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	685a      	ldr	r2, [r3, #4]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f36:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	699b      	ldr	r3, [r3, #24]
 8004f48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a1b      	ldr	r3, [r3, #32]
 8004f54:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f56:	697a      	ldr	r2, [r7, #20]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f60:	2b04      	cmp	r3, #4
 8004f62:	d107      	bne.n	8004f74 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	697a      	ldr	r2, [r7, #20]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	697a      	ldr	r2, [r7, #20]
 8004f7a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	695b      	ldr	r3, [r3, #20]
 8004f82:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	f023 0307 	bic.w	r3, r3, #7
 8004f8a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f90:	697a      	ldr	r2, [r7, #20]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9a:	2b04      	cmp	r3, #4
 8004f9c:	d117      	bne.n	8004fce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d00e      	beq.n	8004fce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 fa6f 	bl	8005494 <DMA_CheckFifoParam>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d008      	beq.n	8004fce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2240      	movs	r2, #64	; 0x40
 8004fc0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e016      	b.n	8004ffc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	697a      	ldr	r2, [r7, #20]
 8004fd4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 fa26 	bl	8005428 <DMA_CalcBaseAndBitshift>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fe4:	223f      	movs	r2, #63	; 0x3f
 8004fe6:	409a      	lsls	r2, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3718      	adds	r7, #24
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	f010803f 	.word	0xf010803f

08005008 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b086      	sub	sp, #24
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	607a      	str	r2, [r7, #4]
 8005014:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005016:	2300      	movs	r3, #0
 8005018:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800501e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005026:	2b01      	cmp	r3, #1
 8005028:	d101      	bne.n	800502e <HAL_DMA_Start_IT+0x26>
 800502a:	2302      	movs	r3, #2
 800502c:	e040      	b.n	80050b0 <HAL_DMA_Start_IT+0xa8>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2201      	movs	r2, #1
 8005032:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800503c:	b2db      	uxtb	r3, r3
 800503e:	2b01      	cmp	r3, #1
 8005040:	d12f      	bne.n	80050a2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2202      	movs	r2, #2
 8005046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2200      	movs	r2, #0
 800504e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	68b9      	ldr	r1, [r7, #8]
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	f000 f9b8 	bl	80053cc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005060:	223f      	movs	r2, #63	; 0x3f
 8005062:	409a      	lsls	r2, r3
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f042 0216 	orr.w	r2, r2, #22
 8005076:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507c:	2b00      	cmp	r3, #0
 800507e:	d007      	beq.n	8005090 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f042 0208 	orr.w	r2, r2, #8
 800508e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f042 0201 	orr.w	r2, r2, #1
 800509e:	601a      	str	r2, [r3, #0]
 80050a0:	e005      	b.n	80050ae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80050aa:	2302      	movs	r3, #2
 80050ac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80050ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3718      	adds	r7, #24
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b086      	sub	sp, #24
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80050c0:	2300      	movs	r3, #0
 80050c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80050c4:	4b92      	ldr	r3, [pc, #584]	; (8005310 <HAL_DMA_IRQHandler+0x258>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a92      	ldr	r2, [pc, #584]	; (8005314 <HAL_DMA_IRQHandler+0x25c>)
 80050ca:	fba2 2303 	umull	r2, r3, r2, r3
 80050ce:	0a9b      	lsrs	r3, r3, #10
 80050d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050e2:	2208      	movs	r2, #8
 80050e4:	409a      	lsls	r2, r3
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	4013      	ands	r3, r2
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d01a      	beq.n	8005124 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0304 	and.w	r3, r3, #4
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d013      	beq.n	8005124 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f022 0204 	bic.w	r2, r2, #4
 800510a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005110:	2208      	movs	r2, #8
 8005112:	409a      	lsls	r2, r3
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800511c:	f043 0201 	orr.w	r2, r3, #1
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005128:	2201      	movs	r2, #1
 800512a:	409a      	lsls	r2, r3
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	4013      	ands	r3, r2
 8005130:	2b00      	cmp	r3, #0
 8005132:	d012      	beq.n	800515a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	695b      	ldr	r3, [r3, #20]
 800513a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00b      	beq.n	800515a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005146:	2201      	movs	r2, #1
 8005148:	409a      	lsls	r2, r3
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005152:	f043 0202 	orr.w	r2, r3, #2
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800515e:	2204      	movs	r2, #4
 8005160:	409a      	lsls	r2, r3
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	4013      	ands	r3, r2
 8005166:	2b00      	cmp	r3, #0
 8005168:	d012      	beq.n	8005190 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0302 	and.w	r3, r3, #2
 8005174:	2b00      	cmp	r3, #0
 8005176:	d00b      	beq.n	8005190 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800517c:	2204      	movs	r2, #4
 800517e:	409a      	lsls	r2, r3
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005188:	f043 0204 	orr.w	r2, r3, #4
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005194:	2210      	movs	r2, #16
 8005196:	409a      	lsls	r2, r3
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	4013      	ands	r3, r2
 800519c:	2b00      	cmp	r3, #0
 800519e:	d043      	beq.n	8005228 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0308 	and.w	r3, r3, #8
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d03c      	beq.n	8005228 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051b2:	2210      	movs	r2, #16
 80051b4:	409a      	lsls	r2, r3
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d018      	beq.n	80051fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d108      	bne.n	80051e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d024      	beq.n	8005228 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	4798      	blx	r3
 80051e6:	e01f      	b.n	8005228 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d01b      	beq.n	8005228 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	4798      	blx	r3
 80051f8:	e016      	b.n	8005228 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005204:	2b00      	cmp	r3, #0
 8005206:	d107      	bne.n	8005218 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f022 0208 	bic.w	r2, r2, #8
 8005216:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521c:	2b00      	cmp	r3, #0
 800521e:	d003      	beq.n	8005228 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800522c:	2220      	movs	r2, #32
 800522e:	409a      	lsls	r2, r3
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	4013      	ands	r3, r2
 8005234:	2b00      	cmp	r3, #0
 8005236:	f000 808e 	beq.w	8005356 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0310 	and.w	r3, r3, #16
 8005244:	2b00      	cmp	r3, #0
 8005246:	f000 8086 	beq.w	8005356 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800524e:	2220      	movs	r2, #32
 8005250:	409a      	lsls	r2, r3
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800525c:	b2db      	uxtb	r3, r3
 800525e:	2b05      	cmp	r3, #5
 8005260:	d136      	bne.n	80052d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f022 0216 	bic.w	r2, r2, #22
 8005270:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	695a      	ldr	r2, [r3, #20]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005280:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005286:	2b00      	cmp	r3, #0
 8005288:	d103      	bne.n	8005292 <HAL_DMA_IRQHandler+0x1da>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800528e:	2b00      	cmp	r3, #0
 8005290:	d007      	beq.n	80052a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f022 0208 	bic.w	r2, r2, #8
 80052a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052a6:	223f      	movs	r2, #63	; 0x3f
 80052a8:	409a      	lsls	r2, r3
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2201      	movs	r2, #1
 80052ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d07d      	beq.n	80053c2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	4798      	blx	r3
        }
        return;
 80052ce:	e078      	b.n	80053c2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d01c      	beq.n	8005318 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d108      	bne.n	80052fe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d030      	beq.n	8005356 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	4798      	blx	r3
 80052fc:	e02b      	b.n	8005356 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005302:	2b00      	cmp	r3, #0
 8005304:	d027      	beq.n	8005356 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	4798      	blx	r3
 800530e:	e022      	b.n	8005356 <HAL_DMA_IRQHandler+0x29e>
 8005310:	20000000 	.word	0x20000000
 8005314:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005322:	2b00      	cmp	r3, #0
 8005324:	d10f      	bne.n	8005346 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f022 0210 	bic.w	r2, r2, #16
 8005334:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2201      	movs	r2, #1
 8005342:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800534a:	2b00      	cmp	r3, #0
 800534c:	d003      	beq.n	8005356 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800535a:	2b00      	cmp	r3, #0
 800535c:	d032      	beq.n	80053c4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005362:	f003 0301 	and.w	r3, r3, #1
 8005366:	2b00      	cmp	r3, #0
 8005368:	d022      	beq.n	80053b0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2205      	movs	r2, #5
 800536e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f022 0201 	bic.w	r2, r2, #1
 8005380:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	3301      	adds	r3, #1
 8005386:	60bb      	str	r3, [r7, #8]
 8005388:	697a      	ldr	r2, [r7, #20]
 800538a:	429a      	cmp	r2, r3
 800538c:	d307      	bcc.n	800539e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0301 	and.w	r3, r3, #1
 8005398:	2b00      	cmp	r3, #0
 800539a:	d1f2      	bne.n	8005382 <HAL_DMA_IRQHandler+0x2ca>
 800539c:	e000      	b.n	80053a0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800539e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d005      	beq.n	80053c4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	4798      	blx	r3
 80053c0:	e000      	b.n	80053c4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80053c2:	bf00      	nop
    }
  }
}
 80053c4:	3718      	adds	r7, #24
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop

080053cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b085      	sub	sp, #20
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	607a      	str	r2, [r7, #4]
 80053d8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80053e8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	683a      	ldr	r2, [r7, #0]
 80053f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	2b40      	cmp	r3, #64	; 0x40
 80053f8:	d108      	bne.n	800540c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68ba      	ldr	r2, [r7, #8]
 8005408:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800540a:	e007      	b.n	800541c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68ba      	ldr	r2, [r7, #8]
 8005412:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	60da      	str	r2, [r3, #12]
}
 800541c:	bf00      	nop
 800541e:	3714      	adds	r7, #20
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005428:	b480      	push	{r7}
 800542a:	b085      	sub	sp, #20
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	b2db      	uxtb	r3, r3
 8005436:	3b10      	subs	r3, #16
 8005438:	4a14      	ldr	r2, [pc, #80]	; (800548c <DMA_CalcBaseAndBitshift+0x64>)
 800543a:	fba2 2303 	umull	r2, r3, r2, r3
 800543e:	091b      	lsrs	r3, r3, #4
 8005440:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005442:	4a13      	ldr	r2, [pc, #76]	; (8005490 <DMA_CalcBaseAndBitshift+0x68>)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	4413      	add	r3, r2
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	461a      	mov	r2, r3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2b03      	cmp	r3, #3
 8005454:	d909      	bls.n	800546a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800545e:	f023 0303 	bic.w	r3, r3, #3
 8005462:	1d1a      	adds	r2, r3, #4
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	659a      	str	r2, [r3, #88]	; 0x58
 8005468:	e007      	b.n	800547a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005472:	f023 0303 	bic.w	r3, r3, #3
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800547e:	4618      	mov	r0, r3
 8005480:	3714      	adds	r7, #20
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	aaaaaaab 	.word	0xaaaaaaab
 8005490:	0800cf08 	.word	0x0800cf08

08005494 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005494:	b480      	push	{r7}
 8005496:	b085      	sub	sp, #20
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800549c:	2300      	movs	r3, #0
 800549e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	699b      	ldr	r3, [r3, #24]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d11f      	bne.n	80054ee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	2b03      	cmp	r3, #3
 80054b2:	d855      	bhi.n	8005560 <DMA_CheckFifoParam+0xcc>
 80054b4:	a201      	add	r2, pc, #4	; (adr r2, 80054bc <DMA_CheckFifoParam+0x28>)
 80054b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ba:	bf00      	nop
 80054bc:	080054cd 	.word	0x080054cd
 80054c0:	080054df 	.word	0x080054df
 80054c4:	080054cd 	.word	0x080054cd
 80054c8:	08005561 	.word	0x08005561
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d045      	beq.n	8005564 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054dc:	e042      	b.n	8005564 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80054e6:	d13f      	bne.n	8005568 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054ec:	e03c      	b.n	8005568 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	699b      	ldr	r3, [r3, #24]
 80054f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054f6:	d121      	bne.n	800553c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	2b03      	cmp	r3, #3
 80054fc:	d836      	bhi.n	800556c <DMA_CheckFifoParam+0xd8>
 80054fe:	a201      	add	r2, pc, #4	; (adr r2, 8005504 <DMA_CheckFifoParam+0x70>)
 8005500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005504:	08005515 	.word	0x08005515
 8005508:	0800551b 	.word	0x0800551b
 800550c:	08005515 	.word	0x08005515
 8005510:	0800552d 	.word	0x0800552d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	73fb      	strb	r3, [r7, #15]
      break;
 8005518:	e02f      	b.n	800557a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800551e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005522:	2b00      	cmp	r3, #0
 8005524:	d024      	beq.n	8005570 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800552a:	e021      	b.n	8005570 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005530:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005534:	d11e      	bne.n	8005574 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800553a:	e01b      	b.n	8005574 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	2b02      	cmp	r3, #2
 8005540:	d902      	bls.n	8005548 <DMA_CheckFifoParam+0xb4>
 8005542:	2b03      	cmp	r3, #3
 8005544:	d003      	beq.n	800554e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005546:	e018      	b.n	800557a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	73fb      	strb	r3, [r7, #15]
      break;
 800554c:	e015      	b.n	800557a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005552:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00e      	beq.n	8005578 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	73fb      	strb	r3, [r7, #15]
      break;
 800555e:	e00b      	b.n	8005578 <DMA_CheckFifoParam+0xe4>
      break;
 8005560:	bf00      	nop
 8005562:	e00a      	b.n	800557a <DMA_CheckFifoParam+0xe6>
      break;
 8005564:	bf00      	nop
 8005566:	e008      	b.n	800557a <DMA_CheckFifoParam+0xe6>
      break;
 8005568:	bf00      	nop
 800556a:	e006      	b.n	800557a <DMA_CheckFifoParam+0xe6>
      break;
 800556c:	bf00      	nop
 800556e:	e004      	b.n	800557a <DMA_CheckFifoParam+0xe6>
      break;
 8005570:	bf00      	nop
 8005572:	e002      	b.n	800557a <DMA_CheckFifoParam+0xe6>
      break;   
 8005574:	bf00      	nop
 8005576:	e000      	b.n	800557a <DMA_CheckFifoParam+0xe6>
      break;
 8005578:	bf00      	nop
    }
  } 
  
  return status; 
 800557a:	7bfb      	ldrb	r3, [r7, #15]
}
 800557c:	4618      	mov	r0, r3
 800557e:	3714      	adds	r7, #20
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005588:	b480      	push	{r7}
 800558a:	b089      	sub	sp, #36	; 0x24
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005592:	2300      	movs	r3, #0
 8005594:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005596:	2300      	movs	r3, #0
 8005598:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800559a:	2300      	movs	r3, #0
 800559c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800559e:	2300      	movs	r3, #0
 80055a0:	61fb      	str	r3, [r7, #28]
 80055a2:	e16b      	b.n	800587c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80055a4:	2201      	movs	r2, #1
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	fa02 f303 	lsl.w	r3, r2, r3
 80055ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	4013      	ands	r3, r2
 80055b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80055b8:	693a      	ldr	r2, [r7, #16]
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	429a      	cmp	r2, r3
 80055be:	f040 815a 	bne.w	8005876 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d00b      	beq.n	80055e2 <HAL_GPIO_Init+0x5a>
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d007      	beq.n	80055e2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80055d6:	2b11      	cmp	r3, #17
 80055d8:	d003      	beq.n	80055e2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	2b12      	cmp	r3, #18
 80055e0:	d130      	bne.n	8005644 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	005b      	lsls	r3, r3, #1
 80055ec:	2203      	movs	r2, #3
 80055ee:	fa02 f303 	lsl.w	r3, r2, r3
 80055f2:	43db      	mvns	r3, r3
 80055f4:	69ba      	ldr	r2, [r7, #24]
 80055f6:	4013      	ands	r3, r2
 80055f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	68da      	ldr	r2, [r3, #12]
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	005b      	lsls	r3, r3, #1
 8005602:	fa02 f303 	lsl.w	r3, r2, r3
 8005606:	69ba      	ldr	r2, [r7, #24]
 8005608:	4313      	orrs	r3, r2
 800560a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	69ba      	ldr	r2, [r7, #24]
 8005610:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005618:	2201      	movs	r2, #1
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	fa02 f303 	lsl.w	r3, r2, r3
 8005620:	43db      	mvns	r3, r3
 8005622:	69ba      	ldr	r2, [r7, #24]
 8005624:	4013      	ands	r3, r2
 8005626:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	091b      	lsrs	r3, r3, #4
 800562e:	f003 0201 	and.w	r2, r3, #1
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	fa02 f303 	lsl.w	r3, r2, r3
 8005638:	69ba      	ldr	r2, [r7, #24]
 800563a:	4313      	orrs	r3, r2
 800563c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	69ba      	ldr	r2, [r7, #24]
 8005642:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	005b      	lsls	r3, r3, #1
 800564e:	2203      	movs	r2, #3
 8005650:	fa02 f303 	lsl.w	r3, r2, r3
 8005654:	43db      	mvns	r3, r3
 8005656:	69ba      	ldr	r2, [r7, #24]
 8005658:	4013      	ands	r3, r2
 800565a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	689a      	ldr	r2, [r3, #8]
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	005b      	lsls	r3, r3, #1
 8005664:	fa02 f303 	lsl.w	r3, r2, r3
 8005668:	69ba      	ldr	r2, [r7, #24]
 800566a:	4313      	orrs	r3, r2
 800566c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	69ba      	ldr	r2, [r7, #24]
 8005672:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	2b02      	cmp	r3, #2
 800567a:	d003      	beq.n	8005684 <HAL_GPIO_Init+0xfc>
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	2b12      	cmp	r3, #18
 8005682:	d123      	bne.n	80056cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	08da      	lsrs	r2, r3, #3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	3208      	adds	r2, #8
 800568c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005690:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	f003 0307 	and.w	r3, r3, #7
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	220f      	movs	r2, #15
 800569c:	fa02 f303 	lsl.w	r3, r2, r3
 80056a0:	43db      	mvns	r3, r3
 80056a2:	69ba      	ldr	r2, [r7, #24]
 80056a4:	4013      	ands	r3, r2
 80056a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	691a      	ldr	r2, [r3, #16]
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	f003 0307 	and.w	r3, r3, #7
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	fa02 f303 	lsl.w	r3, r2, r3
 80056b8:	69ba      	ldr	r2, [r7, #24]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	08da      	lsrs	r2, r3, #3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	3208      	adds	r2, #8
 80056c6:	69b9      	ldr	r1, [r7, #24]
 80056c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	005b      	lsls	r3, r3, #1
 80056d6:	2203      	movs	r2, #3
 80056d8:	fa02 f303 	lsl.w	r3, r2, r3
 80056dc:	43db      	mvns	r3, r3
 80056de:	69ba      	ldr	r2, [r7, #24]
 80056e0:	4013      	ands	r3, r2
 80056e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	f003 0203 	and.w	r2, r3, #3
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	005b      	lsls	r3, r3, #1
 80056f0:	fa02 f303 	lsl.w	r3, r2, r3
 80056f4:	69ba      	ldr	r2, [r7, #24]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	69ba      	ldr	r2, [r7, #24]
 80056fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005708:	2b00      	cmp	r3, #0
 800570a:	f000 80b4 	beq.w	8005876 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800570e:	2300      	movs	r3, #0
 8005710:	60fb      	str	r3, [r7, #12]
 8005712:	4b5f      	ldr	r3, [pc, #380]	; (8005890 <HAL_GPIO_Init+0x308>)
 8005714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005716:	4a5e      	ldr	r2, [pc, #376]	; (8005890 <HAL_GPIO_Init+0x308>)
 8005718:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800571c:	6453      	str	r3, [r2, #68]	; 0x44
 800571e:	4b5c      	ldr	r3, [pc, #368]	; (8005890 <HAL_GPIO_Init+0x308>)
 8005720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005722:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005726:	60fb      	str	r3, [r7, #12]
 8005728:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800572a:	4a5a      	ldr	r2, [pc, #360]	; (8005894 <HAL_GPIO_Init+0x30c>)
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	089b      	lsrs	r3, r3, #2
 8005730:	3302      	adds	r3, #2
 8005732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005736:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	f003 0303 	and.w	r3, r3, #3
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	220f      	movs	r2, #15
 8005742:	fa02 f303 	lsl.w	r3, r2, r3
 8005746:	43db      	mvns	r3, r3
 8005748:	69ba      	ldr	r2, [r7, #24]
 800574a:	4013      	ands	r3, r2
 800574c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a51      	ldr	r2, [pc, #324]	; (8005898 <HAL_GPIO_Init+0x310>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d02b      	beq.n	80057ae <HAL_GPIO_Init+0x226>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a50      	ldr	r2, [pc, #320]	; (800589c <HAL_GPIO_Init+0x314>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d025      	beq.n	80057aa <HAL_GPIO_Init+0x222>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a4f      	ldr	r2, [pc, #316]	; (80058a0 <HAL_GPIO_Init+0x318>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d01f      	beq.n	80057a6 <HAL_GPIO_Init+0x21e>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a4e      	ldr	r2, [pc, #312]	; (80058a4 <HAL_GPIO_Init+0x31c>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d019      	beq.n	80057a2 <HAL_GPIO_Init+0x21a>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a4d      	ldr	r2, [pc, #308]	; (80058a8 <HAL_GPIO_Init+0x320>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d013      	beq.n	800579e <HAL_GPIO_Init+0x216>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a4c      	ldr	r2, [pc, #304]	; (80058ac <HAL_GPIO_Init+0x324>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d00d      	beq.n	800579a <HAL_GPIO_Init+0x212>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a4b      	ldr	r2, [pc, #300]	; (80058b0 <HAL_GPIO_Init+0x328>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d007      	beq.n	8005796 <HAL_GPIO_Init+0x20e>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a4a      	ldr	r2, [pc, #296]	; (80058b4 <HAL_GPIO_Init+0x32c>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d101      	bne.n	8005792 <HAL_GPIO_Init+0x20a>
 800578e:	2307      	movs	r3, #7
 8005790:	e00e      	b.n	80057b0 <HAL_GPIO_Init+0x228>
 8005792:	2308      	movs	r3, #8
 8005794:	e00c      	b.n	80057b0 <HAL_GPIO_Init+0x228>
 8005796:	2306      	movs	r3, #6
 8005798:	e00a      	b.n	80057b0 <HAL_GPIO_Init+0x228>
 800579a:	2305      	movs	r3, #5
 800579c:	e008      	b.n	80057b0 <HAL_GPIO_Init+0x228>
 800579e:	2304      	movs	r3, #4
 80057a0:	e006      	b.n	80057b0 <HAL_GPIO_Init+0x228>
 80057a2:	2303      	movs	r3, #3
 80057a4:	e004      	b.n	80057b0 <HAL_GPIO_Init+0x228>
 80057a6:	2302      	movs	r3, #2
 80057a8:	e002      	b.n	80057b0 <HAL_GPIO_Init+0x228>
 80057aa:	2301      	movs	r3, #1
 80057ac:	e000      	b.n	80057b0 <HAL_GPIO_Init+0x228>
 80057ae:	2300      	movs	r3, #0
 80057b0:	69fa      	ldr	r2, [r7, #28]
 80057b2:	f002 0203 	and.w	r2, r2, #3
 80057b6:	0092      	lsls	r2, r2, #2
 80057b8:	4093      	lsls	r3, r2
 80057ba:	69ba      	ldr	r2, [r7, #24]
 80057bc:	4313      	orrs	r3, r2
 80057be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80057c0:	4934      	ldr	r1, [pc, #208]	; (8005894 <HAL_GPIO_Init+0x30c>)
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	089b      	lsrs	r3, r3, #2
 80057c6:	3302      	adds	r3, #2
 80057c8:	69ba      	ldr	r2, [r7, #24]
 80057ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80057ce:	4b3a      	ldr	r3, [pc, #232]	; (80058b8 <HAL_GPIO_Init+0x330>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	43db      	mvns	r3, r3
 80057d8:	69ba      	ldr	r2, [r7, #24]
 80057da:	4013      	ands	r3, r2
 80057dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d003      	beq.n	80057f2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80057ea:	69ba      	ldr	r2, [r7, #24]
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80057f2:	4a31      	ldr	r2, [pc, #196]	; (80058b8 <HAL_GPIO_Init+0x330>)
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80057f8:	4b2f      	ldr	r3, [pc, #188]	; (80058b8 <HAL_GPIO_Init+0x330>)
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	43db      	mvns	r3, r3
 8005802:	69ba      	ldr	r2, [r7, #24]
 8005804:	4013      	ands	r3, r2
 8005806:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005810:	2b00      	cmp	r3, #0
 8005812:	d003      	beq.n	800581c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005814:	69ba      	ldr	r2, [r7, #24]
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	4313      	orrs	r3, r2
 800581a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800581c:	4a26      	ldr	r2, [pc, #152]	; (80058b8 <HAL_GPIO_Init+0x330>)
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005822:	4b25      	ldr	r3, [pc, #148]	; (80058b8 <HAL_GPIO_Init+0x330>)
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	43db      	mvns	r3, r3
 800582c:	69ba      	ldr	r2, [r7, #24]
 800582e:	4013      	ands	r3, r2
 8005830:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800583a:	2b00      	cmp	r3, #0
 800583c:	d003      	beq.n	8005846 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800583e:	69ba      	ldr	r2, [r7, #24]
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	4313      	orrs	r3, r2
 8005844:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005846:	4a1c      	ldr	r2, [pc, #112]	; (80058b8 <HAL_GPIO_Init+0x330>)
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800584c:	4b1a      	ldr	r3, [pc, #104]	; (80058b8 <HAL_GPIO_Init+0x330>)
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	43db      	mvns	r3, r3
 8005856:	69ba      	ldr	r2, [r7, #24]
 8005858:	4013      	ands	r3, r2
 800585a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005864:	2b00      	cmp	r3, #0
 8005866:	d003      	beq.n	8005870 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005868:	69ba      	ldr	r2, [r7, #24]
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	4313      	orrs	r3, r2
 800586e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005870:	4a11      	ldr	r2, [pc, #68]	; (80058b8 <HAL_GPIO_Init+0x330>)
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	3301      	adds	r3, #1
 800587a:	61fb      	str	r3, [r7, #28]
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	2b0f      	cmp	r3, #15
 8005880:	f67f ae90 	bls.w	80055a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005884:	bf00      	nop
 8005886:	3724      	adds	r7, #36	; 0x24
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr
 8005890:	40023800 	.word	0x40023800
 8005894:	40013800 	.word	0x40013800
 8005898:	40020000 	.word	0x40020000
 800589c:	40020400 	.word	0x40020400
 80058a0:	40020800 	.word	0x40020800
 80058a4:	40020c00 	.word	0x40020c00
 80058a8:	40021000 	.word	0x40021000
 80058ac:	40021400 	.word	0x40021400
 80058b0:	40021800 	.word	0x40021800
 80058b4:	40021c00 	.word	0x40021c00
 80058b8:	40013c00 	.word	0x40013c00

080058bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b082      	sub	sp, #8
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	4603      	mov	r3, r0
 80058c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80058c6:	4b08      	ldr	r3, [pc, #32]	; (80058e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80058c8:	695a      	ldr	r2, [r3, #20]
 80058ca:	88fb      	ldrh	r3, [r7, #6]
 80058cc:	4013      	ands	r3, r2
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d006      	beq.n	80058e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80058d2:	4a05      	ldr	r2, [pc, #20]	; (80058e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80058d4:	88fb      	ldrh	r3, [r7, #6]
 80058d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80058d8:	88fb      	ldrh	r3, [r7, #6]
 80058da:	4618      	mov	r0, r3
 80058dc:	f7fd ff90 	bl	8003800 <HAL_GPIO_EXTI_Callback>
  }
}
 80058e0:	bf00      	nop
 80058e2:	3708      	adds	r7, #8
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	40013c00 	.word	0x40013c00

080058ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d101      	bne.n	80058fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e11f      	b.n	8005b3e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005904:	b2db      	uxtb	r3, r3
 8005906:	2b00      	cmp	r3, #0
 8005908:	d106      	bne.n	8005918 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f7fe fc98 	bl	8004248 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2224      	movs	r2, #36	; 0x24
 800591c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f022 0201 	bic.w	r2, r2, #1
 800592e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800593e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800594e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005950:	f002 f826 	bl	80079a0 <HAL_RCC_GetPCLK1Freq>
 8005954:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	4a7b      	ldr	r2, [pc, #492]	; (8005b48 <HAL_I2C_Init+0x25c>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d807      	bhi.n	8005970 <HAL_I2C_Init+0x84>
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	4a7a      	ldr	r2, [pc, #488]	; (8005b4c <HAL_I2C_Init+0x260>)
 8005964:	4293      	cmp	r3, r2
 8005966:	bf94      	ite	ls
 8005968:	2301      	movls	r3, #1
 800596a:	2300      	movhi	r3, #0
 800596c:	b2db      	uxtb	r3, r3
 800596e:	e006      	b.n	800597e <HAL_I2C_Init+0x92>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	4a77      	ldr	r2, [pc, #476]	; (8005b50 <HAL_I2C_Init+0x264>)
 8005974:	4293      	cmp	r3, r2
 8005976:	bf94      	ite	ls
 8005978:	2301      	movls	r3, #1
 800597a:	2300      	movhi	r3, #0
 800597c:	b2db      	uxtb	r3, r3
 800597e:	2b00      	cmp	r3, #0
 8005980:	d001      	beq.n	8005986 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e0db      	b.n	8005b3e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	4a72      	ldr	r2, [pc, #456]	; (8005b54 <HAL_I2C_Init+0x268>)
 800598a:	fba2 2303 	umull	r2, r3, r2, r3
 800598e:	0c9b      	lsrs	r3, r3, #18
 8005990:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68ba      	ldr	r2, [r7, #8]
 80059a2:	430a      	orrs	r2, r1
 80059a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	6a1b      	ldr	r3, [r3, #32]
 80059ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	4a64      	ldr	r2, [pc, #400]	; (8005b48 <HAL_I2C_Init+0x25c>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d802      	bhi.n	80059c0 <HAL_I2C_Init+0xd4>
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	3301      	adds	r3, #1
 80059be:	e009      	b.n	80059d4 <HAL_I2C_Init+0xe8>
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80059c6:	fb02 f303 	mul.w	r3, r2, r3
 80059ca:	4a63      	ldr	r2, [pc, #396]	; (8005b58 <HAL_I2C_Init+0x26c>)
 80059cc:	fba2 2303 	umull	r2, r3, r2, r3
 80059d0:	099b      	lsrs	r3, r3, #6
 80059d2:	3301      	adds	r3, #1
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	6812      	ldr	r2, [r2, #0]
 80059d8:	430b      	orrs	r3, r1
 80059da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	69db      	ldr	r3, [r3, #28]
 80059e2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80059e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	4956      	ldr	r1, [pc, #344]	; (8005b48 <HAL_I2C_Init+0x25c>)
 80059f0:	428b      	cmp	r3, r1
 80059f2:	d80d      	bhi.n	8005a10 <HAL_I2C_Init+0x124>
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	1e59      	subs	r1, r3, #1
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	005b      	lsls	r3, r3, #1
 80059fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a02:	3301      	adds	r3, #1
 8005a04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a08:	2b04      	cmp	r3, #4
 8005a0a:	bf38      	it	cc
 8005a0c:	2304      	movcc	r3, #4
 8005a0e:	e04f      	b.n	8005ab0 <HAL_I2C_Init+0x1c4>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d111      	bne.n	8005a3c <HAL_I2C_Init+0x150>
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	1e58      	subs	r0, r3, #1
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6859      	ldr	r1, [r3, #4]
 8005a20:	460b      	mov	r3, r1
 8005a22:	005b      	lsls	r3, r3, #1
 8005a24:	440b      	add	r3, r1
 8005a26:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	bf0c      	ite	eq
 8005a34:	2301      	moveq	r3, #1
 8005a36:	2300      	movne	r3, #0
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	e012      	b.n	8005a62 <HAL_I2C_Init+0x176>
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	1e58      	subs	r0, r3, #1
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6859      	ldr	r1, [r3, #4]
 8005a44:	460b      	mov	r3, r1
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	440b      	add	r3, r1
 8005a4a:	0099      	lsls	r1, r3, #2
 8005a4c:	440b      	add	r3, r1
 8005a4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a52:	3301      	adds	r3, #1
 8005a54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	bf0c      	ite	eq
 8005a5c:	2301      	moveq	r3, #1
 8005a5e:	2300      	movne	r3, #0
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d001      	beq.n	8005a6a <HAL_I2C_Init+0x17e>
 8005a66:	2301      	movs	r3, #1
 8005a68:	e022      	b.n	8005ab0 <HAL_I2C_Init+0x1c4>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d10e      	bne.n	8005a90 <HAL_I2C_Init+0x1a4>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	1e58      	subs	r0, r3, #1
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6859      	ldr	r1, [r3, #4]
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	005b      	lsls	r3, r3, #1
 8005a7e:	440b      	add	r3, r1
 8005a80:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a84:	3301      	adds	r3, #1
 8005a86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a8e:	e00f      	b.n	8005ab0 <HAL_I2C_Init+0x1c4>
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	1e58      	subs	r0, r3, #1
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6859      	ldr	r1, [r3, #4]
 8005a98:	460b      	mov	r3, r1
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	440b      	add	r3, r1
 8005a9e:	0099      	lsls	r1, r3, #2
 8005aa0:	440b      	add	r3, r1
 8005aa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005aac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ab0:	6879      	ldr	r1, [r7, #4]
 8005ab2:	6809      	ldr	r1, [r1, #0]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	69da      	ldr	r2, [r3, #28]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a1b      	ldr	r3, [r3, #32]
 8005aca:	431a      	orrs	r2, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	430a      	orrs	r2, r1
 8005ad2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005ade:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	6911      	ldr	r1, [r2, #16]
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	68d2      	ldr	r2, [r2, #12]
 8005aea:	4311      	orrs	r1, r2
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	6812      	ldr	r2, [r2, #0]
 8005af0:	430b      	orrs	r3, r1
 8005af2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	695a      	ldr	r2, [r3, #20]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	699b      	ldr	r3, [r3, #24]
 8005b06:	431a      	orrs	r2, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	430a      	orrs	r2, r1
 8005b0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f042 0201 	orr.w	r2, r2, #1
 8005b1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2220      	movs	r2, #32
 8005b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b3c:	2300      	movs	r3, #0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3710      	adds	r7, #16
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	000186a0 	.word	0x000186a0
 8005b4c:	001e847f 	.word	0x001e847f
 8005b50:	003d08ff 	.word	0x003d08ff
 8005b54:	431bde83 	.word	0x431bde83
 8005b58:	10624dd3 	.word	0x10624dd3

08005b5c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b088      	sub	sp, #32
 8005b60:	af02      	add	r7, sp, #8
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	607a      	str	r2, [r7, #4]
 8005b66:	461a      	mov	r2, r3
 8005b68:	460b      	mov	r3, r1
 8005b6a:	817b      	strh	r3, [r7, #10]
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005b70:	f7ff f85c 	bl	8004c2c <HAL_GetTick>
 8005b74:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	2b20      	cmp	r3, #32
 8005b80:	f040 80e0 	bne.w	8005d44 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	9300      	str	r3, [sp, #0]
 8005b88:	2319      	movs	r3, #25
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	4970      	ldr	r1, [pc, #448]	; (8005d50 <HAL_I2C_Master_Transmit+0x1f4>)
 8005b8e:	68f8      	ldr	r0, [r7, #12]
 8005b90:	f001 f8f0 	bl	8006d74 <I2C_WaitOnFlagUntilTimeout>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d001      	beq.n	8005b9e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005b9a:	2302      	movs	r3, #2
 8005b9c:	e0d3      	b.n	8005d46 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d101      	bne.n	8005bac <HAL_I2C_Master_Transmit+0x50>
 8005ba8:	2302      	movs	r3, #2
 8005baa:	e0cc      	b.n	8005d46 <HAL_I2C_Master_Transmit+0x1ea>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 0301 	and.w	r3, r3, #1
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d007      	beq.n	8005bd2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f042 0201 	orr.w	r2, r2, #1
 8005bd0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005be0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2221      	movs	r2, #33	; 0x21
 8005be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2210      	movs	r2, #16
 8005bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	893a      	ldrh	r2, [r7, #8]
 8005c02:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c08:	b29a      	uxth	r2, r3
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	4a50      	ldr	r2, [pc, #320]	; (8005d54 <HAL_I2C_Master_Transmit+0x1f8>)
 8005c12:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005c14:	8979      	ldrh	r1, [r7, #10]
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	6a3a      	ldr	r2, [r7, #32]
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	f000 fde2 	bl	80067e4 <I2C_MasterRequestWrite>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d001      	beq.n	8005c2a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e08d      	b.n	8005d46 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	613b      	str	r3, [r7, #16]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	695b      	ldr	r3, [r3, #20]
 8005c34:	613b      	str	r3, [r7, #16]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	699b      	ldr	r3, [r3, #24]
 8005c3c:	613b      	str	r3, [r7, #16]
 8005c3e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005c40:	e066      	b.n	8005d10 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c42:	697a      	ldr	r2, [r7, #20]
 8005c44:	6a39      	ldr	r1, [r7, #32]
 8005c46:	68f8      	ldr	r0, [r7, #12]
 8005c48:	f001 f96a 	bl	8006f20 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00d      	beq.n	8005c6e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c56:	2b04      	cmp	r3, #4
 8005c58:	d107      	bne.n	8005c6a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c68:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e06b      	b.n	8005d46 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c72:	781a      	ldrb	r2, [r3, #0]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7e:	1c5a      	adds	r2, r3, #1
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	b29a      	uxth	r2, r3
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c96:	3b01      	subs	r3, #1
 8005c98:	b29a      	uxth	r2, r3
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	695b      	ldr	r3, [r3, #20]
 8005ca4:	f003 0304 	and.w	r3, r3, #4
 8005ca8:	2b04      	cmp	r3, #4
 8005caa:	d11b      	bne.n	8005ce4 <HAL_I2C_Master_Transmit+0x188>
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d017      	beq.n	8005ce4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb8:	781a      	ldrb	r2, [r3, #0]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc4:	1c5a      	adds	r2, r3, #1
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	3b01      	subs	r3, #1
 8005cd2:	b29a      	uxth	r2, r3
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cdc:	3b01      	subs	r3, #1
 8005cde:	b29a      	uxth	r2, r3
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ce4:	697a      	ldr	r2, [r7, #20]
 8005ce6:	6a39      	ldr	r1, [r7, #32]
 8005ce8:	68f8      	ldr	r0, [r7, #12]
 8005cea:	f001 f95a 	bl	8006fa2 <I2C_WaitOnBTFFlagUntilTimeout>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d00d      	beq.n	8005d10 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf8:	2b04      	cmp	r3, #4
 8005cfa:	d107      	bne.n	8005d0c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d0a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e01a      	b.n	8005d46 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d194      	bne.n	8005c42 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2220      	movs	r2, #32
 8005d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005d40:	2300      	movs	r3, #0
 8005d42:	e000      	b.n	8005d46 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005d44:	2302      	movs	r3, #2
  }
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3718      	adds	r7, #24
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	00100002 	.word	0x00100002
 8005d54:	ffff0000 	.word	0xffff0000

08005d58 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b08c      	sub	sp, #48	; 0x30
 8005d5c:	af02      	add	r7, sp, #8
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	607a      	str	r2, [r7, #4]
 8005d62:	461a      	mov	r2, r3
 8005d64:	460b      	mov	r3, r1
 8005d66:	817b      	strh	r3, [r7, #10]
 8005d68:	4613      	mov	r3, r2
 8005d6a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005d6c:	f7fe ff5e 	bl	8004c2c <HAL_GetTick>
 8005d70:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	2b20      	cmp	r3, #32
 8005d7c:	f040 820b 	bne.w	8006196 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d82:	9300      	str	r3, [sp, #0]
 8005d84:	2319      	movs	r3, #25
 8005d86:	2201      	movs	r2, #1
 8005d88:	497c      	ldr	r1, [pc, #496]	; (8005f7c <HAL_I2C_Master_Receive+0x224>)
 8005d8a:	68f8      	ldr	r0, [r7, #12]
 8005d8c:	f000 fff2 	bl	8006d74 <I2C_WaitOnFlagUntilTimeout>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d001      	beq.n	8005d9a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005d96:	2302      	movs	r3, #2
 8005d98:	e1fe      	b.n	8006198 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d101      	bne.n	8005da8 <HAL_I2C_Master_Receive+0x50>
 8005da4:	2302      	movs	r3, #2
 8005da6:	e1f7      	b.n	8006198 <HAL_I2C_Master_Receive+0x440>
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 0301 	and.w	r3, r3, #1
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d007      	beq.n	8005dce <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f042 0201 	orr.w	r2, r2, #1
 8005dcc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ddc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2222      	movs	r2, #34	; 0x22
 8005de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2210      	movs	r2, #16
 8005dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2200      	movs	r2, #0
 8005df2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	893a      	ldrh	r2, [r7, #8]
 8005dfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e04:	b29a      	uxth	r2, r3
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	4a5c      	ldr	r2, [pc, #368]	; (8005f80 <HAL_I2C_Master_Receive+0x228>)
 8005e0e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005e10:	8979      	ldrh	r1, [r7, #10]
 8005e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e16:	68f8      	ldr	r0, [r7, #12]
 8005e18:	f000 fd66 	bl	80068e8 <I2C_MasterRequestRead>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d001      	beq.n	8005e26 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e1b8      	b.n	8006198 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d113      	bne.n	8005e56 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e2e:	2300      	movs	r3, #0
 8005e30:	623b      	str	r3, [r7, #32]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	695b      	ldr	r3, [r3, #20]
 8005e38:	623b      	str	r3, [r7, #32]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	699b      	ldr	r3, [r3, #24]
 8005e40:	623b      	str	r3, [r7, #32]
 8005e42:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e52:	601a      	str	r2, [r3, #0]
 8005e54:	e18c      	b.n	8006170 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d11b      	bne.n	8005e96 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e6e:	2300      	movs	r3, #0
 8005e70:	61fb      	str	r3, [r7, #28]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	695b      	ldr	r3, [r3, #20]
 8005e78:	61fb      	str	r3, [r7, #28]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	699b      	ldr	r3, [r3, #24]
 8005e80:	61fb      	str	r3, [r7, #28]
 8005e82:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e92:	601a      	str	r2, [r3, #0]
 8005e94:	e16c      	b.n	8006170 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e9a:	2b02      	cmp	r3, #2
 8005e9c:	d11b      	bne.n	8005ed6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005eac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ebc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	61bb      	str	r3, [r7, #24]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	695b      	ldr	r3, [r3, #20]
 8005ec8:	61bb      	str	r3, [r7, #24]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	699b      	ldr	r3, [r3, #24]
 8005ed0:	61bb      	str	r3, [r7, #24]
 8005ed2:	69bb      	ldr	r3, [r7, #24]
 8005ed4:	e14c      	b.n	8006170 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ee4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	617b      	str	r3, [r7, #20]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	695b      	ldr	r3, [r3, #20]
 8005ef0:	617b      	str	r3, [r7, #20]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	699b      	ldr	r3, [r3, #24]
 8005ef8:	617b      	str	r3, [r7, #20]
 8005efa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005efc:	e138      	b.n	8006170 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f02:	2b03      	cmp	r3, #3
 8005f04:	f200 80f1 	bhi.w	80060ea <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d123      	bne.n	8005f58 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f14:	68f8      	ldr	r0, [r7, #12]
 8005f16:	f001 f885 	bl	8007024 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d001      	beq.n	8005f24 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e139      	b.n	8006198 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	691a      	ldr	r2, [r3, #16]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2e:	b2d2      	uxtb	r2, r2
 8005f30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f36:	1c5a      	adds	r2, r3, #1
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f40:	3b01      	subs	r3, #1
 8005f42:	b29a      	uxth	r2, r3
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	b29a      	uxth	r2, r3
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f56:	e10b      	b.n	8006170 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f5c:	2b02      	cmp	r3, #2
 8005f5e:	d14e      	bne.n	8005ffe <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f62:	9300      	str	r3, [sp, #0]
 8005f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f66:	2200      	movs	r2, #0
 8005f68:	4906      	ldr	r1, [pc, #24]	; (8005f84 <HAL_I2C_Master_Receive+0x22c>)
 8005f6a:	68f8      	ldr	r0, [r7, #12]
 8005f6c:	f000 ff02 	bl	8006d74 <I2C_WaitOnFlagUntilTimeout>
 8005f70:	4603      	mov	r3, r0
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d008      	beq.n	8005f88 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e10e      	b.n	8006198 <HAL_I2C_Master_Receive+0x440>
 8005f7a:	bf00      	nop
 8005f7c:	00100002 	.word	0x00100002
 8005f80:	ffff0000 	.word	0xffff0000
 8005f84:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	691a      	ldr	r2, [r3, #16]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa2:	b2d2      	uxtb	r2, r2
 8005fa4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005faa:	1c5a      	adds	r2, r3, #1
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fb4:	3b01      	subs	r3, #1
 8005fb6:	b29a      	uxth	r2, r3
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	3b01      	subs	r3, #1
 8005fc4:	b29a      	uxth	r2, r3
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	691a      	ldr	r2, [r3, #16]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd4:	b2d2      	uxtb	r2, r2
 8005fd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fdc:	1c5a      	adds	r2, r3, #1
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fe6:	3b01      	subs	r3, #1
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	3b01      	subs	r3, #1
 8005ff6:	b29a      	uxth	r2, r3
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005ffc:	e0b8      	b.n	8006170 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006000:	9300      	str	r3, [sp, #0]
 8006002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006004:	2200      	movs	r2, #0
 8006006:	4966      	ldr	r1, [pc, #408]	; (80061a0 <HAL_I2C_Master_Receive+0x448>)
 8006008:	68f8      	ldr	r0, [r7, #12]
 800600a:	f000 feb3 	bl	8006d74 <I2C_WaitOnFlagUntilTimeout>
 800600e:	4603      	mov	r3, r0
 8006010:	2b00      	cmp	r3, #0
 8006012:	d001      	beq.n	8006018 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	e0bf      	b.n	8006198 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006026:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	691a      	ldr	r2, [r3, #16]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006032:	b2d2      	uxtb	r2, r2
 8006034:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603a:	1c5a      	adds	r2, r3, #1
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006044:	3b01      	subs	r3, #1
 8006046:	b29a      	uxth	r2, r3
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006050:	b29b      	uxth	r3, r3
 8006052:	3b01      	subs	r3, #1
 8006054:	b29a      	uxth	r2, r3
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800605a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605c:	9300      	str	r3, [sp, #0]
 800605e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006060:	2200      	movs	r2, #0
 8006062:	494f      	ldr	r1, [pc, #316]	; (80061a0 <HAL_I2C_Master_Receive+0x448>)
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	f000 fe85 	bl	8006d74 <I2C_WaitOnFlagUntilTimeout>
 800606a:	4603      	mov	r3, r0
 800606c:	2b00      	cmp	r3, #0
 800606e:	d001      	beq.n	8006074 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e091      	b.n	8006198 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006082:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	691a      	ldr	r2, [r3, #16]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608e:	b2d2      	uxtb	r2, r2
 8006090:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006096:	1c5a      	adds	r2, r3, #1
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060a0:	3b01      	subs	r3, #1
 80060a2:	b29a      	uxth	r2, r3
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	3b01      	subs	r3, #1
 80060b0:	b29a      	uxth	r2, r3
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	691a      	ldr	r2, [r3, #16]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c0:	b2d2      	uxtb	r2, r2
 80060c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c8:	1c5a      	adds	r2, r3, #1
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060d2:	3b01      	subs	r3, #1
 80060d4:	b29a      	uxth	r2, r3
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060de:	b29b      	uxth	r3, r3
 80060e0:	3b01      	subs	r3, #1
 80060e2:	b29a      	uxth	r2, r3
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80060e8:	e042      	b.n	8006170 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80060ee:	68f8      	ldr	r0, [r7, #12]
 80060f0:	f000 ff98 	bl	8007024 <I2C_WaitOnRXNEFlagUntilTimeout>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d001      	beq.n	80060fe <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e04c      	b.n	8006198 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	691a      	ldr	r2, [r3, #16]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006108:	b2d2      	uxtb	r2, r2
 800610a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006110:	1c5a      	adds	r2, r3, #1
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800611a:	3b01      	subs	r3, #1
 800611c:	b29a      	uxth	r2, r3
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006126:	b29b      	uxth	r3, r3
 8006128:	3b01      	subs	r3, #1
 800612a:	b29a      	uxth	r2, r3
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	695b      	ldr	r3, [r3, #20]
 8006136:	f003 0304 	and.w	r3, r3, #4
 800613a:	2b04      	cmp	r3, #4
 800613c:	d118      	bne.n	8006170 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	691a      	ldr	r2, [r3, #16]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006148:	b2d2      	uxtb	r2, r2
 800614a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006150:	1c5a      	adds	r2, r3, #1
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800615a:	3b01      	subs	r3, #1
 800615c:	b29a      	uxth	r2, r3
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006166:	b29b      	uxth	r3, r3
 8006168:	3b01      	subs	r3, #1
 800616a:	b29a      	uxth	r2, r3
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006174:	2b00      	cmp	r3, #0
 8006176:	f47f aec2 	bne.w	8005efe <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2220      	movs	r2, #32
 800617e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2200      	movs	r2, #0
 800618e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006192:	2300      	movs	r3, #0
 8006194:	e000      	b.n	8006198 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006196:	2302      	movs	r3, #2
  }
}
 8006198:	4618      	mov	r0, r3
 800619a:	3728      	adds	r7, #40	; 0x28
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	00010004 	.word	0x00010004

080061a4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b088      	sub	sp, #32
 80061a8:	af02      	add	r7, sp, #8
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	4608      	mov	r0, r1
 80061ae:	4611      	mov	r1, r2
 80061b0:	461a      	mov	r2, r3
 80061b2:	4603      	mov	r3, r0
 80061b4:	817b      	strh	r3, [r7, #10]
 80061b6:	460b      	mov	r3, r1
 80061b8:	813b      	strh	r3, [r7, #8]
 80061ba:	4613      	mov	r3, r2
 80061bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80061be:	f7fe fd35 	bl	8004c2c <HAL_GetTick>
 80061c2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	2b20      	cmp	r3, #32
 80061ce:	f040 80d9 	bne.w	8006384 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	9300      	str	r3, [sp, #0]
 80061d6:	2319      	movs	r3, #25
 80061d8:	2201      	movs	r2, #1
 80061da:	496d      	ldr	r1, [pc, #436]	; (8006390 <HAL_I2C_Mem_Write+0x1ec>)
 80061dc:	68f8      	ldr	r0, [r7, #12]
 80061de:	f000 fdc9 	bl	8006d74 <I2C_WaitOnFlagUntilTimeout>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d001      	beq.n	80061ec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80061e8:	2302      	movs	r3, #2
 80061ea:	e0cc      	b.n	8006386 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d101      	bne.n	80061fa <HAL_I2C_Mem_Write+0x56>
 80061f6:	2302      	movs	r3, #2
 80061f8:	e0c5      	b.n	8006386 <HAL_I2C_Mem_Write+0x1e2>
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2201      	movs	r2, #1
 80061fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f003 0301 	and.w	r3, r3, #1
 800620c:	2b01      	cmp	r3, #1
 800620e:	d007      	beq.n	8006220 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f042 0201 	orr.w	r2, r2, #1
 800621e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800622e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2221      	movs	r2, #33	; 0x21
 8006234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2240      	movs	r2, #64	; 0x40
 800623c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2200      	movs	r2, #0
 8006244:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6a3a      	ldr	r2, [r7, #32]
 800624a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006250:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006256:	b29a      	uxth	r2, r3
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	4a4d      	ldr	r2, [pc, #308]	; (8006394 <HAL_I2C_Mem_Write+0x1f0>)
 8006260:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006262:	88f8      	ldrh	r0, [r7, #6]
 8006264:	893a      	ldrh	r2, [r7, #8]
 8006266:	8979      	ldrh	r1, [r7, #10]
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	9301      	str	r3, [sp, #4]
 800626c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800626e:	9300      	str	r3, [sp, #0]
 8006270:	4603      	mov	r3, r0
 8006272:	68f8      	ldr	r0, [r7, #12]
 8006274:	f000 fc04 	bl	8006a80 <I2C_RequestMemoryWrite>
 8006278:	4603      	mov	r3, r0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d052      	beq.n	8006324 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	e081      	b.n	8006386 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006282:	697a      	ldr	r2, [r7, #20]
 8006284:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006286:	68f8      	ldr	r0, [r7, #12]
 8006288:	f000 fe4a 	bl	8006f20 <I2C_WaitOnTXEFlagUntilTimeout>
 800628c:	4603      	mov	r3, r0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d00d      	beq.n	80062ae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006296:	2b04      	cmp	r3, #4
 8006298:	d107      	bne.n	80062aa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e06b      	b.n	8006386 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b2:	781a      	ldrb	r2, [r3, #0]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062be:	1c5a      	adds	r2, r3, #1
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062c8:	3b01      	subs	r3, #1
 80062ca:	b29a      	uxth	r2, r3
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	3b01      	subs	r3, #1
 80062d8:	b29a      	uxth	r2, r3
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	695b      	ldr	r3, [r3, #20]
 80062e4:	f003 0304 	and.w	r3, r3, #4
 80062e8:	2b04      	cmp	r3, #4
 80062ea:	d11b      	bne.n	8006324 <HAL_I2C_Mem_Write+0x180>
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d017      	beq.n	8006324 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f8:	781a      	ldrb	r2, [r3, #0]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006304:	1c5a      	adds	r2, r3, #1
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800630e:	3b01      	subs	r3, #1
 8006310:	b29a      	uxth	r2, r3
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800631a:	b29b      	uxth	r3, r3
 800631c:	3b01      	subs	r3, #1
 800631e:	b29a      	uxth	r2, r3
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006328:	2b00      	cmp	r3, #0
 800632a:	d1aa      	bne.n	8006282 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800632c:	697a      	ldr	r2, [r7, #20]
 800632e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006330:	68f8      	ldr	r0, [r7, #12]
 8006332:	f000 fe36 	bl	8006fa2 <I2C_WaitOnBTFFlagUntilTimeout>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d00d      	beq.n	8006358 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006340:	2b04      	cmp	r3, #4
 8006342:	d107      	bne.n	8006354 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006352:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e016      	b.n	8006386 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006366:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2220      	movs	r2, #32
 800636c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2200      	movs	r2, #0
 8006374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2200      	movs	r2, #0
 800637c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006380:	2300      	movs	r3, #0
 8006382:	e000      	b.n	8006386 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006384:	2302      	movs	r3, #2
  }
}
 8006386:	4618      	mov	r0, r3
 8006388:	3718      	adds	r7, #24
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	00100002 	.word	0x00100002
 8006394:	ffff0000 	.word	0xffff0000

08006398 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b08c      	sub	sp, #48	; 0x30
 800639c:	af02      	add	r7, sp, #8
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	4608      	mov	r0, r1
 80063a2:	4611      	mov	r1, r2
 80063a4:	461a      	mov	r2, r3
 80063a6:	4603      	mov	r3, r0
 80063a8:	817b      	strh	r3, [r7, #10]
 80063aa:	460b      	mov	r3, r1
 80063ac:	813b      	strh	r3, [r7, #8]
 80063ae:	4613      	mov	r3, r2
 80063b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80063b2:	f7fe fc3b 	bl	8004c2c <HAL_GetTick>
 80063b6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	2b20      	cmp	r3, #32
 80063c2:	f040 8208 	bne.w	80067d6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80063c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c8:	9300      	str	r3, [sp, #0]
 80063ca:	2319      	movs	r3, #25
 80063cc:	2201      	movs	r2, #1
 80063ce:	497b      	ldr	r1, [pc, #492]	; (80065bc <HAL_I2C_Mem_Read+0x224>)
 80063d0:	68f8      	ldr	r0, [r7, #12]
 80063d2:	f000 fccf 	bl	8006d74 <I2C_WaitOnFlagUntilTimeout>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d001      	beq.n	80063e0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80063dc:	2302      	movs	r3, #2
 80063de:	e1fb      	b.n	80067d8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d101      	bne.n	80063ee <HAL_I2C_Mem_Read+0x56>
 80063ea:	2302      	movs	r3, #2
 80063ec:	e1f4      	b.n	80067d8 <HAL_I2C_Mem_Read+0x440>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2201      	movs	r2, #1
 80063f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 0301 	and.w	r3, r3, #1
 8006400:	2b01      	cmp	r3, #1
 8006402:	d007      	beq.n	8006414 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f042 0201 	orr.w	r2, r2, #1
 8006412:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006422:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2222      	movs	r2, #34	; 0x22
 8006428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2240      	movs	r2, #64	; 0x40
 8006430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2200      	movs	r2, #0
 8006438:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800643e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006444:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800644a:	b29a      	uxth	r2, r3
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	4a5b      	ldr	r2, [pc, #364]	; (80065c0 <HAL_I2C_Mem_Read+0x228>)
 8006454:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006456:	88f8      	ldrh	r0, [r7, #6]
 8006458:	893a      	ldrh	r2, [r7, #8]
 800645a:	8979      	ldrh	r1, [r7, #10]
 800645c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645e:	9301      	str	r3, [sp, #4]
 8006460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006462:	9300      	str	r3, [sp, #0]
 8006464:	4603      	mov	r3, r0
 8006466:	68f8      	ldr	r0, [r7, #12]
 8006468:	f000 fb9e 	bl	8006ba8 <I2C_RequestMemoryRead>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d001      	beq.n	8006476 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e1b0      	b.n	80067d8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800647a:	2b00      	cmp	r3, #0
 800647c:	d113      	bne.n	80064a6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800647e:	2300      	movs	r3, #0
 8006480:	623b      	str	r3, [r7, #32]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	695b      	ldr	r3, [r3, #20]
 8006488:	623b      	str	r3, [r7, #32]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	699b      	ldr	r3, [r3, #24]
 8006490:	623b      	str	r3, [r7, #32]
 8006492:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064a2:	601a      	str	r2, [r3, #0]
 80064a4:	e184      	b.n	80067b0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d11b      	bne.n	80064e6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064be:	2300      	movs	r3, #0
 80064c0:	61fb      	str	r3, [r7, #28]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	695b      	ldr	r3, [r3, #20]
 80064c8:	61fb      	str	r3, [r7, #28]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	699b      	ldr	r3, [r3, #24]
 80064d0:	61fb      	str	r3, [r7, #28]
 80064d2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064e2:	601a      	str	r2, [r3, #0]
 80064e4:	e164      	b.n	80067b0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064ea:	2b02      	cmp	r3, #2
 80064ec:	d11b      	bne.n	8006526 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064fc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800650c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800650e:	2300      	movs	r3, #0
 8006510:	61bb      	str	r3, [r7, #24]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	695b      	ldr	r3, [r3, #20]
 8006518:	61bb      	str	r3, [r7, #24]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	699b      	ldr	r3, [r3, #24]
 8006520:	61bb      	str	r3, [r7, #24]
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	e144      	b.n	80067b0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006526:	2300      	movs	r3, #0
 8006528:	617b      	str	r3, [r7, #20]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	695b      	ldr	r3, [r3, #20]
 8006530:	617b      	str	r3, [r7, #20]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	699b      	ldr	r3, [r3, #24]
 8006538:	617b      	str	r3, [r7, #20]
 800653a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800653c:	e138      	b.n	80067b0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006542:	2b03      	cmp	r3, #3
 8006544:	f200 80f1 	bhi.w	800672a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800654c:	2b01      	cmp	r3, #1
 800654e:	d123      	bne.n	8006598 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006552:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006554:	68f8      	ldr	r0, [r7, #12]
 8006556:	f000 fd65 	bl	8007024 <I2C_WaitOnRXNEFlagUntilTimeout>
 800655a:	4603      	mov	r3, r0
 800655c:	2b00      	cmp	r3, #0
 800655e:	d001      	beq.n	8006564 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	e139      	b.n	80067d8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	691a      	ldr	r2, [r3, #16]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656e:	b2d2      	uxtb	r2, r2
 8006570:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006576:	1c5a      	adds	r2, r3, #1
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006580:	3b01      	subs	r3, #1
 8006582:	b29a      	uxth	r2, r3
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800658c:	b29b      	uxth	r3, r3
 800658e:	3b01      	subs	r3, #1
 8006590:	b29a      	uxth	r2, r3
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006596:	e10b      	b.n	80067b0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800659c:	2b02      	cmp	r3, #2
 800659e:	d14e      	bne.n	800663e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80065a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a2:	9300      	str	r3, [sp, #0]
 80065a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a6:	2200      	movs	r2, #0
 80065a8:	4906      	ldr	r1, [pc, #24]	; (80065c4 <HAL_I2C_Mem_Read+0x22c>)
 80065aa:	68f8      	ldr	r0, [r7, #12]
 80065ac:	f000 fbe2 	bl	8006d74 <I2C_WaitOnFlagUntilTimeout>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d008      	beq.n	80065c8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e10e      	b.n	80067d8 <HAL_I2C_Mem_Read+0x440>
 80065ba:	bf00      	nop
 80065bc:	00100002 	.word	0x00100002
 80065c0:	ffff0000 	.word	0xffff0000
 80065c4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	691a      	ldr	r2, [r3, #16]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e2:	b2d2      	uxtb	r2, r2
 80065e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ea:	1c5a      	adds	r2, r3, #1
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065f4:	3b01      	subs	r3, #1
 80065f6:	b29a      	uxth	r2, r3
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006600:	b29b      	uxth	r3, r3
 8006602:	3b01      	subs	r3, #1
 8006604:	b29a      	uxth	r2, r3
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	691a      	ldr	r2, [r3, #16]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006614:	b2d2      	uxtb	r2, r2
 8006616:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661c:	1c5a      	adds	r2, r3, #1
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006626:	3b01      	subs	r3, #1
 8006628:	b29a      	uxth	r2, r3
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006632:	b29b      	uxth	r3, r3
 8006634:	3b01      	subs	r3, #1
 8006636:	b29a      	uxth	r2, r3
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800663c:	e0b8      	b.n	80067b0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800663e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006640:	9300      	str	r3, [sp, #0]
 8006642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006644:	2200      	movs	r2, #0
 8006646:	4966      	ldr	r1, [pc, #408]	; (80067e0 <HAL_I2C_Mem_Read+0x448>)
 8006648:	68f8      	ldr	r0, [r7, #12]
 800664a:	f000 fb93 	bl	8006d74 <I2C_WaitOnFlagUntilTimeout>
 800664e:	4603      	mov	r3, r0
 8006650:	2b00      	cmp	r3, #0
 8006652:	d001      	beq.n	8006658 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	e0bf      	b.n	80067d8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006666:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	691a      	ldr	r2, [r3, #16]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006672:	b2d2      	uxtb	r2, r2
 8006674:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667a:	1c5a      	adds	r2, r3, #1
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006684:	3b01      	subs	r3, #1
 8006686:	b29a      	uxth	r2, r3
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006690:	b29b      	uxth	r3, r3
 8006692:	3b01      	subs	r3, #1
 8006694:	b29a      	uxth	r2, r3
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800669a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669c:	9300      	str	r3, [sp, #0]
 800669e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a0:	2200      	movs	r2, #0
 80066a2:	494f      	ldr	r1, [pc, #316]	; (80067e0 <HAL_I2C_Mem_Read+0x448>)
 80066a4:	68f8      	ldr	r0, [r7, #12]
 80066a6:	f000 fb65 	bl	8006d74 <I2C_WaitOnFlagUntilTimeout>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d001      	beq.n	80066b4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	e091      	b.n	80067d8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	691a      	ldr	r2, [r3, #16]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ce:	b2d2      	uxtb	r2, r2
 80066d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d6:	1c5a      	adds	r2, r3, #1
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066e0:	3b01      	subs	r3, #1
 80066e2:	b29a      	uxth	r2, r3
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	3b01      	subs	r3, #1
 80066f0:	b29a      	uxth	r2, r3
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	691a      	ldr	r2, [r3, #16]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006700:	b2d2      	uxtb	r2, r2
 8006702:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006708:	1c5a      	adds	r2, r3, #1
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006712:	3b01      	subs	r3, #1
 8006714:	b29a      	uxth	r2, r3
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800671e:	b29b      	uxth	r3, r3
 8006720:	3b01      	subs	r3, #1
 8006722:	b29a      	uxth	r2, r3
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006728:	e042      	b.n	80067b0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800672a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800672c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800672e:	68f8      	ldr	r0, [r7, #12]
 8006730:	f000 fc78 	bl	8007024 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006734:	4603      	mov	r3, r0
 8006736:	2b00      	cmp	r3, #0
 8006738:	d001      	beq.n	800673e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	e04c      	b.n	80067d8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	691a      	ldr	r2, [r3, #16]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006748:	b2d2      	uxtb	r2, r2
 800674a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006750:	1c5a      	adds	r2, r3, #1
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800675a:	3b01      	subs	r3, #1
 800675c:	b29a      	uxth	r2, r3
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006766:	b29b      	uxth	r3, r3
 8006768:	3b01      	subs	r3, #1
 800676a:	b29a      	uxth	r2, r3
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	695b      	ldr	r3, [r3, #20]
 8006776:	f003 0304 	and.w	r3, r3, #4
 800677a:	2b04      	cmp	r3, #4
 800677c:	d118      	bne.n	80067b0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	691a      	ldr	r2, [r3, #16]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006788:	b2d2      	uxtb	r2, r2
 800678a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006790:	1c5a      	adds	r2, r3, #1
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800679a:	3b01      	subs	r3, #1
 800679c:	b29a      	uxth	r2, r3
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	3b01      	subs	r3, #1
 80067aa:	b29a      	uxth	r2, r3
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	f47f aec2 	bne.w	800653e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2220      	movs	r2, #32
 80067be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80067d2:	2300      	movs	r3, #0
 80067d4:	e000      	b.n	80067d8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80067d6:	2302      	movs	r3, #2
  }
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3728      	adds	r7, #40	; 0x28
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	00010004 	.word	0x00010004

080067e4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b088      	sub	sp, #32
 80067e8:	af02      	add	r7, sp, #8
 80067ea:	60f8      	str	r0, [r7, #12]
 80067ec:	607a      	str	r2, [r7, #4]
 80067ee:	603b      	str	r3, [r7, #0]
 80067f0:	460b      	mov	r3, r1
 80067f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	2b08      	cmp	r3, #8
 80067fe:	d006      	beq.n	800680e <I2C_MasterRequestWrite+0x2a>
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	2b01      	cmp	r3, #1
 8006804:	d003      	beq.n	800680e <I2C_MasterRequestWrite+0x2a>
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800680c:	d108      	bne.n	8006820 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800681c:	601a      	str	r2, [r3, #0]
 800681e:	e00b      	b.n	8006838 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006824:	2b12      	cmp	r3, #18
 8006826:	d107      	bne.n	8006838 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006836:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	9300      	str	r3, [sp, #0]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006844:	68f8      	ldr	r0, [r7, #12]
 8006846:	f000 fa95 	bl	8006d74 <I2C_WaitOnFlagUntilTimeout>
 800684a:	4603      	mov	r3, r0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d00c      	beq.n	800686a <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800685a:	2b00      	cmp	r3, #0
 800685c:	d003      	beq.n	8006866 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006864:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006866:	2303      	movs	r3, #3
 8006868:	e035      	b.n	80068d6 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006872:	d108      	bne.n	8006886 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006874:	897b      	ldrh	r3, [r7, #10]
 8006876:	b2db      	uxtb	r3, r3
 8006878:	461a      	mov	r2, r3
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006882:	611a      	str	r2, [r3, #16]
 8006884:	e01b      	b.n	80068be <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006886:	897b      	ldrh	r3, [r7, #10]
 8006888:	11db      	asrs	r3, r3, #7
 800688a:	b2db      	uxtb	r3, r3
 800688c:	f003 0306 	and.w	r3, r3, #6
 8006890:	b2db      	uxtb	r3, r3
 8006892:	f063 030f 	orn	r3, r3, #15
 8006896:	b2da      	uxtb	r2, r3
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	490f      	ldr	r1, [pc, #60]	; (80068e0 <I2C_MasterRequestWrite+0xfc>)
 80068a4:	68f8      	ldr	r0, [r7, #12]
 80068a6:	f000 fabc 	bl	8006e22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80068aa:	4603      	mov	r3, r0
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d001      	beq.n	80068b4 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	e010      	b.n	80068d6 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80068b4:	897b      	ldrh	r3, [r7, #10]
 80068b6:	b2da      	uxtb	r2, r3
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	4908      	ldr	r1, [pc, #32]	; (80068e4 <I2C_MasterRequestWrite+0x100>)
 80068c4:	68f8      	ldr	r0, [r7, #12]
 80068c6:	f000 faac 	bl	8006e22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d001      	beq.n	80068d4 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	e000      	b.n	80068d6 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 80068d4:	2300      	movs	r3, #0
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3718      	adds	r7, #24
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	00010008 	.word	0x00010008
 80068e4:	00010002 	.word	0x00010002

080068e8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b088      	sub	sp, #32
 80068ec:	af02      	add	r7, sp, #8
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	607a      	str	r2, [r7, #4]
 80068f2:	603b      	str	r3, [r7, #0]
 80068f4:	460b      	mov	r3, r1
 80068f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068fc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800690c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	2b08      	cmp	r3, #8
 8006912:	d006      	beq.n	8006922 <I2C_MasterRequestRead+0x3a>
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	2b01      	cmp	r3, #1
 8006918:	d003      	beq.n	8006922 <I2C_MasterRequestRead+0x3a>
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006920:	d108      	bne.n	8006934 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006930:	601a      	str	r2, [r3, #0]
 8006932:	e00b      	b.n	800694c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006938:	2b11      	cmp	r3, #17
 800693a:	d107      	bne.n	800694c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800694a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	9300      	str	r3, [sp, #0]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	f000 fa0b 	bl	8006d74 <I2C_WaitOnFlagUntilTimeout>
 800695e:	4603      	mov	r3, r0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d00c      	beq.n	800697e <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800696e:	2b00      	cmp	r3, #0
 8006970:	d003      	beq.n	800697a <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006978:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800697a:	2303      	movs	r3, #3
 800697c:	e078      	b.n	8006a70 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006986:	d108      	bne.n	800699a <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006988:	897b      	ldrh	r3, [r7, #10]
 800698a:	b2db      	uxtb	r3, r3
 800698c:	f043 0301 	orr.w	r3, r3, #1
 8006990:	b2da      	uxtb	r2, r3
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	611a      	str	r2, [r3, #16]
 8006998:	e05e      	b.n	8006a58 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800699a:	897b      	ldrh	r3, [r7, #10]
 800699c:	11db      	asrs	r3, r3, #7
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	f003 0306 	and.w	r3, r3, #6
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	f063 030f 	orn	r3, r3, #15
 80069aa:	b2da      	uxtb	r2, r3
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	4930      	ldr	r1, [pc, #192]	; (8006a78 <I2C_MasterRequestRead+0x190>)
 80069b8:	68f8      	ldr	r0, [r7, #12]
 80069ba:	f000 fa32 	bl	8006e22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d001      	beq.n	80069c8 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	e053      	b.n	8006a70 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80069c8:	897b      	ldrh	r3, [r7, #10]
 80069ca:	b2da      	uxtb	r2, r3
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	4929      	ldr	r1, [pc, #164]	; (8006a7c <I2C_MasterRequestRead+0x194>)
 80069d8:	68f8      	ldr	r0, [r7, #12]
 80069da:	f000 fa22 	bl	8006e22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d001      	beq.n	80069e8 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	e043      	b.n	8006a70 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069e8:	2300      	movs	r3, #0
 80069ea:	613b      	str	r3, [r7, #16]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	695b      	ldr	r3, [r3, #20]
 80069f2:	613b      	str	r3, [r7, #16]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	699b      	ldr	r3, [r3, #24]
 80069fa:	613b      	str	r3, [r7, #16]
 80069fc:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a0c:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	9300      	str	r3, [sp, #0]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006a1a:	68f8      	ldr	r0, [r7, #12]
 8006a1c:	f000 f9aa 	bl	8006d74 <I2C_WaitOnFlagUntilTimeout>
 8006a20:	4603      	mov	r3, r0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d00c      	beq.n	8006a40 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d003      	beq.n	8006a3c <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a3a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006a3c:	2303      	movs	r3, #3
 8006a3e:	e017      	b.n	8006a70 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006a40:	897b      	ldrh	r3, [r7, #10]
 8006a42:	11db      	asrs	r3, r3, #7
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	f003 0306 	and.w	r3, r3, #6
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	f063 030e 	orn	r3, r3, #14
 8006a50:	b2da      	uxtb	r2, r3
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	4907      	ldr	r1, [pc, #28]	; (8006a7c <I2C_MasterRequestRead+0x194>)
 8006a5e:	68f8      	ldr	r0, [r7, #12]
 8006a60:	f000 f9df 	bl	8006e22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a64:	4603      	mov	r3, r0
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d001      	beq.n	8006a6e <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	e000      	b.n	8006a70 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 8006a6e:	2300      	movs	r3, #0
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3718      	adds	r7, #24
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}
 8006a78:	00010008 	.word	0x00010008
 8006a7c:	00010002 	.word	0x00010002

08006a80 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b088      	sub	sp, #32
 8006a84:	af02      	add	r7, sp, #8
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	4608      	mov	r0, r1
 8006a8a:	4611      	mov	r1, r2
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	4603      	mov	r3, r0
 8006a90:	817b      	strh	r3, [r7, #10]
 8006a92:	460b      	mov	r3, r1
 8006a94:	813b      	strh	r3, [r7, #8]
 8006a96:	4613      	mov	r3, r2
 8006a98:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006aa8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aac:	9300      	str	r3, [sp, #0]
 8006aae:	6a3b      	ldr	r3, [r7, #32]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006ab6:	68f8      	ldr	r0, [r7, #12]
 8006ab8:	f000 f95c 	bl	8006d74 <I2C_WaitOnFlagUntilTimeout>
 8006abc:	4603      	mov	r3, r0
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d00c      	beq.n	8006adc <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d003      	beq.n	8006ad8 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ad6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006ad8:	2303      	movs	r3, #3
 8006ada:	e05f      	b.n	8006b9c <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006adc:	897b      	ldrh	r3, [r7, #10]
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006aea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aee:	6a3a      	ldr	r2, [r7, #32]
 8006af0:	492c      	ldr	r1, [pc, #176]	; (8006ba4 <I2C_RequestMemoryWrite+0x124>)
 8006af2:	68f8      	ldr	r0, [r7, #12]
 8006af4:	f000 f995 	bl	8006e22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d001      	beq.n	8006b02 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	e04c      	b.n	8006b9c <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b02:	2300      	movs	r3, #0
 8006b04:	617b      	str	r3, [r7, #20]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	695b      	ldr	r3, [r3, #20]
 8006b0c:	617b      	str	r3, [r7, #20]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	699b      	ldr	r3, [r3, #24]
 8006b14:	617b      	str	r3, [r7, #20]
 8006b16:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b1a:	6a39      	ldr	r1, [r7, #32]
 8006b1c:	68f8      	ldr	r0, [r7, #12]
 8006b1e:	f000 f9ff 	bl	8006f20 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b22:	4603      	mov	r3, r0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d00d      	beq.n	8006b44 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2c:	2b04      	cmp	r3, #4
 8006b2e:	d107      	bne.n	8006b40 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b3e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	e02b      	b.n	8006b9c <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b44:	88fb      	ldrh	r3, [r7, #6]
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d105      	bne.n	8006b56 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b4a:	893b      	ldrh	r3, [r7, #8]
 8006b4c:	b2da      	uxtb	r2, r3
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	611a      	str	r2, [r3, #16]
 8006b54:	e021      	b.n	8006b9a <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006b56:	893b      	ldrh	r3, [r7, #8]
 8006b58:	0a1b      	lsrs	r3, r3, #8
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	b2da      	uxtb	r2, r3
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b66:	6a39      	ldr	r1, [r7, #32]
 8006b68:	68f8      	ldr	r0, [r7, #12]
 8006b6a:	f000 f9d9 	bl	8006f20 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d00d      	beq.n	8006b90 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b78:	2b04      	cmp	r3, #4
 8006b7a:	d107      	bne.n	8006b8c <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b8a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e005      	b.n	8006b9c <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b90:	893b      	ldrh	r3, [r7, #8]
 8006b92:	b2da      	uxtb	r2, r3
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006b9a:	2300      	movs	r3, #0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3718      	adds	r7, #24
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}
 8006ba4:	00010002 	.word	0x00010002

08006ba8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b088      	sub	sp, #32
 8006bac:	af02      	add	r7, sp, #8
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	4608      	mov	r0, r1
 8006bb2:	4611      	mov	r1, r2
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	817b      	strh	r3, [r7, #10]
 8006bba:	460b      	mov	r3, r1
 8006bbc:	813b      	strh	r3, [r7, #8]
 8006bbe:	4613      	mov	r3, r2
 8006bc0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006bd0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006be0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be4:	9300      	str	r3, [sp, #0]
 8006be6:	6a3b      	ldr	r3, [r7, #32]
 8006be8:	2200      	movs	r2, #0
 8006bea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006bee:	68f8      	ldr	r0, [r7, #12]
 8006bf0:	f000 f8c0 	bl	8006d74 <I2C_WaitOnFlagUntilTimeout>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d00c      	beq.n	8006c14 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d003      	beq.n	8006c10 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c0e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006c10:	2303      	movs	r3, #3
 8006c12:	e0a9      	b.n	8006d68 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006c14:	897b      	ldrh	r3, [r7, #10]
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	461a      	mov	r2, r3
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006c22:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c26:	6a3a      	ldr	r2, [r7, #32]
 8006c28:	4951      	ldr	r1, [pc, #324]	; (8006d70 <I2C_RequestMemoryRead+0x1c8>)
 8006c2a:	68f8      	ldr	r0, [r7, #12]
 8006c2c:	f000 f8f9 	bl	8006e22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c30:	4603      	mov	r3, r0
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d001      	beq.n	8006c3a <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	e096      	b.n	8006d68 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	617b      	str	r3, [r7, #20]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	695b      	ldr	r3, [r3, #20]
 8006c44:	617b      	str	r3, [r7, #20]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	699b      	ldr	r3, [r3, #24]
 8006c4c:	617b      	str	r3, [r7, #20]
 8006c4e:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c52:	6a39      	ldr	r1, [r7, #32]
 8006c54:	68f8      	ldr	r0, [r7, #12]
 8006c56:	f000 f963 	bl	8006f20 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00d      	beq.n	8006c7c <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c64:	2b04      	cmp	r3, #4
 8006c66:	d107      	bne.n	8006c78 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c76:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e075      	b.n	8006d68 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006c7c:	88fb      	ldrh	r3, [r7, #6]
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d105      	bne.n	8006c8e <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c82:	893b      	ldrh	r3, [r7, #8]
 8006c84:	b2da      	uxtb	r2, r3
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	611a      	str	r2, [r3, #16]
 8006c8c:	e021      	b.n	8006cd2 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006c8e:	893b      	ldrh	r3, [r7, #8]
 8006c90:	0a1b      	lsrs	r3, r3, #8
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	b2da      	uxtb	r2, r3
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c9e:	6a39      	ldr	r1, [r7, #32]
 8006ca0:	68f8      	ldr	r0, [r7, #12]
 8006ca2:	f000 f93d 	bl	8006f20 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d00d      	beq.n	8006cc8 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb0:	2b04      	cmp	r3, #4
 8006cb2:	d107      	bne.n	8006cc4 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cc2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e04f      	b.n	8006d68 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006cc8:	893b      	ldrh	r3, [r7, #8]
 8006cca:	b2da      	uxtb	r2, r3
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cd4:	6a39      	ldr	r1, [r7, #32]
 8006cd6:	68f8      	ldr	r0, [r7, #12]
 8006cd8:	f000 f922 	bl	8006f20 <I2C_WaitOnTXEFlagUntilTimeout>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00d      	beq.n	8006cfe <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce6:	2b04      	cmp	r3, #4
 8006ce8:	d107      	bne.n	8006cfa <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cf8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e034      	b.n	8006d68 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d0c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d10:	9300      	str	r3, [sp, #0]
 8006d12:	6a3b      	ldr	r3, [r7, #32]
 8006d14:	2200      	movs	r2, #0
 8006d16:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006d1a:	68f8      	ldr	r0, [r7, #12]
 8006d1c:	f000 f82a 	bl	8006d74 <I2C_WaitOnFlagUntilTimeout>
 8006d20:	4603      	mov	r3, r0
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d00c      	beq.n	8006d40 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d003      	beq.n	8006d3c <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d3a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006d3c:	2303      	movs	r3, #3
 8006d3e:	e013      	b.n	8006d68 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006d40:	897b      	ldrh	r3, [r7, #10]
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	f043 0301 	orr.w	r3, r3, #1
 8006d48:	b2da      	uxtb	r2, r3
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d52:	6a3a      	ldr	r2, [r7, #32]
 8006d54:	4906      	ldr	r1, [pc, #24]	; (8006d70 <I2C_RequestMemoryRead+0x1c8>)
 8006d56:	68f8      	ldr	r0, [r7, #12]
 8006d58:	f000 f863 	bl	8006e22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d001      	beq.n	8006d66 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e000      	b.n	8006d68 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3718      	adds	r7, #24
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}
 8006d70:	00010002 	.word	0x00010002

08006d74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	60f8      	str	r0, [r7, #12]
 8006d7c:	60b9      	str	r1, [r7, #8]
 8006d7e:	603b      	str	r3, [r7, #0]
 8006d80:	4613      	mov	r3, r2
 8006d82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d84:	e025      	b.n	8006dd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d8c:	d021      	beq.n	8006dd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d8e:	f7fd ff4d 	bl	8004c2c <HAL_GetTick>
 8006d92:	4602      	mov	r2, r0
 8006d94:	69bb      	ldr	r3, [r7, #24]
 8006d96:	1ad3      	subs	r3, r2, r3
 8006d98:	683a      	ldr	r2, [r7, #0]
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d302      	bcc.n	8006da4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d116      	bne.n	8006dd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2200      	movs	r2, #0
 8006da8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2220      	movs	r2, #32
 8006dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2200      	movs	r2, #0
 8006db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dbe:	f043 0220 	orr.w	r2, r3, #32
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e023      	b.n	8006e1a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	0c1b      	lsrs	r3, r3, #16
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d10d      	bne.n	8006df8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	695b      	ldr	r3, [r3, #20]
 8006de2:	43da      	mvns	r2, r3
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	4013      	ands	r3, r2
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	bf0c      	ite	eq
 8006dee:	2301      	moveq	r3, #1
 8006df0:	2300      	movne	r3, #0
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	461a      	mov	r2, r3
 8006df6:	e00c      	b.n	8006e12 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	699b      	ldr	r3, [r3, #24]
 8006dfe:	43da      	mvns	r2, r3
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	4013      	ands	r3, r2
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	bf0c      	ite	eq
 8006e0a:	2301      	moveq	r3, #1
 8006e0c:	2300      	movne	r3, #0
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	461a      	mov	r2, r3
 8006e12:	79fb      	ldrb	r3, [r7, #7]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d0b6      	beq.n	8006d86 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006e18:	2300      	movs	r3, #0
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3710      	adds	r7, #16
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}

08006e22 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006e22:	b580      	push	{r7, lr}
 8006e24:	b084      	sub	sp, #16
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	60f8      	str	r0, [r7, #12]
 8006e2a:	60b9      	str	r1, [r7, #8]
 8006e2c:	607a      	str	r2, [r7, #4]
 8006e2e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006e30:	e051      	b.n	8006ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	695b      	ldr	r3, [r3, #20]
 8006e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e40:	d123      	bne.n	8006e8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e50:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006e5a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2220      	movs	r2, #32
 8006e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e76:	f043 0204 	orr.w	r2, r3, #4
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2200      	movs	r2, #0
 8006e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	e046      	b.n	8006f18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e90:	d021      	beq.n	8006ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e92:	f7fd fecb 	bl	8004c2c <HAL_GetTick>
 8006e96:	4602      	mov	r2, r0
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	1ad3      	subs	r3, r2, r3
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d302      	bcc.n	8006ea8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d116      	bne.n	8006ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2220      	movs	r2, #32
 8006eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec2:	f043 0220 	orr.w	r2, r3, #32
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e020      	b.n	8006f18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	0c1b      	lsrs	r3, r3, #16
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d10c      	bne.n	8006efa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	695b      	ldr	r3, [r3, #20]
 8006ee6:	43da      	mvns	r2, r3
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	4013      	ands	r3, r2
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	bf14      	ite	ne
 8006ef2:	2301      	movne	r3, #1
 8006ef4:	2300      	moveq	r3, #0
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	e00b      	b.n	8006f12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	699b      	ldr	r3, [r3, #24]
 8006f00:	43da      	mvns	r2, r3
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	4013      	ands	r3, r2
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	bf14      	ite	ne
 8006f0c:	2301      	movne	r3, #1
 8006f0e:	2300      	moveq	r3, #0
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d18d      	bne.n	8006e32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006f16:	2300      	movs	r3, #0
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3710      	adds	r7, #16
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	60b9      	str	r1, [r7, #8]
 8006f2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006f2c:	e02d      	b.n	8006f8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006f2e:	68f8      	ldr	r0, [r7, #12]
 8006f30:	f000 f8ce 	bl	80070d0 <I2C_IsAcknowledgeFailed>
 8006f34:	4603      	mov	r3, r0
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d001      	beq.n	8006f3e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e02d      	b.n	8006f9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f44:	d021      	beq.n	8006f8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f46:	f7fd fe71 	bl	8004c2c <HAL_GetTick>
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	1ad3      	subs	r3, r2, r3
 8006f50:	68ba      	ldr	r2, [r7, #8]
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d302      	bcc.n	8006f5c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d116      	bne.n	8006f8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2220      	movs	r2, #32
 8006f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f76:	f043 0220 	orr.w	r2, r3, #32
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	e007      	b.n	8006f9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	695b      	ldr	r3, [r3, #20]
 8006f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f94:	2b80      	cmp	r3, #128	; 0x80
 8006f96:	d1ca      	bne.n	8006f2e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006f98:	2300      	movs	r3, #0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3710      	adds	r7, #16
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}

08006fa2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006fa2:	b580      	push	{r7, lr}
 8006fa4:	b084      	sub	sp, #16
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	60f8      	str	r0, [r7, #12]
 8006faa:	60b9      	str	r1, [r7, #8]
 8006fac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006fae:	e02d      	b.n	800700c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006fb0:	68f8      	ldr	r0, [r7, #12]
 8006fb2:	f000 f88d 	bl	80070d0 <I2C_IsAcknowledgeFailed>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d001      	beq.n	8006fc0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e02d      	b.n	800701c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fc6:	d021      	beq.n	800700c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fc8:	f7fd fe30 	bl	8004c2c <HAL_GetTick>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	1ad3      	subs	r3, r2, r3
 8006fd2:	68ba      	ldr	r2, [r7, #8]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d302      	bcc.n	8006fde <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d116      	bne.n	800700c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2220      	movs	r2, #32
 8006fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff8:	f043 0220 	orr.w	r2, r3, #32
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2200      	movs	r2, #0
 8007004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007008:	2301      	movs	r3, #1
 800700a:	e007      	b.n	800701c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	695b      	ldr	r3, [r3, #20]
 8007012:	f003 0304 	and.w	r3, r3, #4
 8007016:	2b04      	cmp	r3, #4
 8007018:	d1ca      	bne.n	8006fb0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800701a:	2300      	movs	r3, #0
}
 800701c:	4618      	mov	r0, r3
 800701e:	3710      	adds	r7, #16
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	60b9      	str	r1, [r7, #8]
 800702e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007030:	e042      	b.n	80070b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	695b      	ldr	r3, [r3, #20]
 8007038:	f003 0310 	and.w	r3, r3, #16
 800703c:	2b10      	cmp	r3, #16
 800703e:	d119      	bne.n	8007074 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f06f 0210 	mvn.w	r2, #16
 8007048:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2200      	movs	r2, #0
 800704e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2220      	movs	r2, #32
 8007054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2200      	movs	r2, #0
 800705c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2200      	movs	r2, #0
 800706c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007070:	2301      	movs	r3, #1
 8007072:	e029      	b.n	80070c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007074:	f7fd fdda 	bl	8004c2c <HAL_GetTick>
 8007078:	4602      	mov	r2, r0
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	1ad3      	subs	r3, r2, r3
 800707e:	68ba      	ldr	r2, [r7, #8]
 8007080:	429a      	cmp	r2, r3
 8007082:	d302      	bcc.n	800708a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d116      	bne.n	80070b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2200      	movs	r2, #0
 800708e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2220      	movs	r2, #32
 8007094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2200      	movs	r2, #0
 800709c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a4:	f043 0220 	orr.w	r2, r3, #32
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2200      	movs	r2, #0
 80070b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	e007      	b.n	80070c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	695b      	ldr	r3, [r3, #20]
 80070be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070c2:	2b40      	cmp	r3, #64	; 0x40
 80070c4:	d1b5      	bne.n	8007032 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80070c6:	2300      	movs	r3, #0
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3710      	adds	r7, #16
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b083      	sub	sp, #12
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	695b      	ldr	r3, [r3, #20]
 80070de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070e6:	d11b      	bne.n	8007120 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80070f0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2200      	movs	r2, #0
 80070f6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2220      	movs	r2, #32
 80070fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800710c:	f043 0204 	orr.w	r2, r3, #4
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800711c:	2301      	movs	r3, #1
 800711e:	e000      	b.n	8007122 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007120:	2300      	movs	r3, #0
}
 8007122:	4618      	mov	r0, r3
 8007124:	370c      	adds	r7, #12
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr
	...

08007130 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b086      	sub	sp, #24
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d101      	bne.n	8007142 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e25b      	b.n	80075fa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f003 0301 	and.w	r3, r3, #1
 800714a:	2b00      	cmp	r3, #0
 800714c:	d075      	beq.n	800723a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800714e:	4ba3      	ldr	r3, [pc, #652]	; (80073dc <HAL_RCC_OscConfig+0x2ac>)
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	f003 030c 	and.w	r3, r3, #12
 8007156:	2b04      	cmp	r3, #4
 8007158:	d00c      	beq.n	8007174 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800715a:	4ba0      	ldr	r3, [pc, #640]	; (80073dc <HAL_RCC_OscConfig+0x2ac>)
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007162:	2b08      	cmp	r3, #8
 8007164:	d112      	bne.n	800718c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007166:	4b9d      	ldr	r3, [pc, #628]	; (80073dc <HAL_RCC_OscConfig+0x2ac>)
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800716e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007172:	d10b      	bne.n	800718c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007174:	4b99      	ldr	r3, [pc, #612]	; (80073dc <HAL_RCC_OscConfig+0x2ac>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800717c:	2b00      	cmp	r3, #0
 800717e:	d05b      	beq.n	8007238 <HAL_RCC_OscConfig+0x108>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d157      	bne.n	8007238 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	e236      	b.n	80075fa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007194:	d106      	bne.n	80071a4 <HAL_RCC_OscConfig+0x74>
 8007196:	4b91      	ldr	r3, [pc, #580]	; (80073dc <HAL_RCC_OscConfig+0x2ac>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a90      	ldr	r2, [pc, #576]	; (80073dc <HAL_RCC_OscConfig+0x2ac>)
 800719c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071a0:	6013      	str	r3, [r2, #0]
 80071a2:	e01d      	b.n	80071e0 <HAL_RCC_OscConfig+0xb0>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80071ac:	d10c      	bne.n	80071c8 <HAL_RCC_OscConfig+0x98>
 80071ae:	4b8b      	ldr	r3, [pc, #556]	; (80073dc <HAL_RCC_OscConfig+0x2ac>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a8a      	ldr	r2, [pc, #552]	; (80073dc <HAL_RCC_OscConfig+0x2ac>)
 80071b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80071b8:	6013      	str	r3, [r2, #0]
 80071ba:	4b88      	ldr	r3, [pc, #544]	; (80073dc <HAL_RCC_OscConfig+0x2ac>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a87      	ldr	r2, [pc, #540]	; (80073dc <HAL_RCC_OscConfig+0x2ac>)
 80071c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071c4:	6013      	str	r3, [r2, #0]
 80071c6:	e00b      	b.n	80071e0 <HAL_RCC_OscConfig+0xb0>
 80071c8:	4b84      	ldr	r3, [pc, #528]	; (80073dc <HAL_RCC_OscConfig+0x2ac>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a83      	ldr	r2, [pc, #524]	; (80073dc <HAL_RCC_OscConfig+0x2ac>)
 80071ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071d2:	6013      	str	r3, [r2, #0]
 80071d4:	4b81      	ldr	r3, [pc, #516]	; (80073dc <HAL_RCC_OscConfig+0x2ac>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a80      	ldr	r2, [pc, #512]	; (80073dc <HAL_RCC_OscConfig+0x2ac>)
 80071da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80071de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d013      	beq.n	8007210 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071e8:	f7fd fd20 	bl	8004c2c <HAL_GetTick>
 80071ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071ee:	e008      	b.n	8007202 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80071f0:	f7fd fd1c 	bl	8004c2c <HAL_GetTick>
 80071f4:	4602      	mov	r2, r0
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	1ad3      	subs	r3, r2, r3
 80071fa:	2b64      	cmp	r3, #100	; 0x64
 80071fc:	d901      	bls.n	8007202 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80071fe:	2303      	movs	r3, #3
 8007200:	e1fb      	b.n	80075fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007202:	4b76      	ldr	r3, [pc, #472]	; (80073dc <HAL_RCC_OscConfig+0x2ac>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800720a:	2b00      	cmp	r3, #0
 800720c:	d0f0      	beq.n	80071f0 <HAL_RCC_OscConfig+0xc0>
 800720e:	e014      	b.n	800723a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007210:	f7fd fd0c 	bl	8004c2c <HAL_GetTick>
 8007214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007216:	e008      	b.n	800722a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007218:	f7fd fd08 	bl	8004c2c <HAL_GetTick>
 800721c:	4602      	mov	r2, r0
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	1ad3      	subs	r3, r2, r3
 8007222:	2b64      	cmp	r3, #100	; 0x64
 8007224:	d901      	bls.n	800722a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007226:	2303      	movs	r3, #3
 8007228:	e1e7      	b.n	80075fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800722a:	4b6c      	ldr	r3, [pc, #432]	; (80073dc <HAL_RCC_OscConfig+0x2ac>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007232:	2b00      	cmp	r3, #0
 8007234:	d1f0      	bne.n	8007218 <HAL_RCC_OscConfig+0xe8>
 8007236:	e000      	b.n	800723a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007238:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f003 0302 	and.w	r3, r3, #2
 8007242:	2b00      	cmp	r3, #0
 8007244:	d063      	beq.n	800730e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007246:	4b65      	ldr	r3, [pc, #404]	; (80073dc <HAL_RCC_OscConfig+0x2ac>)
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	f003 030c 	and.w	r3, r3, #12
 800724e:	2b00      	cmp	r3, #0
 8007250:	d00b      	beq.n	800726a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007252:	4b62      	ldr	r3, [pc, #392]	; (80073dc <HAL_RCC_OscConfig+0x2ac>)
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800725a:	2b08      	cmp	r3, #8
 800725c:	d11c      	bne.n	8007298 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800725e:	4b5f      	ldr	r3, [pc, #380]	; (80073dc <HAL_RCC_OscConfig+0x2ac>)
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007266:	2b00      	cmp	r3, #0
 8007268:	d116      	bne.n	8007298 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800726a:	4b5c      	ldr	r3, [pc, #368]	; (80073dc <HAL_RCC_OscConfig+0x2ac>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f003 0302 	and.w	r3, r3, #2
 8007272:	2b00      	cmp	r3, #0
 8007274:	d005      	beq.n	8007282 <HAL_RCC_OscConfig+0x152>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	2b01      	cmp	r3, #1
 800727c:	d001      	beq.n	8007282 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	e1bb      	b.n	80075fa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007282:	4b56      	ldr	r3, [pc, #344]	; (80073dc <HAL_RCC_OscConfig+0x2ac>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	691b      	ldr	r3, [r3, #16]
 800728e:	00db      	lsls	r3, r3, #3
 8007290:	4952      	ldr	r1, [pc, #328]	; (80073dc <HAL_RCC_OscConfig+0x2ac>)
 8007292:	4313      	orrs	r3, r2
 8007294:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007296:	e03a      	b.n	800730e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	68db      	ldr	r3, [r3, #12]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d020      	beq.n	80072e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80072a0:	4b4f      	ldr	r3, [pc, #316]	; (80073e0 <HAL_RCC_OscConfig+0x2b0>)
 80072a2:	2201      	movs	r2, #1
 80072a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072a6:	f7fd fcc1 	bl	8004c2c <HAL_GetTick>
 80072aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072ac:	e008      	b.n	80072c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80072ae:	f7fd fcbd 	bl	8004c2c <HAL_GetTick>
 80072b2:	4602      	mov	r2, r0
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	1ad3      	subs	r3, r2, r3
 80072b8:	2b02      	cmp	r3, #2
 80072ba:	d901      	bls.n	80072c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80072bc:	2303      	movs	r3, #3
 80072be:	e19c      	b.n	80075fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072c0:	4b46      	ldr	r3, [pc, #280]	; (80073dc <HAL_RCC_OscConfig+0x2ac>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f003 0302 	and.w	r3, r3, #2
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d0f0      	beq.n	80072ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072cc:	4b43      	ldr	r3, [pc, #268]	; (80073dc <HAL_RCC_OscConfig+0x2ac>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	691b      	ldr	r3, [r3, #16]
 80072d8:	00db      	lsls	r3, r3, #3
 80072da:	4940      	ldr	r1, [pc, #256]	; (80073dc <HAL_RCC_OscConfig+0x2ac>)
 80072dc:	4313      	orrs	r3, r2
 80072de:	600b      	str	r3, [r1, #0]
 80072e0:	e015      	b.n	800730e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80072e2:	4b3f      	ldr	r3, [pc, #252]	; (80073e0 <HAL_RCC_OscConfig+0x2b0>)
 80072e4:	2200      	movs	r2, #0
 80072e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072e8:	f7fd fca0 	bl	8004c2c <HAL_GetTick>
 80072ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80072ee:	e008      	b.n	8007302 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80072f0:	f7fd fc9c 	bl	8004c2c <HAL_GetTick>
 80072f4:	4602      	mov	r2, r0
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	1ad3      	subs	r3, r2, r3
 80072fa:	2b02      	cmp	r3, #2
 80072fc:	d901      	bls.n	8007302 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80072fe:	2303      	movs	r3, #3
 8007300:	e17b      	b.n	80075fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007302:	4b36      	ldr	r3, [pc, #216]	; (80073dc <HAL_RCC_OscConfig+0x2ac>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f003 0302 	and.w	r3, r3, #2
 800730a:	2b00      	cmp	r3, #0
 800730c:	d1f0      	bne.n	80072f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f003 0308 	and.w	r3, r3, #8
 8007316:	2b00      	cmp	r3, #0
 8007318:	d030      	beq.n	800737c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	695b      	ldr	r3, [r3, #20]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d016      	beq.n	8007350 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007322:	4b30      	ldr	r3, [pc, #192]	; (80073e4 <HAL_RCC_OscConfig+0x2b4>)
 8007324:	2201      	movs	r2, #1
 8007326:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007328:	f7fd fc80 	bl	8004c2c <HAL_GetTick>
 800732c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800732e:	e008      	b.n	8007342 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007330:	f7fd fc7c 	bl	8004c2c <HAL_GetTick>
 8007334:	4602      	mov	r2, r0
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	1ad3      	subs	r3, r2, r3
 800733a:	2b02      	cmp	r3, #2
 800733c:	d901      	bls.n	8007342 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800733e:	2303      	movs	r3, #3
 8007340:	e15b      	b.n	80075fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007342:	4b26      	ldr	r3, [pc, #152]	; (80073dc <HAL_RCC_OscConfig+0x2ac>)
 8007344:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007346:	f003 0302 	and.w	r3, r3, #2
 800734a:	2b00      	cmp	r3, #0
 800734c:	d0f0      	beq.n	8007330 <HAL_RCC_OscConfig+0x200>
 800734e:	e015      	b.n	800737c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007350:	4b24      	ldr	r3, [pc, #144]	; (80073e4 <HAL_RCC_OscConfig+0x2b4>)
 8007352:	2200      	movs	r2, #0
 8007354:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007356:	f7fd fc69 	bl	8004c2c <HAL_GetTick>
 800735a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800735c:	e008      	b.n	8007370 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800735e:	f7fd fc65 	bl	8004c2c <HAL_GetTick>
 8007362:	4602      	mov	r2, r0
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	1ad3      	subs	r3, r2, r3
 8007368:	2b02      	cmp	r3, #2
 800736a:	d901      	bls.n	8007370 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800736c:	2303      	movs	r3, #3
 800736e:	e144      	b.n	80075fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007370:	4b1a      	ldr	r3, [pc, #104]	; (80073dc <HAL_RCC_OscConfig+0x2ac>)
 8007372:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007374:	f003 0302 	and.w	r3, r3, #2
 8007378:	2b00      	cmp	r3, #0
 800737a:	d1f0      	bne.n	800735e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f003 0304 	and.w	r3, r3, #4
 8007384:	2b00      	cmp	r3, #0
 8007386:	f000 80a0 	beq.w	80074ca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800738a:	2300      	movs	r3, #0
 800738c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800738e:	4b13      	ldr	r3, [pc, #76]	; (80073dc <HAL_RCC_OscConfig+0x2ac>)
 8007390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007396:	2b00      	cmp	r3, #0
 8007398:	d10f      	bne.n	80073ba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800739a:	2300      	movs	r3, #0
 800739c:	60bb      	str	r3, [r7, #8]
 800739e:	4b0f      	ldr	r3, [pc, #60]	; (80073dc <HAL_RCC_OscConfig+0x2ac>)
 80073a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a2:	4a0e      	ldr	r2, [pc, #56]	; (80073dc <HAL_RCC_OscConfig+0x2ac>)
 80073a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073a8:	6413      	str	r3, [r2, #64]	; 0x40
 80073aa:	4b0c      	ldr	r3, [pc, #48]	; (80073dc <HAL_RCC_OscConfig+0x2ac>)
 80073ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073b2:	60bb      	str	r3, [r7, #8]
 80073b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80073b6:	2301      	movs	r3, #1
 80073b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073ba:	4b0b      	ldr	r3, [pc, #44]	; (80073e8 <HAL_RCC_OscConfig+0x2b8>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d121      	bne.n	800740a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80073c6:	4b08      	ldr	r3, [pc, #32]	; (80073e8 <HAL_RCC_OscConfig+0x2b8>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a07      	ldr	r2, [pc, #28]	; (80073e8 <HAL_RCC_OscConfig+0x2b8>)
 80073cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80073d2:	f7fd fc2b 	bl	8004c2c <HAL_GetTick>
 80073d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073d8:	e011      	b.n	80073fe <HAL_RCC_OscConfig+0x2ce>
 80073da:	bf00      	nop
 80073dc:	40023800 	.word	0x40023800
 80073e0:	42470000 	.word	0x42470000
 80073e4:	42470e80 	.word	0x42470e80
 80073e8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073ec:	f7fd fc1e 	bl	8004c2c <HAL_GetTick>
 80073f0:	4602      	mov	r2, r0
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	1ad3      	subs	r3, r2, r3
 80073f6:	2b02      	cmp	r3, #2
 80073f8:	d901      	bls.n	80073fe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80073fa:	2303      	movs	r3, #3
 80073fc:	e0fd      	b.n	80075fa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073fe:	4b81      	ldr	r3, [pc, #516]	; (8007604 <HAL_RCC_OscConfig+0x4d4>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007406:	2b00      	cmp	r3, #0
 8007408:	d0f0      	beq.n	80073ec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	2b01      	cmp	r3, #1
 8007410:	d106      	bne.n	8007420 <HAL_RCC_OscConfig+0x2f0>
 8007412:	4b7d      	ldr	r3, [pc, #500]	; (8007608 <HAL_RCC_OscConfig+0x4d8>)
 8007414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007416:	4a7c      	ldr	r2, [pc, #496]	; (8007608 <HAL_RCC_OscConfig+0x4d8>)
 8007418:	f043 0301 	orr.w	r3, r3, #1
 800741c:	6713      	str	r3, [r2, #112]	; 0x70
 800741e:	e01c      	b.n	800745a <HAL_RCC_OscConfig+0x32a>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	2b05      	cmp	r3, #5
 8007426:	d10c      	bne.n	8007442 <HAL_RCC_OscConfig+0x312>
 8007428:	4b77      	ldr	r3, [pc, #476]	; (8007608 <HAL_RCC_OscConfig+0x4d8>)
 800742a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800742c:	4a76      	ldr	r2, [pc, #472]	; (8007608 <HAL_RCC_OscConfig+0x4d8>)
 800742e:	f043 0304 	orr.w	r3, r3, #4
 8007432:	6713      	str	r3, [r2, #112]	; 0x70
 8007434:	4b74      	ldr	r3, [pc, #464]	; (8007608 <HAL_RCC_OscConfig+0x4d8>)
 8007436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007438:	4a73      	ldr	r2, [pc, #460]	; (8007608 <HAL_RCC_OscConfig+0x4d8>)
 800743a:	f043 0301 	orr.w	r3, r3, #1
 800743e:	6713      	str	r3, [r2, #112]	; 0x70
 8007440:	e00b      	b.n	800745a <HAL_RCC_OscConfig+0x32a>
 8007442:	4b71      	ldr	r3, [pc, #452]	; (8007608 <HAL_RCC_OscConfig+0x4d8>)
 8007444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007446:	4a70      	ldr	r2, [pc, #448]	; (8007608 <HAL_RCC_OscConfig+0x4d8>)
 8007448:	f023 0301 	bic.w	r3, r3, #1
 800744c:	6713      	str	r3, [r2, #112]	; 0x70
 800744e:	4b6e      	ldr	r3, [pc, #440]	; (8007608 <HAL_RCC_OscConfig+0x4d8>)
 8007450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007452:	4a6d      	ldr	r2, [pc, #436]	; (8007608 <HAL_RCC_OscConfig+0x4d8>)
 8007454:	f023 0304 	bic.w	r3, r3, #4
 8007458:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d015      	beq.n	800748e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007462:	f7fd fbe3 	bl	8004c2c <HAL_GetTick>
 8007466:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007468:	e00a      	b.n	8007480 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800746a:	f7fd fbdf 	bl	8004c2c <HAL_GetTick>
 800746e:	4602      	mov	r2, r0
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	1ad3      	subs	r3, r2, r3
 8007474:	f241 3288 	movw	r2, #5000	; 0x1388
 8007478:	4293      	cmp	r3, r2
 800747a:	d901      	bls.n	8007480 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800747c:	2303      	movs	r3, #3
 800747e:	e0bc      	b.n	80075fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007480:	4b61      	ldr	r3, [pc, #388]	; (8007608 <HAL_RCC_OscConfig+0x4d8>)
 8007482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007484:	f003 0302 	and.w	r3, r3, #2
 8007488:	2b00      	cmp	r3, #0
 800748a:	d0ee      	beq.n	800746a <HAL_RCC_OscConfig+0x33a>
 800748c:	e014      	b.n	80074b8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800748e:	f7fd fbcd 	bl	8004c2c <HAL_GetTick>
 8007492:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007494:	e00a      	b.n	80074ac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007496:	f7fd fbc9 	bl	8004c2c <HAL_GetTick>
 800749a:	4602      	mov	r2, r0
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	1ad3      	subs	r3, r2, r3
 80074a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d901      	bls.n	80074ac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80074a8:	2303      	movs	r3, #3
 80074aa:	e0a6      	b.n	80075fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80074ac:	4b56      	ldr	r3, [pc, #344]	; (8007608 <HAL_RCC_OscConfig+0x4d8>)
 80074ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074b0:	f003 0302 	and.w	r3, r3, #2
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d1ee      	bne.n	8007496 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80074b8:	7dfb      	ldrb	r3, [r7, #23]
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d105      	bne.n	80074ca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074be:	4b52      	ldr	r3, [pc, #328]	; (8007608 <HAL_RCC_OscConfig+0x4d8>)
 80074c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c2:	4a51      	ldr	r2, [pc, #324]	; (8007608 <HAL_RCC_OscConfig+0x4d8>)
 80074c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	699b      	ldr	r3, [r3, #24]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	f000 8092 	beq.w	80075f8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80074d4:	4b4c      	ldr	r3, [pc, #304]	; (8007608 <HAL_RCC_OscConfig+0x4d8>)
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	f003 030c 	and.w	r3, r3, #12
 80074dc:	2b08      	cmp	r3, #8
 80074de:	d05c      	beq.n	800759a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	699b      	ldr	r3, [r3, #24]
 80074e4:	2b02      	cmp	r3, #2
 80074e6:	d141      	bne.n	800756c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074e8:	4b48      	ldr	r3, [pc, #288]	; (800760c <HAL_RCC_OscConfig+0x4dc>)
 80074ea:	2200      	movs	r2, #0
 80074ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074ee:	f7fd fb9d 	bl	8004c2c <HAL_GetTick>
 80074f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074f4:	e008      	b.n	8007508 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074f6:	f7fd fb99 	bl	8004c2c <HAL_GetTick>
 80074fa:	4602      	mov	r2, r0
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	1ad3      	subs	r3, r2, r3
 8007500:	2b02      	cmp	r3, #2
 8007502:	d901      	bls.n	8007508 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007504:	2303      	movs	r3, #3
 8007506:	e078      	b.n	80075fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007508:	4b3f      	ldr	r3, [pc, #252]	; (8007608 <HAL_RCC_OscConfig+0x4d8>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007510:	2b00      	cmp	r3, #0
 8007512:	d1f0      	bne.n	80074f6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	69da      	ldr	r2, [r3, #28]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6a1b      	ldr	r3, [r3, #32]
 800751c:	431a      	orrs	r2, r3
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007522:	019b      	lsls	r3, r3, #6
 8007524:	431a      	orrs	r2, r3
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800752a:	085b      	lsrs	r3, r3, #1
 800752c:	3b01      	subs	r3, #1
 800752e:	041b      	lsls	r3, r3, #16
 8007530:	431a      	orrs	r2, r3
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007536:	061b      	lsls	r3, r3, #24
 8007538:	4933      	ldr	r1, [pc, #204]	; (8007608 <HAL_RCC_OscConfig+0x4d8>)
 800753a:	4313      	orrs	r3, r2
 800753c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800753e:	4b33      	ldr	r3, [pc, #204]	; (800760c <HAL_RCC_OscConfig+0x4dc>)
 8007540:	2201      	movs	r2, #1
 8007542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007544:	f7fd fb72 	bl	8004c2c <HAL_GetTick>
 8007548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800754a:	e008      	b.n	800755e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800754c:	f7fd fb6e 	bl	8004c2c <HAL_GetTick>
 8007550:	4602      	mov	r2, r0
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	1ad3      	subs	r3, r2, r3
 8007556:	2b02      	cmp	r3, #2
 8007558:	d901      	bls.n	800755e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800755a:	2303      	movs	r3, #3
 800755c:	e04d      	b.n	80075fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800755e:	4b2a      	ldr	r3, [pc, #168]	; (8007608 <HAL_RCC_OscConfig+0x4d8>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007566:	2b00      	cmp	r3, #0
 8007568:	d0f0      	beq.n	800754c <HAL_RCC_OscConfig+0x41c>
 800756a:	e045      	b.n	80075f8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800756c:	4b27      	ldr	r3, [pc, #156]	; (800760c <HAL_RCC_OscConfig+0x4dc>)
 800756e:	2200      	movs	r2, #0
 8007570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007572:	f7fd fb5b 	bl	8004c2c <HAL_GetTick>
 8007576:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007578:	e008      	b.n	800758c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800757a:	f7fd fb57 	bl	8004c2c <HAL_GetTick>
 800757e:	4602      	mov	r2, r0
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	1ad3      	subs	r3, r2, r3
 8007584:	2b02      	cmp	r3, #2
 8007586:	d901      	bls.n	800758c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007588:	2303      	movs	r3, #3
 800758a:	e036      	b.n	80075fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800758c:	4b1e      	ldr	r3, [pc, #120]	; (8007608 <HAL_RCC_OscConfig+0x4d8>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007594:	2b00      	cmp	r3, #0
 8007596:	d1f0      	bne.n	800757a <HAL_RCC_OscConfig+0x44a>
 8007598:	e02e      	b.n	80075f8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	699b      	ldr	r3, [r3, #24]
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d101      	bne.n	80075a6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	e029      	b.n	80075fa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80075a6:	4b18      	ldr	r3, [pc, #96]	; (8007608 <HAL_RCC_OscConfig+0x4d8>)
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	69db      	ldr	r3, [r3, #28]
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d11c      	bne.n	80075f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d115      	bne.n	80075f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80075c8:	68fa      	ldr	r2, [r7, #12]
 80075ca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80075ce:	4013      	ands	r3, r2
 80075d0:	687a      	ldr	r2, [r7, #4]
 80075d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d10d      	bne.n	80075f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d106      	bne.n	80075f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d001      	beq.n	80075f8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80075f4:	2301      	movs	r3, #1
 80075f6:	e000      	b.n	80075fa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80075f8:	2300      	movs	r3, #0
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3718      	adds	r7, #24
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}
 8007602:	bf00      	nop
 8007604:	40007000 	.word	0x40007000
 8007608:	40023800 	.word	0x40023800
 800760c:	42470060 	.word	0x42470060

08007610 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d101      	bne.n	8007624 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007620:	2301      	movs	r3, #1
 8007622:	e0cc      	b.n	80077be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007624:	4b68      	ldr	r3, [pc, #416]	; (80077c8 <HAL_RCC_ClockConfig+0x1b8>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f003 030f 	and.w	r3, r3, #15
 800762c:	683a      	ldr	r2, [r7, #0]
 800762e:	429a      	cmp	r2, r3
 8007630:	d90c      	bls.n	800764c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007632:	4b65      	ldr	r3, [pc, #404]	; (80077c8 <HAL_RCC_ClockConfig+0x1b8>)
 8007634:	683a      	ldr	r2, [r7, #0]
 8007636:	b2d2      	uxtb	r2, r2
 8007638:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800763a:	4b63      	ldr	r3, [pc, #396]	; (80077c8 <HAL_RCC_ClockConfig+0x1b8>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f003 030f 	and.w	r3, r3, #15
 8007642:	683a      	ldr	r2, [r7, #0]
 8007644:	429a      	cmp	r2, r3
 8007646:	d001      	beq.n	800764c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007648:	2301      	movs	r3, #1
 800764a:	e0b8      	b.n	80077be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f003 0302 	and.w	r3, r3, #2
 8007654:	2b00      	cmp	r3, #0
 8007656:	d020      	beq.n	800769a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f003 0304 	and.w	r3, r3, #4
 8007660:	2b00      	cmp	r3, #0
 8007662:	d005      	beq.n	8007670 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007664:	4b59      	ldr	r3, [pc, #356]	; (80077cc <HAL_RCC_ClockConfig+0x1bc>)
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	4a58      	ldr	r2, [pc, #352]	; (80077cc <HAL_RCC_ClockConfig+0x1bc>)
 800766a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800766e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f003 0308 	and.w	r3, r3, #8
 8007678:	2b00      	cmp	r3, #0
 800767a:	d005      	beq.n	8007688 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800767c:	4b53      	ldr	r3, [pc, #332]	; (80077cc <HAL_RCC_ClockConfig+0x1bc>)
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	4a52      	ldr	r2, [pc, #328]	; (80077cc <HAL_RCC_ClockConfig+0x1bc>)
 8007682:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007686:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007688:	4b50      	ldr	r3, [pc, #320]	; (80077cc <HAL_RCC_ClockConfig+0x1bc>)
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	494d      	ldr	r1, [pc, #308]	; (80077cc <HAL_RCC_ClockConfig+0x1bc>)
 8007696:	4313      	orrs	r3, r2
 8007698:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f003 0301 	and.w	r3, r3, #1
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d044      	beq.n	8007730 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	d107      	bne.n	80076be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076ae:	4b47      	ldr	r3, [pc, #284]	; (80077cc <HAL_RCC_ClockConfig+0x1bc>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d119      	bne.n	80076ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	e07f      	b.n	80077be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	2b02      	cmp	r3, #2
 80076c4:	d003      	beq.n	80076ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80076ca:	2b03      	cmp	r3, #3
 80076cc:	d107      	bne.n	80076de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076ce:	4b3f      	ldr	r3, [pc, #252]	; (80077cc <HAL_RCC_ClockConfig+0x1bc>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d109      	bne.n	80076ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	e06f      	b.n	80077be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076de:	4b3b      	ldr	r3, [pc, #236]	; (80077cc <HAL_RCC_ClockConfig+0x1bc>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f003 0302 	and.w	r3, r3, #2
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d101      	bne.n	80076ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	e067      	b.n	80077be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80076ee:	4b37      	ldr	r3, [pc, #220]	; (80077cc <HAL_RCC_ClockConfig+0x1bc>)
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	f023 0203 	bic.w	r2, r3, #3
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	4934      	ldr	r1, [pc, #208]	; (80077cc <HAL_RCC_ClockConfig+0x1bc>)
 80076fc:	4313      	orrs	r3, r2
 80076fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007700:	f7fd fa94 	bl	8004c2c <HAL_GetTick>
 8007704:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007706:	e00a      	b.n	800771e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007708:	f7fd fa90 	bl	8004c2c <HAL_GetTick>
 800770c:	4602      	mov	r2, r0
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	1ad3      	subs	r3, r2, r3
 8007712:	f241 3288 	movw	r2, #5000	; 0x1388
 8007716:	4293      	cmp	r3, r2
 8007718:	d901      	bls.n	800771e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800771a:	2303      	movs	r3, #3
 800771c:	e04f      	b.n	80077be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800771e:	4b2b      	ldr	r3, [pc, #172]	; (80077cc <HAL_RCC_ClockConfig+0x1bc>)
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	f003 020c 	and.w	r2, r3, #12
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	429a      	cmp	r2, r3
 800772e:	d1eb      	bne.n	8007708 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007730:	4b25      	ldr	r3, [pc, #148]	; (80077c8 <HAL_RCC_ClockConfig+0x1b8>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f003 030f 	and.w	r3, r3, #15
 8007738:	683a      	ldr	r2, [r7, #0]
 800773a:	429a      	cmp	r2, r3
 800773c:	d20c      	bcs.n	8007758 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800773e:	4b22      	ldr	r3, [pc, #136]	; (80077c8 <HAL_RCC_ClockConfig+0x1b8>)
 8007740:	683a      	ldr	r2, [r7, #0]
 8007742:	b2d2      	uxtb	r2, r2
 8007744:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007746:	4b20      	ldr	r3, [pc, #128]	; (80077c8 <HAL_RCC_ClockConfig+0x1b8>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f003 030f 	and.w	r3, r3, #15
 800774e:	683a      	ldr	r2, [r7, #0]
 8007750:	429a      	cmp	r2, r3
 8007752:	d001      	beq.n	8007758 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007754:	2301      	movs	r3, #1
 8007756:	e032      	b.n	80077be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f003 0304 	and.w	r3, r3, #4
 8007760:	2b00      	cmp	r3, #0
 8007762:	d008      	beq.n	8007776 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007764:	4b19      	ldr	r3, [pc, #100]	; (80077cc <HAL_RCC_ClockConfig+0x1bc>)
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	68db      	ldr	r3, [r3, #12]
 8007770:	4916      	ldr	r1, [pc, #88]	; (80077cc <HAL_RCC_ClockConfig+0x1bc>)
 8007772:	4313      	orrs	r3, r2
 8007774:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f003 0308 	and.w	r3, r3, #8
 800777e:	2b00      	cmp	r3, #0
 8007780:	d009      	beq.n	8007796 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007782:	4b12      	ldr	r3, [pc, #72]	; (80077cc <HAL_RCC_ClockConfig+0x1bc>)
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	691b      	ldr	r3, [r3, #16]
 800778e:	00db      	lsls	r3, r3, #3
 8007790:	490e      	ldr	r1, [pc, #56]	; (80077cc <HAL_RCC_ClockConfig+0x1bc>)
 8007792:	4313      	orrs	r3, r2
 8007794:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007796:	f000 f821 	bl	80077dc <HAL_RCC_GetSysClockFreq>
 800779a:	4601      	mov	r1, r0
 800779c:	4b0b      	ldr	r3, [pc, #44]	; (80077cc <HAL_RCC_ClockConfig+0x1bc>)
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	091b      	lsrs	r3, r3, #4
 80077a2:	f003 030f 	and.w	r3, r3, #15
 80077a6:	4a0a      	ldr	r2, [pc, #40]	; (80077d0 <HAL_RCC_ClockConfig+0x1c0>)
 80077a8:	5cd3      	ldrb	r3, [r2, r3]
 80077aa:	fa21 f303 	lsr.w	r3, r1, r3
 80077ae:	4a09      	ldr	r2, [pc, #36]	; (80077d4 <HAL_RCC_ClockConfig+0x1c4>)
 80077b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80077b2:	4b09      	ldr	r3, [pc, #36]	; (80077d8 <HAL_RCC_ClockConfig+0x1c8>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4618      	mov	r0, r3
 80077b8:	f7fd f9f4 	bl	8004ba4 <HAL_InitTick>

  return HAL_OK;
 80077bc:	2300      	movs	r3, #0
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3710      	adds	r7, #16
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
 80077c6:	bf00      	nop
 80077c8:	40023c00 	.word	0x40023c00
 80077cc:	40023800 	.word	0x40023800
 80077d0:	0800cef0 	.word	0x0800cef0
 80077d4:	20000000 	.word	0x20000000
 80077d8:	20000004 	.word	0x20000004

080077dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80077dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077de:	b085      	sub	sp, #20
 80077e0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80077e2:	2300      	movs	r3, #0
 80077e4:	607b      	str	r3, [r7, #4]
 80077e6:	2300      	movs	r3, #0
 80077e8:	60fb      	str	r3, [r7, #12]
 80077ea:	2300      	movs	r3, #0
 80077ec:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80077ee:	2300      	movs	r3, #0
 80077f0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80077f2:	4b63      	ldr	r3, [pc, #396]	; (8007980 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	f003 030c 	and.w	r3, r3, #12
 80077fa:	2b04      	cmp	r3, #4
 80077fc:	d007      	beq.n	800780e <HAL_RCC_GetSysClockFreq+0x32>
 80077fe:	2b08      	cmp	r3, #8
 8007800:	d008      	beq.n	8007814 <HAL_RCC_GetSysClockFreq+0x38>
 8007802:	2b00      	cmp	r3, #0
 8007804:	f040 80b4 	bne.w	8007970 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007808:	4b5e      	ldr	r3, [pc, #376]	; (8007984 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800780a:	60bb      	str	r3, [r7, #8]
       break;
 800780c:	e0b3      	b.n	8007976 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800780e:	4b5d      	ldr	r3, [pc, #372]	; (8007984 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007810:	60bb      	str	r3, [r7, #8]
      break;
 8007812:	e0b0      	b.n	8007976 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007814:	4b5a      	ldr	r3, [pc, #360]	; (8007980 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800781c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800781e:	4b58      	ldr	r3, [pc, #352]	; (8007980 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007826:	2b00      	cmp	r3, #0
 8007828:	d04a      	beq.n	80078c0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800782a:	4b55      	ldr	r3, [pc, #340]	; (8007980 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	099b      	lsrs	r3, r3, #6
 8007830:	f04f 0400 	mov.w	r4, #0
 8007834:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007838:	f04f 0200 	mov.w	r2, #0
 800783c:	ea03 0501 	and.w	r5, r3, r1
 8007840:	ea04 0602 	and.w	r6, r4, r2
 8007844:	4629      	mov	r1, r5
 8007846:	4632      	mov	r2, r6
 8007848:	f04f 0300 	mov.w	r3, #0
 800784c:	f04f 0400 	mov.w	r4, #0
 8007850:	0154      	lsls	r4, r2, #5
 8007852:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007856:	014b      	lsls	r3, r1, #5
 8007858:	4619      	mov	r1, r3
 800785a:	4622      	mov	r2, r4
 800785c:	1b49      	subs	r1, r1, r5
 800785e:	eb62 0206 	sbc.w	r2, r2, r6
 8007862:	f04f 0300 	mov.w	r3, #0
 8007866:	f04f 0400 	mov.w	r4, #0
 800786a:	0194      	lsls	r4, r2, #6
 800786c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007870:	018b      	lsls	r3, r1, #6
 8007872:	1a5b      	subs	r3, r3, r1
 8007874:	eb64 0402 	sbc.w	r4, r4, r2
 8007878:	f04f 0100 	mov.w	r1, #0
 800787c:	f04f 0200 	mov.w	r2, #0
 8007880:	00e2      	lsls	r2, r4, #3
 8007882:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007886:	00d9      	lsls	r1, r3, #3
 8007888:	460b      	mov	r3, r1
 800788a:	4614      	mov	r4, r2
 800788c:	195b      	adds	r3, r3, r5
 800788e:	eb44 0406 	adc.w	r4, r4, r6
 8007892:	f04f 0100 	mov.w	r1, #0
 8007896:	f04f 0200 	mov.w	r2, #0
 800789a:	02a2      	lsls	r2, r4, #10
 800789c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80078a0:	0299      	lsls	r1, r3, #10
 80078a2:	460b      	mov	r3, r1
 80078a4:	4614      	mov	r4, r2
 80078a6:	4618      	mov	r0, r3
 80078a8:	4621      	mov	r1, r4
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f04f 0400 	mov.w	r4, #0
 80078b0:	461a      	mov	r2, r3
 80078b2:	4623      	mov	r3, r4
 80078b4:	f7f9 fa18 	bl	8000ce8 <__aeabi_uldivmod>
 80078b8:	4603      	mov	r3, r0
 80078ba:	460c      	mov	r4, r1
 80078bc:	60fb      	str	r3, [r7, #12]
 80078be:	e049      	b.n	8007954 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80078c0:	4b2f      	ldr	r3, [pc, #188]	; (8007980 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	099b      	lsrs	r3, r3, #6
 80078c6:	f04f 0400 	mov.w	r4, #0
 80078ca:	f240 11ff 	movw	r1, #511	; 0x1ff
 80078ce:	f04f 0200 	mov.w	r2, #0
 80078d2:	ea03 0501 	and.w	r5, r3, r1
 80078d6:	ea04 0602 	and.w	r6, r4, r2
 80078da:	4629      	mov	r1, r5
 80078dc:	4632      	mov	r2, r6
 80078de:	f04f 0300 	mov.w	r3, #0
 80078e2:	f04f 0400 	mov.w	r4, #0
 80078e6:	0154      	lsls	r4, r2, #5
 80078e8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80078ec:	014b      	lsls	r3, r1, #5
 80078ee:	4619      	mov	r1, r3
 80078f0:	4622      	mov	r2, r4
 80078f2:	1b49      	subs	r1, r1, r5
 80078f4:	eb62 0206 	sbc.w	r2, r2, r6
 80078f8:	f04f 0300 	mov.w	r3, #0
 80078fc:	f04f 0400 	mov.w	r4, #0
 8007900:	0194      	lsls	r4, r2, #6
 8007902:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007906:	018b      	lsls	r3, r1, #6
 8007908:	1a5b      	subs	r3, r3, r1
 800790a:	eb64 0402 	sbc.w	r4, r4, r2
 800790e:	f04f 0100 	mov.w	r1, #0
 8007912:	f04f 0200 	mov.w	r2, #0
 8007916:	00e2      	lsls	r2, r4, #3
 8007918:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800791c:	00d9      	lsls	r1, r3, #3
 800791e:	460b      	mov	r3, r1
 8007920:	4614      	mov	r4, r2
 8007922:	195b      	adds	r3, r3, r5
 8007924:	eb44 0406 	adc.w	r4, r4, r6
 8007928:	f04f 0100 	mov.w	r1, #0
 800792c:	f04f 0200 	mov.w	r2, #0
 8007930:	02a2      	lsls	r2, r4, #10
 8007932:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007936:	0299      	lsls	r1, r3, #10
 8007938:	460b      	mov	r3, r1
 800793a:	4614      	mov	r4, r2
 800793c:	4618      	mov	r0, r3
 800793e:	4621      	mov	r1, r4
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f04f 0400 	mov.w	r4, #0
 8007946:	461a      	mov	r2, r3
 8007948:	4623      	mov	r3, r4
 800794a:	f7f9 f9cd 	bl	8000ce8 <__aeabi_uldivmod>
 800794e:	4603      	mov	r3, r0
 8007950:	460c      	mov	r4, r1
 8007952:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007954:	4b0a      	ldr	r3, [pc, #40]	; (8007980 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	0c1b      	lsrs	r3, r3, #16
 800795a:	f003 0303 	and.w	r3, r3, #3
 800795e:	3301      	adds	r3, #1
 8007960:	005b      	lsls	r3, r3, #1
 8007962:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007964:	68fa      	ldr	r2, [r7, #12]
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	fbb2 f3f3 	udiv	r3, r2, r3
 800796c:	60bb      	str	r3, [r7, #8]
      break;
 800796e:	e002      	b.n	8007976 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007970:	4b04      	ldr	r3, [pc, #16]	; (8007984 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007972:	60bb      	str	r3, [r7, #8]
      break;
 8007974:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007976:	68bb      	ldr	r3, [r7, #8]
}
 8007978:	4618      	mov	r0, r3
 800797a:	3714      	adds	r7, #20
 800797c:	46bd      	mov	sp, r7
 800797e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007980:	40023800 	.word	0x40023800
 8007984:	00f42400 	.word	0x00f42400

08007988 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007988:	b480      	push	{r7}
 800798a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800798c:	4b03      	ldr	r3, [pc, #12]	; (800799c <HAL_RCC_GetHCLKFreq+0x14>)
 800798e:	681b      	ldr	r3, [r3, #0]
}
 8007990:	4618      	mov	r0, r3
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr
 800799a:	bf00      	nop
 800799c:	20000000 	.word	0x20000000

080079a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80079a4:	f7ff fff0 	bl	8007988 <HAL_RCC_GetHCLKFreq>
 80079a8:	4601      	mov	r1, r0
 80079aa:	4b05      	ldr	r3, [pc, #20]	; (80079c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	0a9b      	lsrs	r3, r3, #10
 80079b0:	f003 0307 	and.w	r3, r3, #7
 80079b4:	4a03      	ldr	r2, [pc, #12]	; (80079c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80079b6:	5cd3      	ldrb	r3, [r2, r3]
 80079b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80079bc:	4618      	mov	r0, r3
 80079be:	bd80      	pop	{r7, pc}
 80079c0:	40023800 	.word	0x40023800
 80079c4:	0800cf00 	.word	0x0800cf00

080079c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80079cc:	f7ff ffdc 	bl	8007988 <HAL_RCC_GetHCLKFreq>
 80079d0:	4601      	mov	r1, r0
 80079d2:	4b05      	ldr	r3, [pc, #20]	; (80079e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	0b5b      	lsrs	r3, r3, #13
 80079d8:	f003 0307 	and.w	r3, r3, #7
 80079dc:	4a03      	ldr	r2, [pc, #12]	; (80079ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80079de:	5cd3      	ldrb	r3, [r2, r3]
 80079e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	bd80      	pop	{r7, pc}
 80079e8:	40023800 	.word	0x40023800
 80079ec:	0800cf00 	.word	0x0800cf00

080079f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d101      	bne.n	8007a02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80079fe:	2301      	movs	r3, #1
 8007a00:	e01d      	b.n	8007a3e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d106      	bne.n	8007a1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2200      	movs	r2, #0
 8007a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f7fc fcb6 	bl	8004388 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2202      	movs	r2, #2
 8007a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681a      	ldr	r2, [r3, #0]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	3304      	adds	r3, #4
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	4610      	mov	r0, r2
 8007a30:	f000 fd12 	bl	8008458 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2201      	movs	r2, #1
 8007a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a3c:	2300      	movs	r3, #0
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3708      	adds	r7, #8
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}

08007a46 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007a46:	b480      	push	{r7}
 8007a48:	b085      	sub	sp, #20
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2202      	movs	r2, #2
 8007a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	689b      	ldr	r3, [r3, #8]
 8007a5c:	f003 0307 	and.w	r3, r3, #7
 8007a60:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2b06      	cmp	r3, #6
 8007a66:	d007      	beq.n	8007a78 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	681a      	ldr	r2, [r3, #0]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f042 0201 	orr.w	r2, r2, #1
 8007a76:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007a80:	2300      	movs	r3, #0
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3714      	adds	r7, #20
 8007a86:	46bd      	mov	sp, r7
 8007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8c:	4770      	bx	lr

08007a8e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007a8e:	b480      	push	{r7}
 8007a90:	b085      	sub	sp, #20
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	68da      	ldr	r2, [r3, #12]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f042 0201 	orr.w	r2, r2, #1
 8007aa4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	689b      	ldr	r3, [r3, #8]
 8007aac:	f003 0307 	and.w	r3, r3, #7
 8007ab0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2b06      	cmp	r3, #6
 8007ab6:	d007      	beq.n	8007ac8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f042 0201 	orr.w	r2, r2, #1
 8007ac6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007ac8:	2300      	movs	r3, #0
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3714      	adds	r7, #20
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad4:	4770      	bx	lr

08007ad6 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007ad6:	b480      	push	{r7}
 8007ad8:	b083      	sub	sp, #12
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	68da      	ldr	r2, [r3, #12]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f022 0201 	bic.w	r2, r2, #1
 8007aec:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	6a1a      	ldr	r2, [r3, #32]
 8007af4:	f241 1311 	movw	r3, #4369	; 0x1111
 8007af8:	4013      	ands	r3, r2
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d10f      	bne.n	8007b1e <HAL_TIM_Base_Stop_IT+0x48>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	6a1a      	ldr	r2, [r3, #32]
 8007b04:	f240 4344 	movw	r3, #1092	; 0x444
 8007b08:	4013      	ands	r3, r2
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d107      	bne.n	8007b1e <HAL_TIM_Base_Stop_IT+0x48>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f022 0201 	bic.w	r2, r2, #1
 8007b1c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007b1e:	2300      	movs	r3, #0
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	370c      	adds	r7, #12
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr

08007b2c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b082      	sub	sp, #8
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d101      	bne.n	8007b3e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	e01d      	b.n	8007b7a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b44:	b2db      	uxtb	r3, r3
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d106      	bne.n	8007b58 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 f815 	bl	8007b82 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2202      	movs	r2, #2
 8007b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	3304      	adds	r3, #4
 8007b68:	4619      	mov	r1, r3
 8007b6a:	4610      	mov	r0, r2
 8007b6c:	f000 fc74 	bl	8008458 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2201      	movs	r2, #1
 8007b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b78:	2300      	movs	r3, #0
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3708      	adds	r7, #8
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}

08007b82 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007b82:	b480      	push	{r7}
 8007b84:	b083      	sub	sp, #12
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007b8a:	bf00      	nop
 8007b8c:	370c      	adds	r7, #12
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b94:	4770      	bx	lr
	...

08007b98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b084      	sub	sp, #16
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	6839      	ldr	r1, [r7, #0]
 8007baa:	4618      	mov	r0, r3
 8007bac:	f001 f868 	bl	8008c80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a15      	ldr	r2, [pc, #84]	; (8007c0c <HAL_TIM_PWM_Start+0x74>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d004      	beq.n	8007bc4 <HAL_TIM_PWM_Start+0x2c>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a14      	ldr	r2, [pc, #80]	; (8007c10 <HAL_TIM_PWM_Start+0x78>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d101      	bne.n	8007bc8 <HAL_TIM_PWM_Start+0x30>
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	e000      	b.n	8007bca <HAL_TIM_PWM_Start+0x32>
 8007bc8:	2300      	movs	r3, #0
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d007      	beq.n	8007bde <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007bdc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	f003 0307 	and.w	r3, r3, #7
 8007be8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2b06      	cmp	r3, #6
 8007bee:	d007      	beq.n	8007c00 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	681a      	ldr	r2, [r3, #0]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f042 0201 	orr.w	r2, r2, #1
 8007bfe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007c00:	2300      	movs	r3, #0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3710      	adds	r7, #16
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	40010000 	.word	0x40010000
 8007c10:	40010400 	.word	0x40010400

08007c14 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b082      	sub	sp, #8
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d101      	bne.n	8007c26 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007c22:	2301      	movs	r3, #1
 8007c24:	e01d      	b.n	8007c62 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c2c:	b2db      	uxtb	r3, r3
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d106      	bne.n	8007c40 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 f815 	bl	8007c6a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2202      	movs	r2, #2
 8007c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	3304      	adds	r3, #4
 8007c50:	4619      	mov	r1, r3
 8007c52:	4610      	mov	r0, r2
 8007c54:	f000 fc00 	bl	8008458 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c60:	2300      	movs	r3, #0
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3708      	adds	r7, #8
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}

08007c6a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007c6a:	b480      	push	{r7}
 8007c6c:	b083      	sub	sp, #12
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007c72:	bf00      	nop
 8007c74:	370c      	adds	r7, #12
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr
	...

08007c80 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	2b0c      	cmp	r3, #12
 8007c8e:	d841      	bhi.n	8007d14 <HAL_TIM_IC_Start_IT+0x94>
 8007c90:	a201      	add	r2, pc, #4	; (adr r2, 8007c98 <HAL_TIM_IC_Start_IT+0x18>)
 8007c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c96:	bf00      	nop
 8007c98:	08007ccd 	.word	0x08007ccd
 8007c9c:	08007d15 	.word	0x08007d15
 8007ca0:	08007d15 	.word	0x08007d15
 8007ca4:	08007d15 	.word	0x08007d15
 8007ca8:	08007cdf 	.word	0x08007cdf
 8007cac:	08007d15 	.word	0x08007d15
 8007cb0:	08007d15 	.word	0x08007d15
 8007cb4:	08007d15 	.word	0x08007d15
 8007cb8:	08007cf1 	.word	0x08007cf1
 8007cbc:	08007d15 	.word	0x08007d15
 8007cc0:	08007d15 	.word	0x08007d15
 8007cc4:	08007d15 	.word	0x08007d15
 8007cc8:	08007d03 	.word	0x08007d03
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	68da      	ldr	r2, [r3, #12]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f042 0202 	orr.w	r2, r2, #2
 8007cda:	60da      	str	r2, [r3, #12]
      break;
 8007cdc:	e01b      	b.n	8007d16 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	68da      	ldr	r2, [r3, #12]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f042 0204 	orr.w	r2, r2, #4
 8007cec:	60da      	str	r2, [r3, #12]
      break;
 8007cee:	e012      	b.n	8007d16 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	68da      	ldr	r2, [r3, #12]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f042 0208 	orr.w	r2, r2, #8
 8007cfe:	60da      	str	r2, [r3, #12]
      break;
 8007d00:	e009      	b.n	8007d16 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	68da      	ldr	r2, [r3, #12]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f042 0210 	orr.w	r2, r2, #16
 8007d10:	60da      	str	r2, [r3, #12]
      break;
 8007d12:	e000      	b.n	8007d16 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8007d14:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	6839      	ldr	r1, [r7, #0]
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f000 ffae 	bl	8008c80 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	f003 0307 	and.w	r3, r3, #7
 8007d2e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2b06      	cmp	r3, #6
 8007d34:	d007      	beq.n	8007d46 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f042 0201 	orr.w	r2, r2, #1
 8007d44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007d46:	2300      	movs	r3, #0
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3710      	adds	r7, #16
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	691b      	ldr	r3, [r3, #16]
 8007d5e:	f003 0302 	and.w	r3, r3, #2
 8007d62:	2b02      	cmp	r3, #2
 8007d64:	d122      	bne.n	8007dac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	68db      	ldr	r3, [r3, #12]
 8007d6c:	f003 0302 	and.w	r3, r3, #2
 8007d70:	2b02      	cmp	r3, #2
 8007d72:	d11b      	bne.n	8007dac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f06f 0202 	mvn.w	r2, #2
 8007d7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2201      	movs	r2, #1
 8007d82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	699b      	ldr	r3, [r3, #24]
 8007d8a:	f003 0303 	and.w	r3, r3, #3
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d003      	beq.n	8007d9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f7fb fc10 	bl	80035b8 <HAL_TIM_IC_CaptureCallback>
 8007d98:	e005      	b.n	8007da6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 fb3e 	bl	800841c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 fb45 	bl	8008430 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	691b      	ldr	r3, [r3, #16]
 8007db2:	f003 0304 	and.w	r3, r3, #4
 8007db6:	2b04      	cmp	r3, #4
 8007db8:	d122      	bne.n	8007e00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	f003 0304 	and.w	r3, r3, #4
 8007dc4:	2b04      	cmp	r3, #4
 8007dc6:	d11b      	bne.n	8007e00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f06f 0204 	mvn.w	r2, #4
 8007dd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2202      	movs	r2, #2
 8007dd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	699b      	ldr	r3, [r3, #24]
 8007dde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d003      	beq.n	8007dee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f7fb fbe6 	bl	80035b8 <HAL_TIM_IC_CaptureCallback>
 8007dec:	e005      	b.n	8007dfa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 fb14 	bl	800841c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f000 fb1b 	bl	8008430 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	691b      	ldr	r3, [r3, #16]
 8007e06:	f003 0308 	and.w	r3, r3, #8
 8007e0a:	2b08      	cmp	r3, #8
 8007e0c:	d122      	bne.n	8007e54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	68db      	ldr	r3, [r3, #12]
 8007e14:	f003 0308 	and.w	r3, r3, #8
 8007e18:	2b08      	cmp	r3, #8
 8007e1a:	d11b      	bne.n	8007e54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f06f 0208 	mvn.w	r2, #8
 8007e24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2204      	movs	r2, #4
 8007e2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	69db      	ldr	r3, [r3, #28]
 8007e32:	f003 0303 	and.w	r3, r3, #3
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d003      	beq.n	8007e42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f7fb fbbc 	bl	80035b8 <HAL_TIM_IC_CaptureCallback>
 8007e40:	e005      	b.n	8007e4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 faea 	bl	800841c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 faf1 	bl	8008430 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	691b      	ldr	r3, [r3, #16]
 8007e5a:	f003 0310 	and.w	r3, r3, #16
 8007e5e:	2b10      	cmp	r3, #16
 8007e60:	d122      	bne.n	8007ea8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	68db      	ldr	r3, [r3, #12]
 8007e68:	f003 0310 	and.w	r3, r3, #16
 8007e6c:	2b10      	cmp	r3, #16
 8007e6e:	d11b      	bne.n	8007ea8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f06f 0210 	mvn.w	r2, #16
 8007e78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2208      	movs	r2, #8
 8007e7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	69db      	ldr	r3, [r3, #28]
 8007e86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d003      	beq.n	8007e96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f7fb fb92 	bl	80035b8 <HAL_TIM_IC_CaptureCallback>
 8007e94:	e005      	b.n	8007ea2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 fac0 	bl	800841c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 fac7 	bl	8008430 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	691b      	ldr	r3, [r3, #16]
 8007eae:	f003 0301 	and.w	r3, r3, #1
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d10e      	bne.n	8007ed4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	68db      	ldr	r3, [r3, #12]
 8007ebc:	f003 0301 	and.w	r3, r3, #1
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d107      	bne.n	8007ed4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f06f 0201 	mvn.w	r2, #1
 8007ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f7fb fae8 	bl	80034a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	691b      	ldr	r3, [r3, #16]
 8007eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ede:	2b80      	cmp	r3, #128	; 0x80
 8007ee0:	d10e      	bne.n	8007f00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	68db      	ldr	r3, [r3, #12]
 8007ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eec:	2b80      	cmp	r3, #128	; 0x80
 8007eee:	d107      	bne.n	8007f00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007ef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 ff6c 	bl	8008dd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	691b      	ldr	r3, [r3, #16]
 8007f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f0a:	2b40      	cmp	r3, #64	; 0x40
 8007f0c:	d10e      	bne.n	8007f2c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	68db      	ldr	r3, [r3, #12]
 8007f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f18:	2b40      	cmp	r3, #64	; 0x40
 8007f1a:	d107      	bne.n	8007f2c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 fa8c 	bl	8008444 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	691b      	ldr	r3, [r3, #16]
 8007f32:	f003 0320 	and.w	r3, r3, #32
 8007f36:	2b20      	cmp	r3, #32
 8007f38:	d10e      	bne.n	8007f58 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	68db      	ldr	r3, [r3, #12]
 8007f40:	f003 0320 	and.w	r3, r3, #32
 8007f44:	2b20      	cmp	r3, #32
 8007f46:	d107      	bne.n	8007f58 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f06f 0220 	mvn.w	r2, #32
 8007f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 ff36 	bl	8008dc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f58:	bf00      	nop
 8007f5a:	3708      	adds	r7, #8
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b084      	sub	sp, #16
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	60f8      	str	r0, [r7, #12]
 8007f68:	60b9      	str	r1, [r7, #8]
 8007f6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d101      	bne.n	8007f7a <HAL_TIM_IC_ConfigChannel+0x1a>
 8007f76:	2302      	movs	r3, #2
 8007f78:	e08a      	b.n	8008090 <HAL_TIM_IC_ConfigChannel+0x130>
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2202      	movs	r2, #2
 8007f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d11b      	bne.n	8007fc8 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	6818      	ldr	r0, [r3, #0]
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	6819      	ldr	r1, [r3, #0]
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	685a      	ldr	r2, [r3, #4]
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	f000 fcaa 	bl	80088f8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	699a      	ldr	r2, [r3, #24]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f022 020c 	bic.w	r2, r2, #12
 8007fb2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	6999      	ldr	r1, [r3, #24]
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	689a      	ldr	r2, [r3, #8]
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	430a      	orrs	r2, r1
 8007fc4:	619a      	str	r2, [r3, #24]
 8007fc6:	e05a      	b.n	800807e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2b04      	cmp	r3, #4
 8007fcc:	d11c      	bne.n	8008008 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	6818      	ldr	r0, [r3, #0]
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	6819      	ldr	r1, [r3, #0]
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	685a      	ldr	r2, [r3, #4]
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	68db      	ldr	r3, [r3, #12]
 8007fde:	f000 fd2e 	bl	8008a3e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	699a      	ldr	r2, [r3, #24]
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007ff0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	6999      	ldr	r1, [r3, #24]
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	689b      	ldr	r3, [r3, #8]
 8007ffc:	021a      	lsls	r2, r3, #8
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	430a      	orrs	r2, r1
 8008004:	619a      	str	r2, [r3, #24]
 8008006:	e03a      	b.n	800807e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2b08      	cmp	r3, #8
 800800c:	d11b      	bne.n	8008046 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	6818      	ldr	r0, [r3, #0]
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	6819      	ldr	r1, [r3, #0]
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	685a      	ldr	r2, [r3, #4]
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	68db      	ldr	r3, [r3, #12]
 800801e:	f000 fd7b 	bl	8008b18 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	69da      	ldr	r2, [r3, #28]
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f022 020c 	bic.w	r2, r2, #12
 8008030:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	69d9      	ldr	r1, [r3, #28]
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	689a      	ldr	r2, [r3, #8]
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	430a      	orrs	r2, r1
 8008042:	61da      	str	r2, [r3, #28]
 8008044:	e01b      	b.n	800807e <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	6818      	ldr	r0, [r3, #0]
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	6819      	ldr	r1, [r3, #0]
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	685a      	ldr	r2, [r3, #4]
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	68db      	ldr	r3, [r3, #12]
 8008056:	f000 fd9b 	bl	8008b90 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	69da      	ldr	r2, [r3, #28]
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008068:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	69d9      	ldr	r1, [r3, #28]
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	021a      	lsls	r2, r3, #8
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	430a      	orrs	r2, r1
 800807c:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2201      	movs	r2, #1
 8008082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2200      	movs	r2, #0
 800808a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800808e:	2300      	movs	r3, #0
}
 8008090:	4618      	mov	r0, r3
 8008092:	3710      	adds	r7, #16
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	60f8      	str	r0, [r7, #12]
 80080a0:	60b9      	str	r1, [r7, #8]
 80080a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080aa:	2b01      	cmp	r3, #1
 80080ac:	d101      	bne.n	80080b2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80080ae:	2302      	movs	r3, #2
 80080b0:	e0b4      	b.n	800821c <HAL_TIM_PWM_ConfigChannel+0x184>
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2201      	movs	r2, #1
 80080b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2202      	movs	r2, #2
 80080be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2b0c      	cmp	r3, #12
 80080c6:	f200 809f 	bhi.w	8008208 <HAL_TIM_PWM_ConfigChannel+0x170>
 80080ca:	a201      	add	r2, pc, #4	; (adr r2, 80080d0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80080cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080d0:	08008105 	.word	0x08008105
 80080d4:	08008209 	.word	0x08008209
 80080d8:	08008209 	.word	0x08008209
 80080dc:	08008209 	.word	0x08008209
 80080e0:	08008145 	.word	0x08008145
 80080e4:	08008209 	.word	0x08008209
 80080e8:	08008209 	.word	0x08008209
 80080ec:	08008209 	.word	0x08008209
 80080f0:	08008187 	.word	0x08008187
 80080f4:	08008209 	.word	0x08008209
 80080f8:	08008209 	.word	0x08008209
 80080fc:	08008209 	.word	0x08008209
 8008100:	080081c7 	.word	0x080081c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	68b9      	ldr	r1, [r7, #8]
 800810a:	4618      	mov	r0, r3
 800810c:	f000 fa44 	bl	8008598 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	699a      	ldr	r2, [r3, #24]
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f042 0208 	orr.w	r2, r2, #8
 800811e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	699a      	ldr	r2, [r3, #24]
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f022 0204 	bic.w	r2, r2, #4
 800812e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	6999      	ldr	r1, [r3, #24]
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	691a      	ldr	r2, [r3, #16]
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	430a      	orrs	r2, r1
 8008140:	619a      	str	r2, [r3, #24]
      break;
 8008142:	e062      	b.n	800820a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	68b9      	ldr	r1, [r7, #8]
 800814a:	4618      	mov	r0, r3
 800814c:	f000 fa94 	bl	8008678 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	699a      	ldr	r2, [r3, #24]
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800815e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	699a      	ldr	r2, [r3, #24]
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800816e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	6999      	ldr	r1, [r3, #24]
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	691b      	ldr	r3, [r3, #16]
 800817a:	021a      	lsls	r2, r3, #8
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	430a      	orrs	r2, r1
 8008182:	619a      	str	r2, [r3, #24]
      break;
 8008184:	e041      	b.n	800820a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	68b9      	ldr	r1, [r7, #8]
 800818c:	4618      	mov	r0, r3
 800818e:	f000 fae9 	bl	8008764 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	69da      	ldr	r2, [r3, #28]
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f042 0208 	orr.w	r2, r2, #8
 80081a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	69da      	ldr	r2, [r3, #28]
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f022 0204 	bic.w	r2, r2, #4
 80081b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	69d9      	ldr	r1, [r3, #28]
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	691a      	ldr	r2, [r3, #16]
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	430a      	orrs	r2, r1
 80081c2:	61da      	str	r2, [r3, #28]
      break;
 80081c4:	e021      	b.n	800820a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	68b9      	ldr	r1, [r7, #8]
 80081cc:	4618      	mov	r0, r3
 80081ce:	f000 fb3d 	bl	800884c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	69da      	ldr	r2, [r3, #28]
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80081e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	69da      	ldr	r2, [r3, #28]
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	69d9      	ldr	r1, [r3, #28]
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	691b      	ldr	r3, [r3, #16]
 80081fc:	021a      	lsls	r2, r3, #8
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	430a      	orrs	r2, r1
 8008204:	61da      	str	r2, [r3, #28]
      break;
 8008206:	e000      	b.n	800820a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8008208:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2201      	movs	r2, #1
 800820e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2200      	movs	r2, #0
 8008216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800821a:	2300      	movs	r3, #0
}
 800821c:	4618      	mov	r0, r3
 800821e:	3710      	adds	r7, #16
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b084      	sub	sp, #16
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008234:	2b01      	cmp	r3, #1
 8008236:	d101      	bne.n	800823c <HAL_TIM_ConfigClockSource+0x18>
 8008238:	2302      	movs	r3, #2
 800823a:	e0a6      	b.n	800838a <HAL_TIM_ConfigClockSource+0x166>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2201      	movs	r2, #1
 8008240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2202      	movs	r2, #2
 8008248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	689b      	ldr	r3, [r3, #8]
 8008252:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800825a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008262:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	68fa      	ldr	r2, [r7, #12]
 800826a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	2b40      	cmp	r3, #64	; 0x40
 8008272:	d067      	beq.n	8008344 <HAL_TIM_ConfigClockSource+0x120>
 8008274:	2b40      	cmp	r3, #64	; 0x40
 8008276:	d80b      	bhi.n	8008290 <HAL_TIM_ConfigClockSource+0x6c>
 8008278:	2b10      	cmp	r3, #16
 800827a:	d073      	beq.n	8008364 <HAL_TIM_ConfigClockSource+0x140>
 800827c:	2b10      	cmp	r3, #16
 800827e:	d802      	bhi.n	8008286 <HAL_TIM_ConfigClockSource+0x62>
 8008280:	2b00      	cmp	r3, #0
 8008282:	d06f      	beq.n	8008364 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008284:	e078      	b.n	8008378 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008286:	2b20      	cmp	r3, #32
 8008288:	d06c      	beq.n	8008364 <HAL_TIM_ConfigClockSource+0x140>
 800828a:	2b30      	cmp	r3, #48	; 0x30
 800828c:	d06a      	beq.n	8008364 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800828e:	e073      	b.n	8008378 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008290:	2b70      	cmp	r3, #112	; 0x70
 8008292:	d00d      	beq.n	80082b0 <HAL_TIM_ConfigClockSource+0x8c>
 8008294:	2b70      	cmp	r3, #112	; 0x70
 8008296:	d804      	bhi.n	80082a2 <HAL_TIM_ConfigClockSource+0x7e>
 8008298:	2b50      	cmp	r3, #80	; 0x50
 800829a:	d033      	beq.n	8008304 <HAL_TIM_ConfigClockSource+0xe0>
 800829c:	2b60      	cmp	r3, #96	; 0x60
 800829e:	d041      	beq.n	8008324 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80082a0:	e06a      	b.n	8008378 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80082a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082a6:	d066      	beq.n	8008376 <HAL_TIM_ConfigClockSource+0x152>
 80082a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082ac:	d017      	beq.n	80082de <HAL_TIM_ConfigClockSource+0xba>
      break;
 80082ae:	e063      	b.n	8008378 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6818      	ldr	r0, [r3, #0]
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	6899      	ldr	r1, [r3, #8]
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	685a      	ldr	r2, [r3, #4]
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	68db      	ldr	r3, [r3, #12]
 80082c0:	f000 fcbe 	bl	8008c40 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	689b      	ldr	r3, [r3, #8]
 80082ca:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80082d2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	68fa      	ldr	r2, [r7, #12]
 80082da:	609a      	str	r2, [r3, #8]
      break;
 80082dc:	e04c      	b.n	8008378 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6818      	ldr	r0, [r3, #0]
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	6899      	ldr	r1, [r3, #8]
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	685a      	ldr	r2, [r3, #4]
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	68db      	ldr	r3, [r3, #12]
 80082ee:	f000 fca7 	bl	8008c40 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	689a      	ldr	r2, [r3, #8]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008300:	609a      	str	r2, [r3, #8]
      break;
 8008302:	e039      	b.n	8008378 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6818      	ldr	r0, [r3, #0]
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	6859      	ldr	r1, [r3, #4]
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	68db      	ldr	r3, [r3, #12]
 8008310:	461a      	mov	r2, r3
 8008312:	f000 fb65 	bl	80089e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	2150      	movs	r1, #80	; 0x50
 800831c:	4618      	mov	r0, r3
 800831e:	f000 fc74 	bl	8008c0a <TIM_ITRx_SetConfig>
      break;
 8008322:	e029      	b.n	8008378 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6818      	ldr	r0, [r3, #0]
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	6859      	ldr	r1, [r3, #4]
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	68db      	ldr	r3, [r3, #12]
 8008330:	461a      	mov	r2, r3
 8008332:	f000 fbc1 	bl	8008ab8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	2160      	movs	r1, #96	; 0x60
 800833c:	4618      	mov	r0, r3
 800833e:	f000 fc64 	bl	8008c0a <TIM_ITRx_SetConfig>
      break;
 8008342:	e019      	b.n	8008378 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6818      	ldr	r0, [r3, #0]
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	6859      	ldr	r1, [r3, #4]
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	68db      	ldr	r3, [r3, #12]
 8008350:	461a      	mov	r2, r3
 8008352:	f000 fb45 	bl	80089e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	2140      	movs	r1, #64	; 0x40
 800835c:	4618      	mov	r0, r3
 800835e:	f000 fc54 	bl	8008c0a <TIM_ITRx_SetConfig>
      break;
 8008362:	e009      	b.n	8008378 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681a      	ldr	r2, [r3, #0]
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4619      	mov	r1, r3
 800836e:	4610      	mov	r0, r2
 8008370:	f000 fc4b 	bl	8008c0a <TIM_ITRx_SetConfig>
      break;
 8008374:	e000      	b.n	8008378 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8008376:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2201      	movs	r2, #1
 800837c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2200      	movs	r2, #0
 8008384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008388:	2300      	movs	r3, #0
}
 800838a:	4618      	mov	r0, r3
 800838c:	3710      	adds	r7, #16
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}
	...

08008394 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008394:	b480      	push	{r7}
 8008396:	b085      	sub	sp, #20
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800839e:	2300      	movs	r3, #0
 80083a0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	2b0c      	cmp	r3, #12
 80083a6:	d831      	bhi.n	800840c <HAL_TIM_ReadCapturedValue+0x78>
 80083a8:	a201      	add	r2, pc, #4	; (adr r2, 80083b0 <HAL_TIM_ReadCapturedValue+0x1c>)
 80083aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ae:	bf00      	nop
 80083b0:	080083e5 	.word	0x080083e5
 80083b4:	0800840d 	.word	0x0800840d
 80083b8:	0800840d 	.word	0x0800840d
 80083bc:	0800840d 	.word	0x0800840d
 80083c0:	080083ef 	.word	0x080083ef
 80083c4:	0800840d 	.word	0x0800840d
 80083c8:	0800840d 	.word	0x0800840d
 80083cc:	0800840d 	.word	0x0800840d
 80083d0:	080083f9 	.word	0x080083f9
 80083d4:	0800840d 	.word	0x0800840d
 80083d8:	0800840d 	.word	0x0800840d
 80083dc:	0800840d 	.word	0x0800840d
 80083e0:	08008403 	.word	0x08008403
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083ea:	60fb      	str	r3, [r7, #12]

      break;
 80083ec:	e00f      	b.n	800840e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083f4:	60fb      	str	r3, [r7, #12]

      break;
 80083f6:	e00a      	b.n	800840e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083fe:	60fb      	str	r3, [r7, #12]

      break;
 8008400:	e005      	b.n	800840e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008408:	60fb      	str	r3, [r7, #12]

      break;
 800840a:	e000      	b.n	800840e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800840c:	bf00      	nop
  }

  return tmpreg;
 800840e:	68fb      	ldr	r3, [r7, #12]
}
 8008410:	4618      	mov	r0, r3
 8008412:	3714      	adds	r7, #20
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800841c:	b480      	push	{r7}
 800841e:	b083      	sub	sp, #12
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008424:	bf00      	nop
 8008426:	370c      	adds	r7, #12
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr

08008430 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008430:	b480      	push	{r7}
 8008432:	b083      	sub	sp, #12
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008438:	bf00      	nop
 800843a:	370c      	adds	r7, #12
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr

08008444 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008444:	b480      	push	{r7}
 8008446:	b083      	sub	sp, #12
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800844c:	bf00      	nop
 800844e:	370c      	adds	r7, #12
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr

08008458 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008458:	b480      	push	{r7}
 800845a:	b085      	sub	sp, #20
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	4a40      	ldr	r2, [pc, #256]	; (800856c <TIM_Base_SetConfig+0x114>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d013      	beq.n	8008498 <TIM_Base_SetConfig+0x40>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008476:	d00f      	beq.n	8008498 <TIM_Base_SetConfig+0x40>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	4a3d      	ldr	r2, [pc, #244]	; (8008570 <TIM_Base_SetConfig+0x118>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d00b      	beq.n	8008498 <TIM_Base_SetConfig+0x40>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	4a3c      	ldr	r2, [pc, #240]	; (8008574 <TIM_Base_SetConfig+0x11c>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d007      	beq.n	8008498 <TIM_Base_SetConfig+0x40>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	4a3b      	ldr	r2, [pc, #236]	; (8008578 <TIM_Base_SetConfig+0x120>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d003      	beq.n	8008498 <TIM_Base_SetConfig+0x40>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	4a3a      	ldr	r2, [pc, #232]	; (800857c <TIM_Base_SetConfig+0x124>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d108      	bne.n	80084aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800849e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	68fa      	ldr	r2, [r7, #12]
 80084a6:	4313      	orrs	r3, r2
 80084a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	4a2f      	ldr	r2, [pc, #188]	; (800856c <TIM_Base_SetConfig+0x114>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d02b      	beq.n	800850a <TIM_Base_SetConfig+0xb2>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084b8:	d027      	beq.n	800850a <TIM_Base_SetConfig+0xb2>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	4a2c      	ldr	r2, [pc, #176]	; (8008570 <TIM_Base_SetConfig+0x118>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d023      	beq.n	800850a <TIM_Base_SetConfig+0xb2>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	4a2b      	ldr	r2, [pc, #172]	; (8008574 <TIM_Base_SetConfig+0x11c>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d01f      	beq.n	800850a <TIM_Base_SetConfig+0xb2>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	4a2a      	ldr	r2, [pc, #168]	; (8008578 <TIM_Base_SetConfig+0x120>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d01b      	beq.n	800850a <TIM_Base_SetConfig+0xb2>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	4a29      	ldr	r2, [pc, #164]	; (800857c <TIM_Base_SetConfig+0x124>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d017      	beq.n	800850a <TIM_Base_SetConfig+0xb2>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	4a28      	ldr	r2, [pc, #160]	; (8008580 <TIM_Base_SetConfig+0x128>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d013      	beq.n	800850a <TIM_Base_SetConfig+0xb2>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	4a27      	ldr	r2, [pc, #156]	; (8008584 <TIM_Base_SetConfig+0x12c>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d00f      	beq.n	800850a <TIM_Base_SetConfig+0xb2>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	4a26      	ldr	r2, [pc, #152]	; (8008588 <TIM_Base_SetConfig+0x130>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d00b      	beq.n	800850a <TIM_Base_SetConfig+0xb2>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	4a25      	ldr	r2, [pc, #148]	; (800858c <TIM_Base_SetConfig+0x134>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d007      	beq.n	800850a <TIM_Base_SetConfig+0xb2>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	4a24      	ldr	r2, [pc, #144]	; (8008590 <TIM_Base_SetConfig+0x138>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d003      	beq.n	800850a <TIM_Base_SetConfig+0xb2>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	4a23      	ldr	r2, [pc, #140]	; (8008594 <TIM_Base_SetConfig+0x13c>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d108      	bne.n	800851c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008510:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	68db      	ldr	r3, [r3, #12]
 8008516:	68fa      	ldr	r2, [r7, #12]
 8008518:	4313      	orrs	r3, r2
 800851a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	695b      	ldr	r3, [r3, #20]
 8008526:	4313      	orrs	r3, r2
 8008528:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	68fa      	ldr	r2, [r7, #12]
 800852e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	689a      	ldr	r2, [r3, #8]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	681a      	ldr	r2, [r3, #0]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	4a0a      	ldr	r2, [pc, #40]	; (800856c <TIM_Base_SetConfig+0x114>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d003      	beq.n	8008550 <TIM_Base_SetConfig+0xf8>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	4a0c      	ldr	r2, [pc, #48]	; (800857c <TIM_Base_SetConfig+0x124>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d103      	bne.n	8008558 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	691a      	ldr	r2, [r3, #16]
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2201      	movs	r2, #1
 800855c:	615a      	str	r2, [r3, #20]
}
 800855e:	bf00      	nop
 8008560:	3714      	adds	r7, #20
 8008562:	46bd      	mov	sp, r7
 8008564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008568:	4770      	bx	lr
 800856a:	bf00      	nop
 800856c:	40010000 	.word	0x40010000
 8008570:	40000400 	.word	0x40000400
 8008574:	40000800 	.word	0x40000800
 8008578:	40000c00 	.word	0x40000c00
 800857c:	40010400 	.word	0x40010400
 8008580:	40014000 	.word	0x40014000
 8008584:	40014400 	.word	0x40014400
 8008588:	40014800 	.word	0x40014800
 800858c:	40001800 	.word	0x40001800
 8008590:	40001c00 	.word	0x40001c00
 8008594:	40002000 	.word	0x40002000

08008598 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008598:	b480      	push	{r7}
 800859a:	b087      	sub	sp, #28
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6a1b      	ldr	r3, [r3, #32]
 80085a6:	f023 0201 	bic.w	r2, r3, #1
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6a1b      	ldr	r3, [r3, #32]
 80085b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	699b      	ldr	r3, [r3, #24]
 80085be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f023 0303 	bic.w	r3, r3, #3
 80085ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	68fa      	ldr	r2, [r7, #12]
 80085d6:	4313      	orrs	r3, r2
 80085d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	f023 0302 	bic.w	r3, r3, #2
 80085e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	689b      	ldr	r3, [r3, #8]
 80085e6:	697a      	ldr	r2, [r7, #20]
 80085e8:	4313      	orrs	r3, r2
 80085ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	4a20      	ldr	r2, [pc, #128]	; (8008670 <TIM_OC1_SetConfig+0xd8>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d003      	beq.n	80085fc <TIM_OC1_SetConfig+0x64>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	4a1f      	ldr	r2, [pc, #124]	; (8008674 <TIM_OC1_SetConfig+0xdc>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d10c      	bne.n	8008616 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	f023 0308 	bic.w	r3, r3, #8
 8008602:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	68db      	ldr	r3, [r3, #12]
 8008608:	697a      	ldr	r2, [r7, #20]
 800860a:	4313      	orrs	r3, r2
 800860c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	f023 0304 	bic.w	r3, r3, #4
 8008614:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	4a15      	ldr	r2, [pc, #84]	; (8008670 <TIM_OC1_SetConfig+0xd8>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d003      	beq.n	8008626 <TIM_OC1_SetConfig+0x8e>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	4a14      	ldr	r2, [pc, #80]	; (8008674 <TIM_OC1_SetConfig+0xdc>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d111      	bne.n	800864a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800862c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008634:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	695b      	ldr	r3, [r3, #20]
 800863a:	693a      	ldr	r2, [r7, #16]
 800863c:	4313      	orrs	r3, r2
 800863e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	699b      	ldr	r3, [r3, #24]
 8008644:	693a      	ldr	r2, [r7, #16]
 8008646:	4313      	orrs	r3, r2
 8008648:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	693a      	ldr	r2, [r7, #16]
 800864e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	68fa      	ldr	r2, [r7, #12]
 8008654:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	685a      	ldr	r2, [r3, #4]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	697a      	ldr	r2, [r7, #20]
 8008662:	621a      	str	r2, [r3, #32]
}
 8008664:	bf00      	nop
 8008666:	371c      	adds	r7, #28
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr
 8008670:	40010000 	.word	0x40010000
 8008674:	40010400 	.word	0x40010400

08008678 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008678:	b480      	push	{r7}
 800867a:	b087      	sub	sp, #28
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6a1b      	ldr	r3, [r3, #32]
 8008686:	f023 0210 	bic.w	r2, r3, #16
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6a1b      	ldr	r3, [r3, #32]
 8008692:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	699b      	ldr	r3, [r3, #24]
 800869e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	021b      	lsls	r3, r3, #8
 80086b6:	68fa      	ldr	r2, [r7, #12]
 80086b8:	4313      	orrs	r3, r2
 80086ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	f023 0320 	bic.w	r3, r3, #32
 80086c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	689b      	ldr	r3, [r3, #8]
 80086c8:	011b      	lsls	r3, r3, #4
 80086ca:	697a      	ldr	r2, [r7, #20]
 80086cc:	4313      	orrs	r3, r2
 80086ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	4a22      	ldr	r2, [pc, #136]	; (800875c <TIM_OC2_SetConfig+0xe4>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d003      	beq.n	80086e0 <TIM_OC2_SetConfig+0x68>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	4a21      	ldr	r2, [pc, #132]	; (8008760 <TIM_OC2_SetConfig+0xe8>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d10d      	bne.n	80086fc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	68db      	ldr	r3, [r3, #12]
 80086ec:	011b      	lsls	r3, r3, #4
 80086ee:	697a      	ldr	r2, [r7, #20]
 80086f0:	4313      	orrs	r3, r2
 80086f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	4a17      	ldr	r2, [pc, #92]	; (800875c <TIM_OC2_SetConfig+0xe4>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d003      	beq.n	800870c <TIM_OC2_SetConfig+0x94>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	4a16      	ldr	r2, [pc, #88]	; (8008760 <TIM_OC2_SetConfig+0xe8>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d113      	bne.n	8008734 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008712:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800871a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	695b      	ldr	r3, [r3, #20]
 8008720:	009b      	lsls	r3, r3, #2
 8008722:	693a      	ldr	r2, [r7, #16]
 8008724:	4313      	orrs	r3, r2
 8008726:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	699b      	ldr	r3, [r3, #24]
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	693a      	ldr	r2, [r7, #16]
 8008730:	4313      	orrs	r3, r2
 8008732:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	693a      	ldr	r2, [r7, #16]
 8008738:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	68fa      	ldr	r2, [r7, #12]
 800873e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	685a      	ldr	r2, [r3, #4]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	697a      	ldr	r2, [r7, #20]
 800874c:	621a      	str	r2, [r3, #32]
}
 800874e:	bf00      	nop
 8008750:	371c      	adds	r7, #28
 8008752:	46bd      	mov	sp, r7
 8008754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008758:	4770      	bx	lr
 800875a:	bf00      	nop
 800875c:	40010000 	.word	0x40010000
 8008760:	40010400 	.word	0x40010400

08008764 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008764:	b480      	push	{r7}
 8008766:	b087      	sub	sp, #28
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6a1b      	ldr	r3, [r3, #32]
 8008772:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6a1b      	ldr	r3, [r3, #32]
 800877e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	69db      	ldr	r3, [r3, #28]
 800878a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f023 0303 	bic.w	r3, r3, #3
 800879a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	68fa      	ldr	r2, [r7, #12]
 80087a2:	4313      	orrs	r3, r2
 80087a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80087ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	021b      	lsls	r3, r3, #8
 80087b4:	697a      	ldr	r2, [r7, #20]
 80087b6:	4313      	orrs	r3, r2
 80087b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	4a21      	ldr	r2, [pc, #132]	; (8008844 <TIM_OC3_SetConfig+0xe0>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d003      	beq.n	80087ca <TIM_OC3_SetConfig+0x66>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	4a20      	ldr	r2, [pc, #128]	; (8008848 <TIM_OC3_SetConfig+0xe4>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d10d      	bne.n	80087e6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80087d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	68db      	ldr	r3, [r3, #12]
 80087d6:	021b      	lsls	r3, r3, #8
 80087d8:	697a      	ldr	r2, [r7, #20]
 80087da:	4313      	orrs	r3, r2
 80087dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80087e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	4a16      	ldr	r2, [pc, #88]	; (8008844 <TIM_OC3_SetConfig+0xe0>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d003      	beq.n	80087f6 <TIM_OC3_SetConfig+0x92>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	4a15      	ldr	r2, [pc, #84]	; (8008848 <TIM_OC3_SetConfig+0xe4>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d113      	bne.n	800881e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80087fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008804:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	695b      	ldr	r3, [r3, #20]
 800880a:	011b      	lsls	r3, r3, #4
 800880c:	693a      	ldr	r2, [r7, #16]
 800880e:	4313      	orrs	r3, r2
 8008810:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	699b      	ldr	r3, [r3, #24]
 8008816:	011b      	lsls	r3, r3, #4
 8008818:	693a      	ldr	r2, [r7, #16]
 800881a:	4313      	orrs	r3, r2
 800881c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	693a      	ldr	r2, [r7, #16]
 8008822:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	68fa      	ldr	r2, [r7, #12]
 8008828:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	685a      	ldr	r2, [r3, #4]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	697a      	ldr	r2, [r7, #20]
 8008836:	621a      	str	r2, [r3, #32]
}
 8008838:	bf00      	nop
 800883a:	371c      	adds	r7, #28
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr
 8008844:	40010000 	.word	0x40010000
 8008848:	40010400 	.word	0x40010400

0800884c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800884c:	b480      	push	{r7}
 800884e:	b087      	sub	sp, #28
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6a1b      	ldr	r3, [r3, #32]
 800885a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6a1b      	ldr	r3, [r3, #32]
 8008866:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	69db      	ldr	r3, [r3, #28]
 8008872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800887a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008882:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	021b      	lsls	r3, r3, #8
 800888a:	68fa      	ldr	r2, [r7, #12]
 800888c:	4313      	orrs	r3, r2
 800888e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008896:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	689b      	ldr	r3, [r3, #8]
 800889c:	031b      	lsls	r3, r3, #12
 800889e:	693a      	ldr	r2, [r7, #16]
 80088a0:	4313      	orrs	r3, r2
 80088a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	4a12      	ldr	r2, [pc, #72]	; (80088f0 <TIM_OC4_SetConfig+0xa4>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d003      	beq.n	80088b4 <TIM_OC4_SetConfig+0x68>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	4a11      	ldr	r2, [pc, #68]	; (80088f4 <TIM_OC4_SetConfig+0xa8>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d109      	bne.n	80088c8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80088ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	695b      	ldr	r3, [r3, #20]
 80088c0:	019b      	lsls	r3, r3, #6
 80088c2:	697a      	ldr	r2, [r7, #20]
 80088c4:	4313      	orrs	r3, r2
 80088c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	697a      	ldr	r2, [r7, #20]
 80088cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	68fa      	ldr	r2, [r7, #12]
 80088d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	685a      	ldr	r2, [r3, #4]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	693a      	ldr	r2, [r7, #16]
 80088e0:	621a      	str	r2, [r3, #32]
}
 80088e2:	bf00      	nop
 80088e4:	371c      	adds	r7, #28
 80088e6:	46bd      	mov	sp, r7
 80088e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ec:	4770      	bx	lr
 80088ee:	bf00      	nop
 80088f0:	40010000 	.word	0x40010000
 80088f4:	40010400 	.word	0x40010400

080088f8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b087      	sub	sp, #28
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	60f8      	str	r0, [r7, #12]
 8008900:	60b9      	str	r1, [r7, #8]
 8008902:	607a      	str	r2, [r7, #4]
 8008904:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	6a1b      	ldr	r3, [r3, #32]
 800890a:	f023 0201 	bic.w	r2, r3, #1
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	699b      	ldr	r3, [r3, #24]
 8008916:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	6a1b      	ldr	r3, [r3, #32]
 800891c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	4a28      	ldr	r2, [pc, #160]	; (80089c4 <TIM_TI1_SetConfig+0xcc>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d01b      	beq.n	800895e <TIM_TI1_SetConfig+0x66>
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800892c:	d017      	beq.n	800895e <TIM_TI1_SetConfig+0x66>
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	4a25      	ldr	r2, [pc, #148]	; (80089c8 <TIM_TI1_SetConfig+0xd0>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d013      	beq.n	800895e <TIM_TI1_SetConfig+0x66>
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	4a24      	ldr	r2, [pc, #144]	; (80089cc <TIM_TI1_SetConfig+0xd4>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d00f      	beq.n	800895e <TIM_TI1_SetConfig+0x66>
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	4a23      	ldr	r2, [pc, #140]	; (80089d0 <TIM_TI1_SetConfig+0xd8>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d00b      	beq.n	800895e <TIM_TI1_SetConfig+0x66>
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	4a22      	ldr	r2, [pc, #136]	; (80089d4 <TIM_TI1_SetConfig+0xdc>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d007      	beq.n	800895e <TIM_TI1_SetConfig+0x66>
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	4a21      	ldr	r2, [pc, #132]	; (80089d8 <TIM_TI1_SetConfig+0xe0>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d003      	beq.n	800895e <TIM_TI1_SetConfig+0x66>
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	4a20      	ldr	r2, [pc, #128]	; (80089dc <TIM_TI1_SetConfig+0xe4>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d101      	bne.n	8008962 <TIM_TI1_SetConfig+0x6a>
 800895e:	2301      	movs	r3, #1
 8008960:	e000      	b.n	8008964 <TIM_TI1_SetConfig+0x6c>
 8008962:	2300      	movs	r3, #0
 8008964:	2b00      	cmp	r3, #0
 8008966:	d008      	beq.n	800897a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	f023 0303 	bic.w	r3, r3, #3
 800896e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008970:	697a      	ldr	r2, [r7, #20]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	4313      	orrs	r3, r2
 8008976:	617b      	str	r3, [r7, #20]
 8008978:	e003      	b.n	8008982 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	f043 0301 	orr.w	r3, r3, #1
 8008980:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008988:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	011b      	lsls	r3, r3, #4
 800898e:	b2db      	uxtb	r3, r3
 8008990:	697a      	ldr	r2, [r7, #20]
 8008992:	4313      	orrs	r3, r2
 8008994:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	f023 030a 	bic.w	r3, r3, #10
 800899c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	f003 030a 	and.w	r3, r3, #10
 80089a4:	693a      	ldr	r2, [r7, #16]
 80089a6:	4313      	orrs	r3, r2
 80089a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	697a      	ldr	r2, [r7, #20]
 80089ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	693a      	ldr	r2, [r7, #16]
 80089b4:	621a      	str	r2, [r3, #32]
}
 80089b6:	bf00      	nop
 80089b8:	371c      	adds	r7, #28
 80089ba:	46bd      	mov	sp, r7
 80089bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c0:	4770      	bx	lr
 80089c2:	bf00      	nop
 80089c4:	40010000 	.word	0x40010000
 80089c8:	40000400 	.word	0x40000400
 80089cc:	40000800 	.word	0x40000800
 80089d0:	40000c00 	.word	0x40000c00
 80089d4:	40010400 	.word	0x40010400
 80089d8:	40014000 	.word	0x40014000
 80089dc:	40001800 	.word	0x40001800

080089e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b087      	sub	sp, #28
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	60b9      	str	r1, [r7, #8]
 80089ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	6a1b      	ldr	r3, [r3, #32]
 80089f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	6a1b      	ldr	r3, [r3, #32]
 80089f6:	f023 0201 	bic.w	r2, r3, #1
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	699b      	ldr	r3, [r3, #24]
 8008a02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008a0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	011b      	lsls	r3, r3, #4
 8008a10:	693a      	ldr	r2, [r7, #16]
 8008a12:	4313      	orrs	r3, r2
 8008a14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	f023 030a 	bic.w	r3, r3, #10
 8008a1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008a1e:	697a      	ldr	r2, [r7, #20]
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	4313      	orrs	r3, r2
 8008a24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	693a      	ldr	r2, [r7, #16]
 8008a2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	697a      	ldr	r2, [r7, #20]
 8008a30:	621a      	str	r2, [r3, #32]
}
 8008a32:	bf00      	nop
 8008a34:	371c      	adds	r7, #28
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	4770      	bx	lr

08008a3e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008a3e:	b480      	push	{r7}
 8008a40:	b087      	sub	sp, #28
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	60f8      	str	r0, [r7, #12]
 8008a46:	60b9      	str	r1, [r7, #8]
 8008a48:	607a      	str	r2, [r7, #4]
 8008a4a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	6a1b      	ldr	r3, [r3, #32]
 8008a50:	f023 0210 	bic.w	r2, r3, #16
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	699b      	ldr	r3, [r3, #24]
 8008a5c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	6a1b      	ldr	r3, [r3, #32]
 8008a62:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a6a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	021b      	lsls	r3, r3, #8
 8008a70:	697a      	ldr	r2, [r7, #20]
 8008a72:	4313      	orrs	r3, r2
 8008a74:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008a7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	031b      	lsls	r3, r3, #12
 8008a82:	b29b      	uxth	r3, r3
 8008a84:	697a      	ldr	r2, [r7, #20]
 8008a86:	4313      	orrs	r3, r2
 8008a88:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008a90:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	011b      	lsls	r3, r3, #4
 8008a96:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008a9a:	693a      	ldr	r2, [r7, #16]
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	697a      	ldr	r2, [r7, #20]
 8008aa4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	693a      	ldr	r2, [r7, #16]
 8008aaa:	621a      	str	r2, [r3, #32]
}
 8008aac:	bf00      	nop
 8008aae:	371c      	adds	r7, #28
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab6:	4770      	bx	lr

08008ab8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b087      	sub	sp, #28
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	60f8      	str	r0, [r7, #12]
 8008ac0:	60b9      	str	r1, [r7, #8]
 8008ac2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	6a1b      	ldr	r3, [r3, #32]
 8008ac8:	f023 0210 	bic.w	r2, r3, #16
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	699b      	ldr	r3, [r3, #24]
 8008ad4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	6a1b      	ldr	r3, [r3, #32]
 8008ada:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008ae2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	031b      	lsls	r3, r3, #12
 8008ae8:	697a      	ldr	r2, [r7, #20]
 8008aea:	4313      	orrs	r3, r2
 8008aec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008af4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	011b      	lsls	r3, r3, #4
 8008afa:	693a      	ldr	r2, [r7, #16]
 8008afc:	4313      	orrs	r3, r2
 8008afe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	697a      	ldr	r2, [r7, #20]
 8008b04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	693a      	ldr	r2, [r7, #16]
 8008b0a:	621a      	str	r2, [r3, #32]
}
 8008b0c:	bf00      	nop
 8008b0e:	371c      	adds	r7, #28
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr

08008b18 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b087      	sub	sp, #28
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	60f8      	str	r0, [r7, #12]
 8008b20:	60b9      	str	r1, [r7, #8]
 8008b22:	607a      	str	r2, [r7, #4]
 8008b24:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	6a1b      	ldr	r3, [r3, #32]
 8008b2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	69db      	ldr	r3, [r3, #28]
 8008b36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	6a1b      	ldr	r3, [r3, #32]
 8008b3c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	f023 0303 	bic.w	r3, r3, #3
 8008b44:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008b46:	697a      	ldr	r2, [r7, #20]
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008b54:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	011b      	lsls	r3, r3, #4
 8008b5a:	b2db      	uxtb	r3, r3
 8008b5c:	697a      	ldr	r2, [r7, #20]
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008b68:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	021b      	lsls	r3, r3, #8
 8008b6e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008b72:	693a      	ldr	r2, [r7, #16]
 8008b74:	4313      	orrs	r3, r2
 8008b76:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	697a      	ldr	r2, [r7, #20]
 8008b7c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	693a      	ldr	r2, [r7, #16]
 8008b82:	621a      	str	r2, [r3, #32]
}
 8008b84:	bf00      	nop
 8008b86:	371c      	adds	r7, #28
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8e:	4770      	bx	lr

08008b90 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b087      	sub	sp, #28
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	60f8      	str	r0, [r7, #12]
 8008b98:	60b9      	str	r1, [r7, #8]
 8008b9a:	607a      	str	r2, [r7, #4]
 8008b9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	6a1b      	ldr	r3, [r3, #32]
 8008ba2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	69db      	ldr	r3, [r3, #28]
 8008bae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	6a1b      	ldr	r3, [r3, #32]
 8008bb4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008bb6:	697b      	ldr	r3, [r7, #20]
 8008bb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bbc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	021b      	lsls	r3, r3, #8
 8008bc2:	697a      	ldr	r2, [r7, #20]
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008bce:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	031b      	lsls	r3, r3, #12
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	697a      	ldr	r2, [r7, #20]
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008be2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	031b      	lsls	r3, r3, #12
 8008be8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008bec:	693a      	ldr	r2, [r7, #16]
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	697a      	ldr	r2, [r7, #20]
 8008bf6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	693a      	ldr	r2, [r7, #16]
 8008bfc:	621a      	str	r2, [r3, #32]
}
 8008bfe:	bf00      	nop
 8008c00:	371c      	adds	r7, #28
 8008c02:	46bd      	mov	sp, r7
 8008c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c08:	4770      	bx	lr

08008c0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008c0a:	b480      	push	{r7}
 8008c0c:	b085      	sub	sp, #20
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	6078      	str	r0, [r7, #4]
 8008c12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	689b      	ldr	r3, [r3, #8]
 8008c18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008c22:	683a      	ldr	r2, [r7, #0]
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	4313      	orrs	r3, r2
 8008c28:	f043 0307 	orr.w	r3, r3, #7
 8008c2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	68fa      	ldr	r2, [r7, #12]
 8008c32:	609a      	str	r2, [r3, #8]
}
 8008c34:	bf00      	nop
 8008c36:	3714      	adds	r7, #20
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr

08008c40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b087      	sub	sp, #28
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	60f8      	str	r0, [r7, #12]
 8008c48:	60b9      	str	r1, [r7, #8]
 8008c4a:	607a      	str	r2, [r7, #4]
 8008c4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	689b      	ldr	r3, [r3, #8]
 8008c52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	021a      	lsls	r2, r3, #8
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	431a      	orrs	r2, r3
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	4313      	orrs	r3, r2
 8008c68:	697a      	ldr	r2, [r7, #20]
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	697a      	ldr	r2, [r7, #20]
 8008c72:	609a      	str	r2, [r3, #8]
}
 8008c74:	bf00      	nop
 8008c76:	371c      	adds	r7, #28
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr

08008c80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b087      	sub	sp, #28
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	60f8      	str	r0, [r7, #12]
 8008c88:	60b9      	str	r1, [r7, #8]
 8008c8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	f003 031f 	and.w	r3, r3, #31
 8008c92:	2201      	movs	r2, #1
 8008c94:	fa02 f303 	lsl.w	r3, r2, r3
 8008c98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	6a1a      	ldr	r2, [r3, #32]
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	43db      	mvns	r3, r3
 8008ca2:	401a      	ands	r2, r3
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	6a1a      	ldr	r2, [r3, #32]
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	f003 031f 	and.w	r3, r3, #31
 8008cb2:	6879      	ldr	r1, [r7, #4]
 8008cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8008cb8:	431a      	orrs	r2, r3
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	621a      	str	r2, [r3, #32]
}
 8008cbe:	bf00      	nop
 8008cc0:	371c      	adds	r7, #28
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr
	...

08008ccc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b085      	sub	sp, #20
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d101      	bne.n	8008ce4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ce0:	2302      	movs	r3, #2
 8008ce2:	e05a      	b.n	8008d9a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2202      	movs	r2, #2
 8008cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	689b      	ldr	r3, [r3, #8]
 8008d02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	68fa      	ldr	r2, [r7, #12]
 8008d12:	4313      	orrs	r3, r2
 8008d14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	68fa      	ldr	r2, [r7, #12]
 8008d1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4a21      	ldr	r2, [pc, #132]	; (8008da8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d022      	beq.n	8008d6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d30:	d01d      	beq.n	8008d6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4a1d      	ldr	r2, [pc, #116]	; (8008dac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d018      	beq.n	8008d6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a1b      	ldr	r2, [pc, #108]	; (8008db0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d013      	beq.n	8008d6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4a1a      	ldr	r2, [pc, #104]	; (8008db4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d00e      	beq.n	8008d6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4a18      	ldr	r2, [pc, #96]	; (8008db8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d009      	beq.n	8008d6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4a17      	ldr	r2, [pc, #92]	; (8008dbc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d004      	beq.n	8008d6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4a15      	ldr	r2, [pc, #84]	; (8008dc0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d10c      	bne.n	8008d88 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	685b      	ldr	r3, [r3, #4]
 8008d7a:	68ba      	ldr	r2, [r7, #8]
 8008d7c:	4313      	orrs	r3, r2
 8008d7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	68ba      	ldr	r2, [r7, #8]
 8008d86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2200      	movs	r2, #0
 8008d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d98:	2300      	movs	r3, #0
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3714      	adds	r7, #20
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da4:	4770      	bx	lr
 8008da6:	bf00      	nop
 8008da8:	40010000 	.word	0x40010000
 8008dac:	40000400 	.word	0x40000400
 8008db0:	40000800 	.word	0x40000800
 8008db4:	40000c00 	.word	0x40000c00
 8008db8:	40010400 	.word	0x40010400
 8008dbc:	40014000 	.word	0x40014000
 8008dc0:	40001800 	.word	0x40001800

08008dc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b083      	sub	sp, #12
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008dcc:	bf00      	nop
 8008dce:	370c      	adds	r7, #12
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd6:	4770      	bx	lr

08008dd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b083      	sub	sp, #12
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008de0:	bf00      	nop
 8008de2:	370c      	adds	r7, #12
 8008de4:	46bd      	mov	sp, r7
 8008de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dea:	4770      	bx	lr

08008dec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b082      	sub	sp, #8
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d101      	bne.n	8008dfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	e03f      	b.n	8008e7e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008e04:	b2db      	uxtb	r3, r3
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d106      	bne.n	8008e18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f7fb fc8c 	bl	8004730 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2224      	movs	r2, #36	; 0x24
 8008e1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	68da      	ldr	r2, [r3, #12]
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008e2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f000 fa5f 	bl	80092f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	691a      	ldr	r2, [r3, #16]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008e44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	695a      	ldr	r2, [r3, #20]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008e54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	68da      	ldr	r2, [r3, #12]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008e64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2220      	movs	r2, #32
 8008e70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2220      	movs	r2, #32
 8008e78:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008e7c:	2300      	movs	r3, #0
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3708      	adds	r7, #8
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}

08008e86 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e86:	b580      	push	{r7, lr}
 8008e88:	b088      	sub	sp, #32
 8008e8a:	af02      	add	r7, sp, #8
 8008e8c:	60f8      	str	r0, [r7, #12]
 8008e8e:	60b9      	str	r1, [r7, #8]
 8008e90:	603b      	str	r3, [r7, #0]
 8008e92:	4613      	mov	r3, r2
 8008e94:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8008e96:	2300      	movs	r3, #0
 8008e98:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008ea0:	b2db      	uxtb	r3, r3
 8008ea2:	2b20      	cmp	r3, #32
 8008ea4:	f040 8083 	bne.w	8008fae <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d002      	beq.n	8008eb4 <HAL_UART_Transmit+0x2e>
 8008eae:	88fb      	ldrh	r3, [r7, #6]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d101      	bne.n	8008eb8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	e07b      	b.n	8008fb0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008ebe:	2b01      	cmp	r3, #1
 8008ec0:	d101      	bne.n	8008ec6 <HAL_UART_Transmit+0x40>
 8008ec2:	2302      	movs	r3, #2
 8008ec4:	e074      	b.n	8008fb0 <HAL_UART_Transmit+0x12a>
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2201      	movs	r2, #1
 8008eca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2221      	movs	r2, #33	; 0x21
 8008ed8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008edc:	f7fb fea6 	bl	8004c2c <HAL_GetTick>
 8008ee0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	88fa      	ldrh	r2, [r7, #6]
 8008ee6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	88fa      	ldrh	r2, [r7, #6]
 8008eec:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8008ef6:	e042      	b.n	8008f7e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008efc:	b29b      	uxth	r3, r3
 8008efe:	3b01      	subs	r3, #1
 8008f00:	b29a      	uxth	r2, r3
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	689b      	ldr	r3, [r3, #8]
 8008f0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f0e:	d122      	bne.n	8008f56 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	9300      	str	r3, [sp, #0]
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	2200      	movs	r2, #0
 8008f18:	2180      	movs	r1, #128	; 0x80
 8008f1a:	68f8      	ldr	r0, [r7, #12]
 8008f1c:	f000 f96c 	bl	80091f8 <UART_WaitOnFlagUntilTimeout>
 8008f20:	4603      	mov	r3, r0
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d001      	beq.n	8008f2a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8008f26:	2303      	movs	r3, #3
 8008f28:	e042      	b.n	8008fb0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	881b      	ldrh	r3, [r3, #0]
 8008f32:	461a      	mov	r2, r3
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008f3c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	691b      	ldr	r3, [r3, #16]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d103      	bne.n	8008f4e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	3302      	adds	r3, #2
 8008f4a:	60bb      	str	r3, [r7, #8]
 8008f4c:	e017      	b.n	8008f7e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	3301      	adds	r3, #1
 8008f52:	60bb      	str	r3, [r7, #8]
 8008f54:	e013      	b.n	8008f7e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	9300      	str	r3, [sp, #0]
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	2180      	movs	r1, #128	; 0x80
 8008f60:	68f8      	ldr	r0, [r7, #12]
 8008f62:	f000 f949 	bl	80091f8 <UART_WaitOnFlagUntilTimeout>
 8008f66:	4603      	mov	r3, r0
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d001      	beq.n	8008f70 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8008f6c:	2303      	movs	r3, #3
 8008f6e:	e01f      	b.n	8008fb0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	1c5a      	adds	r2, r3, #1
 8008f74:	60ba      	str	r2, [r7, #8]
 8008f76:	781a      	ldrb	r2, [r3, #0]
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008f82:	b29b      	uxth	r3, r3
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d1b7      	bne.n	8008ef8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	9300      	str	r3, [sp, #0]
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	2140      	movs	r1, #64	; 0x40
 8008f92:	68f8      	ldr	r0, [r7, #12]
 8008f94:	f000 f930 	bl	80091f8 <UART_WaitOnFlagUntilTimeout>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d001      	beq.n	8008fa2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8008f9e:	2303      	movs	r3, #3
 8008fa0:	e006      	b.n	8008fb0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	2220      	movs	r2, #32
 8008fa6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8008faa:	2300      	movs	r3, #0
 8008fac:	e000      	b.n	8008fb0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8008fae:	2302      	movs	r3, #2
  }
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3718      	adds	r7, #24
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}

08008fb8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b086      	sub	sp, #24
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	60f8      	str	r0, [r7, #12]
 8008fc0:	60b9      	str	r1, [r7, #8]
 8008fc2:	4613      	mov	r3, r2
 8008fc4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008fcc:	b2db      	uxtb	r3, r3
 8008fce:	2b20      	cmp	r3, #32
 8008fd0:	d166      	bne.n	80090a0 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d002      	beq.n	8008fde <HAL_UART_Receive_DMA+0x26>
 8008fd8:	88fb      	ldrh	r3, [r7, #6]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d101      	bne.n	8008fe2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	e05f      	b.n	80090a2 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008fe8:	2b01      	cmp	r3, #1
 8008fea:	d101      	bne.n	8008ff0 <HAL_UART_Receive_DMA+0x38>
 8008fec:	2302      	movs	r3, #2
 8008fee:	e058      	b.n	80090a2 <HAL_UART_Receive_DMA+0xea>
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8008ff8:	68ba      	ldr	r2, [r7, #8]
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	88fa      	ldrh	r2, [r7, #6]
 8009002:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	2200      	movs	r2, #0
 8009008:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2222      	movs	r2, #34	; 0x22
 800900e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009016:	4a25      	ldr	r2, [pc, #148]	; (80090ac <HAL_UART_Receive_DMA+0xf4>)
 8009018:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800901e:	4a24      	ldr	r2, [pc, #144]	; (80090b0 <HAL_UART_Receive_DMA+0xf8>)
 8009020:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009026:	4a23      	ldr	r2, [pc, #140]	; (80090b4 <HAL_UART_Receive_DMA+0xfc>)
 8009028:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800902e:	2200      	movs	r2, #0
 8009030:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8009032:	f107 0308 	add.w	r3, r7, #8
 8009036:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	3304      	adds	r3, #4
 8009042:	4619      	mov	r1, r3
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	88fb      	ldrh	r3, [r7, #6]
 800904a:	f7fb ffdd 	bl	8005008 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800904e:	2300      	movs	r3, #0
 8009050:	613b      	str	r3, [r7, #16]
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	613b      	str	r3, [r7, #16]
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	613b      	str	r3, [r7, #16]
 8009062:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2200      	movs	r2, #0
 8009068:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	68da      	ldr	r2, [r3, #12]
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800907a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	695a      	ldr	r2, [r3, #20]
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f042 0201 	orr.w	r2, r2, #1
 800908a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	695a      	ldr	r2, [r3, #20]
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800909a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800909c:	2300      	movs	r3, #0
 800909e:	e000      	b.n	80090a2 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80090a0:	2302      	movs	r3, #2
  }
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3718      	adds	r7, #24
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}
 80090aa:	bf00      	nop
 80090ac:	080090e1 	.word	0x080090e1
 80090b0:	08009149 	.word	0x08009149
 80090b4:	08009165 	.word	0x08009165

080090b8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b083      	sub	sp, #12
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80090c0:	bf00      	nop
 80090c2:	370c      	adds	r7, #12
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr

080090cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80090cc:	b480      	push	{r7}
 80090ce:	b083      	sub	sp, #12
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80090d4:	bf00      	nop
 80090d6:	370c      	adds	r7, #12
 80090d8:	46bd      	mov	sp, r7
 80090da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090de:	4770      	bx	lr

080090e0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b084      	sub	sp, #16
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ec:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d11e      	bne.n	800913a <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	2200      	movs	r2, #0
 8009100:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	68da      	ldr	r2, [r3, #12]
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009110:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	695a      	ldr	r2, [r3, #20]
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f022 0201 	bic.w	r2, r2, #1
 8009120:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	695a      	ldr	r2, [r3, #20]
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009130:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	2220      	movs	r2, #32
 8009136:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800913a:	68f8      	ldr	r0, [r7, #12]
 800913c:	f7fa f97e 	bl	800343c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009140:	bf00      	nop
 8009142:	3710      	adds	r7, #16
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}

08009148 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b084      	sub	sp, #16
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009154:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8009156:	68f8      	ldr	r0, [r7, #12]
 8009158:	f7ff ffae 	bl	80090b8 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800915c:	bf00      	nop
 800915e:	3710      	adds	r7, #16
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}

08009164 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b084      	sub	sp, #16
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800916c:	2300      	movs	r3, #0
 800916e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009174:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	695b      	ldr	r3, [r3, #20]
 800917c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009180:	2b80      	cmp	r3, #128	; 0x80
 8009182:	bf0c      	ite	eq
 8009184:	2301      	moveq	r3, #1
 8009186:	2300      	movne	r3, #0
 8009188:	b2db      	uxtb	r3, r3
 800918a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009192:	b2db      	uxtb	r3, r3
 8009194:	2b21      	cmp	r3, #33	; 0x21
 8009196:	d108      	bne.n	80091aa <UART_DMAError+0x46>
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d005      	beq.n	80091aa <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	2200      	movs	r2, #0
 80091a2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80091a4:	68b8      	ldr	r0, [r7, #8]
 80091a6:	f000 f871 	bl	800928c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	695b      	ldr	r3, [r3, #20]
 80091b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091b4:	2b40      	cmp	r3, #64	; 0x40
 80091b6:	bf0c      	ite	eq
 80091b8:	2301      	moveq	r3, #1
 80091ba:	2300      	movne	r3, #0
 80091bc:	b2db      	uxtb	r3, r3
 80091be:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80091c6:	b2db      	uxtb	r3, r3
 80091c8:	2b22      	cmp	r3, #34	; 0x22
 80091ca:	d108      	bne.n	80091de <UART_DMAError+0x7a>
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d005      	beq.n	80091de <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	2200      	movs	r2, #0
 80091d6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80091d8:	68b8      	ldr	r0, [r7, #8]
 80091da:	f000 f86d 	bl	80092b8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091e2:	f043 0210 	orr.w	r2, r3, #16
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80091ea:	68b8      	ldr	r0, [r7, #8]
 80091ec:	f7ff ff6e 	bl	80090cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091f0:	bf00      	nop
 80091f2:	3710      	adds	r7, #16
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}

080091f8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b084      	sub	sp, #16
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	60f8      	str	r0, [r7, #12]
 8009200:	60b9      	str	r1, [r7, #8]
 8009202:	603b      	str	r3, [r7, #0]
 8009204:	4613      	mov	r3, r2
 8009206:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009208:	e02c      	b.n	8009264 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800920a:	69bb      	ldr	r3, [r7, #24]
 800920c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009210:	d028      	beq.n	8009264 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009212:	69bb      	ldr	r3, [r7, #24]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d007      	beq.n	8009228 <UART_WaitOnFlagUntilTimeout+0x30>
 8009218:	f7fb fd08 	bl	8004c2c <HAL_GetTick>
 800921c:	4602      	mov	r2, r0
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	1ad3      	subs	r3, r2, r3
 8009222:	69ba      	ldr	r2, [r7, #24]
 8009224:	429a      	cmp	r2, r3
 8009226:	d21d      	bcs.n	8009264 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	68da      	ldr	r2, [r3, #12]
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009236:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	695a      	ldr	r2, [r3, #20]
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f022 0201 	bic.w	r2, r2, #1
 8009246:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	2220      	movs	r2, #32
 800924c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2220      	movs	r2, #32
 8009254:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2200      	movs	r2, #0
 800925c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8009260:	2303      	movs	r3, #3
 8009262:	e00f      	b.n	8009284 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	681a      	ldr	r2, [r3, #0]
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	4013      	ands	r3, r2
 800926e:	68ba      	ldr	r2, [r7, #8]
 8009270:	429a      	cmp	r2, r3
 8009272:	bf0c      	ite	eq
 8009274:	2301      	moveq	r3, #1
 8009276:	2300      	movne	r3, #0
 8009278:	b2db      	uxtb	r3, r3
 800927a:	461a      	mov	r2, r3
 800927c:	79fb      	ldrb	r3, [r7, #7]
 800927e:	429a      	cmp	r2, r3
 8009280:	d0c3      	beq.n	800920a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009282:	2300      	movs	r3, #0
}
 8009284:	4618      	mov	r0, r3
 8009286:	3710      	adds	r7, #16
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}

0800928c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800928c:	b480      	push	{r7}
 800928e:	b083      	sub	sp, #12
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	68da      	ldr	r2, [r3, #12]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80092a2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2220      	movs	r2, #32
 80092a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80092ac:	bf00      	nop
 80092ae:	370c      	adds	r7, #12
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr

080092b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80092b8:	b480      	push	{r7}
 80092ba:	b083      	sub	sp, #12
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	68da      	ldr	r2, [r3, #12]
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80092ce:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	695a      	ldr	r2, [r3, #20]
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f022 0201 	bic.w	r2, r2, #1
 80092de:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2220      	movs	r2, #32
 80092e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80092e8:	bf00      	nop
 80092ea:	370c      	adds	r7, #12
 80092ec:	46bd      	mov	sp, r7
 80092ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f2:	4770      	bx	lr

080092f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80092f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092f8:	b085      	sub	sp, #20
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	691b      	ldr	r3, [r3, #16]
 8009304:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	68da      	ldr	r2, [r3, #12]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	430a      	orrs	r2, r1
 8009312:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	689a      	ldr	r2, [r3, #8]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	691b      	ldr	r3, [r3, #16]
 800931c:	431a      	orrs	r2, r3
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	695b      	ldr	r3, [r3, #20]
 8009322:	431a      	orrs	r2, r3
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	69db      	ldr	r3, [r3, #28]
 8009328:	4313      	orrs	r3, r2
 800932a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	68db      	ldr	r3, [r3, #12]
 8009332:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8009336:	f023 030c 	bic.w	r3, r3, #12
 800933a:	687a      	ldr	r2, [r7, #4]
 800933c:	6812      	ldr	r2, [r2, #0]
 800933e:	68f9      	ldr	r1, [r7, #12]
 8009340:	430b      	orrs	r3, r1
 8009342:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	695b      	ldr	r3, [r3, #20]
 800934a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	699a      	ldr	r2, [r3, #24]
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	430a      	orrs	r2, r1
 8009358:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	69db      	ldr	r3, [r3, #28]
 800935e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009362:	f040 818b 	bne.w	800967c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	4ac1      	ldr	r2, [pc, #772]	; (8009670 <UART_SetConfig+0x37c>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d005      	beq.n	800937c <UART_SetConfig+0x88>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	4abf      	ldr	r2, [pc, #764]	; (8009674 <UART_SetConfig+0x380>)
 8009376:	4293      	cmp	r3, r2
 8009378:	f040 80bd 	bne.w	80094f6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800937c:	f7fe fb24 	bl	80079c8 <HAL_RCC_GetPCLK2Freq>
 8009380:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	461d      	mov	r5, r3
 8009386:	f04f 0600 	mov.w	r6, #0
 800938a:	46a8      	mov	r8, r5
 800938c:	46b1      	mov	r9, r6
 800938e:	eb18 0308 	adds.w	r3, r8, r8
 8009392:	eb49 0409 	adc.w	r4, r9, r9
 8009396:	4698      	mov	r8, r3
 8009398:	46a1      	mov	r9, r4
 800939a:	eb18 0805 	adds.w	r8, r8, r5
 800939e:	eb49 0906 	adc.w	r9, r9, r6
 80093a2:	f04f 0100 	mov.w	r1, #0
 80093a6:	f04f 0200 	mov.w	r2, #0
 80093aa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80093ae:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80093b2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80093b6:	4688      	mov	r8, r1
 80093b8:	4691      	mov	r9, r2
 80093ba:	eb18 0005 	adds.w	r0, r8, r5
 80093be:	eb49 0106 	adc.w	r1, r9, r6
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	685b      	ldr	r3, [r3, #4]
 80093c6:	461d      	mov	r5, r3
 80093c8:	f04f 0600 	mov.w	r6, #0
 80093cc:	196b      	adds	r3, r5, r5
 80093ce:	eb46 0406 	adc.w	r4, r6, r6
 80093d2:	461a      	mov	r2, r3
 80093d4:	4623      	mov	r3, r4
 80093d6:	f7f7 fc87 	bl	8000ce8 <__aeabi_uldivmod>
 80093da:	4603      	mov	r3, r0
 80093dc:	460c      	mov	r4, r1
 80093de:	461a      	mov	r2, r3
 80093e0:	4ba5      	ldr	r3, [pc, #660]	; (8009678 <UART_SetConfig+0x384>)
 80093e2:	fba3 2302 	umull	r2, r3, r3, r2
 80093e6:	095b      	lsrs	r3, r3, #5
 80093e8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	461d      	mov	r5, r3
 80093f0:	f04f 0600 	mov.w	r6, #0
 80093f4:	46a9      	mov	r9, r5
 80093f6:	46b2      	mov	sl, r6
 80093f8:	eb19 0309 	adds.w	r3, r9, r9
 80093fc:	eb4a 040a 	adc.w	r4, sl, sl
 8009400:	4699      	mov	r9, r3
 8009402:	46a2      	mov	sl, r4
 8009404:	eb19 0905 	adds.w	r9, r9, r5
 8009408:	eb4a 0a06 	adc.w	sl, sl, r6
 800940c:	f04f 0100 	mov.w	r1, #0
 8009410:	f04f 0200 	mov.w	r2, #0
 8009414:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009418:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800941c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009420:	4689      	mov	r9, r1
 8009422:	4692      	mov	sl, r2
 8009424:	eb19 0005 	adds.w	r0, r9, r5
 8009428:	eb4a 0106 	adc.w	r1, sl, r6
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	685b      	ldr	r3, [r3, #4]
 8009430:	461d      	mov	r5, r3
 8009432:	f04f 0600 	mov.w	r6, #0
 8009436:	196b      	adds	r3, r5, r5
 8009438:	eb46 0406 	adc.w	r4, r6, r6
 800943c:	461a      	mov	r2, r3
 800943e:	4623      	mov	r3, r4
 8009440:	f7f7 fc52 	bl	8000ce8 <__aeabi_uldivmod>
 8009444:	4603      	mov	r3, r0
 8009446:	460c      	mov	r4, r1
 8009448:	461a      	mov	r2, r3
 800944a:	4b8b      	ldr	r3, [pc, #556]	; (8009678 <UART_SetConfig+0x384>)
 800944c:	fba3 1302 	umull	r1, r3, r3, r2
 8009450:	095b      	lsrs	r3, r3, #5
 8009452:	2164      	movs	r1, #100	; 0x64
 8009454:	fb01 f303 	mul.w	r3, r1, r3
 8009458:	1ad3      	subs	r3, r2, r3
 800945a:	00db      	lsls	r3, r3, #3
 800945c:	3332      	adds	r3, #50	; 0x32
 800945e:	4a86      	ldr	r2, [pc, #536]	; (8009678 <UART_SetConfig+0x384>)
 8009460:	fba2 2303 	umull	r2, r3, r2, r3
 8009464:	095b      	lsrs	r3, r3, #5
 8009466:	005b      	lsls	r3, r3, #1
 8009468:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800946c:	4498      	add	r8, r3
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	461d      	mov	r5, r3
 8009472:	f04f 0600 	mov.w	r6, #0
 8009476:	46a9      	mov	r9, r5
 8009478:	46b2      	mov	sl, r6
 800947a:	eb19 0309 	adds.w	r3, r9, r9
 800947e:	eb4a 040a 	adc.w	r4, sl, sl
 8009482:	4699      	mov	r9, r3
 8009484:	46a2      	mov	sl, r4
 8009486:	eb19 0905 	adds.w	r9, r9, r5
 800948a:	eb4a 0a06 	adc.w	sl, sl, r6
 800948e:	f04f 0100 	mov.w	r1, #0
 8009492:	f04f 0200 	mov.w	r2, #0
 8009496:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800949a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800949e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80094a2:	4689      	mov	r9, r1
 80094a4:	4692      	mov	sl, r2
 80094a6:	eb19 0005 	adds.w	r0, r9, r5
 80094aa:	eb4a 0106 	adc.w	r1, sl, r6
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	685b      	ldr	r3, [r3, #4]
 80094b2:	461d      	mov	r5, r3
 80094b4:	f04f 0600 	mov.w	r6, #0
 80094b8:	196b      	adds	r3, r5, r5
 80094ba:	eb46 0406 	adc.w	r4, r6, r6
 80094be:	461a      	mov	r2, r3
 80094c0:	4623      	mov	r3, r4
 80094c2:	f7f7 fc11 	bl	8000ce8 <__aeabi_uldivmod>
 80094c6:	4603      	mov	r3, r0
 80094c8:	460c      	mov	r4, r1
 80094ca:	461a      	mov	r2, r3
 80094cc:	4b6a      	ldr	r3, [pc, #424]	; (8009678 <UART_SetConfig+0x384>)
 80094ce:	fba3 1302 	umull	r1, r3, r3, r2
 80094d2:	095b      	lsrs	r3, r3, #5
 80094d4:	2164      	movs	r1, #100	; 0x64
 80094d6:	fb01 f303 	mul.w	r3, r1, r3
 80094da:	1ad3      	subs	r3, r2, r3
 80094dc:	00db      	lsls	r3, r3, #3
 80094de:	3332      	adds	r3, #50	; 0x32
 80094e0:	4a65      	ldr	r2, [pc, #404]	; (8009678 <UART_SetConfig+0x384>)
 80094e2:	fba2 2303 	umull	r2, r3, r2, r3
 80094e6:	095b      	lsrs	r3, r3, #5
 80094e8:	f003 0207 	and.w	r2, r3, #7
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4442      	add	r2, r8
 80094f2:	609a      	str	r2, [r3, #8]
 80094f4:	e26f      	b.n	80099d6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80094f6:	f7fe fa53 	bl	80079a0 <HAL_RCC_GetPCLK1Freq>
 80094fa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	461d      	mov	r5, r3
 8009500:	f04f 0600 	mov.w	r6, #0
 8009504:	46a8      	mov	r8, r5
 8009506:	46b1      	mov	r9, r6
 8009508:	eb18 0308 	adds.w	r3, r8, r8
 800950c:	eb49 0409 	adc.w	r4, r9, r9
 8009510:	4698      	mov	r8, r3
 8009512:	46a1      	mov	r9, r4
 8009514:	eb18 0805 	adds.w	r8, r8, r5
 8009518:	eb49 0906 	adc.w	r9, r9, r6
 800951c:	f04f 0100 	mov.w	r1, #0
 8009520:	f04f 0200 	mov.w	r2, #0
 8009524:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009528:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800952c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009530:	4688      	mov	r8, r1
 8009532:	4691      	mov	r9, r2
 8009534:	eb18 0005 	adds.w	r0, r8, r5
 8009538:	eb49 0106 	adc.w	r1, r9, r6
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	685b      	ldr	r3, [r3, #4]
 8009540:	461d      	mov	r5, r3
 8009542:	f04f 0600 	mov.w	r6, #0
 8009546:	196b      	adds	r3, r5, r5
 8009548:	eb46 0406 	adc.w	r4, r6, r6
 800954c:	461a      	mov	r2, r3
 800954e:	4623      	mov	r3, r4
 8009550:	f7f7 fbca 	bl	8000ce8 <__aeabi_uldivmod>
 8009554:	4603      	mov	r3, r0
 8009556:	460c      	mov	r4, r1
 8009558:	461a      	mov	r2, r3
 800955a:	4b47      	ldr	r3, [pc, #284]	; (8009678 <UART_SetConfig+0x384>)
 800955c:	fba3 2302 	umull	r2, r3, r3, r2
 8009560:	095b      	lsrs	r3, r3, #5
 8009562:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	461d      	mov	r5, r3
 800956a:	f04f 0600 	mov.w	r6, #0
 800956e:	46a9      	mov	r9, r5
 8009570:	46b2      	mov	sl, r6
 8009572:	eb19 0309 	adds.w	r3, r9, r9
 8009576:	eb4a 040a 	adc.w	r4, sl, sl
 800957a:	4699      	mov	r9, r3
 800957c:	46a2      	mov	sl, r4
 800957e:	eb19 0905 	adds.w	r9, r9, r5
 8009582:	eb4a 0a06 	adc.w	sl, sl, r6
 8009586:	f04f 0100 	mov.w	r1, #0
 800958a:	f04f 0200 	mov.w	r2, #0
 800958e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009592:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009596:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800959a:	4689      	mov	r9, r1
 800959c:	4692      	mov	sl, r2
 800959e:	eb19 0005 	adds.w	r0, r9, r5
 80095a2:	eb4a 0106 	adc.w	r1, sl, r6
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	685b      	ldr	r3, [r3, #4]
 80095aa:	461d      	mov	r5, r3
 80095ac:	f04f 0600 	mov.w	r6, #0
 80095b0:	196b      	adds	r3, r5, r5
 80095b2:	eb46 0406 	adc.w	r4, r6, r6
 80095b6:	461a      	mov	r2, r3
 80095b8:	4623      	mov	r3, r4
 80095ba:	f7f7 fb95 	bl	8000ce8 <__aeabi_uldivmod>
 80095be:	4603      	mov	r3, r0
 80095c0:	460c      	mov	r4, r1
 80095c2:	461a      	mov	r2, r3
 80095c4:	4b2c      	ldr	r3, [pc, #176]	; (8009678 <UART_SetConfig+0x384>)
 80095c6:	fba3 1302 	umull	r1, r3, r3, r2
 80095ca:	095b      	lsrs	r3, r3, #5
 80095cc:	2164      	movs	r1, #100	; 0x64
 80095ce:	fb01 f303 	mul.w	r3, r1, r3
 80095d2:	1ad3      	subs	r3, r2, r3
 80095d4:	00db      	lsls	r3, r3, #3
 80095d6:	3332      	adds	r3, #50	; 0x32
 80095d8:	4a27      	ldr	r2, [pc, #156]	; (8009678 <UART_SetConfig+0x384>)
 80095da:	fba2 2303 	umull	r2, r3, r2, r3
 80095de:	095b      	lsrs	r3, r3, #5
 80095e0:	005b      	lsls	r3, r3, #1
 80095e2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80095e6:	4498      	add	r8, r3
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	461d      	mov	r5, r3
 80095ec:	f04f 0600 	mov.w	r6, #0
 80095f0:	46a9      	mov	r9, r5
 80095f2:	46b2      	mov	sl, r6
 80095f4:	eb19 0309 	adds.w	r3, r9, r9
 80095f8:	eb4a 040a 	adc.w	r4, sl, sl
 80095fc:	4699      	mov	r9, r3
 80095fe:	46a2      	mov	sl, r4
 8009600:	eb19 0905 	adds.w	r9, r9, r5
 8009604:	eb4a 0a06 	adc.w	sl, sl, r6
 8009608:	f04f 0100 	mov.w	r1, #0
 800960c:	f04f 0200 	mov.w	r2, #0
 8009610:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009614:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009618:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800961c:	4689      	mov	r9, r1
 800961e:	4692      	mov	sl, r2
 8009620:	eb19 0005 	adds.w	r0, r9, r5
 8009624:	eb4a 0106 	adc.w	r1, sl, r6
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	685b      	ldr	r3, [r3, #4]
 800962c:	461d      	mov	r5, r3
 800962e:	f04f 0600 	mov.w	r6, #0
 8009632:	196b      	adds	r3, r5, r5
 8009634:	eb46 0406 	adc.w	r4, r6, r6
 8009638:	461a      	mov	r2, r3
 800963a:	4623      	mov	r3, r4
 800963c:	f7f7 fb54 	bl	8000ce8 <__aeabi_uldivmod>
 8009640:	4603      	mov	r3, r0
 8009642:	460c      	mov	r4, r1
 8009644:	461a      	mov	r2, r3
 8009646:	4b0c      	ldr	r3, [pc, #48]	; (8009678 <UART_SetConfig+0x384>)
 8009648:	fba3 1302 	umull	r1, r3, r3, r2
 800964c:	095b      	lsrs	r3, r3, #5
 800964e:	2164      	movs	r1, #100	; 0x64
 8009650:	fb01 f303 	mul.w	r3, r1, r3
 8009654:	1ad3      	subs	r3, r2, r3
 8009656:	00db      	lsls	r3, r3, #3
 8009658:	3332      	adds	r3, #50	; 0x32
 800965a:	4a07      	ldr	r2, [pc, #28]	; (8009678 <UART_SetConfig+0x384>)
 800965c:	fba2 2303 	umull	r2, r3, r2, r3
 8009660:	095b      	lsrs	r3, r3, #5
 8009662:	f003 0207 	and.w	r2, r3, #7
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4442      	add	r2, r8
 800966c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800966e:	e1b2      	b.n	80099d6 <UART_SetConfig+0x6e2>
 8009670:	40011000 	.word	0x40011000
 8009674:	40011400 	.word	0x40011400
 8009678:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4ad7      	ldr	r2, [pc, #860]	; (80099e0 <UART_SetConfig+0x6ec>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d005      	beq.n	8009692 <UART_SetConfig+0x39e>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4ad6      	ldr	r2, [pc, #856]	; (80099e4 <UART_SetConfig+0x6f0>)
 800968c:	4293      	cmp	r3, r2
 800968e:	f040 80d1 	bne.w	8009834 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8009692:	f7fe f999 	bl	80079c8 <HAL_RCC_GetPCLK2Freq>
 8009696:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	469a      	mov	sl, r3
 800969c:	f04f 0b00 	mov.w	fp, #0
 80096a0:	46d0      	mov	r8, sl
 80096a2:	46d9      	mov	r9, fp
 80096a4:	eb18 0308 	adds.w	r3, r8, r8
 80096a8:	eb49 0409 	adc.w	r4, r9, r9
 80096ac:	4698      	mov	r8, r3
 80096ae:	46a1      	mov	r9, r4
 80096b0:	eb18 080a 	adds.w	r8, r8, sl
 80096b4:	eb49 090b 	adc.w	r9, r9, fp
 80096b8:	f04f 0100 	mov.w	r1, #0
 80096bc:	f04f 0200 	mov.w	r2, #0
 80096c0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80096c4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80096c8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80096cc:	4688      	mov	r8, r1
 80096ce:	4691      	mov	r9, r2
 80096d0:	eb1a 0508 	adds.w	r5, sl, r8
 80096d4:	eb4b 0609 	adc.w	r6, fp, r9
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	685b      	ldr	r3, [r3, #4]
 80096dc:	4619      	mov	r1, r3
 80096de:	f04f 0200 	mov.w	r2, #0
 80096e2:	f04f 0300 	mov.w	r3, #0
 80096e6:	f04f 0400 	mov.w	r4, #0
 80096ea:	0094      	lsls	r4, r2, #2
 80096ec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80096f0:	008b      	lsls	r3, r1, #2
 80096f2:	461a      	mov	r2, r3
 80096f4:	4623      	mov	r3, r4
 80096f6:	4628      	mov	r0, r5
 80096f8:	4631      	mov	r1, r6
 80096fa:	f7f7 faf5 	bl	8000ce8 <__aeabi_uldivmod>
 80096fe:	4603      	mov	r3, r0
 8009700:	460c      	mov	r4, r1
 8009702:	461a      	mov	r2, r3
 8009704:	4bb8      	ldr	r3, [pc, #736]	; (80099e8 <UART_SetConfig+0x6f4>)
 8009706:	fba3 2302 	umull	r2, r3, r3, r2
 800970a:	095b      	lsrs	r3, r3, #5
 800970c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	469b      	mov	fp, r3
 8009714:	f04f 0c00 	mov.w	ip, #0
 8009718:	46d9      	mov	r9, fp
 800971a:	46e2      	mov	sl, ip
 800971c:	eb19 0309 	adds.w	r3, r9, r9
 8009720:	eb4a 040a 	adc.w	r4, sl, sl
 8009724:	4699      	mov	r9, r3
 8009726:	46a2      	mov	sl, r4
 8009728:	eb19 090b 	adds.w	r9, r9, fp
 800972c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009730:	f04f 0100 	mov.w	r1, #0
 8009734:	f04f 0200 	mov.w	r2, #0
 8009738:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800973c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009740:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009744:	4689      	mov	r9, r1
 8009746:	4692      	mov	sl, r2
 8009748:	eb1b 0509 	adds.w	r5, fp, r9
 800974c:	eb4c 060a 	adc.w	r6, ip, sl
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	685b      	ldr	r3, [r3, #4]
 8009754:	4619      	mov	r1, r3
 8009756:	f04f 0200 	mov.w	r2, #0
 800975a:	f04f 0300 	mov.w	r3, #0
 800975e:	f04f 0400 	mov.w	r4, #0
 8009762:	0094      	lsls	r4, r2, #2
 8009764:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009768:	008b      	lsls	r3, r1, #2
 800976a:	461a      	mov	r2, r3
 800976c:	4623      	mov	r3, r4
 800976e:	4628      	mov	r0, r5
 8009770:	4631      	mov	r1, r6
 8009772:	f7f7 fab9 	bl	8000ce8 <__aeabi_uldivmod>
 8009776:	4603      	mov	r3, r0
 8009778:	460c      	mov	r4, r1
 800977a:	461a      	mov	r2, r3
 800977c:	4b9a      	ldr	r3, [pc, #616]	; (80099e8 <UART_SetConfig+0x6f4>)
 800977e:	fba3 1302 	umull	r1, r3, r3, r2
 8009782:	095b      	lsrs	r3, r3, #5
 8009784:	2164      	movs	r1, #100	; 0x64
 8009786:	fb01 f303 	mul.w	r3, r1, r3
 800978a:	1ad3      	subs	r3, r2, r3
 800978c:	011b      	lsls	r3, r3, #4
 800978e:	3332      	adds	r3, #50	; 0x32
 8009790:	4a95      	ldr	r2, [pc, #596]	; (80099e8 <UART_SetConfig+0x6f4>)
 8009792:	fba2 2303 	umull	r2, r3, r2, r3
 8009796:	095b      	lsrs	r3, r3, #5
 8009798:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800979c:	4498      	add	r8, r3
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	469b      	mov	fp, r3
 80097a2:	f04f 0c00 	mov.w	ip, #0
 80097a6:	46d9      	mov	r9, fp
 80097a8:	46e2      	mov	sl, ip
 80097aa:	eb19 0309 	adds.w	r3, r9, r9
 80097ae:	eb4a 040a 	adc.w	r4, sl, sl
 80097b2:	4699      	mov	r9, r3
 80097b4:	46a2      	mov	sl, r4
 80097b6:	eb19 090b 	adds.w	r9, r9, fp
 80097ba:	eb4a 0a0c 	adc.w	sl, sl, ip
 80097be:	f04f 0100 	mov.w	r1, #0
 80097c2:	f04f 0200 	mov.w	r2, #0
 80097c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80097ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80097ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80097d2:	4689      	mov	r9, r1
 80097d4:	4692      	mov	sl, r2
 80097d6:	eb1b 0509 	adds.w	r5, fp, r9
 80097da:	eb4c 060a 	adc.w	r6, ip, sl
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	685b      	ldr	r3, [r3, #4]
 80097e2:	4619      	mov	r1, r3
 80097e4:	f04f 0200 	mov.w	r2, #0
 80097e8:	f04f 0300 	mov.w	r3, #0
 80097ec:	f04f 0400 	mov.w	r4, #0
 80097f0:	0094      	lsls	r4, r2, #2
 80097f2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80097f6:	008b      	lsls	r3, r1, #2
 80097f8:	461a      	mov	r2, r3
 80097fa:	4623      	mov	r3, r4
 80097fc:	4628      	mov	r0, r5
 80097fe:	4631      	mov	r1, r6
 8009800:	f7f7 fa72 	bl	8000ce8 <__aeabi_uldivmod>
 8009804:	4603      	mov	r3, r0
 8009806:	460c      	mov	r4, r1
 8009808:	461a      	mov	r2, r3
 800980a:	4b77      	ldr	r3, [pc, #476]	; (80099e8 <UART_SetConfig+0x6f4>)
 800980c:	fba3 1302 	umull	r1, r3, r3, r2
 8009810:	095b      	lsrs	r3, r3, #5
 8009812:	2164      	movs	r1, #100	; 0x64
 8009814:	fb01 f303 	mul.w	r3, r1, r3
 8009818:	1ad3      	subs	r3, r2, r3
 800981a:	011b      	lsls	r3, r3, #4
 800981c:	3332      	adds	r3, #50	; 0x32
 800981e:	4a72      	ldr	r2, [pc, #456]	; (80099e8 <UART_SetConfig+0x6f4>)
 8009820:	fba2 2303 	umull	r2, r3, r2, r3
 8009824:	095b      	lsrs	r3, r3, #5
 8009826:	f003 020f 	and.w	r2, r3, #15
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	4442      	add	r2, r8
 8009830:	609a      	str	r2, [r3, #8]
 8009832:	e0d0      	b.n	80099d6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8009834:	f7fe f8b4 	bl	80079a0 <HAL_RCC_GetPCLK1Freq>
 8009838:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	469a      	mov	sl, r3
 800983e:	f04f 0b00 	mov.w	fp, #0
 8009842:	46d0      	mov	r8, sl
 8009844:	46d9      	mov	r9, fp
 8009846:	eb18 0308 	adds.w	r3, r8, r8
 800984a:	eb49 0409 	adc.w	r4, r9, r9
 800984e:	4698      	mov	r8, r3
 8009850:	46a1      	mov	r9, r4
 8009852:	eb18 080a 	adds.w	r8, r8, sl
 8009856:	eb49 090b 	adc.w	r9, r9, fp
 800985a:	f04f 0100 	mov.w	r1, #0
 800985e:	f04f 0200 	mov.w	r2, #0
 8009862:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009866:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800986a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800986e:	4688      	mov	r8, r1
 8009870:	4691      	mov	r9, r2
 8009872:	eb1a 0508 	adds.w	r5, sl, r8
 8009876:	eb4b 0609 	adc.w	r6, fp, r9
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	685b      	ldr	r3, [r3, #4]
 800987e:	4619      	mov	r1, r3
 8009880:	f04f 0200 	mov.w	r2, #0
 8009884:	f04f 0300 	mov.w	r3, #0
 8009888:	f04f 0400 	mov.w	r4, #0
 800988c:	0094      	lsls	r4, r2, #2
 800988e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009892:	008b      	lsls	r3, r1, #2
 8009894:	461a      	mov	r2, r3
 8009896:	4623      	mov	r3, r4
 8009898:	4628      	mov	r0, r5
 800989a:	4631      	mov	r1, r6
 800989c:	f7f7 fa24 	bl	8000ce8 <__aeabi_uldivmod>
 80098a0:	4603      	mov	r3, r0
 80098a2:	460c      	mov	r4, r1
 80098a4:	461a      	mov	r2, r3
 80098a6:	4b50      	ldr	r3, [pc, #320]	; (80099e8 <UART_SetConfig+0x6f4>)
 80098a8:	fba3 2302 	umull	r2, r3, r3, r2
 80098ac:	095b      	lsrs	r3, r3, #5
 80098ae:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	469b      	mov	fp, r3
 80098b6:	f04f 0c00 	mov.w	ip, #0
 80098ba:	46d9      	mov	r9, fp
 80098bc:	46e2      	mov	sl, ip
 80098be:	eb19 0309 	adds.w	r3, r9, r9
 80098c2:	eb4a 040a 	adc.w	r4, sl, sl
 80098c6:	4699      	mov	r9, r3
 80098c8:	46a2      	mov	sl, r4
 80098ca:	eb19 090b 	adds.w	r9, r9, fp
 80098ce:	eb4a 0a0c 	adc.w	sl, sl, ip
 80098d2:	f04f 0100 	mov.w	r1, #0
 80098d6:	f04f 0200 	mov.w	r2, #0
 80098da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80098de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80098e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80098e6:	4689      	mov	r9, r1
 80098e8:	4692      	mov	sl, r2
 80098ea:	eb1b 0509 	adds.w	r5, fp, r9
 80098ee:	eb4c 060a 	adc.w	r6, ip, sl
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	685b      	ldr	r3, [r3, #4]
 80098f6:	4619      	mov	r1, r3
 80098f8:	f04f 0200 	mov.w	r2, #0
 80098fc:	f04f 0300 	mov.w	r3, #0
 8009900:	f04f 0400 	mov.w	r4, #0
 8009904:	0094      	lsls	r4, r2, #2
 8009906:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800990a:	008b      	lsls	r3, r1, #2
 800990c:	461a      	mov	r2, r3
 800990e:	4623      	mov	r3, r4
 8009910:	4628      	mov	r0, r5
 8009912:	4631      	mov	r1, r6
 8009914:	f7f7 f9e8 	bl	8000ce8 <__aeabi_uldivmod>
 8009918:	4603      	mov	r3, r0
 800991a:	460c      	mov	r4, r1
 800991c:	461a      	mov	r2, r3
 800991e:	4b32      	ldr	r3, [pc, #200]	; (80099e8 <UART_SetConfig+0x6f4>)
 8009920:	fba3 1302 	umull	r1, r3, r3, r2
 8009924:	095b      	lsrs	r3, r3, #5
 8009926:	2164      	movs	r1, #100	; 0x64
 8009928:	fb01 f303 	mul.w	r3, r1, r3
 800992c:	1ad3      	subs	r3, r2, r3
 800992e:	011b      	lsls	r3, r3, #4
 8009930:	3332      	adds	r3, #50	; 0x32
 8009932:	4a2d      	ldr	r2, [pc, #180]	; (80099e8 <UART_SetConfig+0x6f4>)
 8009934:	fba2 2303 	umull	r2, r3, r2, r3
 8009938:	095b      	lsrs	r3, r3, #5
 800993a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800993e:	4498      	add	r8, r3
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	469b      	mov	fp, r3
 8009944:	f04f 0c00 	mov.w	ip, #0
 8009948:	46d9      	mov	r9, fp
 800994a:	46e2      	mov	sl, ip
 800994c:	eb19 0309 	adds.w	r3, r9, r9
 8009950:	eb4a 040a 	adc.w	r4, sl, sl
 8009954:	4699      	mov	r9, r3
 8009956:	46a2      	mov	sl, r4
 8009958:	eb19 090b 	adds.w	r9, r9, fp
 800995c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009960:	f04f 0100 	mov.w	r1, #0
 8009964:	f04f 0200 	mov.w	r2, #0
 8009968:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800996c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009970:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009974:	4689      	mov	r9, r1
 8009976:	4692      	mov	sl, r2
 8009978:	eb1b 0509 	adds.w	r5, fp, r9
 800997c:	eb4c 060a 	adc.w	r6, ip, sl
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	4619      	mov	r1, r3
 8009986:	f04f 0200 	mov.w	r2, #0
 800998a:	f04f 0300 	mov.w	r3, #0
 800998e:	f04f 0400 	mov.w	r4, #0
 8009992:	0094      	lsls	r4, r2, #2
 8009994:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009998:	008b      	lsls	r3, r1, #2
 800999a:	461a      	mov	r2, r3
 800999c:	4623      	mov	r3, r4
 800999e:	4628      	mov	r0, r5
 80099a0:	4631      	mov	r1, r6
 80099a2:	f7f7 f9a1 	bl	8000ce8 <__aeabi_uldivmod>
 80099a6:	4603      	mov	r3, r0
 80099a8:	460c      	mov	r4, r1
 80099aa:	461a      	mov	r2, r3
 80099ac:	4b0e      	ldr	r3, [pc, #56]	; (80099e8 <UART_SetConfig+0x6f4>)
 80099ae:	fba3 1302 	umull	r1, r3, r3, r2
 80099b2:	095b      	lsrs	r3, r3, #5
 80099b4:	2164      	movs	r1, #100	; 0x64
 80099b6:	fb01 f303 	mul.w	r3, r1, r3
 80099ba:	1ad3      	subs	r3, r2, r3
 80099bc:	011b      	lsls	r3, r3, #4
 80099be:	3332      	adds	r3, #50	; 0x32
 80099c0:	4a09      	ldr	r2, [pc, #36]	; (80099e8 <UART_SetConfig+0x6f4>)
 80099c2:	fba2 2303 	umull	r2, r3, r2, r3
 80099c6:	095b      	lsrs	r3, r3, #5
 80099c8:	f003 020f 	and.w	r2, r3, #15
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	4442      	add	r2, r8
 80099d2:	609a      	str	r2, [r3, #8]
}
 80099d4:	e7ff      	b.n	80099d6 <UART_SetConfig+0x6e2>
 80099d6:	bf00      	nop
 80099d8:	3714      	adds	r7, #20
 80099da:	46bd      	mov	sp, r7
 80099dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099e0:	40011000 	.word	0x40011000
 80099e4:	40011400 	.word	0x40011400
 80099e8:	51eb851f 	.word	0x51eb851f

080099ec <__errno>:
 80099ec:	4b01      	ldr	r3, [pc, #4]	; (80099f4 <__errno+0x8>)
 80099ee:	6818      	ldr	r0, [r3, #0]
 80099f0:	4770      	bx	lr
 80099f2:	bf00      	nop
 80099f4:	2000000c 	.word	0x2000000c

080099f8 <__libc_init_array>:
 80099f8:	b570      	push	{r4, r5, r6, lr}
 80099fa:	4e0d      	ldr	r6, [pc, #52]	; (8009a30 <__libc_init_array+0x38>)
 80099fc:	4c0d      	ldr	r4, [pc, #52]	; (8009a34 <__libc_init_array+0x3c>)
 80099fe:	1ba4      	subs	r4, r4, r6
 8009a00:	10a4      	asrs	r4, r4, #2
 8009a02:	2500      	movs	r5, #0
 8009a04:	42a5      	cmp	r5, r4
 8009a06:	d109      	bne.n	8009a1c <__libc_init_array+0x24>
 8009a08:	4e0b      	ldr	r6, [pc, #44]	; (8009a38 <__libc_init_array+0x40>)
 8009a0a:	4c0c      	ldr	r4, [pc, #48]	; (8009a3c <__libc_init_array+0x44>)
 8009a0c:	f003 f9c6 	bl	800cd9c <_init>
 8009a10:	1ba4      	subs	r4, r4, r6
 8009a12:	10a4      	asrs	r4, r4, #2
 8009a14:	2500      	movs	r5, #0
 8009a16:	42a5      	cmp	r5, r4
 8009a18:	d105      	bne.n	8009a26 <__libc_init_array+0x2e>
 8009a1a:	bd70      	pop	{r4, r5, r6, pc}
 8009a1c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009a20:	4798      	blx	r3
 8009a22:	3501      	adds	r5, #1
 8009a24:	e7ee      	b.n	8009a04 <__libc_init_array+0xc>
 8009a26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009a2a:	4798      	blx	r3
 8009a2c:	3501      	adds	r5, #1
 8009a2e:	e7f2      	b.n	8009a16 <__libc_init_array+0x1e>
 8009a30:	0800d358 	.word	0x0800d358
 8009a34:	0800d358 	.word	0x0800d358
 8009a38:	0800d358 	.word	0x0800d358
 8009a3c:	0800d35c 	.word	0x0800d35c

08009a40 <memcpy>:
 8009a40:	b510      	push	{r4, lr}
 8009a42:	1e43      	subs	r3, r0, #1
 8009a44:	440a      	add	r2, r1
 8009a46:	4291      	cmp	r1, r2
 8009a48:	d100      	bne.n	8009a4c <memcpy+0xc>
 8009a4a:	bd10      	pop	{r4, pc}
 8009a4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a54:	e7f7      	b.n	8009a46 <memcpy+0x6>

08009a56 <memset>:
 8009a56:	4402      	add	r2, r0
 8009a58:	4603      	mov	r3, r0
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d100      	bne.n	8009a60 <memset+0xa>
 8009a5e:	4770      	bx	lr
 8009a60:	f803 1b01 	strb.w	r1, [r3], #1
 8009a64:	e7f9      	b.n	8009a5a <memset+0x4>

08009a66 <__cvt>:
 8009a66:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a6a:	ec55 4b10 	vmov	r4, r5, d0
 8009a6e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009a70:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009a74:	2d00      	cmp	r5, #0
 8009a76:	460e      	mov	r6, r1
 8009a78:	4691      	mov	r9, r2
 8009a7a:	4619      	mov	r1, r3
 8009a7c:	bfb8      	it	lt
 8009a7e:	4622      	movlt	r2, r4
 8009a80:	462b      	mov	r3, r5
 8009a82:	f027 0720 	bic.w	r7, r7, #32
 8009a86:	bfbb      	ittet	lt
 8009a88:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009a8c:	461d      	movlt	r5, r3
 8009a8e:	2300      	movge	r3, #0
 8009a90:	232d      	movlt	r3, #45	; 0x2d
 8009a92:	bfb8      	it	lt
 8009a94:	4614      	movlt	r4, r2
 8009a96:	2f46      	cmp	r7, #70	; 0x46
 8009a98:	700b      	strb	r3, [r1, #0]
 8009a9a:	d004      	beq.n	8009aa6 <__cvt+0x40>
 8009a9c:	2f45      	cmp	r7, #69	; 0x45
 8009a9e:	d100      	bne.n	8009aa2 <__cvt+0x3c>
 8009aa0:	3601      	adds	r6, #1
 8009aa2:	2102      	movs	r1, #2
 8009aa4:	e000      	b.n	8009aa8 <__cvt+0x42>
 8009aa6:	2103      	movs	r1, #3
 8009aa8:	ab03      	add	r3, sp, #12
 8009aaa:	9301      	str	r3, [sp, #4]
 8009aac:	ab02      	add	r3, sp, #8
 8009aae:	9300      	str	r3, [sp, #0]
 8009ab0:	4632      	mov	r2, r6
 8009ab2:	4653      	mov	r3, sl
 8009ab4:	ec45 4b10 	vmov	d0, r4, r5
 8009ab8:	f000 fcde 	bl	800a478 <_dtoa_r>
 8009abc:	2f47      	cmp	r7, #71	; 0x47
 8009abe:	4680      	mov	r8, r0
 8009ac0:	d102      	bne.n	8009ac8 <__cvt+0x62>
 8009ac2:	f019 0f01 	tst.w	r9, #1
 8009ac6:	d026      	beq.n	8009b16 <__cvt+0xb0>
 8009ac8:	2f46      	cmp	r7, #70	; 0x46
 8009aca:	eb08 0906 	add.w	r9, r8, r6
 8009ace:	d111      	bne.n	8009af4 <__cvt+0x8e>
 8009ad0:	f898 3000 	ldrb.w	r3, [r8]
 8009ad4:	2b30      	cmp	r3, #48	; 0x30
 8009ad6:	d10a      	bne.n	8009aee <__cvt+0x88>
 8009ad8:	2200      	movs	r2, #0
 8009ada:	2300      	movs	r3, #0
 8009adc:	4620      	mov	r0, r4
 8009ade:	4629      	mov	r1, r5
 8009ae0:	f7f6 fff2 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ae4:	b918      	cbnz	r0, 8009aee <__cvt+0x88>
 8009ae6:	f1c6 0601 	rsb	r6, r6, #1
 8009aea:	f8ca 6000 	str.w	r6, [sl]
 8009aee:	f8da 3000 	ldr.w	r3, [sl]
 8009af2:	4499      	add	r9, r3
 8009af4:	2200      	movs	r2, #0
 8009af6:	2300      	movs	r3, #0
 8009af8:	4620      	mov	r0, r4
 8009afa:	4629      	mov	r1, r5
 8009afc:	f7f6 ffe4 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b00:	b938      	cbnz	r0, 8009b12 <__cvt+0xac>
 8009b02:	2230      	movs	r2, #48	; 0x30
 8009b04:	9b03      	ldr	r3, [sp, #12]
 8009b06:	454b      	cmp	r3, r9
 8009b08:	d205      	bcs.n	8009b16 <__cvt+0xb0>
 8009b0a:	1c59      	adds	r1, r3, #1
 8009b0c:	9103      	str	r1, [sp, #12]
 8009b0e:	701a      	strb	r2, [r3, #0]
 8009b10:	e7f8      	b.n	8009b04 <__cvt+0x9e>
 8009b12:	f8cd 900c 	str.w	r9, [sp, #12]
 8009b16:	9b03      	ldr	r3, [sp, #12]
 8009b18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b1a:	eba3 0308 	sub.w	r3, r3, r8
 8009b1e:	4640      	mov	r0, r8
 8009b20:	6013      	str	r3, [r2, #0]
 8009b22:	b004      	add	sp, #16
 8009b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009b28 <__exponent>:
 8009b28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b2a:	2900      	cmp	r1, #0
 8009b2c:	4604      	mov	r4, r0
 8009b2e:	bfba      	itte	lt
 8009b30:	4249      	neglt	r1, r1
 8009b32:	232d      	movlt	r3, #45	; 0x2d
 8009b34:	232b      	movge	r3, #43	; 0x2b
 8009b36:	2909      	cmp	r1, #9
 8009b38:	f804 2b02 	strb.w	r2, [r4], #2
 8009b3c:	7043      	strb	r3, [r0, #1]
 8009b3e:	dd20      	ble.n	8009b82 <__exponent+0x5a>
 8009b40:	f10d 0307 	add.w	r3, sp, #7
 8009b44:	461f      	mov	r7, r3
 8009b46:	260a      	movs	r6, #10
 8009b48:	fb91 f5f6 	sdiv	r5, r1, r6
 8009b4c:	fb06 1115 	mls	r1, r6, r5, r1
 8009b50:	3130      	adds	r1, #48	; 0x30
 8009b52:	2d09      	cmp	r5, #9
 8009b54:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009b58:	f103 32ff 	add.w	r2, r3, #4294967295
 8009b5c:	4629      	mov	r1, r5
 8009b5e:	dc09      	bgt.n	8009b74 <__exponent+0x4c>
 8009b60:	3130      	adds	r1, #48	; 0x30
 8009b62:	3b02      	subs	r3, #2
 8009b64:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009b68:	42bb      	cmp	r3, r7
 8009b6a:	4622      	mov	r2, r4
 8009b6c:	d304      	bcc.n	8009b78 <__exponent+0x50>
 8009b6e:	1a10      	subs	r0, r2, r0
 8009b70:	b003      	add	sp, #12
 8009b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b74:	4613      	mov	r3, r2
 8009b76:	e7e7      	b.n	8009b48 <__exponent+0x20>
 8009b78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b7c:	f804 2b01 	strb.w	r2, [r4], #1
 8009b80:	e7f2      	b.n	8009b68 <__exponent+0x40>
 8009b82:	2330      	movs	r3, #48	; 0x30
 8009b84:	4419      	add	r1, r3
 8009b86:	7083      	strb	r3, [r0, #2]
 8009b88:	1d02      	adds	r2, r0, #4
 8009b8a:	70c1      	strb	r1, [r0, #3]
 8009b8c:	e7ef      	b.n	8009b6e <__exponent+0x46>
	...

08009b90 <_printf_float>:
 8009b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b94:	b08d      	sub	sp, #52	; 0x34
 8009b96:	460c      	mov	r4, r1
 8009b98:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8009b9c:	4616      	mov	r6, r2
 8009b9e:	461f      	mov	r7, r3
 8009ba0:	4605      	mov	r5, r0
 8009ba2:	f001 fa21 	bl	800afe8 <_localeconv_r>
 8009ba6:	6803      	ldr	r3, [r0, #0]
 8009ba8:	9304      	str	r3, [sp, #16]
 8009baa:	4618      	mov	r0, r3
 8009bac:	f7f6 fb60 	bl	8000270 <strlen>
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	930a      	str	r3, [sp, #40]	; 0x28
 8009bb4:	f8d8 3000 	ldr.w	r3, [r8]
 8009bb8:	9005      	str	r0, [sp, #20]
 8009bba:	3307      	adds	r3, #7
 8009bbc:	f023 0307 	bic.w	r3, r3, #7
 8009bc0:	f103 0208 	add.w	r2, r3, #8
 8009bc4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009bc8:	f8d4 b000 	ldr.w	fp, [r4]
 8009bcc:	f8c8 2000 	str.w	r2, [r8]
 8009bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009bd8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009bdc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009be0:	9307      	str	r3, [sp, #28]
 8009be2:	f8cd 8018 	str.w	r8, [sp, #24]
 8009be6:	f04f 32ff 	mov.w	r2, #4294967295
 8009bea:	4ba7      	ldr	r3, [pc, #668]	; (8009e88 <_printf_float+0x2f8>)
 8009bec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009bf0:	f7f6 ff9c 	bl	8000b2c <__aeabi_dcmpun>
 8009bf4:	bb70      	cbnz	r0, 8009c54 <_printf_float+0xc4>
 8009bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8009bfa:	4ba3      	ldr	r3, [pc, #652]	; (8009e88 <_printf_float+0x2f8>)
 8009bfc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c00:	f7f6 ff76 	bl	8000af0 <__aeabi_dcmple>
 8009c04:	bb30      	cbnz	r0, 8009c54 <_printf_float+0xc4>
 8009c06:	2200      	movs	r2, #0
 8009c08:	2300      	movs	r3, #0
 8009c0a:	4640      	mov	r0, r8
 8009c0c:	4649      	mov	r1, r9
 8009c0e:	f7f6 ff65 	bl	8000adc <__aeabi_dcmplt>
 8009c12:	b110      	cbz	r0, 8009c1a <_printf_float+0x8a>
 8009c14:	232d      	movs	r3, #45	; 0x2d
 8009c16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c1a:	4a9c      	ldr	r2, [pc, #624]	; (8009e8c <_printf_float+0x2fc>)
 8009c1c:	4b9c      	ldr	r3, [pc, #624]	; (8009e90 <_printf_float+0x300>)
 8009c1e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009c22:	bf8c      	ite	hi
 8009c24:	4690      	movhi	r8, r2
 8009c26:	4698      	movls	r8, r3
 8009c28:	2303      	movs	r3, #3
 8009c2a:	f02b 0204 	bic.w	r2, fp, #4
 8009c2e:	6123      	str	r3, [r4, #16]
 8009c30:	6022      	str	r2, [r4, #0]
 8009c32:	f04f 0900 	mov.w	r9, #0
 8009c36:	9700      	str	r7, [sp, #0]
 8009c38:	4633      	mov	r3, r6
 8009c3a:	aa0b      	add	r2, sp, #44	; 0x2c
 8009c3c:	4621      	mov	r1, r4
 8009c3e:	4628      	mov	r0, r5
 8009c40:	f000 f9e6 	bl	800a010 <_printf_common>
 8009c44:	3001      	adds	r0, #1
 8009c46:	f040 808d 	bne.w	8009d64 <_printf_float+0x1d4>
 8009c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8009c4e:	b00d      	add	sp, #52	; 0x34
 8009c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c54:	4642      	mov	r2, r8
 8009c56:	464b      	mov	r3, r9
 8009c58:	4640      	mov	r0, r8
 8009c5a:	4649      	mov	r1, r9
 8009c5c:	f7f6 ff66 	bl	8000b2c <__aeabi_dcmpun>
 8009c60:	b110      	cbz	r0, 8009c68 <_printf_float+0xd8>
 8009c62:	4a8c      	ldr	r2, [pc, #560]	; (8009e94 <_printf_float+0x304>)
 8009c64:	4b8c      	ldr	r3, [pc, #560]	; (8009e98 <_printf_float+0x308>)
 8009c66:	e7da      	b.n	8009c1e <_printf_float+0x8e>
 8009c68:	6861      	ldr	r1, [r4, #4]
 8009c6a:	1c4b      	adds	r3, r1, #1
 8009c6c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8009c70:	a80a      	add	r0, sp, #40	; 0x28
 8009c72:	d13e      	bne.n	8009cf2 <_printf_float+0x162>
 8009c74:	2306      	movs	r3, #6
 8009c76:	6063      	str	r3, [r4, #4]
 8009c78:	2300      	movs	r3, #0
 8009c7a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009c7e:	ab09      	add	r3, sp, #36	; 0x24
 8009c80:	9300      	str	r3, [sp, #0]
 8009c82:	ec49 8b10 	vmov	d0, r8, r9
 8009c86:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009c8a:	6022      	str	r2, [r4, #0]
 8009c8c:	f8cd a004 	str.w	sl, [sp, #4]
 8009c90:	6861      	ldr	r1, [r4, #4]
 8009c92:	4628      	mov	r0, r5
 8009c94:	f7ff fee7 	bl	8009a66 <__cvt>
 8009c98:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8009c9c:	2b47      	cmp	r3, #71	; 0x47
 8009c9e:	4680      	mov	r8, r0
 8009ca0:	d109      	bne.n	8009cb6 <_printf_float+0x126>
 8009ca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ca4:	1cd8      	adds	r0, r3, #3
 8009ca6:	db02      	blt.n	8009cae <_printf_float+0x11e>
 8009ca8:	6862      	ldr	r2, [r4, #4]
 8009caa:	4293      	cmp	r3, r2
 8009cac:	dd47      	ble.n	8009d3e <_printf_float+0x1ae>
 8009cae:	f1aa 0a02 	sub.w	sl, sl, #2
 8009cb2:	fa5f fa8a 	uxtb.w	sl, sl
 8009cb6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009cba:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009cbc:	d824      	bhi.n	8009d08 <_printf_float+0x178>
 8009cbe:	3901      	subs	r1, #1
 8009cc0:	4652      	mov	r2, sl
 8009cc2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009cc6:	9109      	str	r1, [sp, #36]	; 0x24
 8009cc8:	f7ff ff2e 	bl	8009b28 <__exponent>
 8009ccc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009cce:	1813      	adds	r3, r2, r0
 8009cd0:	2a01      	cmp	r2, #1
 8009cd2:	4681      	mov	r9, r0
 8009cd4:	6123      	str	r3, [r4, #16]
 8009cd6:	dc02      	bgt.n	8009cde <_printf_float+0x14e>
 8009cd8:	6822      	ldr	r2, [r4, #0]
 8009cda:	07d1      	lsls	r1, r2, #31
 8009cdc:	d501      	bpl.n	8009ce2 <_printf_float+0x152>
 8009cde:	3301      	adds	r3, #1
 8009ce0:	6123      	str	r3, [r4, #16]
 8009ce2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d0a5      	beq.n	8009c36 <_printf_float+0xa6>
 8009cea:	232d      	movs	r3, #45	; 0x2d
 8009cec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009cf0:	e7a1      	b.n	8009c36 <_printf_float+0xa6>
 8009cf2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8009cf6:	f000 8177 	beq.w	8009fe8 <_printf_float+0x458>
 8009cfa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009cfe:	d1bb      	bne.n	8009c78 <_printf_float+0xe8>
 8009d00:	2900      	cmp	r1, #0
 8009d02:	d1b9      	bne.n	8009c78 <_printf_float+0xe8>
 8009d04:	2301      	movs	r3, #1
 8009d06:	e7b6      	b.n	8009c76 <_printf_float+0xe6>
 8009d08:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8009d0c:	d119      	bne.n	8009d42 <_printf_float+0x1b2>
 8009d0e:	2900      	cmp	r1, #0
 8009d10:	6863      	ldr	r3, [r4, #4]
 8009d12:	dd0c      	ble.n	8009d2e <_printf_float+0x19e>
 8009d14:	6121      	str	r1, [r4, #16]
 8009d16:	b913      	cbnz	r3, 8009d1e <_printf_float+0x18e>
 8009d18:	6822      	ldr	r2, [r4, #0]
 8009d1a:	07d2      	lsls	r2, r2, #31
 8009d1c:	d502      	bpl.n	8009d24 <_printf_float+0x194>
 8009d1e:	3301      	adds	r3, #1
 8009d20:	440b      	add	r3, r1
 8009d22:	6123      	str	r3, [r4, #16]
 8009d24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d26:	65a3      	str	r3, [r4, #88]	; 0x58
 8009d28:	f04f 0900 	mov.w	r9, #0
 8009d2c:	e7d9      	b.n	8009ce2 <_printf_float+0x152>
 8009d2e:	b913      	cbnz	r3, 8009d36 <_printf_float+0x1a6>
 8009d30:	6822      	ldr	r2, [r4, #0]
 8009d32:	07d0      	lsls	r0, r2, #31
 8009d34:	d501      	bpl.n	8009d3a <_printf_float+0x1aa>
 8009d36:	3302      	adds	r3, #2
 8009d38:	e7f3      	b.n	8009d22 <_printf_float+0x192>
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	e7f1      	b.n	8009d22 <_printf_float+0x192>
 8009d3e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8009d42:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009d46:	4293      	cmp	r3, r2
 8009d48:	db05      	blt.n	8009d56 <_printf_float+0x1c6>
 8009d4a:	6822      	ldr	r2, [r4, #0]
 8009d4c:	6123      	str	r3, [r4, #16]
 8009d4e:	07d1      	lsls	r1, r2, #31
 8009d50:	d5e8      	bpl.n	8009d24 <_printf_float+0x194>
 8009d52:	3301      	adds	r3, #1
 8009d54:	e7e5      	b.n	8009d22 <_printf_float+0x192>
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	bfd4      	ite	le
 8009d5a:	f1c3 0302 	rsble	r3, r3, #2
 8009d5e:	2301      	movgt	r3, #1
 8009d60:	4413      	add	r3, r2
 8009d62:	e7de      	b.n	8009d22 <_printf_float+0x192>
 8009d64:	6823      	ldr	r3, [r4, #0]
 8009d66:	055a      	lsls	r2, r3, #21
 8009d68:	d407      	bmi.n	8009d7a <_printf_float+0x1ea>
 8009d6a:	6923      	ldr	r3, [r4, #16]
 8009d6c:	4642      	mov	r2, r8
 8009d6e:	4631      	mov	r1, r6
 8009d70:	4628      	mov	r0, r5
 8009d72:	47b8      	blx	r7
 8009d74:	3001      	adds	r0, #1
 8009d76:	d12b      	bne.n	8009dd0 <_printf_float+0x240>
 8009d78:	e767      	b.n	8009c4a <_printf_float+0xba>
 8009d7a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009d7e:	f240 80dc 	bls.w	8009f3a <_printf_float+0x3aa>
 8009d82:	2200      	movs	r2, #0
 8009d84:	2300      	movs	r3, #0
 8009d86:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009d8a:	f7f6 fe9d 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d8e:	2800      	cmp	r0, #0
 8009d90:	d033      	beq.n	8009dfa <_printf_float+0x26a>
 8009d92:	2301      	movs	r3, #1
 8009d94:	4a41      	ldr	r2, [pc, #260]	; (8009e9c <_printf_float+0x30c>)
 8009d96:	4631      	mov	r1, r6
 8009d98:	4628      	mov	r0, r5
 8009d9a:	47b8      	blx	r7
 8009d9c:	3001      	adds	r0, #1
 8009d9e:	f43f af54 	beq.w	8009c4a <_printf_float+0xba>
 8009da2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009da6:	429a      	cmp	r2, r3
 8009da8:	db02      	blt.n	8009db0 <_printf_float+0x220>
 8009daa:	6823      	ldr	r3, [r4, #0]
 8009dac:	07d8      	lsls	r0, r3, #31
 8009dae:	d50f      	bpl.n	8009dd0 <_printf_float+0x240>
 8009db0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009db4:	4631      	mov	r1, r6
 8009db6:	4628      	mov	r0, r5
 8009db8:	47b8      	blx	r7
 8009dba:	3001      	adds	r0, #1
 8009dbc:	f43f af45 	beq.w	8009c4a <_printf_float+0xba>
 8009dc0:	f04f 0800 	mov.w	r8, #0
 8009dc4:	f104 091a 	add.w	r9, r4, #26
 8009dc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dca:	3b01      	subs	r3, #1
 8009dcc:	4543      	cmp	r3, r8
 8009dce:	dc09      	bgt.n	8009de4 <_printf_float+0x254>
 8009dd0:	6823      	ldr	r3, [r4, #0]
 8009dd2:	079b      	lsls	r3, r3, #30
 8009dd4:	f100 8103 	bmi.w	8009fde <_printf_float+0x44e>
 8009dd8:	68e0      	ldr	r0, [r4, #12]
 8009dda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ddc:	4298      	cmp	r0, r3
 8009dde:	bfb8      	it	lt
 8009de0:	4618      	movlt	r0, r3
 8009de2:	e734      	b.n	8009c4e <_printf_float+0xbe>
 8009de4:	2301      	movs	r3, #1
 8009de6:	464a      	mov	r2, r9
 8009de8:	4631      	mov	r1, r6
 8009dea:	4628      	mov	r0, r5
 8009dec:	47b8      	blx	r7
 8009dee:	3001      	adds	r0, #1
 8009df0:	f43f af2b 	beq.w	8009c4a <_printf_float+0xba>
 8009df4:	f108 0801 	add.w	r8, r8, #1
 8009df8:	e7e6      	b.n	8009dc8 <_printf_float+0x238>
 8009dfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	dc2b      	bgt.n	8009e58 <_printf_float+0x2c8>
 8009e00:	2301      	movs	r3, #1
 8009e02:	4a26      	ldr	r2, [pc, #152]	; (8009e9c <_printf_float+0x30c>)
 8009e04:	4631      	mov	r1, r6
 8009e06:	4628      	mov	r0, r5
 8009e08:	47b8      	blx	r7
 8009e0a:	3001      	adds	r0, #1
 8009e0c:	f43f af1d 	beq.w	8009c4a <_printf_float+0xba>
 8009e10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e12:	b923      	cbnz	r3, 8009e1e <_printf_float+0x28e>
 8009e14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e16:	b913      	cbnz	r3, 8009e1e <_printf_float+0x28e>
 8009e18:	6823      	ldr	r3, [r4, #0]
 8009e1a:	07d9      	lsls	r1, r3, #31
 8009e1c:	d5d8      	bpl.n	8009dd0 <_printf_float+0x240>
 8009e1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e22:	4631      	mov	r1, r6
 8009e24:	4628      	mov	r0, r5
 8009e26:	47b8      	blx	r7
 8009e28:	3001      	adds	r0, #1
 8009e2a:	f43f af0e 	beq.w	8009c4a <_printf_float+0xba>
 8009e2e:	f04f 0900 	mov.w	r9, #0
 8009e32:	f104 0a1a 	add.w	sl, r4, #26
 8009e36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e38:	425b      	negs	r3, r3
 8009e3a:	454b      	cmp	r3, r9
 8009e3c:	dc01      	bgt.n	8009e42 <_printf_float+0x2b2>
 8009e3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e40:	e794      	b.n	8009d6c <_printf_float+0x1dc>
 8009e42:	2301      	movs	r3, #1
 8009e44:	4652      	mov	r2, sl
 8009e46:	4631      	mov	r1, r6
 8009e48:	4628      	mov	r0, r5
 8009e4a:	47b8      	blx	r7
 8009e4c:	3001      	adds	r0, #1
 8009e4e:	f43f aefc 	beq.w	8009c4a <_printf_float+0xba>
 8009e52:	f109 0901 	add.w	r9, r9, #1
 8009e56:	e7ee      	b.n	8009e36 <_printf_float+0x2a6>
 8009e58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009e5c:	429a      	cmp	r2, r3
 8009e5e:	bfa8      	it	ge
 8009e60:	461a      	movge	r2, r3
 8009e62:	2a00      	cmp	r2, #0
 8009e64:	4691      	mov	r9, r2
 8009e66:	dd07      	ble.n	8009e78 <_printf_float+0x2e8>
 8009e68:	4613      	mov	r3, r2
 8009e6a:	4631      	mov	r1, r6
 8009e6c:	4642      	mov	r2, r8
 8009e6e:	4628      	mov	r0, r5
 8009e70:	47b8      	blx	r7
 8009e72:	3001      	adds	r0, #1
 8009e74:	f43f aee9 	beq.w	8009c4a <_printf_float+0xba>
 8009e78:	f104 031a 	add.w	r3, r4, #26
 8009e7c:	f04f 0b00 	mov.w	fp, #0
 8009e80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e84:	9306      	str	r3, [sp, #24]
 8009e86:	e015      	b.n	8009eb4 <_printf_float+0x324>
 8009e88:	7fefffff 	.word	0x7fefffff
 8009e8c:	0800cf14 	.word	0x0800cf14
 8009e90:	0800cf10 	.word	0x0800cf10
 8009e94:	0800cf1c 	.word	0x0800cf1c
 8009e98:	0800cf18 	.word	0x0800cf18
 8009e9c:	0800cf20 	.word	0x0800cf20
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	9a06      	ldr	r2, [sp, #24]
 8009ea4:	4631      	mov	r1, r6
 8009ea6:	4628      	mov	r0, r5
 8009ea8:	47b8      	blx	r7
 8009eaa:	3001      	adds	r0, #1
 8009eac:	f43f aecd 	beq.w	8009c4a <_printf_float+0xba>
 8009eb0:	f10b 0b01 	add.w	fp, fp, #1
 8009eb4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009eb8:	ebaa 0309 	sub.w	r3, sl, r9
 8009ebc:	455b      	cmp	r3, fp
 8009ebe:	dcef      	bgt.n	8009ea0 <_printf_float+0x310>
 8009ec0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	44d0      	add	r8, sl
 8009ec8:	db15      	blt.n	8009ef6 <_printf_float+0x366>
 8009eca:	6823      	ldr	r3, [r4, #0]
 8009ecc:	07da      	lsls	r2, r3, #31
 8009ece:	d412      	bmi.n	8009ef6 <_printf_float+0x366>
 8009ed0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ed2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009ed4:	eba3 020a 	sub.w	r2, r3, sl
 8009ed8:	eba3 0a01 	sub.w	sl, r3, r1
 8009edc:	4592      	cmp	sl, r2
 8009ede:	bfa8      	it	ge
 8009ee0:	4692      	movge	sl, r2
 8009ee2:	f1ba 0f00 	cmp.w	sl, #0
 8009ee6:	dc0e      	bgt.n	8009f06 <_printf_float+0x376>
 8009ee8:	f04f 0800 	mov.w	r8, #0
 8009eec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009ef0:	f104 091a 	add.w	r9, r4, #26
 8009ef4:	e019      	b.n	8009f2a <_printf_float+0x39a>
 8009ef6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009efa:	4631      	mov	r1, r6
 8009efc:	4628      	mov	r0, r5
 8009efe:	47b8      	blx	r7
 8009f00:	3001      	adds	r0, #1
 8009f02:	d1e5      	bne.n	8009ed0 <_printf_float+0x340>
 8009f04:	e6a1      	b.n	8009c4a <_printf_float+0xba>
 8009f06:	4653      	mov	r3, sl
 8009f08:	4642      	mov	r2, r8
 8009f0a:	4631      	mov	r1, r6
 8009f0c:	4628      	mov	r0, r5
 8009f0e:	47b8      	blx	r7
 8009f10:	3001      	adds	r0, #1
 8009f12:	d1e9      	bne.n	8009ee8 <_printf_float+0x358>
 8009f14:	e699      	b.n	8009c4a <_printf_float+0xba>
 8009f16:	2301      	movs	r3, #1
 8009f18:	464a      	mov	r2, r9
 8009f1a:	4631      	mov	r1, r6
 8009f1c:	4628      	mov	r0, r5
 8009f1e:	47b8      	blx	r7
 8009f20:	3001      	adds	r0, #1
 8009f22:	f43f ae92 	beq.w	8009c4a <_printf_float+0xba>
 8009f26:	f108 0801 	add.w	r8, r8, #1
 8009f2a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f2e:	1a9b      	subs	r3, r3, r2
 8009f30:	eba3 030a 	sub.w	r3, r3, sl
 8009f34:	4543      	cmp	r3, r8
 8009f36:	dcee      	bgt.n	8009f16 <_printf_float+0x386>
 8009f38:	e74a      	b.n	8009dd0 <_printf_float+0x240>
 8009f3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f3c:	2a01      	cmp	r2, #1
 8009f3e:	dc01      	bgt.n	8009f44 <_printf_float+0x3b4>
 8009f40:	07db      	lsls	r3, r3, #31
 8009f42:	d53a      	bpl.n	8009fba <_printf_float+0x42a>
 8009f44:	2301      	movs	r3, #1
 8009f46:	4642      	mov	r2, r8
 8009f48:	4631      	mov	r1, r6
 8009f4a:	4628      	mov	r0, r5
 8009f4c:	47b8      	blx	r7
 8009f4e:	3001      	adds	r0, #1
 8009f50:	f43f ae7b 	beq.w	8009c4a <_printf_float+0xba>
 8009f54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f58:	4631      	mov	r1, r6
 8009f5a:	4628      	mov	r0, r5
 8009f5c:	47b8      	blx	r7
 8009f5e:	3001      	adds	r0, #1
 8009f60:	f108 0801 	add.w	r8, r8, #1
 8009f64:	f43f ae71 	beq.w	8009c4a <_printf_float+0xba>
 8009f68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	f103 3aff 	add.w	sl, r3, #4294967295
 8009f70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009f74:	2300      	movs	r3, #0
 8009f76:	f7f6 fda7 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f7a:	b9c8      	cbnz	r0, 8009fb0 <_printf_float+0x420>
 8009f7c:	4653      	mov	r3, sl
 8009f7e:	4642      	mov	r2, r8
 8009f80:	4631      	mov	r1, r6
 8009f82:	4628      	mov	r0, r5
 8009f84:	47b8      	blx	r7
 8009f86:	3001      	adds	r0, #1
 8009f88:	d10e      	bne.n	8009fa8 <_printf_float+0x418>
 8009f8a:	e65e      	b.n	8009c4a <_printf_float+0xba>
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	4652      	mov	r2, sl
 8009f90:	4631      	mov	r1, r6
 8009f92:	4628      	mov	r0, r5
 8009f94:	47b8      	blx	r7
 8009f96:	3001      	adds	r0, #1
 8009f98:	f43f ae57 	beq.w	8009c4a <_printf_float+0xba>
 8009f9c:	f108 0801 	add.w	r8, r8, #1
 8009fa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fa2:	3b01      	subs	r3, #1
 8009fa4:	4543      	cmp	r3, r8
 8009fa6:	dcf1      	bgt.n	8009f8c <_printf_float+0x3fc>
 8009fa8:	464b      	mov	r3, r9
 8009faa:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009fae:	e6de      	b.n	8009d6e <_printf_float+0x1de>
 8009fb0:	f04f 0800 	mov.w	r8, #0
 8009fb4:	f104 0a1a 	add.w	sl, r4, #26
 8009fb8:	e7f2      	b.n	8009fa0 <_printf_float+0x410>
 8009fba:	2301      	movs	r3, #1
 8009fbc:	e7df      	b.n	8009f7e <_printf_float+0x3ee>
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	464a      	mov	r2, r9
 8009fc2:	4631      	mov	r1, r6
 8009fc4:	4628      	mov	r0, r5
 8009fc6:	47b8      	blx	r7
 8009fc8:	3001      	adds	r0, #1
 8009fca:	f43f ae3e 	beq.w	8009c4a <_printf_float+0xba>
 8009fce:	f108 0801 	add.w	r8, r8, #1
 8009fd2:	68e3      	ldr	r3, [r4, #12]
 8009fd4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009fd6:	1a9b      	subs	r3, r3, r2
 8009fd8:	4543      	cmp	r3, r8
 8009fda:	dcf0      	bgt.n	8009fbe <_printf_float+0x42e>
 8009fdc:	e6fc      	b.n	8009dd8 <_printf_float+0x248>
 8009fde:	f04f 0800 	mov.w	r8, #0
 8009fe2:	f104 0919 	add.w	r9, r4, #25
 8009fe6:	e7f4      	b.n	8009fd2 <_printf_float+0x442>
 8009fe8:	2900      	cmp	r1, #0
 8009fea:	f43f ae8b 	beq.w	8009d04 <_printf_float+0x174>
 8009fee:	2300      	movs	r3, #0
 8009ff0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009ff4:	ab09      	add	r3, sp, #36	; 0x24
 8009ff6:	9300      	str	r3, [sp, #0]
 8009ff8:	ec49 8b10 	vmov	d0, r8, r9
 8009ffc:	6022      	str	r2, [r4, #0]
 8009ffe:	f8cd a004 	str.w	sl, [sp, #4]
 800a002:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a006:	4628      	mov	r0, r5
 800a008:	f7ff fd2d 	bl	8009a66 <__cvt>
 800a00c:	4680      	mov	r8, r0
 800a00e:	e648      	b.n	8009ca2 <_printf_float+0x112>

0800a010 <_printf_common>:
 800a010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a014:	4691      	mov	r9, r2
 800a016:	461f      	mov	r7, r3
 800a018:	688a      	ldr	r2, [r1, #8]
 800a01a:	690b      	ldr	r3, [r1, #16]
 800a01c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a020:	4293      	cmp	r3, r2
 800a022:	bfb8      	it	lt
 800a024:	4613      	movlt	r3, r2
 800a026:	f8c9 3000 	str.w	r3, [r9]
 800a02a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a02e:	4606      	mov	r6, r0
 800a030:	460c      	mov	r4, r1
 800a032:	b112      	cbz	r2, 800a03a <_printf_common+0x2a>
 800a034:	3301      	adds	r3, #1
 800a036:	f8c9 3000 	str.w	r3, [r9]
 800a03a:	6823      	ldr	r3, [r4, #0]
 800a03c:	0699      	lsls	r1, r3, #26
 800a03e:	bf42      	ittt	mi
 800a040:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a044:	3302      	addmi	r3, #2
 800a046:	f8c9 3000 	strmi.w	r3, [r9]
 800a04a:	6825      	ldr	r5, [r4, #0]
 800a04c:	f015 0506 	ands.w	r5, r5, #6
 800a050:	d107      	bne.n	800a062 <_printf_common+0x52>
 800a052:	f104 0a19 	add.w	sl, r4, #25
 800a056:	68e3      	ldr	r3, [r4, #12]
 800a058:	f8d9 2000 	ldr.w	r2, [r9]
 800a05c:	1a9b      	subs	r3, r3, r2
 800a05e:	42ab      	cmp	r3, r5
 800a060:	dc28      	bgt.n	800a0b4 <_printf_common+0xa4>
 800a062:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a066:	6822      	ldr	r2, [r4, #0]
 800a068:	3300      	adds	r3, #0
 800a06a:	bf18      	it	ne
 800a06c:	2301      	movne	r3, #1
 800a06e:	0692      	lsls	r2, r2, #26
 800a070:	d42d      	bmi.n	800a0ce <_printf_common+0xbe>
 800a072:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a076:	4639      	mov	r1, r7
 800a078:	4630      	mov	r0, r6
 800a07a:	47c0      	blx	r8
 800a07c:	3001      	adds	r0, #1
 800a07e:	d020      	beq.n	800a0c2 <_printf_common+0xb2>
 800a080:	6823      	ldr	r3, [r4, #0]
 800a082:	68e5      	ldr	r5, [r4, #12]
 800a084:	f8d9 2000 	ldr.w	r2, [r9]
 800a088:	f003 0306 	and.w	r3, r3, #6
 800a08c:	2b04      	cmp	r3, #4
 800a08e:	bf08      	it	eq
 800a090:	1aad      	subeq	r5, r5, r2
 800a092:	68a3      	ldr	r3, [r4, #8]
 800a094:	6922      	ldr	r2, [r4, #16]
 800a096:	bf0c      	ite	eq
 800a098:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a09c:	2500      	movne	r5, #0
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	bfc4      	itt	gt
 800a0a2:	1a9b      	subgt	r3, r3, r2
 800a0a4:	18ed      	addgt	r5, r5, r3
 800a0a6:	f04f 0900 	mov.w	r9, #0
 800a0aa:	341a      	adds	r4, #26
 800a0ac:	454d      	cmp	r5, r9
 800a0ae:	d11a      	bne.n	800a0e6 <_printf_common+0xd6>
 800a0b0:	2000      	movs	r0, #0
 800a0b2:	e008      	b.n	800a0c6 <_printf_common+0xb6>
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	4652      	mov	r2, sl
 800a0b8:	4639      	mov	r1, r7
 800a0ba:	4630      	mov	r0, r6
 800a0bc:	47c0      	blx	r8
 800a0be:	3001      	adds	r0, #1
 800a0c0:	d103      	bne.n	800a0ca <_printf_common+0xba>
 800a0c2:	f04f 30ff 	mov.w	r0, #4294967295
 800a0c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0ca:	3501      	adds	r5, #1
 800a0cc:	e7c3      	b.n	800a056 <_printf_common+0x46>
 800a0ce:	18e1      	adds	r1, r4, r3
 800a0d0:	1c5a      	adds	r2, r3, #1
 800a0d2:	2030      	movs	r0, #48	; 0x30
 800a0d4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a0d8:	4422      	add	r2, r4
 800a0da:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a0de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a0e2:	3302      	adds	r3, #2
 800a0e4:	e7c5      	b.n	800a072 <_printf_common+0x62>
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	4622      	mov	r2, r4
 800a0ea:	4639      	mov	r1, r7
 800a0ec:	4630      	mov	r0, r6
 800a0ee:	47c0      	blx	r8
 800a0f0:	3001      	adds	r0, #1
 800a0f2:	d0e6      	beq.n	800a0c2 <_printf_common+0xb2>
 800a0f4:	f109 0901 	add.w	r9, r9, #1
 800a0f8:	e7d8      	b.n	800a0ac <_printf_common+0x9c>
	...

0800a0fc <_printf_i>:
 800a0fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a100:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a104:	460c      	mov	r4, r1
 800a106:	7e09      	ldrb	r1, [r1, #24]
 800a108:	b085      	sub	sp, #20
 800a10a:	296e      	cmp	r1, #110	; 0x6e
 800a10c:	4617      	mov	r7, r2
 800a10e:	4606      	mov	r6, r0
 800a110:	4698      	mov	r8, r3
 800a112:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a114:	f000 80b3 	beq.w	800a27e <_printf_i+0x182>
 800a118:	d822      	bhi.n	800a160 <_printf_i+0x64>
 800a11a:	2963      	cmp	r1, #99	; 0x63
 800a11c:	d036      	beq.n	800a18c <_printf_i+0x90>
 800a11e:	d80a      	bhi.n	800a136 <_printf_i+0x3a>
 800a120:	2900      	cmp	r1, #0
 800a122:	f000 80b9 	beq.w	800a298 <_printf_i+0x19c>
 800a126:	2958      	cmp	r1, #88	; 0x58
 800a128:	f000 8083 	beq.w	800a232 <_printf_i+0x136>
 800a12c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a130:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a134:	e032      	b.n	800a19c <_printf_i+0xa0>
 800a136:	2964      	cmp	r1, #100	; 0x64
 800a138:	d001      	beq.n	800a13e <_printf_i+0x42>
 800a13a:	2969      	cmp	r1, #105	; 0x69
 800a13c:	d1f6      	bne.n	800a12c <_printf_i+0x30>
 800a13e:	6820      	ldr	r0, [r4, #0]
 800a140:	6813      	ldr	r3, [r2, #0]
 800a142:	0605      	lsls	r5, r0, #24
 800a144:	f103 0104 	add.w	r1, r3, #4
 800a148:	d52a      	bpl.n	800a1a0 <_printf_i+0xa4>
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	6011      	str	r1, [r2, #0]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	da03      	bge.n	800a15a <_printf_i+0x5e>
 800a152:	222d      	movs	r2, #45	; 0x2d
 800a154:	425b      	negs	r3, r3
 800a156:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a15a:	486f      	ldr	r0, [pc, #444]	; (800a318 <_printf_i+0x21c>)
 800a15c:	220a      	movs	r2, #10
 800a15e:	e039      	b.n	800a1d4 <_printf_i+0xd8>
 800a160:	2973      	cmp	r1, #115	; 0x73
 800a162:	f000 809d 	beq.w	800a2a0 <_printf_i+0x1a4>
 800a166:	d808      	bhi.n	800a17a <_printf_i+0x7e>
 800a168:	296f      	cmp	r1, #111	; 0x6f
 800a16a:	d020      	beq.n	800a1ae <_printf_i+0xb2>
 800a16c:	2970      	cmp	r1, #112	; 0x70
 800a16e:	d1dd      	bne.n	800a12c <_printf_i+0x30>
 800a170:	6823      	ldr	r3, [r4, #0]
 800a172:	f043 0320 	orr.w	r3, r3, #32
 800a176:	6023      	str	r3, [r4, #0]
 800a178:	e003      	b.n	800a182 <_printf_i+0x86>
 800a17a:	2975      	cmp	r1, #117	; 0x75
 800a17c:	d017      	beq.n	800a1ae <_printf_i+0xb2>
 800a17e:	2978      	cmp	r1, #120	; 0x78
 800a180:	d1d4      	bne.n	800a12c <_printf_i+0x30>
 800a182:	2378      	movs	r3, #120	; 0x78
 800a184:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a188:	4864      	ldr	r0, [pc, #400]	; (800a31c <_printf_i+0x220>)
 800a18a:	e055      	b.n	800a238 <_printf_i+0x13c>
 800a18c:	6813      	ldr	r3, [r2, #0]
 800a18e:	1d19      	adds	r1, r3, #4
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	6011      	str	r1, [r2, #0]
 800a194:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a198:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a19c:	2301      	movs	r3, #1
 800a19e:	e08c      	b.n	800a2ba <_printf_i+0x1be>
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	6011      	str	r1, [r2, #0]
 800a1a4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a1a8:	bf18      	it	ne
 800a1aa:	b21b      	sxthne	r3, r3
 800a1ac:	e7cf      	b.n	800a14e <_printf_i+0x52>
 800a1ae:	6813      	ldr	r3, [r2, #0]
 800a1b0:	6825      	ldr	r5, [r4, #0]
 800a1b2:	1d18      	adds	r0, r3, #4
 800a1b4:	6010      	str	r0, [r2, #0]
 800a1b6:	0628      	lsls	r0, r5, #24
 800a1b8:	d501      	bpl.n	800a1be <_printf_i+0xc2>
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	e002      	b.n	800a1c4 <_printf_i+0xc8>
 800a1be:	0668      	lsls	r0, r5, #25
 800a1c0:	d5fb      	bpl.n	800a1ba <_printf_i+0xbe>
 800a1c2:	881b      	ldrh	r3, [r3, #0]
 800a1c4:	4854      	ldr	r0, [pc, #336]	; (800a318 <_printf_i+0x21c>)
 800a1c6:	296f      	cmp	r1, #111	; 0x6f
 800a1c8:	bf14      	ite	ne
 800a1ca:	220a      	movne	r2, #10
 800a1cc:	2208      	moveq	r2, #8
 800a1ce:	2100      	movs	r1, #0
 800a1d0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a1d4:	6865      	ldr	r5, [r4, #4]
 800a1d6:	60a5      	str	r5, [r4, #8]
 800a1d8:	2d00      	cmp	r5, #0
 800a1da:	f2c0 8095 	blt.w	800a308 <_printf_i+0x20c>
 800a1de:	6821      	ldr	r1, [r4, #0]
 800a1e0:	f021 0104 	bic.w	r1, r1, #4
 800a1e4:	6021      	str	r1, [r4, #0]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d13d      	bne.n	800a266 <_printf_i+0x16a>
 800a1ea:	2d00      	cmp	r5, #0
 800a1ec:	f040 808e 	bne.w	800a30c <_printf_i+0x210>
 800a1f0:	4665      	mov	r5, ip
 800a1f2:	2a08      	cmp	r2, #8
 800a1f4:	d10b      	bne.n	800a20e <_printf_i+0x112>
 800a1f6:	6823      	ldr	r3, [r4, #0]
 800a1f8:	07db      	lsls	r3, r3, #31
 800a1fa:	d508      	bpl.n	800a20e <_printf_i+0x112>
 800a1fc:	6923      	ldr	r3, [r4, #16]
 800a1fe:	6862      	ldr	r2, [r4, #4]
 800a200:	429a      	cmp	r2, r3
 800a202:	bfde      	ittt	le
 800a204:	2330      	movle	r3, #48	; 0x30
 800a206:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a20a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a20e:	ebac 0305 	sub.w	r3, ip, r5
 800a212:	6123      	str	r3, [r4, #16]
 800a214:	f8cd 8000 	str.w	r8, [sp]
 800a218:	463b      	mov	r3, r7
 800a21a:	aa03      	add	r2, sp, #12
 800a21c:	4621      	mov	r1, r4
 800a21e:	4630      	mov	r0, r6
 800a220:	f7ff fef6 	bl	800a010 <_printf_common>
 800a224:	3001      	adds	r0, #1
 800a226:	d14d      	bne.n	800a2c4 <_printf_i+0x1c8>
 800a228:	f04f 30ff 	mov.w	r0, #4294967295
 800a22c:	b005      	add	sp, #20
 800a22e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a232:	4839      	ldr	r0, [pc, #228]	; (800a318 <_printf_i+0x21c>)
 800a234:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a238:	6813      	ldr	r3, [r2, #0]
 800a23a:	6821      	ldr	r1, [r4, #0]
 800a23c:	1d1d      	adds	r5, r3, #4
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	6015      	str	r5, [r2, #0]
 800a242:	060a      	lsls	r2, r1, #24
 800a244:	d50b      	bpl.n	800a25e <_printf_i+0x162>
 800a246:	07ca      	lsls	r2, r1, #31
 800a248:	bf44      	itt	mi
 800a24a:	f041 0120 	orrmi.w	r1, r1, #32
 800a24e:	6021      	strmi	r1, [r4, #0]
 800a250:	b91b      	cbnz	r3, 800a25a <_printf_i+0x15e>
 800a252:	6822      	ldr	r2, [r4, #0]
 800a254:	f022 0220 	bic.w	r2, r2, #32
 800a258:	6022      	str	r2, [r4, #0]
 800a25a:	2210      	movs	r2, #16
 800a25c:	e7b7      	b.n	800a1ce <_printf_i+0xd2>
 800a25e:	064d      	lsls	r5, r1, #25
 800a260:	bf48      	it	mi
 800a262:	b29b      	uxthmi	r3, r3
 800a264:	e7ef      	b.n	800a246 <_printf_i+0x14a>
 800a266:	4665      	mov	r5, ip
 800a268:	fbb3 f1f2 	udiv	r1, r3, r2
 800a26c:	fb02 3311 	mls	r3, r2, r1, r3
 800a270:	5cc3      	ldrb	r3, [r0, r3]
 800a272:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a276:	460b      	mov	r3, r1
 800a278:	2900      	cmp	r1, #0
 800a27a:	d1f5      	bne.n	800a268 <_printf_i+0x16c>
 800a27c:	e7b9      	b.n	800a1f2 <_printf_i+0xf6>
 800a27e:	6813      	ldr	r3, [r2, #0]
 800a280:	6825      	ldr	r5, [r4, #0]
 800a282:	6961      	ldr	r1, [r4, #20]
 800a284:	1d18      	adds	r0, r3, #4
 800a286:	6010      	str	r0, [r2, #0]
 800a288:	0628      	lsls	r0, r5, #24
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	d501      	bpl.n	800a292 <_printf_i+0x196>
 800a28e:	6019      	str	r1, [r3, #0]
 800a290:	e002      	b.n	800a298 <_printf_i+0x19c>
 800a292:	066a      	lsls	r2, r5, #25
 800a294:	d5fb      	bpl.n	800a28e <_printf_i+0x192>
 800a296:	8019      	strh	r1, [r3, #0]
 800a298:	2300      	movs	r3, #0
 800a29a:	6123      	str	r3, [r4, #16]
 800a29c:	4665      	mov	r5, ip
 800a29e:	e7b9      	b.n	800a214 <_printf_i+0x118>
 800a2a0:	6813      	ldr	r3, [r2, #0]
 800a2a2:	1d19      	adds	r1, r3, #4
 800a2a4:	6011      	str	r1, [r2, #0]
 800a2a6:	681d      	ldr	r5, [r3, #0]
 800a2a8:	6862      	ldr	r2, [r4, #4]
 800a2aa:	2100      	movs	r1, #0
 800a2ac:	4628      	mov	r0, r5
 800a2ae:	f7f5 ff8f 	bl	80001d0 <memchr>
 800a2b2:	b108      	cbz	r0, 800a2b8 <_printf_i+0x1bc>
 800a2b4:	1b40      	subs	r0, r0, r5
 800a2b6:	6060      	str	r0, [r4, #4]
 800a2b8:	6863      	ldr	r3, [r4, #4]
 800a2ba:	6123      	str	r3, [r4, #16]
 800a2bc:	2300      	movs	r3, #0
 800a2be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2c2:	e7a7      	b.n	800a214 <_printf_i+0x118>
 800a2c4:	6923      	ldr	r3, [r4, #16]
 800a2c6:	462a      	mov	r2, r5
 800a2c8:	4639      	mov	r1, r7
 800a2ca:	4630      	mov	r0, r6
 800a2cc:	47c0      	blx	r8
 800a2ce:	3001      	adds	r0, #1
 800a2d0:	d0aa      	beq.n	800a228 <_printf_i+0x12c>
 800a2d2:	6823      	ldr	r3, [r4, #0]
 800a2d4:	079b      	lsls	r3, r3, #30
 800a2d6:	d413      	bmi.n	800a300 <_printf_i+0x204>
 800a2d8:	68e0      	ldr	r0, [r4, #12]
 800a2da:	9b03      	ldr	r3, [sp, #12]
 800a2dc:	4298      	cmp	r0, r3
 800a2de:	bfb8      	it	lt
 800a2e0:	4618      	movlt	r0, r3
 800a2e2:	e7a3      	b.n	800a22c <_printf_i+0x130>
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	464a      	mov	r2, r9
 800a2e8:	4639      	mov	r1, r7
 800a2ea:	4630      	mov	r0, r6
 800a2ec:	47c0      	blx	r8
 800a2ee:	3001      	adds	r0, #1
 800a2f0:	d09a      	beq.n	800a228 <_printf_i+0x12c>
 800a2f2:	3501      	adds	r5, #1
 800a2f4:	68e3      	ldr	r3, [r4, #12]
 800a2f6:	9a03      	ldr	r2, [sp, #12]
 800a2f8:	1a9b      	subs	r3, r3, r2
 800a2fa:	42ab      	cmp	r3, r5
 800a2fc:	dcf2      	bgt.n	800a2e4 <_printf_i+0x1e8>
 800a2fe:	e7eb      	b.n	800a2d8 <_printf_i+0x1dc>
 800a300:	2500      	movs	r5, #0
 800a302:	f104 0919 	add.w	r9, r4, #25
 800a306:	e7f5      	b.n	800a2f4 <_printf_i+0x1f8>
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d1ac      	bne.n	800a266 <_printf_i+0x16a>
 800a30c:	7803      	ldrb	r3, [r0, #0]
 800a30e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a312:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a316:	e76c      	b.n	800a1f2 <_printf_i+0xf6>
 800a318:	0800cf22 	.word	0x0800cf22
 800a31c:	0800cf33 	.word	0x0800cf33

0800a320 <siprintf>:
 800a320:	b40e      	push	{r1, r2, r3}
 800a322:	b500      	push	{lr}
 800a324:	b09c      	sub	sp, #112	; 0x70
 800a326:	ab1d      	add	r3, sp, #116	; 0x74
 800a328:	9002      	str	r0, [sp, #8]
 800a32a:	9006      	str	r0, [sp, #24]
 800a32c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a330:	4809      	ldr	r0, [pc, #36]	; (800a358 <siprintf+0x38>)
 800a332:	9107      	str	r1, [sp, #28]
 800a334:	9104      	str	r1, [sp, #16]
 800a336:	4909      	ldr	r1, [pc, #36]	; (800a35c <siprintf+0x3c>)
 800a338:	f853 2b04 	ldr.w	r2, [r3], #4
 800a33c:	9105      	str	r1, [sp, #20]
 800a33e:	6800      	ldr	r0, [r0, #0]
 800a340:	9301      	str	r3, [sp, #4]
 800a342:	a902      	add	r1, sp, #8
 800a344:	f001 fa52 	bl	800b7ec <_svfiprintf_r>
 800a348:	9b02      	ldr	r3, [sp, #8]
 800a34a:	2200      	movs	r2, #0
 800a34c:	701a      	strb	r2, [r3, #0]
 800a34e:	b01c      	add	sp, #112	; 0x70
 800a350:	f85d eb04 	ldr.w	lr, [sp], #4
 800a354:	b003      	add	sp, #12
 800a356:	4770      	bx	lr
 800a358:	2000000c 	.word	0x2000000c
 800a35c:	ffff0208 	.word	0xffff0208

0800a360 <quorem>:
 800a360:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a364:	6903      	ldr	r3, [r0, #16]
 800a366:	690c      	ldr	r4, [r1, #16]
 800a368:	42a3      	cmp	r3, r4
 800a36a:	4680      	mov	r8, r0
 800a36c:	f2c0 8082 	blt.w	800a474 <quorem+0x114>
 800a370:	3c01      	subs	r4, #1
 800a372:	f101 0714 	add.w	r7, r1, #20
 800a376:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800a37a:	f100 0614 	add.w	r6, r0, #20
 800a37e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a382:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800a386:	eb06 030c 	add.w	r3, r6, ip
 800a38a:	3501      	adds	r5, #1
 800a38c:	eb07 090c 	add.w	r9, r7, ip
 800a390:	9301      	str	r3, [sp, #4]
 800a392:	fbb0 f5f5 	udiv	r5, r0, r5
 800a396:	b395      	cbz	r5, 800a3fe <quorem+0x9e>
 800a398:	f04f 0a00 	mov.w	sl, #0
 800a39c:	4638      	mov	r0, r7
 800a39e:	46b6      	mov	lr, r6
 800a3a0:	46d3      	mov	fp, sl
 800a3a2:	f850 2b04 	ldr.w	r2, [r0], #4
 800a3a6:	b293      	uxth	r3, r2
 800a3a8:	fb05 a303 	mla	r3, r5, r3, sl
 800a3ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a3b0:	b29b      	uxth	r3, r3
 800a3b2:	ebab 0303 	sub.w	r3, fp, r3
 800a3b6:	0c12      	lsrs	r2, r2, #16
 800a3b8:	f8de b000 	ldr.w	fp, [lr]
 800a3bc:	fb05 a202 	mla	r2, r5, r2, sl
 800a3c0:	fa13 f38b 	uxtah	r3, r3, fp
 800a3c4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a3c8:	fa1f fb82 	uxth.w	fp, r2
 800a3cc:	f8de 2000 	ldr.w	r2, [lr]
 800a3d0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800a3d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a3d8:	b29b      	uxth	r3, r3
 800a3da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a3de:	4581      	cmp	r9, r0
 800a3e0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800a3e4:	f84e 3b04 	str.w	r3, [lr], #4
 800a3e8:	d2db      	bcs.n	800a3a2 <quorem+0x42>
 800a3ea:	f856 300c 	ldr.w	r3, [r6, ip]
 800a3ee:	b933      	cbnz	r3, 800a3fe <quorem+0x9e>
 800a3f0:	9b01      	ldr	r3, [sp, #4]
 800a3f2:	3b04      	subs	r3, #4
 800a3f4:	429e      	cmp	r6, r3
 800a3f6:	461a      	mov	r2, r3
 800a3f8:	d330      	bcc.n	800a45c <quorem+0xfc>
 800a3fa:	f8c8 4010 	str.w	r4, [r8, #16]
 800a3fe:	4640      	mov	r0, r8
 800a400:	f001 f81e 	bl	800b440 <__mcmp>
 800a404:	2800      	cmp	r0, #0
 800a406:	db25      	blt.n	800a454 <quorem+0xf4>
 800a408:	3501      	adds	r5, #1
 800a40a:	4630      	mov	r0, r6
 800a40c:	f04f 0c00 	mov.w	ip, #0
 800a410:	f857 2b04 	ldr.w	r2, [r7], #4
 800a414:	f8d0 e000 	ldr.w	lr, [r0]
 800a418:	b293      	uxth	r3, r2
 800a41a:	ebac 0303 	sub.w	r3, ip, r3
 800a41e:	0c12      	lsrs	r2, r2, #16
 800a420:	fa13 f38e 	uxtah	r3, r3, lr
 800a424:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a428:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a42c:	b29b      	uxth	r3, r3
 800a42e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a432:	45b9      	cmp	r9, r7
 800a434:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a438:	f840 3b04 	str.w	r3, [r0], #4
 800a43c:	d2e8      	bcs.n	800a410 <quorem+0xb0>
 800a43e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a442:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a446:	b92a      	cbnz	r2, 800a454 <quorem+0xf4>
 800a448:	3b04      	subs	r3, #4
 800a44a:	429e      	cmp	r6, r3
 800a44c:	461a      	mov	r2, r3
 800a44e:	d30b      	bcc.n	800a468 <quorem+0x108>
 800a450:	f8c8 4010 	str.w	r4, [r8, #16]
 800a454:	4628      	mov	r0, r5
 800a456:	b003      	add	sp, #12
 800a458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a45c:	6812      	ldr	r2, [r2, #0]
 800a45e:	3b04      	subs	r3, #4
 800a460:	2a00      	cmp	r2, #0
 800a462:	d1ca      	bne.n	800a3fa <quorem+0x9a>
 800a464:	3c01      	subs	r4, #1
 800a466:	e7c5      	b.n	800a3f4 <quorem+0x94>
 800a468:	6812      	ldr	r2, [r2, #0]
 800a46a:	3b04      	subs	r3, #4
 800a46c:	2a00      	cmp	r2, #0
 800a46e:	d1ef      	bne.n	800a450 <quorem+0xf0>
 800a470:	3c01      	subs	r4, #1
 800a472:	e7ea      	b.n	800a44a <quorem+0xea>
 800a474:	2000      	movs	r0, #0
 800a476:	e7ee      	b.n	800a456 <quorem+0xf6>

0800a478 <_dtoa_r>:
 800a478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a47c:	ec57 6b10 	vmov	r6, r7, d0
 800a480:	b097      	sub	sp, #92	; 0x5c
 800a482:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a484:	9106      	str	r1, [sp, #24]
 800a486:	4604      	mov	r4, r0
 800a488:	920b      	str	r2, [sp, #44]	; 0x2c
 800a48a:	9312      	str	r3, [sp, #72]	; 0x48
 800a48c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a490:	e9cd 6700 	strd	r6, r7, [sp]
 800a494:	b93d      	cbnz	r5, 800a4a6 <_dtoa_r+0x2e>
 800a496:	2010      	movs	r0, #16
 800a498:	f000 fdb4 	bl	800b004 <malloc>
 800a49c:	6260      	str	r0, [r4, #36]	; 0x24
 800a49e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a4a2:	6005      	str	r5, [r0, #0]
 800a4a4:	60c5      	str	r5, [r0, #12]
 800a4a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a4a8:	6819      	ldr	r1, [r3, #0]
 800a4aa:	b151      	cbz	r1, 800a4c2 <_dtoa_r+0x4a>
 800a4ac:	685a      	ldr	r2, [r3, #4]
 800a4ae:	604a      	str	r2, [r1, #4]
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	4093      	lsls	r3, r2
 800a4b4:	608b      	str	r3, [r1, #8]
 800a4b6:	4620      	mov	r0, r4
 800a4b8:	f000 fde0 	bl	800b07c <_Bfree>
 800a4bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a4be:	2200      	movs	r2, #0
 800a4c0:	601a      	str	r2, [r3, #0]
 800a4c2:	1e3b      	subs	r3, r7, #0
 800a4c4:	bfbb      	ittet	lt
 800a4c6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a4ca:	9301      	strlt	r3, [sp, #4]
 800a4cc:	2300      	movge	r3, #0
 800a4ce:	2201      	movlt	r2, #1
 800a4d0:	bfac      	ite	ge
 800a4d2:	f8c8 3000 	strge.w	r3, [r8]
 800a4d6:	f8c8 2000 	strlt.w	r2, [r8]
 800a4da:	4baf      	ldr	r3, [pc, #700]	; (800a798 <_dtoa_r+0x320>)
 800a4dc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a4e0:	ea33 0308 	bics.w	r3, r3, r8
 800a4e4:	d114      	bne.n	800a510 <_dtoa_r+0x98>
 800a4e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a4e8:	f242 730f 	movw	r3, #9999	; 0x270f
 800a4ec:	6013      	str	r3, [r2, #0]
 800a4ee:	9b00      	ldr	r3, [sp, #0]
 800a4f0:	b923      	cbnz	r3, 800a4fc <_dtoa_r+0x84>
 800a4f2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800a4f6:	2800      	cmp	r0, #0
 800a4f8:	f000 8542 	beq.w	800af80 <_dtoa_r+0xb08>
 800a4fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a4fe:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800a7ac <_dtoa_r+0x334>
 800a502:	2b00      	cmp	r3, #0
 800a504:	f000 8544 	beq.w	800af90 <_dtoa_r+0xb18>
 800a508:	f10b 0303 	add.w	r3, fp, #3
 800a50c:	f000 bd3e 	b.w	800af8c <_dtoa_r+0xb14>
 800a510:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a514:	2200      	movs	r2, #0
 800a516:	2300      	movs	r3, #0
 800a518:	4630      	mov	r0, r6
 800a51a:	4639      	mov	r1, r7
 800a51c:	f7f6 fad4 	bl	8000ac8 <__aeabi_dcmpeq>
 800a520:	4681      	mov	r9, r0
 800a522:	b168      	cbz	r0, 800a540 <_dtoa_r+0xc8>
 800a524:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a526:	2301      	movs	r3, #1
 800a528:	6013      	str	r3, [r2, #0]
 800a52a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	f000 8524 	beq.w	800af7a <_dtoa_r+0xb02>
 800a532:	4b9a      	ldr	r3, [pc, #616]	; (800a79c <_dtoa_r+0x324>)
 800a534:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a536:	f103 3bff 	add.w	fp, r3, #4294967295
 800a53a:	6013      	str	r3, [r2, #0]
 800a53c:	f000 bd28 	b.w	800af90 <_dtoa_r+0xb18>
 800a540:	aa14      	add	r2, sp, #80	; 0x50
 800a542:	a915      	add	r1, sp, #84	; 0x54
 800a544:	ec47 6b10 	vmov	d0, r6, r7
 800a548:	4620      	mov	r0, r4
 800a54a:	f000 fff0 	bl	800b52e <__d2b>
 800a54e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a552:	9004      	str	r0, [sp, #16]
 800a554:	2d00      	cmp	r5, #0
 800a556:	d07c      	beq.n	800a652 <_dtoa_r+0x1da>
 800a558:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a55c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800a560:	46b2      	mov	sl, r6
 800a562:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800a566:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a56a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800a56e:	2200      	movs	r2, #0
 800a570:	4b8b      	ldr	r3, [pc, #556]	; (800a7a0 <_dtoa_r+0x328>)
 800a572:	4650      	mov	r0, sl
 800a574:	4659      	mov	r1, fp
 800a576:	f7f5 fe87 	bl	8000288 <__aeabi_dsub>
 800a57a:	a381      	add	r3, pc, #516	; (adr r3, 800a780 <_dtoa_r+0x308>)
 800a57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a580:	f7f6 f83a 	bl	80005f8 <__aeabi_dmul>
 800a584:	a380      	add	r3, pc, #512	; (adr r3, 800a788 <_dtoa_r+0x310>)
 800a586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a58a:	f7f5 fe7f 	bl	800028c <__adddf3>
 800a58e:	4606      	mov	r6, r0
 800a590:	4628      	mov	r0, r5
 800a592:	460f      	mov	r7, r1
 800a594:	f7f5 ffc6 	bl	8000524 <__aeabi_i2d>
 800a598:	a37d      	add	r3, pc, #500	; (adr r3, 800a790 <_dtoa_r+0x318>)
 800a59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a59e:	f7f6 f82b 	bl	80005f8 <__aeabi_dmul>
 800a5a2:	4602      	mov	r2, r0
 800a5a4:	460b      	mov	r3, r1
 800a5a6:	4630      	mov	r0, r6
 800a5a8:	4639      	mov	r1, r7
 800a5aa:	f7f5 fe6f 	bl	800028c <__adddf3>
 800a5ae:	4606      	mov	r6, r0
 800a5b0:	460f      	mov	r7, r1
 800a5b2:	f7f6 fad1 	bl	8000b58 <__aeabi_d2iz>
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	4682      	mov	sl, r0
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	4630      	mov	r0, r6
 800a5be:	4639      	mov	r1, r7
 800a5c0:	f7f6 fa8c 	bl	8000adc <__aeabi_dcmplt>
 800a5c4:	b148      	cbz	r0, 800a5da <_dtoa_r+0x162>
 800a5c6:	4650      	mov	r0, sl
 800a5c8:	f7f5 ffac 	bl	8000524 <__aeabi_i2d>
 800a5cc:	4632      	mov	r2, r6
 800a5ce:	463b      	mov	r3, r7
 800a5d0:	f7f6 fa7a 	bl	8000ac8 <__aeabi_dcmpeq>
 800a5d4:	b908      	cbnz	r0, 800a5da <_dtoa_r+0x162>
 800a5d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a5da:	f1ba 0f16 	cmp.w	sl, #22
 800a5de:	d859      	bhi.n	800a694 <_dtoa_r+0x21c>
 800a5e0:	4970      	ldr	r1, [pc, #448]	; (800a7a4 <_dtoa_r+0x32c>)
 800a5e2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a5e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a5ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5ee:	f7f6 fa93 	bl	8000b18 <__aeabi_dcmpgt>
 800a5f2:	2800      	cmp	r0, #0
 800a5f4:	d050      	beq.n	800a698 <_dtoa_r+0x220>
 800a5f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	930f      	str	r3, [sp, #60]	; 0x3c
 800a5fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a600:	1b5d      	subs	r5, r3, r5
 800a602:	f1b5 0801 	subs.w	r8, r5, #1
 800a606:	bf49      	itett	mi
 800a608:	f1c5 0301 	rsbmi	r3, r5, #1
 800a60c:	2300      	movpl	r3, #0
 800a60e:	9305      	strmi	r3, [sp, #20]
 800a610:	f04f 0800 	movmi.w	r8, #0
 800a614:	bf58      	it	pl
 800a616:	9305      	strpl	r3, [sp, #20]
 800a618:	f1ba 0f00 	cmp.w	sl, #0
 800a61c:	db3e      	blt.n	800a69c <_dtoa_r+0x224>
 800a61e:	2300      	movs	r3, #0
 800a620:	44d0      	add	r8, sl
 800a622:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a626:	9307      	str	r3, [sp, #28]
 800a628:	9b06      	ldr	r3, [sp, #24]
 800a62a:	2b09      	cmp	r3, #9
 800a62c:	f200 8090 	bhi.w	800a750 <_dtoa_r+0x2d8>
 800a630:	2b05      	cmp	r3, #5
 800a632:	bfc4      	itt	gt
 800a634:	3b04      	subgt	r3, #4
 800a636:	9306      	strgt	r3, [sp, #24]
 800a638:	9b06      	ldr	r3, [sp, #24]
 800a63a:	f1a3 0302 	sub.w	r3, r3, #2
 800a63e:	bfcc      	ite	gt
 800a640:	2500      	movgt	r5, #0
 800a642:	2501      	movle	r5, #1
 800a644:	2b03      	cmp	r3, #3
 800a646:	f200 808f 	bhi.w	800a768 <_dtoa_r+0x2f0>
 800a64a:	e8df f003 	tbb	[pc, r3]
 800a64e:	7f7d      	.short	0x7f7d
 800a650:	7131      	.short	0x7131
 800a652:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800a656:	441d      	add	r5, r3
 800a658:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800a65c:	2820      	cmp	r0, #32
 800a65e:	dd13      	ble.n	800a688 <_dtoa_r+0x210>
 800a660:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800a664:	9b00      	ldr	r3, [sp, #0]
 800a666:	fa08 f800 	lsl.w	r8, r8, r0
 800a66a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800a66e:	fa23 f000 	lsr.w	r0, r3, r0
 800a672:	ea48 0000 	orr.w	r0, r8, r0
 800a676:	f7f5 ff45 	bl	8000504 <__aeabi_ui2d>
 800a67a:	2301      	movs	r3, #1
 800a67c:	4682      	mov	sl, r0
 800a67e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800a682:	3d01      	subs	r5, #1
 800a684:	9313      	str	r3, [sp, #76]	; 0x4c
 800a686:	e772      	b.n	800a56e <_dtoa_r+0xf6>
 800a688:	9b00      	ldr	r3, [sp, #0]
 800a68a:	f1c0 0020 	rsb	r0, r0, #32
 800a68e:	fa03 f000 	lsl.w	r0, r3, r0
 800a692:	e7f0      	b.n	800a676 <_dtoa_r+0x1fe>
 800a694:	2301      	movs	r3, #1
 800a696:	e7b1      	b.n	800a5fc <_dtoa_r+0x184>
 800a698:	900f      	str	r0, [sp, #60]	; 0x3c
 800a69a:	e7b0      	b.n	800a5fe <_dtoa_r+0x186>
 800a69c:	9b05      	ldr	r3, [sp, #20]
 800a69e:	eba3 030a 	sub.w	r3, r3, sl
 800a6a2:	9305      	str	r3, [sp, #20]
 800a6a4:	f1ca 0300 	rsb	r3, sl, #0
 800a6a8:	9307      	str	r3, [sp, #28]
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	930e      	str	r3, [sp, #56]	; 0x38
 800a6ae:	e7bb      	b.n	800a628 <_dtoa_r+0x1b0>
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	930a      	str	r3, [sp, #40]	; 0x28
 800a6b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	dd59      	ble.n	800a76e <_dtoa_r+0x2f6>
 800a6ba:	9302      	str	r3, [sp, #8]
 800a6bc:	4699      	mov	r9, r3
 800a6be:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	6072      	str	r2, [r6, #4]
 800a6c4:	2204      	movs	r2, #4
 800a6c6:	f102 0014 	add.w	r0, r2, #20
 800a6ca:	4298      	cmp	r0, r3
 800a6cc:	6871      	ldr	r1, [r6, #4]
 800a6ce:	d953      	bls.n	800a778 <_dtoa_r+0x300>
 800a6d0:	4620      	mov	r0, r4
 800a6d2:	f000 fc9f 	bl	800b014 <_Balloc>
 800a6d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a6d8:	6030      	str	r0, [r6, #0]
 800a6da:	f1b9 0f0e 	cmp.w	r9, #14
 800a6de:	f8d3 b000 	ldr.w	fp, [r3]
 800a6e2:	f200 80e6 	bhi.w	800a8b2 <_dtoa_r+0x43a>
 800a6e6:	2d00      	cmp	r5, #0
 800a6e8:	f000 80e3 	beq.w	800a8b2 <_dtoa_r+0x43a>
 800a6ec:	ed9d 7b00 	vldr	d7, [sp]
 800a6f0:	f1ba 0f00 	cmp.w	sl, #0
 800a6f4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800a6f8:	dd74      	ble.n	800a7e4 <_dtoa_r+0x36c>
 800a6fa:	4a2a      	ldr	r2, [pc, #168]	; (800a7a4 <_dtoa_r+0x32c>)
 800a6fc:	f00a 030f 	and.w	r3, sl, #15
 800a700:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a704:	ed93 7b00 	vldr	d7, [r3]
 800a708:	ea4f 162a 	mov.w	r6, sl, asr #4
 800a70c:	06f0      	lsls	r0, r6, #27
 800a70e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800a712:	d565      	bpl.n	800a7e0 <_dtoa_r+0x368>
 800a714:	4b24      	ldr	r3, [pc, #144]	; (800a7a8 <_dtoa_r+0x330>)
 800a716:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a71a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a71e:	f7f6 f895 	bl	800084c <__aeabi_ddiv>
 800a722:	e9cd 0100 	strd	r0, r1, [sp]
 800a726:	f006 060f 	and.w	r6, r6, #15
 800a72a:	2503      	movs	r5, #3
 800a72c:	4f1e      	ldr	r7, [pc, #120]	; (800a7a8 <_dtoa_r+0x330>)
 800a72e:	e04c      	b.n	800a7ca <_dtoa_r+0x352>
 800a730:	2301      	movs	r3, #1
 800a732:	930a      	str	r3, [sp, #40]	; 0x28
 800a734:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a736:	4453      	add	r3, sl
 800a738:	f103 0901 	add.w	r9, r3, #1
 800a73c:	9302      	str	r3, [sp, #8]
 800a73e:	464b      	mov	r3, r9
 800a740:	2b01      	cmp	r3, #1
 800a742:	bfb8      	it	lt
 800a744:	2301      	movlt	r3, #1
 800a746:	e7ba      	b.n	800a6be <_dtoa_r+0x246>
 800a748:	2300      	movs	r3, #0
 800a74a:	e7b2      	b.n	800a6b2 <_dtoa_r+0x23a>
 800a74c:	2300      	movs	r3, #0
 800a74e:	e7f0      	b.n	800a732 <_dtoa_r+0x2ba>
 800a750:	2501      	movs	r5, #1
 800a752:	2300      	movs	r3, #0
 800a754:	9306      	str	r3, [sp, #24]
 800a756:	950a      	str	r5, [sp, #40]	; 0x28
 800a758:	f04f 33ff 	mov.w	r3, #4294967295
 800a75c:	9302      	str	r3, [sp, #8]
 800a75e:	4699      	mov	r9, r3
 800a760:	2200      	movs	r2, #0
 800a762:	2312      	movs	r3, #18
 800a764:	920b      	str	r2, [sp, #44]	; 0x2c
 800a766:	e7aa      	b.n	800a6be <_dtoa_r+0x246>
 800a768:	2301      	movs	r3, #1
 800a76a:	930a      	str	r3, [sp, #40]	; 0x28
 800a76c:	e7f4      	b.n	800a758 <_dtoa_r+0x2e0>
 800a76e:	2301      	movs	r3, #1
 800a770:	9302      	str	r3, [sp, #8]
 800a772:	4699      	mov	r9, r3
 800a774:	461a      	mov	r2, r3
 800a776:	e7f5      	b.n	800a764 <_dtoa_r+0x2ec>
 800a778:	3101      	adds	r1, #1
 800a77a:	6071      	str	r1, [r6, #4]
 800a77c:	0052      	lsls	r2, r2, #1
 800a77e:	e7a2      	b.n	800a6c6 <_dtoa_r+0x24e>
 800a780:	636f4361 	.word	0x636f4361
 800a784:	3fd287a7 	.word	0x3fd287a7
 800a788:	8b60c8b3 	.word	0x8b60c8b3
 800a78c:	3fc68a28 	.word	0x3fc68a28
 800a790:	509f79fb 	.word	0x509f79fb
 800a794:	3fd34413 	.word	0x3fd34413
 800a798:	7ff00000 	.word	0x7ff00000
 800a79c:	0800cf21 	.word	0x0800cf21
 800a7a0:	3ff80000 	.word	0x3ff80000
 800a7a4:	0800cf80 	.word	0x0800cf80
 800a7a8:	0800cf58 	.word	0x0800cf58
 800a7ac:	0800cf4d 	.word	0x0800cf4d
 800a7b0:	07f1      	lsls	r1, r6, #31
 800a7b2:	d508      	bpl.n	800a7c6 <_dtoa_r+0x34e>
 800a7b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a7b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7bc:	f7f5 ff1c 	bl	80005f8 <__aeabi_dmul>
 800a7c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a7c4:	3501      	adds	r5, #1
 800a7c6:	1076      	asrs	r6, r6, #1
 800a7c8:	3708      	adds	r7, #8
 800a7ca:	2e00      	cmp	r6, #0
 800a7cc:	d1f0      	bne.n	800a7b0 <_dtoa_r+0x338>
 800a7ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a7d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a7d6:	f7f6 f839 	bl	800084c <__aeabi_ddiv>
 800a7da:	e9cd 0100 	strd	r0, r1, [sp]
 800a7de:	e01a      	b.n	800a816 <_dtoa_r+0x39e>
 800a7e0:	2502      	movs	r5, #2
 800a7e2:	e7a3      	b.n	800a72c <_dtoa_r+0x2b4>
 800a7e4:	f000 80a0 	beq.w	800a928 <_dtoa_r+0x4b0>
 800a7e8:	f1ca 0600 	rsb	r6, sl, #0
 800a7ec:	4b9f      	ldr	r3, [pc, #636]	; (800aa6c <_dtoa_r+0x5f4>)
 800a7ee:	4fa0      	ldr	r7, [pc, #640]	; (800aa70 <_dtoa_r+0x5f8>)
 800a7f0:	f006 020f 	and.w	r2, r6, #15
 800a7f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a800:	f7f5 fefa 	bl	80005f8 <__aeabi_dmul>
 800a804:	e9cd 0100 	strd	r0, r1, [sp]
 800a808:	1136      	asrs	r6, r6, #4
 800a80a:	2300      	movs	r3, #0
 800a80c:	2502      	movs	r5, #2
 800a80e:	2e00      	cmp	r6, #0
 800a810:	d17f      	bne.n	800a912 <_dtoa_r+0x49a>
 800a812:	2b00      	cmp	r3, #0
 800a814:	d1e1      	bne.n	800a7da <_dtoa_r+0x362>
 800a816:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a818:	2b00      	cmp	r3, #0
 800a81a:	f000 8087 	beq.w	800a92c <_dtoa_r+0x4b4>
 800a81e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a822:	2200      	movs	r2, #0
 800a824:	4b93      	ldr	r3, [pc, #588]	; (800aa74 <_dtoa_r+0x5fc>)
 800a826:	4630      	mov	r0, r6
 800a828:	4639      	mov	r1, r7
 800a82a:	f7f6 f957 	bl	8000adc <__aeabi_dcmplt>
 800a82e:	2800      	cmp	r0, #0
 800a830:	d07c      	beq.n	800a92c <_dtoa_r+0x4b4>
 800a832:	f1b9 0f00 	cmp.w	r9, #0
 800a836:	d079      	beq.n	800a92c <_dtoa_r+0x4b4>
 800a838:	9b02      	ldr	r3, [sp, #8]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	dd35      	ble.n	800a8aa <_dtoa_r+0x432>
 800a83e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a842:	9308      	str	r3, [sp, #32]
 800a844:	4639      	mov	r1, r7
 800a846:	2200      	movs	r2, #0
 800a848:	4b8b      	ldr	r3, [pc, #556]	; (800aa78 <_dtoa_r+0x600>)
 800a84a:	4630      	mov	r0, r6
 800a84c:	f7f5 fed4 	bl	80005f8 <__aeabi_dmul>
 800a850:	e9cd 0100 	strd	r0, r1, [sp]
 800a854:	9f02      	ldr	r7, [sp, #8]
 800a856:	3501      	adds	r5, #1
 800a858:	4628      	mov	r0, r5
 800a85a:	f7f5 fe63 	bl	8000524 <__aeabi_i2d>
 800a85e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a862:	f7f5 fec9 	bl	80005f8 <__aeabi_dmul>
 800a866:	2200      	movs	r2, #0
 800a868:	4b84      	ldr	r3, [pc, #528]	; (800aa7c <_dtoa_r+0x604>)
 800a86a:	f7f5 fd0f 	bl	800028c <__adddf3>
 800a86e:	4605      	mov	r5, r0
 800a870:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a874:	2f00      	cmp	r7, #0
 800a876:	d15d      	bne.n	800a934 <_dtoa_r+0x4bc>
 800a878:	2200      	movs	r2, #0
 800a87a:	4b81      	ldr	r3, [pc, #516]	; (800aa80 <_dtoa_r+0x608>)
 800a87c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a880:	f7f5 fd02 	bl	8000288 <__aeabi_dsub>
 800a884:	462a      	mov	r2, r5
 800a886:	4633      	mov	r3, r6
 800a888:	e9cd 0100 	strd	r0, r1, [sp]
 800a88c:	f7f6 f944 	bl	8000b18 <__aeabi_dcmpgt>
 800a890:	2800      	cmp	r0, #0
 800a892:	f040 8288 	bne.w	800ada6 <_dtoa_r+0x92e>
 800a896:	462a      	mov	r2, r5
 800a898:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a89c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a8a0:	f7f6 f91c 	bl	8000adc <__aeabi_dcmplt>
 800a8a4:	2800      	cmp	r0, #0
 800a8a6:	f040 827c 	bne.w	800ada2 <_dtoa_r+0x92a>
 800a8aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a8ae:	e9cd 2300 	strd	r2, r3, [sp]
 800a8b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	f2c0 8150 	blt.w	800ab5a <_dtoa_r+0x6e2>
 800a8ba:	f1ba 0f0e 	cmp.w	sl, #14
 800a8be:	f300 814c 	bgt.w	800ab5a <_dtoa_r+0x6e2>
 800a8c2:	4b6a      	ldr	r3, [pc, #424]	; (800aa6c <_dtoa_r+0x5f4>)
 800a8c4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a8c8:	ed93 7b00 	vldr	d7, [r3]
 800a8cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a8d4:	f280 80d8 	bge.w	800aa88 <_dtoa_r+0x610>
 800a8d8:	f1b9 0f00 	cmp.w	r9, #0
 800a8dc:	f300 80d4 	bgt.w	800aa88 <_dtoa_r+0x610>
 800a8e0:	f040 825e 	bne.w	800ada0 <_dtoa_r+0x928>
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	4b66      	ldr	r3, [pc, #408]	; (800aa80 <_dtoa_r+0x608>)
 800a8e8:	ec51 0b17 	vmov	r0, r1, d7
 800a8ec:	f7f5 fe84 	bl	80005f8 <__aeabi_dmul>
 800a8f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a8f4:	f7f6 f906 	bl	8000b04 <__aeabi_dcmpge>
 800a8f8:	464f      	mov	r7, r9
 800a8fa:	464e      	mov	r6, r9
 800a8fc:	2800      	cmp	r0, #0
 800a8fe:	f040 8234 	bne.w	800ad6a <_dtoa_r+0x8f2>
 800a902:	2331      	movs	r3, #49	; 0x31
 800a904:	f10b 0501 	add.w	r5, fp, #1
 800a908:	f88b 3000 	strb.w	r3, [fp]
 800a90c:	f10a 0a01 	add.w	sl, sl, #1
 800a910:	e22f      	b.n	800ad72 <_dtoa_r+0x8fa>
 800a912:	07f2      	lsls	r2, r6, #31
 800a914:	d505      	bpl.n	800a922 <_dtoa_r+0x4aa>
 800a916:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a91a:	f7f5 fe6d 	bl	80005f8 <__aeabi_dmul>
 800a91e:	3501      	adds	r5, #1
 800a920:	2301      	movs	r3, #1
 800a922:	1076      	asrs	r6, r6, #1
 800a924:	3708      	adds	r7, #8
 800a926:	e772      	b.n	800a80e <_dtoa_r+0x396>
 800a928:	2502      	movs	r5, #2
 800a92a:	e774      	b.n	800a816 <_dtoa_r+0x39e>
 800a92c:	f8cd a020 	str.w	sl, [sp, #32]
 800a930:	464f      	mov	r7, r9
 800a932:	e791      	b.n	800a858 <_dtoa_r+0x3e0>
 800a934:	4b4d      	ldr	r3, [pc, #308]	; (800aa6c <_dtoa_r+0x5f4>)
 800a936:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a93a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a93e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a940:	2b00      	cmp	r3, #0
 800a942:	d047      	beq.n	800a9d4 <_dtoa_r+0x55c>
 800a944:	4602      	mov	r2, r0
 800a946:	460b      	mov	r3, r1
 800a948:	2000      	movs	r0, #0
 800a94a:	494e      	ldr	r1, [pc, #312]	; (800aa84 <_dtoa_r+0x60c>)
 800a94c:	f7f5 ff7e 	bl	800084c <__aeabi_ddiv>
 800a950:	462a      	mov	r2, r5
 800a952:	4633      	mov	r3, r6
 800a954:	f7f5 fc98 	bl	8000288 <__aeabi_dsub>
 800a958:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a95c:	465d      	mov	r5, fp
 800a95e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a962:	f7f6 f8f9 	bl	8000b58 <__aeabi_d2iz>
 800a966:	4606      	mov	r6, r0
 800a968:	f7f5 fddc 	bl	8000524 <__aeabi_i2d>
 800a96c:	4602      	mov	r2, r0
 800a96e:	460b      	mov	r3, r1
 800a970:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a974:	f7f5 fc88 	bl	8000288 <__aeabi_dsub>
 800a978:	3630      	adds	r6, #48	; 0x30
 800a97a:	f805 6b01 	strb.w	r6, [r5], #1
 800a97e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a982:	e9cd 0100 	strd	r0, r1, [sp]
 800a986:	f7f6 f8a9 	bl	8000adc <__aeabi_dcmplt>
 800a98a:	2800      	cmp	r0, #0
 800a98c:	d163      	bne.n	800aa56 <_dtoa_r+0x5de>
 800a98e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a992:	2000      	movs	r0, #0
 800a994:	4937      	ldr	r1, [pc, #220]	; (800aa74 <_dtoa_r+0x5fc>)
 800a996:	f7f5 fc77 	bl	8000288 <__aeabi_dsub>
 800a99a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a99e:	f7f6 f89d 	bl	8000adc <__aeabi_dcmplt>
 800a9a2:	2800      	cmp	r0, #0
 800a9a4:	f040 80b7 	bne.w	800ab16 <_dtoa_r+0x69e>
 800a9a8:	eba5 030b 	sub.w	r3, r5, fp
 800a9ac:	429f      	cmp	r7, r3
 800a9ae:	f77f af7c 	ble.w	800a8aa <_dtoa_r+0x432>
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	4b30      	ldr	r3, [pc, #192]	; (800aa78 <_dtoa_r+0x600>)
 800a9b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a9ba:	f7f5 fe1d 	bl	80005f8 <__aeabi_dmul>
 800a9be:	2200      	movs	r2, #0
 800a9c0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a9c4:	4b2c      	ldr	r3, [pc, #176]	; (800aa78 <_dtoa_r+0x600>)
 800a9c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a9ca:	f7f5 fe15 	bl	80005f8 <__aeabi_dmul>
 800a9ce:	e9cd 0100 	strd	r0, r1, [sp]
 800a9d2:	e7c4      	b.n	800a95e <_dtoa_r+0x4e6>
 800a9d4:	462a      	mov	r2, r5
 800a9d6:	4633      	mov	r3, r6
 800a9d8:	f7f5 fe0e 	bl	80005f8 <__aeabi_dmul>
 800a9dc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a9e0:	eb0b 0507 	add.w	r5, fp, r7
 800a9e4:	465e      	mov	r6, fp
 800a9e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a9ea:	f7f6 f8b5 	bl	8000b58 <__aeabi_d2iz>
 800a9ee:	4607      	mov	r7, r0
 800a9f0:	f7f5 fd98 	bl	8000524 <__aeabi_i2d>
 800a9f4:	3730      	adds	r7, #48	; 0x30
 800a9f6:	4602      	mov	r2, r0
 800a9f8:	460b      	mov	r3, r1
 800a9fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a9fe:	f7f5 fc43 	bl	8000288 <__aeabi_dsub>
 800aa02:	f806 7b01 	strb.w	r7, [r6], #1
 800aa06:	42ae      	cmp	r6, r5
 800aa08:	e9cd 0100 	strd	r0, r1, [sp]
 800aa0c:	f04f 0200 	mov.w	r2, #0
 800aa10:	d126      	bne.n	800aa60 <_dtoa_r+0x5e8>
 800aa12:	4b1c      	ldr	r3, [pc, #112]	; (800aa84 <_dtoa_r+0x60c>)
 800aa14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800aa18:	f7f5 fc38 	bl	800028c <__adddf3>
 800aa1c:	4602      	mov	r2, r0
 800aa1e:	460b      	mov	r3, r1
 800aa20:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa24:	f7f6 f878 	bl	8000b18 <__aeabi_dcmpgt>
 800aa28:	2800      	cmp	r0, #0
 800aa2a:	d174      	bne.n	800ab16 <_dtoa_r+0x69e>
 800aa2c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800aa30:	2000      	movs	r0, #0
 800aa32:	4914      	ldr	r1, [pc, #80]	; (800aa84 <_dtoa_r+0x60c>)
 800aa34:	f7f5 fc28 	bl	8000288 <__aeabi_dsub>
 800aa38:	4602      	mov	r2, r0
 800aa3a:	460b      	mov	r3, r1
 800aa3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa40:	f7f6 f84c 	bl	8000adc <__aeabi_dcmplt>
 800aa44:	2800      	cmp	r0, #0
 800aa46:	f43f af30 	beq.w	800a8aa <_dtoa_r+0x432>
 800aa4a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800aa4e:	2b30      	cmp	r3, #48	; 0x30
 800aa50:	f105 32ff 	add.w	r2, r5, #4294967295
 800aa54:	d002      	beq.n	800aa5c <_dtoa_r+0x5e4>
 800aa56:	f8dd a020 	ldr.w	sl, [sp, #32]
 800aa5a:	e04a      	b.n	800aaf2 <_dtoa_r+0x67a>
 800aa5c:	4615      	mov	r5, r2
 800aa5e:	e7f4      	b.n	800aa4a <_dtoa_r+0x5d2>
 800aa60:	4b05      	ldr	r3, [pc, #20]	; (800aa78 <_dtoa_r+0x600>)
 800aa62:	f7f5 fdc9 	bl	80005f8 <__aeabi_dmul>
 800aa66:	e9cd 0100 	strd	r0, r1, [sp]
 800aa6a:	e7bc      	b.n	800a9e6 <_dtoa_r+0x56e>
 800aa6c:	0800cf80 	.word	0x0800cf80
 800aa70:	0800cf58 	.word	0x0800cf58
 800aa74:	3ff00000 	.word	0x3ff00000
 800aa78:	40240000 	.word	0x40240000
 800aa7c:	401c0000 	.word	0x401c0000
 800aa80:	40140000 	.word	0x40140000
 800aa84:	3fe00000 	.word	0x3fe00000
 800aa88:	e9dd 6700 	ldrd	r6, r7, [sp]
 800aa8c:	465d      	mov	r5, fp
 800aa8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aa92:	4630      	mov	r0, r6
 800aa94:	4639      	mov	r1, r7
 800aa96:	f7f5 fed9 	bl	800084c <__aeabi_ddiv>
 800aa9a:	f7f6 f85d 	bl	8000b58 <__aeabi_d2iz>
 800aa9e:	4680      	mov	r8, r0
 800aaa0:	f7f5 fd40 	bl	8000524 <__aeabi_i2d>
 800aaa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aaa8:	f7f5 fda6 	bl	80005f8 <__aeabi_dmul>
 800aaac:	4602      	mov	r2, r0
 800aaae:	460b      	mov	r3, r1
 800aab0:	4630      	mov	r0, r6
 800aab2:	4639      	mov	r1, r7
 800aab4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800aab8:	f7f5 fbe6 	bl	8000288 <__aeabi_dsub>
 800aabc:	f805 6b01 	strb.w	r6, [r5], #1
 800aac0:	eba5 060b 	sub.w	r6, r5, fp
 800aac4:	45b1      	cmp	r9, r6
 800aac6:	4602      	mov	r2, r0
 800aac8:	460b      	mov	r3, r1
 800aaca:	d139      	bne.n	800ab40 <_dtoa_r+0x6c8>
 800aacc:	f7f5 fbde 	bl	800028c <__adddf3>
 800aad0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aad4:	4606      	mov	r6, r0
 800aad6:	460f      	mov	r7, r1
 800aad8:	f7f6 f81e 	bl	8000b18 <__aeabi_dcmpgt>
 800aadc:	b9c8      	cbnz	r0, 800ab12 <_dtoa_r+0x69a>
 800aade:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aae2:	4630      	mov	r0, r6
 800aae4:	4639      	mov	r1, r7
 800aae6:	f7f5 ffef 	bl	8000ac8 <__aeabi_dcmpeq>
 800aaea:	b110      	cbz	r0, 800aaf2 <_dtoa_r+0x67a>
 800aaec:	f018 0f01 	tst.w	r8, #1
 800aaf0:	d10f      	bne.n	800ab12 <_dtoa_r+0x69a>
 800aaf2:	9904      	ldr	r1, [sp, #16]
 800aaf4:	4620      	mov	r0, r4
 800aaf6:	f000 fac1 	bl	800b07c <_Bfree>
 800aafa:	2300      	movs	r3, #0
 800aafc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800aafe:	702b      	strb	r3, [r5, #0]
 800ab00:	f10a 0301 	add.w	r3, sl, #1
 800ab04:	6013      	str	r3, [r2, #0]
 800ab06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	f000 8241 	beq.w	800af90 <_dtoa_r+0xb18>
 800ab0e:	601d      	str	r5, [r3, #0]
 800ab10:	e23e      	b.n	800af90 <_dtoa_r+0xb18>
 800ab12:	f8cd a020 	str.w	sl, [sp, #32]
 800ab16:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ab1a:	2a39      	cmp	r2, #57	; 0x39
 800ab1c:	f105 33ff 	add.w	r3, r5, #4294967295
 800ab20:	d108      	bne.n	800ab34 <_dtoa_r+0x6bc>
 800ab22:	459b      	cmp	fp, r3
 800ab24:	d10a      	bne.n	800ab3c <_dtoa_r+0x6c4>
 800ab26:	9b08      	ldr	r3, [sp, #32]
 800ab28:	3301      	adds	r3, #1
 800ab2a:	9308      	str	r3, [sp, #32]
 800ab2c:	2330      	movs	r3, #48	; 0x30
 800ab2e:	f88b 3000 	strb.w	r3, [fp]
 800ab32:	465b      	mov	r3, fp
 800ab34:	781a      	ldrb	r2, [r3, #0]
 800ab36:	3201      	adds	r2, #1
 800ab38:	701a      	strb	r2, [r3, #0]
 800ab3a:	e78c      	b.n	800aa56 <_dtoa_r+0x5de>
 800ab3c:	461d      	mov	r5, r3
 800ab3e:	e7ea      	b.n	800ab16 <_dtoa_r+0x69e>
 800ab40:	2200      	movs	r2, #0
 800ab42:	4b9b      	ldr	r3, [pc, #620]	; (800adb0 <_dtoa_r+0x938>)
 800ab44:	f7f5 fd58 	bl	80005f8 <__aeabi_dmul>
 800ab48:	2200      	movs	r2, #0
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	4606      	mov	r6, r0
 800ab4e:	460f      	mov	r7, r1
 800ab50:	f7f5 ffba 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab54:	2800      	cmp	r0, #0
 800ab56:	d09a      	beq.n	800aa8e <_dtoa_r+0x616>
 800ab58:	e7cb      	b.n	800aaf2 <_dtoa_r+0x67a>
 800ab5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab5c:	2a00      	cmp	r2, #0
 800ab5e:	f000 808b 	beq.w	800ac78 <_dtoa_r+0x800>
 800ab62:	9a06      	ldr	r2, [sp, #24]
 800ab64:	2a01      	cmp	r2, #1
 800ab66:	dc6e      	bgt.n	800ac46 <_dtoa_r+0x7ce>
 800ab68:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ab6a:	2a00      	cmp	r2, #0
 800ab6c:	d067      	beq.n	800ac3e <_dtoa_r+0x7c6>
 800ab6e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ab72:	9f07      	ldr	r7, [sp, #28]
 800ab74:	9d05      	ldr	r5, [sp, #20]
 800ab76:	9a05      	ldr	r2, [sp, #20]
 800ab78:	2101      	movs	r1, #1
 800ab7a:	441a      	add	r2, r3
 800ab7c:	4620      	mov	r0, r4
 800ab7e:	9205      	str	r2, [sp, #20]
 800ab80:	4498      	add	r8, r3
 800ab82:	f000 fb1b 	bl	800b1bc <__i2b>
 800ab86:	4606      	mov	r6, r0
 800ab88:	2d00      	cmp	r5, #0
 800ab8a:	dd0c      	ble.n	800aba6 <_dtoa_r+0x72e>
 800ab8c:	f1b8 0f00 	cmp.w	r8, #0
 800ab90:	dd09      	ble.n	800aba6 <_dtoa_r+0x72e>
 800ab92:	4545      	cmp	r5, r8
 800ab94:	9a05      	ldr	r2, [sp, #20]
 800ab96:	462b      	mov	r3, r5
 800ab98:	bfa8      	it	ge
 800ab9a:	4643      	movge	r3, r8
 800ab9c:	1ad2      	subs	r2, r2, r3
 800ab9e:	9205      	str	r2, [sp, #20]
 800aba0:	1aed      	subs	r5, r5, r3
 800aba2:	eba8 0803 	sub.w	r8, r8, r3
 800aba6:	9b07      	ldr	r3, [sp, #28]
 800aba8:	b1eb      	cbz	r3, 800abe6 <_dtoa_r+0x76e>
 800abaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abac:	2b00      	cmp	r3, #0
 800abae:	d067      	beq.n	800ac80 <_dtoa_r+0x808>
 800abb0:	b18f      	cbz	r7, 800abd6 <_dtoa_r+0x75e>
 800abb2:	4631      	mov	r1, r6
 800abb4:	463a      	mov	r2, r7
 800abb6:	4620      	mov	r0, r4
 800abb8:	f000 fba0 	bl	800b2fc <__pow5mult>
 800abbc:	9a04      	ldr	r2, [sp, #16]
 800abbe:	4601      	mov	r1, r0
 800abc0:	4606      	mov	r6, r0
 800abc2:	4620      	mov	r0, r4
 800abc4:	f000 fb03 	bl	800b1ce <__multiply>
 800abc8:	9904      	ldr	r1, [sp, #16]
 800abca:	9008      	str	r0, [sp, #32]
 800abcc:	4620      	mov	r0, r4
 800abce:	f000 fa55 	bl	800b07c <_Bfree>
 800abd2:	9b08      	ldr	r3, [sp, #32]
 800abd4:	9304      	str	r3, [sp, #16]
 800abd6:	9b07      	ldr	r3, [sp, #28]
 800abd8:	1bda      	subs	r2, r3, r7
 800abda:	d004      	beq.n	800abe6 <_dtoa_r+0x76e>
 800abdc:	9904      	ldr	r1, [sp, #16]
 800abde:	4620      	mov	r0, r4
 800abe0:	f000 fb8c 	bl	800b2fc <__pow5mult>
 800abe4:	9004      	str	r0, [sp, #16]
 800abe6:	2101      	movs	r1, #1
 800abe8:	4620      	mov	r0, r4
 800abea:	f000 fae7 	bl	800b1bc <__i2b>
 800abee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800abf0:	4607      	mov	r7, r0
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	f000 81d0 	beq.w	800af98 <_dtoa_r+0xb20>
 800abf8:	461a      	mov	r2, r3
 800abfa:	4601      	mov	r1, r0
 800abfc:	4620      	mov	r0, r4
 800abfe:	f000 fb7d 	bl	800b2fc <__pow5mult>
 800ac02:	9b06      	ldr	r3, [sp, #24]
 800ac04:	2b01      	cmp	r3, #1
 800ac06:	4607      	mov	r7, r0
 800ac08:	dc40      	bgt.n	800ac8c <_dtoa_r+0x814>
 800ac0a:	9b00      	ldr	r3, [sp, #0]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d139      	bne.n	800ac84 <_dtoa_r+0x80c>
 800ac10:	9b01      	ldr	r3, [sp, #4]
 800ac12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d136      	bne.n	800ac88 <_dtoa_r+0x810>
 800ac1a:	9b01      	ldr	r3, [sp, #4]
 800ac1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ac20:	0d1b      	lsrs	r3, r3, #20
 800ac22:	051b      	lsls	r3, r3, #20
 800ac24:	b12b      	cbz	r3, 800ac32 <_dtoa_r+0x7ba>
 800ac26:	9b05      	ldr	r3, [sp, #20]
 800ac28:	3301      	adds	r3, #1
 800ac2a:	9305      	str	r3, [sp, #20]
 800ac2c:	f108 0801 	add.w	r8, r8, #1
 800ac30:	2301      	movs	r3, #1
 800ac32:	9307      	str	r3, [sp, #28]
 800ac34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d12a      	bne.n	800ac90 <_dtoa_r+0x818>
 800ac3a:	2001      	movs	r0, #1
 800ac3c:	e030      	b.n	800aca0 <_dtoa_r+0x828>
 800ac3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ac40:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ac44:	e795      	b.n	800ab72 <_dtoa_r+0x6fa>
 800ac46:	9b07      	ldr	r3, [sp, #28]
 800ac48:	f109 37ff 	add.w	r7, r9, #4294967295
 800ac4c:	42bb      	cmp	r3, r7
 800ac4e:	bfbf      	itttt	lt
 800ac50:	9b07      	ldrlt	r3, [sp, #28]
 800ac52:	9707      	strlt	r7, [sp, #28]
 800ac54:	1afa      	sublt	r2, r7, r3
 800ac56:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800ac58:	bfbb      	ittet	lt
 800ac5a:	189b      	addlt	r3, r3, r2
 800ac5c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800ac5e:	1bdf      	subge	r7, r3, r7
 800ac60:	2700      	movlt	r7, #0
 800ac62:	f1b9 0f00 	cmp.w	r9, #0
 800ac66:	bfb5      	itete	lt
 800ac68:	9b05      	ldrlt	r3, [sp, #20]
 800ac6a:	9d05      	ldrge	r5, [sp, #20]
 800ac6c:	eba3 0509 	sublt.w	r5, r3, r9
 800ac70:	464b      	movge	r3, r9
 800ac72:	bfb8      	it	lt
 800ac74:	2300      	movlt	r3, #0
 800ac76:	e77e      	b.n	800ab76 <_dtoa_r+0x6fe>
 800ac78:	9f07      	ldr	r7, [sp, #28]
 800ac7a:	9d05      	ldr	r5, [sp, #20]
 800ac7c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800ac7e:	e783      	b.n	800ab88 <_dtoa_r+0x710>
 800ac80:	9a07      	ldr	r2, [sp, #28]
 800ac82:	e7ab      	b.n	800abdc <_dtoa_r+0x764>
 800ac84:	2300      	movs	r3, #0
 800ac86:	e7d4      	b.n	800ac32 <_dtoa_r+0x7ba>
 800ac88:	9b00      	ldr	r3, [sp, #0]
 800ac8a:	e7d2      	b.n	800ac32 <_dtoa_r+0x7ba>
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	9307      	str	r3, [sp, #28]
 800ac90:	693b      	ldr	r3, [r7, #16]
 800ac92:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800ac96:	6918      	ldr	r0, [r3, #16]
 800ac98:	f000 fa42 	bl	800b120 <__hi0bits>
 800ac9c:	f1c0 0020 	rsb	r0, r0, #32
 800aca0:	4440      	add	r0, r8
 800aca2:	f010 001f 	ands.w	r0, r0, #31
 800aca6:	d047      	beq.n	800ad38 <_dtoa_r+0x8c0>
 800aca8:	f1c0 0320 	rsb	r3, r0, #32
 800acac:	2b04      	cmp	r3, #4
 800acae:	dd3b      	ble.n	800ad28 <_dtoa_r+0x8b0>
 800acb0:	9b05      	ldr	r3, [sp, #20]
 800acb2:	f1c0 001c 	rsb	r0, r0, #28
 800acb6:	4403      	add	r3, r0
 800acb8:	9305      	str	r3, [sp, #20]
 800acba:	4405      	add	r5, r0
 800acbc:	4480      	add	r8, r0
 800acbe:	9b05      	ldr	r3, [sp, #20]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	dd05      	ble.n	800acd0 <_dtoa_r+0x858>
 800acc4:	461a      	mov	r2, r3
 800acc6:	9904      	ldr	r1, [sp, #16]
 800acc8:	4620      	mov	r0, r4
 800acca:	f000 fb65 	bl	800b398 <__lshift>
 800acce:	9004      	str	r0, [sp, #16]
 800acd0:	f1b8 0f00 	cmp.w	r8, #0
 800acd4:	dd05      	ble.n	800ace2 <_dtoa_r+0x86a>
 800acd6:	4639      	mov	r1, r7
 800acd8:	4642      	mov	r2, r8
 800acda:	4620      	mov	r0, r4
 800acdc:	f000 fb5c 	bl	800b398 <__lshift>
 800ace0:	4607      	mov	r7, r0
 800ace2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ace4:	b353      	cbz	r3, 800ad3c <_dtoa_r+0x8c4>
 800ace6:	4639      	mov	r1, r7
 800ace8:	9804      	ldr	r0, [sp, #16]
 800acea:	f000 fba9 	bl	800b440 <__mcmp>
 800acee:	2800      	cmp	r0, #0
 800acf0:	da24      	bge.n	800ad3c <_dtoa_r+0x8c4>
 800acf2:	2300      	movs	r3, #0
 800acf4:	220a      	movs	r2, #10
 800acf6:	9904      	ldr	r1, [sp, #16]
 800acf8:	4620      	mov	r0, r4
 800acfa:	f000 f9d6 	bl	800b0aa <__multadd>
 800acfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad00:	9004      	str	r0, [sp, #16]
 800ad02:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	f000 814d 	beq.w	800afa6 <_dtoa_r+0xb2e>
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	4631      	mov	r1, r6
 800ad10:	220a      	movs	r2, #10
 800ad12:	4620      	mov	r0, r4
 800ad14:	f000 f9c9 	bl	800b0aa <__multadd>
 800ad18:	9b02      	ldr	r3, [sp, #8]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	4606      	mov	r6, r0
 800ad1e:	dc4f      	bgt.n	800adc0 <_dtoa_r+0x948>
 800ad20:	9b06      	ldr	r3, [sp, #24]
 800ad22:	2b02      	cmp	r3, #2
 800ad24:	dd4c      	ble.n	800adc0 <_dtoa_r+0x948>
 800ad26:	e011      	b.n	800ad4c <_dtoa_r+0x8d4>
 800ad28:	d0c9      	beq.n	800acbe <_dtoa_r+0x846>
 800ad2a:	9a05      	ldr	r2, [sp, #20]
 800ad2c:	331c      	adds	r3, #28
 800ad2e:	441a      	add	r2, r3
 800ad30:	9205      	str	r2, [sp, #20]
 800ad32:	441d      	add	r5, r3
 800ad34:	4498      	add	r8, r3
 800ad36:	e7c2      	b.n	800acbe <_dtoa_r+0x846>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	e7f6      	b.n	800ad2a <_dtoa_r+0x8b2>
 800ad3c:	f1b9 0f00 	cmp.w	r9, #0
 800ad40:	dc38      	bgt.n	800adb4 <_dtoa_r+0x93c>
 800ad42:	9b06      	ldr	r3, [sp, #24]
 800ad44:	2b02      	cmp	r3, #2
 800ad46:	dd35      	ble.n	800adb4 <_dtoa_r+0x93c>
 800ad48:	f8cd 9008 	str.w	r9, [sp, #8]
 800ad4c:	9b02      	ldr	r3, [sp, #8]
 800ad4e:	b963      	cbnz	r3, 800ad6a <_dtoa_r+0x8f2>
 800ad50:	4639      	mov	r1, r7
 800ad52:	2205      	movs	r2, #5
 800ad54:	4620      	mov	r0, r4
 800ad56:	f000 f9a8 	bl	800b0aa <__multadd>
 800ad5a:	4601      	mov	r1, r0
 800ad5c:	4607      	mov	r7, r0
 800ad5e:	9804      	ldr	r0, [sp, #16]
 800ad60:	f000 fb6e 	bl	800b440 <__mcmp>
 800ad64:	2800      	cmp	r0, #0
 800ad66:	f73f adcc 	bgt.w	800a902 <_dtoa_r+0x48a>
 800ad6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad6c:	465d      	mov	r5, fp
 800ad6e:	ea6f 0a03 	mvn.w	sl, r3
 800ad72:	f04f 0900 	mov.w	r9, #0
 800ad76:	4639      	mov	r1, r7
 800ad78:	4620      	mov	r0, r4
 800ad7a:	f000 f97f 	bl	800b07c <_Bfree>
 800ad7e:	2e00      	cmp	r6, #0
 800ad80:	f43f aeb7 	beq.w	800aaf2 <_dtoa_r+0x67a>
 800ad84:	f1b9 0f00 	cmp.w	r9, #0
 800ad88:	d005      	beq.n	800ad96 <_dtoa_r+0x91e>
 800ad8a:	45b1      	cmp	r9, r6
 800ad8c:	d003      	beq.n	800ad96 <_dtoa_r+0x91e>
 800ad8e:	4649      	mov	r1, r9
 800ad90:	4620      	mov	r0, r4
 800ad92:	f000 f973 	bl	800b07c <_Bfree>
 800ad96:	4631      	mov	r1, r6
 800ad98:	4620      	mov	r0, r4
 800ad9a:	f000 f96f 	bl	800b07c <_Bfree>
 800ad9e:	e6a8      	b.n	800aaf2 <_dtoa_r+0x67a>
 800ada0:	2700      	movs	r7, #0
 800ada2:	463e      	mov	r6, r7
 800ada4:	e7e1      	b.n	800ad6a <_dtoa_r+0x8f2>
 800ada6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800adaa:	463e      	mov	r6, r7
 800adac:	e5a9      	b.n	800a902 <_dtoa_r+0x48a>
 800adae:	bf00      	nop
 800adb0:	40240000 	.word	0x40240000
 800adb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adb6:	f8cd 9008 	str.w	r9, [sp, #8]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	f000 80fa 	beq.w	800afb4 <_dtoa_r+0xb3c>
 800adc0:	2d00      	cmp	r5, #0
 800adc2:	dd05      	ble.n	800add0 <_dtoa_r+0x958>
 800adc4:	4631      	mov	r1, r6
 800adc6:	462a      	mov	r2, r5
 800adc8:	4620      	mov	r0, r4
 800adca:	f000 fae5 	bl	800b398 <__lshift>
 800adce:	4606      	mov	r6, r0
 800add0:	9b07      	ldr	r3, [sp, #28]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d04c      	beq.n	800ae70 <_dtoa_r+0x9f8>
 800add6:	6871      	ldr	r1, [r6, #4]
 800add8:	4620      	mov	r0, r4
 800adda:	f000 f91b 	bl	800b014 <_Balloc>
 800adde:	6932      	ldr	r2, [r6, #16]
 800ade0:	3202      	adds	r2, #2
 800ade2:	4605      	mov	r5, r0
 800ade4:	0092      	lsls	r2, r2, #2
 800ade6:	f106 010c 	add.w	r1, r6, #12
 800adea:	300c      	adds	r0, #12
 800adec:	f7fe fe28 	bl	8009a40 <memcpy>
 800adf0:	2201      	movs	r2, #1
 800adf2:	4629      	mov	r1, r5
 800adf4:	4620      	mov	r0, r4
 800adf6:	f000 facf 	bl	800b398 <__lshift>
 800adfa:	9b00      	ldr	r3, [sp, #0]
 800adfc:	f8cd b014 	str.w	fp, [sp, #20]
 800ae00:	f003 0301 	and.w	r3, r3, #1
 800ae04:	46b1      	mov	r9, r6
 800ae06:	9307      	str	r3, [sp, #28]
 800ae08:	4606      	mov	r6, r0
 800ae0a:	4639      	mov	r1, r7
 800ae0c:	9804      	ldr	r0, [sp, #16]
 800ae0e:	f7ff faa7 	bl	800a360 <quorem>
 800ae12:	4649      	mov	r1, r9
 800ae14:	4605      	mov	r5, r0
 800ae16:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ae1a:	9804      	ldr	r0, [sp, #16]
 800ae1c:	f000 fb10 	bl	800b440 <__mcmp>
 800ae20:	4632      	mov	r2, r6
 800ae22:	9000      	str	r0, [sp, #0]
 800ae24:	4639      	mov	r1, r7
 800ae26:	4620      	mov	r0, r4
 800ae28:	f000 fb24 	bl	800b474 <__mdiff>
 800ae2c:	68c3      	ldr	r3, [r0, #12]
 800ae2e:	4602      	mov	r2, r0
 800ae30:	bb03      	cbnz	r3, 800ae74 <_dtoa_r+0x9fc>
 800ae32:	4601      	mov	r1, r0
 800ae34:	9008      	str	r0, [sp, #32]
 800ae36:	9804      	ldr	r0, [sp, #16]
 800ae38:	f000 fb02 	bl	800b440 <__mcmp>
 800ae3c:	9a08      	ldr	r2, [sp, #32]
 800ae3e:	4603      	mov	r3, r0
 800ae40:	4611      	mov	r1, r2
 800ae42:	4620      	mov	r0, r4
 800ae44:	9308      	str	r3, [sp, #32]
 800ae46:	f000 f919 	bl	800b07c <_Bfree>
 800ae4a:	9b08      	ldr	r3, [sp, #32]
 800ae4c:	b9a3      	cbnz	r3, 800ae78 <_dtoa_r+0xa00>
 800ae4e:	9a06      	ldr	r2, [sp, #24]
 800ae50:	b992      	cbnz	r2, 800ae78 <_dtoa_r+0xa00>
 800ae52:	9a07      	ldr	r2, [sp, #28]
 800ae54:	b982      	cbnz	r2, 800ae78 <_dtoa_r+0xa00>
 800ae56:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ae5a:	d029      	beq.n	800aeb0 <_dtoa_r+0xa38>
 800ae5c:	9b00      	ldr	r3, [sp, #0]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	dd01      	ble.n	800ae66 <_dtoa_r+0x9ee>
 800ae62:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800ae66:	9b05      	ldr	r3, [sp, #20]
 800ae68:	1c5d      	adds	r5, r3, #1
 800ae6a:	f883 8000 	strb.w	r8, [r3]
 800ae6e:	e782      	b.n	800ad76 <_dtoa_r+0x8fe>
 800ae70:	4630      	mov	r0, r6
 800ae72:	e7c2      	b.n	800adfa <_dtoa_r+0x982>
 800ae74:	2301      	movs	r3, #1
 800ae76:	e7e3      	b.n	800ae40 <_dtoa_r+0x9c8>
 800ae78:	9a00      	ldr	r2, [sp, #0]
 800ae7a:	2a00      	cmp	r2, #0
 800ae7c:	db04      	blt.n	800ae88 <_dtoa_r+0xa10>
 800ae7e:	d125      	bne.n	800aecc <_dtoa_r+0xa54>
 800ae80:	9a06      	ldr	r2, [sp, #24]
 800ae82:	bb1a      	cbnz	r2, 800aecc <_dtoa_r+0xa54>
 800ae84:	9a07      	ldr	r2, [sp, #28]
 800ae86:	bb0a      	cbnz	r2, 800aecc <_dtoa_r+0xa54>
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	ddec      	ble.n	800ae66 <_dtoa_r+0x9ee>
 800ae8c:	2201      	movs	r2, #1
 800ae8e:	9904      	ldr	r1, [sp, #16]
 800ae90:	4620      	mov	r0, r4
 800ae92:	f000 fa81 	bl	800b398 <__lshift>
 800ae96:	4639      	mov	r1, r7
 800ae98:	9004      	str	r0, [sp, #16]
 800ae9a:	f000 fad1 	bl	800b440 <__mcmp>
 800ae9e:	2800      	cmp	r0, #0
 800aea0:	dc03      	bgt.n	800aeaa <_dtoa_r+0xa32>
 800aea2:	d1e0      	bne.n	800ae66 <_dtoa_r+0x9ee>
 800aea4:	f018 0f01 	tst.w	r8, #1
 800aea8:	d0dd      	beq.n	800ae66 <_dtoa_r+0x9ee>
 800aeaa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800aeae:	d1d8      	bne.n	800ae62 <_dtoa_r+0x9ea>
 800aeb0:	9b05      	ldr	r3, [sp, #20]
 800aeb2:	9a05      	ldr	r2, [sp, #20]
 800aeb4:	1c5d      	adds	r5, r3, #1
 800aeb6:	2339      	movs	r3, #57	; 0x39
 800aeb8:	7013      	strb	r3, [r2, #0]
 800aeba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800aebe:	2b39      	cmp	r3, #57	; 0x39
 800aec0:	f105 32ff 	add.w	r2, r5, #4294967295
 800aec4:	d04f      	beq.n	800af66 <_dtoa_r+0xaee>
 800aec6:	3301      	adds	r3, #1
 800aec8:	7013      	strb	r3, [r2, #0]
 800aeca:	e754      	b.n	800ad76 <_dtoa_r+0x8fe>
 800aecc:	9a05      	ldr	r2, [sp, #20]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	f102 0501 	add.w	r5, r2, #1
 800aed4:	dd06      	ble.n	800aee4 <_dtoa_r+0xa6c>
 800aed6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800aeda:	d0e9      	beq.n	800aeb0 <_dtoa_r+0xa38>
 800aedc:	f108 0801 	add.w	r8, r8, #1
 800aee0:	9b05      	ldr	r3, [sp, #20]
 800aee2:	e7c2      	b.n	800ae6a <_dtoa_r+0x9f2>
 800aee4:	9a02      	ldr	r2, [sp, #8]
 800aee6:	f805 8c01 	strb.w	r8, [r5, #-1]
 800aeea:	eba5 030b 	sub.w	r3, r5, fp
 800aeee:	4293      	cmp	r3, r2
 800aef0:	d021      	beq.n	800af36 <_dtoa_r+0xabe>
 800aef2:	2300      	movs	r3, #0
 800aef4:	220a      	movs	r2, #10
 800aef6:	9904      	ldr	r1, [sp, #16]
 800aef8:	4620      	mov	r0, r4
 800aefa:	f000 f8d6 	bl	800b0aa <__multadd>
 800aefe:	45b1      	cmp	r9, r6
 800af00:	9004      	str	r0, [sp, #16]
 800af02:	f04f 0300 	mov.w	r3, #0
 800af06:	f04f 020a 	mov.w	r2, #10
 800af0a:	4649      	mov	r1, r9
 800af0c:	4620      	mov	r0, r4
 800af0e:	d105      	bne.n	800af1c <_dtoa_r+0xaa4>
 800af10:	f000 f8cb 	bl	800b0aa <__multadd>
 800af14:	4681      	mov	r9, r0
 800af16:	4606      	mov	r6, r0
 800af18:	9505      	str	r5, [sp, #20]
 800af1a:	e776      	b.n	800ae0a <_dtoa_r+0x992>
 800af1c:	f000 f8c5 	bl	800b0aa <__multadd>
 800af20:	4631      	mov	r1, r6
 800af22:	4681      	mov	r9, r0
 800af24:	2300      	movs	r3, #0
 800af26:	220a      	movs	r2, #10
 800af28:	4620      	mov	r0, r4
 800af2a:	f000 f8be 	bl	800b0aa <__multadd>
 800af2e:	4606      	mov	r6, r0
 800af30:	e7f2      	b.n	800af18 <_dtoa_r+0xaa0>
 800af32:	f04f 0900 	mov.w	r9, #0
 800af36:	2201      	movs	r2, #1
 800af38:	9904      	ldr	r1, [sp, #16]
 800af3a:	4620      	mov	r0, r4
 800af3c:	f000 fa2c 	bl	800b398 <__lshift>
 800af40:	4639      	mov	r1, r7
 800af42:	9004      	str	r0, [sp, #16]
 800af44:	f000 fa7c 	bl	800b440 <__mcmp>
 800af48:	2800      	cmp	r0, #0
 800af4a:	dcb6      	bgt.n	800aeba <_dtoa_r+0xa42>
 800af4c:	d102      	bne.n	800af54 <_dtoa_r+0xadc>
 800af4e:	f018 0f01 	tst.w	r8, #1
 800af52:	d1b2      	bne.n	800aeba <_dtoa_r+0xa42>
 800af54:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800af58:	2b30      	cmp	r3, #48	; 0x30
 800af5a:	f105 32ff 	add.w	r2, r5, #4294967295
 800af5e:	f47f af0a 	bne.w	800ad76 <_dtoa_r+0x8fe>
 800af62:	4615      	mov	r5, r2
 800af64:	e7f6      	b.n	800af54 <_dtoa_r+0xadc>
 800af66:	4593      	cmp	fp, r2
 800af68:	d105      	bne.n	800af76 <_dtoa_r+0xafe>
 800af6a:	2331      	movs	r3, #49	; 0x31
 800af6c:	f10a 0a01 	add.w	sl, sl, #1
 800af70:	f88b 3000 	strb.w	r3, [fp]
 800af74:	e6ff      	b.n	800ad76 <_dtoa_r+0x8fe>
 800af76:	4615      	mov	r5, r2
 800af78:	e79f      	b.n	800aeba <_dtoa_r+0xa42>
 800af7a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800afe0 <_dtoa_r+0xb68>
 800af7e:	e007      	b.n	800af90 <_dtoa_r+0xb18>
 800af80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af82:	f8df b060 	ldr.w	fp, [pc, #96]	; 800afe4 <_dtoa_r+0xb6c>
 800af86:	b11b      	cbz	r3, 800af90 <_dtoa_r+0xb18>
 800af88:	f10b 0308 	add.w	r3, fp, #8
 800af8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800af8e:	6013      	str	r3, [r2, #0]
 800af90:	4658      	mov	r0, fp
 800af92:	b017      	add	sp, #92	; 0x5c
 800af94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af98:	9b06      	ldr	r3, [sp, #24]
 800af9a:	2b01      	cmp	r3, #1
 800af9c:	f77f ae35 	ble.w	800ac0a <_dtoa_r+0x792>
 800afa0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800afa2:	9307      	str	r3, [sp, #28]
 800afa4:	e649      	b.n	800ac3a <_dtoa_r+0x7c2>
 800afa6:	9b02      	ldr	r3, [sp, #8]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	dc03      	bgt.n	800afb4 <_dtoa_r+0xb3c>
 800afac:	9b06      	ldr	r3, [sp, #24]
 800afae:	2b02      	cmp	r3, #2
 800afb0:	f73f aecc 	bgt.w	800ad4c <_dtoa_r+0x8d4>
 800afb4:	465d      	mov	r5, fp
 800afb6:	4639      	mov	r1, r7
 800afb8:	9804      	ldr	r0, [sp, #16]
 800afba:	f7ff f9d1 	bl	800a360 <quorem>
 800afbe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800afc2:	f805 8b01 	strb.w	r8, [r5], #1
 800afc6:	9a02      	ldr	r2, [sp, #8]
 800afc8:	eba5 030b 	sub.w	r3, r5, fp
 800afcc:	429a      	cmp	r2, r3
 800afce:	ddb0      	ble.n	800af32 <_dtoa_r+0xaba>
 800afd0:	2300      	movs	r3, #0
 800afd2:	220a      	movs	r2, #10
 800afd4:	9904      	ldr	r1, [sp, #16]
 800afd6:	4620      	mov	r0, r4
 800afd8:	f000 f867 	bl	800b0aa <__multadd>
 800afdc:	9004      	str	r0, [sp, #16]
 800afde:	e7ea      	b.n	800afb6 <_dtoa_r+0xb3e>
 800afe0:	0800cf20 	.word	0x0800cf20
 800afe4:	0800cf44 	.word	0x0800cf44

0800afe8 <_localeconv_r>:
 800afe8:	4b04      	ldr	r3, [pc, #16]	; (800affc <_localeconv_r+0x14>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	6a18      	ldr	r0, [r3, #32]
 800afee:	4b04      	ldr	r3, [pc, #16]	; (800b000 <_localeconv_r+0x18>)
 800aff0:	2800      	cmp	r0, #0
 800aff2:	bf08      	it	eq
 800aff4:	4618      	moveq	r0, r3
 800aff6:	30f0      	adds	r0, #240	; 0xf0
 800aff8:	4770      	bx	lr
 800affa:	bf00      	nop
 800affc:	2000000c 	.word	0x2000000c
 800b000:	20000070 	.word	0x20000070

0800b004 <malloc>:
 800b004:	4b02      	ldr	r3, [pc, #8]	; (800b010 <malloc+0xc>)
 800b006:	4601      	mov	r1, r0
 800b008:	6818      	ldr	r0, [r3, #0]
 800b00a:	f000 bb3b 	b.w	800b684 <_malloc_r>
 800b00e:	bf00      	nop
 800b010:	2000000c 	.word	0x2000000c

0800b014 <_Balloc>:
 800b014:	b570      	push	{r4, r5, r6, lr}
 800b016:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b018:	4604      	mov	r4, r0
 800b01a:	460e      	mov	r6, r1
 800b01c:	b93d      	cbnz	r5, 800b02e <_Balloc+0x1a>
 800b01e:	2010      	movs	r0, #16
 800b020:	f7ff fff0 	bl	800b004 <malloc>
 800b024:	6260      	str	r0, [r4, #36]	; 0x24
 800b026:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b02a:	6005      	str	r5, [r0, #0]
 800b02c:	60c5      	str	r5, [r0, #12]
 800b02e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b030:	68eb      	ldr	r3, [r5, #12]
 800b032:	b183      	cbz	r3, 800b056 <_Balloc+0x42>
 800b034:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b036:	68db      	ldr	r3, [r3, #12]
 800b038:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b03c:	b9b8      	cbnz	r0, 800b06e <_Balloc+0x5a>
 800b03e:	2101      	movs	r1, #1
 800b040:	fa01 f506 	lsl.w	r5, r1, r6
 800b044:	1d6a      	adds	r2, r5, #5
 800b046:	0092      	lsls	r2, r2, #2
 800b048:	4620      	mov	r0, r4
 800b04a:	f000 fabf 	bl	800b5cc <_calloc_r>
 800b04e:	b160      	cbz	r0, 800b06a <_Balloc+0x56>
 800b050:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800b054:	e00e      	b.n	800b074 <_Balloc+0x60>
 800b056:	2221      	movs	r2, #33	; 0x21
 800b058:	2104      	movs	r1, #4
 800b05a:	4620      	mov	r0, r4
 800b05c:	f000 fab6 	bl	800b5cc <_calloc_r>
 800b060:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b062:	60e8      	str	r0, [r5, #12]
 800b064:	68db      	ldr	r3, [r3, #12]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d1e4      	bne.n	800b034 <_Balloc+0x20>
 800b06a:	2000      	movs	r0, #0
 800b06c:	bd70      	pop	{r4, r5, r6, pc}
 800b06e:	6802      	ldr	r2, [r0, #0]
 800b070:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b074:	2300      	movs	r3, #0
 800b076:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b07a:	e7f7      	b.n	800b06c <_Balloc+0x58>

0800b07c <_Bfree>:
 800b07c:	b570      	push	{r4, r5, r6, lr}
 800b07e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b080:	4606      	mov	r6, r0
 800b082:	460d      	mov	r5, r1
 800b084:	b93c      	cbnz	r4, 800b096 <_Bfree+0x1a>
 800b086:	2010      	movs	r0, #16
 800b088:	f7ff ffbc 	bl	800b004 <malloc>
 800b08c:	6270      	str	r0, [r6, #36]	; 0x24
 800b08e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b092:	6004      	str	r4, [r0, #0]
 800b094:	60c4      	str	r4, [r0, #12]
 800b096:	b13d      	cbz	r5, 800b0a8 <_Bfree+0x2c>
 800b098:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b09a:	686a      	ldr	r2, [r5, #4]
 800b09c:	68db      	ldr	r3, [r3, #12]
 800b09e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b0a2:	6029      	str	r1, [r5, #0]
 800b0a4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b0a8:	bd70      	pop	{r4, r5, r6, pc}

0800b0aa <__multadd>:
 800b0aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0ae:	690d      	ldr	r5, [r1, #16]
 800b0b0:	461f      	mov	r7, r3
 800b0b2:	4606      	mov	r6, r0
 800b0b4:	460c      	mov	r4, r1
 800b0b6:	f101 0c14 	add.w	ip, r1, #20
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	f8dc 0000 	ldr.w	r0, [ip]
 800b0c0:	b281      	uxth	r1, r0
 800b0c2:	fb02 7101 	mla	r1, r2, r1, r7
 800b0c6:	0c0f      	lsrs	r7, r1, #16
 800b0c8:	0c00      	lsrs	r0, r0, #16
 800b0ca:	fb02 7000 	mla	r0, r2, r0, r7
 800b0ce:	b289      	uxth	r1, r1
 800b0d0:	3301      	adds	r3, #1
 800b0d2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b0d6:	429d      	cmp	r5, r3
 800b0d8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b0dc:	f84c 1b04 	str.w	r1, [ip], #4
 800b0e0:	dcec      	bgt.n	800b0bc <__multadd+0x12>
 800b0e2:	b1d7      	cbz	r7, 800b11a <__multadd+0x70>
 800b0e4:	68a3      	ldr	r3, [r4, #8]
 800b0e6:	42ab      	cmp	r3, r5
 800b0e8:	dc12      	bgt.n	800b110 <__multadd+0x66>
 800b0ea:	6861      	ldr	r1, [r4, #4]
 800b0ec:	4630      	mov	r0, r6
 800b0ee:	3101      	adds	r1, #1
 800b0f0:	f7ff ff90 	bl	800b014 <_Balloc>
 800b0f4:	6922      	ldr	r2, [r4, #16]
 800b0f6:	3202      	adds	r2, #2
 800b0f8:	f104 010c 	add.w	r1, r4, #12
 800b0fc:	4680      	mov	r8, r0
 800b0fe:	0092      	lsls	r2, r2, #2
 800b100:	300c      	adds	r0, #12
 800b102:	f7fe fc9d 	bl	8009a40 <memcpy>
 800b106:	4621      	mov	r1, r4
 800b108:	4630      	mov	r0, r6
 800b10a:	f7ff ffb7 	bl	800b07c <_Bfree>
 800b10e:	4644      	mov	r4, r8
 800b110:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b114:	3501      	adds	r5, #1
 800b116:	615f      	str	r7, [r3, #20]
 800b118:	6125      	str	r5, [r4, #16]
 800b11a:	4620      	mov	r0, r4
 800b11c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b120 <__hi0bits>:
 800b120:	0c02      	lsrs	r2, r0, #16
 800b122:	0412      	lsls	r2, r2, #16
 800b124:	4603      	mov	r3, r0
 800b126:	b9b2      	cbnz	r2, 800b156 <__hi0bits+0x36>
 800b128:	0403      	lsls	r3, r0, #16
 800b12a:	2010      	movs	r0, #16
 800b12c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b130:	bf04      	itt	eq
 800b132:	021b      	lsleq	r3, r3, #8
 800b134:	3008      	addeq	r0, #8
 800b136:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b13a:	bf04      	itt	eq
 800b13c:	011b      	lsleq	r3, r3, #4
 800b13e:	3004      	addeq	r0, #4
 800b140:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b144:	bf04      	itt	eq
 800b146:	009b      	lsleq	r3, r3, #2
 800b148:	3002      	addeq	r0, #2
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	db06      	blt.n	800b15c <__hi0bits+0x3c>
 800b14e:	005b      	lsls	r3, r3, #1
 800b150:	d503      	bpl.n	800b15a <__hi0bits+0x3a>
 800b152:	3001      	adds	r0, #1
 800b154:	4770      	bx	lr
 800b156:	2000      	movs	r0, #0
 800b158:	e7e8      	b.n	800b12c <__hi0bits+0xc>
 800b15a:	2020      	movs	r0, #32
 800b15c:	4770      	bx	lr

0800b15e <__lo0bits>:
 800b15e:	6803      	ldr	r3, [r0, #0]
 800b160:	f013 0207 	ands.w	r2, r3, #7
 800b164:	4601      	mov	r1, r0
 800b166:	d00b      	beq.n	800b180 <__lo0bits+0x22>
 800b168:	07da      	lsls	r2, r3, #31
 800b16a:	d423      	bmi.n	800b1b4 <__lo0bits+0x56>
 800b16c:	0798      	lsls	r0, r3, #30
 800b16e:	bf49      	itett	mi
 800b170:	085b      	lsrmi	r3, r3, #1
 800b172:	089b      	lsrpl	r3, r3, #2
 800b174:	2001      	movmi	r0, #1
 800b176:	600b      	strmi	r3, [r1, #0]
 800b178:	bf5c      	itt	pl
 800b17a:	600b      	strpl	r3, [r1, #0]
 800b17c:	2002      	movpl	r0, #2
 800b17e:	4770      	bx	lr
 800b180:	b298      	uxth	r0, r3
 800b182:	b9a8      	cbnz	r0, 800b1b0 <__lo0bits+0x52>
 800b184:	0c1b      	lsrs	r3, r3, #16
 800b186:	2010      	movs	r0, #16
 800b188:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b18c:	bf04      	itt	eq
 800b18e:	0a1b      	lsreq	r3, r3, #8
 800b190:	3008      	addeq	r0, #8
 800b192:	071a      	lsls	r2, r3, #28
 800b194:	bf04      	itt	eq
 800b196:	091b      	lsreq	r3, r3, #4
 800b198:	3004      	addeq	r0, #4
 800b19a:	079a      	lsls	r2, r3, #30
 800b19c:	bf04      	itt	eq
 800b19e:	089b      	lsreq	r3, r3, #2
 800b1a0:	3002      	addeq	r0, #2
 800b1a2:	07da      	lsls	r2, r3, #31
 800b1a4:	d402      	bmi.n	800b1ac <__lo0bits+0x4e>
 800b1a6:	085b      	lsrs	r3, r3, #1
 800b1a8:	d006      	beq.n	800b1b8 <__lo0bits+0x5a>
 800b1aa:	3001      	adds	r0, #1
 800b1ac:	600b      	str	r3, [r1, #0]
 800b1ae:	4770      	bx	lr
 800b1b0:	4610      	mov	r0, r2
 800b1b2:	e7e9      	b.n	800b188 <__lo0bits+0x2a>
 800b1b4:	2000      	movs	r0, #0
 800b1b6:	4770      	bx	lr
 800b1b8:	2020      	movs	r0, #32
 800b1ba:	4770      	bx	lr

0800b1bc <__i2b>:
 800b1bc:	b510      	push	{r4, lr}
 800b1be:	460c      	mov	r4, r1
 800b1c0:	2101      	movs	r1, #1
 800b1c2:	f7ff ff27 	bl	800b014 <_Balloc>
 800b1c6:	2201      	movs	r2, #1
 800b1c8:	6144      	str	r4, [r0, #20]
 800b1ca:	6102      	str	r2, [r0, #16]
 800b1cc:	bd10      	pop	{r4, pc}

0800b1ce <__multiply>:
 800b1ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1d2:	4614      	mov	r4, r2
 800b1d4:	690a      	ldr	r2, [r1, #16]
 800b1d6:	6923      	ldr	r3, [r4, #16]
 800b1d8:	429a      	cmp	r2, r3
 800b1da:	bfb8      	it	lt
 800b1dc:	460b      	movlt	r3, r1
 800b1de:	4688      	mov	r8, r1
 800b1e0:	bfbc      	itt	lt
 800b1e2:	46a0      	movlt	r8, r4
 800b1e4:	461c      	movlt	r4, r3
 800b1e6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b1ea:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b1ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b1f2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b1f6:	eb07 0609 	add.w	r6, r7, r9
 800b1fa:	42b3      	cmp	r3, r6
 800b1fc:	bfb8      	it	lt
 800b1fe:	3101      	addlt	r1, #1
 800b200:	f7ff ff08 	bl	800b014 <_Balloc>
 800b204:	f100 0514 	add.w	r5, r0, #20
 800b208:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b20c:	462b      	mov	r3, r5
 800b20e:	2200      	movs	r2, #0
 800b210:	4573      	cmp	r3, lr
 800b212:	d316      	bcc.n	800b242 <__multiply+0x74>
 800b214:	f104 0214 	add.w	r2, r4, #20
 800b218:	f108 0114 	add.w	r1, r8, #20
 800b21c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b220:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b224:	9300      	str	r3, [sp, #0]
 800b226:	9b00      	ldr	r3, [sp, #0]
 800b228:	9201      	str	r2, [sp, #4]
 800b22a:	4293      	cmp	r3, r2
 800b22c:	d80c      	bhi.n	800b248 <__multiply+0x7a>
 800b22e:	2e00      	cmp	r6, #0
 800b230:	dd03      	ble.n	800b23a <__multiply+0x6c>
 800b232:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b236:	2b00      	cmp	r3, #0
 800b238:	d05d      	beq.n	800b2f6 <__multiply+0x128>
 800b23a:	6106      	str	r6, [r0, #16]
 800b23c:	b003      	add	sp, #12
 800b23e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b242:	f843 2b04 	str.w	r2, [r3], #4
 800b246:	e7e3      	b.n	800b210 <__multiply+0x42>
 800b248:	f8b2 b000 	ldrh.w	fp, [r2]
 800b24c:	f1bb 0f00 	cmp.w	fp, #0
 800b250:	d023      	beq.n	800b29a <__multiply+0xcc>
 800b252:	4689      	mov	r9, r1
 800b254:	46ac      	mov	ip, r5
 800b256:	f04f 0800 	mov.w	r8, #0
 800b25a:	f859 4b04 	ldr.w	r4, [r9], #4
 800b25e:	f8dc a000 	ldr.w	sl, [ip]
 800b262:	b2a3      	uxth	r3, r4
 800b264:	fa1f fa8a 	uxth.w	sl, sl
 800b268:	fb0b a303 	mla	r3, fp, r3, sl
 800b26c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b270:	f8dc 4000 	ldr.w	r4, [ip]
 800b274:	4443      	add	r3, r8
 800b276:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b27a:	fb0b 840a 	mla	r4, fp, sl, r8
 800b27e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b282:	46e2      	mov	sl, ip
 800b284:	b29b      	uxth	r3, r3
 800b286:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b28a:	454f      	cmp	r7, r9
 800b28c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b290:	f84a 3b04 	str.w	r3, [sl], #4
 800b294:	d82b      	bhi.n	800b2ee <__multiply+0x120>
 800b296:	f8cc 8004 	str.w	r8, [ip, #4]
 800b29a:	9b01      	ldr	r3, [sp, #4]
 800b29c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b2a0:	3204      	adds	r2, #4
 800b2a2:	f1ba 0f00 	cmp.w	sl, #0
 800b2a6:	d020      	beq.n	800b2ea <__multiply+0x11c>
 800b2a8:	682b      	ldr	r3, [r5, #0]
 800b2aa:	4689      	mov	r9, r1
 800b2ac:	46a8      	mov	r8, r5
 800b2ae:	f04f 0b00 	mov.w	fp, #0
 800b2b2:	f8b9 c000 	ldrh.w	ip, [r9]
 800b2b6:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b2ba:	fb0a 440c 	mla	r4, sl, ip, r4
 800b2be:	445c      	add	r4, fp
 800b2c0:	46c4      	mov	ip, r8
 800b2c2:	b29b      	uxth	r3, r3
 800b2c4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b2c8:	f84c 3b04 	str.w	r3, [ip], #4
 800b2cc:	f859 3b04 	ldr.w	r3, [r9], #4
 800b2d0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b2d4:	0c1b      	lsrs	r3, r3, #16
 800b2d6:	fb0a b303 	mla	r3, sl, r3, fp
 800b2da:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b2de:	454f      	cmp	r7, r9
 800b2e0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b2e4:	d805      	bhi.n	800b2f2 <__multiply+0x124>
 800b2e6:	f8c8 3004 	str.w	r3, [r8, #4]
 800b2ea:	3504      	adds	r5, #4
 800b2ec:	e79b      	b.n	800b226 <__multiply+0x58>
 800b2ee:	46d4      	mov	ip, sl
 800b2f0:	e7b3      	b.n	800b25a <__multiply+0x8c>
 800b2f2:	46e0      	mov	r8, ip
 800b2f4:	e7dd      	b.n	800b2b2 <__multiply+0xe4>
 800b2f6:	3e01      	subs	r6, #1
 800b2f8:	e799      	b.n	800b22e <__multiply+0x60>
	...

0800b2fc <__pow5mult>:
 800b2fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b300:	4615      	mov	r5, r2
 800b302:	f012 0203 	ands.w	r2, r2, #3
 800b306:	4606      	mov	r6, r0
 800b308:	460f      	mov	r7, r1
 800b30a:	d007      	beq.n	800b31c <__pow5mult+0x20>
 800b30c:	3a01      	subs	r2, #1
 800b30e:	4c21      	ldr	r4, [pc, #132]	; (800b394 <__pow5mult+0x98>)
 800b310:	2300      	movs	r3, #0
 800b312:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b316:	f7ff fec8 	bl	800b0aa <__multadd>
 800b31a:	4607      	mov	r7, r0
 800b31c:	10ad      	asrs	r5, r5, #2
 800b31e:	d035      	beq.n	800b38c <__pow5mult+0x90>
 800b320:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b322:	b93c      	cbnz	r4, 800b334 <__pow5mult+0x38>
 800b324:	2010      	movs	r0, #16
 800b326:	f7ff fe6d 	bl	800b004 <malloc>
 800b32a:	6270      	str	r0, [r6, #36]	; 0x24
 800b32c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b330:	6004      	str	r4, [r0, #0]
 800b332:	60c4      	str	r4, [r0, #12]
 800b334:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b338:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b33c:	b94c      	cbnz	r4, 800b352 <__pow5mult+0x56>
 800b33e:	f240 2171 	movw	r1, #625	; 0x271
 800b342:	4630      	mov	r0, r6
 800b344:	f7ff ff3a 	bl	800b1bc <__i2b>
 800b348:	2300      	movs	r3, #0
 800b34a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b34e:	4604      	mov	r4, r0
 800b350:	6003      	str	r3, [r0, #0]
 800b352:	f04f 0800 	mov.w	r8, #0
 800b356:	07eb      	lsls	r3, r5, #31
 800b358:	d50a      	bpl.n	800b370 <__pow5mult+0x74>
 800b35a:	4639      	mov	r1, r7
 800b35c:	4622      	mov	r2, r4
 800b35e:	4630      	mov	r0, r6
 800b360:	f7ff ff35 	bl	800b1ce <__multiply>
 800b364:	4639      	mov	r1, r7
 800b366:	4681      	mov	r9, r0
 800b368:	4630      	mov	r0, r6
 800b36a:	f7ff fe87 	bl	800b07c <_Bfree>
 800b36e:	464f      	mov	r7, r9
 800b370:	106d      	asrs	r5, r5, #1
 800b372:	d00b      	beq.n	800b38c <__pow5mult+0x90>
 800b374:	6820      	ldr	r0, [r4, #0]
 800b376:	b938      	cbnz	r0, 800b388 <__pow5mult+0x8c>
 800b378:	4622      	mov	r2, r4
 800b37a:	4621      	mov	r1, r4
 800b37c:	4630      	mov	r0, r6
 800b37e:	f7ff ff26 	bl	800b1ce <__multiply>
 800b382:	6020      	str	r0, [r4, #0]
 800b384:	f8c0 8000 	str.w	r8, [r0]
 800b388:	4604      	mov	r4, r0
 800b38a:	e7e4      	b.n	800b356 <__pow5mult+0x5a>
 800b38c:	4638      	mov	r0, r7
 800b38e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b392:	bf00      	nop
 800b394:	0800d048 	.word	0x0800d048

0800b398 <__lshift>:
 800b398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b39c:	460c      	mov	r4, r1
 800b39e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b3a2:	6923      	ldr	r3, [r4, #16]
 800b3a4:	6849      	ldr	r1, [r1, #4]
 800b3a6:	eb0a 0903 	add.w	r9, sl, r3
 800b3aa:	68a3      	ldr	r3, [r4, #8]
 800b3ac:	4607      	mov	r7, r0
 800b3ae:	4616      	mov	r6, r2
 800b3b0:	f109 0501 	add.w	r5, r9, #1
 800b3b4:	42ab      	cmp	r3, r5
 800b3b6:	db32      	blt.n	800b41e <__lshift+0x86>
 800b3b8:	4638      	mov	r0, r7
 800b3ba:	f7ff fe2b 	bl	800b014 <_Balloc>
 800b3be:	2300      	movs	r3, #0
 800b3c0:	4680      	mov	r8, r0
 800b3c2:	f100 0114 	add.w	r1, r0, #20
 800b3c6:	461a      	mov	r2, r3
 800b3c8:	4553      	cmp	r3, sl
 800b3ca:	db2b      	blt.n	800b424 <__lshift+0x8c>
 800b3cc:	6920      	ldr	r0, [r4, #16]
 800b3ce:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b3d2:	f104 0314 	add.w	r3, r4, #20
 800b3d6:	f016 021f 	ands.w	r2, r6, #31
 800b3da:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b3de:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b3e2:	d025      	beq.n	800b430 <__lshift+0x98>
 800b3e4:	f1c2 0e20 	rsb	lr, r2, #32
 800b3e8:	2000      	movs	r0, #0
 800b3ea:	681e      	ldr	r6, [r3, #0]
 800b3ec:	468a      	mov	sl, r1
 800b3ee:	4096      	lsls	r6, r2
 800b3f0:	4330      	orrs	r0, r6
 800b3f2:	f84a 0b04 	str.w	r0, [sl], #4
 800b3f6:	f853 0b04 	ldr.w	r0, [r3], #4
 800b3fa:	459c      	cmp	ip, r3
 800b3fc:	fa20 f00e 	lsr.w	r0, r0, lr
 800b400:	d814      	bhi.n	800b42c <__lshift+0x94>
 800b402:	6048      	str	r0, [r1, #4]
 800b404:	b108      	cbz	r0, 800b40a <__lshift+0x72>
 800b406:	f109 0502 	add.w	r5, r9, #2
 800b40a:	3d01      	subs	r5, #1
 800b40c:	4638      	mov	r0, r7
 800b40e:	f8c8 5010 	str.w	r5, [r8, #16]
 800b412:	4621      	mov	r1, r4
 800b414:	f7ff fe32 	bl	800b07c <_Bfree>
 800b418:	4640      	mov	r0, r8
 800b41a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b41e:	3101      	adds	r1, #1
 800b420:	005b      	lsls	r3, r3, #1
 800b422:	e7c7      	b.n	800b3b4 <__lshift+0x1c>
 800b424:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b428:	3301      	adds	r3, #1
 800b42a:	e7cd      	b.n	800b3c8 <__lshift+0x30>
 800b42c:	4651      	mov	r1, sl
 800b42e:	e7dc      	b.n	800b3ea <__lshift+0x52>
 800b430:	3904      	subs	r1, #4
 800b432:	f853 2b04 	ldr.w	r2, [r3], #4
 800b436:	f841 2f04 	str.w	r2, [r1, #4]!
 800b43a:	459c      	cmp	ip, r3
 800b43c:	d8f9      	bhi.n	800b432 <__lshift+0x9a>
 800b43e:	e7e4      	b.n	800b40a <__lshift+0x72>

0800b440 <__mcmp>:
 800b440:	6903      	ldr	r3, [r0, #16]
 800b442:	690a      	ldr	r2, [r1, #16]
 800b444:	1a9b      	subs	r3, r3, r2
 800b446:	b530      	push	{r4, r5, lr}
 800b448:	d10c      	bne.n	800b464 <__mcmp+0x24>
 800b44a:	0092      	lsls	r2, r2, #2
 800b44c:	3014      	adds	r0, #20
 800b44e:	3114      	adds	r1, #20
 800b450:	1884      	adds	r4, r0, r2
 800b452:	4411      	add	r1, r2
 800b454:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b458:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b45c:	4295      	cmp	r5, r2
 800b45e:	d003      	beq.n	800b468 <__mcmp+0x28>
 800b460:	d305      	bcc.n	800b46e <__mcmp+0x2e>
 800b462:	2301      	movs	r3, #1
 800b464:	4618      	mov	r0, r3
 800b466:	bd30      	pop	{r4, r5, pc}
 800b468:	42a0      	cmp	r0, r4
 800b46a:	d3f3      	bcc.n	800b454 <__mcmp+0x14>
 800b46c:	e7fa      	b.n	800b464 <__mcmp+0x24>
 800b46e:	f04f 33ff 	mov.w	r3, #4294967295
 800b472:	e7f7      	b.n	800b464 <__mcmp+0x24>

0800b474 <__mdiff>:
 800b474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b478:	460d      	mov	r5, r1
 800b47a:	4607      	mov	r7, r0
 800b47c:	4611      	mov	r1, r2
 800b47e:	4628      	mov	r0, r5
 800b480:	4614      	mov	r4, r2
 800b482:	f7ff ffdd 	bl	800b440 <__mcmp>
 800b486:	1e06      	subs	r6, r0, #0
 800b488:	d108      	bne.n	800b49c <__mdiff+0x28>
 800b48a:	4631      	mov	r1, r6
 800b48c:	4638      	mov	r0, r7
 800b48e:	f7ff fdc1 	bl	800b014 <_Balloc>
 800b492:	2301      	movs	r3, #1
 800b494:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b49c:	bfa4      	itt	ge
 800b49e:	4623      	movge	r3, r4
 800b4a0:	462c      	movge	r4, r5
 800b4a2:	4638      	mov	r0, r7
 800b4a4:	6861      	ldr	r1, [r4, #4]
 800b4a6:	bfa6      	itte	ge
 800b4a8:	461d      	movge	r5, r3
 800b4aa:	2600      	movge	r6, #0
 800b4ac:	2601      	movlt	r6, #1
 800b4ae:	f7ff fdb1 	bl	800b014 <_Balloc>
 800b4b2:	692b      	ldr	r3, [r5, #16]
 800b4b4:	60c6      	str	r6, [r0, #12]
 800b4b6:	6926      	ldr	r6, [r4, #16]
 800b4b8:	f105 0914 	add.w	r9, r5, #20
 800b4bc:	f104 0214 	add.w	r2, r4, #20
 800b4c0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b4c4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b4c8:	f100 0514 	add.w	r5, r0, #20
 800b4cc:	f04f 0e00 	mov.w	lr, #0
 800b4d0:	f852 ab04 	ldr.w	sl, [r2], #4
 800b4d4:	f859 4b04 	ldr.w	r4, [r9], #4
 800b4d8:	fa1e f18a 	uxtah	r1, lr, sl
 800b4dc:	b2a3      	uxth	r3, r4
 800b4de:	1ac9      	subs	r1, r1, r3
 800b4e0:	0c23      	lsrs	r3, r4, #16
 800b4e2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800b4e6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b4ea:	b289      	uxth	r1, r1
 800b4ec:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b4f0:	45c8      	cmp	r8, r9
 800b4f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b4f6:	4694      	mov	ip, r2
 800b4f8:	f845 3b04 	str.w	r3, [r5], #4
 800b4fc:	d8e8      	bhi.n	800b4d0 <__mdiff+0x5c>
 800b4fe:	45bc      	cmp	ip, r7
 800b500:	d304      	bcc.n	800b50c <__mdiff+0x98>
 800b502:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800b506:	b183      	cbz	r3, 800b52a <__mdiff+0xb6>
 800b508:	6106      	str	r6, [r0, #16]
 800b50a:	e7c5      	b.n	800b498 <__mdiff+0x24>
 800b50c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b510:	fa1e f381 	uxtah	r3, lr, r1
 800b514:	141a      	asrs	r2, r3, #16
 800b516:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b51a:	b29b      	uxth	r3, r3
 800b51c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b520:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800b524:	f845 3b04 	str.w	r3, [r5], #4
 800b528:	e7e9      	b.n	800b4fe <__mdiff+0x8a>
 800b52a:	3e01      	subs	r6, #1
 800b52c:	e7e9      	b.n	800b502 <__mdiff+0x8e>

0800b52e <__d2b>:
 800b52e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b532:	460e      	mov	r6, r1
 800b534:	2101      	movs	r1, #1
 800b536:	ec59 8b10 	vmov	r8, r9, d0
 800b53a:	4615      	mov	r5, r2
 800b53c:	f7ff fd6a 	bl	800b014 <_Balloc>
 800b540:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b544:	4607      	mov	r7, r0
 800b546:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b54a:	bb34      	cbnz	r4, 800b59a <__d2b+0x6c>
 800b54c:	9301      	str	r3, [sp, #4]
 800b54e:	f1b8 0300 	subs.w	r3, r8, #0
 800b552:	d027      	beq.n	800b5a4 <__d2b+0x76>
 800b554:	a802      	add	r0, sp, #8
 800b556:	f840 3d08 	str.w	r3, [r0, #-8]!
 800b55a:	f7ff fe00 	bl	800b15e <__lo0bits>
 800b55e:	9900      	ldr	r1, [sp, #0]
 800b560:	b1f0      	cbz	r0, 800b5a0 <__d2b+0x72>
 800b562:	9a01      	ldr	r2, [sp, #4]
 800b564:	f1c0 0320 	rsb	r3, r0, #32
 800b568:	fa02 f303 	lsl.w	r3, r2, r3
 800b56c:	430b      	orrs	r3, r1
 800b56e:	40c2      	lsrs	r2, r0
 800b570:	617b      	str	r3, [r7, #20]
 800b572:	9201      	str	r2, [sp, #4]
 800b574:	9b01      	ldr	r3, [sp, #4]
 800b576:	61bb      	str	r3, [r7, #24]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	bf14      	ite	ne
 800b57c:	2102      	movne	r1, #2
 800b57e:	2101      	moveq	r1, #1
 800b580:	6139      	str	r1, [r7, #16]
 800b582:	b1c4      	cbz	r4, 800b5b6 <__d2b+0x88>
 800b584:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b588:	4404      	add	r4, r0
 800b58a:	6034      	str	r4, [r6, #0]
 800b58c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b590:	6028      	str	r0, [r5, #0]
 800b592:	4638      	mov	r0, r7
 800b594:	b003      	add	sp, #12
 800b596:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b59a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b59e:	e7d5      	b.n	800b54c <__d2b+0x1e>
 800b5a0:	6179      	str	r1, [r7, #20]
 800b5a2:	e7e7      	b.n	800b574 <__d2b+0x46>
 800b5a4:	a801      	add	r0, sp, #4
 800b5a6:	f7ff fdda 	bl	800b15e <__lo0bits>
 800b5aa:	9b01      	ldr	r3, [sp, #4]
 800b5ac:	617b      	str	r3, [r7, #20]
 800b5ae:	2101      	movs	r1, #1
 800b5b0:	6139      	str	r1, [r7, #16]
 800b5b2:	3020      	adds	r0, #32
 800b5b4:	e7e5      	b.n	800b582 <__d2b+0x54>
 800b5b6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b5ba:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b5be:	6030      	str	r0, [r6, #0]
 800b5c0:	6918      	ldr	r0, [r3, #16]
 800b5c2:	f7ff fdad 	bl	800b120 <__hi0bits>
 800b5c6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b5ca:	e7e1      	b.n	800b590 <__d2b+0x62>

0800b5cc <_calloc_r>:
 800b5cc:	b538      	push	{r3, r4, r5, lr}
 800b5ce:	fb02 f401 	mul.w	r4, r2, r1
 800b5d2:	4621      	mov	r1, r4
 800b5d4:	f000 f856 	bl	800b684 <_malloc_r>
 800b5d8:	4605      	mov	r5, r0
 800b5da:	b118      	cbz	r0, 800b5e4 <_calloc_r+0x18>
 800b5dc:	4622      	mov	r2, r4
 800b5de:	2100      	movs	r1, #0
 800b5e0:	f7fe fa39 	bl	8009a56 <memset>
 800b5e4:	4628      	mov	r0, r5
 800b5e6:	bd38      	pop	{r3, r4, r5, pc}

0800b5e8 <_free_r>:
 800b5e8:	b538      	push	{r3, r4, r5, lr}
 800b5ea:	4605      	mov	r5, r0
 800b5ec:	2900      	cmp	r1, #0
 800b5ee:	d045      	beq.n	800b67c <_free_r+0x94>
 800b5f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5f4:	1f0c      	subs	r4, r1, #4
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	bfb8      	it	lt
 800b5fa:	18e4      	addlt	r4, r4, r3
 800b5fc:	f000 fa29 	bl	800ba52 <__malloc_lock>
 800b600:	4a1f      	ldr	r2, [pc, #124]	; (800b680 <_free_r+0x98>)
 800b602:	6813      	ldr	r3, [r2, #0]
 800b604:	4610      	mov	r0, r2
 800b606:	b933      	cbnz	r3, 800b616 <_free_r+0x2e>
 800b608:	6063      	str	r3, [r4, #4]
 800b60a:	6014      	str	r4, [r2, #0]
 800b60c:	4628      	mov	r0, r5
 800b60e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b612:	f000 ba1f 	b.w	800ba54 <__malloc_unlock>
 800b616:	42a3      	cmp	r3, r4
 800b618:	d90c      	bls.n	800b634 <_free_r+0x4c>
 800b61a:	6821      	ldr	r1, [r4, #0]
 800b61c:	1862      	adds	r2, r4, r1
 800b61e:	4293      	cmp	r3, r2
 800b620:	bf04      	itt	eq
 800b622:	681a      	ldreq	r2, [r3, #0]
 800b624:	685b      	ldreq	r3, [r3, #4]
 800b626:	6063      	str	r3, [r4, #4]
 800b628:	bf04      	itt	eq
 800b62a:	1852      	addeq	r2, r2, r1
 800b62c:	6022      	streq	r2, [r4, #0]
 800b62e:	6004      	str	r4, [r0, #0]
 800b630:	e7ec      	b.n	800b60c <_free_r+0x24>
 800b632:	4613      	mov	r3, r2
 800b634:	685a      	ldr	r2, [r3, #4]
 800b636:	b10a      	cbz	r2, 800b63c <_free_r+0x54>
 800b638:	42a2      	cmp	r2, r4
 800b63a:	d9fa      	bls.n	800b632 <_free_r+0x4a>
 800b63c:	6819      	ldr	r1, [r3, #0]
 800b63e:	1858      	adds	r0, r3, r1
 800b640:	42a0      	cmp	r0, r4
 800b642:	d10b      	bne.n	800b65c <_free_r+0x74>
 800b644:	6820      	ldr	r0, [r4, #0]
 800b646:	4401      	add	r1, r0
 800b648:	1858      	adds	r0, r3, r1
 800b64a:	4282      	cmp	r2, r0
 800b64c:	6019      	str	r1, [r3, #0]
 800b64e:	d1dd      	bne.n	800b60c <_free_r+0x24>
 800b650:	6810      	ldr	r0, [r2, #0]
 800b652:	6852      	ldr	r2, [r2, #4]
 800b654:	605a      	str	r2, [r3, #4]
 800b656:	4401      	add	r1, r0
 800b658:	6019      	str	r1, [r3, #0]
 800b65a:	e7d7      	b.n	800b60c <_free_r+0x24>
 800b65c:	d902      	bls.n	800b664 <_free_r+0x7c>
 800b65e:	230c      	movs	r3, #12
 800b660:	602b      	str	r3, [r5, #0]
 800b662:	e7d3      	b.n	800b60c <_free_r+0x24>
 800b664:	6820      	ldr	r0, [r4, #0]
 800b666:	1821      	adds	r1, r4, r0
 800b668:	428a      	cmp	r2, r1
 800b66a:	bf04      	itt	eq
 800b66c:	6811      	ldreq	r1, [r2, #0]
 800b66e:	6852      	ldreq	r2, [r2, #4]
 800b670:	6062      	str	r2, [r4, #4]
 800b672:	bf04      	itt	eq
 800b674:	1809      	addeq	r1, r1, r0
 800b676:	6021      	streq	r1, [r4, #0]
 800b678:	605c      	str	r4, [r3, #4]
 800b67a:	e7c7      	b.n	800b60c <_free_r+0x24>
 800b67c:	bd38      	pop	{r3, r4, r5, pc}
 800b67e:	bf00      	nop
 800b680:	20000220 	.word	0x20000220

0800b684 <_malloc_r>:
 800b684:	b570      	push	{r4, r5, r6, lr}
 800b686:	1ccd      	adds	r5, r1, #3
 800b688:	f025 0503 	bic.w	r5, r5, #3
 800b68c:	3508      	adds	r5, #8
 800b68e:	2d0c      	cmp	r5, #12
 800b690:	bf38      	it	cc
 800b692:	250c      	movcc	r5, #12
 800b694:	2d00      	cmp	r5, #0
 800b696:	4606      	mov	r6, r0
 800b698:	db01      	blt.n	800b69e <_malloc_r+0x1a>
 800b69a:	42a9      	cmp	r1, r5
 800b69c:	d903      	bls.n	800b6a6 <_malloc_r+0x22>
 800b69e:	230c      	movs	r3, #12
 800b6a0:	6033      	str	r3, [r6, #0]
 800b6a2:	2000      	movs	r0, #0
 800b6a4:	bd70      	pop	{r4, r5, r6, pc}
 800b6a6:	f000 f9d4 	bl	800ba52 <__malloc_lock>
 800b6aa:	4a21      	ldr	r2, [pc, #132]	; (800b730 <_malloc_r+0xac>)
 800b6ac:	6814      	ldr	r4, [r2, #0]
 800b6ae:	4621      	mov	r1, r4
 800b6b0:	b991      	cbnz	r1, 800b6d8 <_malloc_r+0x54>
 800b6b2:	4c20      	ldr	r4, [pc, #128]	; (800b734 <_malloc_r+0xb0>)
 800b6b4:	6823      	ldr	r3, [r4, #0]
 800b6b6:	b91b      	cbnz	r3, 800b6c0 <_malloc_r+0x3c>
 800b6b8:	4630      	mov	r0, r6
 800b6ba:	f000 f98f 	bl	800b9dc <_sbrk_r>
 800b6be:	6020      	str	r0, [r4, #0]
 800b6c0:	4629      	mov	r1, r5
 800b6c2:	4630      	mov	r0, r6
 800b6c4:	f000 f98a 	bl	800b9dc <_sbrk_r>
 800b6c8:	1c43      	adds	r3, r0, #1
 800b6ca:	d124      	bne.n	800b716 <_malloc_r+0x92>
 800b6cc:	230c      	movs	r3, #12
 800b6ce:	6033      	str	r3, [r6, #0]
 800b6d0:	4630      	mov	r0, r6
 800b6d2:	f000 f9bf 	bl	800ba54 <__malloc_unlock>
 800b6d6:	e7e4      	b.n	800b6a2 <_malloc_r+0x1e>
 800b6d8:	680b      	ldr	r3, [r1, #0]
 800b6da:	1b5b      	subs	r3, r3, r5
 800b6dc:	d418      	bmi.n	800b710 <_malloc_r+0x8c>
 800b6de:	2b0b      	cmp	r3, #11
 800b6e0:	d90f      	bls.n	800b702 <_malloc_r+0x7e>
 800b6e2:	600b      	str	r3, [r1, #0]
 800b6e4:	50cd      	str	r5, [r1, r3]
 800b6e6:	18cc      	adds	r4, r1, r3
 800b6e8:	4630      	mov	r0, r6
 800b6ea:	f000 f9b3 	bl	800ba54 <__malloc_unlock>
 800b6ee:	f104 000b 	add.w	r0, r4, #11
 800b6f2:	1d23      	adds	r3, r4, #4
 800b6f4:	f020 0007 	bic.w	r0, r0, #7
 800b6f8:	1ac3      	subs	r3, r0, r3
 800b6fa:	d0d3      	beq.n	800b6a4 <_malloc_r+0x20>
 800b6fc:	425a      	negs	r2, r3
 800b6fe:	50e2      	str	r2, [r4, r3]
 800b700:	e7d0      	b.n	800b6a4 <_malloc_r+0x20>
 800b702:	428c      	cmp	r4, r1
 800b704:	684b      	ldr	r3, [r1, #4]
 800b706:	bf16      	itet	ne
 800b708:	6063      	strne	r3, [r4, #4]
 800b70a:	6013      	streq	r3, [r2, #0]
 800b70c:	460c      	movne	r4, r1
 800b70e:	e7eb      	b.n	800b6e8 <_malloc_r+0x64>
 800b710:	460c      	mov	r4, r1
 800b712:	6849      	ldr	r1, [r1, #4]
 800b714:	e7cc      	b.n	800b6b0 <_malloc_r+0x2c>
 800b716:	1cc4      	adds	r4, r0, #3
 800b718:	f024 0403 	bic.w	r4, r4, #3
 800b71c:	42a0      	cmp	r0, r4
 800b71e:	d005      	beq.n	800b72c <_malloc_r+0xa8>
 800b720:	1a21      	subs	r1, r4, r0
 800b722:	4630      	mov	r0, r6
 800b724:	f000 f95a 	bl	800b9dc <_sbrk_r>
 800b728:	3001      	adds	r0, #1
 800b72a:	d0cf      	beq.n	800b6cc <_malloc_r+0x48>
 800b72c:	6025      	str	r5, [r4, #0]
 800b72e:	e7db      	b.n	800b6e8 <_malloc_r+0x64>
 800b730:	20000220 	.word	0x20000220
 800b734:	20000224 	.word	0x20000224

0800b738 <__ssputs_r>:
 800b738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b73c:	688e      	ldr	r6, [r1, #8]
 800b73e:	429e      	cmp	r6, r3
 800b740:	4682      	mov	sl, r0
 800b742:	460c      	mov	r4, r1
 800b744:	4690      	mov	r8, r2
 800b746:	4699      	mov	r9, r3
 800b748:	d837      	bhi.n	800b7ba <__ssputs_r+0x82>
 800b74a:	898a      	ldrh	r2, [r1, #12]
 800b74c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b750:	d031      	beq.n	800b7b6 <__ssputs_r+0x7e>
 800b752:	6825      	ldr	r5, [r4, #0]
 800b754:	6909      	ldr	r1, [r1, #16]
 800b756:	1a6f      	subs	r7, r5, r1
 800b758:	6965      	ldr	r5, [r4, #20]
 800b75a:	2302      	movs	r3, #2
 800b75c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b760:	fb95 f5f3 	sdiv	r5, r5, r3
 800b764:	f109 0301 	add.w	r3, r9, #1
 800b768:	443b      	add	r3, r7
 800b76a:	429d      	cmp	r5, r3
 800b76c:	bf38      	it	cc
 800b76e:	461d      	movcc	r5, r3
 800b770:	0553      	lsls	r3, r2, #21
 800b772:	d530      	bpl.n	800b7d6 <__ssputs_r+0x9e>
 800b774:	4629      	mov	r1, r5
 800b776:	f7ff ff85 	bl	800b684 <_malloc_r>
 800b77a:	4606      	mov	r6, r0
 800b77c:	b950      	cbnz	r0, 800b794 <__ssputs_r+0x5c>
 800b77e:	230c      	movs	r3, #12
 800b780:	f8ca 3000 	str.w	r3, [sl]
 800b784:	89a3      	ldrh	r3, [r4, #12]
 800b786:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b78a:	81a3      	strh	r3, [r4, #12]
 800b78c:	f04f 30ff 	mov.w	r0, #4294967295
 800b790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b794:	463a      	mov	r2, r7
 800b796:	6921      	ldr	r1, [r4, #16]
 800b798:	f7fe f952 	bl	8009a40 <memcpy>
 800b79c:	89a3      	ldrh	r3, [r4, #12]
 800b79e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b7a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7a6:	81a3      	strh	r3, [r4, #12]
 800b7a8:	6126      	str	r6, [r4, #16]
 800b7aa:	6165      	str	r5, [r4, #20]
 800b7ac:	443e      	add	r6, r7
 800b7ae:	1bed      	subs	r5, r5, r7
 800b7b0:	6026      	str	r6, [r4, #0]
 800b7b2:	60a5      	str	r5, [r4, #8]
 800b7b4:	464e      	mov	r6, r9
 800b7b6:	454e      	cmp	r6, r9
 800b7b8:	d900      	bls.n	800b7bc <__ssputs_r+0x84>
 800b7ba:	464e      	mov	r6, r9
 800b7bc:	4632      	mov	r2, r6
 800b7be:	4641      	mov	r1, r8
 800b7c0:	6820      	ldr	r0, [r4, #0]
 800b7c2:	f000 f92d 	bl	800ba20 <memmove>
 800b7c6:	68a3      	ldr	r3, [r4, #8]
 800b7c8:	1b9b      	subs	r3, r3, r6
 800b7ca:	60a3      	str	r3, [r4, #8]
 800b7cc:	6823      	ldr	r3, [r4, #0]
 800b7ce:	441e      	add	r6, r3
 800b7d0:	6026      	str	r6, [r4, #0]
 800b7d2:	2000      	movs	r0, #0
 800b7d4:	e7dc      	b.n	800b790 <__ssputs_r+0x58>
 800b7d6:	462a      	mov	r2, r5
 800b7d8:	f000 f93d 	bl	800ba56 <_realloc_r>
 800b7dc:	4606      	mov	r6, r0
 800b7de:	2800      	cmp	r0, #0
 800b7e0:	d1e2      	bne.n	800b7a8 <__ssputs_r+0x70>
 800b7e2:	6921      	ldr	r1, [r4, #16]
 800b7e4:	4650      	mov	r0, sl
 800b7e6:	f7ff feff 	bl	800b5e8 <_free_r>
 800b7ea:	e7c8      	b.n	800b77e <__ssputs_r+0x46>

0800b7ec <_svfiprintf_r>:
 800b7ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7f0:	461d      	mov	r5, r3
 800b7f2:	898b      	ldrh	r3, [r1, #12]
 800b7f4:	061f      	lsls	r7, r3, #24
 800b7f6:	b09d      	sub	sp, #116	; 0x74
 800b7f8:	4680      	mov	r8, r0
 800b7fa:	460c      	mov	r4, r1
 800b7fc:	4616      	mov	r6, r2
 800b7fe:	d50f      	bpl.n	800b820 <_svfiprintf_r+0x34>
 800b800:	690b      	ldr	r3, [r1, #16]
 800b802:	b96b      	cbnz	r3, 800b820 <_svfiprintf_r+0x34>
 800b804:	2140      	movs	r1, #64	; 0x40
 800b806:	f7ff ff3d 	bl	800b684 <_malloc_r>
 800b80a:	6020      	str	r0, [r4, #0]
 800b80c:	6120      	str	r0, [r4, #16]
 800b80e:	b928      	cbnz	r0, 800b81c <_svfiprintf_r+0x30>
 800b810:	230c      	movs	r3, #12
 800b812:	f8c8 3000 	str.w	r3, [r8]
 800b816:	f04f 30ff 	mov.w	r0, #4294967295
 800b81a:	e0c8      	b.n	800b9ae <_svfiprintf_r+0x1c2>
 800b81c:	2340      	movs	r3, #64	; 0x40
 800b81e:	6163      	str	r3, [r4, #20]
 800b820:	2300      	movs	r3, #0
 800b822:	9309      	str	r3, [sp, #36]	; 0x24
 800b824:	2320      	movs	r3, #32
 800b826:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b82a:	2330      	movs	r3, #48	; 0x30
 800b82c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b830:	9503      	str	r5, [sp, #12]
 800b832:	f04f 0b01 	mov.w	fp, #1
 800b836:	4637      	mov	r7, r6
 800b838:	463d      	mov	r5, r7
 800b83a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b83e:	b10b      	cbz	r3, 800b844 <_svfiprintf_r+0x58>
 800b840:	2b25      	cmp	r3, #37	; 0x25
 800b842:	d13e      	bne.n	800b8c2 <_svfiprintf_r+0xd6>
 800b844:	ebb7 0a06 	subs.w	sl, r7, r6
 800b848:	d00b      	beq.n	800b862 <_svfiprintf_r+0x76>
 800b84a:	4653      	mov	r3, sl
 800b84c:	4632      	mov	r2, r6
 800b84e:	4621      	mov	r1, r4
 800b850:	4640      	mov	r0, r8
 800b852:	f7ff ff71 	bl	800b738 <__ssputs_r>
 800b856:	3001      	adds	r0, #1
 800b858:	f000 80a4 	beq.w	800b9a4 <_svfiprintf_r+0x1b8>
 800b85c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b85e:	4453      	add	r3, sl
 800b860:	9309      	str	r3, [sp, #36]	; 0x24
 800b862:	783b      	ldrb	r3, [r7, #0]
 800b864:	2b00      	cmp	r3, #0
 800b866:	f000 809d 	beq.w	800b9a4 <_svfiprintf_r+0x1b8>
 800b86a:	2300      	movs	r3, #0
 800b86c:	f04f 32ff 	mov.w	r2, #4294967295
 800b870:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b874:	9304      	str	r3, [sp, #16]
 800b876:	9307      	str	r3, [sp, #28]
 800b878:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b87c:	931a      	str	r3, [sp, #104]	; 0x68
 800b87e:	462f      	mov	r7, r5
 800b880:	2205      	movs	r2, #5
 800b882:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b886:	4850      	ldr	r0, [pc, #320]	; (800b9c8 <_svfiprintf_r+0x1dc>)
 800b888:	f7f4 fca2 	bl	80001d0 <memchr>
 800b88c:	9b04      	ldr	r3, [sp, #16]
 800b88e:	b9d0      	cbnz	r0, 800b8c6 <_svfiprintf_r+0xda>
 800b890:	06d9      	lsls	r1, r3, #27
 800b892:	bf44      	itt	mi
 800b894:	2220      	movmi	r2, #32
 800b896:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b89a:	071a      	lsls	r2, r3, #28
 800b89c:	bf44      	itt	mi
 800b89e:	222b      	movmi	r2, #43	; 0x2b
 800b8a0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b8a4:	782a      	ldrb	r2, [r5, #0]
 800b8a6:	2a2a      	cmp	r2, #42	; 0x2a
 800b8a8:	d015      	beq.n	800b8d6 <_svfiprintf_r+0xea>
 800b8aa:	9a07      	ldr	r2, [sp, #28]
 800b8ac:	462f      	mov	r7, r5
 800b8ae:	2000      	movs	r0, #0
 800b8b0:	250a      	movs	r5, #10
 800b8b2:	4639      	mov	r1, r7
 800b8b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8b8:	3b30      	subs	r3, #48	; 0x30
 800b8ba:	2b09      	cmp	r3, #9
 800b8bc:	d94d      	bls.n	800b95a <_svfiprintf_r+0x16e>
 800b8be:	b1b8      	cbz	r0, 800b8f0 <_svfiprintf_r+0x104>
 800b8c0:	e00f      	b.n	800b8e2 <_svfiprintf_r+0xf6>
 800b8c2:	462f      	mov	r7, r5
 800b8c4:	e7b8      	b.n	800b838 <_svfiprintf_r+0x4c>
 800b8c6:	4a40      	ldr	r2, [pc, #256]	; (800b9c8 <_svfiprintf_r+0x1dc>)
 800b8c8:	1a80      	subs	r0, r0, r2
 800b8ca:	fa0b f000 	lsl.w	r0, fp, r0
 800b8ce:	4318      	orrs	r0, r3
 800b8d0:	9004      	str	r0, [sp, #16]
 800b8d2:	463d      	mov	r5, r7
 800b8d4:	e7d3      	b.n	800b87e <_svfiprintf_r+0x92>
 800b8d6:	9a03      	ldr	r2, [sp, #12]
 800b8d8:	1d11      	adds	r1, r2, #4
 800b8da:	6812      	ldr	r2, [r2, #0]
 800b8dc:	9103      	str	r1, [sp, #12]
 800b8de:	2a00      	cmp	r2, #0
 800b8e0:	db01      	blt.n	800b8e6 <_svfiprintf_r+0xfa>
 800b8e2:	9207      	str	r2, [sp, #28]
 800b8e4:	e004      	b.n	800b8f0 <_svfiprintf_r+0x104>
 800b8e6:	4252      	negs	r2, r2
 800b8e8:	f043 0302 	orr.w	r3, r3, #2
 800b8ec:	9207      	str	r2, [sp, #28]
 800b8ee:	9304      	str	r3, [sp, #16]
 800b8f0:	783b      	ldrb	r3, [r7, #0]
 800b8f2:	2b2e      	cmp	r3, #46	; 0x2e
 800b8f4:	d10c      	bne.n	800b910 <_svfiprintf_r+0x124>
 800b8f6:	787b      	ldrb	r3, [r7, #1]
 800b8f8:	2b2a      	cmp	r3, #42	; 0x2a
 800b8fa:	d133      	bne.n	800b964 <_svfiprintf_r+0x178>
 800b8fc:	9b03      	ldr	r3, [sp, #12]
 800b8fe:	1d1a      	adds	r2, r3, #4
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	9203      	str	r2, [sp, #12]
 800b904:	2b00      	cmp	r3, #0
 800b906:	bfb8      	it	lt
 800b908:	f04f 33ff 	movlt.w	r3, #4294967295
 800b90c:	3702      	adds	r7, #2
 800b90e:	9305      	str	r3, [sp, #20]
 800b910:	4d2e      	ldr	r5, [pc, #184]	; (800b9cc <_svfiprintf_r+0x1e0>)
 800b912:	7839      	ldrb	r1, [r7, #0]
 800b914:	2203      	movs	r2, #3
 800b916:	4628      	mov	r0, r5
 800b918:	f7f4 fc5a 	bl	80001d0 <memchr>
 800b91c:	b138      	cbz	r0, 800b92e <_svfiprintf_r+0x142>
 800b91e:	2340      	movs	r3, #64	; 0x40
 800b920:	1b40      	subs	r0, r0, r5
 800b922:	fa03 f000 	lsl.w	r0, r3, r0
 800b926:	9b04      	ldr	r3, [sp, #16]
 800b928:	4303      	orrs	r3, r0
 800b92a:	3701      	adds	r7, #1
 800b92c:	9304      	str	r3, [sp, #16]
 800b92e:	7839      	ldrb	r1, [r7, #0]
 800b930:	4827      	ldr	r0, [pc, #156]	; (800b9d0 <_svfiprintf_r+0x1e4>)
 800b932:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b936:	2206      	movs	r2, #6
 800b938:	1c7e      	adds	r6, r7, #1
 800b93a:	f7f4 fc49 	bl	80001d0 <memchr>
 800b93e:	2800      	cmp	r0, #0
 800b940:	d038      	beq.n	800b9b4 <_svfiprintf_r+0x1c8>
 800b942:	4b24      	ldr	r3, [pc, #144]	; (800b9d4 <_svfiprintf_r+0x1e8>)
 800b944:	bb13      	cbnz	r3, 800b98c <_svfiprintf_r+0x1a0>
 800b946:	9b03      	ldr	r3, [sp, #12]
 800b948:	3307      	adds	r3, #7
 800b94a:	f023 0307 	bic.w	r3, r3, #7
 800b94e:	3308      	adds	r3, #8
 800b950:	9303      	str	r3, [sp, #12]
 800b952:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b954:	444b      	add	r3, r9
 800b956:	9309      	str	r3, [sp, #36]	; 0x24
 800b958:	e76d      	b.n	800b836 <_svfiprintf_r+0x4a>
 800b95a:	fb05 3202 	mla	r2, r5, r2, r3
 800b95e:	2001      	movs	r0, #1
 800b960:	460f      	mov	r7, r1
 800b962:	e7a6      	b.n	800b8b2 <_svfiprintf_r+0xc6>
 800b964:	2300      	movs	r3, #0
 800b966:	3701      	adds	r7, #1
 800b968:	9305      	str	r3, [sp, #20]
 800b96a:	4619      	mov	r1, r3
 800b96c:	250a      	movs	r5, #10
 800b96e:	4638      	mov	r0, r7
 800b970:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b974:	3a30      	subs	r2, #48	; 0x30
 800b976:	2a09      	cmp	r2, #9
 800b978:	d903      	bls.n	800b982 <_svfiprintf_r+0x196>
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d0c8      	beq.n	800b910 <_svfiprintf_r+0x124>
 800b97e:	9105      	str	r1, [sp, #20]
 800b980:	e7c6      	b.n	800b910 <_svfiprintf_r+0x124>
 800b982:	fb05 2101 	mla	r1, r5, r1, r2
 800b986:	2301      	movs	r3, #1
 800b988:	4607      	mov	r7, r0
 800b98a:	e7f0      	b.n	800b96e <_svfiprintf_r+0x182>
 800b98c:	ab03      	add	r3, sp, #12
 800b98e:	9300      	str	r3, [sp, #0]
 800b990:	4622      	mov	r2, r4
 800b992:	4b11      	ldr	r3, [pc, #68]	; (800b9d8 <_svfiprintf_r+0x1ec>)
 800b994:	a904      	add	r1, sp, #16
 800b996:	4640      	mov	r0, r8
 800b998:	f7fe f8fa 	bl	8009b90 <_printf_float>
 800b99c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b9a0:	4681      	mov	r9, r0
 800b9a2:	d1d6      	bne.n	800b952 <_svfiprintf_r+0x166>
 800b9a4:	89a3      	ldrh	r3, [r4, #12]
 800b9a6:	065b      	lsls	r3, r3, #25
 800b9a8:	f53f af35 	bmi.w	800b816 <_svfiprintf_r+0x2a>
 800b9ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b9ae:	b01d      	add	sp, #116	; 0x74
 800b9b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9b4:	ab03      	add	r3, sp, #12
 800b9b6:	9300      	str	r3, [sp, #0]
 800b9b8:	4622      	mov	r2, r4
 800b9ba:	4b07      	ldr	r3, [pc, #28]	; (800b9d8 <_svfiprintf_r+0x1ec>)
 800b9bc:	a904      	add	r1, sp, #16
 800b9be:	4640      	mov	r0, r8
 800b9c0:	f7fe fb9c 	bl	800a0fc <_printf_i>
 800b9c4:	e7ea      	b.n	800b99c <_svfiprintf_r+0x1b0>
 800b9c6:	bf00      	nop
 800b9c8:	0800d054 	.word	0x0800d054
 800b9cc:	0800d05a 	.word	0x0800d05a
 800b9d0:	0800d05e 	.word	0x0800d05e
 800b9d4:	08009b91 	.word	0x08009b91
 800b9d8:	0800b739 	.word	0x0800b739

0800b9dc <_sbrk_r>:
 800b9dc:	b538      	push	{r3, r4, r5, lr}
 800b9de:	4c06      	ldr	r4, [pc, #24]	; (800b9f8 <_sbrk_r+0x1c>)
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	4605      	mov	r5, r0
 800b9e4:	4608      	mov	r0, r1
 800b9e6:	6023      	str	r3, [r4, #0]
 800b9e8:	f7f9 f84e 	bl	8004a88 <_sbrk>
 800b9ec:	1c43      	adds	r3, r0, #1
 800b9ee:	d102      	bne.n	800b9f6 <_sbrk_r+0x1a>
 800b9f0:	6823      	ldr	r3, [r4, #0]
 800b9f2:	b103      	cbz	r3, 800b9f6 <_sbrk_r+0x1a>
 800b9f4:	602b      	str	r3, [r5, #0]
 800b9f6:	bd38      	pop	{r3, r4, r5, pc}
 800b9f8:	20000d44 	.word	0x20000d44

0800b9fc <__ascii_mbtowc>:
 800b9fc:	b082      	sub	sp, #8
 800b9fe:	b901      	cbnz	r1, 800ba02 <__ascii_mbtowc+0x6>
 800ba00:	a901      	add	r1, sp, #4
 800ba02:	b142      	cbz	r2, 800ba16 <__ascii_mbtowc+0x1a>
 800ba04:	b14b      	cbz	r3, 800ba1a <__ascii_mbtowc+0x1e>
 800ba06:	7813      	ldrb	r3, [r2, #0]
 800ba08:	600b      	str	r3, [r1, #0]
 800ba0a:	7812      	ldrb	r2, [r2, #0]
 800ba0c:	1c10      	adds	r0, r2, #0
 800ba0e:	bf18      	it	ne
 800ba10:	2001      	movne	r0, #1
 800ba12:	b002      	add	sp, #8
 800ba14:	4770      	bx	lr
 800ba16:	4610      	mov	r0, r2
 800ba18:	e7fb      	b.n	800ba12 <__ascii_mbtowc+0x16>
 800ba1a:	f06f 0001 	mvn.w	r0, #1
 800ba1e:	e7f8      	b.n	800ba12 <__ascii_mbtowc+0x16>

0800ba20 <memmove>:
 800ba20:	4288      	cmp	r0, r1
 800ba22:	b510      	push	{r4, lr}
 800ba24:	eb01 0302 	add.w	r3, r1, r2
 800ba28:	d807      	bhi.n	800ba3a <memmove+0x1a>
 800ba2a:	1e42      	subs	r2, r0, #1
 800ba2c:	4299      	cmp	r1, r3
 800ba2e:	d00a      	beq.n	800ba46 <memmove+0x26>
 800ba30:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba34:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ba38:	e7f8      	b.n	800ba2c <memmove+0xc>
 800ba3a:	4283      	cmp	r3, r0
 800ba3c:	d9f5      	bls.n	800ba2a <memmove+0xa>
 800ba3e:	1881      	adds	r1, r0, r2
 800ba40:	1ad2      	subs	r2, r2, r3
 800ba42:	42d3      	cmn	r3, r2
 800ba44:	d100      	bne.n	800ba48 <memmove+0x28>
 800ba46:	bd10      	pop	{r4, pc}
 800ba48:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ba4c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ba50:	e7f7      	b.n	800ba42 <memmove+0x22>

0800ba52 <__malloc_lock>:
 800ba52:	4770      	bx	lr

0800ba54 <__malloc_unlock>:
 800ba54:	4770      	bx	lr

0800ba56 <_realloc_r>:
 800ba56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba58:	4607      	mov	r7, r0
 800ba5a:	4614      	mov	r4, r2
 800ba5c:	460e      	mov	r6, r1
 800ba5e:	b921      	cbnz	r1, 800ba6a <_realloc_r+0x14>
 800ba60:	4611      	mov	r1, r2
 800ba62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ba66:	f7ff be0d 	b.w	800b684 <_malloc_r>
 800ba6a:	b922      	cbnz	r2, 800ba76 <_realloc_r+0x20>
 800ba6c:	f7ff fdbc 	bl	800b5e8 <_free_r>
 800ba70:	4625      	mov	r5, r4
 800ba72:	4628      	mov	r0, r5
 800ba74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba76:	f000 f821 	bl	800babc <_malloc_usable_size_r>
 800ba7a:	42a0      	cmp	r0, r4
 800ba7c:	d20f      	bcs.n	800ba9e <_realloc_r+0x48>
 800ba7e:	4621      	mov	r1, r4
 800ba80:	4638      	mov	r0, r7
 800ba82:	f7ff fdff 	bl	800b684 <_malloc_r>
 800ba86:	4605      	mov	r5, r0
 800ba88:	2800      	cmp	r0, #0
 800ba8a:	d0f2      	beq.n	800ba72 <_realloc_r+0x1c>
 800ba8c:	4631      	mov	r1, r6
 800ba8e:	4622      	mov	r2, r4
 800ba90:	f7fd ffd6 	bl	8009a40 <memcpy>
 800ba94:	4631      	mov	r1, r6
 800ba96:	4638      	mov	r0, r7
 800ba98:	f7ff fda6 	bl	800b5e8 <_free_r>
 800ba9c:	e7e9      	b.n	800ba72 <_realloc_r+0x1c>
 800ba9e:	4635      	mov	r5, r6
 800baa0:	e7e7      	b.n	800ba72 <_realloc_r+0x1c>

0800baa2 <__ascii_wctomb>:
 800baa2:	b149      	cbz	r1, 800bab8 <__ascii_wctomb+0x16>
 800baa4:	2aff      	cmp	r2, #255	; 0xff
 800baa6:	bf85      	ittet	hi
 800baa8:	238a      	movhi	r3, #138	; 0x8a
 800baaa:	6003      	strhi	r3, [r0, #0]
 800baac:	700a      	strbls	r2, [r1, #0]
 800baae:	f04f 30ff 	movhi.w	r0, #4294967295
 800bab2:	bf98      	it	ls
 800bab4:	2001      	movls	r0, #1
 800bab6:	4770      	bx	lr
 800bab8:	4608      	mov	r0, r1
 800baba:	4770      	bx	lr

0800babc <_malloc_usable_size_r>:
 800babc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bac0:	1f18      	subs	r0, r3, #4
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	bfbc      	itt	lt
 800bac6:	580b      	ldrlt	r3, [r1, r0]
 800bac8:	18c0      	addlt	r0, r0, r3
 800baca:	4770      	bx	lr
 800bacc:	0000      	movs	r0, r0
	...

0800bad0 <cos>:
 800bad0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bad2:	ec51 0b10 	vmov	r0, r1, d0
 800bad6:	4a1e      	ldr	r2, [pc, #120]	; (800bb50 <cos+0x80>)
 800bad8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800badc:	4293      	cmp	r3, r2
 800bade:	dc06      	bgt.n	800baee <cos+0x1e>
 800bae0:	ed9f 1b19 	vldr	d1, [pc, #100]	; 800bb48 <cos+0x78>
 800bae4:	f000 fb80 	bl	800c1e8 <__kernel_cos>
 800bae8:	ec51 0b10 	vmov	r0, r1, d0
 800baec:	e007      	b.n	800bafe <cos+0x2e>
 800baee:	4a19      	ldr	r2, [pc, #100]	; (800bb54 <cos+0x84>)
 800baf0:	4293      	cmp	r3, r2
 800baf2:	dd09      	ble.n	800bb08 <cos+0x38>
 800baf4:	ee10 2a10 	vmov	r2, s0
 800baf8:	460b      	mov	r3, r1
 800bafa:	f7f4 fbc5 	bl	8000288 <__aeabi_dsub>
 800bafe:	ec41 0b10 	vmov	d0, r0, r1
 800bb02:	b005      	add	sp, #20
 800bb04:	f85d fb04 	ldr.w	pc, [sp], #4
 800bb08:	4668      	mov	r0, sp
 800bb0a:	f000 f8c9 	bl	800bca0 <__ieee754_rem_pio2>
 800bb0e:	f000 0003 	and.w	r0, r0, #3
 800bb12:	2801      	cmp	r0, #1
 800bb14:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bb18:	ed9d 0b00 	vldr	d0, [sp]
 800bb1c:	d007      	beq.n	800bb2e <cos+0x5e>
 800bb1e:	2802      	cmp	r0, #2
 800bb20:	d00e      	beq.n	800bb40 <cos+0x70>
 800bb22:	2800      	cmp	r0, #0
 800bb24:	d0de      	beq.n	800bae4 <cos+0x14>
 800bb26:	2001      	movs	r0, #1
 800bb28:	f000 ff66 	bl	800c9f8 <__kernel_sin>
 800bb2c:	e7dc      	b.n	800bae8 <cos+0x18>
 800bb2e:	f000 ff63 	bl	800c9f8 <__kernel_sin>
 800bb32:	ec53 2b10 	vmov	r2, r3, d0
 800bb36:	ee10 0a10 	vmov	r0, s0
 800bb3a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800bb3e:	e7de      	b.n	800bafe <cos+0x2e>
 800bb40:	f000 fb52 	bl	800c1e8 <__kernel_cos>
 800bb44:	e7f5      	b.n	800bb32 <cos+0x62>
 800bb46:	bf00      	nop
	...
 800bb50:	3fe921fb 	.word	0x3fe921fb
 800bb54:	7fefffff 	.word	0x7fefffff

0800bb58 <sin>:
 800bb58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bb5a:	ec51 0b10 	vmov	r0, r1, d0
 800bb5e:	4a20      	ldr	r2, [pc, #128]	; (800bbe0 <sin+0x88>)
 800bb60:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bb64:	4293      	cmp	r3, r2
 800bb66:	dc07      	bgt.n	800bb78 <sin+0x20>
 800bb68:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800bbd8 <sin+0x80>
 800bb6c:	2000      	movs	r0, #0
 800bb6e:	f000 ff43 	bl	800c9f8 <__kernel_sin>
 800bb72:	ec51 0b10 	vmov	r0, r1, d0
 800bb76:	e007      	b.n	800bb88 <sin+0x30>
 800bb78:	4a1a      	ldr	r2, [pc, #104]	; (800bbe4 <sin+0x8c>)
 800bb7a:	4293      	cmp	r3, r2
 800bb7c:	dd09      	ble.n	800bb92 <sin+0x3a>
 800bb7e:	ee10 2a10 	vmov	r2, s0
 800bb82:	460b      	mov	r3, r1
 800bb84:	f7f4 fb80 	bl	8000288 <__aeabi_dsub>
 800bb88:	ec41 0b10 	vmov	d0, r0, r1
 800bb8c:	b005      	add	sp, #20
 800bb8e:	f85d fb04 	ldr.w	pc, [sp], #4
 800bb92:	4668      	mov	r0, sp
 800bb94:	f000 f884 	bl	800bca0 <__ieee754_rem_pio2>
 800bb98:	f000 0003 	and.w	r0, r0, #3
 800bb9c:	2801      	cmp	r0, #1
 800bb9e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bba2:	ed9d 0b00 	vldr	d0, [sp]
 800bba6:	d004      	beq.n	800bbb2 <sin+0x5a>
 800bba8:	2802      	cmp	r0, #2
 800bbaa:	d005      	beq.n	800bbb8 <sin+0x60>
 800bbac:	b970      	cbnz	r0, 800bbcc <sin+0x74>
 800bbae:	2001      	movs	r0, #1
 800bbb0:	e7dd      	b.n	800bb6e <sin+0x16>
 800bbb2:	f000 fb19 	bl	800c1e8 <__kernel_cos>
 800bbb6:	e7dc      	b.n	800bb72 <sin+0x1a>
 800bbb8:	2001      	movs	r0, #1
 800bbba:	f000 ff1d 	bl	800c9f8 <__kernel_sin>
 800bbbe:	ec53 2b10 	vmov	r2, r3, d0
 800bbc2:	ee10 0a10 	vmov	r0, s0
 800bbc6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800bbca:	e7dd      	b.n	800bb88 <sin+0x30>
 800bbcc:	f000 fb0c 	bl	800c1e8 <__kernel_cos>
 800bbd0:	e7f5      	b.n	800bbbe <sin+0x66>
 800bbd2:	bf00      	nop
 800bbd4:	f3af 8000 	nop.w
	...
 800bbe0:	3fe921fb 	.word	0x3fe921fb
 800bbe4:	7fefffff 	.word	0x7fefffff

0800bbe8 <sqrt>:
 800bbe8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bbec:	ed2d 8b02 	vpush	{d8}
 800bbf0:	b08b      	sub	sp, #44	; 0x2c
 800bbf2:	ec55 4b10 	vmov	r4, r5, d0
 800bbf6:	f000 fa45 	bl	800c084 <__ieee754_sqrt>
 800bbfa:	4b26      	ldr	r3, [pc, #152]	; (800bc94 <sqrt+0xac>)
 800bbfc:	eeb0 8a40 	vmov.f32	s16, s0
 800bc00:	eef0 8a60 	vmov.f32	s17, s1
 800bc04:	f993 6000 	ldrsb.w	r6, [r3]
 800bc08:	1c73      	adds	r3, r6, #1
 800bc0a:	d02a      	beq.n	800bc62 <sqrt+0x7a>
 800bc0c:	4622      	mov	r2, r4
 800bc0e:	462b      	mov	r3, r5
 800bc10:	4620      	mov	r0, r4
 800bc12:	4629      	mov	r1, r5
 800bc14:	f7f4 ff8a 	bl	8000b2c <__aeabi_dcmpun>
 800bc18:	4607      	mov	r7, r0
 800bc1a:	bb10      	cbnz	r0, 800bc62 <sqrt+0x7a>
 800bc1c:	f04f 0800 	mov.w	r8, #0
 800bc20:	f04f 0900 	mov.w	r9, #0
 800bc24:	4642      	mov	r2, r8
 800bc26:	464b      	mov	r3, r9
 800bc28:	4620      	mov	r0, r4
 800bc2a:	4629      	mov	r1, r5
 800bc2c:	f7f4 ff56 	bl	8000adc <__aeabi_dcmplt>
 800bc30:	b1b8      	cbz	r0, 800bc62 <sqrt+0x7a>
 800bc32:	2301      	movs	r3, #1
 800bc34:	9300      	str	r3, [sp, #0]
 800bc36:	4b18      	ldr	r3, [pc, #96]	; (800bc98 <sqrt+0xb0>)
 800bc38:	9301      	str	r3, [sp, #4]
 800bc3a:	9708      	str	r7, [sp, #32]
 800bc3c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800bc40:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800bc44:	b9b6      	cbnz	r6, 800bc74 <sqrt+0x8c>
 800bc46:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800bc4a:	4668      	mov	r0, sp
 800bc4c:	f001 f81c 	bl	800cc88 <matherr>
 800bc50:	b1d0      	cbz	r0, 800bc88 <sqrt+0xa0>
 800bc52:	9b08      	ldr	r3, [sp, #32]
 800bc54:	b11b      	cbz	r3, 800bc5e <sqrt+0x76>
 800bc56:	f7fd fec9 	bl	80099ec <__errno>
 800bc5a:	9b08      	ldr	r3, [sp, #32]
 800bc5c:	6003      	str	r3, [r0, #0]
 800bc5e:	ed9d 8b06 	vldr	d8, [sp, #24]
 800bc62:	eeb0 0a48 	vmov.f32	s0, s16
 800bc66:	eef0 0a68 	vmov.f32	s1, s17
 800bc6a:	b00b      	add	sp, #44	; 0x2c
 800bc6c:	ecbd 8b02 	vpop	{d8}
 800bc70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc74:	4642      	mov	r2, r8
 800bc76:	464b      	mov	r3, r9
 800bc78:	4640      	mov	r0, r8
 800bc7a:	4649      	mov	r1, r9
 800bc7c:	f7f4 fde6 	bl	800084c <__aeabi_ddiv>
 800bc80:	2e02      	cmp	r6, #2
 800bc82:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bc86:	d1e0      	bne.n	800bc4a <sqrt+0x62>
 800bc88:	f7fd feb0 	bl	80099ec <__errno>
 800bc8c:	2321      	movs	r3, #33	; 0x21
 800bc8e:	6003      	str	r3, [r0, #0]
 800bc90:	e7df      	b.n	800bc52 <sqrt+0x6a>
 800bc92:	bf00      	nop
 800bc94:	200001dc 	.word	0x200001dc
 800bc98:	0800d170 	.word	0x0800d170
 800bc9c:	00000000 	.word	0x00000000

0800bca0 <__ieee754_rem_pio2>:
 800bca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bca4:	ec57 6b10 	vmov	r6, r7, d0
 800bca8:	4bc3      	ldr	r3, [pc, #780]	; (800bfb8 <__ieee754_rem_pio2+0x318>)
 800bcaa:	b08d      	sub	sp, #52	; 0x34
 800bcac:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800bcb0:	4598      	cmp	r8, r3
 800bcb2:	4604      	mov	r4, r0
 800bcb4:	9704      	str	r7, [sp, #16]
 800bcb6:	dc07      	bgt.n	800bcc8 <__ieee754_rem_pio2+0x28>
 800bcb8:	2200      	movs	r2, #0
 800bcba:	2300      	movs	r3, #0
 800bcbc:	ed84 0b00 	vstr	d0, [r4]
 800bcc0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800bcc4:	2500      	movs	r5, #0
 800bcc6:	e027      	b.n	800bd18 <__ieee754_rem_pio2+0x78>
 800bcc8:	4bbc      	ldr	r3, [pc, #752]	; (800bfbc <__ieee754_rem_pio2+0x31c>)
 800bcca:	4598      	cmp	r8, r3
 800bccc:	dc75      	bgt.n	800bdba <__ieee754_rem_pio2+0x11a>
 800bcce:	9b04      	ldr	r3, [sp, #16]
 800bcd0:	4dbb      	ldr	r5, [pc, #748]	; (800bfc0 <__ieee754_rem_pio2+0x320>)
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	ee10 0a10 	vmov	r0, s0
 800bcd8:	a3a9      	add	r3, pc, #676	; (adr r3, 800bf80 <__ieee754_rem_pio2+0x2e0>)
 800bcda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcde:	4639      	mov	r1, r7
 800bce0:	dd36      	ble.n	800bd50 <__ieee754_rem_pio2+0xb0>
 800bce2:	f7f4 fad1 	bl	8000288 <__aeabi_dsub>
 800bce6:	45a8      	cmp	r8, r5
 800bce8:	4606      	mov	r6, r0
 800bcea:	460f      	mov	r7, r1
 800bcec:	d018      	beq.n	800bd20 <__ieee754_rem_pio2+0x80>
 800bcee:	a3a6      	add	r3, pc, #664	; (adr r3, 800bf88 <__ieee754_rem_pio2+0x2e8>)
 800bcf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf4:	f7f4 fac8 	bl	8000288 <__aeabi_dsub>
 800bcf8:	4602      	mov	r2, r0
 800bcfa:	460b      	mov	r3, r1
 800bcfc:	e9c4 2300 	strd	r2, r3, [r4]
 800bd00:	4630      	mov	r0, r6
 800bd02:	4639      	mov	r1, r7
 800bd04:	f7f4 fac0 	bl	8000288 <__aeabi_dsub>
 800bd08:	a39f      	add	r3, pc, #636	; (adr r3, 800bf88 <__ieee754_rem_pio2+0x2e8>)
 800bd0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd0e:	f7f4 fabb 	bl	8000288 <__aeabi_dsub>
 800bd12:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bd16:	2501      	movs	r5, #1
 800bd18:	4628      	mov	r0, r5
 800bd1a:	b00d      	add	sp, #52	; 0x34
 800bd1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd20:	a39b      	add	r3, pc, #620	; (adr r3, 800bf90 <__ieee754_rem_pio2+0x2f0>)
 800bd22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd26:	f7f4 faaf 	bl	8000288 <__aeabi_dsub>
 800bd2a:	a39b      	add	r3, pc, #620	; (adr r3, 800bf98 <__ieee754_rem_pio2+0x2f8>)
 800bd2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd30:	4606      	mov	r6, r0
 800bd32:	460f      	mov	r7, r1
 800bd34:	f7f4 faa8 	bl	8000288 <__aeabi_dsub>
 800bd38:	4602      	mov	r2, r0
 800bd3a:	460b      	mov	r3, r1
 800bd3c:	e9c4 2300 	strd	r2, r3, [r4]
 800bd40:	4630      	mov	r0, r6
 800bd42:	4639      	mov	r1, r7
 800bd44:	f7f4 faa0 	bl	8000288 <__aeabi_dsub>
 800bd48:	a393      	add	r3, pc, #588	; (adr r3, 800bf98 <__ieee754_rem_pio2+0x2f8>)
 800bd4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd4e:	e7de      	b.n	800bd0e <__ieee754_rem_pio2+0x6e>
 800bd50:	f7f4 fa9c 	bl	800028c <__adddf3>
 800bd54:	45a8      	cmp	r8, r5
 800bd56:	4606      	mov	r6, r0
 800bd58:	460f      	mov	r7, r1
 800bd5a:	d016      	beq.n	800bd8a <__ieee754_rem_pio2+0xea>
 800bd5c:	a38a      	add	r3, pc, #552	; (adr r3, 800bf88 <__ieee754_rem_pio2+0x2e8>)
 800bd5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd62:	f7f4 fa93 	bl	800028c <__adddf3>
 800bd66:	4602      	mov	r2, r0
 800bd68:	460b      	mov	r3, r1
 800bd6a:	e9c4 2300 	strd	r2, r3, [r4]
 800bd6e:	4630      	mov	r0, r6
 800bd70:	4639      	mov	r1, r7
 800bd72:	f7f4 fa89 	bl	8000288 <__aeabi_dsub>
 800bd76:	a384      	add	r3, pc, #528	; (adr r3, 800bf88 <__ieee754_rem_pio2+0x2e8>)
 800bd78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd7c:	f7f4 fa86 	bl	800028c <__adddf3>
 800bd80:	f04f 35ff 	mov.w	r5, #4294967295
 800bd84:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bd88:	e7c6      	b.n	800bd18 <__ieee754_rem_pio2+0x78>
 800bd8a:	a381      	add	r3, pc, #516	; (adr r3, 800bf90 <__ieee754_rem_pio2+0x2f0>)
 800bd8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd90:	f7f4 fa7c 	bl	800028c <__adddf3>
 800bd94:	a380      	add	r3, pc, #512	; (adr r3, 800bf98 <__ieee754_rem_pio2+0x2f8>)
 800bd96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd9a:	4606      	mov	r6, r0
 800bd9c:	460f      	mov	r7, r1
 800bd9e:	f7f4 fa75 	bl	800028c <__adddf3>
 800bda2:	4602      	mov	r2, r0
 800bda4:	460b      	mov	r3, r1
 800bda6:	e9c4 2300 	strd	r2, r3, [r4]
 800bdaa:	4630      	mov	r0, r6
 800bdac:	4639      	mov	r1, r7
 800bdae:	f7f4 fa6b 	bl	8000288 <__aeabi_dsub>
 800bdb2:	a379      	add	r3, pc, #484	; (adr r3, 800bf98 <__ieee754_rem_pio2+0x2f8>)
 800bdb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb8:	e7e0      	b.n	800bd7c <__ieee754_rem_pio2+0xdc>
 800bdba:	4b82      	ldr	r3, [pc, #520]	; (800bfc4 <__ieee754_rem_pio2+0x324>)
 800bdbc:	4598      	cmp	r8, r3
 800bdbe:	f300 80d0 	bgt.w	800bf62 <__ieee754_rem_pio2+0x2c2>
 800bdc2:	f000 fed3 	bl	800cb6c <fabs>
 800bdc6:	ec57 6b10 	vmov	r6, r7, d0
 800bdca:	ee10 0a10 	vmov	r0, s0
 800bdce:	a374      	add	r3, pc, #464	; (adr r3, 800bfa0 <__ieee754_rem_pio2+0x300>)
 800bdd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd4:	4639      	mov	r1, r7
 800bdd6:	f7f4 fc0f 	bl	80005f8 <__aeabi_dmul>
 800bdda:	2200      	movs	r2, #0
 800bddc:	4b7a      	ldr	r3, [pc, #488]	; (800bfc8 <__ieee754_rem_pio2+0x328>)
 800bdde:	f7f4 fa55 	bl	800028c <__adddf3>
 800bde2:	f7f4 feb9 	bl	8000b58 <__aeabi_d2iz>
 800bde6:	4605      	mov	r5, r0
 800bde8:	f7f4 fb9c 	bl	8000524 <__aeabi_i2d>
 800bdec:	a364      	add	r3, pc, #400	; (adr r3, 800bf80 <__ieee754_rem_pio2+0x2e0>)
 800bdee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bdf6:	f7f4 fbff 	bl	80005f8 <__aeabi_dmul>
 800bdfa:	4602      	mov	r2, r0
 800bdfc:	460b      	mov	r3, r1
 800bdfe:	4630      	mov	r0, r6
 800be00:	4639      	mov	r1, r7
 800be02:	f7f4 fa41 	bl	8000288 <__aeabi_dsub>
 800be06:	a360      	add	r3, pc, #384	; (adr r3, 800bf88 <__ieee754_rem_pio2+0x2e8>)
 800be08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be0c:	4682      	mov	sl, r0
 800be0e:	468b      	mov	fp, r1
 800be10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be14:	f7f4 fbf0 	bl	80005f8 <__aeabi_dmul>
 800be18:	2d1f      	cmp	r5, #31
 800be1a:	4606      	mov	r6, r0
 800be1c:	460f      	mov	r7, r1
 800be1e:	dc0c      	bgt.n	800be3a <__ieee754_rem_pio2+0x19a>
 800be20:	1e6a      	subs	r2, r5, #1
 800be22:	4b6a      	ldr	r3, [pc, #424]	; (800bfcc <__ieee754_rem_pio2+0x32c>)
 800be24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be28:	4543      	cmp	r3, r8
 800be2a:	d006      	beq.n	800be3a <__ieee754_rem_pio2+0x19a>
 800be2c:	4632      	mov	r2, r6
 800be2e:	463b      	mov	r3, r7
 800be30:	4650      	mov	r0, sl
 800be32:	4659      	mov	r1, fp
 800be34:	f7f4 fa28 	bl	8000288 <__aeabi_dsub>
 800be38:	e00e      	b.n	800be58 <__ieee754_rem_pio2+0x1b8>
 800be3a:	4632      	mov	r2, r6
 800be3c:	463b      	mov	r3, r7
 800be3e:	4650      	mov	r0, sl
 800be40:	4659      	mov	r1, fp
 800be42:	f7f4 fa21 	bl	8000288 <__aeabi_dsub>
 800be46:	ea4f 5328 	mov.w	r3, r8, asr #20
 800be4a:	9305      	str	r3, [sp, #20]
 800be4c:	9a05      	ldr	r2, [sp, #20]
 800be4e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800be52:	1ad3      	subs	r3, r2, r3
 800be54:	2b10      	cmp	r3, #16
 800be56:	dc02      	bgt.n	800be5e <__ieee754_rem_pio2+0x1be>
 800be58:	e9c4 0100 	strd	r0, r1, [r4]
 800be5c:	e039      	b.n	800bed2 <__ieee754_rem_pio2+0x232>
 800be5e:	a34c      	add	r3, pc, #304	; (adr r3, 800bf90 <__ieee754_rem_pio2+0x2f0>)
 800be60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be68:	f7f4 fbc6 	bl	80005f8 <__aeabi_dmul>
 800be6c:	4606      	mov	r6, r0
 800be6e:	460f      	mov	r7, r1
 800be70:	4602      	mov	r2, r0
 800be72:	460b      	mov	r3, r1
 800be74:	4650      	mov	r0, sl
 800be76:	4659      	mov	r1, fp
 800be78:	f7f4 fa06 	bl	8000288 <__aeabi_dsub>
 800be7c:	4602      	mov	r2, r0
 800be7e:	460b      	mov	r3, r1
 800be80:	4680      	mov	r8, r0
 800be82:	4689      	mov	r9, r1
 800be84:	4650      	mov	r0, sl
 800be86:	4659      	mov	r1, fp
 800be88:	f7f4 f9fe 	bl	8000288 <__aeabi_dsub>
 800be8c:	4632      	mov	r2, r6
 800be8e:	463b      	mov	r3, r7
 800be90:	f7f4 f9fa 	bl	8000288 <__aeabi_dsub>
 800be94:	a340      	add	r3, pc, #256	; (adr r3, 800bf98 <__ieee754_rem_pio2+0x2f8>)
 800be96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be9a:	4606      	mov	r6, r0
 800be9c:	460f      	mov	r7, r1
 800be9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bea2:	f7f4 fba9 	bl	80005f8 <__aeabi_dmul>
 800bea6:	4632      	mov	r2, r6
 800bea8:	463b      	mov	r3, r7
 800beaa:	f7f4 f9ed 	bl	8000288 <__aeabi_dsub>
 800beae:	4602      	mov	r2, r0
 800beb0:	460b      	mov	r3, r1
 800beb2:	4606      	mov	r6, r0
 800beb4:	460f      	mov	r7, r1
 800beb6:	4640      	mov	r0, r8
 800beb8:	4649      	mov	r1, r9
 800beba:	f7f4 f9e5 	bl	8000288 <__aeabi_dsub>
 800bebe:	9a05      	ldr	r2, [sp, #20]
 800bec0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bec4:	1ad3      	subs	r3, r2, r3
 800bec6:	2b31      	cmp	r3, #49	; 0x31
 800bec8:	dc20      	bgt.n	800bf0c <__ieee754_rem_pio2+0x26c>
 800beca:	e9c4 0100 	strd	r0, r1, [r4]
 800bece:	46c2      	mov	sl, r8
 800bed0:	46cb      	mov	fp, r9
 800bed2:	e9d4 8900 	ldrd	r8, r9, [r4]
 800bed6:	4650      	mov	r0, sl
 800bed8:	4642      	mov	r2, r8
 800beda:	464b      	mov	r3, r9
 800bedc:	4659      	mov	r1, fp
 800bede:	f7f4 f9d3 	bl	8000288 <__aeabi_dsub>
 800bee2:	463b      	mov	r3, r7
 800bee4:	4632      	mov	r2, r6
 800bee6:	f7f4 f9cf 	bl	8000288 <__aeabi_dsub>
 800beea:	9b04      	ldr	r3, [sp, #16]
 800beec:	2b00      	cmp	r3, #0
 800beee:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bef2:	f6bf af11 	bge.w	800bd18 <__ieee754_rem_pio2+0x78>
 800bef6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800befa:	6063      	str	r3, [r4, #4]
 800befc:	f8c4 8000 	str.w	r8, [r4]
 800bf00:	60a0      	str	r0, [r4, #8]
 800bf02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bf06:	60e3      	str	r3, [r4, #12]
 800bf08:	426d      	negs	r5, r5
 800bf0a:	e705      	b.n	800bd18 <__ieee754_rem_pio2+0x78>
 800bf0c:	a326      	add	r3, pc, #152	; (adr r3, 800bfa8 <__ieee754_rem_pio2+0x308>)
 800bf0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf16:	f7f4 fb6f 	bl	80005f8 <__aeabi_dmul>
 800bf1a:	4606      	mov	r6, r0
 800bf1c:	460f      	mov	r7, r1
 800bf1e:	4602      	mov	r2, r0
 800bf20:	460b      	mov	r3, r1
 800bf22:	4640      	mov	r0, r8
 800bf24:	4649      	mov	r1, r9
 800bf26:	f7f4 f9af 	bl	8000288 <__aeabi_dsub>
 800bf2a:	4602      	mov	r2, r0
 800bf2c:	460b      	mov	r3, r1
 800bf2e:	4682      	mov	sl, r0
 800bf30:	468b      	mov	fp, r1
 800bf32:	4640      	mov	r0, r8
 800bf34:	4649      	mov	r1, r9
 800bf36:	f7f4 f9a7 	bl	8000288 <__aeabi_dsub>
 800bf3a:	4632      	mov	r2, r6
 800bf3c:	463b      	mov	r3, r7
 800bf3e:	f7f4 f9a3 	bl	8000288 <__aeabi_dsub>
 800bf42:	a31b      	add	r3, pc, #108	; (adr r3, 800bfb0 <__ieee754_rem_pio2+0x310>)
 800bf44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf48:	4606      	mov	r6, r0
 800bf4a:	460f      	mov	r7, r1
 800bf4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf50:	f7f4 fb52 	bl	80005f8 <__aeabi_dmul>
 800bf54:	4632      	mov	r2, r6
 800bf56:	463b      	mov	r3, r7
 800bf58:	f7f4 f996 	bl	8000288 <__aeabi_dsub>
 800bf5c:	4606      	mov	r6, r0
 800bf5e:	460f      	mov	r7, r1
 800bf60:	e764      	b.n	800be2c <__ieee754_rem_pio2+0x18c>
 800bf62:	4b1b      	ldr	r3, [pc, #108]	; (800bfd0 <__ieee754_rem_pio2+0x330>)
 800bf64:	4598      	cmp	r8, r3
 800bf66:	dd35      	ble.n	800bfd4 <__ieee754_rem_pio2+0x334>
 800bf68:	ee10 2a10 	vmov	r2, s0
 800bf6c:	463b      	mov	r3, r7
 800bf6e:	4630      	mov	r0, r6
 800bf70:	4639      	mov	r1, r7
 800bf72:	f7f4 f989 	bl	8000288 <__aeabi_dsub>
 800bf76:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bf7a:	e9c4 0100 	strd	r0, r1, [r4]
 800bf7e:	e6a1      	b.n	800bcc4 <__ieee754_rem_pio2+0x24>
 800bf80:	54400000 	.word	0x54400000
 800bf84:	3ff921fb 	.word	0x3ff921fb
 800bf88:	1a626331 	.word	0x1a626331
 800bf8c:	3dd0b461 	.word	0x3dd0b461
 800bf90:	1a600000 	.word	0x1a600000
 800bf94:	3dd0b461 	.word	0x3dd0b461
 800bf98:	2e037073 	.word	0x2e037073
 800bf9c:	3ba3198a 	.word	0x3ba3198a
 800bfa0:	6dc9c883 	.word	0x6dc9c883
 800bfa4:	3fe45f30 	.word	0x3fe45f30
 800bfa8:	2e000000 	.word	0x2e000000
 800bfac:	3ba3198a 	.word	0x3ba3198a
 800bfb0:	252049c1 	.word	0x252049c1
 800bfb4:	397b839a 	.word	0x397b839a
 800bfb8:	3fe921fb 	.word	0x3fe921fb
 800bfbc:	4002d97b 	.word	0x4002d97b
 800bfc0:	3ff921fb 	.word	0x3ff921fb
 800bfc4:	413921fb 	.word	0x413921fb
 800bfc8:	3fe00000 	.word	0x3fe00000
 800bfcc:	0800d178 	.word	0x0800d178
 800bfd0:	7fefffff 	.word	0x7fefffff
 800bfd4:	ea4f 5528 	mov.w	r5, r8, asr #20
 800bfd8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800bfdc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800bfe0:	4630      	mov	r0, r6
 800bfe2:	460f      	mov	r7, r1
 800bfe4:	f7f4 fdb8 	bl	8000b58 <__aeabi_d2iz>
 800bfe8:	f7f4 fa9c 	bl	8000524 <__aeabi_i2d>
 800bfec:	4602      	mov	r2, r0
 800bfee:	460b      	mov	r3, r1
 800bff0:	4630      	mov	r0, r6
 800bff2:	4639      	mov	r1, r7
 800bff4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bff8:	f7f4 f946 	bl	8000288 <__aeabi_dsub>
 800bffc:	2200      	movs	r2, #0
 800bffe:	4b1f      	ldr	r3, [pc, #124]	; (800c07c <__ieee754_rem_pio2+0x3dc>)
 800c000:	f7f4 fafa 	bl	80005f8 <__aeabi_dmul>
 800c004:	460f      	mov	r7, r1
 800c006:	4606      	mov	r6, r0
 800c008:	f7f4 fda6 	bl	8000b58 <__aeabi_d2iz>
 800c00c:	f7f4 fa8a 	bl	8000524 <__aeabi_i2d>
 800c010:	4602      	mov	r2, r0
 800c012:	460b      	mov	r3, r1
 800c014:	4630      	mov	r0, r6
 800c016:	4639      	mov	r1, r7
 800c018:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c01c:	f7f4 f934 	bl	8000288 <__aeabi_dsub>
 800c020:	2200      	movs	r2, #0
 800c022:	4b16      	ldr	r3, [pc, #88]	; (800c07c <__ieee754_rem_pio2+0x3dc>)
 800c024:	f7f4 fae8 	bl	80005f8 <__aeabi_dmul>
 800c028:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c02c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800c030:	f04f 0803 	mov.w	r8, #3
 800c034:	2600      	movs	r6, #0
 800c036:	2700      	movs	r7, #0
 800c038:	4632      	mov	r2, r6
 800c03a:	463b      	mov	r3, r7
 800c03c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800c040:	f108 3aff 	add.w	sl, r8, #4294967295
 800c044:	f7f4 fd40 	bl	8000ac8 <__aeabi_dcmpeq>
 800c048:	b9b0      	cbnz	r0, 800c078 <__ieee754_rem_pio2+0x3d8>
 800c04a:	4b0d      	ldr	r3, [pc, #52]	; (800c080 <__ieee754_rem_pio2+0x3e0>)
 800c04c:	9301      	str	r3, [sp, #4]
 800c04e:	2302      	movs	r3, #2
 800c050:	9300      	str	r3, [sp, #0]
 800c052:	462a      	mov	r2, r5
 800c054:	4643      	mov	r3, r8
 800c056:	4621      	mov	r1, r4
 800c058:	a806      	add	r0, sp, #24
 800c05a:	f000 f98d 	bl	800c378 <__kernel_rem_pio2>
 800c05e:	9b04      	ldr	r3, [sp, #16]
 800c060:	2b00      	cmp	r3, #0
 800c062:	4605      	mov	r5, r0
 800c064:	f6bf ae58 	bge.w	800bd18 <__ieee754_rem_pio2+0x78>
 800c068:	6863      	ldr	r3, [r4, #4]
 800c06a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c06e:	6063      	str	r3, [r4, #4]
 800c070:	68e3      	ldr	r3, [r4, #12]
 800c072:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c076:	e746      	b.n	800bf06 <__ieee754_rem_pio2+0x266>
 800c078:	46d0      	mov	r8, sl
 800c07a:	e7dd      	b.n	800c038 <__ieee754_rem_pio2+0x398>
 800c07c:	41700000 	.word	0x41700000
 800c080:	0800d1f8 	.word	0x0800d1f8

0800c084 <__ieee754_sqrt>:
 800c084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c088:	4955      	ldr	r1, [pc, #340]	; (800c1e0 <__ieee754_sqrt+0x15c>)
 800c08a:	ec55 4b10 	vmov	r4, r5, d0
 800c08e:	43a9      	bics	r1, r5
 800c090:	462b      	mov	r3, r5
 800c092:	462a      	mov	r2, r5
 800c094:	d112      	bne.n	800c0bc <__ieee754_sqrt+0x38>
 800c096:	ee10 2a10 	vmov	r2, s0
 800c09a:	ee10 0a10 	vmov	r0, s0
 800c09e:	4629      	mov	r1, r5
 800c0a0:	f7f4 faaa 	bl	80005f8 <__aeabi_dmul>
 800c0a4:	4602      	mov	r2, r0
 800c0a6:	460b      	mov	r3, r1
 800c0a8:	4620      	mov	r0, r4
 800c0aa:	4629      	mov	r1, r5
 800c0ac:	f7f4 f8ee 	bl	800028c <__adddf3>
 800c0b0:	4604      	mov	r4, r0
 800c0b2:	460d      	mov	r5, r1
 800c0b4:	ec45 4b10 	vmov	d0, r4, r5
 800c0b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0bc:	2d00      	cmp	r5, #0
 800c0be:	ee10 0a10 	vmov	r0, s0
 800c0c2:	4621      	mov	r1, r4
 800c0c4:	dc0f      	bgt.n	800c0e6 <__ieee754_sqrt+0x62>
 800c0c6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c0ca:	4330      	orrs	r0, r6
 800c0cc:	d0f2      	beq.n	800c0b4 <__ieee754_sqrt+0x30>
 800c0ce:	b155      	cbz	r5, 800c0e6 <__ieee754_sqrt+0x62>
 800c0d0:	ee10 2a10 	vmov	r2, s0
 800c0d4:	4620      	mov	r0, r4
 800c0d6:	4629      	mov	r1, r5
 800c0d8:	f7f4 f8d6 	bl	8000288 <__aeabi_dsub>
 800c0dc:	4602      	mov	r2, r0
 800c0de:	460b      	mov	r3, r1
 800c0e0:	f7f4 fbb4 	bl	800084c <__aeabi_ddiv>
 800c0e4:	e7e4      	b.n	800c0b0 <__ieee754_sqrt+0x2c>
 800c0e6:	151b      	asrs	r3, r3, #20
 800c0e8:	d073      	beq.n	800c1d2 <__ieee754_sqrt+0x14e>
 800c0ea:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c0ee:	07dd      	lsls	r5, r3, #31
 800c0f0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800c0f4:	bf48      	it	mi
 800c0f6:	0fc8      	lsrmi	r0, r1, #31
 800c0f8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800c0fc:	bf44      	itt	mi
 800c0fe:	0049      	lslmi	r1, r1, #1
 800c100:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800c104:	2500      	movs	r5, #0
 800c106:	1058      	asrs	r0, r3, #1
 800c108:	0fcb      	lsrs	r3, r1, #31
 800c10a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800c10e:	0049      	lsls	r1, r1, #1
 800c110:	2316      	movs	r3, #22
 800c112:	462c      	mov	r4, r5
 800c114:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800c118:	19a7      	adds	r7, r4, r6
 800c11a:	4297      	cmp	r7, r2
 800c11c:	bfde      	ittt	le
 800c11e:	19bc      	addle	r4, r7, r6
 800c120:	1bd2      	suble	r2, r2, r7
 800c122:	19ad      	addle	r5, r5, r6
 800c124:	0fcf      	lsrs	r7, r1, #31
 800c126:	3b01      	subs	r3, #1
 800c128:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800c12c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c130:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c134:	d1f0      	bne.n	800c118 <__ieee754_sqrt+0x94>
 800c136:	f04f 0c20 	mov.w	ip, #32
 800c13a:	469e      	mov	lr, r3
 800c13c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c140:	42a2      	cmp	r2, r4
 800c142:	eb06 070e 	add.w	r7, r6, lr
 800c146:	dc02      	bgt.n	800c14e <__ieee754_sqrt+0xca>
 800c148:	d112      	bne.n	800c170 <__ieee754_sqrt+0xec>
 800c14a:	428f      	cmp	r7, r1
 800c14c:	d810      	bhi.n	800c170 <__ieee754_sqrt+0xec>
 800c14e:	2f00      	cmp	r7, #0
 800c150:	eb07 0e06 	add.w	lr, r7, r6
 800c154:	da42      	bge.n	800c1dc <__ieee754_sqrt+0x158>
 800c156:	f1be 0f00 	cmp.w	lr, #0
 800c15a:	db3f      	blt.n	800c1dc <__ieee754_sqrt+0x158>
 800c15c:	f104 0801 	add.w	r8, r4, #1
 800c160:	1b12      	subs	r2, r2, r4
 800c162:	428f      	cmp	r7, r1
 800c164:	bf88      	it	hi
 800c166:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800c16a:	1bc9      	subs	r1, r1, r7
 800c16c:	4433      	add	r3, r6
 800c16e:	4644      	mov	r4, r8
 800c170:	0052      	lsls	r2, r2, #1
 800c172:	f1bc 0c01 	subs.w	ip, ip, #1
 800c176:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800c17a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c17e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c182:	d1dd      	bne.n	800c140 <__ieee754_sqrt+0xbc>
 800c184:	430a      	orrs	r2, r1
 800c186:	d006      	beq.n	800c196 <__ieee754_sqrt+0x112>
 800c188:	1c5c      	adds	r4, r3, #1
 800c18a:	bf13      	iteet	ne
 800c18c:	3301      	addne	r3, #1
 800c18e:	3501      	addeq	r5, #1
 800c190:	4663      	moveq	r3, ip
 800c192:	f023 0301 	bicne.w	r3, r3, #1
 800c196:	106a      	asrs	r2, r5, #1
 800c198:	085b      	lsrs	r3, r3, #1
 800c19a:	07e9      	lsls	r1, r5, #31
 800c19c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800c1a0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800c1a4:	bf48      	it	mi
 800c1a6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800c1aa:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800c1ae:	461c      	mov	r4, r3
 800c1b0:	e780      	b.n	800c0b4 <__ieee754_sqrt+0x30>
 800c1b2:	0aca      	lsrs	r2, r1, #11
 800c1b4:	3815      	subs	r0, #21
 800c1b6:	0549      	lsls	r1, r1, #21
 800c1b8:	2a00      	cmp	r2, #0
 800c1ba:	d0fa      	beq.n	800c1b2 <__ieee754_sqrt+0x12e>
 800c1bc:	02d6      	lsls	r6, r2, #11
 800c1be:	d50a      	bpl.n	800c1d6 <__ieee754_sqrt+0x152>
 800c1c0:	f1c3 0420 	rsb	r4, r3, #32
 800c1c4:	fa21 f404 	lsr.w	r4, r1, r4
 800c1c8:	1e5d      	subs	r5, r3, #1
 800c1ca:	4099      	lsls	r1, r3
 800c1cc:	4322      	orrs	r2, r4
 800c1ce:	1b43      	subs	r3, r0, r5
 800c1d0:	e78b      	b.n	800c0ea <__ieee754_sqrt+0x66>
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	e7f0      	b.n	800c1b8 <__ieee754_sqrt+0x134>
 800c1d6:	0052      	lsls	r2, r2, #1
 800c1d8:	3301      	adds	r3, #1
 800c1da:	e7ef      	b.n	800c1bc <__ieee754_sqrt+0x138>
 800c1dc:	46a0      	mov	r8, r4
 800c1de:	e7bf      	b.n	800c160 <__ieee754_sqrt+0xdc>
 800c1e0:	7ff00000 	.word	0x7ff00000
 800c1e4:	00000000 	.word	0x00000000

0800c1e8 <__kernel_cos>:
 800c1e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1ec:	ec59 8b10 	vmov	r8, r9, d0
 800c1f0:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800c1f4:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800c1f8:	ed2d 8b02 	vpush	{d8}
 800c1fc:	eeb0 8a41 	vmov.f32	s16, s2
 800c200:	eef0 8a61 	vmov.f32	s17, s3
 800c204:	da07      	bge.n	800c216 <__kernel_cos+0x2e>
 800c206:	ee10 0a10 	vmov	r0, s0
 800c20a:	4649      	mov	r1, r9
 800c20c:	f7f4 fca4 	bl	8000b58 <__aeabi_d2iz>
 800c210:	2800      	cmp	r0, #0
 800c212:	f000 8089 	beq.w	800c328 <__kernel_cos+0x140>
 800c216:	4642      	mov	r2, r8
 800c218:	464b      	mov	r3, r9
 800c21a:	4640      	mov	r0, r8
 800c21c:	4649      	mov	r1, r9
 800c21e:	f7f4 f9eb 	bl	80005f8 <__aeabi_dmul>
 800c222:	2200      	movs	r2, #0
 800c224:	4b4e      	ldr	r3, [pc, #312]	; (800c360 <__kernel_cos+0x178>)
 800c226:	4604      	mov	r4, r0
 800c228:	460d      	mov	r5, r1
 800c22a:	f7f4 f9e5 	bl	80005f8 <__aeabi_dmul>
 800c22e:	a340      	add	r3, pc, #256	; (adr r3, 800c330 <__kernel_cos+0x148>)
 800c230:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c234:	4682      	mov	sl, r0
 800c236:	468b      	mov	fp, r1
 800c238:	4620      	mov	r0, r4
 800c23a:	4629      	mov	r1, r5
 800c23c:	f7f4 f9dc 	bl	80005f8 <__aeabi_dmul>
 800c240:	a33d      	add	r3, pc, #244	; (adr r3, 800c338 <__kernel_cos+0x150>)
 800c242:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c246:	f7f4 f821 	bl	800028c <__adddf3>
 800c24a:	4622      	mov	r2, r4
 800c24c:	462b      	mov	r3, r5
 800c24e:	f7f4 f9d3 	bl	80005f8 <__aeabi_dmul>
 800c252:	a33b      	add	r3, pc, #236	; (adr r3, 800c340 <__kernel_cos+0x158>)
 800c254:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c258:	f7f4 f816 	bl	8000288 <__aeabi_dsub>
 800c25c:	4622      	mov	r2, r4
 800c25e:	462b      	mov	r3, r5
 800c260:	f7f4 f9ca 	bl	80005f8 <__aeabi_dmul>
 800c264:	a338      	add	r3, pc, #224	; (adr r3, 800c348 <__kernel_cos+0x160>)
 800c266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c26a:	f7f4 f80f 	bl	800028c <__adddf3>
 800c26e:	4622      	mov	r2, r4
 800c270:	462b      	mov	r3, r5
 800c272:	f7f4 f9c1 	bl	80005f8 <__aeabi_dmul>
 800c276:	a336      	add	r3, pc, #216	; (adr r3, 800c350 <__kernel_cos+0x168>)
 800c278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c27c:	f7f4 f804 	bl	8000288 <__aeabi_dsub>
 800c280:	4622      	mov	r2, r4
 800c282:	462b      	mov	r3, r5
 800c284:	f7f4 f9b8 	bl	80005f8 <__aeabi_dmul>
 800c288:	a333      	add	r3, pc, #204	; (adr r3, 800c358 <__kernel_cos+0x170>)
 800c28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c28e:	f7f3 fffd 	bl	800028c <__adddf3>
 800c292:	4622      	mov	r2, r4
 800c294:	462b      	mov	r3, r5
 800c296:	f7f4 f9af 	bl	80005f8 <__aeabi_dmul>
 800c29a:	4622      	mov	r2, r4
 800c29c:	462b      	mov	r3, r5
 800c29e:	f7f4 f9ab 	bl	80005f8 <__aeabi_dmul>
 800c2a2:	ec53 2b18 	vmov	r2, r3, d8
 800c2a6:	4604      	mov	r4, r0
 800c2a8:	460d      	mov	r5, r1
 800c2aa:	4640      	mov	r0, r8
 800c2ac:	4649      	mov	r1, r9
 800c2ae:	f7f4 f9a3 	bl	80005f8 <__aeabi_dmul>
 800c2b2:	460b      	mov	r3, r1
 800c2b4:	4602      	mov	r2, r0
 800c2b6:	4629      	mov	r1, r5
 800c2b8:	4620      	mov	r0, r4
 800c2ba:	f7f3 ffe5 	bl	8000288 <__aeabi_dsub>
 800c2be:	4b29      	ldr	r3, [pc, #164]	; (800c364 <__kernel_cos+0x17c>)
 800c2c0:	429e      	cmp	r6, r3
 800c2c2:	4680      	mov	r8, r0
 800c2c4:	4689      	mov	r9, r1
 800c2c6:	dc11      	bgt.n	800c2ec <__kernel_cos+0x104>
 800c2c8:	4602      	mov	r2, r0
 800c2ca:	460b      	mov	r3, r1
 800c2cc:	4650      	mov	r0, sl
 800c2ce:	4659      	mov	r1, fp
 800c2d0:	f7f3 ffda 	bl	8000288 <__aeabi_dsub>
 800c2d4:	460b      	mov	r3, r1
 800c2d6:	4924      	ldr	r1, [pc, #144]	; (800c368 <__kernel_cos+0x180>)
 800c2d8:	4602      	mov	r2, r0
 800c2da:	2000      	movs	r0, #0
 800c2dc:	f7f3 ffd4 	bl	8000288 <__aeabi_dsub>
 800c2e0:	ecbd 8b02 	vpop	{d8}
 800c2e4:	ec41 0b10 	vmov	d0, r0, r1
 800c2e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2ec:	4b1f      	ldr	r3, [pc, #124]	; (800c36c <__kernel_cos+0x184>)
 800c2ee:	491e      	ldr	r1, [pc, #120]	; (800c368 <__kernel_cos+0x180>)
 800c2f0:	429e      	cmp	r6, r3
 800c2f2:	bfcc      	ite	gt
 800c2f4:	4d1e      	ldrgt	r5, [pc, #120]	; (800c370 <__kernel_cos+0x188>)
 800c2f6:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800c2fa:	2400      	movs	r4, #0
 800c2fc:	4622      	mov	r2, r4
 800c2fe:	462b      	mov	r3, r5
 800c300:	2000      	movs	r0, #0
 800c302:	f7f3 ffc1 	bl	8000288 <__aeabi_dsub>
 800c306:	4622      	mov	r2, r4
 800c308:	4606      	mov	r6, r0
 800c30a:	460f      	mov	r7, r1
 800c30c:	462b      	mov	r3, r5
 800c30e:	4650      	mov	r0, sl
 800c310:	4659      	mov	r1, fp
 800c312:	f7f3 ffb9 	bl	8000288 <__aeabi_dsub>
 800c316:	4642      	mov	r2, r8
 800c318:	464b      	mov	r3, r9
 800c31a:	f7f3 ffb5 	bl	8000288 <__aeabi_dsub>
 800c31e:	4602      	mov	r2, r0
 800c320:	460b      	mov	r3, r1
 800c322:	4630      	mov	r0, r6
 800c324:	4639      	mov	r1, r7
 800c326:	e7d9      	b.n	800c2dc <__kernel_cos+0xf4>
 800c328:	2000      	movs	r0, #0
 800c32a:	490f      	ldr	r1, [pc, #60]	; (800c368 <__kernel_cos+0x180>)
 800c32c:	e7d8      	b.n	800c2e0 <__kernel_cos+0xf8>
 800c32e:	bf00      	nop
 800c330:	be8838d4 	.word	0xbe8838d4
 800c334:	bda8fae9 	.word	0xbda8fae9
 800c338:	bdb4b1c4 	.word	0xbdb4b1c4
 800c33c:	3e21ee9e 	.word	0x3e21ee9e
 800c340:	809c52ad 	.word	0x809c52ad
 800c344:	3e927e4f 	.word	0x3e927e4f
 800c348:	19cb1590 	.word	0x19cb1590
 800c34c:	3efa01a0 	.word	0x3efa01a0
 800c350:	16c15177 	.word	0x16c15177
 800c354:	3f56c16c 	.word	0x3f56c16c
 800c358:	5555554c 	.word	0x5555554c
 800c35c:	3fa55555 	.word	0x3fa55555
 800c360:	3fe00000 	.word	0x3fe00000
 800c364:	3fd33332 	.word	0x3fd33332
 800c368:	3ff00000 	.word	0x3ff00000
 800c36c:	3fe90000 	.word	0x3fe90000
 800c370:	3fd20000 	.word	0x3fd20000
 800c374:	00000000 	.word	0x00000000

0800c378 <__kernel_rem_pio2>:
 800c378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c37c:	ed2d 8b02 	vpush	{d8}
 800c380:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800c384:	1ed4      	subs	r4, r2, #3
 800c386:	9308      	str	r3, [sp, #32]
 800c388:	9101      	str	r1, [sp, #4]
 800c38a:	4bc5      	ldr	r3, [pc, #788]	; (800c6a0 <__kernel_rem_pio2+0x328>)
 800c38c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800c38e:	9009      	str	r0, [sp, #36]	; 0x24
 800c390:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c394:	9304      	str	r3, [sp, #16]
 800c396:	9b08      	ldr	r3, [sp, #32]
 800c398:	3b01      	subs	r3, #1
 800c39a:	9307      	str	r3, [sp, #28]
 800c39c:	2318      	movs	r3, #24
 800c39e:	fb94 f4f3 	sdiv	r4, r4, r3
 800c3a2:	f06f 0317 	mvn.w	r3, #23
 800c3a6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800c3aa:	fb04 3303 	mla	r3, r4, r3, r3
 800c3ae:	eb03 0a02 	add.w	sl, r3, r2
 800c3b2:	9b04      	ldr	r3, [sp, #16]
 800c3b4:	9a07      	ldr	r2, [sp, #28]
 800c3b6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800c690 <__kernel_rem_pio2+0x318>
 800c3ba:	eb03 0802 	add.w	r8, r3, r2
 800c3be:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800c3c0:	1aa7      	subs	r7, r4, r2
 800c3c2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c3c6:	ae22      	add	r6, sp, #136	; 0x88
 800c3c8:	2500      	movs	r5, #0
 800c3ca:	4545      	cmp	r5, r8
 800c3cc:	dd13      	ble.n	800c3f6 <__kernel_rem_pio2+0x7e>
 800c3ce:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800c690 <__kernel_rem_pio2+0x318>
 800c3d2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800c3d6:	2600      	movs	r6, #0
 800c3d8:	9b04      	ldr	r3, [sp, #16]
 800c3da:	429e      	cmp	r6, r3
 800c3dc:	dc32      	bgt.n	800c444 <__kernel_rem_pio2+0xcc>
 800c3de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3e0:	9302      	str	r3, [sp, #8]
 800c3e2:	9b08      	ldr	r3, [sp, #32]
 800c3e4:	199d      	adds	r5, r3, r6
 800c3e6:	ab22      	add	r3, sp, #136	; 0x88
 800c3e8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c3ec:	9306      	str	r3, [sp, #24]
 800c3ee:	ec59 8b18 	vmov	r8, r9, d8
 800c3f2:	2700      	movs	r7, #0
 800c3f4:	e01f      	b.n	800c436 <__kernel_rem_pio2+0xbe>
 800c3f6:	42ef      	cmn	r7, r5
 800c3f8:	d407      	bmi.n	800c40a <__kernel_rem_pio2+0x92>
 800c3fa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c3fe:	f7f4 f891 	bl	8000524 <__aeabi_i2d>
 800c402:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c406:	3501      	adds	r5, #1
 800c408:	e7df      	b.n	800c3ca <__kernel_rem_pio2+0x52>
 800c40a:	ec51 0b18 	vmov	r0, r1, d8
 800c40e:	e7f8      	b.n	800c402 <__kernel_rem_pio2+0x8a>
 800c410:	9906      	ldr	r1, [sp, #24]
 800c412:	9d02      	ldr	r5, [sp, #8]
 800c414:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800c418:	9106      	str	r1, [sp, #24]
 800c41a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800c41e:	9502      	str	r5, [sp, #8]
 800c420:	f7f4 f8ea 	bl	80005f8 <__aeabi_dmul>
 800c424:	4602      	mov	r2, r0
 800c426:	460b      	mov	r3, r1
 800c428:	4640      	mov	r0, r8
 800c42a:	4649      	mov	r1, r9
 800c42c:	f7f3 ff2e 	bl	800028c <__adddf3>
 800c430:	3701      	adds	r7, #1
 800c432:	4680      	mov	r8, r0
 800c434:	4689      	mov	r9, r1
 800c436:	9b07      	ldr	r3, [sp, #28]
 800c438:	429f      	cmp	r7, r3
 800c43a:	dde9      	ble.n	800c410 <__kernel_rem_pio2+0x98>
 800c43c:	e8eb 8902 	strd	r8, r9, [fp], #8
 800c440:	3601      	adds	r6, #1
 800c442:	e7c9      	b.n	800c3d8 <__kernel_rem_pio2+0x60>
 800c444:	9b04      	ldr	r3, [sp, #16]
 800c446:	aa0e      	add	r2, sp, #56	; 0x38
 800c448:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c44c:	930c      	str	r3, [sp, #48]	; 0x30
 800c44e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800c450:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c454:	9c04      	ldr	r4, [sp, #16]
 800c456:	930b      	str	r3, [sp, #44]	; 0x2c
 800c458:	ab9a      	add	r3, sp, #616	; 0x268
 800c45a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800c45e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c462:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c466:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800c46a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800c46e:	ab9a      	add	r3, sp, #616	; 0x268
 800c470:	445b      	add	r3, fp
 800c472:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800c476:	2500      	movs	r5, #0
 800c478:	1b63      	subs	r3, r4, r5
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	dc78      	bgt.n	800c570 <__kernel_rem_pio2+0x1f8>
 800c47e:	4650      	mov	r0, sl
 800c480:	ec49 8b10 	vmov	d0, r8, r9
 800c484:	f000 fc04 	bl	800cc90 <scalbn>
 800c488:	ec57 6b10 	vmov	r6, r7, d0
 800c48c:	2200      	movs	r2, #0
 800c48e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800c492:	ee10 0a10 	vmov	r0, s0
 800c496:	4639      	mov	r1, r7
 800c498:	f7f4 f8ae 	bl	80005f8 <__aeabi_dmul>
 800c49c:	ec41 0b10 	vmov	d0, r0, r1
 800c4a0:	f000 fb6e 	bl	800cb80 <floor>
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	ec51 0b10 	vmov	r0, r1, d0
 800c4aa:	4b7e      	ldr	r3, [pc, #504]	; (800c6a4 <__kernel_rem_pio2+0x32c>)
 800c4ac:	f7f4 f8a4 	bl	80005f8 <__aeabi_dmul>
 800c4b0:	4602      	mov	r2, r0
 800c4b2:	460b      	mov	r3, r1
 800c4b4:	4630      	mov	r0, r6
 800c4b6:	4639      	mov	r1, r7
 800c4b8:	f7f3 fee6 	bl	8000288 <__aeabi_dsub>
 800c4bc:	460f      	mov	r7, r1
 800c4be:	4606      	mov	r6, r0
 800c4c0:	f7f4 fb4a 	bl	8000b58 <__aeabi_d2iz>
 800c4c4:	9006      	str	r0, [sp, #24]
 800c4c6:	f7f4 f82d 	bl	8000524 <__aeabi_i2d>
 800c4ca:	4602      	mov	r2, r0
 800c4cc:	460b      	mov	r3, r1
 800c4ce:	4630      	mov	r0, r6
 800c4d0:	4639      	mov	r1, r7
 800c4d2:	f7f3 fed9 	bl	8000288 <__aeabi_dsub>
 800c4d6:	f1ba 0f00 	cmp.w	sl, #0
 800c4da:	4606      	mov	r6, r0
 800c4dc:	460f      	mov	r7, r1
 800c4de:	dd6c      	ble.n	800c5ba <__kernel_rem_pio2+0x242>
 800c4e0:	1e62      	subs	r2, r4, #1
 800c4e2:	ab0e      	add	r3, sp, #56	; 0x38
 800c4e4:	f1ca 0118 	rsb	r1, sl, #24
 800c4e8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c4ec:	9d06      	ldr	r5, [sp, #24]
 800c4ee:	fa40 f301 	asr.w	r3, r0, r1
 800c4f2:	441d      	add	r5, r3
 800c4f4:	408b      	lsls	r3, r1
 800c4f6:	1ac0      	subs	r0, r0, r3
 800c4f8:	ab0e      	add	r3, sp, #56	; 0x38
 800c4fa:	9506      	str	r5, [sp, #24]
 800c4fc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800c500:	f1ca 0317 	rsb	r3, sl, #23
 800c504:	fa40 f303 	asr.w	r3, r0, r3
 800c508:	9302      	str	r3, [sp, #8]
 800c50a:	9b02      	ldr	r3, [sp, #8]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	dd62      	ble.n	800c5d6 <__kernel_rem_pio2+0x25e>
 800c510:	9b06      	ldr	r3, [sp, #24]
 800c512:	2200      	movs	r2, #0
 800c514:	3301      	adds	r3, #1
 800c516:	9306      	str	r3, [sp, #24]
 800c518:	4615      	mov	r5, r2
 800c51a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800c51e:	4294      	cmp	r4, r2
 800c520:	f300 8095 	bgt.w	800c64e <__kernel_rem_pio2+0x2d6>
 800c524:	f1ba 0f00 	cmp.w	sl, #0
 800c528:	dd07      	ble.n	800c53a <__kernel_rem_pio2+0x1c2>
 800c52a:	f1ba 0f01 	cmp.w	sl, #1
 800c52e:	f000 80a2 	beq.w	800c676 <__kernel_rem_pio2+0x2fe>
 800c532:	f1ba 0f02 	cmp.w	sl, #2
 800c536:	f000 80c1 	beq.w	800c6bc <__kernel_rem_pio2+0x344>
 800c53a:	9b02      	ldr	r3, [sp, #8]
 800c53c:	2b02      	cmp	r3, #2
 800c53e:	d14a      	bne.n	800c5d6 <__kernel_rem_pio2+0x25e>
 800c540:	4632      	mov	r2, r6
 800c542:	463b      	mov	r3, r7
 800c544:	2000      	movs	r0, #0
 800c546:	4958      	ldr	r1, [pc, #352]	; (800c6a8 <__kernel_rem_pio2+0x330>)
 800c548:	f7f3 fe9e 	bl	8000288 <__aeabi_dsub>
 800c54c:	4606      	mov	r6, r0
 800c54e:	460f      	mov	r7, r1
 800c550:	2d00      	cmp	r5, #0
 800c552:	d040      	beq.n	800c5d6 <__kernel_rem_pio2+0x25e>
 800c554:	4650      	mov	r0, sl
 800c556:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800c698 <__kernel_rem_pio2+0x320>
 800c55a:	f000 fb99 	bl	800cc90 <scalbn>
 800c55e:	4630      	mov	r0, r6
 800c560:	4639      	mov	r1, r7
 800c562:	ec53 2b10 	vmov	r2, r3, d0
 800c566:	f7f3 fe8f 	bl	8000288 <__aeabi_dsub>
 800c56a:	4606      	mov	r6, r0
 800c56c:	460f      	mov	r7, r1
 800c56e:	e032      	b.n	800c5d6 <__kernel_rem_pio2+0x25e>
 800c570:	2200      	movs	r2, #0
 800c572:	4b4e      	ldr	r3, [pc, #312]	; (800c6ac <__kernel_rem_pio2+0x334>)
 800c574:	4640      	mov	r0, r8
 800c576:	4649      	mov	r1, r9
 800c578:	f7f4 f83e 	bl	80005f8 <__aeabi_dmul>
 800c57c:	f7f4 faec 	bl	8000b58 <__aeabi_d2iz>
 800c580:	f7f3 ffd0 	bl	8000524 <__aeabi_i2d>
 800c584:	2200      	movs	r2, #0
 800c586:	4b4a      	ldr	r3, [pc, #296]	; (800c6b0 <__kernel_rem_pio2+0x338>)
 800c588:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c58c:	f7f4 f834 	bl	80005f8 <__aeabi_dmul>
 800c590:	4602      	mov	r2, r0
 800c592:	460b      	mov	r3, r1
 800c594:	4640      	mov	r0, r8
 800c596:	4649      	mov	r1, r9
 800c598:	f7f3 fe76 	bl	8000288 <__aeabi_dsub>
 800c59c:	f7f4 fadc 	bl	8000b58 <__aeabi_d2iz>
 800c5a0:	ab0e      	add	r3, sp, #56	; 0x38
 800c5a2:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800c5a6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800c5aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c5ae:	f7f3 fe6d 	bl	800028c <__adddf3>
 800c5b2:	3501      	adds	r5, #1
 800c5b4:	4680      	mov	r8, r0
 800c5b6:	4689      	mov	r9, r1
 800c5b8:	e75e      	b.n	800c478 <__kernel_rem_pio2+0x100>
 800c5ba:	d105      	bne.n	800c5c8 <__kernel_rem_pio2+0x250>
 800c5bc:	1e63      	subs	r3, r4, #1
 800c5be:	aa0e      	add	r2, sp, #56	; 0x38
 800c5c0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c5c4:	15c3      	asrs	r3, r0, #23
 800c5c6:	e79f      	b.n	800c508 <__kernel_rem_pio2+0x190>
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	4b3a      	ldr	r3, [pc, #232]	; (800c6b4 <__kernel_rem_pio2+0x33c>)
 800c5cc:	f7f4 fa9a 	bl	8000b04 <__aeabi_dcmpge>
 800c5d0:	2800      	cmp	r0, #0
 800c5d2:	d139      	bne.n	800c648 <__kernel_rem_pio2+0x2d0>
 800c5d4:	9002      	str	r0, [sp, #8]
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	2300      	movs	r3, #0
 800c5da:	4630      	mov	r0, r6
 800c5dc:	4639      	mov	r1, r7
 800c5de:	f7f4 fa73 	bl	8000ac8 <__aeabi_dcmpeq>
 800c5e2:	2800      	cmp	r0, #0
 800c5e4:	f000 80c7 	beq.w	800c776 <__kernel_rem_pio2+0x3fe>
 800c5e8:	1e65      	subs	r5, r4, #1
 800c5ea:	462b      	mov	r3, r5
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	9904      	ldr	r1, [sp, #16]
 800c5f0:	428b      	cmp	r3, r1
 800c5f2:	da6a      	bge.n	800c6ca <__kernel_rem_pio2+0x352>
 800c5f4:	2a00      	cmp	r2, #0
 800c5f6:	f000 8088 	beq.w	800c70a <__kernel_rem_pio2+0x392>
 800c5fa:	ab0e      	add	r3, sp, #56	; 0x38
 800c5fc:	f1aa 0a18 	sub.w	sl, sl, #24
 800c600:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800c604:	2b00      	cmp	r3, #0
 800c606:	f000 80b4 	beq.w	800c772 <__kernel_rem_pio2+0x3fa>
 800c60a:	4650      	mov	r0, sl
 800c60c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800c698 <__kernel_rem_pio2+0x320>
 800c610:	f000 fb3e 	bl	800cc90 <scalbn>
 800c614:	00ec      	lsls	r4, r5, #3
 800c616:	ab72      	add	r3, sp, #456	; 0x1c8
 800c618:	191e      	adds	r6, r3, r4
 800c61a:	ec59 8b10 	vmov	r8, r9, d0
 800c61e:	f106 0a08 	add.w	sl, r6, #8
 800c622:	462f      	mov	r7, r5
 800c624:	2f00      	cmp	r7, #0
 800c626:	f280 80df 	bge.w	800c7e8 <__kernel_rem_pio2+0x470>
 800c62a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800c690 <__kernel_rem_pio2+0x318>
 800c62e:	f04f 0a00 	mov.w	sl, #0
 800c632:	eba5 030a 	sub.w	r3, r5, sl
 800c636:	2b00      	cmp	r3, #0
 800c638:	f2c0 810a 	blt.w	800c850 <__kernel_rem_pio2+0x4d8>
 800c63c:	f8df b078 	ldr.w	fp, [pc, #120]	; 800c6b8 <__kernel_rem_pio2+0x340>
 800c640:	ec59 8b18 	vmov	r8, r9, d8
 800c644:	2700      	movs	r7, #0
 800c646:	e0f5      	b.n	800c834 <__kernel_rem_pio2+0x4bc>
 800c648:	2302      	movs	r3, #2
 800c64a:	9302      	str	r3, [sp, #8]
 800c64c:	e760      	b.n	800c510 <__kernel_rem_pio2+0x198>
 800c64e:	ab0e      	add	r3, sp, #56	; 0x38
 800c650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c654:	b94d      	cbnz	r5, 800c66a <__kernel_rem_pio2+0x2f2>
 800c656:	b12b      	cbz	r3, 800c664 <__kernel_rem_pio2+0x2ec>
 800c658:	a80e      	add	r0, sp, #56	; 0x38
 800c65a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800c65e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800c662:	2301      	movs	r3, #1
 800c664:	3201      	adds	r2, #1
 800c666:	461d      	mov	r5, r3
 800c668:	e759      	b.n	800c51e <__kernel_rem_pio2+0x1a6>
 800c66a:	a80e      	add	r0, sp, #56	; 0x38
 800c66c:	1acb      	subs	r3, r1, r3
 800c66e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800c672:	462b      	mov	r3, r5
 800c674:	e7f6      	b.n	800c664 <__kernel_rem_pio2+0x2ec>
 800c676:	1e62      	subs	r2, r4, #1
 800c678:	ab0e      	add	r3, sp, #56	; 0x38
 800c67a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c67e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c682:	a90e      	add	r1, sp, #56	; 0x38
 800c684:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c688:	e757      	b.n	800c53a <__kernel_rem_pio2+0x1c2>
 800c68a:	bf00      	nop
 800c68c:	f3af 8000 	nop.w
	...
 800c69c:	3ff00000 	.word	0x3ff00000
 800c6a0:	0800d340 	.word	0x0800d340
 800c6a4:	40200000 	.word	0x40200000
 800c6a8:	3ff00000 	.word	0x3ff00000
 800c6ac:	3e700000 	.word	0x3e700000
 800c6b0:	41700000 	.word	0x41700000
 800c6b4:	3fe00000 	.word	0x3fe00000
 800c6b8:	0800d300 	.word	0x0800d300
 800c6bc:	1e62      	subs	r2, r4, #1
 800c6be:	ab0e      	add	r3, sp, #56	; 0x38
 800c6c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6c4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c6c8:	e7db      	b.n	800c682 <__kernel_rem_pio2+0x30a>
 800c6ca:	a90e      	add	r1, sp, #56	; 0x38
 800c6cc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c6d0:	3b01      	subs	r3, #1
 800c6d2:	430a      	orrs	r2, r1
 800c6d4:	e78b      	b.n	800c5ee <__kernel_rem_pio2+0x276>
 800c6d6:	3301      	adds	r3, #1
 800c6d8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800c6dc:	2900      	cmp	r1, #0
 800c6de:	d0fa      	beq.n	800c6d6 <__kernel_rem_pio2+0x35e>
 800c6e0:	9a08      	ldr	r2, [sp, #32]
 800c6e2:	4422      	add	r2, r4
 800c6e4:	00d2      	lsls	r2, r2, #3
 800c6e6:	a922      	add	r1, sp, #136	; 0x88
 800c6e8:	18e3      	adds	r3, r4, r3
 800c6ea:	9206      	str	r2, [sp, #24]
 800c6ec:	440a      	add	r2, r1
 800c6ee:	9302      	str	r3, [sp, #8]
 800c6f0:	f10b 0108 	add.w	r1, fp, #8
 800c6f4:	f102 0308 	add.w	r3, r2, #8
 800c6f8:	1c66      	adds	r6, r4, #1
 800c6fa:	910a      	str	r1, [sp, #40]	; 0x28
 800c6fc:	2500      	movs	r5, #0
 800c6fe:	930d      	str	r3, [sp, #52]	; 0x34
 800c700:	9b02      	ldr	r3, [sp, #8]
 800c702:	42b3      	cmp	r3, r6
 800c704:	da04      	bge.n	800c710 <__kernel_rem_pio2+0x398>
 800c706:	461c      	mov	r4, r3
 800c708:	e6a6      	b.n	800c458 <__kernel_rem_pio2+0xe0>
 800c70a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c70c:	2301      	movs	r3, #1
 800c70e:	e7e3      	b.n	800c6d8 <__kernel_rem_pio2+0x360>
 800c710:	9b06      	ldr	r3, [sp, #24]
 800c712:	18ef      	adds	r7, r5, r3
 800c714:	ab22      	add	r3, sp, #136	; 0x88
 800c716:	441f      	add	r7, r3
 800c718:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c71a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c71e:	f7f3 ff01 	bl	8000524 <__aeabi_i2d>
 800c722:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c724:	461c      	mov	r4, r3
 800c726:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c728:	e9c7 0100 	strd	r0, r1, [r7]
 800c72c:	eb03 0b05 	add.w	fp, r3, r5
 800c730:	2700      	movs	r7, #0
 800c732:	f04f 0800 	mov.w	r8, #0
 800c736:	f04f 0900 	mov.w	r9, #0
 800c73a:	9b07      	ldr	r3, [sp, #28]
 800c73c:	429f      	cmp	r7, r3
 800c73e:	dd08      	ble.n	800c752 <__kernel_rem_pio2+0x3da>
 800c740:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c742:	aa72      	add	r2, sp, #456	; 0x1c8
 800c744:	18eb      	adds	r3, r5, r3
 800c746:	4413      	add	r3, r2
 800c748:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800c74c:	3601      	adds	r6, #1
 800c74e:	3508      	adds	r5, #8
 800c750:	e7d6      	b.n	800c700 <__kernel_rem_pio2+0x388>
 800c752:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800c756:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800c75a:	f7f3 ff4d 	bl	80005f8 <__aeabi_dmul>
 800c75e:	4602      	mov	r2, r0
 800c760:	460b      	mov	r3, r1
 800c762:	4640      	mov	r0, r8
 800c764:	4649      	mov	r1, r9
 800c766:	f7f3 fd91 	bl	800028c <__adddf3>
 800c76a:	3701      	adds	r7, #1
 800c76c:	4680      	mov	r8, r0
 800c76e:	4689      	mov	r9, r1
 800c770:	e7e3      	b.n	800c73a <__kernel_rem_pio2+0x3c2>
 800c772:	3d01      	subs	r5, #1
 800c774:	e741      	b.n	800c5fa <__kernel_rem_pio2+0x282>
 800c776:	f1ca 0000 	rsb	r0, sl, #0
 800c77a:	ec47 6b10 	vmov	d0, r6, r7
 800c77e:	f000 fa87 	bl	800cc90 <scalbn>
 800c782:	ec57 6b10 	vmov	r6, r7, d0
 800c786:	2200      	movs	r2, #0
 800c788:	4b99      	ldr	r3, [pc, #612]	; (800c9f0 <__kernel_rem_pio2+0x678>)
 800c78a:	ee10 0a10 	vmov	r0, s0
 800c78e:	4639      	mov	r1, r7
 800c790:	f7f4 f9b8 	bl	8000b04 <__aeabi_dcmpge>
 800c794:	b1f8      	cbz	r0, 800c7d6 <__kernel_rem_pio2+0x45e>
 800c796:	2200      	movs	r2, #0
 800c798:	4b96      	ldr	r3, [pc, #600]	; (800c9f4 <__kernel_rem_pio2+0x67c>)
 800c79a:	4630      	mov	r0, r6
 800c79c:	4639      	mov	r1, r7
 800c79e:	f7f3 ff2b 	bl	80005f8 <__aeabi_dmul>
 800c7a2:	f7f4 f9d9 	bl	8000b58 <__aeabi_d2iz>
 800c7a6:	4680      	mov	r8, r0
 800c7a8:	f7f3 febc 	bl	8000524 <__aeabi_i2d>
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	4b90      	ldr	r3, [pc, #576]	; (800c9f0 <__kernel_rem_pio2+0x678>)
 800c7b0:	f7f3 ff22 	bl	80005f8 <__aeabi_dmul>
 800c7b4:	460b      	mov	r3, r1
 800c7b6:	4602      	mov	r2, r0
 800c7b8:	4639      	mov	r1, r7
 800c7ba:	4630      	mov	r0, r6
 800c7bc:	f7f3 fd64 	bl	8000288 <__aeabi_dsub>
 800c7c0:	f7f4 f9ca 	bl	8000b58 <__aeabi_d2iz>
 800c7c4:	1c65      	adds	r5, r4, #1
 800c7c6:	ab0e      	add	r3, sp, #56	; 0x38
 800c7c8:	f10a 0a18 	add.w	sl, sl, #24
 800c7cc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c7d0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800c7d4:	e719      	b.n	800c60a <__kernel_rem_pio2+0x292>
 800c7d6:	4630      	mov	r0, r6
 800c7d8:	4639      	mov	r1, r7
 800c7da:	f7f4 f9bd 	bl	8000b58 <__aeabi_d2iz>
 800c7de:	ab0e      	add	r3, sp, #56	; 0x38
 800c7e0:	4625      	mov	r5, r4
 800c7e2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c7e6:	e710      	b.n	800c60a <__kernel_rem_pio2+0x292>
 800c7e8:	ab0e      	add	r3, sp, #56	; 0x38
 800c7ea:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800c7ee:	f7f3 fe99 	bl	8000524 <__aeabi_i2d>
 800c7f2:	4642      	mov	r2, r8
 800c7f4:	464b      	mov	r3, r9
 800c7f6:	f7f3 feff 	bl	80005f8 <__aeabi_dmul>
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800c800:	4b7c      	ldr	r3, [pc, #496]	; (800c9f4 <__kernel_rem_pio2+0x67c>)
 800c802:	4640      	mov	r0, r8
 800c804:	4649      	mov	r1, r9
 800c806:	f7f3 fef7 	bl	80005f8 <__aeabi_dmul>
 800c80a:	3f01      	subs	r7, #1
 800c80c:	4680      	mov	r8, r0
 800c80e:	4689      	mov	r9, r1
 800c810:	e708      	b.n	800c624 <__kernel_rem_pio2+0x2ac>
 800c812:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800c816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c81a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800c81e:	f7f3 feeb 	bl	80005f8 <__aeabi_dmul>
 800c822:	4602      	mov	r2, r0
 800c824:	460b      	mov	r3, r1
 800c826:	4640      	mov	r0, r8
 800c828:	4649      	mov	r1, r9
 800c82a:	f7f3 fd2f 	bl	800028c <__adddf3>
 800c82e:	3701      	adds	r7, #1
 800c830:	4680      	mov	r8, r0
 800c832:	4689      	mov	r9, r1
 800c834:	9b04      	ldr	r3, [sp, #16]
 800c836:	429f      	cmp	r7, r3
 800c838:	dc01      	bgt.n	800c83e <__kernel_rem_pio2+0x4c6>
 800c83a:	45ba      	cmp	sl, r7
 800c83c:	dae9      	bge.n	800c812 <__kernel_rem_pio2+0x49a>
 800c83e:	ab4a      	add	r3, sp, #296	; 0x128
 800c840:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c844:	e9c3 8900 	strd	r8, r9, [r3]
 800c848:	f10a 0a01 	add.w	sl, sl, #1
 800c84c:	3e08      	subs	r6, #8
 800c84e:	e6f0      	b.n	800c632 <__kernel_rem_pio2+0x2ba>
 800c850:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800c852:	2b03      	cmp	r3, #3
 800c854:	d85b      	bhi.n	800c90e <__kernel_rem_pio2+0x596>
 800c856:	e8df f003 	tbb	[pc, r3]
 800c85a:	264a      	.short	0x264a
 800c85c:	0226      	.short	0x0226
 800c85e:	ab9a      	add	r3, sp, #616	; 0x268
 800c860:	441c      	add	r4, r3
 800c862:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800c866:	46a2      	mov	sl, r4
 800c868:	46ab      	mov	fp, r5
 800c86a:	f1bb 0f00 	cmp.w	fp, #0
 800c86e:	dc6c      	bgt.n	800c94a <__kernel_rem_pio2+0x5d2>
 800c870:	46a2      	mov	sl, r4
 800c872:	46ab      	mov	fp, r5
 800c874:	f1bb 0f01 	cmp.w	fp, #1
 800c878:	f300 8086 	bgt.w	800c988 <__kernel_rem_pio2+0x610>
 800c87c:	2000      	movs	r0, #0
 800c87e:	2100      	movs	r1, #0
 800c880:	2d01      	cmp	r5, #1
 800c882:	f300 80a0 	bgt.w	800c9c6 <__kernel_rem_pio2+0x64e>
 800c886:	9b02      	ldr	r3, [sp, #8]
 800c888:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800c88c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800c890:	2b00      	cmp	r3, #0
 800c892:	f040 809e 	bne.w	800c9d2 <__kernel_rem_pio2+0x65a>
 800c896:	9b01      	ldr	r3, [sp, #4]
 800c898:	e9c3 7800 	strd	r7, r8, [r3]
 800c89c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800c8a0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c8a4:	e033      	b.n	800c90e <__kernel_rem_pio2+0x596>
 800c8a6:	3408      	adds	r4, #8
 800c8a8:	ab4a      	add	r3, sp, #296	; 0x128
 800c8aa:	441c      	add	r4, r3
 800c8ac:	462e      	mov	r6, r5
 800c8ae:	2000      	movs	r0, #0
 800c8b0:	2100      	movs	r1, #0
 800c8b2:	2e00      	cmp	r6, #0
 800c8b4:	da3a      	bge.n	800c92c <__kernel_rem_pio2+0x5b4>
 800c8b6:	9b02      	ldr	r3, [sp, #8]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d03d      	beq.n	800c938 <__kernel_rem_pio2+0x5c0>
 800c8bc:	4602      	mov	r2, r0
 800c8be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c8c2:	9c01      	ldr	r4, [sp, #4]
 800c8c4:	e9c4 2300 	strd	r2, r3, [r4]
 800c8c8:	4602      	mov	r2, r0
 800c8ca:	460b      	mov	r3, r1
 800c8cc:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800c8d0:	f7f3 fcda 	bl	8000288 <__aeabi_dsub>
 800c8d4:	ae4c      	add	r6, sp, #304	; 0x130
 800c8d6:	2401      	movs	r4, #1
 800c8d8:	42a5      	cmp	r5, r4
 800c8da:	da30      	bge.n	800c93e <__kernel_rem_pio2+0x5c6>
 800c8dc:	9b02      	ldr	r3, [sp, #8]
 800c8de:	b113      	cbz	r3, 800c8e6 <__kernel_rem_pio2+0x56e>
 800c8e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c8e4:	4619      	mov	r1, r3
 800c8e6:	9b01      	ldr	r3, [sp, #4]
 800c8e8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c8ec:	e00f      	b.n	800c90e <__kernel_rem_pio2+0x596>
 800c8ee:	ab9a      	add	r3, sp, #616	; 0x268
 800c8f0:	441c      	add	r4, r3
 800c8f2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800c8f6:	2000      	movs	r0, #0
 800c8f8:	2100      	movs	r1, #0
 800c8fa:	2d00      	cmp	r5, #0
 800c8fc:	da10      	bge.n	800c920 <__kernel_rem_pio2+0x5a8>
 800c8fe:	9b02      	ldr	r3, [sp, #8]
 800c900:	b113      	cbz	r3, 800c908 <__kernel_rem_pio2+0x590>
 800c902:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c906:	4619      	mov	r1, r3
 800c908:	9b01      	ldr	r3, [sp, #4]
 800c90a:	e9c3 0100 	strd	r0, r1, [r3]
 800c90e:	9b06      	ldr	r3, [sp, #24]
 800c910:	f003 0007 	and.w	r0, r3, #7
 800c914:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800c918:	ecbd 8b02 	vpop	{d8}
 800c91c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c920:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c924:	f7f3 fcb2 	bl	800028c <__adddf3>
 800c928:	3d01      	subs	r5, #1
 800c92a:	e7e6      	b.n	800c8fa <__kernel_rem_pio2+0x582>
 800c92c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c930:	f7f3 fcac 	bl	800028c <__adddf3>
 800c934:	3e01      	subs	r6, #1
 800c936:	e7bc      	b.n	800c8b2 <__kernel_rem_pio2+0x53a>
 800c938:	4602      	mov	r2, r0
 800c93a:	460b      	mov	r3, r1
 800c93c:	e7c1      	b.n	800c8c2 <__kernel_rem_pio2+0x54a>
 800c93e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800c942:	f7f3 fca3 	bl	800028c <__adddf3>
 800c946:	3401      	adds	r4, #1
 800c948:	e7c6      	b.n	800c8d8 <__kernel_rem_pio2+0x560>
 800c94a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800c94e:	ed3a 7b02 	vldmdb	sl!, {d7}
 800c952:	4640      	mov	r0, r8
 800c954:	ec53 2b17 	vmov	r2, r3, d7
 800c958:	4649      	mov	r1, r9
 800c95a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c95e:	f7f3 fc95 	bl	800028c <__adddf3>
 800c962:	4602      	mov	r2, r0
 800c964:	460b      	mov	r3, r1
 800c966:	4606      	mov	r6, r0
 800c968:	460f      	mov	r7, r1
 800c96a:	4640      	mov	r0, r8
 800c96c:	4649      	mov	r1, r9
 800c96e:	f7f3 fc8b 	bl	8000288 <__aeabi_dsub>
 800c972:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c976:	f7f3 fc89 	bl	800028c <__adddf3>
 800c97a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c97e:	e9ca 0100 	strd	r0, r1, [sl]
 800c982:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800c986:	e770      	b.n	800c86a <__kernel_rem_pio2+0x4f2>
 800c988:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800c98c:	ed3a 7b02 	vldmdb	sl!, {d7}
 800c990:	4630      	mov	r0, r6
 800c992:	ec53 2b17 	vmov	r2, r3, d7
 800c996:	4639      	mov	r1, r7
 800c998:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c99c:	f7f3 fc76 	bl	800028c <__adddf3>
 800c9a0:	4602      	mov	r2, r0
 800c9a2:	460b      	mov	r3, r1
 800c9a4:	4680      	mov	r8, r0
 800c9a6:	4689      	mov	r9, r1
 800c9a8:	4630      	mov	r0, r6
 800c9aa:	4639      	mov	r1, r7
 800c9ac:	f7f3 fc6c 	bl	8000288 <__aeabi_dsub>
 800c9b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c9b4:	f7f3 fc6a 	bl	800028c <__adddf3>
 800c9b8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c9bc:	e9ca 0100 	strd	r0, r1, [sl]
 800c9c0:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800c9c4:	e756      	b.n	800c874 <__kernel_rem_pio2+0x4fc>
 800c9c6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c9ca:	f7f3 fc5f 	bl	800028c <__adddf3>
 800c9ce:	3d01      	subs	r5, #1
 800c9d0:	e756      	b.n	800c880 <__kernel_rem_pio2+0x508>
 800c9d2:	9b01      	ldr	r3, [sp, #4]
 800c9d4:	9a01      	ldr	r2, [sp, #4]
 800c9d6:	601f      	str	r7, [r3, #0]
 800c9d8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800c9dc:	605c      	str	r4, [r3, #4]
 800c9de:	609d      	str	r5, [r3, #8]
 800c9e0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800c9e4:	60d3      	str	r3, [r2, #12]
 800c9e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c9ea:	6110      	str	r0, [r2, #16]
 800c9ec:	6153      	str	r3, [r2, #20]
 800c9ee:	e78e      	b.n	800c90e <__kernel_rem_pio2+0x596>
 800c9f0:	41700000 	.word	0x41700000
 800c9f4:	3e700000 	.word	0x3e700000

0800c9f8 <__kernel_sin>:
 800c9f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9fc:	ec55 4b10 	vmov	r4, r5, d0
 800ca00:	b085      	sub	sp, #20
 800ca02:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ca06:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800ca0a:	ed8d 1b00 	vstr	d1, [sp]
 800ca0e:	9002      	str	r0, [sp, #8]
 800ca10:	da06      	bge.n	800ca20 <__kernel_sin+0x28>
 800ca12:	ee10 0a10 	vmov	r0, s0
 800ca16:	4629      	mov	r1, r5
 800ca18:	f7f4 f89e 	bl	8000b58 <__aeabi_d2iz>
 800ca1c:	2800      	cmp	r0, #0
 800ca1e:	d051      	beq.n	800cac4 <__kernel_sin+0xcc>
 800ca20:	4622      	mov	r2, r4
 800ca22:	462b      	mov	r3, r5
 800ca24:	4620      	mov	r0, r4
 800ca26:	4629      	mov	r1, r5
 800ca28:	f7f3 fde6 	bl	80005f8 <__aeabi_dmul>
 800ca2c:	4682      	mov	sl, r0
 800ca2e:	468b      	mov	fp, r1
 800ca30:	4602      	mov	r2, r0
 800ca32:	460b      	mov	r3, r1
 800ca34:	4620      	mov	r0, r4
 800ca36:	4629      	mov	r1, r5
 800ca38:	f7f3 fdde 	bl	80005f8 <__aeabi_dmul>
 800ca3c:	a341      	add	r3, pc, #260	; (adr r3, 800cb44 <__kernel_sin+0x14c>)
 800ca3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca42:	4680      	mov	r8, r0
 800ca44:	4689      	mov	r9, r1
 800ca46:	4650      	mov	r0, sl
 800ca48:	4659      	mov	r1, fp
 800ca4a:	f7f3 fdd5 	bl	80005f8 <__aeabi_dmul>
 800ca4e:	a33f      	add	r3, pc, #252	; (adr r3, 800cb4c <__kernel_sin+0x154>)
 800ca50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca54:	f7f3 fc18 	bl	8000288 <__aeabi_dsub>
 800ca58:	4652      	mov	r2, sl
 800ca5a:	465b      	mov	r3, fp
 800ca5c:	f7f3 fdcc 	bl	80005f8 <__aeabi_dmul>
 800ca60:	a33c      	add	r3, pc, #240	; (adr r3, 800cb54 <__kernel_sin+0x15c>)
 800ca62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca66:	f7f3 fc11 	bl	800028c <__adddf3>
 800ca6a:	4652      	mov	r2, sl
 800ca6c:	465b      	mov	r3, fp
 800ca6e:	f7f3 fdc3 	bl	80005f8 <__aeabi_dmul>
 800ca72:	a33a      	add	r3, pc, #232	; (adr r3, 800cb5c <__kernel_sin+0x164>)
 800ca74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca78:	f7f3 fc06 	bl	8000288 <__aeabi_dsub>
 800ca7c:	4652      	mov	r2, sl
 800ca7e:	465b      	mov	r3, fp
 800ca80:	f7f3 fdba 	bl	80005f8 <__aeabi_dmul>
 800ca84:	a337      	add	r3, pc, #220	; (adr r3, 800cb64 <__kernel_sin+0x16c>)
 800ca86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca8a:	f7f3 fbff 	bl	800028c <__adddf3>
 800ca8e:	9b02      	ldr	r3, [sp, #8]
 800ca90:	4606      	mov	r6, r0
 800ca92:	460f      	mov	r7, r1
 800ca94:	b9db      	cbnz	r3, 800cace <__kernel_sin+0xd6>
 800ca96:	4602      	mov	r2, r0
 800ca98:	460b      	mov	r3, r1
 800ca9a:	4650      	mov	r0, sl
 800ca9c:	4659      	mov	r1, fp
 800ca9e:	f7f3 fdab 	bl	80005f8 <__aeabi_dmul>
 800caa2:	a325      	add	r3, pc, #148	; (adr r3, 800cb38 <__kernel_sin+0x140>)
 800caa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caa8:	f7f3 fbee 	bl	8000288 <__aeabi_dsub>
 800caac:	4642      	mov	r2, r8
 800caae:	464b      	mov	r3, r9
 800cab0:	f7f3 fda2 	bl	80005f8 <__aeabi_dmul>
 800cab4:	4602      	mov	r2, r0
 800cab6:	460b      	mov	r3, r1
 800cab8:	4620      	mov	r0, r4
 800caba:	4629      	mov	r1, r5
 800cabc:	f7f3 fbe6 	bl	800028c <__adddf3>
 800cac0:	4604      	mov	r4, r0
 800cac2:	460d      	mov	r5, r1
 800cac4:	ec45 4b10 	vmov	d0, r4, r5
 800cac8:	b005      	add	sp, #20
 800caca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cace:	2200      	movs	r2, #0
 800cad0:	4b1b      	ldr	r3, [pc, #108]	; (800cb40 <__kernel_sin+0x148>)
 800cad2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cad6:	f7f3 fd8f 	bl	80005f8 <__aeabi_dmul>
 800cada:	4632      	mov	r2, r6
 800cadc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cae0:	463b      	mov	r3, r7
 800cae2:	4640      	mov	r0, r8
 800cae4:	4649      	mov	r1, r9
 800cae6:	f7f3 fd87 	bl	80005f8 <__aeabi_dmul>
 800caea:	4602      	mov	r2, r0
 800caec:	460b      	mov	r3, r1
 800caee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800caf2:	f7f3 fbc9 	bl	8000288 <__aeabi_dsub>
 800caf6:	4652      	mov	r2, sl
 800caf8:	465b      	mov	r3, fp
 800cafa:	f7f3 fd7d 	bl	80005f8 <__aeabi_dmul>
 800cafe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb02:	f7f3 fbc1 	bl	8000288 <__aeabi_dsub>
 800cb06:	a30c      	add	r3, pc, #48	; (adr r3, 800cb38 <__kernel_sin+0x140>)
 800cb08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb0c:	4606      	mov	r6, r0
 800cb0e:	460f      	mov	r7, r1
 800cb10:	4640      	mov	r0, r8
 800cb12:	4649      	mov	r1, r9
 800cb14:	f7f3 fd70 	bl	80005f8 <__aeabi_dmul>
 800cb18:	4602      	mov	r2, r0
 800cb1a:	460b      	mov	r3, r1
 800cb1c:	4630      	mov	r0, r6
 800cb1e:	4639      	mov	r1, r7
 800cb20:	f7f3 fbb4 	bl	800028c <__adddf3>
 800cb24:	4602      	mov	r2, r0
 800cb26:	460b      	mov	r3, r1
 800cb28:	4620      	mov	r0, r4
 800cb2a:	4629      	mov	r1, r5
 800cb2c:	f7f3 fbac 	bl	8000288 <__aeabi_dsub>
 800cb30:	e7c6      	b.n	800cac0 <__kernel_sin+0xc8>
 800cb32:	bf00      	nop
 800cb34:	f3af 8000 	nop.w
 800cb38:	55555549 	.word	0x55555549
 800cb3c:	3fc55555 	.word	0x3fc55555
 800cb40:	3fe00000 	.word	0x3fe00000
 800cb44:	5acfd57c 	.word	0x5acfd57c
 800cb48:	3de5d93a 	.word	0x3de5d93a
 800cb4c:	8a2b9ceb 	.word	0x8a2b9ceb
 800cb50:	3e5ae5e6 	.word	0x3e5ae5e6
 800cb54:	57b1fe7d 	.word	0x57b1fe7d
 800cb58:	3ec71de3 	.word	0x3ec71de3
 800cb5c:	19c161d5 	.word	0x19c161d5
 800cb60:	3f2a01a0 	.word	0x3f2a01a0
 800cb64:	1110f8a6 	.word	0x1110f8a6
 800cb68:	3f811111 	.word	0x3f811111

0800cb6c <fabs>:
 800cb6c:	ec51 0b10 	vmov	r0, r1, d0
 800cb70:	ee10 2a10 	vmov	r2, s0
 800cb74:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cb78:	ec43 2b10 	vmov	d0, r2, r3
 800cb7c:	4770      	bx	lr
	...

0800cb80 <floor>:
 800cb80:	ec51 0b10 	vmov	r0, r1, d0
 800cb84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb88:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800cb8c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800cb90:	2e13      	cmp	r6, #19
 800cb92:	460c      	mov	r4, r1
 800cb94:	ee10 5a10 	vmov	r5, s0
 800cb98:	4680      	mov	r8, r0
 800cb9a:	dc34      	bgt.n	800cc06 <floor+0x86>
 800cb9c:	2e00      	cmp	r6, #0
 800cb9e:	da16      	bge.n	800cbce <floor+0x4e>
 800cba0:	a335      	add	r3, pc, #212	; (adr r3, 800cc78 <floor+0xf8>)
 800cba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cba6:	f7f3 fb71 	bl	800028c <__adddf3>
 800cbaa:	2200      	movs	r2, #0
 800cbac:	2300      	movs	r3, #0
 800cbae:	f7f3 ffb3 	bl	8000b18 <__aeabi_dcmpgt>
 800cbb2:	b148      	cbz	r0, 800cbc8 <floor+0x48>
 800cbb4:	2c00      	cmp	r4, #0
 800cbb6:	da59      	bge.n	800cc6c <floor+0xec>
 800cbb8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800cbbc:	4a30      	ldr	r2, [pc, #192]	; (800cc80 <floor+0x100>)
 800cbbe:	432b      	orrs	r3, r5
 800cbc0:	2500      	movs	r5, #0
 800cbc2:	42ab      	cmp	r3, r5
 800cbc4:	bf18      	it	ne
 800cbc6:	4614      	movne	r4, r2
 800cbc8:	4621      	mov	r1, r4
 800cbca:	4628      	mov	r0, r5
 800cbcc:	e025      	b.n	800cc1a <floor+0x9a>
 800cbce:	4f2d      	ldr	r7, [pc, #180]	; (800cc84 <floor+0x104>)
 800cbd0:	4137      	asrs	r7, r6
 800cbd2:	ea01 0307 	and.w	r3, r1, r7
 800cbd6:	4303      	orrs	r3, r0
 800cbd8:	d01f      	beq.n	800cc1a <floor+0x9a>
 800cbda:	a327      	add	r3, pc, #156	; (adr r3, 800cc78 <floor+0xf8>)
 800cbdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbe0:	f7f3 fb54 	bl	800028c <__adddf3>
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	f7f3 ff96 	bl	8000b18 <__aeabi_dcmpgt>
 800cbec:	2800      	cmp	r0, #0
 800cbee:	d0eb      	beq.n	800cbc8 <floor+0x48>
 800cbf0:	2c00      	cmp	r4, #0
 800cbf2:	bfbe      	ittt	lt
 800cbf4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800cbf8:	fa43 f606 	asrlt.w	r6, r3, r6
 800cbfc:	19a4      	addlt	r4, r4, r6
 800cbfe:	ea24 0407 	bic.w	r4, r4, r7
 800cc02:	2500      	movs	r5, #0
 800cc04:	e7e0      	b.n	800cbc8 <floor+0x48>
 800cc06:	2e33      	cmp	r6, #51	; 0x33
 800cc08:	dd0b      	ble.n	800cc22 <floor+0xa2>
 800cc0a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800cc0e:	d104      	bne.n	800cc1a <floor+0x9a>
 800cc10:	ee10 2a10 	vmov	r2, s0
 800cc14:	460b      	mov	r3, r1
 800cc16:	f7f3 fb39 	bl	800028c <__adddf3>
 800cc1a:	ec41 0b10 	vmov	d0, r0, r1
 800cc1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc22:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800cc26:	f04f 33ff 	mov.w	r3, #4294967295
 800cc2a:	fa23 f707 	lsr.w	r7, r3, r7
 800cc2e:	4207      	tst	r7, r0
 800cc30:	d0f3      	beq.n	800cc1a <floor+0x9a>
 800cc32:	a311      	add	r3, pc, #68	; (adr r3, 800cc78 <floor+0xf8>)
 800cc34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc38:	f7f3 fb28 	bl	800028c <__adddf3>
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	2300      	movs	r3, #0
 800cc40:	f7f3 ff6a 	bl	8000b18 <__aeabi_dcmpgt>
 800cc44:	2800      	cmp	r0, #0
 800cc46:	d0bf      	beq.n	800cbc8 <floor+0x48>
 800cc48:	2c00      	cmp	r4, #0
 800cc4a:	da02      	bge.n	800cc52 <floor+0xd2>
 800cc4c:	2e14      	cmp	r6, #20
 800cc4e:	d103      	bne.n	800cc58 <floor+0xd8>
 800cc50:	3401      	adds	r4, #1
 800cc52:	ea25 0507 	bic.w	r5, r5, r7
 800cc56:	e7b7      	b.n	800cbc8 <floor+0x48>
 800cc58:	2301      	movs	r3, #1
 800cc5a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800cc5e:	fa03 f606 	lsl.w	r6, r3, r6
 800cc62:	4435      	add	r5, r6
 800cc64:	4545      	cmp	r5, r8
 800cc66:	bf38      	it	cc
 800cc68:	18e4      	addcc	r4, r4, r3
 800cc6a:	e7f2      	b.n	800cc52 <floor+0xd2>
 800cc6c:	2500      	movs	r5, #0
 800cc6e:	462c      	mov	r4, r5
 800cc70:	e7aa      	b.n	800cbc8 <floor+0x48>
 800cc72:	bf00      	nop
 800cc74:	f3af 8000 	nop.w
 800cc78:	8800759c 	.word	0x8800759c
 800cc7c:	7e37e43c 	.word	0x7e37e43c
 800cc80:	bff00000 	.word	0xbff00000
 800cc84:	000fffff 	.word	0x000fffff

0800cc88 <matherr>:
 800cc88:	2000      	movs	r0, #0
 800cc8a:	4770      	bx	lr
 800cc8c:	0000      	movs	r0, r0
	...

0800cc90 <scalbn>:
 800cc90:	b570      	push	{r4, r5, r6, lr}
 800cc92:	ec55 4b10 	vmov	r4, r5, d0
 800cc96:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800cc9a:	4606      	mov	r6, r0
 800cc9c:	462b      	mov	r3, r5
 800cc9e:	b9aa      	cbnz	r2, 800cccc <scalbn+0x3c>
 800cca0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cca4:	4323      	orrs	r3, r4
 800cca6:	d03b      	beq.n	800cd20 <scalbn+0x90>
 800cca8:	4b31      	ldr	r3, [pc, #196]	; (800cd70 <scalbn+0xe0>)
 800ccaa:	4629      	mov	r1, r5
 800ccac:	2200      	movs	r2, #0
 800ccae:	ee10 0a10 	vmov	r0, s0
 800ccb2:	f7f3 fca1 	bl	80005f8 <__aeabi_dmul>
 800ccb6:	4b2f      	ldr	r3, [pc, #188]	; (800cd74 <scalbn+0xe4>)
 800ccb8:	429e      	cmp	r6, r3
 800ccba:	4604      	mov	r4, r0
 800ccbc:	460d      	mov	r5, r1
 800ccbe:	da12      	bge.n	800cce6 <scalbn+0x56>
 800ccc0:	a327      	add	r3, pc, #156	; (adr r3, 800cd60 <scalbn+0xd0>)
 800ccc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccc6:	f7f3 fc97 	bl	80005f8 <__aeabi_dmul>
 800ccca:	e009      	b.n	800cce0 <scalbn+0x50>
 800cccc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ccd0:	428a      	cmp	r2, r1
 800ccd2:	d10c      	bne.n	800ccee <scalbn+0x5e>
 800ccd4:	ee10 2a10 	vmov	r2, s0
 800ccd8:	4620      	mov	r0, r4
 800ccda:	4629      	mov	r1, r5
 800ccdc:	f7f3 fad6 	bl	800028c <__adddf3>
 800cce0:	4604      	mov	r4, r0
 800cce2:	460d      	mov	r5, r1
 800cce4:	e01c      	b.n	800cd20 <scalbn+0x90>
 800cce6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ccea:	460b      	mov	r3, r1
 800ccec:	3a36      	subs	r2, #54	; 0x36
 800ccee:	4432      	add	r2, r6
 800ccf0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ccf4:	428a      	cmp	r2, r1
 800ccf6:	dd0b      	ble.n	800cd10 <scalbn+0x80>
 800ccf8:	ec45 4b11 	vmov	d1, r4, r5
 800ccfc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800cd68 <scalbn+0xd8>
 800cd00:	f000 f83c 	bl	800cd7c <copysign>
 800cd04:	a318      	add	r3, pc, #96	; (adr r3, 800cd68 <scalbn+0xd8>)
 800cd06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd0a:	ec51 0b10 	vmov	r0, r1, d0
 800cd0e:	e7da      	b.n	800ccc6 <scalbn+0x36>
 800cd10:	2a00      	cmp	r2, #0
 800cd12:	dd08      	ble.n	800cd26 <scalbn+0x96>
 800cd14:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cd18:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cd1c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cd20:	ec45 4b10 	vmov	d0, r4, r5
 800cd24:	bd70      	pop	{r4, r5, r6, pc}
 800cd26:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800cd2a:	da0d      	bge.n	800cd48 <scalbn+0xb8>
 800cd2c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800cd30:	429e      	cmp	r6, r3
 800cd32:	ec45 4b11 	vmov	d1, r4, r5
 800cd36:	dce1      	bgt.n	800ccfc <scalbn+0x6c>
 800cd38:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800cd60 <scalbn+0xd0>
 800cd3c:	f000 f81e 	bl	800cd7c <copysign>
 800cd40:	a307      	add	r3, pc, #28	; (adr r3, 800cd60 <scalbn+0xd0>)
 800cd42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd46:	e7e0      	b.n	800cd0a <scalbn+0x7a>
 800cd48:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cd4c:	3236      	adds	r2, #54	; 0x36
 800cd4e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cd52:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cd56:	4620      	mov	r0, r4
 800cd58:	4629      	mov	r1, r5
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	4b06      	ldr	r3, [pc, #24]	; (800cd78 <scalbn+0xe8>)
 800cd5e:	e7b2      	b.n	800ccc6 <scalbn+0x36>
 800cd60:	c2f8f359 	.word	0xc2f8f359
 800cd64:	01a56e1f 	.word	0x01a56e1f
 800cd68:	8800759c 	.word	0x8800759c
 800cd6c:	7e37e43c 	.word	0x7e37e43c
 800cd70:	43500000 	.word	0x43500000
 800cd74:	ffff3cb0 	.word	0xffff3cb0
 800cd78:	3c900000 	.word	0x3c900000

0800cd7c <copysign>:
 800cd7c:	ec51 0b10 	vmov	r0, r1, d0
 800cd80:	ee11 0a90 	vmov	r0, s3
 800cd84:	ee10 2a10 	vmov	r2, s0
 800cd88:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800cd8c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800cd90:	ea41 0300 	orr.w	r3, r1, r0
 800cd94:	ec43 2b10 	vmov	d0, r2, r3
 800cd98:	4770      	bx	lr
	...

0800cd9c <_init>:
 800cd9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd9e:	bf00      	nop
 800cda0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cda2:	bc08      	pop	{r3}
 800cda4:	469e      	mov	lr, r3
 800cda6:	4770      	bx	lr

0800cda8 <_fini>:
 800cda8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdaa:	bf00      	nop
 800cdac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdae:	bc08      	pop	{r3}
 800cdb0:	469e      	mov	lr, r3
 800cdb2:	4770      	bx	lr
