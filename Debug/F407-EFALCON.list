
F407-EFALCON.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d3bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e0  0800d550  0800d550  0001d550  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db30  0800db30  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800db30  0800db30  0001db30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800db38  0800db38  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800db38  0800db38  0001db38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800db3c  0800db3c  0001db3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800db40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b90  200001e0  0800dd20  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d70  0800dd20  00020d70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012a51  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002414  00000000  00000000  00032c61  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001078  00000000  00000000  00035078  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f98  00000000  00000000  000360f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000033da  00000000  00000000  00037088  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c747  00000000  00000000  0003a462  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ce228  00000000  00000000  00046ba9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00114dd1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005420  00000000  00000000  00114e4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d534 	.word	0x0800d534

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800d534 	.word	0x0800d534

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_ldivmod>:
 8000c48:	b97b      	cbnz	r3, 8000c6a <__aeabi_ldivmod+0x22>
 8000c4a:	b972      	cbnz	r2, 8000c6a <__aeabi_ldivmod+0x22>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bfbe      	ittt	lt
 8000c50:	2000      	movlt	r0, #0
 8000c52:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c56:	e006      	blt.n	8000c66 <__aeabi_ldivmod+0x1e>
 8000c58:	bf08      	it	eq
 8000c5a:	2800      	cmpeq	r0, #0
 8000c5c:	bf1c      	itt	ne
 8000c5e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c62:	f04f 30ff 	movne.w	r0, #4294967295
 8000c66:	f000 b9bd 	b.w	8000fe4 <__aeabi_idiv0>
 8000c6a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c6e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c72:	2900      	cmp	r1, #0
 8000c74:	db09      	blt.n	8000c8a <__aeabi_ldivmod+0x42>
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	db1a      	blt.n	8000cb0 <__aeabi_ldivmod+0x68>
 8000c7a:	f000 f84d 	bl	8000d18 <__udivmoddi4>
 8000c7e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c86:	b004      	add	sp, #16
 8000c88:	4770      	bx	lr
 8000c8a:	4240      	negs	r0, r0
 8000c8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	db1b      	blt.n	8000ccc <__aeabi_ldivmod+0x84>
 8000c94:	f000 f840 	bl	8000d18 <__udivmoddi4>
 8000c98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca0:	b004      	add	sp, #16
 8000ca2:	4240      	negs	r0, r0
 8000ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca8:	4252      	negs	r2, r2
 8000caa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cae:	4770      	bx	lr
 8000cb0:	4252      	negs	r2, r2
 8000cb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cb6:	f000 f82f 	bl	8000d18 <__udivmoddi4>
 8000cba:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc2:	b004      	add	sp, #16
 8000cc4:	4240      	negs	r0, r0
 8000cc6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cca:	4770      	bx	lr
 8000ccc:	4252      	negs	r2, r2
 8000cce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd2:	f000 f821 	bl	8000d18 <__udivmoddi4>
 8000cd6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cde:	b004      	add	sp, #16
 8000ce0:	4252      	negs	r2, r2
 8000ce2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b972 	b.w	8000fe4 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f806 	bl	8000d18 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__udivmoddi4>:
 8000d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d1c:	9e08      	ldr	r6, [sp, #32]
 8000d1e:	4604      	mov	r4, r0
 8000d20:	4688      	mov	r8, r1
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d14b      	bne.n	8000dbe <__udivmoddi4+0xa6>
 8000d26:	428a      	cmp	r2, r1
 8000d28:	4615      	mov	r5, r2
 8000d2a:	d967      	bls.n	8000dfc <__udivmoddi4+0xe4>
 8000d2c:	fab2 f282 	clz	r2, r2
 8000d30:	b14a      	cbz	r2, 8000d46 <__udivmoddi4+0x2e>
 8000d32:	f1c2 0720 	rsb	r7, r2, #32
 8000d36:	fa01 f302 	lsl.w	r3, r1, r2
 8000d3a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d3e:	4095      	lsls	r5, r2
 8000d40:	ea47 0803 	orr.w	r8, r7, r3
 8000d44:	4094      	lsls	r4, r2
 8000d46:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d4a:	0c23      	lsrs	r3, r4, #16
 8000d4c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d50:	fa1f fc85 	uxth.w	ip, r5
 8000d54:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d58:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d5c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d60:	4299      	cmp	r1, r3
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x60>
 8000d64:	18eb      	adds	r3, r5, r3
 8000d66:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d6a:	f080 811b 	bcs.w	8000fa4 <__udivmoddi4+0x28c>
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	f240 8118 	bls.w	8000fa4 <__udivmoddi4+0x28c>
 8000d74:	3f02      	subs	r7, #2
 8000d76:	442b      	add	r3, r5
 8000d78:	1a5b      	subs	r3, r3, r1
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d88:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d8c:	45a4      	cmp	ip, r4
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x8c>
 8000d90:	192c      	adds	r4, r5, r4
 8000d92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d96:	f080 8107 	bcs.w	8000fa8 <__udivmoddi4+0x290>
 8000d9a:	45a4      	cmp	ip, r4
 8000d9c:	f240 8104 	bls.w	8000fa8 <__udivmoddi4+0x290>
 8000da0:	3802      	subs	r0, #2
 8000da2:	442c      	add	r4, r5
 8000da4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000da8:	eba4 040c 	sub.w	r4, r4, ip
 8000dac:	2700      	movs	r7, #0
 8000dae:	b11e      	cbz	r6, 8000db8 <__udivmoddi4+0xa0>
 8000db0:	40d4      	lsrs	r4, r2
 8000db2:	2300      	movs	r3, #0
 8000db4:	e9c6 4300 	strd	r4, r3, [r6]
 8000db8:	4639      	mov	r1, r7
 8000dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d909      	bls.n	8000dd6 <__udivmoddi4+0xbe>
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	f000 80eb 	beq.w	8000f9e <__udivmoddi4+0x286>
 8000dc8:	2700      	movs	r7, #0
 8000dca:	e9c6 0100 	strd	r0, r1, [r6]
 8000dce:	4638      	mov	r0, r7
 8000dd0:	4639      	mov	r1, r7
 8000dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd6:	fab3 f783 	clz	r7, r3
 8000dda:	2f00      	cmp	r7, #0
 8000ddc:	d147      	bne.n	8000e6e <__udivmoddi4+0x156>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d302      	bcc.n	8000de8 <__udivmoddi4+0xd0>
 8000de2:	4282      	cmp	r2, r0
 8000de4:	f200 80fa 	bhi.w	8000fdc <__udivmoddi4+0x2c4>
 8000de8:	1a84      	subs	r4, r0, r2
 8000dea:	eb61 0303 	sbc.w	r3, r1, r3
 8000dee:	2001      	movs	r0, #1
 8000df0:	4698      	mov	r8, r3
 8000df2:	2e00      	cmp	r6, #0
 8000df4:	d0e0      	beq.n	8000db8 <__udivmoddi4+0xa0>
 8000df6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dfa:	e7dd      	b.n	8000db8 <__udivmoddi4+0xa0>
 8000dfc:	b902      	cbnz	r2, 8000e00 <__udivmoddi4+0xe8>
 8000dfe:	deff      	udf	#255	; 0xff
 8000e00:	fab2 f282 	clz	r2, r2
 8000e04:	2a00      	cmp	r2, #0
 8000e06:	f040 808f 	bne.w	8000f28 <__udivmoddi4+0x210>
 8000e0a:	1b49      	subs	r1, r1, r5
 8000e0c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e10:	fa1f f885 	uxth.w	r8, r5
 8000e14:	2701      	movs	r7, #1
 8000e16:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e1a:	0c23      	lsrs	r3, r4, #16
 8000e1c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e24:	fb08 f10c 	mul.w	r1, r8, ip
 8000e28:	4299      	cmp	r1, r3
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x124>
 8000e2c:	18eb      	adds	r3, r5, r3
 8000e2e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e32:	d202      	bcs.n	8000e3a <__udivmoddi4+0x122>
 8000e34:	4299      	cmp	r1, r3
 8000e36:	f200 80cd 	bhi.w	8000fd4 <__udivmoddi4+0x2bc>
 8000e3a:	4684      	mov	ip, r0
 8000e3c:	1a59      	subs	r1, r3, r1
 8000e3e:	b2a3      	uxth	r3, r4
 8000e40:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e44:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e48:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e4c:	fb08 f800 	mul.w	r8, r8, r0
 8000e50:	45a0      	cmp	r8, r4
 8000e52:	d907      	bls.n	8000e64 <__udivmoddi4+0x14c>
 8000e54:	192c      	adds	r4, r5, r4
 8000e56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e5a:	d202      	bcs.n	8000e62 <__udivmoddi4+0x14a>
 8000e5c:	45a0      	cmp	r8, r4
 8000e5e:	f200 80b6 	bhi.w	8000fce <__udivmoddi4+0x2b6>
 8000e62:	4618      	mov	r0, r3
 8000e64:	eba4 0408 	sub.w	r4, r4, r8
 8000e68:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e6c:	e79f      	b.n	8000dae <__udivmoddi4+0x96>
 8000e6e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e72:	40bb      	lsls	r3, r7
 8000e74:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e78:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e7c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e80:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e84:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e88:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e8c:	4325      	orrs	r5, r4
 8000e8e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e92:	0c2c      	lsrs	r4, r5, #16
 8000e94:	fb08 3319 	mls	r3, r8, r9, r3
 8000e98:	fa1f fa8e 	uxth.w	sl, lr
 8000e9c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ea0:	fb09 f40a 	mul.w	r4, r9, sl
 8000ea4:	429c      	cmp	r4, r3
 8000ea6:	fa02 f207 	lsl.w	r2, r2, r7
 8000eaa:	fa00 f107 	lsl.w	r1, r0, r7
 8000eae:	d90b      	bls.n	8000ec8 <__udivmoddi4+0x1b0>
 8000eb0:	eb1e 0303 	adds.w	r3, lr, r3
 8000eb4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eb8:	f080 8087 	bcs.w	8000fca <__udivmoddi4+0x2b2>
 8000ebc:	429c      	cmp	r4, r3
 8000ebe:	f240 8084 	bls.w	8000fca <__udivmoddi4+0x2b2>
 8000ec2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ec6:	4473      	add	r3, lr
 8000ec8:	1b1b      	subs	r3, r3, r4
 8000eca:	b2ad      	uxth	r5, r5
 8000ecc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ed0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ed4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ed8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000edc:	45a2      	cmp	sl, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1da>
 8000ee0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ee4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ee8:	d26b      	bcs.n	8000fc2 <__udivmoddi4+0x2aa>
 8000eea:	45a2      	cmp	sl, r4
 8000eec:	d969      	bls.n	8000fc2 <__udivmoddi4+0x2aa>
 8000eee:	3802      	subs	r0, #2
 8000ef0:	4474      	add	r4, lr
 8000ef2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ef6:	fba0 8902 	umull	r8, r9, r0, r2
 8000efa:	eba4 040a 	sub.w	r4, r4, sl
 8000efe:	454c      	cmp	r4, r9
 8000f00:	46c2      	mov	sl, r8
 8000f02:	464b      	mov	r3, r9
 8000f04:	d354      	bcc.n	8000fb0 <__udivmoddi4+0x298>
 8000f06:	d051      	beq.n	8000fac <__udivmoddi4+0x294>
 8000f08:	2e00      	cmp	r6, #0
 8000f0a:	d069      	beq.n	8000fe0 <__udivmoddi4+0x2c8>
 8000f0c:	ebb1 050a 	subs.w	r5, r1, sl
 8000f10:	eb64 0403 	sbc.w	r4, r4, r3
 8000f14:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f18:	40fd      	lsrs	r5, r7
 8000f1a:	40fc      	lsrs	r4, r7
 8000f1c:	ea4c 0505 	orr.w	r5, ip, r5
 8000f20:	e9c6 5400 	strd	r5, r4, [r6]
 8000f24:	2700      	movs	r7, #0
 8000f26:	e747      	b.n	8000db8 <__udivmoddi4+0xa0>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f30:	4095      	lsls	r5, r2
 8000f32:	fa01 f002 	lsl.w	r0, r1, r2
 8000f36:	fa21 f303 	lsr.w	r3, r1, r3
 8000f3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f3e:	4338      	orrs	r0, r7
 8000f40:	0c01      	lsrs	r1, r0, #16
 8000f42:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f46:	fa1f f885 	uxth.w	r8, r5
 8000f4a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f52:	fb07 f308 	mul.w	r3, r7, r8
 8000f56:	428b      	cmp	r3, r1
 8000f58:	fa04 f402 	lsl.w	r4, r4, r2
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x256>
 8000f5e:	1869      	adds	r1, r5, r1
 8000f60:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f64:	d22f      	bcs.n	8000fc6 <__udivmoddi4+0x2ae>
 8000f66:	428b      	cmp	r3, r1
 8000f68:	d92d      	bls.n	8000fc6 <__udivmoddi4+0x2ae>
 8000f6a:	3f02      	subs	r7, #2
 8000f6c:	4429      	add	r1, r5
 8000f6e:	1acb      	subs	r3, r1, r3
 8000f70:	b281      	uxth	r1, r0
 8000f72:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f76:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb00 f308 	mul.w	r3, r0, r8
 8000f82:	428b      	cmp	r3, r1
 8000f84:	d907      	bls.n	8000f96 <__udivmoddi4+0x27e>
 8000f86:	1869      	adds	r1, r5, r1
 8000f88:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f8c:	d217      	bcs.n	8000fbe <__udivmoddi4+0x2a6>
 8000f8e:	428b      	cmp	r3, r1
 8000f90:	d915      	bls.n	8000fbe <__udivmoddi4+0x2a6>
 8000f92:	3802      	subs	r0, #2
 8000f94:	4429      	add	r1, r5
 8000f96:	1ac9      	subs	r1, r1, r3
 8000f98:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f9c:	e73b      	b.n	8000e16 <__udivmoddi4+0xfe>
 8000f9e:	4637      	mov	r7, r6
 8000fa0:	4630      	mov	r0, r6
 8000fa2:	e709      	b.n	8000db8 <__udivmoddi4+0xa0>
 8000fa4:	4607      	mov	r7, r0
 8000fa6:	e6e7      	b.n	8000d78 <__udivmoddi4+0x60>
 8000fa8:	4618      	mov	r0, r3
 8000faa:	e6fb      	b.n	8000da4 <__udivmoddi4+0x8c>
 8000fac:	4541      	cmp	r1, r8
 8000fae:	d2ab      	bcs.n	8000f08 <__udivmoddi4+0x1f0>
 8000fb0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000fb4:	eb69 020e 	sbc.w	r2, r9, lr
 8000fb8:	3801      	subs	r0, #1
 8000fba:	4613      	mov	r3, r2
 8000fbc:	e7a4      	b.n	8000f08 <__udivmoddi4+0x1f0>
 8000fbe:	4660      	mov	r0, ip
 8000fc0:	e7e9      	b.n	8000f96 <__udivmoddi4+0x27e>
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	e795      	b.n	8000ef2 <__udivmoddi4+0x1da>
 8000fc6:	4667      	mov	r7, ip
 8000fc8:	e7d1      	b.n	8000f6e <__udivmoddi4+0x256>
 8000fca:	4681      	mov	r9, r0
 8000fcc:	e77c      	b.n	8000ec8 <__udivmoddi4+0x1b0>
 8000fce:	3802      	subs	r0, #2
 8000fd0:	442c      	add	r4, r5
 8000fd2:	e747      	b.n	8000e64 <__udivmoddi4+0x14c>
 8000fd4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fd8:	442b      	add	r3, r5
 8000fda:	e72f      	b.n	8000e3c <__udivmoddi4+0x124>
 8000fdc:	4638      	mov	r0, r7
 8000fde:	e708      	b.n	8000df2 <__udivmoddi4+0xda>
 8000fe0:	4637      	mov	r7, r6
 8000fe2:	e6e9      	b.n	8000db8 <__udivmoddi4+0xa0>

08000fe4 <__aeabi_idiv0>:
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop

08000fe8 <kalman_init>:
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	ed87 0a02 	vstr	s0, [r7, #8]
 8000ff4:	edc7 0a01 	vstr	s1, [r7, #4]
 8000ff8:	ed87 1a00 	vstr	s2, [r7]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	68ba      	ldr	r2, [r7, #8]
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	683a      	ldr	r2, [r7, #0]
 800100c:	609a      	str	r2, [r3, #8]
 800100e:	bf00      	nop
 8001010:	3714      	adds	r7, #20
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
	...

0800101c <kalman_updateEstimate>:
 800101c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
 8001026:	ed87 0a00 	vstr	s0, [r7]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	ed93 7a01 	vldr	s14, [r3, #4]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	edd3 7a00 	vldr	s15, [r3]
 800103c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001040:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	edc3 7a05 	vstr	s15, [r3, #20]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	ed93 7a04 	vldr	s14, [r3, #16]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	edd3 6a05 	vldr	s13, [r3, #20]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	edd3 7a04 	vldr	s15, [r3, #16]
 800105c:	ed97 6a00 	vldr	s12, [r7]
 8001060:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001064:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001068:	ee77 7a27 	vadd.f32	s15, s14, s15
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	edc3 7a03 	vstr	s15, [r3, #12]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff fa66 	bl	8000548 <__aeabi_f2d>
 800107c:	4603      	mov	r3, r0
 800107e:	460c      	mov	r4, r1
 8001080:	461a      	mov	r2, r3
 8001082:	4623      	mov	r3, r4
 8001084:	f04f 0000 	mov.w	r0, #0
 8001088:	4926      	ldr	r1, [pc, #152]	; (8001124 <kalman_updateEstimate+0x108>)
 800108a:	f7ff f8fd 	bl	8000288 <__aeabi_dsub>
 800108e:	4603      	mov	r3, r0
 8001090:	460c      	mov	r4, r1
 8001092:	4625      	mov	r5, r4
 8001094:	461c      	mov	r4, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff fa54 	bl	8000548 <__aeabi_f2d>
 80010a0:	4602      	mov	r2, r0
 80010a2:	460b      	mov	r3, r1
 80010a4:	4620      	mov	r0, r4
 80010a6:	4629      	mov	r1, r5
 80010a8:	f7ff faa6 	bl	80005f8 <__aeabi_dmul>
 80010ac:	4603      	mov	r3, r0
 80010ae:	460c      	mov	r4, r1
 80010b0:	4625      	mov	r5, r4
 80010b2:	461c      	mov	r4, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	ed93 7a04 	vldr	s14, [r3, #16]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	edd3 7a03 	vldr	s15, [r3, #12]
 80010c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010c4:	eef0 7ae7 	vabs.f32	s15, s15
 80010c8:	ee17 0a90 	vmov	r0, s15
 80010cc:	f7ff fa3c 	bl	8000548 <__aeabi_f2d>
 80010d0:	4680      	mov	r8, r0
 80010d2:	4689      	mov	r9, r1
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff fa35 	bl	8000548 <__aeabi_f2d>
 80010de:	4602      	mov	r2, r0
 80010e0:	460b      	mov	r3, r1
 80010e2:	4640      	mov	r0, r8
 80010e4:	4649      	mov	r1, r9
 80010e6:	f7ff fa87 	bl	80005f8 <__aeabi_dmul>
 80010ea:	4602      	mov	r2, r0
 80010ec:	460b      	mov	r3, r1
 80010ee:	4620      	mov	r0, r4
 80010f0:	4629      	mov	r1, r5
 80010f2:	f7ff f8cb 	bl	800028c <__adddf3>
 80010f6:	4603      	mov	r3, r0
 80010f8:	460c      	mov	r4, r1
 80010fa:	4618      	mov	r0, r3
 80010fc:	4621      	mov	r1, r4
 80010fe:	f7ff fd53 	bl	8000ba8 <__aeabi_d2f>
 8001102:	4602      	mov	r2, r0
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	68da      	ldr	r2, [r3, #12]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	611a      	str	r2, [r3, #16]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	ee07 3a90 	vmov	s15, r3
 8001118:	eeb0 0a67 	vmov.f32	s0, s15
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001124:	3ff00000 	.word	0x3ff00000

08001128 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2203      	movs	r2, #3
 8001134:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_2;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2201      	movs	r2, #1
 800113a:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_HIGH_RES;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2204      	movs	r2, #4
 8001140:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_ULTRA_LOW_POWER;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2201      	movs	r2, #1
 8001146:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_SKIPPED;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2200      	movs	r2, #0
 800114c:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_05;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2200      	movs	r2, #0
 8001152:	715a      	strb	r2, [r3, #5]
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b08a      	sub	sp, #40	; 0x28
 8001164:	af04      	add	r7, sp, #16
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	460b      	mov	r3, r1
 800116a:	607a      	str	r2, [r7, #4]
 800116c:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800117a:	7afb      	ldrb	r3, [r7, #11]
 800117c:	b29a      	uxth	r2, r3
 800117e:	8af9      	ldrh	r1, [r7, #22]
 8001180:	f241 3388 	movw	r3, #5000	; 0x1388
 8001184:	9302      	str	r3, [sp, #8]
 8001186:	2302      	movs	r3, #2
 8001188:	9301      	str	r3, [sp, #4]
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	9300      	str	r3, [sp, #0]
 8001190:	2301      	movs	r3, #1
 8001192:	f004 ff05 	bl	8005fa0 <HAL_I2C_Mem_Read>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d10b      	bne.n	80011b4 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 800119c:	7d7b      	ldrb	r3, [r7, #21]
 800119e:	021b      	lsls	r3, r3, #8
 80011a0:	b21a      	sxth	r2, r3
 80011a2:	7d3b      	ldrb	r3, [r7, #20]
 80011a4:	b21b      	sxth	r3, r3
 80011a6:	4313      	orrs	r3, r2
 80011a8:	b21b      	sxth	r3, r3
 80011aa:	b29a      	uxth	r2, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	801a      	strh	r2, [r3, #0]
		return true;
 80011b0:	2301      	movs	r3, #1
 80011b2:	e000      	b.n	80011b6 <read_register16+0x56>
	} else
		return false;
 80011b4:	2300      	movs	r3, #0

}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3718      	adds	r7, #24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 80011be:	b590      	push	{r4, r7, lr}
 80011c0:	b08b      	sub	sp, #44	; 0x2c
 80011c2:	af04      	add	r7, sp, #16
 80011c4:	60f8      	str	r0, [r7, #12]
 80011c6:	607a      	str	r2, [r7, #4]
 80011c8:	461a      	mov	r2, r3
 80011ca:	460b      	mov	r3, r1
 80011cc:	72fb      	strb	r3, [r7, #11]
 80011ce:	4613      	mov	r3, r2
 80011d0:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80011de:	7afb      	ldrb	r3, [r7, #11]
 80011e0:	b29c      	uxth	r4, r3
 80011e2:	7abb      	ldrb	r3, [r7, #10]
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	8af9      	ldrh	r1, [r7, #22]
 80011e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80011ec:	9202      	str	r2, [sp, #8]
 80011ee:	9301      	str	r3, [sp, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	2301      	movs	r3, #1
 80011f6:	4622      	mov	r2, r4
 80011f8:	f004 fed2 	bl	8005fa0 <HAL_I2C_Mem_Read>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d101      	bne.n	8001206 <read_data+0x48>
		return 0;
 8001202:	2300      	movs	r3, #0
 8001204:	e000      	b.n	8001208 <read_data+0x4a>
	else
		return 1;
 8001206:	2301      	movs	r3, #1

}
 8001208:	4618      	mov	r0, r3
 800120a:	371c      	adds	r7, #28
 800120c:	46bd      	mov	sp, r7
 800120e:	bd90      	pop	{r4, r7, pc}

08001210 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	461a      	mov	r2, r3
 800121c:	2188      	movs	r1, #136	; 0x88
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff ff9e 	bl	8001160 <read_register16>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d06f      	beq.n	800130a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	3302      	adds	r3, #2
 800122e:	461a      	mov	r2, r3
 8001230:	218a      	movs	r1, #138	; 0x8a
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f7ff ff94 	bl	8001160 <read_register16>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d065      	beq.n	800130a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	3304      	adds	r3, #4
 8001242:	461a      	mov	r2, r3
 8001244:	218c      	movs	r1, #140	; 0x8c
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff ff8a 	bl	8001160 <read_register16>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d05b      	beq.n	800130a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	3306      	adds	r3, #6
 8001256:	461a      	mov	r2, r3
 8001258:	218e      	movs	r1, #142	; 0x8e
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f7ff ff80 	bl	8001160 <read_register16>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d051      	beq.n	800130a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	3308      	adds	r3, #8
 800126a:	461a      	mov	r2, r3
 800126c:	2190      	movs	r1, #144	; 0x90
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff ff76 	bl	8001160 <read_register16>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d047      	beq.n	800130a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	330a      	adds	r3, #10
 800127e:	461a      	mov	r2, r3
 8001280:	2192      	movs	r1, #146	; 0x92
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f7ff ff6c 	bl	8001160 <read_register16>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d03d      	beq.n	800130a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	330c      	adds	r3, #12
 8001292:	461a      	mov	r2, r3
 8001294:	2194      	movs	r1, #148	; 0x94
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f7ff ff62 	bl	8001160 <read_register16>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d033      	beq.n	800130a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	330e      	adds	r3, #14
 80012a6:	461a      	mov	r2, r3
 80012a8:	2196      	movs	r1, #150	; 0x96
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff ff58 	bl	8001160 <read_register16>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d029      	beq.n	800130a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	3310      	adds	r3, #16
 80012ba:	461a      	mov	r2, r3
 80012bc:	2198      	movs	r1, #152	; 0x98
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f7ff ff4e 	bl	8001160 <read_register16>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d01f      	beq.n	800130a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	3312      	adds	r3, #18
 80012ce:	461a      	mov	r2, r3
 80012d0:	219a      	movs	r1, #154	; 0x9a
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff ff44 	bl	8001160 <read_register16>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d015      	beq.n	800130a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	3314      	adds	r3, #20
 80012e2:	461a      	mov	r2, r3
 80012e4:	219c      	movs	r1, #156	; 0x9c
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff ff3a 	bl	8001160 <read_register16>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d00b      	beq.n	800130a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 80012f6:	461a      	mov	r2, r3
 80012f8:	219e      	movs	r1, #158	; 0x9e
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff ff30 	bl	8001160 <read_register16>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <read_calibration_data+0xfa>

		return true;
 8001306:	2301      	movs	r3, #1
 8001308:	e000      	b.n	800130c <read_calibration_data+0xfc>
	}

	return false;
 800130a:	2300      	movs	r3, #0
}
 800130c:	4618      	mov	r0, r3
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f103 0218 	add.w	r2, r3, #24
 8001322:	2301      	movs	r3, #1
 8001324:	21a1      	movs	r1, #161	; 0xa1
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7ff ff49 	bl	80011be <read_data>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d14b      	bne.n	80013ca <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	331a      	adds	r3, #26
 8001336:	461a      	mov	r2, r3
 8001338:	21e1      	movs	r1, #225	; 0xe1
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f7ff ff10 	bl	8001160 <read_register16>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d041      	beq.n	80013ca <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f103 021c 	add.w	r2, r3, #28
 800134c:	2301      	movs	r3, #1
 800134e:	21e3      	movs	r1, #227	; 0xe3
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff ff34 	bl	80011be <read_data>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d136      	bne.n	80013ca <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 800135c:	f107 030e 	add.w	r3, r7, #14
 8001360:	461a      	mov	r2, r3
 8001362:	21e4      	movs	r1, #228	; 0xe4
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f7ff fefb 	bl	8001160 <read_register16>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d02c      	beq.n	80013ca <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 8001370:	f107 030c 	add.w	r3, r7, #12
 8001374:	461a      	mov	r2, r3
 8001376:	21e5      	movs	r1, #229	; 0xe5
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7ff fef1 	bl	8001160 <read_register16>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d022      	beq.n	80013ca <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f103 0222 	add.w	r2, r3, #34	; 0x22
 800138a:	2301      	movs	r3, #1
 800138c:	21e7      	movs	r1, #231	; 0xe7
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f7ff ff15 	bl	80011be <read_data>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d117      	bne.n	80013ca <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 800139a:	89fb      	ldrh	r3, [r7, #14]
 800139c:	011b      	lsls	r3, r3, #4
 800139e:	b21b      	sxth	r3, r3
 80013a0:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 80013a4:	b21a      	sxth	r2, r3
 80013a6:	89fb      	ldrh	r3, [r7, #14]
 80013a8:	121b      	asrs	r3, r3, #8
 80013aa:	b21b      	sxth	r3, r3
 80013ac:	f003 030f 	and.w	r3, r3, #15
 80013b0:	b21b      	sxth	r3, r3
 80013b2:	4313      	orrs	r3, r2
 80013b4:	b21a      	sxth	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 80013ba:	89bb      	ldrh	r3, [r7, #12]
 80013bc:	091b      	lsrs	r3, r3, #4
 80013be:	b29b      	uxth	r3, r3
 80013c0:	b21a      	sxth	r2, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	841a      	strh	r2, [r3, #32]

		return true;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e000      	b.n	80013cc <read_hum_calibration_data+0xb8>
	}

	return false;
 80013ca:	2300      	movs	r3, #0
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3710      	adds	r7, #16
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b088      	sub	sp, #32
 80013d8:	af04      	add	r7, sp, #16
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	460b      	mov	r3, r1
 80013de:	70fb      	strb	r3, [r7, #3]
 80013e0:	4613      	mov	r3, r2
 80013e2:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80013f0:	78fb      	ldrb	r3, [r7, #3]
 80013f2:	b29a      	uxth	r2, r3
 80013f4:	89f9      	ldrh	r1, [r7, #14]
 80013f6:	f242 7310 	movw	r3, #10000	; 0x2710
 80013fa:	9302      	str	r3, [sp, #8]
 80013fc:	2301      	movs	r3, #1
 80013fe:	9301      	str	r3, [sp, #4]
 8001400:	1cbb      	adds	r3, r7, #2
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	2301      	movs	r3, #1
 8001406:	f004 fcd1 	bl	8005dac <HAL_I2C_Mem_Write>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d101      	bne.n	8001414 <write_register8+0x40>
		return false;
 8001410:	2300      	movs	r3, #0
 8001412:	e000      	b.n	8001416 <write_register8+0x42>
	else
		return true;
 8001414:	2301      	movs	r3, #1
}
 8001416:	4618      	mov	r0, r3
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 800141e:	b580      	push	{r7, lr}
 8001420:	b084      	sub	sp, #16
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
 8001426:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800142c:	2b76      	cmp	r3, #118	; 0x76
 800142e:	d005      	beq.n	800143c <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001434:	2b77      	cmp	r3, #119	; 0x77
 8001436:	d001      	beq.n	800143c <bmp280_init+0x1e>

		return false;
 8001438:	2300      	movs	r3, #0
 800143a:	e099      	b.n	8001570 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001442:	2301      	movs	r3, #1
 8001444:	21d0      	movs	r1, #208	; 0xd0
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f7ff feb9 	bl	80011be <read_data>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <bmp280_init+0x38>
		return false;
 8001452:	2300      	movs	r3, #0
 8001454:	e08c      	b.n	8001570 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800145c:	2b58      	cmp	r3, #88	; 0x58
 800145e:	d006      	beq.n	800146e <bmp280_init+0x50>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001466:	2b60      	cmp	r3, #96	; 0x60
 8001468:	d001      	beq.n	800146e <bmp280_init+0x50>

		return false;
 800146a:	2300      	movs	r3, #0
 800146c:	e080      	b.n	8001570 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 800146e:	22b6      	movs	r2, #182	; 0xb6
 8001470:	21e0      	movs	r1, #224	; 0xe0
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f7ff ffae 	bl	80013d4 <write_register8>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <bmp280_init+0x64>
		return false;
 800147e:	2300      	movs	r3, #0
 8001480:	e076      	b.n	8001570 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8001482:	f107 020c 	add.w	r2, r7, #12
 8001486:	2301      	movs	r3, #1
 8001488:	21f3      	movs	r1, #243	; 0xf3
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f7ff fe97 	bl	80011be <read_data>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1f5      	bne.n	8001482 <bmp280_init+0x64>
				&& (status & 1) == 0)
 8001496:	7b3b      	ldrb	r3, [r7, #12]
 8001498:	f003 0301 	and.w	r3, r3, #1
 800149c:	2b00      	cmp	r3, #0
 800149e:	d1f0      	bne.n	8001482 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f7ff feb5 	bl	8001210 <read_calibration_data>
 80014a6:	4603      	mov	r3, r0
 80014a8:	f083 0301 	eor.w	r3, r3, #1
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d100      	bne.n	80014b4 <bmp280_init+0x96>
 80014b2:	e001      	b.n	80014b8 <bmp280_init+0x9a>
		return false;
 80014b4:	2300      	movs	r3, #0
 80014b6:	e05b      	b.n	8001570 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80014be:	2b60      	cmp	r3, #96	; 0x60
 80014c0:	d10a      	bne.n	80014d8 <bmp280_init+0xba>
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f7ff ff26 	bl	8001314 <read_hum_calibration_data>
 80014c8:	4603      	mov	r3, r0
 80014ca:	f083 0301 	eor.w	r3, r3, #1
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <bmp280_init+0xba>
		return false;
 80014d4:	2300      	movs	r3, #0
 80014d6:	e04b      	b.n	8001570 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	795b      	ldrb	r3, [r3, #5]
 80014dc:	015b      	lsls	r3, r3, #5
 80014de:	b25a      	sxtb	r2, r3
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	785b      	ldrb	r3, [r3, #1]
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	b25b      	sxtb	r3, r3
 80014e8:	4313      	orrs	r3, r2
 80014ea:	b25b      	sxtb	r3, r3
 80014ec:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 80014ee:	7bfb      	ldrb	r3, [r7, #15]
 80014f0:	461a      	mov	r2, r3
 80014f2:	21f5      	movs	r1, #245	; 0xf5
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f7ff ff6d 	bl	80013d4 <write_register8>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <bmp280_init+0xe6>
		return false;
 8001500:	2300      	movs	r3, #0
 8001502:	e035      	b.n	8001570 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d102      	bne.n	8001512 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	2200      	movs	r2, #0
 8001510:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	78db      	ldrb	r3, [r3, #3]
 8001516:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8001518:	b25a      	sxtb	r2, r3
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	789b      	ldrb	r3, [r3, #2]
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	b25b      	sxtb	r3, r3
 8001522:	4313      	orrs	r3, r2
 8001524:	b25a      	sxtb	r2, r3
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	b25b      	sxtb	r3, r3
 800152c:	4313      	orrs	r3, r2
 800152e:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001530:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001538:	2b60      	cmp	r3, #96	; 0x60
 800153a:	d10d      	bne.n	8001558 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	791b      	ldrb	r3, [r3, #4]
 8001540:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8001542:	7b7b      	ldrb	r3, [r7, #13]
 8001544:	461a      	mov	r2, r3
 8001546:	21f2      	movs	r1, #242	; 0xf2
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f7ff ff43 	bl	80013d4 <write_register8>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <bmp280_init+0x13a>
			return false;
 8001554:	2300      	movs	r3, #0
 8001556:	e00b      	b.n	8001570 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8001558:	7bbb      	ldrb	r3, [r7, #14]
 800155a:	461a      	mov	r2, r3
 800155c:	21f4      	movs	r1, #244	; 0xf4
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f7ff ff38 	bl	80013d4 <write_register8>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <bmp280_init+0x150>
		return false;
 800156a:	2300      	movs	r3, #0
 800156c:	e000      	b.n	8001570 <bmp280_init+0x152>
	}

	return true;
 800156e:	2301      	movs	r3, #1
}
 8001570:	4618      	mov	r0, r3
 8001572:	3710      	adds	r7, #16
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <bmp280_is_measuring>:
		return false;
	}
	return true;
}

bool bmp280_is_measuring(BMP280_HandleTypedef *dev) {
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
	uint8_t status;
	if (read_data(dev, BMP280_REG_STATUS, &status, 1))
 8001580:	f107 020f 	add.w	r2, r7, #15
 8001584:	2301      	movs	r3, #1
 8001586:	21f3      	movs	r1, #243	; 0xf3
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f7ff fe18 	bl	80011be <read_data>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <bmp280_is_measuring+0x20>
		return false;
 8001594:	2300      	movs	r3, #0
 8001596:	e007      	b.n	80015a8 <bmp280_is_measuring+0x30>
	if (status & (1 << 3)) {
 8001598:	7bfb      	ldrb	r3, [r7, #15]
 800159a:	f003 0308 	and.w	r3, r3, #8
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <bmp280_is_measuring+0x2e>
		return true;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e000      	b.n	80015a8 <bmp280_is_measuring+0x30>
	}
	return false;
 80015a6:	2300      	movs	r3, #0
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3710      	adds	r7, #16
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 80015b0:	b480      	push	{r7}
 80015b2:	b087      	sub	sp, #28
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	10da      	asrs	r2, r3, #3
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	881b      	ldrh	r3, [r3, #0]
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 80015c8:	68fa      	ldr	r2, [r7, #12]
 80015ca:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80015ce:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80015d2:	12db      	asrs	r3, r3, #11
 80015d4:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	111b      	asrs	r3, r3, #4
 80015da:	68fa      	ldr	r2, [r7, #12]
 80015dc:	8812      	ldrh	r2, [r2, #0]
 80015de:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 80015e0:	68ba      	ldr	r2, [r7, #8]
 80015e2:	1112      	asrs	r2, r2, #4
 80015e4:	68f9      	ldr	r1, [r7, #12]
 80015e6:	8809      	ldrh	r1, [r1, #0]
 80015e8:	1a52      	subs	r2, r2, r1
 80015ea:	fb02 f303 	mul.w	r3, r2, r3
 80015ee:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 80015f0:	68fa      	ldr	r2, [r7, #12]
 80015f2:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80015f6:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80015fa:	139b      	asrs	r3, r3, #14
 80015fc:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 80015fe:	697a      	ldr	r2, [r7, #20]
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	441a      	add	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	4613      	mov	r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	4413      	add	r3, r2
 8001612:	3380      	adds	r3, #128	; 0x80
 8001614:	121b      	asrs	r3, r3, #8
}
 8001616:	4618      	mov	r0, r3
 8001618:	371c      	adds	r7, #28
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8001622:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8001626:	b08a      	sub	sp, #40	; 0x28
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4619      	mov	r1, r3
 8001634:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001638:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 800163c:	f142 34ff 	adc.w	r4, r2, #4294967295
 8001640:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8001644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001646:	6a3a      	ldr	r2, [r7, #32]
 8001648:	fb02 f203 	mul.w	r2, r2, r3
 800164c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164e:	6a39      	ldr	r1, [r7, #32]
 8001650:	fb01 f303 	mul.w	r3, r1, r3
 8001654:	441a      	add	r2, r3
 8001656:	6a39      	ldr	r1, [r7, #32]
 8001658:	6a3b      	ldr	r3, [r7, #32]
 800165a:	fba1 3403 	umull	r3, r4, r1, r3
 800165e:	4422      	add	r2, r4
 8001660:	4614      	mov	r4, r2
 8001662:	68fa      	ldr	r2, [r7, #12]
 8001664:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8001668:	b211      	sxth	r1, r2
 800166a:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800166e:	fb01 f504 	mul.w	r5, r1, r4
 8001672:	fb03 f002 	mul.w	r0, r3, r2
 8001676:	4428      	add	r0, r5
 8001678:	fba3 3401 	umull	r3, r4, r3, r1
 800167c:	1902      	adds	r2, r0, r4
 800167e:	4614      	mov	r4, r2
 8001680:	e9c7 3406 	strd	r3, r4, [r7, #24]
 8001684:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800168e:	b21b      	sxth	r3, r3
 8001690:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001694:	6a3a      	ldr	r2, [r7, #32]
 8001696:	fb04 f102 	mul.w	r1, r4, r2
 800169a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800169c:	fb03 f202 	mul.w	r2, r3, r2
 80016a0:	1888      	adds	r0, r1, r2
 80016a2:	6a3a      	ldr	r2, [r7, #32]
 80016a4:	fba2 1203 	umull	r1, r2, r2, r3
 80016a8:	1883      	adds	r3, r0, r2
 80016aa:	461a      	mov	r2, r3
 80016ac:	f04f 0500 	mov.w	r5, #0
 80016b0:	f04f 0600 	mov.w	r6, #0
 80016b4:	0456      	lsls	r6, r2, #17
 80016b6:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 80016ba:	044d      	lsls	r5, r1, #17
 80016bc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80016c0:	186b      	adds	r3, r5, r1
 80016c2:	eb46 0402 	adc.w	r4, r6, r2
 80016c6:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80016d0:	b219      	sxth	r1, r3
 80016d2:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80016d6:	f04f 0500 	mov.w	r5, #0
 80016da:	f04f 0600 	mov.w	r6, #0
 80016de:	00ce      	lsls	r6, r1, #3
 80016e0:	2500      	movs	r5, #0
 80016e2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80016e6:	186b      	adds	r3, r5, r1
 80016e8:	eb46 0402 	adc.w	r4, r6, r2
 80016ec:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80016f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f2:	6a3a      	ldr	r2, [r7, #32]
 80016f4:	fb02 f203 	mul.w	r2, r2, r3
 80016f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fa:	6a39      	ldr	r1, [r7, #32]
 80016fc:	fb01 f303 	mul.w	r3, r1, r3
 8001700:	441a      	add	r2, r3
 8001702:	6a39      	ldr	r1, [r7, #32]
 8001704:	6a3b      	ldr	r3, [r7, #32]
 8001706:	fba1 3403 	umull	r3, r4, r1, r3
 800170a:	4422      	add	r2, r4
 800170c:	4614      	mov	r4, r2
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8001714:	b211      	sxth	r1, r2
 8001716:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800171a:	fb01 f504 	mul.w	r5, r1, r4
 800171e:	fb03 f002 	mul.w	r0, r3, r2
 8001722:	4428      	add	r0, r5
 8001724:	fba3 3401 	umull	r3, r4, r3, r1
 8001728:	1902      	adds	r2, r0, r4
 800172a:	4614      	mov	r4, r2
 800172c:	f04f 0100 	mov.w	r1, #0
 8001730:	f04f 0200 	mov.w	r2, #0
 8001734:	0a19      	lsrs	r1, r3, #8
 8001736:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 800173a:	1222      	asrs	r2, r4, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001742:	b21b      	sxth	r3, r3
 8001744:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001748:	6a38      	ldr	r0, [r7, #32]
 800174a:	fb04 f500 	mul.w	r5, r4, r0
 800174e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001750:	fb03 f000 	mul.w	r0, r3, r0
 8001754:	4428      	add	r0, r5
 8001756:	6a3d      	ldr	r5, [r7, #32]
 8001758:	fba5 5603 	umull	r5, r6, r5, r3
 800175c:	1983      	adds	r3, r0, r6
 800175e:	461e      	mov	r6, r3
 8001760:	f04f 0b00 	mov.w	fp, #0
 8001764:	f04f 0c00 	mov.w	ip, #0
 8001768:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 800176c:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 8001770:	ea4f 3b05 	mov.w	fp, r5, lsl #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001774:	eb1b 0301 	adds.w	r3, fp, r1
 8001778:	eb4c 0402 	adc.w	r4, ip, r2
 800177c:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8001780:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001784:	1c19      	adds	r1, r3, #0
 8001786:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	88db      	ldrh	r3, [r3, #6]
 800178e:	b29b      	uxth	r3, r3
 8001790:	f04f 0400 	mov.w	r4, #0
 8001794:	fb03 f502 	mul.w	r5, r3, r2
 8001798:	fb01 f004 	mul.w	r0, r1, r4
 800179c:	4428      	add	r0, r5
 800179e:	fba1 3403 	umull	r3, r4, r1, r3
 80017a2:	1902      	adds	r2, r0, r4
 80017a4:	4614      	mov	r4, r2
 80017a6:	f04f 0100 	mov.w	r1, #0
 80017aa:	f04f 0200 	mov.w	r2, #0
 80017ae:	1061      	asrs	r1, r4, #1
 80017b0:	17e2      	asrs	r2, r4, #31
 80017b2:	e9c7 1208 	strd	r1, r2, [r7, #32]

	if (var1 == 0) {
 80017b6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80017ba:	4323      	orrs	r3, r4
 80017bc:	d101      	bne.n	80017c2 <compensate_pressure+0x1a0>
		return 0;  // avoid exception caused by division by zero
 80017be:	2300      	movs	r3, #0
 80017c0:	e0d4      	b.n	800196c <compensate_pressure+0x34a>
	}

	p = 1048576 - adc_press;
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80017c8:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80017cc:	e9c7 3404 	strd	r3, r4, [r7, #16]
	p = (((p << 31) - var2) * 3125) / var1;
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	ea4f 0963 	mov.w	r9, r3, asr #1
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	ea4f 78c3 	mov.w	r8, r3, lsl #31
 80017dc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80017e0:	4645      	mov	r5, r8
 80017e2:	464e      	mov	r6, r9
 80017e4:	1aed      	subs	r5, r5, r3
 80017e6:	eb66 0604 	sbc.w	r6, r6, r4
 80017ea:	46a8      	mov	r8, r5
 80017ec:	46b1      	mov	r9, r6
 80017ee:	eb18 0308 	adds.w	r3, r8, r8
 80017f2:	eb49 0409 	adc.w	r4, r9, r9
 80017f6:	4698      	mov	r8, r3
 80017f8:	46a1      	mov	r9, r4
 80017fa:	eb18 0805 	adds.w	r8, r8, r5
 80017fe:	eb49 0906 	adc.w	r9, r9, r6
 8001802:	f04f 0100 	mov.w	r1, #0
 8001806:	f04f 0200 	mov.w	r2, #0
 800180a:	ea4f 1289 	mov.w	r2, r9, lsl #6
 800180e:	ea42 6298 	orr.w	r2, r2, r8, lsr #26
 8001812:	ea4f 1188 	mov.w	r1, r8, lsl #6
 8001816:	eb18 0801 	adds.w	r8, r8, r1
 800181a:	eb49 0902 	adc.w	r9, r9, r2
 800181e:	f04f 0100 	mov.w	r1, #0
 8001822:	f04f 0200 	mov.w	r2, #0
 8001826:	ea4f 0289 	mov.w	r2, r9, lsl #2
 800182a:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 800182e:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8001832:	4688      	mov	r8, r1
 8001834:	4691      	mov	r9, r2
 8001836:	eb18 0805 	adds.w	r8, r8, r5
 800183a:	eb49 0906 	adc.w	r9, r9, r6
 800183e:	f04f 0100 	mov.w	r1, #0
 8001842:	f04f 0200 	mov.w	r2, #0
 8001846:	ea4f 0289 	mov.w	r2, r9, lsl #2
 800184a:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 800184e:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8001852:	4688      	mov	r8, r1
 8001854:	4691      	mov	r9, r2
 8001856:	eb18 0005 	adds.w	r0, r8, r5
 800185a:	eb49 0106 	adc.w	r1, r9, r6
 800185e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001862:	f7ff f9f1 	bl	8000c48 <__aeabi_ldivmod>
 8001866:	4603      	mov	r3, r0
 8001868:	460c      	mov	r4, r1
 800186a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001874:	b219      	sxth	r1, r3
 8001876:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800187a:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 800187e:	f04f 0300 	mov.w	r3, #0
 8001882:	f04f 0400 	mov.w	r4, #0
 8001886:	0b6b      	lsrs	r3, r5, #13
 8001888:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 800188c:	1374      	asrs	r4, r6, #13
 800188e:	fb03 f502 	mul.w	r5, r3, r2
 8001892:	fb01 f004 	mul.w	r0, r1, r4
 8001896:	4428      	add	r0, r5
 8001898:	fba1 1203 	umull	r1, r2, r1, r3
 800189c:	1883      	adds	r3, r0, r2
 800189e:	461a      	mov	r2, r3
 80018a0:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 80018a4:	f04f 0300 	mov.w	r3, #0
 80018a8:	f04f 0400 	mov.w	r4, #0
 80018ac:	0b6b      	lsrs	r3, r5, #13
 80018ae:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 80018b2:	1374      	asrs	r4, r6, #13
 80018b4:	fb03 f502 	mul.w	r5, r3, r2
 80018b8:	fb01 f004 	mul.w	r0, r1, r4
 80018bc:	4428      	add	r0, r5
 80018be:	fba1 1203 	umull	r1, r2, r1, r3
 80018c2:	1883      	adds	r3, r0, r2
 80018c4:	461a      	mov	r2, r3
 80018c6:	f04f 0300 	mov.w	r3, #0
 80018ca:	f04f 0400 	mov.w	r4, #0
 80018ce:	0e4b      	lsrs	r3, r1, #25
 80018d0:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80018d4:	1654      	asrs	r4, r2, #25
 80018d6:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80018e0:	b21b      	sxth	r3, r3
 80018e2:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	fb04 f102 	mul.w	r1, r4, r2
 80018ec:	697a      	ldr	r2, [r7, #20]
 80018ee:	fb03 f202 	mul.w	r2, r3, r2
 80018f2:	1888      	adds	r0, r1, r2
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	fba2 1203 	umull	r1, r2, r2, r3
 80018fa:	1883      	adds	r3, r0, r2
 80018fc:	461a      	mov	r2, r3
 80018fe:	f04f 0300 	mov.w	r3, #0
 8001902:	f04f 0400 	mov.w	r4, #0
 8001906:	0ccb      	lsrs	r3, r1, #19
 8001908:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 800190c:	14d4      	asrs	r4, r2, #19
 800190e:	e9c7 3406 	strd	r3, r4, [r7, #24]

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8001912:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001916:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800191a:	eb11 0803 	adds.w	r8, r1, r3
 800191e:	eb42 0904 	adc.w	r9, r2, r4
 8001922:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001926:	eb13 0508 	adds.w	r5, r3, r8
 800192a:	eb44 0609 	adc.w	r6, r4, r9
 800192e:	f04f 0100 	mov.w	r1, #0
 8001932:	f04f 0200 	mov.w	r2, #0
 8001936:	0a29      	lsrs	r1, r5, #8
 8001938:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 800193c:	1232      	asrs	r2, r6, #8
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001944:	b21d      	sxth	r5, r3
 8001946:	ea4f 76e5 	mov.w	r6, r5, asr #31
 800194a:	f04f 0800 	mov.w	r8, #0
 800194e:	f04f 0900 	mov.w	r9, #0
 8001952:	ea4f 1906 	mov.w	r9, r6, lsl #4
 8001956:	ea49 7915 	orr.w	r9, r9, r5, lsr #28
 800195a:	ea4f 1805 	mov.w	r8, r5, lsl #4
 800195e:	eb18 0301 	adds.w	r3, r8, r1
 8001962:	eb49 0402 	adc.w	r4, r9, r2
 8001966:	e9c7 3404 	strd	r3, r4, [r7, #16]
	return p;
 800196a:	693b      	ldr	r3, [r7, #16]
}
 800196c:	4618      	mov	r0, r3
 800196e:	3728      	adds	r7, #40	; 0x28
 8001970:	46bd      	mov	sp, r7
 8001972:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}

08001976 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8001976:	b480      	push	{r7}
 8001978:	b087      	sub	sp, #28
 800197a:	af00      	add	r7, sp, #0
 800197c:	60f8      	str	r0, [r7, #12]
 800197e:	60b9      	str	r1, [r7, #8]
 8001980:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001988:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	039a      	lsls	r2, r3, #14
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001994:	051b      	lsls	r3, r3, #20
 8001996:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800199e:	4619      	mov	r1, r3
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	fb03 f301 	mul.w	r3, r3, r1
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80019ac:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 80019ae:	68fa      	ldr	r2, [r7, #12]
 80019b0:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 80019b4:	4611      	mov	r1, r2
 80019b6:	697a      	ldr	r2, [r7, #20]
 80019b8:	fb02 f201 	mul.w	r2, r2, r1
 80019bc:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 80019be:	68f9      	ldr	r1, [r7, #12]
 80019c0:	7f09      	ldrb	r1, [r1, #28]
 80019c2:	4608      	mov	r0, r1
 80019c4:	6979      	ldr	r1, [r7, #20]
 80019c6:	fb01 f100 	mul.w	r1, r1, r0
 80019ca:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 80019cc:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 80019d0:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 80019d4:	1292      	asrs	r2, r2, #10
 80019d6:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 80019da:	68f9      	ldr	r1, [r7, #12]
 80019dc:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 80019e0:	fb01 f202 	mul.w	r2, r1, r2
 80019e4:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80019e8:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 80019ea:	fb02 f303 	mul.w	r3, r2, r3
 80019ee:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	13db      	asrs	r3, r3, #15
 80019f4:	697a      	ldr	r2, [r7, #20]
 80019f6:	13d2      	asrs	r2, r2, #15
 80019f8:	fb02 f303 	mul.w	r3, r2, r3
 80019fc:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 80019fe:	68fa      	ldr	r2, [r7, #12]
 8001a00:	7e12      	ldrb	r2, [r2, #24]
 8001a02:	fb02 f303 	mul.w	r3, r2, r3
 8001a06:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8001a08:	697a      	ldr	r2, [r7, #20]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001a14:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001a1c:	bfa8      	it	ge
 8001a1e:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001a22:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	131b      	asrs	r3, r3, #12
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	371c      	adds	r7, #28
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b08c      	sub	sp, #48	; 0x30
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
 8001a40:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001a48:	2b60      	cmp	r3, #96	; 0x60
 8001a4a:	d007      	beq.n	8001a5c <bmp280_read_fixed+0x28>
		if (humidity)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d002      	beq.n	8001a58 <bmp280_read_fixed+0x24>
			*humidity = 0;
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <bmp280_read_fixed+0x32>
 8001a62:	2308      	movs	r3, #8
 8001a64:	e000      	b.n	8001a68 <bmp280_read_fixed+0x34>
 8001a66:	2306      	movs	r3, #6
 8001a68:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8001a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	f107 0218 	add.w	r2, r7, #24
 8001a72:	21f7      	movs	r1, #247	; 0xf7
 8001a74:	68f8      	ldr	r0, [r7, #12]
 8001a76:	f7ff fba2 	bl	80011be <read_data>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <bmp280_read_fixed+0x50>
		return false;
 8001a80:	2300      	movs	r3, #0
 8001a82:	e038      	b.n	8001af6 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001a84:	7e3b      	ldrb	r3, [r7, #24]
 8001a86:	031a      	lsls	r2, r3, #12
 8001a88:	7e7b      	ldrb	r3, [r7, #25]
 8001a8a:	011b      	lsls	r3, r3, #4
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	7eba      	ldrb	r2, [r7, #26]
 8001a90:	0912      	lsrs	r2, r2, #4
 8001a92:	b2d2      	uxtb	r2, r2
 8001a94:	4313      	orrs	r3, r2
 8001a96:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001a98:	7efb      	ldrb	r3, [r7, #27]
 8001a9a:	031a      	lsls	r2, r3, #12
 8001a9c:	7f3b      	ldrb	r3, [r7, #28]
 8001a9e:	011b      	lsls	r3, r3, #4
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	7f7a      	ldrb	r2, [r7, #29]
 8001aa4:	0912      	lsrs	r2, r2, #4
 8001aa6:	b2d2      	uxtb	r2, r2
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8001aac:	f107 0314 	add.w	r3, r7, #20
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ab4:	68f8      	ldr	r0, [r7, #12]
 8001ab6:	f7ff fd7b 	bl	80015b0 <compensate_temperature>
 8001aba:	4602      	mov	r2, r0
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ac6:	68f8      	ldr	r0, [r7, #12]
 8001ac8:	f7ff fdab 	bl	8001622 <compensate_pressure>
 8001acc:	4602      	mov	r2, r0
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d00d      	beq.n	8001af4 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001ad8:	7fbb      	ldrb	r3, [r7, #30]
 8001ada:	021b      	lsls	r3, r3, #8
 8001adc:	7ffa      	ldrb	r2, [r7, #31]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	6a39      	ldr	r1, [r7, #32]
 8001ae8:	68f8      	ldr	r0, [r7, #12]
 8001aea:	f7ff ff44 	bl	8001976 <compensate_humidity>
 8001aee:	4602      	mov	r2, r0
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001af4:	2301      	movs	r3, #1
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3730      	adds	r7, #48	; 0x30
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
	...

08001b00 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b088      	sub	sp, #32
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
 8001b0c:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d002      	beq.n	8001b1a <bmp280_read_float+0x1a>
 8001b14:	f107 0314 	add.w	r3, r7, #20
 8001b18:	e000      	b.n	8001b1c <bmp280_read_float+0x1c>
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	f107 0218 	add.w	r2, r7, #24
 8001b20:	f107 011c 	add.w	r1, r7, #28
 8001b24:	68f8      	ldr	r0, [r7, #12]
 8001b26:	f7ff ff85 	bl	8001a34 <bmp280_read_fixed>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d028      	beq.n	8001b82 <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	ee07 3a90 	vmov	s15, r3
 8001b36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b3a:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001b8c <bmp280_read_float+0x8c>
 8001b3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	ee07 3a90 	vmov	s15, r3
 8001b4e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b52:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001b90 <bmp280_read_float+0x90>
 8001b56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d00b      	beq.n	8001b7e <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	ee07 3a90 	vmov	s15, r3
 8001b6c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b70:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001b94 <bmp280_read_float+0x94>
 8001b74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e000      	b.n	8001b84 <bmp280_read_float+0x84>
	}

	return false;
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3720      	adds	r7, #32
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	42c80000 	.word	0x42c80000
 8001b90:	43800000 	.word	0x43800000
 8001b94:	44800000 	.word	0x44800000

08001b98 <bmp280_read_altitude>:

float bmp280_read_altitude(float pressurehPa, float seaLevelPressurehPa){
 8001b98:	b590      	push	{r4, r7, lr}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001ba2:	edc7 0a00 	vstr	s1, [r7]
	float altitude = 44330 * (1.0 - pow(pressurehPa / seaLevelPressurehPa, 0.1903));
 8001ba6:	ed97 7a01 	vldr	s14, [r7, #4]
 8001baa:	edd7 7a00 	vldr	s15, [r7]
 8001bae:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001bb2:	ee16 0a90 	vmov	r0, s13
 8001bb6:	f7fe fcc7 	bl	8000548 <__aeabi_f2d>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	460c      	mov	r4, r1
 8001bbe:	ed9f 1b14 	vldr	d1, [pc, #80]	; 8001c10 <bmp280_read_altitude+0x78>
 8001bc2:	ec44 3b10 	vmov	d0, r3, r4
 8001bc6:	f009 fcc7 	bl	800b558 <pow>
 8001bca:	ec54 3b10 	vmov	r3, r4, d0
 8001bce:	461a      	mov	r2, r3
 8001bd0:	4623      	mov	r3, r4
 8001bd2:	f04f 0000 	mov.w	r0, #0
 8001bd6:	4912      	ldr	r1, [pc, #72]	; (8001c20 <bmp280_read_altitude+0x88>)
 8001bd8:	f7fe fb56 	bl	8000288 <__aeabi_dsub>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	460c      	mov	r4, r1
 8001be0:	4618      	mov	r0, r3
 8001be2:	4621      	mov	r1, r4
 8001be4:	a30c      	add	r3, pc, #48	; (adr r3, 8001c18 <bmp280_read_altitude+0x80>)
 8001be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bea:	f7fe fd05 	bl	80005f8 <__aeabi_dmul>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	460c      	mov	r4, r1
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	4621      	mov	r1, r4
 8001bf6:	f7fe ffd7 	bl	8000ba8 <__aeabi_d2f>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	60fb      	str	r3, [r7, #12]
	return altitude;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	ee07 3a90 	vmov	s15, r3
}
 8001c04:	eeb0 0a67 	vmov.f32	s0, s15
 8001c08:	3714      	adds	r7, #20
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd90      	pop	{r4, r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	1a36e2eb 	.word	0x1a36e2eb
 8001c14:	3fc85bc0 	.word	0x3fc85bc0
 8001c18:	00000000 	.word	0x00000000
 8001c1c:	40e5a540 	.word	0x40e5a540
 8001c20:	3ff00000 	.word	0x3ff00000
 8001c24:	00000000 	.word	0x00000000

08001c28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c28:	b5b0      	push	{r4, r5, r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c2c:	f003 f8c0 	bl	8004db0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c30:	f000 f952 	bl	8001ed8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c34:	f000 fd9c 	bl	8002770 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c38:	f000 fd72 	bl	8002720 <MX_DMA_Init>
  MX_I2C1_Init();
 8001c3c:	f000 f9b6 	bl	8001fac <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001c40:	f000 fcf0 	bl	8002624 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001c44:	f000 fd42 	bl	80026cc <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8001c48:	f000 fd16 	bl	8002678 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001c4c:	f000 faa2 	bl	8002194 <MX_TIM3_Init>
  MX_I2C3_Init();
 8001c50:	f000 f9da 	bl	8002008 <MX_I2C3_Init>
  MX_TIM2_Init();
 8001c54:	f000 fa06 	bl	8002064 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001c58:	f000 fb18 	bl	800228c <MX_TIM4_Init>
  MX_TIM5_Init();
 8001c5c:	f000 fb86 	bl	800236c <MX_TIM5_Init>
  MX_TIM9_Init();
 8001c60:	f000 fc60 	bl	8002524 <MX_TIM9_Init>
  MX_TIM7_Init();
 8001c64:	f000 fc28 	bl	80024b8 <MX_TIM7_Init>
  MX_TIM6_Init();
 8001c68:	f000 fbf0 	bl	800244c <MX_TIM6_Init>
  MX_TIM10_Init();
 8001c6c:	f000 fcb6 	bl	80025dc <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  //init sensor

  //CompassInit();
  BMPInit();
 8001c70:	f000 ff02 	bl	8002a78 <BMPInit>
  GPSInit();
 8001c74:	f000 fff0 	bl	8002c58 <GPSInit>
  IMUInit();
 8001c78:	f001 f8ae 	bl	8002dd8 <IMUInit>

  //Remote init
  RemoteInit();
 8001c7c:	f001 f824 	bl	8002cc8 <RemoteInit>

  //Inisialisasi PID
  //ROLL
  //KP, KI, KD
  PIDInit(&PIDRoll, 0.0, 0.0, 0.0, 0.01);
 8001c80:	ed9f 3b73 	vldr	d3, [pc, #460]	; 8001e50 <main+0x228>
 8001c84:	ed9f 2b74 	vldr	d2, [pc, #464]	; 8001e58 <main+0x230>
 8001c88:	ed9f 1b73 	vldr	d1, [pc, #460]	; 8001e58 <main+0x230>
 8001c8c:	ed9f 0b72 	vldr	d0, [pc, #456]	; 8001e58 <main+0x230>
 8001c90:	4879      	ldr	r0, [pc, #484]	; (8001e78 <main+0x250>)
 8001c92:	f001 ffdf 	bl	8003c54 <PIDInit>
  //PITCH
  PIDInit(&PIDPitch, 0.0f, 0.0f, 0.0f, 0.01);
 8001c96:	ed9f 3b6e 	vldr	d3, [pc, #440]	; 8001e50 <main+0x228>
 8001c9a:	ed9f 2b6f 	vldr	d2, [pc, #444]	; 8001e58 <main+0x230>
 8001c9e:	ed9f 1b6e 	vldr	d1, [pc, #440]	; 8001e58 <main+0x230>
 8001ca2:	ed9f 0b6d 	vldr	d0, [pc, #436]	; 8001e58 <main+0x230>
 8001ca6:	4875      	ldr	r0, [pc, #468]	; (8001e7c <main+0x254>)
 8001ca8:	f001 ffd4 	bl	8003c54 <PIDInit>
  //YAW
  PIDInit(&PIDYaw, 0.0f, 0.0f, 0.0f, 0.01);
 8001cac:	ed9f 3b68 	vldr	d3, [pc, #416]	; 8001e50 <main+0x228>
 8001cb0:	ed9f 2b69 	vldr	d2, [pc, #420]	; 8001e58 <main+0x230>
 8001cb4:	ed9f 1b68 	vldr	d1, [pc, #416]	; 8001e58 <main+0x230>
 8001cb8:	ed9f 0b67 	vldr	d0, [pc, #412]	; 8001e58 <main+0x230>
 8001cbc:	4870      	ldr	r0, [pc, #448]	; (8001e80 <main+0x258>)
 8001cbe:	f001 ffc9 	bl	8003c54 <PIDInit>
  //ALTITUDE
  PIDInit(&PIDAltitude, 0.0201f, 0.0035f, 0.00583f, 0.01);
 8001cc2:	ed9f 3b63 	vldr	d3, [pc, #396]	; 8001e50 <main+0x228>
 8001cc6:	ed9f 2b66 	vldr	d2, [pc, #408]	; 8001e60 <main+0x238>
 8001cca:	ed9f 1b67 	vldr	d1, [pc, #412]	; 8001e68 <main+0x240>
 8001cce:	ed9f 0b68 	vldr	d0, [pc, #416]	; 8001e70 <main+0x248>
 8001cd2:	486c      	ldr	r0, [pc, #432]	; (8001e84 <main+0x25c>)
 8001cd4:	f001 ffbe 	bl	8003c54 <PIDInit>

  ESCInit();
 8001cd8:	f000 fe04 	bl	80028e4 <ESCInit>

  HAL_TIM_Base_Start_IT(&htim10);
 8001cdc:	486a      	ldr	r0, [pc, #424]	; (8001e88 <main+0x260>)
 8001cde:	f005 fb8c 	bl	80073fa <HAL_TIM_Base_Start_IT>


  strSize = sprintf((char*)buffer, "Mulai\r\n");
 8001ce2:	4a6a      	ldr	r2, [pc, #424]	; (8001e8c <main+0x264>)
 8001ce4:	4b6a      	ldr	r3, [pc, #424]	; (8001e90 <main+0x268>)
 8001ce6:	cb03      	ldmia	r3!, {r0, r1}
 8001ce8:	6010      	str	r0, [r2, #0]
 8001cea:	6051      	str	r1, [r2, #4]
 8001cec:	2307      	movs	r3, #7
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	4b68      	ldr	r3, [pc, #416]	; (8001e94 <main+0x26c>)
 8001cf2:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart1, buffer, strSize, 10);
 8001cf4:	4b67      	ldr	r3, [pc, #412]	; (8001e94 <main+0x26c>)
 8001cf6:	881a      	ldrh	r2, [r3, #0]
 8001cf8:	230a      	movs	r3, #10
 8001cfa:	4964      	ldr	r1, [pc, #400]	; (8001e8c <main+0x264>)
 8001cfc:	4866      	ldr	r0, [pc, #408]	; (8001e98 <main+0x270>)
 8001cfe:	f006 fd78 	bl	80087f2 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  getBMPAltitude();
 8001d02:	f001 f941 	bl	8002f88 <getBMPAltitude>
	  getIMUData(&IMU_Data);
 8001d06:	4865      	ldr	r0, [pc, #404]	; (8001e9c <main+0x274>)
 8001d08:	f001 f9ae 	bl	8003068 <getIMUData>
	  if(inputFlyMode >= 1000 && inputFlyMode <= 1050 && fly_mode != FLY_MODE_OFF){
 8001d0c:	4b64      	ldr	r3, [pc, #400]	; (8001ea0 <main+0x278>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d14:	db39      	blt.n	8001d8a <main+0x162>
 8001d16:	4b62      	ldr	r3, [pc, #392]	; (8001ea0 <main+0x278>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f240 421a 	movw	r2, #1050	; 0x41a
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	dc33      	bgt.n	8001d8a <main+0x162>
 8001d22:	4b60      	ldr	r3, [pc, #384]	; (8001ea4 <main+0x27c>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d02f      	beq.n	8001d8a <main+0x162>
		  HAL_TIM_Base_Stop_IT(&htim7);
 8001d2a:	485f      	ldr	r0, [pc, #380]	; (8001ea8 <main+0x280>)
 8001d2c:	f005 fb89 	bl	8007442 <HAL_TIM_Base_Stop_IT>
		  fly_mode = FLY_MODE_OFF;
 8001d30:	4b5c      	ldr	r3, [pc, #368]	; (8001ea4 <main+0x27c>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	701a      	strb	r2, [r3, #0]
		  PIDReset(&PIDRoll);
 8001d36:	4850      	ldr	r0, [pc, #320]	; (8001e78 <main+0x250>)
 8001d38:	f001 ff64 	bl	8003c04 <PIDReset>
		  PIDReset(&PIDPitch);
 8001d3c:	484f      	ldr	r0, [pc, #316]	; (8001e7c <main+0x254>)
 8001d3e:	f001 ff61 	bl	8003c04 <PIDReset>
		  PIDReset(&PIDYaw);
 8001d42:	484f      	ldr	r0, [pc, #316]	; (8001e80 <main+0x258>)
 8001d44:	f001 ff5e 	bl	8003c04 <PIDReset>
		  pulseESC1 = pulseESC2 = pulseESC3 = pulseESC4 = 1000;
 8001d48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d4c:	4a57      	ldr	r2, [pc, #348]	; (8001eac <main+0x284>)
 8001d4e:	6013      	str	r3, [r2, #0]
 8001d50:	4a57      	ldr	r2, [pc, #348]	; (8001eb0 <main+0x288>)
 8001d52:	6013      	str	r3, [r2, #0]
 8001d54:	4a57      	ldr	r2, [pc, #348]	; (8001eb4 <main+0x28c>)
 8001d56:	6013      	str	r3, [r2, #0]
 8001d58:	4a57      	ldr	r2, [pc, #348]	; (8001eb8 <main+0x290>)
 8001d5a:	6013      	str	r3, [r2, #0]
		  strSize = sprintf((char*)buffer, "Wahana Mode Off\r\n");
 8001d5c:	4a4b      	ldr	r2, [pc, #300]	; (8001e8c <main+0x264>)
 8001d5e:	4b57      	ldr	r3, [pc, #348]	; (8001ebc <main+0x294>)
 8001d60:	4615      	mov	r5, r2
 8001d62:	461c      	mov	r4, r3
 8001d64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d66:	6028      	str	r0, [r5, #0]
 8001d68:	6069      	str	r1, [r5, #4]
 8001d6a:	60aa      	str	r2, [r5, #8]
 8001d6c:	60eb      	str	r3, [r5, #12]
 8001d6e:	8823      	ldrh	r3, [r4, #0]
 8001d70:	822b      	strh	r3, [r5, #16]
 8001d72:	2311      	movs	r3, #17
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	4b47      	ldr	r3, [pc, #284]	; (8001e94 <main+0x26c>)
 8001d78:	801a      	strh	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1, buffer, strSize, 10);
 8001d7a:	4b46      	ldr	r3, [pc, #280]	; (8001e94 <main+0x26c>)
 8001d7c:	881a      	ldrh	r2, [r3, #0]
 8001d7e:	230a      	movs	r3, #10
 8001d80:	4942      	ldr	r1, [pc, #264]	; (8001e8c <main+0x264>)
 8001d82:	4845      	ldr	r0, [pc, #276]	; (8001e98 <main+0x270>)
 8001d84:	f006 fd35 	bl	80087f2 <HAL_UART_Transmit>
 8001d88:	e060      	b.n	8001e4c <main+0x224>
	  } else if(inputFlyMode >= 1450 && inputFlyMode <= 1550 && fly_mode != FLY_MODE_ON){
 8001d8a:	4b45      	ldr	r3, [pc, #276]	; (8001ea0 <main+0x278>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f240 52a9 	movw	r2, #1449	; 0x5a9
 8001d92:	4293      	cmp	r3, r2
 8001d94:	dd26      	ble.n	8001de4 <main+0x1bc>
 8001d96:	4b42      	ldr	r3, [pc, #264]	; (8001ea0 <main+0x278>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f240 620e 	movw	r2, #1550	; 0x60e
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	dc20      	bgt.n	8001de4 <main+0x1bc>
 8001da2:	4b40      	ldr	r3, [pc, #256]	; (8001ea4 <main+0x27c>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d01c      	beq.n	8001de4 <main+0x1bc>
		  fly_mode = FLY_MODE_ON;
 8001daa:	4b3e      	ldr	r3, [pc, #248]	; (8001ea4 <main+0x27c>)
 8001dac:	2201      	movs	r2, #1
 8001dae:	701a      	strb	r2, [r3, #0]
		  strSize = sprintf((char*)buffer, "Wahana Mode On\r\n");
 8001db0:	4a36      	ldr	r2, [pc, #216]	; (8001e8c <main+0x264>)
 8001db2:	4b43      	ldr	r3, [pc, #268]	; (8001ec0 <main+0x298>)
 8001db4:	4615      	mov	r5, r2
 8001db6:	461c      	mov	r4, r3
 8001db8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dba:	6028      	str	r0, [r5, #0]
 8001dbc:	6069      	str	r1, [r5, #4]
 8001dbe:	60aa      	str	r2, [r5, #8]
 8001dc0:	60eb      	str	r3, [r5, #12]
 8001dc2:	7823      	ldrb	r3, [r4, #0]
 8001dc4:	742b      	strb	r3, [r5, #16]
 8001dc6:	2310      	movs	r3, #16
 8001dc8:	b29a      	uxth	r2, r3
 8001dca:	4b32      	ldr	r3, [pc, #200]	; (8001e94 <main+0x26c>)
 8001dcc:	801a      	strh	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1, buffer, strSize, 10);
 8001dce:	4b31      	ldr	r3, [pc, #196]	; (8001e94 <main+0x26c>)
 8001dd0:	881a      	ldrh	r2, [r3, #0]
 8001dd2:	230a      	movs	r3, #10
 8001dd4:	492d      	ldr	r1, [pc, #180]	; (8001e8c <main+0x264>)
 8001dd6:	4830      	ldr	r0, [pc, #192]	; (8001e98 <main+0x270>)
 8001dd8:	f006 fd0b 	bl	80087f2 <HAL_UART_Transmit>
		  HAL_TIM_Base_Start_IT(&htim7);
 8001ddc:	4832      	ldr	r0, [pc, #200]	; (8001ea8 <main+0x280>)
 8001dde:	f005 fb0c 	bl	80073fa <HAL_TIM_Base_Start_IT>
 8001de2:	e033      	b.n	8001e4c <main+0x224>
	  } else if(inputFlyMode >= 1900 && inputFlyMode <= 2000 && fly_mode != FLY_MODE_HOLD){
 8001de4:	4b2e      	ldr	r3, [pc, #184]	; (8001ea0 <main+0x278>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f240 726b 	movw	r2, #1899	; 0x76b
 8001dec:	4293      	cmp	r3, r2
 8001dee:	dd88      	ble.n	8001d02 <main+0xda>
 8001df0:	4b2b      	ldr	r3, [pc, #172]	; (8001ea0 <main+0x278>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001df8:	dc83      	bgt.n	8001d02 <main+0xda>
 8001dfa:	4b2a      	ldr	r3, [pc, #168]	; (8001ea4 <main+0x27c>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	f43f af7f 	beq.w	8001d02 <main+0xda>
		  fly_mode = FLY_MODE_HOLD;
 8001e04:	4b27      	ldr	r3, [pc, #156]	; (8001ea4 <main+0x27c>)
 8001e06:	2202      	movs	r2, #2
 8001e08:	701a      	strb	r2, [r3, #0]
		  holdAltitude = sensorAltitude;
 8001e0a:	4b2e      	ldr	r3, [pc, #184]	; (8001ec4 <main+0x29c>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a2e      	ldr	r2, [pc, #184]	; (8001ec8 <main+0x2a0>)
 8001e10:	6013      	str	r3, [r2, #0]
		  holdThrottle = inputThrottle;
 8001e12:	4b2e      	ldr	r3, [pc, #184]	; (8001ecc <main+0x2a4>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a2e      	ldr	r2, [pc, #184]	; (8001ed0 <main+0x2a8>)
 8001e18:	6013      	str	r3, [r2, #0]
		  strSize = sprintf((char*)buffer, "Wahana Mode Hold\r\n");
 8001e1a:	4a1c      	ldr	r2, [pc, #112]	; (8001e8c <main+0x264>)
 8001e1c:	4b2d      	ldr	r3, [pc, #180]	; (8001ed4 <main+0x2ac>)
 8001e1e:	4615      	mov	r5, r2
 8001e20:	461c      	mov	r4, r3
 8001e22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e24:	6028      	str	r0, [r5, #0]
 8001e26:	6069      	str	r1, [r5, #4]
 8001e28:	60aa      	str	r2, [r5, #8]
 8001e2a:	60eb      	str	r3, [r5, #12]
 8001e2c:	8823      	ldrh	r3, [r4, #0]
 8001e2e:	78a2      	ldrb	r2, [r4, #2]
 8001e30:	822b      	strh	r3, [r5, #16]
 8001e32:	4613      	mov	r3, r2
 8001e34:	74ab      	strb	r3, [r5, #18]
 8001e36:	2312      	movs	r3, #18
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	4b16      	ldr	r3, [pc, #88]	; (8001e94 <main+0x26c>)
 8001e3c:	801a      	strh	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1, buffer, strSize, 10);
 8001e3e:	4b15      	ldr	r3, [pc, #84]	; (8001e94 <main+0x26c>)
 8001e40:	881a      	ldrh	r2, [r3, #0]
 8001e42:	230a      	movs	r3, #10
 8001e44:	4911      	ldr	r1, [pc, #68]	; (8001e8c <main+0x264>)
 8001e46:	4814      	ldr	r0, [pc, #80]	; (8001e98 <main+0x270>)
 8001e48:	f006 fcd3 	bl	80087f2 <HAL_UART_Transmit>
	  getBMPAltitude();
 8001e4c:	e759      	b.n	8001d02 <main+0xda>
 8001e4e:	bf00      	nop
 8001e50:	47ae147b 	.word	0x47ae147b
 8001e54:	3f847ae1 	.word	0x3f847ae1
	...
 8001e60:	c0000000 	.word	0xc0000000
 8001e64:	3f77e132 	.word	0x3f77e132
 8001e68:	40000000 	.word	0x40000000
 8001e6c:	3f6cac08 	.word	0x3f6cac08
 8001e70:	20000000 	.word	0x20000000
 8001e74:	3f949518 	.word	0x3f949518
 8001e78:	20000b58 	.word	0x20000b58
 8001e7c:	20000220 	.word	0x20000220
 8001e80:	20000798 	.word	0x20000798
 8001e84:	2000076c 	.word	0x2000076c
 8001e88:	20000458 	.word	0x20000458
 8001e8c:	20000804 	.word	0x20000804
 8001e90:	0800d550 	.word	0x0800d550
 8001e94:	20000d44 	.word	0x20000d44
 8001e98:	200007c4 	.word	0x200007c4
 8001e9c:	200006c4 	.word	0x200006c4
 8001ea0:	2000024c 	.word	0x2000024c
 8001ea4:	20000be0 	.word	0x20000be0
 8001ea8:	20000cc8 	.word	0x20000cc8
 8001eac:	200008d0 	.word	0x200008d0
 8001eb0:	20000d24 	.word	0x20000d24
 8001eb4:	20000248 	.word	0x20000248
 8001eb8:	20000d08 	.word	0x20000d08
 8001ebc:	0800d558 	.word	0x0800d558
 8001ec0:	0800d56c 	.word	0x0800d56c
 8001ec4:	200008cc 	.word	0x200008cc
 8001ec8:	20000d48 	.word	0x20000d48
 8001ecc:	200003a4 	.word	0x200003a4
 8001ed0:	20000bdc 	.word	0x20000bdc
 8001ed4:	0800d580 	.word	0x0800d580

08001ed8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b094      	sub	sp, #80	; 0x50
 8001edc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ede:	f107 0320 	add.w	r3, r7, #32
 8001ee2:	2230      	movs	r2, #48	; 0x30
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f007 fa6b 	bl	80093c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001eec:	f107 030c 	add.w	r3, r7, #12
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001efc:	2300      	movs	r3, #0
 8001efe:	60bb      	str	r3, [r7, #8]
 8001f00:	4b28      	ldr	r3, [pc, #160]	; (8001fa4 <SystemClock_Config+0xcc>)
 8001f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f04:	4a27      	ldr	r2, [pc, #156]	; (8001fa4 <SystemClock_Config+0xcc>)
 8001f06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f0a:	6413      	str	r3, [r2, #64]	; 0x40
 8001f0c:	4b25      	ldr	r3, [pc, #148]	; (8001fa4 <SystemClock_Config+0xcc>)
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f14:	60bb      	str	r3, [r7, #8]
 8001f16:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f18:	2300      	movs	r3, #0
 8001f1a:	607b      	str	r3, [r7, #4]
 8001f1c:	4b22      	ldr	r3, [pc, #136]	; (8001fa8 <SystemClock_Config+0xd0>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a21      	ldr	r2, [pc, #132]	; (8001fa8 <SystemClock_Config+0xd0>)
 8001f22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f26:	6013      	str	r3, [r2, #0]
 8001f28:	4b1f      	ldr	r3, [pc, #124]	; (8001fa8 <SystemClock_Config+0xd0>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f30:	607b      	str	r3, [r7, #4]
 8001f32:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f34:	2302      	movs	r3, #2
 8001f36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f3c:	2310      	movs	r3, #16
 8001f3e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f40:	2302      	movs	r3, #2
 8001f42:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f44:	2300      	movs	r3, #0
 8001f46:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001f48:	2308      	movs	r3, #8
 8001f4a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001f4c:	23a8      	movs	r3, #168	; 0xa8
 8001f4e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f50:	2302      	movs	r3, #2
 8001f52:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f54:	2304      	movs	r3, #4
 8001f56:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f58:	f107 0320 	add.w	r3, r7, #32
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f004 fd9d 	bl	8006a9c <HAL_RCC_OscConfig>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001f68:	f001 fcdc 	bl	8003924 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f6c:	230f      	movs	r3, #15
 8001f6e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f70:	2302      	movs	r3, #2
 8001f72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f74:	2300      	movs	r3, #0
 8001f76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001f78:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001f7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 8001f7e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001f82:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f84:	f107 030c 	add.w	r3, r7, #12
 8001f88:	2105      	movs	r1, #5
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f004 fff6 	bl	8006f7c <HAL_RCC_ClockConfig>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001f96:	f001 fcc5 	bl	8003924 <Error_Handler>
  }
}
 8001f9a:	bf00      	nop
 8001f9c:	3750      	adds	r7, #80	; 0x50
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	40007000 	.word	0x40007000

08001fac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001fb0:	4b12      	ldr	r3, [pc, #72]	; (8001ffc <MX_I2C1_Init+0x50>)
 8001fb2:	4a13      	ldr	r2, [pc, #76]	; (8002000 <MX_I2C1_Init+0x54>)
 8001fb4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001fb6:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <MX_I2C1_Init+0x50>)
 8001fb8:	4a12      	ldr	r2, [pc, #72]	; (8002004 <MX_I2C1_Init+0x58>)
 8001fba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001fbc:	4b0f      	ldr	r3, [pc, #60]	; (8001ffc <MX_I2C1_Init+0x50>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001fc2:	4b0e      	ldr	r3, [pc, #56]	; (8001ffc <MX_I2C1_Init+0x50>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fc8:	4b0c      	ldr	r3, [pc, #48]	; (8001ffc <MX_I2C1_Init+0x50>)
 8001fca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fd0:	4b0a      	ldr	r3, [pc, #40]	; (8001ffc <MX_I2C1_Init+0x50>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001fd6:	4b09      	ldr	r3, [pc, #36]	; (8001ffc <MX_I2C1_Init+0x50>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fdc:	4b07      	ldr	r3, [pc, #28]	; (8001ffc <MX_I2C1_Init+0x50>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fe2:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <MX_I2C1_Init+0x50>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001fe8:	4804      	ldr	r0, [pc, #16]	; (8001ffc <MX_I2C1_Init+0x50>)
 8001fea:	f003 fda7 	bl	8005b3c <HAL_I2C_Init>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ff4:	f001 fc96 	bl	8003924 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ff8:	bf00      	nop
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	20000404 	.word	0x20000404
 8002000:	40005400 	.word	0x40005400
 8002004:	000186a0 	.word	0x000186a0

08002008 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800200c:	4b12      	ldr	r3, [pc, #72]	; (8002058 <MX_I2C3_Init+0x50>)
 800200e:	4a13      	ldr	r2, [pc, #76]	; (800205c <MX_I2C3_Init+0x54>)
 8002010:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002012:	4b11      	ldr	r3, [pc, #68]	; (8002058 <MX_I2C3_Init+0x50>)
 8002014:	4a12      	ldr	r2, [pc, #72]	; (8002060 <MX_I2C3_Init+0x58>)
 8002016:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002018:	4b0f      	ldr	r3, [pc, #60]	; (8002058 <MX_I2C3_Init+0x50>)
 800201a:	2200      	movs	r2, #0
 800201c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800201e:	4b0e      	ldr	r3, [pc, #56]	; (8002058 <MX_I2C3_Init+0x50>)
 8002020:	2200      	movs	r2, #0
 8002022:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002024:	4b0c      	ldr	r3, [pc, #48]	; (8002058 <MX_I2C3_Init+0x50>)
 8002026:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800202a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800202c:	4b0a      	ldr	r3, [pc, #40]	; (8002058 <MX_I2C3_Init+0x50>)
 800202e:	2200      	movs	r2, #0
 8002030:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002032:	4b09      	ldr	r3, [pc, #36]	; (8002058 <MX_I2C3_Init+0x50>)
 8002034:	2200      	movs	r2, #0
 8002036:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002038:	4b07      	ldr	r3, [pc, #28]	; (8002058 <MX_I2C3_Init+0x50>)
 800203a:	2200      	movs	r2, #0
 800203c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800203e:	4b06      	ldr	r3, [pc, #24]	; (8002058 <MX_I2C3_Init+0x50>)
 8002040:	2200      	movs	r2, #0
 8002042:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002044:	4804      	ldr	r0, [pc, #16]	; (8002058 <MX_I2C3_Init+0x50>)
 8002046:	f003 fd79 	bl	8005b3c <HAL_I2C_Init>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002050:	f001 fc68 	bl	8003924 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002054:	bf00      	nop
 8002056:	bd80      	pop	{r7, pc}
 8002058:	200002b0 	.word	0x200002b0
 800205c:	40005c00 	.word	0x40005c00
 8002060:	000186a0 	.word	0x000186a0

08002064 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b08e      	sub	sp, #56	; 0x38
 8002068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800206a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	605a      	str	r2, [r3, #4]
 8002074:	609a      	str	r2, [r3, #8]
 8002076:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002078:	f107 0320 	add.w	r3, r7, #32
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002082:	1d3b      	adds	r3, r7, #4
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	609a      	str	r2, [r3, #8]
 800208c:	60da      	str	r2, [r3, #12]
 800208e:	611a      	str	r2, [r3, #16]
 8002090:	615a      	str	r2, [r3, #20]
 8002092:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002094:	4b3e      	ldr	r3, [pc, #248]	; (8002190 <MX_TIM2_Init+0x12c>)
 8002096:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800209a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 42 - 1;
 800209c:	4b3c      	ldr	r3, [pc, #240]	; (8002190 <MX_TIM2_Init+0x12c>)
 800209e:	2229      	movs	r2, #41	; 0x29
 80020a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020a2:	4b3b      	ldr	r3, [pc, #236]	; (8002190 <MX_TIM2_Init+0x12c>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000 - 1;
 80020a8:	4b39      	ldr	r3, [pc, #228]	; (8002190 <MX_TIM2_Init+0x12c>)
 80020aa:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80020ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020b0:	4b37      	ldr	r3, [pc, #220]	; (8002190 <MX_TIM2_Init+0x12c>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020b6:	4b36      	ldr	r3, [pc, #216]	; (8002190 <MX_TIM2_Init+0x12c>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020bc:	4834      	ldr	r0, [pc, #208]	; (8002190 <MX_TIM2_Init+0x12c>)
 80020be:	f005 f94d 	bl	800735c <HAL_TIM_Base_Init>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80020c8:	f001 fc2c 	bl	8003924 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020d0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020d6:	4619      	mov	r1, r3
 80020d8:	482d      	ldr	r0, [pc, #180]	; (8002190 <MX_TIM2_Init+0x12c>)
 80020da:	f005 fd59 	bl	8007b90 <HAL_TIM_ConfigClockSource>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80020e4:	f001 fc1e 	bl	8003924 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80020e8:	4829      	ldr	r0, [pc, #164]	; (8002190 <MX_TIM2_Init+0x12c>)
 80020ea:	f005 f9d5 	bl	8007498 <HAL_TIM_PWM_Init>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80020f4:	f001 fc16 	bl	8003924 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020f8:	2300      	movs	r3, #0
 80020fa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020fc:	2300      	movs	r3, #0
 80020fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002100:	f107 0320 	add.w	r3, r7, #32
 8002104:	4619      	mov	r1, r3
 8002106:	4822      	ldr	r0, [pc, #136]	; (8002190 <MX_TIM2_Init+0x12c>)
 8002108:	f006 fa96 	bl	8008638 <HAL_TIMEx_MasterConfigSynchronization>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002112:	f001 fc07 	bl	8003924 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002116:	2360      	movs	r3, #96	; 0x60
 8002118:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2000 - 1;
 800211a:	f240 73cf 	movw	r3, #1999	; 0x7cf
 800211e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002120:	2300      	movs	r3, #0
 8002122:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002124:	2300      	movs	r3, #0
 8002126:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002128:	1d3b      	adds	r3, r7, #4
 800212a:	2200      	movs	r2, #0
 800212c:	4619      	mov	r1, r3
 800212e:	4818      	ldr	r0, [pc, #96]	; (8002190 <MX_TIM2_Init+0x12c>)
 8002130:	f005 fc68 	bl	8007a04 <HAL_TIM_PWM_ConfigChannel>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800213a:	f001 fbf3 	bl	8003924 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800213e:	1d3b      	adds	r3, r7, #4
 8002140:	2204      	movs	r2, #4
 8002142:	4619      	mov	r1, r3
 8002144:	4812      	ldr	r0, [pc, #72]	; (8002190 <MX_TIM2_Init+0x12c>)
 8002146:	f005 fc5d 	bl	8007a04 <HAL_TIM_PWM_ConfigChannel>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8002150:	f001 fbe8 	bl	8003924 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002154:	1d3b      	adds	r3, r7, #4
 8002156:	2208      	movs	r2, #8
 8002158:	4619      	mov	r1, r3
 800215a:	480d      	ldr	r0, [pc, #52]	; (8002190 <MX_TIM2_Init+0x12c>)
 800215c:	f005 fc52 	bl	8007a04 <HAL_TIM_PWM_ConfigChannel>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8002166:	f001 fbdd 	bl	8003924 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800216a:	1d3b      	adds	r3, r7, #4
 800216c:	220c      	movs	r2, #12
 800216e:	4619      	mov	r1, r3
 8002170:	4807      	ldr	r0, [pc, #28]	; (8002190 <MX_TIM2_Init+0x12c>)
 8002172:	f005 fc47 	bl	8007a04 <HAL_TIM_PWM_ConfigChannel>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 800217c:	f001 fbd2 	bl	8003924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002180:	4803      	ldr	r0, [pc, #12]	; (8002190 <MX_TIM2_Init+0x12c>)
 8002182:	f002 fbc5 	bl	8004910 <HAL_TIM_MspPostInit>

}
 8002186:	bf00      	nop
 8002188:	3738      	adds	r7, #56	; 0x38
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	20000be8 	.word	0x20000be8

08002194 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b08a      	sub	sp, #40	; 0x28
 8002198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800219a:	f107 0318 	add.w	r3, r7, #24
 800219e:	2200      	movs	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	605a      	str	r2, [r3, #4]
 80021a4:	609a      	str	r2, [r3, #8]
 80021a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021a8:	f107 0310 	add.w	r3, r7, #16
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80021b2:	463b      	mov	r3, r7
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80021be:	4b31      	ldr	r3, [pc, #196]	; (8002284 <MX_TIM3_Init+0xf0>)
 80021c0:	4a31      	ldr	r2, [pc, #196]	; (8002288 <MX_TIM3_Init+0xf4>)
 80021c2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42 - 1;
 80021c4:	4b2f      	ldr	r3, [pc, #188]	; (8002284 <MX_TIM3_Init+0xf0>)
 80021c6:	2229      	movs	r2, #41	; 0x29
 80021c8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ca:	4b2e      	ldr	r3, [pc, #184]	; (8002284 <MX_TIM3_Init+0xf0>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF;
 80021d0:	4b2c      	ldr	r3, [pc, #176]	; (8002284 <MX_TIM3_Init+0xf0>)
 80021d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021d8:	4b2a      	ldr	r3, [pc, #168]	; (8002284 <MX_TIM3_Init+0xf0>)
 80021da:	2200      	movs	r2, #0
 80021dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021de:	4b29      	ldr	r3, [pc, #164]	; (8002284 <MX_TIM3_Init+0xf0>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80021e4:	4827      	ldr	r0, [pc, #156]	; (8002284 <MX_TIM3_Init+0xf0>)
 80021e6:	f005 f8b9 	bl	800735c <HAL_TIM_Base_Init>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 80021f0:	f001 fb98 	bl	8003924 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021f8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80021fa:	f107 0318 	add.w	r3, r7, #24
 80021fe:	4619      	mov	r1, r3
 8002200:	4820      	ldr	r0, [pc, #128]	; (8002284 <MX_TIM3_Init+0xf0>)
 8002202:	f005 fcc5 	bl	8007b90 <HAL_TIM_ConfigClockSource>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800220c:	f001 fb8a 	bl	8003924 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002210:	481c      	ldr	r0, [pc, #112]	; (8002284 <MX_TIM3_Init+0xf0>)
 8002212:	f005 f9b5 	bl	8007580 <HAL_TIM_IC_Init>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800221c:	f001 fb82 	bl	8003924 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002220:	2300      	movs	r3, #0
 8002222:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002224:	2300      	movs	r3, #0
 8002226:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002228:	f107 0310 	add.w	r3, r7, #16
 800222c:	4619      	mov	r1, r3
 800222e:	4815      	ldr	r0, [pc, #84]	; (8002284 <MX_TIM3_Init+0xf0>)
 8002230:	f006 fa02 	bl	8008638 <HAL_TIMEx_MasterConfigSynchronization>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 800223a:	f001 fb73 	bl	8003924 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800223e:	2300      	movs	r3, #0
 8002240:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002242:	2301      	movs	r3, #1
 8002244:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002246:	2300      	movs	r3, #0
 8002248:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800224a:	2300      	movs	r3, #0
 800224c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800224e:	463b      	mov	r3, r7
 8002250:	2200      	movs	r2, #0
 8002252:	4619      	mov	r1, r3
 8002254:	480b      	ldr	r0, [pc, #44]	; (8002284 <MX_TIM3_Init+0xf0>)
 8002256:	f005 fb39 	bl	80078cc <HAL_TIM_IC_ConfigChannel>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8002260:	f001 fb60 	bl	8003924 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002264:	463b      	mov	r3, r7
 8002266:	2204      	movs	r2, #4
 8002268:	4619      	mov	r1, r3
 800226a:	4806      	ldr	r0, [pc, #24]	; (8002284 <MX_TIM3_Init+0xf0>)
 800226c:	f005 fb2e 	bl	80078cc <HAL_TIM_IC_ConfigChannel>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8002276:	f001 fb55 	bl	8003924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800227a:	bf00      	nop
 800227c:	3728      	adds	r7, #40	; 0x28
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	2000072c 	.word	0x2000072c
 8002288:	40000400 	.word	0x40000400

0800228c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b08a      	sub	sp, #40	; 0x28
 8002290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002292:	f107 0318 	add.w	r3, r7, #24
 8002296:	2200      	movs	r2, #0
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	605a      	str	r2, [r3, #4]
 800229c:	609a      	str	r2, [r3, #8]
 800229e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022a0:	f107 0310 	add.w	r3, r7, #16
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80022aa:	463b      	mov	r3, r7
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	605a      	str	r2, [r3, #4]
 80022b2:	609a      	str	r2, [r3, #8]
 80022b4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80022b6:	4b2b      	ldr	r3, [pc, #172]	; (8002364 <MX_TIM4_Init+0xd8>)
 80022b8:	4a2b      	ldr	r2, [pc, #172]	; (8002368 <MX_TIM4_Init+0xdc>)
 80022ba:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 42 - 1;
 80022bc:	4b29      	ldr	r3, [pc, #164]	; (8002364 <MX_TIM4_Init+0xd8>)
 80022be:	2229      	movs	r2, #41	; 0x29
 80022c0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022c2:	4b28      	ldr	r3, [pc, #160]	; (8002364 <MX_TIM4_Init+0xd8>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xFFFF;
 80022c8:	4b26      	ldr	r3, [pc, #152]	; (8002364 <MX_TIM4_Init+0xd8>)
 80022ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022ce:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022d0:	4b24      	ldr	r3, [pc, #144]	; (8002364 <MX_TIM4_Init+0xd8>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022d6:	4b23      	ldr	r3, [pc, #140]	; (8002364 <MX_TIM4_Init+0xd8>)
 80022d8:	2200      	movs	r2, #0
 80022da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80022dc:	4821      	ldr	r0, [pc, #132]	; (8002364 <MX_TIM4_Init+0xd8>)
 80022de:	f005 f83d 	bl	800735c <HAL_TIM_Base_Init>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 80022e8:	f001 fb1c 	bl	8003924 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022f0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80022f2:	f107 0318 	add.w	r3, r7, #24
 80022f6:	4619      	mov	r1, r3
 80022f8:	481a      	ldr	r0, [pc, #104]	; (8002364 <MX_TIM4_Init+0xd8>)
 80022fa:	f005 fc49 	bl	8007b90 <HAL_TIM_ConfigClockSource>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002304:	f001 fb0e 	bl	8003924 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002308:	4816      	ldr	r0, [pc, #88]	; (8002364 <MX_TIM4_Init+0xd8>)
 800230a:	f005 f939 	bl	8007580 <HAL_TIM_IC_Init>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002314:	f001 fb06 	bl	8003924 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002318:	2300      	movs	r3, #0
 800231a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800231c:	2300      	movs	r3, #0
 800231e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002320:	f107 0310 	add.w	r3, r7, #16
 8002324:	4619      	mov	r1, r3
 8002326:	480f      	ldr	r0, [pc, #60]	; (8002364 <MX_TIM4_Init+0xd8>)
 8002328:	f006 f986 	bl	8008638 <HAL_TIMEx_MasterConfigSynchronization>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8002332:	f001 faf7 	bl	8003924 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002336:	2300      	movs	r3, #0
 8002338:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800233a:	2301      	movs	r3, #1
 800233c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800233e:	2300      	movs	r3, #0
 8002340:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002342:	2300      	movs	r3, #0
 8002344:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002346:	463b      	mov	r3, r7
 8002348:	2200      	movs	r2, #0
 800234a:	4619      	mov	r1, r3
 800234c:	4805      	ldr	r0, [pc, #20]	; (8002364 <MX_TIM4_Init+0xd8>)
 800234e:	f005 fabd 	bl	80078cc <HAL_TIM_IC_ConfigChannel>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8002358:	f001 fae4 	bl	8003924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800235c:	bf00      	nop
 800235e:	3728      	adds	r7, #40	; 0x28
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	20000304 	.word	0x20000304
 8002368:	40000800 	.word	0x40000800

0800236c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b08a      	sub	sp, #40	; 0x28
 8002370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002372:	f107 0318 	add.w	r3, r7, #24
 8002376:	2200      	movs	r2, #0
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	605a      	str	r2, [r3, #4]
 800237c:	609a      	str	r2, [r3, #8]
 800237e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002380:	f107 0310 	add.w	r3, r7, #16
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800238a:	463b      	mov	r3, r7
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	605a      	str	r2, [r3, #4]
 8002392:	609a      	str	r2, [r3, #8]
 8002394:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002396:	4b2b      	ldr	r3, [pc, #172]	; (8002444 <MX_TIM5_Init+0xd8>)
 8002398:	4a2b      	ldr	r2, [pc, #172]	; (8002448 <MX_TIM5_Init+0xdc>)
 800239a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 42 - 1;
 800239c:	4b29      	ldr	r3, [pc, #164]	; (8002444 <MX_TIM5_Init+0xd8>)
 800239e:	2229      	movs	r2, #41	; 0x29
 80023a0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023a2:	4b28      	ldr	r3, [pc, #160]	; (8002444 <MX_TIM5_Init+0xd8>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xFFFF;
 80023a8:	4b26      	ldr	r3, [pc, #152]	; (8002444 <MX_TIM5_Init+0xd8>)
 80023aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023ae:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023b0:	4b24      	ldr	r3, [pc, #144]	; (8002444 <MX_TIM5_Init+0xd8>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023b6:	4b23      	ldr	r3, [pc, #140]	; (8002444 <MX_TIM5_Init+0xd8>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80023bc:	4821      	ldr	r0, [pc, #132]	; (8002444 <MX_TIM5_Init+0xd8>)
 80023be:	f004 ffcd 	bl	800735c <HAL_TIM_Base_Init>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <MX_TIM5_Init+0x60>
  {
    Error_Handler();
 80023c8:	f001 faac 	bl	8003924 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023d0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80023d2:	f107 0318 	add.w	r3, r7, #24
 80023d6:	4619      	mov	r1, r3
 80023d8:	481a      	ldr	r0, [pc, #104]	; (8002444 <MX_TIM5_Init+0xd8>)
 80023da:	f005 fbd9 	bl	8007b90 <HAL_TIM_ConfigClockSource>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80023e4:	f001 fa9e 	bl	8003924 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 80023e8:	4816      	ldr	r0, [pc, #88]	; (8002444 <MX_TIM5_Init+0xd8>)
 80023ea:	f005 f8c9 	bl	8007580 <HAL_TIM_IC_Init>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80023f4:	f001 fa96 	bl	8003924 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023f8:	2300      	movs	r3, #0
 80023fa:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023fc:	2300      	movs	r3, #0
 80023fe:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002400:	f107 0310 	add.w	r3, r7, #16
 8002404:	4619      	mov	r1, r3
 8002406:	480f      	ldr	r0, [pc, #60]	; (8002444 <MX_TIM5_Init+0xd8>)
 8002408:	f006 f916 	bl	8008638 <HAL_TIMEx_MasterConfigSynchronization>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <MX_TIM5_Init+0xaa>
  {
    Error_Handler();
 8002412:	f001 fa87 	bl	8003924 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002416:	2300      	movs	r3, #0
 8002418:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800241a:	2301      	movs	r3, #1
 800241c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800241e:	2300      	movs	r3, #0
 8002420:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002422:	2300      	movs	r3, #0
 8002424:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002426:	463b      	mov	r3, r7
 8002428:	2200      	movs	r2, #0
 800242a:	4619      	mov	r1, r3
 800242c:	4805      	ldr	r0, [pc, #20]	; (8002444 <MX_TIM5_Init+0xd8>)
 800242e:	f005 fa4d 	bl	80078cc <HAL_TIM_IC_ConfigChannel>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <MX_TIM5_Init+0xd0>
  {
    Error_Handler();
 8002438:	f001 fa74 	bl	8003924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800243c:	bf00      	nop
 800243e:	3728      	adds	r7, #40	; 0x28
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	200006d0 	.word	0x200006d0
 8002448:	40000c00 	.word	0x40000c00

0800244c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002452:	463b      	mov	r3, r7
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800245a:	4b15      	ldr	r3, [pc, #84]	; (80024b0 <MX_TIM6_Init+0x64>)
 800245c:	4a15      	ldr	r2, [pc, #84]	; (80024b4 <MX_TIM6_Init+0x68>)
 800245e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 42 - 1;
 8002460:	4b13      	ldr	r3, [pc, #76]	; (80024b0 <MX_TIM6_Init+0x64>)
 8002462:	2229      	movs	r2, #41	; 0x29
 8002464:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002466:	4b12      	ldr	r3, [pc, #72]	; (80024b0 <MX_TIM6_Init+0x64>)
 8002468:	2200      	movs	r2, #0
 800246a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xFFFF;
 800246c:	4b10      	ldr	r3, [pc, #64]	; (80024b0 <MX_TIM6_Init+0x64>)
 800246e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002472:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002474:	4b0e      	ldr	r3, [pc, #56]	; (80024b0 <MX_TIM6_Init+0x64>)
 8002476:	2200      	movs	r2, #0
 8002478:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800247a:	480d      	ldr	r0, [pc, #52]	; (80024b0 <MX_TIM6_Init+0x64>)
 800247c:	f004 ff6e 	bl	800735c <HAL_TIM_Base_Init>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002486:	f001 fa4d 	bl	8003924 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800248a:	2300      	movs	r3, #0
 800248c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800248e:	2300      	movs	r3, #0
 8002490:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002492:	463b      	mov	r3, r7
 8002494:	4619      	mov	r1, r3
 8002496:	4806      	ldr	r0, [pc, #24]	; (80024b0 <MX_TIM6_Init+0x64>)
 8002498:	f006 f8ce 	bl	8008638 <HAL_TIMEx_MasterConfigSynchronization>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80024a2:	f001 fa3f 	bl	8003924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80024a6:	bf00      	nop
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	20000afc 	.word	0x20000afc
 80024b4:	40001000 	.word	0x40001000

080024b8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024be:	463b      	mov	r3, r7
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80024c6:	4b15      	ldr	r3, [pc, #84]	; (800251c <MX_TIM7_Init+0x64>)
 80024c8:	4a15      	ldr	r2, [pc, #84]	; (8002520 <MX_TIM7_Init+0x68>)
 80024ca:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 42000 - 1;
 80024cc:	4b13      	ldr	r3, [pc, #76]	; (800251c <MX_TIM7_Init+0x64>)
 80024ce:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80024d2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024d4:	4b11      	ldr	r3, [pc, #68]	; (800251c <MX_TIM7_Init+0x64>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10;
 80024da:	4b10      	ldr	r3, [pc, #64]	; (800251c <MX_TIM7_Init+0x64>)
 80024dc:	220a      	movs	r2, #10
 80024de:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024e0:	4b0e      	ldr	r3, [pc, #56]	; (800251c <MX_TIM7_Init+0x64>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80024e6:	480d      	ldr	r0, [pc, #52]	; (800251c <MX_TIM7_Init+0x64>)
 80024e8:	f004 ff38 	bl	800735c <HAL_TIM_Base_Init>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80024f2:	f001 fa17 	bl	8003924 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024f6:	2300      	movs	r3, #0
 80024f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024fa:	2300      	movs	r3, #0
 80024fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80024fe:	463b      	mov	r3, r7
 8002500:	4619      	mov	r1, r3
 8002502:	4806      	ldr	r0, [pc, #24]	; (800251c <MX_TIM7_Init+0x64>)
 8002504:	f006 f898 	bl	8008638 <HAL_TIMEx_MasterConfigSynchronization>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800250e:	f001 fa09 	bl	8003924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002512:	bf00      	nop
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	20000cc8 	.word	0x20000cc8
 8002520:	40001400 	.word	0x40001400

08002524 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b088      	sub	sp, #32
 8002528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800252a:	f107 0310 	add.w	r3, r7, #16
 800252e:	2200      	movs	r2, #0
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	605a      	str	r2, [r3, #4]
 8002534:	609a      	str	r2, [r3, #8]
 8002536:	60da      	str	r2, [r3, #12]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002538:	463b      	mov	r3, r7
 800253a:	2200      	movs	r2, #0
 800253c:	601a      	str	r2, [r3, #0]
 800253e:	605a      	str	r2, [r3, #4]
 8002540:	609a      	str	r2, [r3, #8]
 8002542:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002544:	4b23      	ldr	r3, [pc, #140]	; (80025d4 <MX_TIM9_Init+0xb0>)
 8002546:	4a24      	ldr	r2, [pc, #144]	; (80025d8 <MX_TIM9_Init+0xb4>)
 8002548:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 42 - 1;
 800254a:	4b22      	ldr	r3, [pc, #136]	; (80025d4 <MX_TIM9_Init+0xb0>)
 800254c:	2229      	movs	r2, #41	; 0x29
 800254e:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002550:	4b20      	ldr	r3, [pc, #128]	; (80025d4 <MX_TIM9_Init+0xb0>)
 8002552:	2200      	movs	r2, #0
 8002554:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 0xFFFF;
 8002556:	4b1f      	ldr	r3, [pc, #124]	; (80025d4 <MX_TIM9_Init+0xb0>)
 8002558:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800255c:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800255e:	4b1d      	ldr	r3, [pc, #116]	; (80025d4 <MX_TIM9_Init+0xb0>)
 8002560:	2200      	movs	r2, #0
 8002562:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002564:	4b1b      	ldr	r3, [pc, #108]	; (80025d4 <MX_TIM9_Init+0xb0>)
 8002566:	2200      	movs	r2, #0
 8002568:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800256a:	481a      	ldr	r0, [pc, #104]	; (80025d4 <MX_TIM9_Init+0xb0>)
 800256c:	f004 fef6 	bl	800735c <HAL_TIM_Base_Init>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <MX_TIM9_Init+0x56>
  {
    Error_Handler();
 8002576:	f001 f9d5 	bl	8003924 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800257a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800257e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002580:	f107 0310 	add.w	r3, r7, #16
 8002584:	4619      	mov	r1, r3
 8002586:	4813      	ldr	r0, [pc, #76]	; (80025d4 <MX_TIM9_Init+0xb0>)
 8002588:	f005 fb02 	bl	8007b90 <HAL_TIM_ConfigClockSource>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <MX_TIM9_Init+0x72>
  {
    Error_Handler();
 8002592:	f001 f9c7 	bl	8003924 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim9) != HAL_OK)
 8002596:	480f      	ldr	r0, [pc, #60]	; (80025d4 <MX_TIM9_Init+0xb0>)
 8002598:	f004 fff2 	bl	8007580 <HAL_TIM_IC_Init>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <MX_TIM9_Init+0x82>
  {
    Error_Handler();
 80025a2:	f001 f9bf 	bl	8003924 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80025a6:	2300      	movs	r3, #0
 80025a8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80025aa:	2301      	movs	r3, #1
 80025ac:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80025ae:	2300      	movs	r3, #0
 80025b0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80025b2:	2300      	movs	r3, #0
 80025b4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80025b6:	463b      	mov	r3, r7
 80025b8:	2204      	movs	r2, #4
 80025ba:	4619      	mov	r1, r3
 80025bc:	4805      	ldr	r0, [pc, #20]	; (80025d4 <MX_TIM9_Init+0xb0>)
 80025be:	f005 f985 	bl	80078cc <HAL_TIM_IC_ConfigChannel>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <MX_TIM9_Init+0xa8>
  {
    Error_Handler();
 80025c8:	f001 f9ac 	bl	8003924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80025cc:	bf00      	nop
 80025ce:	3720      	adds	r7, #32
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	20000b80 	.word	0x20000b80
 80025d8:	40014000 	.word	0x40014000

080025dc <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80025e0:	4b0e      	ldr	r3, [pc, #56]	; (800261c <MX_TIM10_Init+0x40>)
 80025e2:	4a0f      	ldr	r2, [pc, #60]	; (8002620 <MX_TIM10_Init+0x44>)
 80025e4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 42000 - 1;
 80025e6:	4b0d      	ldr	r3, [pc, #52]	; (800261c <MX_TIM10_Init+0x40>)
 80025e8:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80025ec:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ee:	4b0b      	ldr	r3, [pc, #44]	; (800261c <MX_TIM10_Init+0x40>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 15 - 1;
 80025f4:	4b09      	ldr	r3, [pc, #36]	; (800261c <MX_TIM10_Init+0x40>)
 80025f6:	220e      	movs	r2, #14
 80025f8:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025fa:	4b08      	ldr	r3, [pc, #32]	; (800261c <MX_TIM10_Init+0x40>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002600:	4b06      	ldr	r3, [pc, #24]	; (800261c <MX_TIM10_Init+0x40>)
 8002602:	2200      	movs	r2, #0
 8002604:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002606:	4805      	ldr	r0, [pc, #20]	; (800261c <MX_TIM10_Init+0x40>)
 8002608:	f004 fea8 	bl	800735c <HAL_TIM_Base_Init>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8002612:	f001 f987 	bl	8003924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002616:	bf00      	nop
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	20000458 	.word	0x20000458
 8002620:	40014400 	.word	0x40014400

08002624 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002628:	4b11      	ldr	r3, [pc, #68]	; (8002670 <MX_USART1_UART_Init+0x4c>)
 800262a:	4a12      	ldr	r2, [pc, #72]	; (8002674 <MX_USART1_UART_Init+0x50>)
 800262c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800262e:	4b10      	ldr	r3, [pc, #64]	; (8002670 <MX_USART1_UART_Init+0x4c>)
 8002630:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002634:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002636:	4b0e      	ldr	r3, [pc, #56]	; (8002670 <MX_USART1_UART_Init+0x4c>)
 8002638:	2200      	movs	r2, #0
 800263a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800263c:	4b0c      	ldr	r3, [pc, #48]	; (8002670 <MX_USART1_UART_Init+0x4c>)
 800263e:	2200      	movs	r2, #0
 8002640:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002642:	4b0b      	ldr	r3, [pc, #44]	; (8002670 <MX_USART1_UART_Init+0x4c>)
 8002644:	2200      	movs	r2, #0
 8002646:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002648:	4b09      	ldr	r3, [pc, #36]	; (8002670 <MX_USART1_UART_Init+0x4c>)
 800264a:	220c      	movs	r2, #12
 800264c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800264e:	4b08      	ldr	r3, [pc, #32]	; (8002670 <MX_USART1_UART_Init+0x4c>)
 8002650:	2200      	movs	r2, #0
 8002652:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002654:	4b06      	ldr	r3, [pc, #24]	; (8002670 <MX_USART1_UART_Init+0x4c>)
 8002656:	2200      	movs	r2, #0
 8002658:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800265a:	4805      	ldr	r0, [pc, #20]	; (8002670 <MX_USART1_UART_Init+0x4c>)
 800265c:	f006 f87c 	bl	8008758 <HAL_UART_Init>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002666:	f001 f95d 	bl	8003924 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800266a:	bf00      	nop
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	200007c4 	.word	0x200007c4
 8002674:	40011000 	.word	0x40011000

08002678 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800267c:	4b11      	ldr	r3, [pc, #68]	; (80026c4 <MX_USART2_UART_Init+0x4c>)
 800267e:	4a12      	ldr	r2, [pc, #72]	; (80026c8 <MX_USART2_UART_Init+0x50>)
 8002680:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002682:	4b10      	ldr	r3, [pc, #64]	; (80026c4 <MX_USART2_UART_Init+0x4c>)
 8002684:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002688:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800268a:	4b0e      	ldr	r3, [pc, #56]	; (80026c4 <MX_USART2_UART_Init+0x4c>)
 800268c:	2200      	movs	r2, #0
 800268e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002690:	4b0c      	ldr	r3, [pc, #48]	; (80026c4 <MX_USART2_UART_Init+0x4c>)
 8002692:	2200      	movs	r2, #0
 8002694:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002696:	4b0b      	ldr	r3, [pc, #44]	; (80026c4 <MX_USART2_UART_Init+0x4c>)
 8002698:	2200      	movs	r2, #0
 800269a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800269c:	4b09      	ldr	r3, [pc, #36]	; (80026c4 <MX_USART2_UART_Init+0x4c>)
 800269e:	220c      	movs	r2, #12
 80026a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026a2:	4b08      	ldr	r3, [pc, #32]	; (80026c4 <MX_USART2_UART_Init+0x4c>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80026a8:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <MX_USART2_UART_Init+0x4c>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80026ae:	4805      	ldr	r0, [pc, #20]	; (80026c4 <MX_USART2_UART_Init+0x4c>)
 80026b0:	f006 f852 	bl	8008758 <HAL_UART_Init>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80026ba:	f001 f933 	bl	8003924 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80026be:	bf00      	nop
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	20000c88 	.word	0x20000c88
 80026c8:	40004400 	.word	0x40004400

080026cc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80026d0:	4b11      	ldr	r3, [pc, #68]	; (8002718 <MX_USART3_UART_Init+0x4c>)
 80026d2:	4a12      	ldr	r2, [pc, #72]	; (800271c <MX_USART3_UART_Init+0x50>)
 80026d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80026d6:	4b10      	ldr	r3, [pc, #64]	; (8002718 <MX_USART3_UART_Init+0x4c>)
 80026d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80026de:	4b0e      	ldr	r3, [pc, #56]	; (8002718 <MX_USART3_UART_Init+0x4c>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80026e4:	4b0c      	ldr	r3, [pc, #48]	; (8002718 <MX_USART3_UART_Init+0x4c>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80026ea:	4b0b      	ldr	r3, [pc, #44]	; (8002718 <MX_USART3_UART_Init+0x4c>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80026f0:	4b09      	ldr	r3, [pc, #36]	; (8002718 <MX_USART3_UART_Init+0x4c>)
 80026f2:	220c      	movs	r2, #12
 80026f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026f6:	4b08      	ldr	r3, [pc, #32]	; (8002718 <MX_USART3_UART_Init+0x4c>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80026fc:	4b06      	ldr	r3, [pc, #24]	; (8002718 <MX_USART3_UART_Init+0x4c>)
 80026fe:	2200      	movs	r2, #0
 8002700:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002702:	4805      	ldr	r0, [pc, #20]	; (8002718 <MX_USART3_UART_Init+0x4c>)
 8002704:	f006 f828 	bl	8008758 <HAL_UART_Init>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800270e:	f001 f909 	bl	8003924 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002712:	bf00      	nop
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	200003a8 	.word	0x200003a8
 800271c:	40004800 	.word	0x40004800

08002720 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002726:	2300      	movs	r3, #0
 8002728:	607b      	str	r3, [r7, #4]
 800272a:	4b10      	ldr	r3, [pc, #64]	; (800276c <MX_DMA_Init+0x4c>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272e:	4a0f      	ldr	r2, [pc, #60]	; (800276c <MX_DMA_Init+0x4c>)
 8002730:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002734:	6313      	str	r3, [r2, #48]	; 0x30
 8002736:	4b0d      	ldr	r3, [pc, #52]	; (800276c <MX_DMA_Init+0x4c>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800273e:	607b      	str	r3, [r7, #4]
 8002740:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002742:	2200      	movs	r2, #0
 8002744:	2100      	movs	r1, #0
 8002746:	200c      	movs	r0, #12
 8002748:	f002 fca1 	bl	800508e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800274c:	200c      	movs	r0, #12
 800274e:	f002 fcba 	bl	80050c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002752:	2200      	movs	r2, #0
 8002754:	2100      	movs	r1, #0
 8002756:	2010      	movs	r0, #16
 8002758:	f002 fc99 	bl	800508e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800275c:	2010      	movs	r0, #16
 800275e:	f002 fcb2 	bl	80050c6 <HAL_NVIC_EnableIRQ>

}
 8002762:	bf00      	nop
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	40023800 	.word	0x40023800

08002770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b08c      	sub	sp, #48	; 0x30
 8002774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002776:	f107 031c 	add.w	r3, r7, #28
 800277a:	2200      	movs	r2, #0
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	605a      	str	r2, [r3, #4]
 8002780:	609a      	str	r2, [r3, #8]
 8002782:	60da      	str	r2, [r3, #12]
 8002784:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002786:	2300      	movs	r3, #0
 8002788:	61bb      	str	r3, [r7, #24]
 800278a:	4b35      	ldr	r3, [pc, #212]	; (8002860 <MX_GPIO_Init+0xf0>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	4a34      	ldr	r2, [pc, #208]	; (8002860 <MX_GPIO_Init+0xf0>)
 8002790:	f043 0310 	orr.w	r3, r3, #16
 8002794:	6313      	str	r3, [r2, #48]	; 0x30
 8002796:	4b32      	ldr	r3, [pc, #200]	; (8002860 <MX_GPIO_Init+0xf0>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	f003 0310 	and.w	r3, r3, #16
 800279e:	61bb      	str	r3, [r7, #24]
 80027a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80027a2:	2300      	movs	r3, #0
 80027a4:	617b      	str	r3, [r7, #20]
 80027a6:	4b2e      	ldr	r3, [pc, #184]	; (8002860 <MX_GPIO_Init+0xf0>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027aa:	4a2d      	ldr	r2, [pc, #180]	; (8002860 <MX_GPIO_Init+0xf0>)
 80027ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027b0:	6313      	str	r3, [r2, #48]	; 0x30
 80027b2:	4b2b      	ldr	r3, [pc, #172]	; (8002860 <MX_GPIO_Init+0xf0>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ba:	617b      	str	r3, [r7, #20]
 80027bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027be:	2300      	movs	r3, #0
 80027c0:	613b      	str	r3, [r7, #16]
 80027c2:	4b27      	ldr	r3, [pc, #156]	; (8002860 <MX_GPIO_Init+0xf0>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	4a26      	ldr	r2, [pc, #152]	; (8002860 <MX_GPIO_Init+0xf0>)
 80027c8:	f043 0301 	orr.w	r3, r3, #1
 80027cc:	6313      	str	r3, [r2, #48]	; 0x30
 80027ce:	4b24      	ldr	r3, [pc, #144]	; (8002860 <MX_GPIO_Init+0xf0>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	613b      	str	r3, [r7, #16]
 80027d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027da:	2300      	movs	r3, #0
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	4b20      	ldr	r3, [pc, #128]	; (8002860 <MX_GPIO_Init+0xf0>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e2:	4a1f      	ldr	r2, [pc, #124]	; (8002860 <MX_GPIO_Init+0xf0>)
 80027e4:	f043 0308 	orr.w	r3, r3, #8
 80027e8:	6313      	str	r3, [r2, #48]	; 0x30
 80027ea:	4b1d      	ldr	r3, [pc, #116]	; (8002860 <MX_GPIO_Init+0xf0>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ee:	f003 0308 	and.w	r3, r3, #8
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027f6:	2300      	movs	r3, #0
 80027f8:	60bb      	str	r3, [r7, #8]
 80027fa:	4b19      	ldr	r3, [pc, #100]	; (8002860 <MX_GPIO_Init+0xf0>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fe:	4a18      	ldr	r2, [pc, #96]	; (8002860 <MX_GPIO_Init+0xf0>)
 8002800:	f043 0304 	orr.w	r3, r3, #4
 8002804:	6313      	str	r3, [r2, #48]	; 0x30
 8002806:	4b16      	ldr	r3, [pc, #88]	; (8002860 <MX_GPIO_Init+0xf0>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	f003 0304 	and.w	r3, r3, #4
 800280e:	60bb      	str	r3, [r7, #8]
 8002810:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002812:	2300      	movs	r3, #0
 8002814:	607b      	str	r3, [r7, #4]
 8002816:	4b12      	ldr	r3, [pc, #72]	; (8002860 <MX_GPIO_Init+0xf0>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	4a11      	ldr	r2, [pc, #68]	; (8002860 <MX_GPIO_Init+0xf0>)
 800281c:	f043 0302 	orr.w	r3, r3, #2
 8002820:	6313      	str	r3, [r2, #48]	; 0x30
 8002822:	4b0f      	ldr	r3, [pc, #60]	; (8002860 <MX_GPIO_Init+0xf0>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	607b      	str	r3, [r7, #4]
 800282c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : RC_CH6_Pin */
  GPIO_InitStruct.Pin = RC_CH6_Pin;
 800282e:	2308      	movs	r3, #8
 8002830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002832:	4b0c      	ldr	r3, [pc, #48]	; (8002864 <MX_GPIO_Init+0xf4>)
 8002834:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002836:	2302      	movs	r3, #2
 8002838:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(RC_CH6_GPIO_Port, &GPIO_InitStruct);
 800283a:	f107 031c 	add.w	r3, r7, #28
 800283e:	4619      	mov	r1, r3
 8002840:	4809      	ldr	r0, [pc, #36]	; (8002868 <MX_GPIO_Init+0xf8>)
 8002842:	f002 ffc9 	bl	80057d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002846:	2200      	movs	r2, #0
 8002848:	2100      	movs	r1, #0
 800284a:	2009      	movs	r0, #9
 800284c:	f002 fc1f 	bl	800508e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002850:	2009      	movs	r0, #9
 8002852:	f002 fc38 	bl	80050c6 <HAL_NVIC_EnableIRQ>

}
 8002856:	bf00      	nop
 8002858:	3730      	adds	r7, #48	; 0x30
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	40023800 	.word	0x40023800
 8002864:	10310000 	.word	0x10310000
 8002868:	40020c00 	.word	0x40020c00

0800286c <initPWM_DATA>:

/* USER CODE BEGIN 4 */



void initPWM_DATA(PWM_DATA* pwm_data, TIM_HandleTypeDef *htim, uint32_t channel){
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
	pwm_data->onFallingEdge = false;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	765a      	strb	r2, [r3, #25]
	pwm_data->onRisingEdge = true;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2201      	movs	r2, #1
 8002882:	761a      	strb	r2, [r3, #24]
	pwm_data->channel = channel;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	605a      	str	r2, [r3, #4]
	pwm_data->htim = htim;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	68ba      	ldr	r2, [r7, #8]
 800288e:	601a      	str	r2, [r3, #0]
}
 8002890:	bf00      	nop
 8002892:	3714      	adds	r7, #20
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <setPWM>:

void setPWM(TIM_HandleTypeDef htim, uint32_t channel, uint32_t dutyCycle){
 800289c:	b084      	sub	sp, #16
 800289e:	b490      	push	{r4, r7}
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	f107 0408 	add.w	r4, r7, #8
 80028a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	__HAL_TIM_SET_COMPARE(&htim, channel, dutyCycle);
 80028aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d103      	bne.n	80028b8 <setPWM+0x1c>
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80028b4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80028b6:	e010      	b.n	80028da <setPWM+0x3e>
	__HAL_TIM_SET_COMPARE(&htim, channel, dutyCycle);
 80028b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028ba:	2b04      	cmp	r3, #4
 80028bc:	d103      	bne.n	80028c6 <setPWM+0x2a>
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80028c2:	639a      	str	r2, [r3, #56]	; 0x38
}
 80028c4:	e009      	b.n	80028da <setPWM+0x3e>
	__HAL_TIM_SET_COMPARE(&htim, channel, dutyCycle);
 80028c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028c8:	2b08      	cmp	r3, #8
 80028ca:	d103      	bne.n	80028d4 <setPWM+0x38>
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80028d0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80028d2:	e002      	b.n	80028da <setPWM+0x3e>
	__HAL_TIM_SET_COMPARE(&htim, channel, dutyCycle);
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80028d8:	641a      	str	r2, [r3, #64]	; 0x40
}
 80028da:	bf00      	nop
 80028dc:	46bd      	mov	sp, r7
 80028de:	bc90      	pop	{r4, r7}
 80028e0:	b004      	add	sp, #16
 80028e2:	4770      	bx	lr

080028e4 <ESCInit>:

void ESCInit(){
 80028e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028e6:	b08f      	sub	sp, #60	; 0x3c
 80028e8:	af0e      	add	r7, sp, #56	; 0x38
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80028ea:	2100      	movs	r1, #0
 80028ec:	4861      	ldr	r0, [pc, #388]	; (8002a74 <ESCInit+0x190>)
 80028ee:	f004 fe09 	bl	8007504 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80028f2:	2104      	movs	r1, #4
 80028f4:	485f      	ldr	r0, [pc, #380]	; (8002a74 <ESCInit+0x190>)
 80028f6:	f004 fe05 	bl	8007504 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80028fa:	2108      	movs	r1, #8
 80028fc:	485d      	ldr	r0, [pc, #372]	; (8002a74 <ESCInit+0x190>)
 80028fe:	f004 fe01 	bl	8007504 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8002902:	210c      	movs	r1, #12
 8002904:	485b      	ldr	r0, [pc, #364]	; (8002a74 <ESCInit+0x190>)
 8002906:	f004 fdfd 	bl	8007504 <HAL_TIM_PWM_Start>
	setPWM(htim2, TIM_CHANNEL_1, ESC_PWM_MAX);
 800290a:	4e5a      	ldr	r6, [pc, #360]	; (8002a74 <ESCInit+0x190>)
 800290c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002910:	930d      	str	r3, [sp, #52]	; 0x34
 8002912:	2300      	movs	r3, #0
 8002914:	930c      	str	r3, [sp, #48]	; 0x30
 8002916:	466d      	mov	r5, sp
 8002918:	f106 0410 	add.w	r4, r6, #16
 800291c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800291e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002920:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002922:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002924:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002928:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800292c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002930:	f7ff ffb4 	bl	800289c <setPWM>
	setPWM(htim2, TIM_CHANNEL_2, ESC_PWM_MAX);
 8002934:	4e4f      	ldr	r6, [pc, #316]	; (8002a74 <ESCInit+0x190>)
 8002936:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800293a:	930d      	str	r3, [sp, #52]	; 0x34
 800293c:	2304      	movs	r3, #4
 800293e:	930c      	str	r3, [sp, #48]	; 0x30
 8002940:	466d      	mov	r5, sp
 8002942:	f106 0410 	add.w	r4, r6, #16
 8002946:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002948:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800294a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800294c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800294e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002952:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002956:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800295a:	f7ff ff9f 	bl	800289c <setPWM>
	setPWM(htim2, TIM_CHANNEL_3, ESC_PWM_MAX);
 800295e:	4e45      	ldr	r6, [pc, #276]	; (8002a74 <ESCInit+0x190>)
 8002960:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002964:	930d      	str	r3, [sp, #52]	; 0x34
 8002966:	2308      	movs	r3, #8
 8002968:	930c      	str	r3, [sp, #48]	; 0x30
 800296a:	466d      	mov	r5, sp
 800296c:	f106 0410 	add.w	r4, r6, #16
 8002970:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002972:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002974:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002976:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002978:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800297c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002980:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002984:	f7ff ff8a 	bl	800289c <setPWM>
	setPWM(htim2, TIM_CHANNEL_4, ESC_PWM_MAX);
 8002988:	4e3a      	ldr	r6, [pc, #232]	; (8002a74 <ESCInit+0x190>)
 800298a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800298e:	930d      	str	r3, [sp, #52]	; 0x34
 8002990:	230c      	movs	r3, #12
 8002992:	930c      	str	r3, [sp, #48]	; 0x30
 8002994:	466d      	mov	r5, sp
 8002996:	f106 0410 	add.w	r4, r6, #16
 800299a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800299c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800299e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029a2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80029a6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80029aa:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80029ae:	f7ff ff75 	bl	800289c <setPWM>
	HAL_Delay(2000);
 80029b2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80029b6:	f002 fa6d 	bl	8004e94 <HAL_Delay>
	setPWM(htim2, TIM_CHANNEL_1, ESC_PWM_MIN);
 80029ba:	4e2e      	ldr	r6, [pc, #184]	; (8002a74 <ESCInit+0x190>)
 80029bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029c0:	930d      	str	r3, [sp, #52]	; 0x34
 80029c2:	2300      	movs	r3, #0
 80029c4:	930c      	str	r3, [sp, #48]	; 0x30
 80029c6:	466d      	mov	r5, sp
 80029c8:	f106 0410 	add.w	r4, r6, #16
 80029cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029d4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80029d8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80029dc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80029e0:	f7ff ff5c 	bl	800289c <setPWM>
	setPWM(htim2, TIM_CHANNEL_2, ESC_PWM_MIN);
 80029e4:	4e23      	ldr	r6, [pc, #140]	; (8002a74 <ESCInit+0x190>)
 80029e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029ea:	930d      	str	r3, [sp, #52]	; 0x34
 80029ec:	2304      	movs	r3, #4
 80029ee:	930c      	str	r3, [sp, #48]	; 0x30
 80029f0:	466d      	mov	r5, sp
 80029f2:	f106 0410 	add.w	r4, r6, #16
 80029f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029fe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002a02:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002a06:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002a0a:	f7ff ff47 	bl	800289c <setPWM>
	setPWM(htim2, TIM_CHANNEL_3, ESC_PWM_MIN);
 8002a0e:	4e19      	ldr	r6, [pc, #100]	; (8002a74 <ESCInit+0x190>)
 8002a10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a14:	930d      	str	r3, [sp, #52]	; 0x34
 8002a16:	2308      	movs	r3, #8
 8002a18:	930c      	str	r3, [sp, #48]	; 0x30
 8002a1a:	466d      	mov	r5, sp
 8002a1c:	f106 0410 	add.w	r4, r6, #16
 8002a20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a28:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002a2c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002a30:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002a34:	f7ff ff32 	bl	800289c <setPWM>
	setPWM(htim2, TIM_CHANNEL_4, ESC_PWM_MIN);
 8002a38:	4e0e      	ldr	r6, [pc, #56]	; (8002a74 <ESCInit+0x190>)
 8002a3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a3e:	930d      	str	r3, [sp, #52]	; 0x34
 8002a40:	230c      	movs	r3, #12
 8002a42:	930c      	str	r3, [sp, #48]	; 0x30
 8002a44:	466d      	mov	r5, sp
 8002a46:	f106 0410 	add.w	r4, r6, #16
 8002a4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a52:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002a56:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002a5a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002a5e:	f7ff ff1d 	bl	800289c <setPWM>
	HAL_Delay(2000);
 8002a62:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002a66:	f002 fa15 	bl	8004e94 <HAL_Delay>
}
 8002a6a:	bf00      	nop
 8002a6c:	3704      	adds	r7, #4
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a72:	bf00      	nop
 8002a74:	20000be8 	.word	0x20000be8

08002a78 <BMPInit>:

void BMPInit(){
 8002a78:	b5b0      	push	{r4, r5, r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
	bmp280_init_default_params(&bmp280.params);
 8002a7e:	4863      	ldr	r0, [pc, #396]	; (8002c0c <BMPInit+0x194>)
 8002a80:	f7fe fb52 	bl	8001128 <bmp280_init_default_params>
	bmp280.addr = BMP280_I2C_ADDRESS_0;
 8002a84:	4b62      	ldr	r3, [pc, #392]	; (8002c10 <BMPInit+0x198>)
 8002a86:	2276      	movs	r2, #118	; 0x76
 8002a88:	849a      	strh	r2, [r3, #36]	; 0x24
	bmp280.i2c = &hi2c1;
 8002a8a:	4b61      	ldr	r3, [pc, #388]	; (8002c10 <BMPInit+0x198>)
 8002a8c:	4a61      	ldr	r2, [pc, #388]	; (8002c14 <BMPInit+0x19c>)
 8002a8e:	629a      	str	r2, [r3, #40]	; 0x28

	while(!bmp280_init(&bmp280, &bmp280.params)){
 8002a90:	e020      	b.n	8002ad4 <BMPInit+0x5c>
		strSize = sprintf((char*)buffer, "BMP280 initialization failed\r\n");
 8002a92:	4a61      	ldr	r2, [pc, #388]	; (8002c18 <BMPInit+0x1a0>)
 8002a94:	4b61      	ldr	r3, [pc, #388]	; (8002c1c <BMPInit+0x1a4>)
 8002a96:	4615      	mov	r5, r2
 8002a98:	461c      	mov	r4, r3
 8002a9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a9c:	6028      	str	r0, [r5, #0]
 8002a9e:	6069      	str	r1, [r5, #4]
 8002aa0:	60aa      	str	r2, [r5, #8]
 8002aa2:	60eb      	str	r3, [r5, #12]
 8002aa4:	cc07      	ldmia	r4!, {r0, r1, r2}
 8002aa6:	6128      	str	r0, [r5, #16]
 8002aa8:	6169      	str	r1, [r5, #20]
 8002aaa:	61aa      	str	r2, [r5, #24]
 8002aac:	8823      	ldrh	r3, [r4, #0]
 8002aae:	78a2      	ldrb	r2, [r4, #2]
 8002ab0:	83ab      	strh	r3, [r5, #28]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	77ab      	strb	r3, [r5, #30]
 8002ab6:	231e      	movs	r3, #30
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	4b59      	ldr	r3, [pc, #356]	; (8002c20 <BMPInit+0x1a8>)
 8002abc:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, buffer, strSize, 1000);
 8002abe:	4b58      	ldr	r3, [pc, #352]	; (8002c20 <BMPInit+0x1a8>)
 8002ac0:	881a      	ldrh	r2, [r3, #0]
 8002ac2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ac6:	4954      	ldr	r1, [pc, #336]	; (8002c18 <BMPInit+0x1a0>)
 8002ac8:	4856      	ldr	r0, [pc, #344]	; (8002c24 <BMPInit+0x1ac>)
 8002aca:	f005 fe92 	bl	80087f2 <HAL_UART_Transmit>
		HAL_Delay(75);
 8002ace:	204b      	movs	r0, #75	; 0x4b
 8002ad0:	f002 f9e0 	bl	8004e94 <HAL_Delay>
	while(!bmp280_init(&bmp280, &bmp280.params)){
 8002ad4:	494d      	ldr	r1, [pc, #308]	; (8002c0c <BMPInit+0x194>)
 8002ad6:	484e      	ldr	r0, [pc, #312]	; (8002c10 <BMPInit+0x198>)
 8002ad8:	f7fe fca1 	bl	800141e <bmp280_init>
 8002adc:	4603      	mov	r3, r0
 8002ade:	f083 0301 	eor.w	r3, r3, #1
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1d4      	bne.n	8002a92 <BMPInit+0x1a>
	}
	HAL_Delay(1000);
 8002ae8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002aec:	f002 f9d2 	bl	8004e94 <HAL_Delay>
	bme280p = bmp280.id == BME280_CHIP_ID;
 8002af0:	4b47      	ldr	r3, [pc, #284]	; (8002c10 <BMPInit+0x198>)
 8002af2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002af6:	2b60      	cmp	r3, #96	; 0x60
 8002af8:	bf0c      	ite	eq
 8002afa:	2301      	moveq	r3, #1
 8002afc:	2300      	movne	r3, #0
 8002afe:	b2da      	uxtb	r2, r3
 8002b00:	4b49      	ldr	r3, [pc, #292]	; (8002c28 <BMPInit+0x1b0>)
 8002b02:	701a      	strb	r2, [r3, #0]
	strSize = sprintf((char*)buffer, "BMP280: found %s\r\n", bme280p ? "BME280" : "BMP280");
 8002b04:	4b48      	ldr	r3, [pc, #288]	; (8002c28 <BMPInit+0x1b0>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <BMPInit+0x98>
 8002b0c:	4b47      	ldr	r3, [pc, #284]	; (8002c2c <BMPInit+0x1b4>)
 8002b0e:	e000      	b.n	8002b12 <BMPInit+0x9a>
 8002b10:	4b47      	ldr	r3, [pc, #284]	; (8002c30 <BMPInit+0x1b8>)
 8002b12:	461a      	mov	r2, r3
 8002b14:	4947      	ldr	r1, [pc, #284]	; (8002c34 <BMPInit+0x1bc>)
 8002b16:	4840      	ldr	r0, [pc, #256]	; (8002c18 <BMPInit+0x1a0>)
 8002b18:	f007 f8b8 	bl	8009c8c <siprintf>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	4b3f      	ldr	r3, [pc, #252]	; (8002c20 <BMPInit+0x1a8>)
 8002b22:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, buffer, strSize, 1000);
 8002b24:	4b3e      	ldr	r3, [pc, #248]	; (8002c20 <BMPInit+0x1a8>)
 8002b26:	881a      	ldrh	r2, [r3, #0]
 8002b28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b2c:	493a      	ldr	r1, [pc, #232]	; (8002c18 <BMPInit+0x1a0>)
 8002b2e:	483d      	ldr	r0, [pc, #244]	; (8002c24 <BMPInit+0x1ac>)
 8002b30:	f005 fe5f 	bl	80087f2 <HAL_UART_Transmit>

	strSize = sprintf((char*)buffer, "Calibrating.\r\n");
 8002b34:	4a38      	ldr	r2, [pc, #224]	; (8002c18 <BMPInit+0x1a0>)
 8002b36:	4b40      	ldr	r3, [pc, #256]	; (8002c38 <BMPInit+0x1c0>)
 8002b38:	4614      	mov	r4, r2
 8002b3a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002b3c:	6020      	str	r0, [r4, #0]
 8002b3e:	6061      	str	r1, [r4, #4]
 8002b40:	60a2      	str	r2, [r4, #8]
 8002b42:	881a      	ldrh	r2, [r3, #0]
 8002b44:	789b      	ldrb	r3, [r3, #2]
 8002b46:	81a2      	strh	r2, [r4, #12]
 8002b48:	73a3      	strb	r3, [r4, #14]
 8002b4a:	230e      	movs	r3, #14
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	4b34      	ldr	r3, [pc, #208]	; (8002c20 <BMPInit+0x1a8>)
 8002b50:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, buffer, strSize, 10);
 8002b52:	4b33      	ldr	r3, [pc, #204]	; (8002c20 <BMPInit+0x1a8>)
 8002b54:	881a      	ldrh	r2, [r3, #0]
 8002b56:	230a      	movs	r3, #10
 8002b58:	492f      	ldr	r1, [pc, #188]	; (8002c18 <BMPInit+0x1a0>)
 8002b5a:	4832      	ldr	r0, [pc, #200]	; (8002c24 <BMPInit+0x1ac>)
 8002b5c:	f005 fe49 	bl	80087f2 <HAL_UART_Transmit>

	float pres_total = 0;
 8002b60:	f04f 0300 	mov.w	r3, #0
 8002b64:	617b      	str	r3, [r7, #20]
	float pressure, temperature, humidity;

	for(int i = 0; i < 100; ++i){
 8002b66:	2300      	movs	r3, #0
 8002b68:	613b      	str	r3, [r7, #16]
 8002b6a:	e01f      	b.n	8002bac <BMPInit+0x134>
		while(bmp280_is_measuring(&bmp280)) continue;
 8002b6c:	bf00      	nop
 8002b6e:	4828      	ldr	r0, [pc, #160]	; (8002c10 <BMPInit+0x198>)
 8002b70:	f7fe fd02 	bl	8001578 <bmp280_is_measuring>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1f8      	bne.n	8002b6c <BMPInit+0xf4>
		bmp280_read_float(&bmp280, &temperature, &pressure, &humidity);
 8002b7a:	1d3b      	adds	r3, r7, #4
 8002b7c:	f107 020c 	add.w	r2, r7, #12
 8002b80:	f107 0108 	add.w	r1, r7, #8
 8002b84:	4822      	ldr	r0, [pc, #136]	; (8002c10 <BMPInit+0x198>)
 8002b86:	f7fe ffbb 	bl	8001b00 <bmp280_read_float>
		HAL_UART_Transmit(&huart1, (uint8_t*)".", 1, 10);
 8002b8a:	230a      	movs	r3, #10
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	492b      	ldr	r1, [pc, #172]	; (8002c3c <BMPInit+0x1c4>)
 8002b90:	4824      	ldr	r0, [pc, #144]	; (8002c24 <BMPInit+0x1ac>)
 8002b92:	f005 fe2e 	bl	80087f2 <HAL_UART_Transmit>
		pres_total += pressure;
 8002b96:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b9a:	ed97 7a05 	vldr	s14, [r7, #20]
 8002b9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ba2:	edc7 7a05 	vstr	s15, [r7, #20]
	for(int i = 0; i < 100; ++i){
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	3301      	adds	r3, #1
 8002baa:	613b      	str	r3, [r7, #16]
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	2b63      	cmp	r3, #99	; 0x63
 8002bb0:	dddd      	ble.n	8002b6e <BMPInit+0xf6>
	}

	pressureRef = pres_total / 100;
 8002bb2:	ed97 7a05 	vldr	s14, [r7, #20]
 8002bb6:	eddf 6a22 	vldr	s13, [pc, #136]	; 8002c40 <BMPInit+0x1c8>
 8002bba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bbe:	4b21      	ldr	r3, [pc, #132]	; (8002c44 <BMPInit+0x1cc>)
 8002bc0:	edc3 7a00 	vstr	s15, [r3]
	HAL_Delay(20);
 8002bc4:	2014      	movs	r0, #20
 8002bc6:	f002 f965 	bl	8004e94 <HAL_Delay>
	kalman_init(&kalman_altitude, 0.12, 0.12, 0.055);
 8002bca:	ed9f 1a1f 	vldr	s2, [pc, #124]	; 8002c48 <BMPInit+0x1d0>
 8002bce:	eddf 0a1f 	vldr	s1, [pc, #124]	; 8002c4c <BMPInit+0x1d4>
 8002bd2:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8002c4c <BMPInit+0x1d4>
 8002bd6:	481e      	ldr	r0, [pc, #120]	; (8002c50 <BMPInit+0x1d8>)
 8002bd8:	f7fe fa06 	bl	8000fe8 <kalman_init>
	strSize = sprintf((char*)buffer,"Done!\r\n");
 8002bdc:	4a0e      	ldr	r2, [pc, #56]	; (8002c18 <BMPInit+0x1a0>)
 8002bde:	4b1d      	ldr	r3, [pc, #116]	; (8002c54 <BMPInit+0x1dc>)
 8002be0:	cb03      	ldmia	r3!, {r0, r1}
 8002be2:	6010      	str	r0, [r2, #0]
 8002be4:	6051      	str	r1, [r2, #4]
 8002be6:	2307      	movs	r3, #7
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	4b0d      	ldr	r3, [pc, #52]	; (8002c20 <BMPInit+0x1a8>)
 8002bec:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, buffer, strSize, 10);
 8002bee:	4b0c      	ldr	r3, [pc, #48]	; (8002c20 <BMPInit+0x1a8>)
 8002bf0:	881a      	ldrh	r2, [r3, #0]
 8002bf2:	230a      	movs	r3, #10
 8002bf4:	4908      	ldr	r1, [pc, #32]	; (8002c18 <BMPInit+0x1a0>)
 8002bf6:	480b      	ldr	r0, [pc, #44]	; (8002c24 <BMPInit+0x1ac>)
 8002bf8:	f005 fdfb 	bl	80087f2 <HAL_UART_Transmit>
	HAL_Delay(500);
 8002bfc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002c00:	f002 f948 	bl	8004e94 <HAL_Delay>
}
 8002c04:	bf00      	nop
 8002c06:	3718      	adds	r7, #24
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bdb0      	pop	{r4, r5, r7, pc}
 8002c0c:	20000c80 	.word	0x20000c80
 8002c10:	20000c54 	.word	0x20000c54
 8002c14:	20000404 	.word	0x20000404
 8002c18:	20000804 	.word	0x20000804
 8002c1c:	0800d594 	.word	0x0800d594
 8002c20:	20000d44 	.word	0x20000d44
 8002c24:	200007c4 	.word	0x200007c4
 8002c28:	20000794 	.word	0x20000794
 8002c2c:	0800d5b4 	.word	0x0800d5b4
 8002c30:	0800d5bc 	.word	0x0800d5bc
 8002c34:	0800d5c4 	.word	0x0800d5c4
 8002c38:	0800d5d8 	.word	0x0800d5d8
 8002c3c:	0800d5e8 	.word	0x0800d5e8
 8002c40:	42c80000 	.word	0x42c80000
 8002c44:	200001fc 	.word	0x200001fc
 8002c48:	3d6147ae 	.word	0x3d6147ae
 8002c4c:	3df5c28f 	.word	0x3df5c28f
 8002c50:	200006a8 	.word	0x200006a8
 8002c54:	0800d5ec 	.word	0x0800d5ec

08002c58 <GPSInit>:

void GPSInit(){
 8002c58:	b598      	push	{r3, r4, r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
	  //__HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);

	  if(HAL_UART_Receive_DMA(&huart3, gps_rx_buf, GPS_BUF_SIZE) != HAL_OK){
 8002c5c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002c60:	4913      	ldr	r1, [pc, #76]	; (8002cb0 <GPSInit+0x58>)
 8002c62:	4814      	ldr	r0, [pc, #80]	; (8002cb4 <GPSInit+0x5c>)
 8002c64:	f005 fe5e 	bl	8008924 <HAL_UART_Receive_DMA>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <GPSInit+0x1a>
		  Error_Handler();
 8002c6e:	f000 fe59 	bl	8003924 <Error_Handler>
	  }

	  __HAL_DMA_DISABLE_IT(huart3.hdmarx, DMA_IT_HT);
 8002c72:	4b10      	ldr	r3, [pc, #64]	; (8002cb4 <GPSInit+0x5c>)
 8002c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	4b0e      	ldr	r3, [pc, #56]	; (8002cb4 <GPSInit+0x5c>)
 8002c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f022 0208 	bic.w	r2, r2, #8
 8002c84:	601a      	str	r2, [r3, #0]

	  strSize = sprintf((char*)buffer, "GPS Done!\r\n");
 8002c86:	4a0c      	ldr	r2, [pc, #48]	; (8002cb8 <GPSInit+0x60>)
 8002c88:	4b0c      	ldr	r3, [pc, #48]	; (8002cbc <GPSInit+0x64>)
 8002c8a:	4614      	mov	r4, r2
 8002c8c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002c8e:	6020      	str	r0, [r4, #0]
 8002c90:	6061      	str	r1, [r4, #4]
 8002c92:	60a2      	str	r2, [r4, #8]
 8002c94:	230b      	movs	r3, #11
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	4b09      	ldr	r3, [pc, #36]	; (8002cc0 <GPSInit+0x68>)
 8002c9a:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1, buffer, strSize, 10);
 8002c9c:	4b08      	ldr	r3, [pc, #32]	; (8002cc0 <GPSInit+0x68>)
 8002c9e:	881a      	ldrh	r2, [r3, #0]
 8002ca0:	230a      	movs	r3, #10
 8002ca2:	4905      	ldr	r1, [pc, #20]	; (8002cb8 <GPSInit+0x60>)
 8002ca4:	4807      	ldr	r0, [pc, #28]	; (8002cc4 <GPSInit+0x6c>)
 8002ca6:	f005 fda4 	bl	80087f2 <HAL_UART_Transmit>
}
 8002caa:	bf00      	nop
 8002cac:	bd98      	pop	{r3, r4, r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	200008dc 	.word	0x200008dc
 8002cb4:	200003a8 	.word	0x200003a8
 8002cb8:	20000804 	.word	0x20000804
 8002cbc:	0800d5f4 	.word	0x0800d5f4
 8002cc0:	20000d44 	.word	0x20000d44
 8002cc4:	200007c4 	.word	0x200007c4

08002cc8 <RemoteInit>:
	}
	strSize = sprintf((char*)buffer, "HMC5883L Sukses!\r\n");
	HAL_UART_Transmit(&huart1, buffer, strSize, 10);
}

void RemoteInit(){
 8002cc8:	b5b0      	push	{r4, r5, r7, lr}
 8002cca:	af00      	add	r7, sp, #0
	  fly_mode = FLY_MODE_OFF;
 8002ccc:	4b32      	ldr	r3, [pc, #200]	; (8002d98 <RemoteInit+0xd0>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	701a      	strb	r2, [r3, #0]
	  strSize = sprintf((char*)buffer, "Wahana Mode Off\r\n");
 8002cd2:	4a32      	ldr	r2, [pc, #200]	; (8002d9c <RemoteInit+0xd4>)
 8002cd4:	4b32      	ldr	r3, [pc, #200]	; (8002da0 <RemoteInit+0xd8>)
 8002cd6:	4615      	mov	r5, r2
 8002cd8:	461c      	mov	r4, r3
 8002cda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cdc:	6028      	str	r0, [r5, #0]
 8002cde:	6069      	str	r1, [r5, #4]
 8002ce0:	60aa      	str	r2, [r5, #8]
 8002ce2:	60eb      	str	r3, [r5, #12]
 8002ce4:	8823      	ldrh	r3, [r4, #0]
 8002ce6:	822b      	strh	r3, [r5, #16]
 8002ce8:	2311      	movs	r3, #17
 8002cea:	b29a      	uxth	r2, r3
 8002cec:	4b2d      	ldr	r3, [pc, #180]	; (8002da4 <RemoteInit+0xdc>)
 8002cee:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1, buffer, strSize, 10);
 8002cf0:	4b2c      	ldr	r3, [pc, #176]	; (8002da4 <RemoteInit+0xdc>)
 8002cf2:	881a      	ldrh	r2, [r3, #0]
 8002cf4:	230a      	movs	r3, #10
 8002cf6:	4929      	ldr	r1, [pc, #164]	; (8002d9c <RemoteInit+0xd4>)
 8002cf8:	482b      	ldr	r0, [pc, #172]	; (8002da8 <RemoteInit+0xe0>)
 8002cfa:	f005 fd7a 	bl	80087f2 <HAL_UART_Transmit>

	  initPWM_DATA(&RC_CH1, &htim3, TIM_CHANNEL_2);
 8002cfe:	2204      	movs	r2, #4
 8002d00:	492a      	ldr	r1, [pc, #168]	; (8002dac <RemoteInit+0xe4>)
 8002d02:	482b      	ldr	r0, [pc, #172]	; (8002db0 <RemoteInit+0xe8>)
 8002d04:	f7ff fdb2 	bl	800286c <initPWM_DATA>
	  initPWM_DATA(&RC_CH2, &htim9, TIM_CHANNEL_2);
 8002d08:	2204      	movs	r2, #4
 8002d0a:	492a      	ldr	r1, [pc, #168]	; (8002db4 <RemoteInit+0xec>)
 8002d0c:	482a      	ldr	r0, [pc, #168]	; (8002db8 <RemoteInit+0xf0>)
 8002d0e:	f7ff fdad 	bl	800286c <initPWM_DATA>
	  initPWM_DATA(&RC_CH3, &htim5, TIM_CHANNEL_1);
 8002d12:	2200      	movs	r2, #0
 8002d14:	4929      	ldr	r1, [pc, #164]	; (8002dbc <RemoteInit+0xf4>)
 8002d16:	482a      	ldr	r0, [pc, #168]	; (8002dc0 <RemoteInit+0xf8>)
 8002d18:	f7ff fda8 	bl	800286c <initPWM_DATA>
	  initPWM_DATA(&RC_CH4, &htim3, TIM_CHANNEL_1);
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	4923      	ldr	r1, [pc, #140]	; (8002dac <RemoteInit+0xe4>)
 8002d20:	4828      	ldr	r0, [pc, #160]	; (8002dc4 <RemoteInit+0xfc>)
 8002d22:	f7ff fda3 	bl	800286c <initPWM_DATA>
	  initPWM_DATA(&RC_CH5, &htim4, TIM_CHANNEL_1);
 8002d26:	2200      	movs	r2, #0
 8002d28:	4927      	ldr	r1, [pc, #156]	; (8002dc8 <RemoteInit+0x100>)
 8002d2a:	4828      	ldr	r0, [pc, #160]	; (8002dcc <RemoteInit+0x104>)
 8002d2c:	f7ff fd9e 	bl	800286c <initPWM_DATA>
	  initPWM_DATA(&RC_CH6, &htim6, 0);
 8002d30:	2200      	movs	r2, #0
 8002d32:	4927      	ldr	r1, [pc, #156]	; (8002dd0 <RemoteInit+0x108>)
 8002d34:	4827      	ldr	r0, [pc, #156]	; (8002dd4 <RemoteInit+0x10c>)
 8002d36:	f7ff fd99 	bl	800286c <initPWM_DATA>

	  HAL_TIM_IC_Start_IT(RC_CH1.htim, RC_CH1.channel);
 8002d3a:	4b1d      	ldr	r3, [pc, #116]	; (8002db0 <RemoteInit+0xe8>)
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	4b1c      	ldr	r3, [pc, #112]	; (8002db0 <RemoteInit+0xe8>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	4619      	mov	r1, r3
 8002d44:	4610      	mov	r0, r2
 8002d46:	f004 fc51 	bl	80075ec <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(RC_CH2.htim, RC_CH2.channel);
 8002d4a:	4b1b      	ldr	r3, [pc, #108]	; (8002db8 <RemoteInit+0xf0>)
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	4b1a      	ldr	r3, [pc, #104]	; (8002db8 <RemoteInit+0xf0>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	4619      	mov	r1, r3
 8002d54:	4610      	mov	r0, r2
 8002d56:	f004 fc49 	bl	80075ec <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(RC_CH3.htim, RC_CH3.channel);
 8002d5a:	4b19      	ldr	r3, [pc, #100]	; (8002dc0 <RemoteInit+0xf8>)
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	4b18      	ldr	r3, [pc, #96]	; (8002dc0 <RemoteInit+0xf8>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	4619      	mov	r1, r3
 8002d64:	4610      	mov	r0, r2
 8002d66:	f004 fc41 	bl	80075ec <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(RC_CH4.htim, RC_CH4.channel);
 8002d6a:	4b16      	ldr	r3, [pc, #88]	; (8002dc4 <RemoteInit+0xfc>)
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	4b15      	ldr	r3, [pc, #84]	; (8002dc4 <RemoteInit+0xfc>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	4619      	mov	r1, r3
 8002d74:	4610      	mov	r0, r2
 8002d76:	f004 fc39 	bl	80075ec <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(RC_CH5.htim, RC_CH5.channel);
 8002d7a:	4b14      	ldr	r3, [pc, #80]	; (8002dcc <RemoteInit+0x104>)
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	4b13      	ldr	r3, [pc, #76]	; (8002dcc <RemoteInit+0x104>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	4619      	mov	r1, r3
 8002d84:	4610      	mov	r0, r2
 8002d86:	f004 fc31 	bl	80075ec <HAL_TIM_IC_Start_IT>
	  HAL_TIM_Base_Start(RC_CH6.htim);
 8002d8a:	4b12      	ldr	r3, [pc, #72]	; (8002dd4 <RemoteInit+0x10c>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f004 fb0f 	bl	80073b2 <HAL_TIM_Base_Start>
}
 8002d94:	bf00      	nop
 8002d96:	bdb0      	pop	{r4, r5, r7, pc}
 8002d98:	20000be0 	.word	0x20000be0
 8002d9c:	20000804 	.word	0x20000804
 8002da0:	0800d558 	.word	0x0800d558
 8002da4:	20000d44 	.word	0x20000d44
 8002da8:	200007c4 	.word	0x200007c4
 8002dac:	2000072c 	.word	0x2000072c
 8002db0:	20000710 	.word	0x20000710
 8002db4:	20000b80 	.word	0x20000b80
 8002db8:	20000d4c 	.word	0x20000d4c
 8002dbc:	200006d0 	.word	0x200006d0
 8002dc0:	20000c28 	.word	0x20000c28
 8002dc4:	200003e8 	.word	0x200003e8
 8002dc8:	20000304 	.word	0x20000304
 8002dcc:	20000d28 	.word	0x20000d28
 8002dd0:	20000afc 	.word	0x20000afc
 8002dd4:	20000b3c 	.word	0x20000b3c

08002dd8 <IMUInit>:

void IMUInit(){
 8002dd8:	b5b0      	push	{r4, r5, r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
	  HAL_UART_Transmit(&huart2, (u_char*)0xA5, 1, 10);
 8002dde:	230a      	movs	r3, #10
 8002de0:	2201      	movs	r2, #1
 8002de2:	21a5      	movs	r1, #165	; 0xa5
 8002de4:	485b      	ldr	r0, [pc, #364]	; (8002f54 <IMUInit+0x17c>)
 8002de6:	f005 fd04 	bl	80087f2 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, (u_char*)0x54, 1, 10);
 8002dea:	230a      	movs	r3, #10
 8002dec:	2201      	movs	r2, #1
 8002dee:	2154      	movs	r1, #84	; 0x54
 8002df0:	4858      	ldr	r0, [pc, #352]	; (8002f54 <IMUInit+0x17c>)
 8002df2:	f005 fcfe 	bl	80087f2 <HAL_UART_Transmit>

	  HAL_Delay(3000);
 8002df6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002dfa:	f002 f84b 	bl	8004e94 <HAL_Delay>
	  strSize = sprintf((char*)buffer,"Kalibrasi tilt done\r\n");
 8002dfe:	4a56      	ldr	r2, [pc, #344]	; (8002f58 <IMUInit+0x180>)
 8002e00:	4b56      	ldr	r3, [pc, #344]	; (8002f5c <IMUInit+0x184>)
 8002e02:	4615      	mov	r5, r2
 8002e04:	461c      	mov	r4, r3
 8002e06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e08:	6028      	str	r0, [r5, #0]
 8002e0a:	6069      	str	r1, [r5, #4]
 8002e0c:	60aa      	str	r2, [r5, #8]
 8002e0e:	60eb      	str	r3, [r5, #12]
 8002e10:	6820      	ldr	r0, [r4, #0]
 8002e12:	6128      	str	r0, [r5, #16]
 8002e14:	88a3      	ldrh	r3, [r4, #4]
 8002e16:	82ab      	strh	r3, [r5, #20]
 8002e18:	2315      	movs	r3, #21
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	4b50      	ldr	r3, [pc, #320]	; (8002f60 <IMUInit+0x188>)
 8002e1e:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1, buffer, strSize, 100);
 8002e20:	4b4f      	ldr	r3, [pc, #316]	; (8002f60 <IMUInit+0x188>)
 8002e22:	881a      	ldrh	r2, [r3, #0]
 8002e24:	2364      	movs	r3, #100	; 0x64
 8002e26:	494c      	ldr	r1, [pc, #304]	; (8002f58 <IMUInit+0x180>)
 8002e28:	484e      	ldr	r0, [pc, #312]	; (8002f64 <IMUInit+0x18c>)
 8002e2a:	f005 fce2 	bl	80087f2 <HAL_UART_Transmit>

	  //Kalibrasi heading
	  HAL_UART_Transmit(&huart2, (u_char*)0xA5, 1, 10);
 8002e2e:	230a      	movs	r3, #10
 8002e30:	2201      	movs	r2, #1
 8002e32:	21a5      	movs	r1, #165	; 0xa5
 8002e34:	4847      	ldr	r0, [pc, #284]	; (8002f54 <IMUInit+0x17c>)
 8002e36:	f005 fcdc 	bl	80087f2 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, (u_char*)0x55, 1, 10);
 8002e3a:	230a      	movs	r3, #10
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	2155      	movs	r1, #85	; 0x55
 8002e40:	4844      	ldr	r0, [pc, #272]	; (8002f54 <IMUInit+0x17c>)
 8002e42:	f005 fcd6 	bl	80087f2 <HAL_UART_Transmit>
	  HAL_Delay(3000);
 8002e46:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002e4a:	f002 f823 	bl	8004e94 <HAL_Delay>

	  strSize = sprintf((char*)buffer,"Kalibrasi heading done\r\n");
 8002e4e:	4a42      	ldr	r2, [pc, #264]	; (8002f58 <IMUInit+0x180>)
 8002e50:	4b45      	ldr	r3, [pc, #276]	; (8002f68 <IMUInit+0x190>)
 8002e52:	4615      	mov	r5, r2
 8002e54:	461c      	mov	r4, r3
 8002e56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e58:	6028      	str	r0, [r5, #0]
 8002e5a:	6069      	str	r1, [r5, #4]
 8002e5c:	60aa      	str	r2, [r5, #8]
 8002e5e:	60eb      	str	r3, [r5, #12]
 8002e60:	cc03      	ldmia	r4!, {r0, r1}
 8002e62:	6128      	str	r0, [r5, #16]
 8002e64:	6169      	str	r1, [r5, #20]
 8002e66:	7823      	ldrb	r3, [r4, #0]
 8002e68:	762b      	strb	r3, [r5, #24]
 8002e6a:	2318      	movs	r3, #24
 8002e6c:	b29a      	uxth	r2, r3
 8002e6e:	4b3c      	ldr	r3, [pc, #240]	; (8002f60 <IMUInit+0x188>)
 8002e70:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1, buffer, strSize, 100);
 8002e72:	4b3b      	ldr	r3, [pc, #236]	; (8002f60 <IMUInit+0x188>)
 8002e74:	881a      	ldrh	r2, [r3, #0]
 8002e76:	2364      	movs	r3, #100	; 0x64
 8002e78:	4937      	ldr	r1, [pc, #220]	; (8002f58 <IMUInit+0x180>)
 8002e7a:	483a      	ldr	r0, [pc, #232]	; (8002f64 <IMUInit+0x18c>)
 8002e7c:	f005 fcb9 	bl	80087f2 <HAL_UART_Transmit>

	  //Konfigurasi Output ASCII
	  HAL_UART_Transmit(&huart2, (u_char*)0xA5, 1, 10);
 8002e80:	230a      	movs	r3, #10
 8002e82:	2201      	movs	r2, #1
 8002e84:	21a5      	movs	r1, #165	; 0xa5
 8002e86:	4833      	ldr	r0, [pc, #204]	; (8002f54 <IMUInit+0x17c>)
 8002e88:	f005 fcb3 	bl	80087f2 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, (u_char*)0x52, 1, 10);
 8002e8c:	230a      	movs	r3, #10
 8002e8e:	2201      	movs	r2, #1
 8002e90:	2152      	movs	r1, #82	; 0x52
 8002e92:	4830      	ldr	r0, [pc, #192]	; (8002f54 <IMUInit+0x17c>)
 8002e94:	f005 fcad 	bl	80087f2 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8002e98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e9c:	f001 fffa 	bl	8004e94 <HAL_Delay>

	  HAL_UART_Receive_DMA(&huart2, IMUBuffer, 16);
 8002ea0:	2210      	movs	r2, #16
 8002ea2:	4932      	ldr	r1, [pc, #200]	; (8002f6c <IMUInit+0x194>)
 8002ea4:	482b      	ldr	r0, [pc, #172]	; (8002f54 <IMUInit+0x17c>)
 8002ea6:	f005 fd3d 	bl	8008924 <HAL_UART_Receive_DMA>

	  float pitchTotal = 0, yawTotal = 0, rollTotal = 0;
 8002eaa:	f04f 0300 	mov.w	r3, #0
 8002eae:	60fb      	str	r3, [r7, #12]
 8002eb0:	f04f 0300 	mov.w	r3, #0
 8002eb4:	60bb      	str	r3, [r7, #8]
 8002eb6:	f04f 0300 	mov.w	r3, #0
 8002eba:	607b      	str	r3, [r7, #4]

	  int i = 0;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	603b      	str	r3, [r7, #0]
	  while(i < 100){
 8002ec0:	e026      	b.n	8002f10 <IMUInit+0x138>
		  if(IMUDataStatus){
 8002ec2:	4b2b      	ldr	r3, [pc, #172]	; (8002f70 <IMUInit+0x198>)
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d021      	beq.n	8002f0e <IMUInit+0x136>
			  i += 1;
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	603b      	str	r3, [r7, #0]
			  getIMUData(&IMU_Data);
 8002ed0:	4828      	ldr	r0, [pc, #160]	; (8002f74 <IMUInit+0x19c>)
 8002ed2:	f000 f8c9 	bl	8003068 <getIMUData>
			  pitchTotal += IMU_Data.PITCH;
 8002ed6:	4b27      	ldr	r3, [pc, #156]	; (8002f74 <IMUInit+0x19c>)
 8002ed8:	edd3 7a01 	vldr	s15, [r3, #4]
 8002edc:	ed97 7a03 	vldr	s14, [r7, #12]
 8002ee0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ee4:	edc7 7a03 	vstr	s15, [r7, #12]
			  yawTotal += IMU_Data.YAW;
 8002ee8:	4b22      	ldr	r3, [pc, #136]	; (8002f74 <IMUInit+0x19c>)
 8002eea:	edd3 7a00 	vldr	s15, [r3]
 8002eee:	ed97 7a02 	vldr	s14, [r7, #8]
 8002ef2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ef6:	edc7 7a02 	vstr	s15, [r7, #8]
			  rollTotal += IMU_Data.ROLL;
 8002efa:	4b1e      	ldr	r3, [pc, #120]	; (8002f74 <IMUInit+0x19c>)
 8002efc:	edd3 7a02 	vldr	s15, [r3, #8]
 8002f00:	ed97 7a01 	vldr	s14, [r7, #4]
 8002f04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f08:	edc7 7a01 	vstr	s15, [r7, #4]
 8002f0c:	e000      	b.n	8002f10 <IMUInit+0x138>
		  } else continue;
 8002f0e:	bf00      	nop
	  while(i < 100){
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	2b63      	cmp	r3, #99	; 0x63
 8002f14:	ddd5      	ble.n	8002ec2 <IMUInit+0xea>
	  }
	  pitchRef = pitchTotal / 100;
 8002f16:	ed97 7a03 	vldr	s14, [r7, #12]
 8002f1a:	eddf 6a17 	vldr	s13, [pc, #92]	; 8002f78 <IMUInit+0x1a0>
 8002f1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f22:	4b16      	ldr	r3, [pc, #88]	; (8002f7c <IMUInit+0x1a4>)
 8002f24:	edc3 7a00 	vstr	s15, [r3]
	  yawRef = yawTotal / 100;
 8002f28:	ed97 7a02 	vldr	s14, [r7, #8]
 8002f2c:	eddf 6a12 	vldr	s13, [pc, #72]	; 8002f78 <IMUInit+0x1a0>
 8002f30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f34:	4b12      	ldr	r3, [pc, #72]	; (8002f80 <IMUInit+0x1a8>)
 8002f36:	edc3 7a00 	vstr	s15, [r3]
	  rollRef = rollTotal / 100;
 8002f3a:	ed97 7a01 	vldr	s14, [r7, #4]
 8002f3e:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002f78 <IMUInit+0x1a0>
 8002f42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f46:	4b0f      	ldr	r3, [pc, #60]	; (8002f84 <IMUInit+0x1ac>)
 8002f48:	edc3 7a00 	vstr	s15, [r3]
}
 8002f4c:	bf00      	nop
 8002f4e:	3710      	adds	r7, #16
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bdb0      	pop	{r4, r5, r7, pc}
 8002f54:	20000c88 	.word	0x20000c88
 8002f58:	20000804 	.word	0x20000804
 8002f5c:	0800d634 	.word	0x0800d634
 8002f60:	20000d44 	.word	0x20000d44
 8002f64:	200007c4 	.word	0x200007c4
 8002f68:	0800d64c 	.word	0x0800d64c
 8002f6c:	20000c44 	.word	0x20000c44
 8002f70:	200004b0 	.word	0x200004b0
 8002f74:	200006c4 	.word	0x200006c4
 8002f78:	42c80000 	.word	0x42c80000
 8002f7c:	20000200 	.word	0x20000200
 8002f80:	20000204 	.word	0x20000204
 8002f84:	20000208 	.word	0x20000208

08002f88 <getBMPAltitude>:

void getBMPAltitude(){
 8002f88:	b590      	push	{r4, r7, lr}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
	static float altitude_reading;
	static float estimated_altitude;
	if(!bmp280_is_measuring(&bmp280)){
 8002f8e:	482b      	ldr	r0, [pc, #172]	; (800303c <getBMPAltitude+0xb4>)
 8002f90:	f7fe faf2 	bl	8001578 <bmp280_is_measuring>
 8002f94:	4603      	mov	r3, r0
 8002f96:	f083 0301 	eor.w	r3, r3, #1
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d048      	beq.n	8003032 <getBMPAltitude+0xaa>
		  float pressure, temperature, humidity;
		  bmp280_read_float(&bmp280, &temperature, &pressure, &humidity);
 8002fa0:	1d3b      	adds	r3, r7, #4
 8002fa2:	f107 020c 	add.w	r2, r7, #12
 8002fa6:	f107 0108 	add.w	r1, r7, #8
 8002faa:	4824      	ldr	r0, [pc, #144]	; (800303c <getBMPAltitude+0xb4>)
 8002fac:	f7fe fda8 	bl	8001b00 <bmp280_read_float>
		  altitude_reading = bmp280_read_altitude(pressure / 100, pressureRef / 100);
 8002fb0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002fb4:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8003040 <getBMPAltitude+0xb8>
 8002fb8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002fbc:	4b21      	ldr	r3, [pc, #132]	; (8003044 <getBMPAltitude+0xbc>)
 8002fbe:	edd3 7a00 	vldr	s15, [r3]
 8002fc2:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003040 <getBMPAltitude+0xb8>
 8002fc6:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8002fca:	eef0 0a46 	vmov.f32	s1, s12
 8002fce:	eeb0 0a66 	vmov.f32	s0, s13
 8002fd2:	f7fe fde1 	bl	8001b98 <bmp280_read_altitude>
 8002fd6:	eef0 7a40 	vmov.f32	s15, s0
 8002fda:	4b1b      	ldr	r3, [pc, #108]	; (8003048 <getBMPAltitude+0xc0>)
 8002fdc:	edc3 7a00 	vstr	s15, [r3]
		  estimated_altitude = kalman_updateEstimate(&kalman_altitude, altitude_reading);
 8002fe0:	4b19      	ldr	r3, [pc, #100]	; (8003048 <getBMPAltitude+0xc0>)
 8002fe2:	edd3 7a00 	vldr	s15, [r3]
 8002fe6:	eeb0 0a67 	vmov.f32	s0, s15
 8002fea:	4818      	ldr	r0, [pc, #96]	; (800304c <getBMPAltitude+0xc4>)
 8002fec:	f7fe f816 	bl	800101c <kalman_updateEstimate>
 8002ff0:	eef0 7a40 	vmov.f32	s15, s0
 8002ff4:	4b16      	ldr	r3, [pc, #88]	; (8003050 <getBMPAltitude+0xc8>)
 8002ff6:	edc3 7a00 	vstr	s15, [r3]
		  sensorAltitude = estimated_altitude;
 8002ffa:	4b15      	ldr	r3, [pc, #84]	; (8003050 <getBMPAltitude+0xc8>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a15      	ldr	r2, [pc, #84]	; (8003054 <getBMPAltitude+0xcc>)
 8003000:	6013      	str	r3, [r2, #0]
		  strSize = sprintf((char*)buffer, "%f\r\n", sensorAltitude);
 8003002:	4b14      	ldr	r3, [pc, #80]	; (8003054 <getBMPAltitude+0xcc>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4618      	mov	r0, r3
 8003008:	f7fd fa9e 	bl	8000548 <__aeabi_f2d>
 800300c:	4603      	mov	r3, r0
 800300e:	460c      	mov	r4, r1
 8003010:	461a      	mov	r2, r3
 8003012:	4623      	mov	r3, r4
 8003014:	4910      	ldr	r1, [pc, #64]	; (8003058 <getBMPAltitude+0xd0>)
 8003016:	4811      	ldr	r0, [pc, #68]	; (800305c <getBMPAltitude+0xd4>)
 8003018:	f006 fe38 	bl	8009c8c <siprintf>
 800301c:	4603      	mov	r3, r0
 800301e:	b29a      	uxth	r2, r3
 8003020:	4b0f      	ldr	r3, [pc, #60]	; (8003060 <getBMPAltitude+0xd8>)
 8003022:	801a      	strh	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1, buffer, strSize, 1);
 8003024:	4b0e      	ldr	r3, [pc, #56]	; (8003060 <getBMPAltitude+0xd8>)
 8003026:	881a      	ldrh	r2, [r3, #0]
 8003028:	2301      	movs	r3, #1
 800302a:	490c      	ldr	r1, [pc, #48]	; (800305c <getBMPAltitude+0xd4>)
 800302c:	480d      	ldr	r0, [pc, #52]	; (8003064 <getBMPAltitude+0xdc>)
 800302e:	f005 fbe0 	bl	80087f2 <HAL_UART_Transmit>
	}
}
 8003032:	bf00      	nop
 8003034:	3714      	adds	r7, #20
 8003036:	46bd      	mov	sp, r7
 8003038:	bd90      	pop	{r4, r7, pc}
 800303a:	bf00      	nop
 800303c:	20000c54 	.word	0x20000c54
 8003040:	42c80000 	.word	0x42c80000
 8003044:	200001fc 	.word	0x200001fc
 8003048:	2000020c 	.word	0x2000020c
 800304c:	200006a8 	.word	0x200006a8
 8003050:	20000210 	.word	0x20000210
 8003054:	200008cc 	.word	0x200008cc
 8003058:	0800d668 	.word	0x0800d668
 800305c:	20000804 	.word	0x20000804
 8003060:	20000d44 	.word	0x20000d44
 8003064:	200007c4 	.word	0x200007c4

08003068 <getIMUData>:
		  while(pointer != NULL);
		  GPSDataStatus = false;
	  }
}

void getIMUData(IMU_DATA *IMU_Data){
 8003068:	b580      	push	{r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
	if(IMUDataStatus){
 8003070:	4b59      	ldr	r3, [pc, #356]	; (80031d8 <getIMUData+0x170>)
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	f000 80aa 	beq.w	80031ce <getIMUData+0x166>
		  uint8_t YPR[8];
		  IMU_Data->YAW = 1000.0f, IMU_Data->PITCH = 1000.0f, IMU_Data->ROLL = 1000.0f;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a57      	ldr	r2, [pc, #348]	; (80031dc <getIMUData+0x174>)
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a56      	ldr	r2, [pc, #344]	; (80031dc <getIMUData+0x174>)
 8003084:	605a      	str	r2, [r3, #4]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a54      	ldr	r2, [pc, #336]	; (80031dc <getIMUData+0x174>)
 800308a:	609a      	str	r2, [r3, #8]
		  char* buf;
		  buf = memchr(IMUBuffer, 0xAA, 16);
 800308c:	2210      	movs	r2, #16
 800308e:	21aa      	movs	r1, #170	; 0xaa
 8003090:	4853      	ldr	r0, [pc, #332]	; (80031e0 <getIMUData+0x178>)
 8003092:	f7fd f89d 	bl	80001d0 <memchr>
 8003096:	6178      	str	r0, [r7, #20]
		  memcpy(YPR, buf, 8);
 8003098:	697a      	ldr	r2, [r7, #20]
 800309a:	f107 030c 	add.w	r3, r7, #12
 800309e:	6810      	ldr	r0, [r2, #0]
 80030a0:	6851      	ldr	r1, [r2, #4]
 80030a2:	c303      	stmia	r3!, {r0, r1}
		  if(YPR[0] == 0xAA && YPR[7] == 0x55){
 80030a4:	7b3b      	ldrb	r3, [r7, #12]
 80030a6:	2baa      	cmp	r3, #170	; 0xaa
 80030a8:	f040 808e 	bne.w	80031c8 <getIMUData+0x160>
 80030ac:	7cfb      	ldrb	r3, [r7, #19]
 80030ae:	2b55      	cmp	r3, #85	; 0x55
 80030b0:	f040 808a 	bne.w	80031c8 <getIMUData+0x160>
			  IMU_Data->YAW = (float)((YPR[1] << 8 | YPR[2]) * 0.01f);
 80030b4:	7b7b      	ldrb	r3, [r7, #13]
 80030b6:	021b      	lsls	r3, r3, #8
 80030b8:	7bba      	ldrb	r2, [r7, #14]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	ee07 3a90 	vmov	s15, r3
 80030c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030c4:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80031e4 <getIMUData+0x17c>
 80030c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	edc3 7a00 	vstr	s15, [r3]
			  if(IMU_Data->YAW > 179) IMU_Data->YAW = IMU_Data->YAW - 655;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	edd3 7a00 	vldr	s15, [r3]
 80030d8:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80031e8 <getIMUData+0x180>
 80030dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030e4:	dd09      	ble.n	80030fa <getIMUData+0x92>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	edd3 7a00 	vldr	s15, [r3]
 80030ec:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80031ec <getIMUData+0x184>
 80030f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	edc3 7a00 	vstr	s15, [r3]

			  sensorYaw = IMU_Data->YAW - yawRef;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	ed93 7a00 	vldr	s14, [r3]
 8003100:	4b3b      	ldr	r3, [pc, #236]	; (80031f0 <getIMUData+0x188>)
 8003102:	edd3 7a00 	vldr	s15, [r3]
 8003106:	ee77 7a67 	vsub.f32	s15, s14, s15
 800310a:	4b3a      	ldr	r3, [pc, #232]	; (80031f4 <getIMUData+0x18c>)
 800310c:	edc3 7a00 	vstr	s15, [r3]

			  IMU_Data->PITCH = (float)((YPR[3] << 8 | YPR[4]) * 0.01f);
 8003110:	7bfb      	ldrb	r3, [r7, #15]
 8003112:	021b      	lsls	r3, r3, #8
 8003114:	7c3a      	ldrb	r2, [r7, #16]
 8003116:	4313      	orrs	r3, r2
 8003118:	ee07 3a90 	vmov	s15, r3
 800311c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003120:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80031e4 <getIMUData+0x17c>
 8003124:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	edc3 7a01 	vstr	s15, [r3, #4]
			  if(IMU_Data->PITCH > 179) IMU_Data->PITCH = IMU_Data->PITCH - 655;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	edd3 7a01 	vldr	s15, [r3, #4]
 8003134:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80031e8 <getIMUData+0x180>
 8003138:	eef4 7ac7 	vcmpe.f32	s15, s14
 800313c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003140:	dd09      	ble.n	8003156 <getIMUData+0xee>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	edd3 7a01 	vldr	s15, [r3, #4]
 8003148:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80031ec <getIMUData+0x184>
 800314c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	edc3 7a01 	vstr	s15, [r3, #4]

			  sensorPitch = IMU_Data->PITCH - pitchRef;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	ed93 7a01 	vldr	s14, [r3, #4]
 800315c:	4b26      	ldr	r3, [pc, #152]	; (80031f8 <getIMUData+0x190>)
 800315e:	edd3 7a00 	vldr	s15, [r3]
 8003162:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003166:	4b25      	ldr	r3, [pc, #148]	; (80031fc <getIMUData+0x194>)
 8003168:	edc3 7a00 	vstr	s15, [r3]

			  IMU_Data->ROLL = (float)((YPR[5] << 8 | YPR[6]) * 0.01f);
 800316c:	7c7b      	ldrb	r3, [r7, #17]
 800316e:	021b      	lsls	r3, r3, #8
 8003170:	7cba      	ldrb	r2, [r7, #18]
 8003172:	4313      	orrs	r3, r2
 8003174:	ee07 3a90 	vmov	s15, r3
 8003178:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800317c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80031e4 <getIMUData+0x17c>
 8003180:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	edc3 7a02 	vstr	s15, [r3, #8]
			  if(IMU_Data->ROLL > 179) IMU_Data->ROLL = IMU_Data->ROLL - 655;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003190:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80031e8 <getIMUData+0x180>
 8003194:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800319c:	dd09      	ble.n	80031b2 <getIMUData+0x14a>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	edd3 7a02 	vldr	s15, [r3, #8]
 80031a4:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80031ec <getIMUData+0x184>
 80031a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	edc3 7a02 	vstr	s15, [r3, #8]

			  sensorRoll = IMU_Data->ROLL - rollRef;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	ed93 7a02 	vldr	s14, [r3, #8]
 80031b8:	4b11      	ldr	r3, [pc, #68]	; (8003200 <getIMUData+0x198>)
 80031ba:	edd3 7a00 	vldr	s15, [r3]
 80031be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031c2:	4b10      	ldr	r3, [pc, #64]	; (8003204 <getIMUData+0x19c>)
 80031c4:	edc3 7a00 	vstr	s15, [r3]

			  //strSize = sprintf((char*)buffer, "Y: %f, P: %f, R: %f\r\n", sensorYaw, sensorPitch, sensorRoll);
			  //HAL_UART_Transmit(&huart1, buffer, strSize, 100);
		  }
		  IMUDataStatus = false;
 80031c8:	4b03      	ldr	r3, [pc, #12]	; (80031d8 <getIMUData+0x170>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	701a      	strb	r2, [r3, #0]
	}

}
 80031ce:	bf00      	nop
 80031d0:	3718      	adds	r7, #24
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	200004b0 	.word	0x200004b0
 80031dc:	447a0000 	.word	0x447a0000
 80031e0:	20000c44 	.word	0x20000c44
 80031e4:	3c23d70a 	.word	0x3c23d70a
 80031e8:	43330000 	.word	0x43330000
 80031ec:	4423c000 	.word	0x4423c000
 80031f0:	20000204 	.word	0x20000204
 80031f4:	20000ad0 	.word	0x20000ad0
 80031f8:	20000200 	.word	0x20000200
 80031fc:	20000be4 	.word	0x20000be4
 8003200:	20000208 	.word	0x20000208
 8003204:	2000049c 	.word	0x2000049c

08003208 <setPWM_DATA>:

void setPWM_DATA(PWM_DATA* pwm_data){
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
	if(pwm_data->onRisingEdge && !pwm_data->onFallingEdge){
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	7e1b      	ldrb	r3, [r3, #24]
 8003214:	2b00      	cmp	r3, #0
 8003216:	f000 8087 	beq.w	8003328 <setPWM_DATA+0x120>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	7e5b      	ldrb	r3, [r3, #25]
 800321e:	f083 0301 	eor.w	r3, r3, #1
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b00      	cmp	r3, #0
 8003226:	d07f      	beq.n	8003328 <setPWM_DATA+0x120>
		pwm_data->onRisingEdge = false;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	761a      	strb	r2, [r3, #24]
		pwm_data->onFallingEdge = true;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	765a      	strb	r2, [r3, #25]
		pwm_data->RisingEdgeVal = HAL_TIM_ReadCapturedValue(pwm_data->htim, pwm_data->channel);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	4619      	mov	r1, r3
 800323e:	4610      	mov	r0, r2
 8003240:	f004 fd5e 	bl	8007d00 <HAL_TIM_ReadCapturedValue>
 8003244:	4602      	mov	r2, r0
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	609a      	str	r2, [r3, #8]
		__HAL_TIM_SET_CAPTUREPOLARITY(pwm_data->htim, pwm_data->channel, TIM_INPUTCHANNELPOLARITY_FALLING);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10a      	bne.n	8003268 <setPWM_DATA+0x60>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	6a1a      	ldr	r2, [r3, #32]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f022 020a 	bic.w	r2, r2, #10
 8003264:	621a      	str	r2, [r3, #32]
 8003266:	e027      	b.n	80032b8 <setPWM_DATA+0xb0>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	2b04      	cmp	r3, #4
 800326e:	d10a      	bne.n	8003286 <setPWM_DATA+0x7e>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6a1a      	ldr	r2, [r3, #32]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003282:	621a      	str	r2, [r3, #32]
 8003284:	e018      	b.n	80032b8 <setPWM_DATA+0xb0>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	2b08      	cmp	r3, #8
 800328c:	d10a      	bne.n	80032a4 <setPWM_DATA+0x9c>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6a1a      	ldr	r2, [r3, #32]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 80032a0:	621a      	str	r2, [r3, #32]
 80032a2:	e009      	b.n	80032b8 <setPWM_DATA+0xb0>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	6a1a      	ldr	r2, [r3, #32]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 80032b6:	621a      	str	r2, [r3, #32]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d10a      	bne.n	80032d6 <setPWM_DATA+0xce>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	6a1a      	ldr	r2, [r3, #32]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f042 0202 	orr.w	r2, r2, #2
 80032d2:	621a      	str	r2, [r3, #32]
 80032d4:	e0aa      	b.n	800342c <setPWM_DATA+0x224>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	2b04      	cmp	r3, #4
 80032dc:	d10a      	bne.n	80032f4 <setPWM_DATA+0xec>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6a1a      	ldr	r2, [r3, #32]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f042 0220 	orr.w	r2, r2, #32
 80032f0:	621a      	str	r2, [r3, #32]
 80032f2:	e09b      	b.n	800342c <setPWM_DATA+0x224>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	2b08      	cmp	r3, #8
 80032fa:	d10a      	bne.n	8003312 <setPWM_DATA+0x10a>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	6a1a      	ldr	r2, [r3, #32]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800330e:	621a      	str	r2, [r3, #32]
 8003310:	e08c      	b.n	800342c <setPWM_DATA+0x224>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6a1a      	ldr	r2, [r3, #32]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003324:	621a      	str	r2, [r3, #32]
 8003326:	e081      	b.n	800342c <setPWM_DATA+0x224>

	} else if(pwm_data->onFallingEdge && !pwm_data->onRisingEdge) {
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	7e5b      	ldrb	r3, [r3, #25]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d07d      	beq.n	800342c <setPWM_DATA+0x224>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	7e1b      	ldrb	r3, [r3, #24]
 8003334:	f083 0301 	eor.w	r3, r3, #1
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d076      	beq.n	800342c <setPWM_DATA+0x224>
		pwm_data->onFallingEdge = false;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	765a      	strb	r2, [r3, #25]
		pwm_data->onRisingEdge =  true;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	761a      	strb	r2, [r3, #24]
		pwm_data->FallingEdgeVal = HAL_TIM_ReadCapturedValue(pwm_data->htim, pwm_data->channel);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	4619      	mov	r1, r3
 8003354:	4610      	mov	r0, r2
 8003356:	f004 fcd3 	bl	8007d00 <HAL_TIM_ReadCapturedValue>
 800335a:	4602      	mov	r2, r0
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_CAPTUREPOLARITY(pwm_data->htim, pwm_data->channel, TIM_INPUTCHANNELPOLARITY_RISING);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d10a      	bne.n	800337e <setPWM_DATA+0x176>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	6a1a      	ldr	r2, [r3, #32]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f022 020a 	bic.w	r2, r2, #10
 800337a:	621a      	str	r2, [r3, #32]
 800337c:	e027      	b.n	80033ce <setPWM_DATA+0x1c6>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	2b04      	cmp	r3, #4
 8003384:	d10a      	bne.n	800339c <setPWM_DATA+0x194>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6a1a      	ldr	r2, [r3, #32]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003398:	621a      	str	r2, [r3, #32]
 800339a:	e018      	b.n	80033ce <setPWM_DATA+0x1c6>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	2b08      	cmp	r3, #8
 80033a2:	d10a      	bne.n	80033ba <setPWM_DATA+0x1b2>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	6a1a      	ldr	r2, [r3, #32]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 80033b6:	621a      	str	r2, [r3, #32]
 80033b8:	e009      	b.n	80033ce <setPWM_DATA+0x1c6>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	6a1a      	ldr	r2, [r3, #32]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 80033cc:	621a      	str	r2, [r3, #32]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d108      	bne.n	80033e8 <setPWM_DATA+0x1e0>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	6a12      	ldr	r2, [r2, #32]
 80033e4:	621a      	str	r2, [r3, #32]
 80033e6:	e021      	b.n	800342c <setPWM_DATA+0x224>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	2b04      	cmp	r3, #4
 80033ee:	d108      	bne.n	8003402 <setPWM_DATA+0x1fa>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6a12      	ldr	r2, [r2, #32]
 80033fe:	621a      	str	r2, [r3, #32]
 8003400:	e014      	b.n	800342c <setPWM_DATA+0x224>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	2b08      	cmp	r3, #8
 8003408:	d108      	bne.n	800341c <setPWM_DATA+0x214>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	6a12      	ldr	r2, [r2, #32]
 8003418:	621a      	str	r2, [r3, #32]
 800341a:	e007      	b.n	800342c <setPWM_DATA+0x224>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	6a12      	ldr	r2, [r2, #32]
 800342a:	621a      	str	r2, [r3, #32]
	}
	if(pwm_data->FallingEdgeVal >= pwm_data->RisingEdgeVal){
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68da      	ldr	r2, [r3, #12]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	429a      	cmp	r2, r3
 8003436:	d30c      	bcc.n	8003452 <setPWM_DATA+0x24a>
		pwm_data->DutyCycleVal = pwm_data->FallingEdgeVal - pwm_data->RisingEdgeVal;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68da      	ldr	r2, [r3, #12]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	1ad2      	subs	r2, r2, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	611a      	str	r2, [r3, #16]
		pwm_data->FallingEdgeVal = 0;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	60da      	str	r2, [r3, #12]
		pwm_data->RisingEdgeVal = 0;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	609a      	str	r2, [r3, #8]
	}
}
 8003452:	bf00      	nop
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
	...

0800345c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART2 && !IMUDataStatus)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a10      	ldr	r2, [pc, #64]	; (80034ac <HAL_UART_RxCpltCallback+0x50>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d109      	bne.n	8003482 <HAL_UART_RxCpltCallback+0x26>
 800346e:	4b10      	ldr	r3, [pc, #64]	; (80034b0 <HAL_UART_RxCpltCallback+0x54>)
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	f083 0301 	eor.w	r3, r3, #1
 8003476:	b2db      	uxtb	r3, r3
 8003478:	2b00      	cmp	r3, #0
 800347a:	d002      	beq.n	8003482 <HAL_UART_RxCpltCallback+0x26>
	  IMUDataStatus = true;
 800347c:	4b0c      	ldr	r3, [pc, #48]	; (80034b0 <HAL_UART_RxCpltCallback+0x54>)
 800347e:	2201      	movs	r2, #1
 8003480:	701a      	strb	r2, [r3, #0]

  if(huart->Instance == USART3){
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a0b      	ldr	r2, [pc, #44]	; (80034b4 <HAL_UART_RxCpltCallback+0x58>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d10b      	bne.n	80034a4 <HAL_UART_RxCpltCallback+0x48>
	  memcpy(GPSBuffer, gps_rx_buf, GPS_BUF_SIZE);
 800348c:	4a0a      	ldr	r2, [pc, #40]	; (80034b8 <HAL_UART_RxCpltCallback+0x5c>)
 800348e:	4b0b      	ldr	r3, [pc, #44]	; (80034bc <HAL_UART_RxCpltCallback+0x60>)
 8003490:	4610      	mov	r0, r2
 8003492:	4619      	mov	r1, r3
 8003494:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003498:	461a      	mov	r2, r3
 800349a:	f005 ff87 	bl	80093ac <memcpy>
	  GPSDataStatus = true;
 800349e:	4b08      	ldr	r3, [pc, #32]	; (80034c0 <HAL_UART_RxCpltCallback+0x64>)
 80034a0:	2201      	movs	r2, #1
 80034a2:	701a      	strb	r2, [r3, #0]
  }
 }
 80034a4:	bf00      	nop
 80034a6:	3708      	adds	r7, #8
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	40004400 	.word	0x40004400
 80034b0:	200004b0 	.word	0x200004b0
 80034b4:	40004800 	.word	0x40004800
 80034b8:	200004b4 	.word	0x200004b4
 80034bc:	200008dc 	.word	0x200008dc
 80034c0:	20000bc0 	.word	0x20000bc0

080034c4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7 && (fly_mode == FLY_MODE_ON || fly_mode == FLY_MODE_HOLD)){
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a4a      	ldr	r2, [pc, #296]	; (80035fc <HAL_TIM_PeriodElapsedCallback+0x138>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	f040 808e 	bne.w	80035f4 <HAL_TIM_PeriodElapsedCallback+0x130>
 80034d8:	4b49      	ldr	r3, [pc, #292]	; (8003600 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d004      	beq.n	80034ea <HAL_TIM_PeriodElapsedCallback+0x26>
 80034e0:	4b47      	ldr	r3, [pc, #284]	; (8003600 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	f040 8085 	bne.w	80035f4 <HAL_TIM_PeriodElapsedCallback+0x130>
		if(fly_mode == FLY_MODE_ON){
 80034ea:	4b45      	ldr	r3, [pc, #276]	; (8003600 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d137      	bne.n	8003562 <HAL_TIM_PeriodElapsedCallback+0x9e>
			PIDRoll.timesampling = PIDYaw.timesampling = PIDPitch.timesampling = 0.01;
 80034f2:	4b44      	ldr	r3, [pc, #272]	; (8003604 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80034f4:	4a44      	ldr	r2, [pc, #272]	; (8003608 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80034f6:	625a      	str	r2, [r3, #36]	; 0x24
 80034f8:	4b42      	ldr	r3, [pc, #264]	; (8003604 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80034fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fc:	4a43      	ldr	r2, [pc, #268]	; (800360c <HAL_TIM_PeriodElapsedCallback+0x148>)
 80034fe:	6253      	str	r3, [r2, #36]	; 0x24
 8003500:	4b42      	ldr	r3, [pc, #264]	; (800360c <HAL_TIM_PeriodElapsedCallback+0x148>)
 8003502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003504:	4a42      	ldr	r2, [pc, #264]	; (8003610 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8003506:	6253      	str	r3, [r2, #36]	; 0x24
			PIDControl(&PIDRoll, sensorRoll, inputRoll);
 8003508:	4b42      	ldr	r3, [pc, #264]	; (8003614 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800350a:	edd3 7a00 	vldr	s15, [r3]
 800350e:	4b42      	ldr	r3, [pc, #264]	; (8003618 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003510:	ed93 7a00 	vldr	s14, [r3]
 8003514:	eef0 0a47 	vmov.f32	s1, s14
 8003518:	eeb0 0a67 	vmov.f32	s0, s15
 800351c:	483c      	ldr	r0, [pc, #240]	; (8003610 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800351e:	f000 fa09 	bl	8003934 <PIDControl>
			PIDControl(&PIDPitch, sensorPitch, inputPitch);
 8003522:	4b3e      	ldr	r3, [pc, #248]	; (800361c <HAL_TIM_PeriodElapsedCallback+0x158>)
 8003524:	edd3 7a00 	vldr	s15, [r3]
 8003528:	4b3d      	ldr	r3, [pc, #244]	; (8003620 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800352a:	ed93 7a00 	vldr	s14, [r3]
 800352e:	eef0 0a47 	vmov.f32	s1, s14
 8003532:	eeb0 0a67 	vmov.f32	s0, s15
 8003536:	4833      	ldr	r0, [pc, #204]	; (8003604 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8003538:	f000 f9fc 	bl	8003934 <PIDControl>
			PIDControl(&PIDYaw, sensorYaw, inputYaw);
 800353c:	4b39      	ldr	r3, [pc, #228]	; (8003624 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800353e:	edd3 7a00 	vldr	s15, [r3]
 8003542:	4b39      	ldr	r3, [pc, #228]	; (8003628 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8003544:	ed93 7a00 	vldr	s14, [r3]
 8003548:	eef0 0a47 	vmov.f32	s1, s14
 800354c:	eeb0 0a67 	vmov.f32	s0, s15
 8003550:	482e      	ldr	r0, [pc, #184]	; (800360c <HAL_TIM_PeriodElapsedCallback+0x148>)
 8003552:	f000 f9ef 	bl	8003934 <PIDControl>
			trustControl(fly_mode);
 8003556:	4b2a      	ldr	r3, [pc, #168]	; (8003600 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	4618      	mov	r0, r3
 800355c:	f000 fbac 	bl	8003cb8 <trustControl>
		//strSize = sprintf((char*)buffer, "%f %f %f\r\n", sensorRoll, sensorPitch, sensorYaw);
		//HAL_UART_Transmit(&huart1, buffer, strSize, 10);
		//strSize = sprintf((char*)buffer, "%f\r\n", altitude);
		//HAL_UART_Transmit(&huart1, buffer, strSize, 10);
	}
}
 8003560:	e048      	b.n	80035f4 <HAL_TIM_PeriodElapsedCallback+0x130>
		} else if(fly_mode == FLY_MODE_HOLD){
 8003562:	4b27      	ldr	r3, [pc, #156]	; (8003600 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	2b02      	cmp	r3, #2
 8003568:	d144      	bne.n	80035f4 <HAL_TIM_PeriodElapsedCallback+0x130>
			PIDRoll.timesampling = PIDYaw.timesampling = PIDPitch.timesampling = PIDAltitude.timesampling =  0.01;
 800356a:	4b30      	ldr	r3, [pc, #192]	; (800362c <HAL_TIM_PeriodElapsedCallback+0x168>)
 800356c:	4a26      	ldr	r2, [pc, #152]	; (8003608 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800356e:	625a      	str	r2, [r3, #36]	; 0x24
 8003570:	4b2e      	ldr	r3, [pc, #184]	; (800362c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8003572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003574:	4a23      	ldr	r2, [pc, #140]	; (8003604 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8003576:	6253      	str	r3, [r2, #36]	; 0x24
 8003578:	4b22      	ldr	r3, [pc, #136]	; (8003604 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800357a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357c:	4a23      	ldr	r2, [pc, #140]	; (800360c <HAL_TIM_PeriodElapsedCallback+0x148>)
 800357e:	6253      	str	r3, [r2, #36]	; 0x24
 8003580:	4b22      	ldr	r3, [pc, #136]	; (800360c <HAL_TIM_PeriodElapsedCallback+0x148>)
 8003582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003584:	4a22      	ldr	r2, [pc, #136]	; (8003610 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8003586:	6253      	str	r3, [r2, #36]	; 0x24
			PIDControl(&PIDRoll, sensorRoll, inputRoll);
 8003588:	4b22      	ldr	r3, [pc, #136]	; (8003614 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800358a:	edd3 7a00 	vldr	s15, [r3]
 800358e:	4b22      	ldr	r3, [pc, #136]	; (8003618 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003590:	ed93 7a00 	vldr	s14, [r3]
 8003594:	eef0 0a47 	vmov.f32	s1, s14
 8003598:	eeb0 0a67 	vmov.f32	s0, s15
 800359c:	481c      	ldr	r0, [pc, #112]	; (8003610 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800359e:	f000 f9c9 	bl	8003934 <PIDControl>
			PIDControl(&PIDPitch, sensorPitch, inputPitch);
 80035a2:	4b1e      	ldr	r3, [pc, #120]	; (800361c <HAL_TIM_PeriodElapsedCallback+0x158>)
 80035a4:	edd3 7a00 	vldr	s15, [r3]
 80035a8:	4b1d      	ldr	r3, [pc, #116]	; (8003620 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80035aa:	ed93 7a00 	vldr	s14, [r3]
 80035ae:	eef0 0a47 	vmov.f32	s1, s14
 80035b2:	eeb0 0a67 	vmov.f32	s0, s15
 80035b6:	4813      	ldr	r0, [pc, #76]	; (8003604 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80035b8:	f000 f9bc 	bl	8003934 <PIDControl>
			PIDControl(&PIDYaw, sensorYaw, 0.0);
 80035bc:	4b19      	ldr	r3, [pc, #100]	; (8003624 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80035be:	edd3 7a00 	vldr	s15, [r3]
 80035c2:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8003630 <HAL_TIM_PeriodElapsedCallback+0x16c>
 80035c6:	eeb0 0a67 	vmov.f32	s0, s15
 80035ca:	4810      	ldr	r0, [pc, #64]	; (800360c <HAL_TIM_PeriodElapsedCallback+0x148>)
 80035cc:	f000 f9b2 	bl	8003934 <PIDControl>
			PIDControlAltitude(&PIDAltitude, sensorAltitude, holdAltitude);
 80035d0:	4b18      	ldr	r3, [pc, #96]	; (8003634 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80035d2:	edd3 7a00 	vldr	s15, [r3]
 80035d6:	4b18      	ldr	r3, [pc, #96]	; (8003638 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80035d8:	ed93 7a00 	vldr	s14, [r3]
 80035dc:	eef0 0a47 	vmov.f32	s1, s14
 80035e0:	eeb0 0a67 	vmov.f32	s0, s15
 80035e4:	4811      	ldr	r0, [pc, #68]	; (800362c <HAL_TIM_PeriodElapsedCallback+0x168>)
 80035e6:	f000 fa71 	bl	8003acc <PIDControlAltitude>
			trustControl(fly_mode);
 80035ea:	4b05      	ldr	r3, [pc, #20]	; (8003600 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f000 fb62 	bl	8003cb8 <trustControl>
}
 80035f4:	bf00      	nop
 80035f6:	3708      	adds	r7, #8
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	40001400 	.word	0x40001400
 8003600:	20000be0 	.word	0x20000be0
 8003604:	20000220 	.word	0x20000220
 8003608:	3c23d70a 	.word	0x3c23d70a
 800360c:	20000798 	.word	0x20000798
 8003610:	20000b58 	.word	0x20000b58
 8003614:	2000049c 	.word	0x2000049c
 8003618:	200008d4 	.word	0x200008d4
 800361c:	20000be4 	.word	0x20000be4
 8003620:	200007c0 	.word	0x200007c0
 8003624:	20000ad0 	.word	0x20000ad0
 8003628:	20000bc4 	.word	0x20000bc4
 800362c:	2000076c 	.word	0x2000076c
 8003630:	00000000 	.word	0x00000000
 8003634:	200008cc 	.word	0x200008cc
 8003638:	20000d48 	.word	0x20000d48

0800363c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
	if(htim == RC_CH1.htim){
 8003644:	4b81      	ldr	r3, [pc, #516]	; (800384c <HAL_TIM_IC_CaptureCallback+0x210>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	429a      	cmp	r2, r3
 800364c:	d17a      	bne.n	8003744 <HAL_TIM_IC_CaptureCallback+0x108>
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2){
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	7f1b      	ldrb	r3, [r3, #28]
 8003652:	2b02      	cmp	r3, #2
 8003654:	d138      	bne.n	80036c8 <HAL_TIM_IC_CaptureCallback+0x8c>
			setPWM_DATA(&RC_CH1);
 8003656:	487d      	ldr	r0, [pc, #500]	; (800384c <HAL_TIM_IC_CaptureCallback+0x210>)
 8003658:	f7ff fdd6 	bl	8003208 <setPWM_DATA>
			inputRoll = map((float)RC_CH1.DutyCycleVal, 1000, 2000, -30, 30);
 800365c:	4b7b      	ldr	r3, [pc, #492]	; (800384c <HAL_TIM_IC_CaptureCallback+0x210>)
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	ee07 3a90 	vmov	s15, r3
 8003664:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003668:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8003850 <HAL_TIM_IC_CaptureCallback+0x214>
 800366c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003670:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8003854 <HAL_TIM_IC_CaptureCallback+0x218>
 8003674:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003678:	eddf 6a75 	vldr	s13, [pc, #468]	; 8003850 <HAL_TIM_IC_CaptureCallback+0x214>
 800367c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003680:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003684:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003688:	4b73      	ldr	r3, [pc, #460]	; (8003858 <HAL_TIM_IC_CaptureCallback+0x21c>)
 800368a:	edc3 7a00 	vstr	s15, [r3]
			inputRoll = constrain(inputRoll, -30, 30);
 800368e:	4b72      	ldr	r3, [pc, #456]	; (8003858 <HAL_TIM_IC_CaptureCallback+0x21c>)
 8003690:	edd3 7a00 	vldr	s15, [r3]
 8003694:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 8003698:	eef4 7ac7 	vcmpe.f32	s15, s14
 800369c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036a0:	d501      	bpl.n	80036a6 <HAL_TIM_IC_CaptureCallback+0x6a>
 80036a2:	4b6e      	ldr	r3, [pc, #440]	; (800385c <HAL_TIM_IC_CaptureCallback+0x220>)
 80036a4:	e00d      	b.n	80036c2 <HAL_TIM_IC_CaptureCallback+0x86>
 80036a6:	4b6c      	ldr	r3, [pc, #432]	; (8003858 <HAL_TIM_IC_CaptureCallback+0x21c>)
 80036a8:	edd3 7a00 	vldr	s15, [r3]
 80036ac:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80036b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036b8:	dd01      	ble.n	80036be <HAL_TIM_IC_CaptureCallback+0x82>
 80036ba:	4b69      	ldr	r3, [pc, #420]	; (8003860 <HAL_TIM_IC_CaptureCallback+0x224>)
 80036bc:	e001      	b.n	80036c2 <HAL_TIM_IC_CaptureCallback+0x86>
 80036be:	4b66      	ldr	r3, [pc, #408]	; (8003858 <HAL_TIM_IC_CaptureCallback+0x21c>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a65      	ldr	r2, [pc, #404]	; (8003858 <HAL_TIM_IC_CaptureCallback+0x21c>)
 80036c4:	6013      	str	r3, [r2, #0]
	}
	else if(htim == RC_CH5.htim) {
		setPWM_DATA(&RC_CH5);
		inputFlyMode = constrain(RC_CH5.DutyCycleVal, 1000, 2000);
	}
}
 80036c6:	e0bd      	b.n	8003844 <HAL_TIM_IC_CaptureCallback+0x208>
		} else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	7f1b      	ldrb	r3, [r3, #28]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	f040 80b9 	bne.w	8003844 <HAL_TIM_IC_CaptureCallback+0x208>
			setPWM_DATA(&RC_CH4);
 80036d2:	4864      	ldr	r0, [pc, #400]	; (8003864 <HAL_TIM_IC_CaptureCallback+0x228>)
 80036d4:	f7ff fd98 	bl	8003208 <setPWM_DATA>
			inputYaw = map((float)RC_CH4.DutyCycleVal, 1000, 2000, -30, 30);
 80036d8:	4b62      	ldr	r3, [pc, #392]	; (8003864 <HAL_TIM_IC_CaptureCallback+0x228>)
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	ee07 3a90 	vmov	s15, r3
 80036e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036e4:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8003850 <HAL_TIM_IC_CaptureCallback+0x214>
 80036e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80036ec:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8003854 <HAL_TIM_IC_CaptureCallback+0x218>
 80036f0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80036f4:	eddf 6a56 	vldr	s13, [pc, #344]	; 8003850 <HAL_TIM_IC_CaptureCallback+0x214>
 80036f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80036fc:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003700:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003704:	4b58      	ldr	r3, [pc, #352]	; (8003868 <HAL_TIM_IC_CaptureCallback+0x22c>)
 8003706:	edc3 7a00 	vstr	s15, [r3]
			inputYaw = constrain(inputYaw, -30, 30);
 800370a:	4b57      	ldr	r3, [pc, #348]	; (8003868 <HAL_TIM_IC_CaptureCallback+0x22c>)
 800370c:	edd3 7a00 	vldr	s15, [r3]
 8003710:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 8003714:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800371c:	d501      	bpl.n	8003722 <HAL_TIM_IC_CaptureCallback+0xe6>
 800371e:	4b4f      	ldr	r3, [pc, #316]	; (800385c <HAL_TIM_IC_CaptureCallback+0x220>)
 8003720:	e00d      	b.n	800373e <HAL_TIM_IC_CaptureCallback+0x102>
 8003722:	4b51      	ldr	r3, [pc, #324]	; (8003868 <HAL_TIM_IC_CaptureCallback+0x22c>)
 8003724:	edd3 7a00 	vldr	s15, [r3]
 8003728:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800372c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003734:	dd01      	ble.n	800373a <HAL_TIM_IC_CaptureCallback+0xfe>
 8003736:	4b4a      	ldr	r3, [pc, #296]	; (8003860 <HAL_TIM_IC_CaptureCallback+0x224>)
 8003738:	e001      	b.n	800373e <HAL_TIM_IC_CaptureCallback+0x102>
 800373a:	4b4b      	ldr	r3, [pc, #300]	; (8003868 <HAL_TIM_IC_CaptureCallback+0x22c>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a4a      	ldr	r2, [pc, #296]	; (8003868 <HAL_TIM_IC_CaptureCallback+0x22c>)
 8003740:	6013      	str	r3, [r2, #0]
}
 8003742:	e07f      	b.n	8003844 <HAL_TIM_IC_CaptureCallback+0x208>
	else if(htim == RC_CH2.htim){
 8003744:	4b49      	ldr	r3, [pc, #292]	; (800386c <HAL_TIM_IC_CaptureCallback+0x230>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	429a      	cmp	r2, r3
 800374c:	d138      	bne.n	80037c0 <HAL_TIM_IC_CaptureCallback+0x184>
		setPWM_DATA(&RC_CH2);
 800374e:	4847      	ldr	r0, [pc, #284]	; (800386c <HAL_TIM_IC_CaptureCallback+0x230>)
 8003750:	f7ff fd5a 	bl	8003208 <setPWM_DATA>
		inputPitch = map((float)RC_CH2.DutyCycleVal, 1000, 2000, -30, 30);
 8003754:	4b45      	ldr	r3, [pc, #276]	; (800386c <HAL_TIM_IC_CaptureCallback+0x230>)
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	ee07 3a90 	vmov	s15, r3
 800375c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003760:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8003850 <HAL_TIM_IC_CaptureCallback+0x214>
 8003764:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003768:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8003854 <HAL_TIM_IC_CaptureCallback+0x218>
 800376c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003770:	eddf 6a37 	vldr	s13, [pc, #220]	; 8003850 <HAL_TIM_IC_CaptureCallback+0x214>
 8003774:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003778:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800377c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003780:	4b3b      	ldr	r3, [pc, #236]	; (8003870 <HAL_TIM_IC_CaptureCallback+0x234>)
 8003782:	edc3 7a00 	vstr	s15, [r3]
		inputPitch = constrain(inputPitch, -30, 30);
 8003786:	4b3a      	ldr	r3, [pc, #232]	; (8003870 <HAL_TIM_IC_CaptureCallback+0x234>)
 8003788:	edd3 7a00 	vldr	s15, [r3]
 800378c:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 8003790:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003798:	d501      	bpl.n	800379e <HAL_TIM_IC_CaptureCallback+0x162>
 800379a:	4b30      	ldr	r3, [pc, #192]	; (800385c <HAL_TIM_IC_CaptureCallback+0x220>)
 800379c:	e00d      	b.n	80037ba <HAL_TIM_IC_CaptureCallback+0x17e>
 800379e:	4b34      	ldr	r3, [pc, #208]	; (8003870 <HAL_TIM_IC_CaptureCallback+0x234>)
 80037a0:	edd3 7a00 	vldr	s15, [r3]
 80037a4:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80037a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037b0:	dd01      	ble.n	80037b6 <HAL_TIM_IC_CaptureCallback+0x17a>
 80037b2:	4b2b      	ldr	r3, [pc, #172]	; (8003860 <HAL_TIM_IC_CaptureCallback+0x224>)
 80037b4:	e001      	b.n	80037ba <HAL_TIM_IC_CaptureCallback+0x17e>
 80037b6:	4b2e      	ldr	r3, [pc, #184]	; (8003870 <HAL_TIM_IC_CaptureCallback+0x234>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a2d      	ldr	r2, [pc, #180]	; (8003870 <HAL_TIM_IC_CaptureCallback+0x234>)
 80037bc:	6013      	str	r3, [r2, #0]
}
 80037be:	e041      	b.n	8003844 <HAL_TIM_IC_CaptureCallback+0x208>
	else if(htim == RC_CH3.htim) {
 80037c0:	4b2c      	ldr	r3, [pc, #176]	; (8003874 <HAL_TIM_IC_CaptureCallback+0x238>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d123      	bne.n	8003812 <HAL_TIM_IC_CaptureCallback+0x1d6>
		setPWM_DATA(&RC_CH3);
 80037ca:	482a      	ldr	r0, [pc, #168]	; (8003874 <HAL_TIM_IC_CaptureCallback+0x238>)
 80037cc:	f7ff fd1c 	bl	8003208 <setPWM_DATA>
		if(RC_CH3.DutyCycleVal >= 1150){
 80037d0:	4b28      	ldr	r3, [pc, #160]	; (8003874 <HAL_TIM_IC_CaptureCallback+0x238>)
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	f240 427d 	movw	r2, #1149	; 0x47d
 80037d8:	4293      	cmp	r3, r2
 80037da:	d911      	bls.n	8003800 <HAL_TIM_IC_CaptureCallback+0x1c4>
			inputThrottle = constrain(RC_CH3.DutyCycleVal, 1000, 2000);
 80037dc:	4b25      	ldr	r3, [pc, #148]	; (8003874 <HAL_TIM_IC_CaptureCallback+0x238>)
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037e4:	d307      	bcc.n	80037f6 <HAL_TIM_IC_CaptureCallback+0x1ba>
 80037e6:	4b23      	ldr	r3, [pc, #140]	; (8003874 <HAL_TIM_IC_CaptureCallback+0x238>)
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80037ee:	bf28      	it	cs
 80037f0:	f44f 63fa 	movcs.w	r3, #2000	; 0x7d0
 80037f4:	e001      	b.n	80037fa <HAL_TIM_IC_CaptureCallback+0x1be>
 80037f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037fa:	4a1f      	ldr	r2, [pc, #124]	; (8003878 <HAL_TIM_IC_CaptureCallback+0x23c>)
 80037fc:	6013      	str	r3, [r2, #0]
}
 80037fe:	e021      	b.n	8003844 <HAL_TIM_IC_CaptureCallback+0x208>
			RC_CH3.DutyCycleVal = 1000;
 8003800:	4b1c      	ldr	r3, [pc, #112]	; (8003874 <HAL_TIM_IC_CaptureCallback+0x238>)
 8003802:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003806:	611a      	str	r2, [r3, #16]
			inputThrottle = 1000;
 8003808:	4b1b      	ldr	r3, [pc, #108]	; (8003878 <HAL_TIM_IC_CaptureCallback+0x23c>)
 800380a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800380e:	601a      	str	r2, [r3, #0]
}
 8003810:	e018      	b.n	8003844 <HAL_TIM_IC_CaptureCallback+0x208>
	else if(htim == RC_CH5.htim) {
 8003812:	4b1a      	ldr	r3, [pc, #104]	; (800387c <HAL_TIM_IC_CaptureCallback+0x240>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	429a      	cmp	r2, r3
 800381a:	d113      	bne.n	8003844 <HAL_TIM_IC_CaptureCallback+0x208>
		setPWM_DATA(&RC_CH5);
 800381c:	4817      	ldr	r0, [pc, #92]	; (800387c <HAL_TIM_IC_CaptureCallback+0x240>)
 800381e:	f7ff fcf3 	bl	8003208 <setPWM_DATA>
		inputFlyMode = constrain(RC_CH5.DutyCycleVal, 1000, 2000);
 8003822:	4b16      	ldr	r3, [pc, #88]	; (800387c <HAL_TIM_IC_CaptureCallback+0x240>)
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800382a:	d307      	bcc.n	800383c <HAL_TIM_IC_CaptureCallback+0x200>
 800382c:	4b13      	ldr	r3, [pc, #76]	; (800387c <HAL_TIM_IC_CaptureCallback+0x240>)
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003834:	bf28      	it	cs
 8003836:	f44f 63fa 	movcs.w	r3, #2000	; 0x7d0
 800383a:	e001      	b.n	8003840 <HAL_TIM_IC_CaptureCallback+0x204>
 800383c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003840:	4a0f      	ldr	r2, [pc, #60]	; (8003880 <HAL_TIM_IC_CaptureCallback+0x244>)
 8003842:	6013      	str	r3, [r2, #0]
}
 8003844:	bf00      	nop
 8003846:	3708      	adds	r7, #8
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	20000710 	.word	0x20000710
 8003850:	447a0000 	.word	0x447a0000
 8003854:	42700000 	.word	0x42700000
 8003858:	200008d4 	.word	0x200008d4
 800385c:	c1f00000 	.word	0xc1f00000
 8003860:	41f00000 	.word	0x41f00000
 8003864:	200003e8 	.word	0x200003e8
 8003868:	20000bc4 	.word	0x20000bc4
 800386c:	20000d4c 	.word	0x20000d4c
 8003870:	200007c0 	.word	0x200007c0
 8003874:	20000c28 	.word	0x20000c28
 8003878:	200003a4 	.word	0x200003a4
 800387c:	20000d28 	.word	0x20000d28
 8003880:	2000024c 	.word	0x2000024c

08003884 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	4603      	mov	r3, r0
 800388c:	80fb      	strh	r3, [r7, #6]
	if(RC_CH6.onRisingEdge && !RC_CH6.onFallingEdge){
 800388e:	4b24      	ldr	r3, [pc, #144]	; (8003920 <HAL_GPIO_EXTI_Callback+0x9c>)
 8003890:	7e1b      	ldrb	r3, [r3, #24]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d013      	beq.n	80038be <HAL_GPIO_EXTI_Callback+0x3a>
 8003896:	4b22      	ldr	r3, [pc, #136]	; (8003920 <HAL_GPIO_EXTI_Callback+0x9c>)
 8003898:	7e5b      	ldrb	r3, [r3, #25]
 800389a:	f083 0301 	eor.w	r3, r3, #1
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00c      	beq.n	80038be <HAL_GPIO_EXTI_Callback+0x3a>
		RC_CH6.onRisingEdge = false;
 80038a4:	4b1e      	ldr	r3, [pc, #120]	; (8003920 <HAL_GPIO_EXTI_Callback+0x9c>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	761a      	strb	r2, [r3, #24]
		RC_CH6.onFallingEdge = true;
 80038aa:	4b1d      	ldr	r3, [pc, #116]	; (8003920 <HAL_GPIO_EXTI_Callback+0x9c>)
 80038ac:	2201      	movs	r2, #1
 80038ae:	765a      	strb	r2, [r3, #25]
		RC_CH6.RisingEdgeVal = __HAL_TIM_GET_COUNTER(RC_CH6.htim);
 80038b0:	4b1b      	ldr	r3, [pc, #108]	; (8003920 <HAL_GPIO_EXTI_Callback+0x9c>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b8:	4a19      	ldr	r2, [pc, #100]	; (8003920 <HAL_GPIO_EXTI_Callback+0x9c>)
 80038ba:	6093      	str	r3, [r2, #8]
 80038bc:	e016      	b.n	80038ec <HAL_GPIO_EXTI_Callback+0x68>

	} else if(RC_CH6.onFallingEdge && !RC_CH6.onRisingEdge) {
 80038be:	4b18      	ldr	r3, [pc, #96]	; (8003920 <HAL_GPIO_EXTI_Callback+0x9c>)
 80038c0:	7e5b      	ldrb	r3, [r3, #25]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d012      	beq.n	80038ec <HAL_GPIO_EXTI_Callback+0x68>
 80038c6:	4b16      	ldr	r3, [pc, #88]	; (8003920 <HAL_GPIO_EXTI_Callback+0x9c>)
 80038c8:	7e1b      	ldrb	r3, [r3, #24]
 80038ca:	f083 0301 	eor.w	r3, r3, #1
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00b      	beq.n	80038ec <HAL_GPIO_EXTI_Callback+0x68>
		RC_CH6.onFallingEdge = false;
 80038d4:	4b12      	ldr	r3, [pc, #72]	; (8003920 <HAL_GPIO_EXTI_Callback+0x9c>)
 80038d6:	2200      	movs	r2, #0
 80038d8:	765a      	strb	r2, [r3, #25]
		RC_CH6.onRisingEdge =  true;
 80038da:	4b11      	ldr	r3, [pc, #68]	; (8003920 <HAL_GPIO_EXTI_Callback+0x9c>)
 80038dc:	2201      	movs	r2, #1
 80038de:	761a      	strb	r2, [r3, #24]
		RC_CH6.FallingEdgeVal = __HAL_TIM_GET_COUNTER(RC_CH6.htim);
 80038e0:	4b0f      	ldr	r3, [pc, #60]	; (8003920 <HAL_GPIO_EXTI_Callback+0x9c>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e8:	4a0d      	ldr	r2, [pc, #52]	; (8003920 <HAL_GPIO_EXTI_Callback+0x9c>)
 80038ea:	60d3      	str	r3, [r2, #12]
	}
	if(RC_CH6.FallingEdgeVal >= RC_CH6.RisingEdgeVal){
 80038ec:	4b0c      	ldr	r3, [pc, #48]	; (8003920 <HAL_GPIO_EXTI_Callback+0x9c>)
 80038ee:	68da      	ldr	r2, [r3, #12]
 80038f0:	4b0b      	ldr	r3, [pc, #44]	; (8003920 <HAL_GPIO_EXTI_Callback+0x9c>)
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d30c      	bcc.n	8003912 <HAL_GPIO_EXTI_Callback+0x8e>
		RC_CH6.DutyCycleVal = RC_CH6.FallingEdgeVal - RC_CH6.RisingEdgeVal;
 80038f8:	4b09      	ldr	r3, [pc, #36]	; (8003920 <HAL_GPIO_EXTI_Callback+0x9c>)
 80038fa:	68da      	ldr	r2, [r3, #12]
 80038fc:	4b08      	ldr	r3, [pc, #32]	; (8003920 <HAL_GPIO_EXTI_Callback+0x9c>)
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	4a07      	ldr	r2, [pc, #28]	; (8003920 <HAL_GPIO_EXTI_Callback+0x9c>)
 8003904:	6113      	str	r3, [r2, #16]
		RC_CH6.FallingEdgeVal = 0;
 8003906:	4b06      	ldr	r3, [pc, #24]	; (8003920 <HAL_GPIO_EXTI_Callback+0x9c>)
 8003908:	2200      	movs	r2, #0
 800390a:	60da      	str	r2, [r3, #12]
		RC_CH6.RisingEdgeVal = 0;
 800390c:	4b04      	ldr	r3, [pc, #16]	; (8003920 <HAL_GPIO_EXTI_Callback+0x9c>)
 800390e:	2200      	movs	r2, #0
 8003910:	609a      	str	r2, [r3, #8]
	}
}
 8003912:	bf00      	nop
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	20000b3c 	.word	0x20000b3c

08003924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003928:	bf00      	nop
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
	...

08003934 <PIDControl>:

#include "pid.h"

extern TIM_HandleTypeDef htim2;

void PIDControl(PIDType_t *pidtype, float dataSensor, float setPoint){
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003940:	edc7 0a01 	vstr	s1, [r7, #4]
	pidtype->setPoint = constrain(setPoint, -30, 30);
 8003944:	edd7 7a01 	vldr	s15, [r7, #4]
 8003948:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 800394c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003954:	d501      	bpl.n	800395a <PIDControl+0x26>
 8003956:	4b54      	ldr	r3, [pc, #336]	; (8003aa8 <PIDControl+0x174>)
 8003958:	e00b      	b.n	8003972 <PIDControl+0x3e>
 800395a:	edd7 7a01 	vldr	s15, [r7, #4]
 800395e:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003962:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800396a:	dd01      	ble.n	8003970 <PIDControl+0x3c>
 800396c:	4b4f      	ldr	r3, [pc, #316]	; (8003aac <PIDControl+0x178>)
 800396e:	e000      	b.n	8003972 <PIDControl+0x3e>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	6113      	str	r3, [r2, #16]
	pidtype->error = pidtype->setPoint - dataSensor;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	ed93 7a04 	vldr	s14, [r3, #16]
 800397c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003980:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	edc3 7a00 	vstr	s15, [r3]

	if(pidtype->error >= 180) pidtype->error -= 360;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	edd3 7a00 	vldr	s15, [r3]
 8003990:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8003ab0 <PIDControl+0x17c>
 8003994:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800399c:	db0a      	blt.n	80039b4 <PIDControl+0x80>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	edd3 7a00 	vldr	s15, [r3]
 80039a4:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8003ab4 <PIDControl+0x180>
 80039a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	edc3 7a00 	vstr	s15, [r3]
 80039b2:	e013      	b.n	80039dc <PIDControl+0xa8>
	else if(pidtype->error < -180) pidtype->error += 360;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	edd3 7a00 	vldr	s15, [r3]
 80039ba:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8003ab8 <PIDControl+0x184>
 80039be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039c6:	d509      	bpl.n	80039dc <PIDControl+0xa8>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	edd3 7a00 	vldr	s15, [r3]
 80039ce:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8003ab4 <PIDControl+0x180>
 80039d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	edc3 7a00 	vstr	s15, [r3]

	pidtype->sumIntegral += pidtype->error * pidtype->timesampling;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	ed93 7a03 	vldr	s14, [r3, #12]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	edd3 6a00 	vldr	s13, [r3]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80039ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	edc3 7a03 	vstr	s15, [r3, #12]
	pidtype->sumIntegral = constrain(pidtype->sumIntegral, -500, 500);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	edd3 7a03 	vldr	s15, [r3, #12]
 8003a02:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8003abc <PIDControl+0x188>
 8003a06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a0e:	d501      	bpl.n	8003a14 <PIDControl+0xe0>
 8003a10:	4b2b      	ldr	r3, [pc, #172]	; (8003ac0 <PIDControl+0x18c>)
 8003a12:	e00d      	b.n	8003a30 <PIDControl+0xfc>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	edd3 7a03 	vldr	s15, [r3, #12]
 8003a1a:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8003ac4 <PIDControl+0x190>
 8003a1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a26:	dd01      	ble.n	8003a2c <PIDControl+0xf8>
 8003a28:	4b27      	ldr	r3, [pc, #156]	; (8003ac8 <PIDControl+0x194>)
 8003a2a:	e001      	b.n	8003a30 <PIDControl+0xfc>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	60d3      	str	r3, [r2, #12]

	pidtype->derivative = (pidtype->error - pidtype->preverror) / pidtype->timesampling;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	ed93 7a00 	vldr	s14, [r3]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003a40:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8003a4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	edc3 7a02 	vstr	s15, [r3, #8]
	pidtype->preverror = pidtype->error;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	605a      	str	r2, [r3, #4]

	pidtype->output = (pidtype->kp * pidtype->error) + (pidtype->kd * pidtype->derivative) + (pidtype->ki * pidtype->sumIntegral);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	ed93 7a06 	vldr	s14, [r3, #24]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	edd3 7a00 	vldr	s15, [r3]
 8003a68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	edd3 6a07 	vldr	s13, [r3, #28]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	edd3 7a02 	vldr	s15, [r3, #8]
 8003a78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	edd3 6a08 	vldr	s13, [r3, #32]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	edd3 7a03 	vldr	s15, [r3, #12]
 8003a8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8003a9a:	bf00      	nop
 8003a9c:	3714      	adds	r7, #20
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	c1f00000 	.word	0xc1f00000
 8003aac:	41f00000 	.word	0x41f00000
 8003ab0:	43340000 	.word	0x43340000
 8003ab4:	43b40000 	.word	0x43b40000
 8003ab8:	c3340000 	.word	0xc3340000
 8003abc:	c3fa0000 	.word	0xc3fa0000
 8003ac0:	c3fa0000 	.word	0xc3fa0000
 8003ac4:	43fa0000 	.word	0x43fa0000
 8003ac8:	43fa0000 	.word	0x43fa0000

08003acc <PIDControlAltitude>:

void PIDControlAltitude(PIDType_t *pidtype, float dataSensor, float setPoint){
 8003acc:	b480      	push	{r7}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	ed87 0a02 	vstr	s0, [r7, #8]
 8003ad8:	edc7 0a01 	vstr	s1, [r7, #4]
	pidtype->setPoint = constrain(setPoint, 0, 100);
 8003adc:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ae0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ae8:	d502      	bpl.n	8003af0 <PIDControlAltitude+0x24>
 8003aea:	f04f 0300 	mov.w	r3, #0
 8003aee:	e00b      	b.n	8003b08 <PIDControlAltitude+0x3c>
 8003af0:	edd7 7a01 	vldr	s15, [r7, #4]
 8003af4:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8003bec <PIDControlAltitude+0x120>
 8003af8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b00:	dd01      	ble.n	8003b06 <PIDControlAltitude+0x3a>
 8003b02:	4b3b      	ldr	r3, [pc, #236]	; (8003bf0 <PIDControlAltitude+0x124>)
 8003b04:	e000      	b.n	8003b08 <PIDControlAltitude+0x3c>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	6113      	str	r3, [r2, #16]
	pidtype->error = pidtype->setPoint - dataSensor;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	ed93 7a04 	vldr	s14, [r3, #16]
 8003b12:	edd7 7a02 	vldr	s15, [r7, #8]
 8003b16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	edc3 7a00 	vstr	s15, [r3]


	//if(pidtype->error >= 100) pidtype->error = 100;
	//else if(pidtype->error < -100) pidtype->error = -100;

	pidtype->sumIntegral += pidtype->error * pidtype->timesampling;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	ed93 7a03 	vldr	s14, [r3, #12]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	edd3 6a00 	vldr	s13, [r3]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003b32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	edc3 7a03 	vstr	s15, [r3, #12]
	pidtype->sumIntegral = constrain(pidtype->sumIntegral, -1000, 1000);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	edd3 7a03 	vldr	s15, [r3, #12]
 8003b46:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8003bf4 <PIDControlAltitude+0x128>
 8003b4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b52:	d501      	bpl.n	8003b58 <PIDControlAltitude+0x8c>
 8003b54:	4b28      	ldr	r3, [pc, #160]	; (8003bf8 <PIDControlAltitude+0x12c>)
 8003b56:	e00d      	b.n	8003b74 <PIDControlAltitude+0xa8>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	edd3 7a03 	vldr	s15, [r3, #12]
 8003b5e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8003bfc <PIDControlAltitude+0x130>
 8003b62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b6a:	dd01      	ble.n	8003b70 <PIDControlAltitude+0xa4>
 8003b6c:	4b24      	ldr	r3, [pc, #144]	; (8003c00 <PIDControlAltitude+0x134>)
 8003b6e:	e001      	b.n	8003b74 <PIDControlAltitude+0xa8>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	60d3      	str	r3, [r2, #12]

	pidtype->derivative = (pidtype->error - pidtype->preverror) / pidtype->timesampling;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	ed93 7a00 	vldr	s14, [r3]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	edd3 7a01 	vldr	s15, [r3, #4]
 8003b84:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8003b8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	edc3 7a02 	vstr	s15, [r3, #8]
	pidtype->preverror = pidtype->error;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	605a      	str	r2, [r3, #4]

	pidtype->output = (pidtype->kp * pidtype->error) + (pidtype->kd * pidtype->derivative) + (pidtype->ki * pidtype->sumIntegral);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	ed93 7a06 	vldr	s14, [r3, #24]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	edd3 7a00 	vldr	s15, [r3]
 8003bac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	edd3 6a07 	vldr	s13, [r3, #28]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	edd3 7a02 	vldr	s15, [r3, #8]
 8003bbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003bc0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	edd3 6a08 	vldr	s13, [r3, #32]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	edd3 7a03 	vldr	s15, [r3, #12]
 8003bd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003bd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8003bde:	bf00      	nop
 8003be0:	3714      	adds	r7, #20
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	42c80000 	.word	0x42c80000
 8003bf0:	42c80000 	.word	0x42c80000
 8003bf4:	c47a0000 	.word	0xc47a0000
 8003bf8:	c47a0000 	.word	0xc47a0000
 8003bfc:	447a0000 	.word	0x447a0000
 8003c00:	447a0000 	.word	0x447a0000

08003c04 <PIDReset>:

void PIDReset(PIDType_t *pidtype){
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
	pidtype->sumIntegral = 0;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f04f 0200 	mov.w	r2, #0
 8003c12:	60da      	str	r2, [r3, #12]
	pidtype->output = 0;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f04f 0200 	mov.w	r2, #0
 8003c1a:	615a      	str	r2, [r3, #20]

	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,1000);
 8003c1c:	4b0c      	ldr	r3, [pc, #48]	; (8003c50 <PIDReset+0x4c>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c24:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,1000);
 8003c26:	4b0a      	ldr	r3, [pc, #40]	; (8003c50 <PIDReset+0x4c>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c2e:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,1000);
 8003c30:	4b07      	ldr	r3, [pc, #28]	; (8003c50 <PIDReset+0x4c>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c38:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,1000);
 8003c3a:	4b05      	ldr	r3, [pc, #20]	; (8003c50 <PIDReset+0x4c>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c42:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr
 8003c50:	20000be8 	.word	0x20000be8

08003c54 <PIDInit>:
void PIDInit(PIDType_t *pidtype, double kp, double ki, double kd, double timesampling){
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b08a      	sub	sp, #40	; 0x28
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6278      	str	r0, [r7, #36]	; 0x24
 8003c5c:	ed87 0b06 	vstr	d0, [r7, #24]
 8003c60:	ed87 1b04 	vstr	d1, [r7, #16]
 8003c64:	ed87 2b02 	vstr	d2, [r7, #8]
 8003c68:	ed87 3b00 	vstr	d3, [r7]
	PIDReset(pidtype);
 8003c6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c6e:	f7ff ffc9 	bl	8003c04 <PIDReset>

	pidtype->kp = kp;
 8003c72:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003c76:	f7fc ff97 	bl	8000ba8 <__aeabi_d2f>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7e:	619a      	str	r2, [r3, #24]
	pidtype->kd = kd;
 8003c80:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003c84:	f7fc ff90 	bl	8000ba8 <__aeabi_d2f>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8c:	61da      	str	r2, [r3, #28]
	pidtype->ki = ki;
 8003c8e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003c92:	f7fc ff89 	bl	8000ba8 <__aeabi_d2f>
 8003c96:	4602      	mov	r2, r0
 8003c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9a:	621a      	str	r2, [r3, #32]

	pidtype->timesampling = timesampling;
 8003c9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003ca0:	f7fc ff82 	bl	8000ba8 <__aeabi_d2f>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca8:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003caa:	bf00      	nop
 8003cac:	3728      	adds	r7, #40	; 0x28
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	0000      	movs	r0, r0
 8003cb4:	0000      	movs	r0, r0
	...

08003cb8 <trustControl>:
void trustControl(FLY_MODE fly_mode){
 8003cb8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003cbc:	b096      	sub	sp, #88	; 0x58
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	71fb      	strb	r3, [r7, #7]
	float motor1Thrust,motor2Thrust,motor3Thrust,motor4Thrust;
	float motor1Torque,motor2Torque,motor3Torque,motor4Torque;
	float thrust;
	int RPMmotor1,RPMmotor2,RPMmotor3,RPMmotor4;

	const float RADS = 57.29577795;
 8003cc4:	4b1e      	ldr	r3, [pc, #120]	; (8003d40 <trustControl+0x88>)
 8003cc6:	653b      	str	r3, [r7, #80]	; 0x50
	const float angleMotor1 = 45;
 8003cc8:	4b1e      	ldr	r3, [pc, #120]	; (8003d44 <trustControl+0x8c>)
 8003cca:	64fb      	str	r3, [r7, #76]	; 0x4c
	const float angleMotor2 = 135;
 8003ccc:	4b1e      	ldr	r3, [pc, #120]	; (8003d48 <trustControl+0x90>)
 8003cce:	64bb      	str	r3, [r7, #72]	; 0x48
	const float angleMotor3 = 225;
 8003cd0:	4b1e      	ldr	r3, [pc, #120]	; (8003d4c <trustControl+0x94>)
 8003cd2:	647b      	str	r3, [r7, #68]	; 0x44
	const float angleMotor4 = 315;
 8003cd4:	4b1e      	ldr	r3, [pc, #120]	; (8003d50 <trustControl+0x98>)
 8003cd6:	643b      	str	r3, [r7, #64]	; 0x40
	const float L = 0.225;
 8003cd8:	4b1e      	ldr	r3, [pc, #120]	; (8003d54 <trustControl+0x9c>)
 8003cda:	63fb      	str	r3, [r7, #60]	; 0x3c

	if(fly_mode == FLY_MODE_ON){
 8003cdc:	79fb      	ldrb	r3, [r7, #7]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d13e      	bne.n	8003d60 <trustControl+0xa8>
		thrust = map(inputThrottle, 1000, 2000, 0, 49.663985);
 8003ce2:	4b1d      	ldr	r3, [pc, #116]	; (8003d58 <trustControl+0xa0>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7fc fc1a 	bl	8000524 <__aeabi_i2d>
 8003cf0:	a311      	add	r3, pc, #68	; (adr r3, 8003d38 <trustControl+0x80>)
 8003cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf6:	f7fc fc7f 	bl	80005f8 <__aeabi_dmul>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	460c      	mov	r4, r1
 8003cfe:	4618      	mov	r0, r3
 8003d00:	4621      	mov	r1, r4
 8003d02:	f04f 0200 	mov.w	r2, #0
 8003d06:	4b15      	ldr	r3, [pc, #84]	; (8003d5c <trustControl+0xa4>)
 8003d08:	f7fc fda0 	bl	800084c <__aeabi_ddiv>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	460c      	mov	r4, r1
 8003d10:	4618      	mov	r0, r3
 8003d12:	4621      	mov	r1, r4
 8003d14:	f04f 0200 	mov.w	r2, #0
 8003d18:	f04f 0300 	mov.w	r3, #0
 8003d1c:	f7fc fab6 	bl	800028c <__adddf3>
 8003d20:	4603      	mov	r3, r0
 8003d22:	460c      	mov	r4, r1
 8003d24:	4618      	mov	r0, r3
 8003d26:	4621      	mov	r1, r4
 8003d28:	f7fc ff3e 	bl	8000ba8 <__aeabi_d2f>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	657b      	str	r3, [r7, #84]	; 0x54
 8003d30:	e04c      	b.n	8003dcc <trustControl+0x114>
 8003d32:	bf00      	nop
 8003d34:	f3af 8000 	nop.w
 8003d38:	75e2046c 	.word	0x75e2046c
 8003d3c:	4048d4fd 	.word	0x4048d4fd
 8003d40:	42652ee0 	.word	0x42652ee0
 8003d44:	42340000 	.word	0x42340000
 8003d48:	43070000 	.word	0x43070000
 8003d4c:	43610000 	.word	0x43610000
 8003d50:	439d8000 	.word	0x439d8000
 8003d54:	3e666666 	.word	0x3e666666
 8003d58:	200003a4 	.word	0x200003a4
 8003d5c:	408f4000 	.word	0x408f4000
	} else if(fly_mode == FLY_MODE_HOLD){
 8003d60:	79fb      	ldrb	r3, [r7, #7]
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d132      	bne.n	8003dcc <trustControl+0x114>
		thrust = map(holdThrottle + PIDAltitude.output, 1000, 2000, 0, 49.663985);
 8003d66:	4be6      	ldr	r3, [pc, #920]	; (8004100 <trustControl+0x448>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	ee07 3a90 	vmov	s15, r3
 8003d6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d72:	4be4      	ldr	r3, [pc, #912]	; (8004104 <trustControl+0x44c>)
 8003d74:	edd3 7a05 	vldr	s15, [r3, #20]
 8003d78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d7c:	ed9f 7ae2 	vldr	s14, [pc, #904]	; 8004108 <trustControl+0x450>
 8003d80:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003d84:	ee17 0a90 	vmov	r0, s15
 8003d88:	f7fc fbde 	bl	8000548 <__aeabi_f2d>
 8003d8c:	a3da      	add	r3, pc, #872	; (adr r3, 80040f8 <trustControl+0x440>)
 8003d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d92:	f7fc fc31 	bl	80005f8 <__aeabi_dmul>
 8003d96:	4603      	mov	r3, r0
 8003d98:	460c      	mov	r4, r1
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	4621      	mov	r1, r4
 8003d9e:	f04f 0200 	mov.w	r2, #0
 8003da2:	4bda      	ldr	r3, [pc, #872]	; (800410c <trustControl+0x454>)
 8003da4:	f7fc fd52 	bl	800084c <__aeabi_ddiv>
 8003da8:	4603      	mov	r3, r0
 8003daa:	460c      	mov	r4, r1
 8003dac:	4618      	mov	r0, r3
 8003dae:	4621      	mov	r1, r4
 8003db0:	f04f 0200 	mov.w	r2, #0
 8003db4:	f04f 0300 	mov.w	r3, #0
 8003db8:	f7fc fa68 	bl	800028c <__adddf3>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	460c      	mov	r4, r1
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	4621      	mov	r1, r4
 8003dc4:	f7fc fef0 	bl	8000ba8 <__aeabi_d2f>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	657b      	str	r3, [r7, #84]	; 0x54
	}


	motor1Torque = (thrust/4 - PIDPitch.output * sin(angleMotor1/RADS) + PIDRoll.output * cos(angleMotor1 / RADS) - PIDYaw.output) * L;
 8003dcc:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003dd0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003dd4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003dd8:	ee16 0a90 	vmov	r0, s13
 8003ddc:	f7fc fbb4 	bl	8000548 <__aeabi_f2d>
 8003de0:	4604      	mov	r4, r0
 8003de2:	460d      	mov	r5, r1
 8003de4:	4bca      	ldr	r3, [pc, #808]	; (8004110 <trustControl+0x458>)
 8003de6:	695b      	ldr	r3, [r3, #20]
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7fc fbad 	bl	8000548 <__aeabi_f2d>
 8003dee:	4680      	mov	r8, r0
 8003df0:	4689      	mov	r9, r1
 8003df2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8003df6:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8003dfa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003dfe:	ee16 0a90 	vmov	r0, s13
 8003e02:	f7fc fba1 	bl	8000548 <__aeabi_f2d>
 8003e06:	4602      	mov	r2, r0
 8003e08:	460b      	mov	r3, r1
 8003e0a:	ec43 2b10 	vmov	d0, r2, r3
 8003e0e:	f007 fb5b 	bl	800b4c8 <sin>
 8003e12:	ec53 2b10 	vmov	r2, r3, d0
 8003e16:	4640      	mov	r0, r8
 8003e18:	4649      	mov	r1, r9
 8003e1a:	f7fc fbed 	bl	80005f8 <__aeabi_dmul>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	460b      	mov	r3, r1
 8003e22:	4620      	mov	r0, r4
 8003e24:	4629      	mov	r1, r5
 8003e26:	f7fc fa2f 	bl	8000288 <__aeabi_dsub>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	460c      	mov	r4, r1
 8003e2e:	4625      	mov	r5, r4
 8003e30:	461c      	mov	r4, r3
 8003e32:	4bb8      	ldr	r3, [pc, #736]	; (8004114 <trustControl+0x45c>)
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7fc fb86 	bl	8000548 <__aeabi_f2d>
 8003e3c:	4680      	mov	r8, r0
 8003e3e:	4689      	mov	r9, r1
 8003e40:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8003e44:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8003e48:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003e4c:	ee16 0a90 	vmov	r0, s13
 8003e50:	f7fc fb7a 	bl	8000548 <__aeabi_f2d>
 8003e54:	4602      	mov	r2, r0
 8003e56:	460b      	mov	r3, r1
 8003e58:	ec43 2b10 	vmov	d0, r2, r3
 8003e5c:	f007 faf0 	bl	800b440 <cos>
 8003e60:	ec53 2b10 	vmov	r2, r3, d0
 8003e64:	4640      	mov	r0, r8
 8003e66:	4649      	mov	r1, r9
 8003e68:	f7fc fbc6 	bl	80005f8 <__aeabi_dmul>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	460b      	mov	r3, r1
 8003e70:	4620      	mov	r0, r4
 8003e72:	4629      	mov	r1, r5
 8003e74:	f7fc fa0a 	bl	800028c <__adddf3>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	460c      	mov	r4, r1
 8003e7c:	4625      	mov	r5, r4
 8003e7e:	461c      	mov	r4, r3
 8003e80:	4ba5      	ldr	r3, [pc, #660]	; (8004118 <trustControl+0x460>)
 8003e82:	695b      	ldr	r3, [r3, #20]
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7fc fb5f 	bl	8000548 <__aeabi_f2d>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	4620      	mov	r0, r4
 8003e90:	4629      	mov	r1, r5
 8003e92:	f7fc f9f9 	bl	8000288 <__aeabi_dsub>
 8003e96:	4603      	mov	r3, r0
 8003e98:	460c      	mov	r4, r1
 8003e9a:	4625      	mov	r5, r4
 8003e9c:	461c      	mov	r4, r3
 8003e9e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003ea0:	f7fc fb52 	bl	8000548 <__aeabi_f2d>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	4620      	mov	r0, r4
 8003eaa:	4629      	mov	r1, r5
 8003eac:	f7fc fba4 	bl	80005f8 <__aeabi_dmul>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	460c      	mov	r4, r1
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	4621      	mov	r1, r4
 8003eb8:	f7fc fe76 	bl	8000ba8 <__aeabi_d2f>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	63bb      	str	r3, [r7, #56]	; 0x38
	motor2Torque = (thrust/4 - PIDPitch.output * sin(angleMotor2/RADS) + PIDRoll.output * cos(angleMotor2 / RADS) + PIDYaw.output) * L;
 8003ec0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003ec4:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003ec8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003ecc:	ee16 0a90 	vmov	r0, s13
 8003ed0:	f7fc fb3a 	bl	8000548 <__aeabi_f2d>
 8003ed4:	4604      	mov	r4, r0
 8003ed6:	460d      	mov	r5, r1
 8003ed8:	4b8d      	ldr	r3, [pc, #564]	; (8004110 <trustControl+0x458>)
 8003eda:	695b      	ldr	r3, [r3, #20]
 8003edc:	4618      	mov	r0, r3
 8003ede:	f7fc fb33 	bl	8000548 <__aeabi_f2d>
 8003ee2:	4680      	mov	r8, r0
 8003ee4:	4689      	mov	r9, r1
 8003ee6:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8003eea:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8003eee:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003ef2:	ee16 0a90 	vmov	r0, s13
 8003ef6:	f7fc fb27 	bl	8000548 <__aeabi_f2d>
 8003efa:	4602      	mov	r2, r0
 8003efc:	460b      	mov	r3, r1
 8003efe:	ec43 2b10 	vmov	d0, r2, r3
 8003f02:	f007 fae1 	bl	800b4c8 <sin>
 8003f06:	ec53 2b10 	vmov	r2, r3, d0
 8003f0a:	4640      	mov	r0, r8
 8003f0c:	4649      	mov	r1, r9
 8003f0e:	f7fc fb73 	bl	80005f8 <__aeabi_dmul>
 8003f12:	4602      	mov	r2, r0
 8003f14:	460b      	mov	r3, r1
 8003f16:	4620      	mov	r0, r4
 8003f18:	4629      	mov	r1, r5
 8003f1a:	f7fc f9b5 	bl	8000288 <__aeabi_dsub>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	460c      	mov	r4, r1
 8003f22:	4625      	mov	r5, r4
 8003f24:	461c      	mov	r4, r3
 8003f26:	4b7b      	ldr	r3, [pc, #492]	; (8004114 <trustControl+0x45c>)
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7fc fb0c 	bl	8000548 <__aeabi_f2d>
 8003f30:	4680      	mov	r8, r0
 8003f32:	4689      	mov	r9, r1
 8003f34:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8003f38:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8003f3c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003f40:	ee16 0a90 	vmov	r0, s13
 8003f44:	f7fc fb00 	bl	8000548 <__aeabi_f2d>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	ec43 2b10 	vmov	d0, r2, r3
 8003f50:	f007 fa76 	bl	800b440 <cos>
 8003f54:	ec53 2b10 	vmov	r2, r3, d0
 8003f58:	4640      	mov	r0, r8
 8003f5a:	4649      	mov	r1, r9
 8003f5c:	f7fc fb4c 	bl	80005f8 <__aeabi_dmul>
 8003f60:	4602      	mov	r2, r0
 8003f62:	460b      	mov	r3, r1
 8003f64:	4620      	mov	r0, r4
 8003f66:	4629      	mov	r1, r5
 8003f68:	f7fc f990 	bl	800028c <__adddf3>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	460c      	mov	r4, r1
 8003f70:	4625      	mov	r5, r4
 8003f72:	461c      	mov	r4, r3
 8003f74:	4b68      	ldr	r3, [pc, #416]	; (8004118 <trustControl+0x460>)
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7fc fae5 	bl	8000548 <__aeabi_f2d>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	460b      	mov	r3, r1
 8003f82:	4620      	mov	r0, r4
 8003f84:	4629      	mov	r1, r5
 8003f86:	f7fc f981 	bl	800028c <__adddf3>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	460c      	mov	r4, r1
 8003f8e:	4625      	mov	r5, r4
 8003f90:	461c      	mov	r4, r3
 8003f92:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003f94:	f7fc fad8 	bl	8000548 <__aeabi_f2d>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	4620      	mov	r0, r4
 8003f9e:	4629      	mov	r1, r5
 8003fa0:	f7fc fb2a 	bl	80005f8 <__aeabi_dmul>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	460c      	mov	r4, r1
 8003fa8:	4618      	mov	r0, r3
 8003faa:	4621      	mov	r1, r4
 8003fac:	f7fc fdfc 	bl	8000ba8 <__aeabi_d2f>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	637b      	str	r3, [r7, #52]	; 0x34
	motor3Torque = (thrust/4 - PIDPitch.output * sin(angleMotor3/RADS) + PIDRoll.output * cos(angleMotor3 / RADS) - PIDYaw.output) * L;
 8003fb4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003fb8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003fbc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003fc0:	ee16 0a90 	vmov	r0, s13
 8003fc4:	f7fc fac0 	bl	8000548 <__aeabi_f2d>
 8003fc8:	4604      	mov	r4, r0
 8003fca:	460d      	mov	r5, r1
 8003fcc:	4b50      	ldr	r3, [pc, #320]	; (8004110 <trustControl+0x458>)
 8003fce:	695b      	ldr	r3, [r3, #20]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7fc fab9 	bl	8000548 <__aeabi_f2d>
 8003fd6:	4680      	mov	r8, r0
 8003fd8:	4689      	mov	r9, r1
 8003fda:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003fde:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8003fe2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003fe6:	ee16 0a90 	vmov	r0, s13
 8003fea:	f7fc faad 	bl	8000548 <__aeabi_f2d>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	ec43 2b10 	vmov	d0, r2, r3
 8003ff6:	f007 fa67 	bl	800b4c8 <sin>
 8003ffa:	ec53 2b10 	vmov	r2, r3, d0
 8003ffe:	4640      	mov	r0, r8
 8004000:	4649      	mov	r1, r9
 8004002:	f7fc faf9 	bl	80005f8 <__aeabi_dmul>
 8004006:	4602      	mov	r2, r0
 8004008:	460b      	mov	r3, r1
 800400a:	4620      	mov	r0, r4
 800400c:	4629      	mov	r1, r5
 800400e:	f7fc f93b 	bl	8000288 <__aeabi_dsub>
 8004012:	4603      	mov	r3, r0
 8004014:	460c      	mov	r4, r1
 8004016:	4625      	mov	r5, r4
 8004018:	461c      	mov	r4, r3
 800401a:	4b3e      	ldr	r3, [pc, #248]	; (8004114 <trustControl+0x45c>)
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	4618      	mov	r0, r3
 8004020:	f7fc fa92 	bl	8000548 <__aeabi_f2d>
 8004024:	4680      	mov	r8, r0
 8004026:	4689      	mov	r9, r1
 8004028:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800402c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8004030:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004034:	ee16 0a90 	vmov	r0, s13
 8004038:	f7fc fa86 	bl	8000548 <__aeabi_f2d>
 800403c:	4602      	mov	r2, r0
 800403e:	460b      	mov	r3, r1
 8004040:	ec43 2b10 	vmov	d0, r2, r3
 8004044:	f007 f9fc 	bl	800b440 <cos>
 8004048:	ec53 2b10 	vmov	r2, r3, d0
 800404c:	4640      	mov	r0, r8
 800404e:	4649      	mov	r1, r9
 8004050:	f7fc fad2 	bl	80005f8 <__aeabi_dmul>
 8004054:	4602      	mov	r2, r0
 8004056:	460b      	mov	r3, r1
 8004058:	4620      	mov	r0, r4
 800405a:	4629      	mov	r1, r5
 800405c:	f7fc f916 	bl	800028c <__adddf3>
 8004060:	4603      	mov	r3, r0
 8004062:	460c      	mov	r4, r1
 8004064:	4625      	mov	r5, r4
 8004066:	461c      	mov	r4, r3
 8004068:	4b2b      	ldr	r3, [pc, #172]	; (8004118 <trustControl+0x460>)
 800406a:	695b      	ldr	r3, [r3, #20]
 800406c:	4618      	mov	r0, r3
 800406e:	f7fc fa6b 	bl	8000548 <__aeabi_f2d>
 8004072:	4602      	mov	r2, r0
 8004074:	460b      	mov	r3, r1
 8004076:	4620      	mov	r0, r4
 8004078:	4629      	mov	r1, r5
 800407a:	f7fc f905 	bl	8000288 <__aeabi_dsub>
 800407e:	4603      	mov	r3, r0
 8004080:	460c      	mov	r4, r1
 8004082:	4625      	mov	r5, r4
 8004084:	461c      	mov	r4, r3
 8004086:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004088:	f7fc fa5e 	bl	8000548 <__aeabi_f2d>
 800408c:	4602      	mov	r2, r0
 800408e:	460b      	mov	r3, r1
 8004090:	4620      	mov	r0, r4
 8004092:	4629      	mov	r1, r5
 8004094:	f7fc fab0 	bl	80005f8 <__aeabi_dmul>
 8004098:	4603      	mov	r3, r0
 800409a:	460c      	mov	r4, r1
 800409c:	4618      	mov	r0, r3
 800409e:	4621      	mov	r1, r4
 80040a0:	f7fc fd82 	bl	8000ba8 <__aeabi_d2f>
 80040a4:	4603      	mov	r3, r0
 80040a6:	633b      	str	r3, [r7, #48]	; 0x30
	motor4Torque = (thrust/4 - PIDPitch.output * sin(angleMotor4/RADS) + PIDRoll.output * cos(angleMotor4 / RADS) + PIDYaw.output) * L;
 80040a8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80040ac:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80040b0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80040b4:	ee16 0a90 	vmov	r0, s13
 80040b8:	f7fc fa46 	bl	8000548 <__aeabi_f2d>
 80040bc:	4604      	mov	r4, r0
 80040be:	460d      	mov	r5, r1
 80040c0:	4b13      	ldr	r3, [pc, #76]	; (8004110 <trustControl+0x458>)
 80040c2:	695b      	ldr	r3, [r3, #20]
 80040c4:	4618      	mov	r0, r3
 80040c6:	f7fc fa3f 	bl	8000548 <__aeabi_f2d>
 80040ca:	4680      	mov	r8, r0
 80040cc:	4689      	mov	r9, r1
 80040ce:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80040d2:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80040d6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80040da:	ee16 0a90 	vmov	r0, s13
 80040de:	f7fc fa33 	bl	8000548 <__aeabi_f2d>
 80040e2:	4602      	mov	r2, r0
 80040e4:	460b      	mov	r3, r1
 80040e6:	ec43 2b10 	vmov	d0, r2, r3
 80040ea:	f007 f9ed 	bl	800b4c8 <sin>
 80040ee:	ec53 2b10 	vmov	r2, r3, d0
 80040f2:	4640      	mov	r0, r8
 80040f4:	4649      	mov	r1, r9
 80040f6:	e011      	b.n	800411c <trustControl+0x464>
 80040f8:	75e2046c 	.word	0x75e2046c
 80040fc:	4048d4fd 	.word	0x4048d4fd
 8004100:	20000bdc 	.word	0x20000bdc
 8004104:	2000076c 	.word	0x2000076c
 8004108:	447a0000 	.word	0x447a0000
 800410c:	408f4000 	.word	0x408f4000
 8004110:	20000220 	.word	0x20000220
 8004114:	20000b58 	.word	0x20000b58
 8004118:	20000798 	.word	0x20000798
 800411c:	f7fc fa6c 	bl	80005f8 <__aeabi_dmul>
 8004120:	4602      	mov	r2, r0
 8004122:	460b      	mov	r3, r1
 8004124:	4620      	mov	r0, r4
 8004126:	4629      	mov	r1, r5
 8004128:	f7fc f8ae 	bl	8000288 <__aeabi_dsub>
 800412c:	4603      	mov	r3, r0
 800412e:	460c      	mov	r4, r1
 8004130:	4625      	mov	r5, r4
 8004132:	461c      	mov	r4, r3
 8004134:	4bbc      	ldr	r3, [pc, #752]	; (8004428 <trustControl+0x770>)
 8004136:	695b      	ldr	r3, [r3, #20]
 8004138:	4618      	mov	r0, r3
 800413a:	f7fc fa05 	bl	8000548 <__aeabi_f2d>
 800413e:	4680      	mov	r8, r0
 8004140:	4689      	mov	r9, r1
 8004142:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004146:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800414a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800414e:	ee16 0a90 	vmov	r0, s13
 8004152:	f7fc f9f9 	bl	8000548 <__aeabi_f2d>
 8004156:	4602      	mov	r2, r0
 8004158:	460b      	mov	r3, r1
 800415a:	ec43 2b10 	vmov	d0, r2, r3
 800415e:	f007 f96f 	bl	800b440 <cos>
 8004162:	ec53 2b10 	vmov	r2, r3, d0
 8004166:	4640      	mov	r0, r8
 8004168:	4649      	mov	r1, r9
 800416a:	f7fc fa45 	bl	80005f8 <__aeabi_dmul>
 800416e:	4602      	mov	r2, r0
 8004170:	460b      	mov	r3, r1
 8004172:	4620      	mov	r0, r4
 8004174:	4629      	mov	r1, r5
 8004176:	f7fc f889 	bl	800028c <__adddf3>
 800417a:	4603      	mov	r3, r0
 800417c:	460c      	mov	r4, r1
 800417e:	4625      	mov	r5, r4
 8004180:	461c      	mov	r4, r3
 8004182:	4baa      	ldr	r3, [pc, #680]	; (800442c <trustControl+0x774>)
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	4618      	mov	r0, r3
 8004188:	f7fc f9de 	bl	8000548 <__aeabi_f2d>
 800418c:	4602      	mov	r2, r0
 800418e:	460b      	mov	r3, r1
 8004190:	4620      	mov	r0, r4
 8004192:	4629      	mov	r1, r5
 8004194:	f7fc f87a 	bl	800028c <__adddf3>
 8004198:	4603      	mov	r3, r0
 800419a:	460c      	mov	r4, r1
 800419c:	4625      	mov	r5, r4
 800419e:	461c      	mov	r4, r3
 80041a0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80041a2:	f7fc f9d1 	bl	8000548 <__aeabi_f2d>
 80041a6:	4602      	mov	r2, r0
 80041a8:	460b      	mov	r3, r1
 80041aa:	4620      	mov	r0, r4
 80041ac:	4629      	mov	r1, r5
 80041ae:	f7fc fa23 	bl	80005f8 <__aeabi_dmul>
 80041b2:	4603      	mov	r3, r0
 80041b4:	460c      	mov	r4, r1
 80041b6:	4618      	mov	r0, r3
 80041b8:	4621      	mov	r1, r4
 80041ba:	f7fc fcf5 	bl	8000ba8 <__aeabi_d2f>
 80041be:	4603      	mov	r3, r0
 80041c0:	62fb      	str	r3, [r7, #44]	; 0x2c

	motor1Thrust = motor1Torque/L;
 80041c2:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 80041c6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80041ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041ce:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	motor2Thrust = motor2Torque/L;
 80041d2:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80041d6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80041da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041de:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	motor3Thrust = motor3Torque/L;
 80041e2:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80041e6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80041ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041ee:	edc7 7a08 	vstr	s15, [r7, #32]
	motor4Thrust = motor4Torque/L;
 80041f2:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80041f6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80041fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041fe:	edc7 7a07 	vstr	s15, [r7, #28]

	RPMmotor1 = sqrt(motor1Thrust / 0.023759052) / 0.001905;
 8004202:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004204:	f7fc f9a0 	bl	8000548 <__aeabi_f2d>
 8004208:	a383      	add	r3, pc, #524	; (adr r3, 8004418 <trustControl+0x760>)
 800420a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420e:	f7fc fb1d 	bl	800084c <__aeabi_ddiv>
 8004212:	4603      	mov	r3, r0
 8004214:	460c      	mov	r4, r1
 8004216:	ec44 3b17 	vmov	d7, r3, r4
 800421a:	eeb0 0a47 	vmov.f32	s0, s14
 800421e:	eef0 0a67 	vmov.f32	s1, s15
 8004222:	f007 fb09 	bl	800b838 <sqrt>
 8004226:	ec51 0b10 	vmov	r0, r1, d0
 800422a:	a37d      	add	r3, pc, #500	; (adr r3, 8004420 <trustControl+0x768>)
 800422c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004230:	f7fc fb0c 	bl	800084c <__aeabi_ddiv>
 8004234:	4603      	mov	r3, r0
 8004236:	460c      	mov	r4, r1
 8004238:	4618      	mov	r0, r3
 800423a:	4621      	mov	r1, r4
 800423c:	f7fc fc8c 	bl	8000b58 <__aeabi_d2iz>
 8004240:	4603      	mov	r3, r0
 8004242:	61bb      	str	r3, [r7, #24]
	RPMmotor2 = sqrt(motor2Thrust / 0.023759052) / 0.001905;
 8004244:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004246:	f7fc f97f 	bl	8000548 <__aeabi_f2d>
 800424a:	a373      	add	r3, pc, #460	; (adr r3, 8004418 <trustControl+0x760>)
 800424c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004250:	f7fc fafc 	bl	800084c <__aeabi_ddiv>
 8004254:	4603      	mov	r3, r0
 8004256:	460c      	mov	r4, r1
 8004258:	ec44 3b17 	vmov	d7, r3, r4
 800425c:	eeb0 0a47 	vmov.f32	s0, s14
 8004260:	eef0 0a67 	vmov.f32	s1, s15
 8004264:	f007 fae8 	bl	800b838 <sqrt>
 8004268:	ec51 0b10 	vmov	r0, r1, d0
 800426c:	a36c      	add	r3, pc, #432	; (adr r3, 8004420 <trustControl+0x768>)
 800426e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004272:	f7fc faeb 	bl	800084c <__aeabi_ddiv>
 8004276:	4603      	mov	r3, r0
 8004278:	460c      	mov	r4, r1
 800427a:	4618      	mov	r0, r3
 800427c:	4621      	mov	r1, r4
 800427e:	f7fc fc6b 	bl	8000b58 <__aeabi_d2iz>
 8004282:	4603      	mov	r3, r0
 8004284:	617b      	str	r3, [r7, #20]
	RPMmotor3 = sqrt(motor3Thrust / 0.023759052) / 0.001905;
 8004286:	6a38      	ldr	r0, [r7, #32]
 8004288:	f7fc f95e 	bl	8000548 <__aeabi_f2d>
 800428c:	a362      	add	r3, pc, #392	; (adr r3, 8004418 <trustControl+0x760>)
 800428e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004292:	f7fc fadb 	bl	800084c <__aeabi_ddiv>
 8004296:	4603      	mov	r3, r0
 8004298:	460c      	mov	r4, r1
 800429a:	ec44 3b17 	vmov	d7, r3, r4
 800429e:	eeb0 0a47 	vmov.f32	s0, s14
 80042a2:	eef0 0a67 	vmov.f32	s1, s15
 80042a6:	f007 fac7 	bl	800b838 <sqrt>
 80042aa:	ec51 0b10 	vmov	r0, r1, d0
 80042ae:	a35c      	add	r3, pc, #368	; (adr r3, 8004420 <trustControl+0x768>)
 80042b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b4:	f7fc faca 	bl	800084c <__aeabi_ddiv>
 80042b8:	4603      	mov	r3, r0
 80042ba:	460c      	mov	r4, r1
 80042bc:	4618      	mov	r0, r3
 80042be:	4621      	mov	r1, r4
 80042c0:	f7fc fc4a 	bl	8000b58 <__aeabi_d2iz>
 80042c4:	4603      	mov	r3, r0
 80042c6:	613b      	str	r3, [r7, #16]
	RPMmotor4 = sqrt(motor4Thrust / 0.023759052) / 0.001905;
 80042c8:	69f8      	ldr	r0, [r7, #28]
 80042ca:	f7fc f93d 	bl	8000548 <__aeabi_f2d>
 80042ce:	a352      	add	r3, pc, #328	; (adr r3, 8004418 <trustControl+0x760>)
 80042d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d4:	f7fc faba 	bl	800084c <__aeabi_ddiv>
 80042d8:	4603      	mov	r3, r0
 80042da:	460c      	mov	r4, r1
 80042dc:	ec44 3b17 	vmov	d7, r3, r4
 80042e0:	eeb0 0a47 	vmov.f32	s0, s14
 80042e4:	eef0 0a67 	vmov.f32	s1, s15
 80042e8:	f007 faa6 	bl	800b838 <sqrt>
 80042ec:	ec51 0b10 	vmov	r0, r1, d0
 80042f0:	a34b      	add	r3, pc, #300	; (adr r3, 8004420 <trustControl+0x768>)
 80042f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f6:	f7fc faa9 	bl	800084c <__aeabi_ddiv>
 80042fa:	4603      	mov	r3, r0
 80042fc:	460c      	mov	r4, r1
 80042fe:	4618      	mov	r0, r3
 8004300:	4621      	mov	r1, r4
 8004302:	f7fc fc29 	bl	8000b58 <__aeabi_d2iz>
 8004306:	4603      	mov	r3, r0
 8004308:	60fb      	str	r3, [r7, #12]

	RPMmotor1 = constrain(RPMmotor1,0,12000);
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	2b00      	cmp	r3, #0
 800430e:	db06      	blt.n	800431e <trustControl+0x666>
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8004316:	4293      	cmp	r3, r2
 8004318:	bfa8      	it	ge
 800431a:	4613      	movge	r3, r2
 800431c:	e000      	b.n	8004320 <trustControl+0x668>
 800431e:	2300      	movs	r3, #0
 8004320:	61bb      	str	r3, [r7, #24]
	RPMmotor2 = constrain(RPMmotor2,0,12000);
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	2b00      	cmp	r3, #0
 8004326:	db06      	blt.n	8004336 <trustControl+0x67e>
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 800432e:	4293      	cmp	r3, r2
 8004330:	bfa8      	it	ge
 8004332:	4613      	movge	r3, r2
 8004334:	e000      	b.n	8004338 <trustControl+0x680>
 8004336:	2300      	movs	r3, #0
 8004338:	617b      	str	r3, [r7, #20]
	RPMmotor3 = constrain(RPMmotor3,0,12000);
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	2b00      	cmp	r3, #0
 800433e:	db06      	blt.n	800434e <trustControl+0x696>
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8004346:	4293      	cmp	r3, r2
 8004348:	bfa8      	it	ge
 800434a:	4613      	movge	r3, r2
 800434c:	e000      	b.n	8004350 <trustControl+0x698>
 800434e:	2300      	movs	r3, #0
 8004350:	613b      	str	r3, [r7, #16]
	RPMmotor4 = constrain(RPMmotor4,0,12000);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2b00      	cmp	r3, #0
 8004356:	db06      	blt.n	8004366 <trustControl+0x6ae>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 800435e:	4293      	cmp	r3, r2
 8004360:	bfa8      	it	ge
 8004362:	4613      	movge	r3, r2
 8004364:	e000      	b.n	8004368 <trustControl+0x6b0>
 8004366:	2300      	movs	r3, #0
 8004368:	60fb      	str	r3, [r7, #12]

	pulseESC1 = map(RPMmotor1,0,12000,1000,2000);
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004370:	fb02 f303 	mul.w	r3, r2, r3
 8004374:	4a2e      	ldr	r2, [pc, #184]	; (8004430 <trustControl+0x778>)
 8004376:	fb82 1203 	smull	r1, r2, r2, r3
 800437a:	1212      	asrs	r2, r2, #8
 800437c:	17db      	asrs	r3, r3, #31
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8004384:	4a2b      	ldr	r2, [pc, #172]	; (8004434 <trustControl+0x77c>)
 8004386:	6013      	str	r3, [r2, #0]
	pulseESC2 = map(RPMmotor2,0,12000,1000,2000);
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800438e:	fb02 f303 	mul.w	r3, r2, r3
 8004392:	4a27      	ldr	r2, [pc, #156]	; (8004430 <trustControl+0x778>)
 8004394:	fb82 1203 	smull	r1, r2, r2, r3
 8004398:	1212      	asrs	r2, r2, #8
 800439a:	17db      	asrs	r3, r3, #31
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80043a2:	4a25      	ldr	r2, [pc, #148]	; (8004438 <trustControl+0x780>)
 80043a4:	6013      	str	r3, [r2, #0]
	pulseESC3 = map(RPMmotor3,0,12000,1000,2000);
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80043ac:	fb02 f303 	mul.w	r3, r2, r3
 80043b0:	4a1f      	ldr	r2, [pc, #124]	; (8004430 <trustControl+0x778>)
 80043b2:	fb82 1203 	smull	r1, r2, r2, r3
 80043b6:	1212      	asrs	r2, r2, #8
 80043b8:	17db      	asrs	r3, r3, #31
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80043c0:	4a1e      	ldr	r2, [pc, #120]	; (800443c <trustControl+0x784>)
 80043c2:	6013      	str	r3, [r2, #0]
	pulseESC4 = map(RPMmotor4,0,12000,1000,2000);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80043ca:	fb02 f303 	mul.w	r3, r2, r3
 80043ce:	4a18      	ldr	r2, [pc, #96]	; (8004430 <trustControl+0x778>)
 80043d0:	fb82 1203 	smull	r1, r2, r2, r3
 80043d4:	1212      	asrs	r2, r2, #8
 80043d6:	17db      	asrs	r3, r3, #31
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80043de:	4a18      	ldr	r2, [pc, #96]	; (8004440 <trustControl+0x788>)
 80043e0:	6013      	str	r3, [r2, #0]

	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,pulseESC1);
 80043e2:	4b14      	ldr	r3, [pc, #80]	; (8004434 <trustControl+0x77c>)
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	4b17      	ldr	r3, [pc, #92]	; (8004444 <trustControl+0x78c>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,pulseESC2);
 80043ec:	4b12      	ldr	r3, [pc, #72]	; (8004438 <trustControl+0x780>)
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	4b14      	ldr	r3, [pc, #80]	; (8004444 <trustControl+0x78c>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,pulseESC3);
 80043f6:	4b11      	ldr	r3, [pc, #68]	; (800443c <trustControl+0x784>)
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	4b12      	ldr	r3, [pc, #72]	; (8004444 <trustControl+0x78c>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,pulseESC4);
 8004400:	4b0f      	ldr	r3, [pc, #60]	; (8004440 <trustControl+0x788>)
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	4b0f      	ldr	r3, [pc, #60]	; (8004444 <trustControl+0x78c>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	641a      	str	r2, [r3, #64]	; 0x40

}
 800440a:	bf00      	nop
 800440c:	3758      	adds	r7, #88	; 0x58
 800440e:	46bd      	mov	sp, r7
 8004410:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004414:	f3af 8000 	nop.w
 8004418:	fd4bbd0f 	.word	0xfd4bbd0f
 800441c:	3f98544a 	.word	0x3f98544a
 8004420:	2cba732e 	.word	0x2cba732e
 8004424:	3f5f3626 	.word	0x3f5f3626
 8004428:	20000b58 	.word	0x20000b58
 800442c:	20000798 	.word	0x20000798
 8004430:	057619f1 	.word	0x057619f1
 8004434:	20000d08 	.word	0x20000d08
 8004438:	20000248 	.word	0x20000248
 800443c:	20000d24 	.word	0x20000d24
 8004440:	200008d0 	.word	0x200008d0
 8004444:	20000be8 	.word	0x20000be8

08004448 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800444e:	2300      	movs	r3, #0
 8004450:	607b      	str	r3, [r7, #4]
 8004452:	4b10      	ldr	r3, [pc, #64]	; (8004494 <HAL_MspInit+0x4c>)
 8004454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004456:	4a0f      	ldr	r2, [pc, #60]	; (8004494 <HAL_MspInit+0x4c>)
 8004458:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800445c:	6453      	str	r3, [r2, #68]	; 0x44
 800445e:	4b0d      	ldr	r3, [pc, #52]	; (8004494 <HAL_MspInit+0x4c>)
 8004460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004462:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004466:	607b      	str	r3, [r7, #4]
 8004468:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800446a:	2300      	movs	r3, #0
 800446c:	603b      	str	r3, [r7, #0]
 800446e:	4b09      	ldr	r3, [pc, #36]	; (8004494 <HAL_MspInit+0x4c>)
 8004470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004472:	4a08      	ldr	r2, [pc, #32]	; (8004494 <HAL_MspInit+0x4c>)
 8004474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004478:	6413      	str	r3, [r2, #64]	; 0x40
 800447a:	4b06      	ldr	r3, [pc, #24]	; (8004494 <HAL_MspInit+0x4c>)
 800447c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004482:	603b      	str	r3, [r7, #0]
 8004484:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004486:	bf00      	nop
 8004488:	370c      	adds	r7, #12
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	40023800 	.word	0x40023800

08004498 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b08c      	sub	sp, #48	; 0x30
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044a0:	f107 031c 	add.w	r3, r7, #28
 80044a4:	2200      	movs	r2, #0
 80044a6:	601a      	str	r2, [r3, #0]
 80044a8:	605a      	str	r2, [r3, #4]
 80044aa:	609a      	str	r2, [r3, #8]
 80044ac:	60da      	str	r2, [r3, #12]
 80044ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a42      	ldr	r2, [pc, #264]	; (80045c0 <HAL_I2C_MspInit+0x128>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d12d      	bne.n	8004516 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044ba:	2300      	movs	r3, #0
 80044bc:	61bb      	str	r3, [r7, #24]
 80044be:	4b41      	ldr	r3, [pc, #260]	; (80045c4 <HAL_I2C_MspInit+0x12c>)
 80044c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c2:	4a40      	ldr	r2, [pc, #256]	; (80045c4 <HAL_I2C_MspInit+0x12c>)
 80044c4:	f043 0302 	orr.w	r3, r3, #2
 80044c8:	6313      	str	r3, [r2, #48]	; 0x30
 80044ca:	4b3e      	ldr	r3, [pc, #248]	; (80045c4 <HAL_I2C_MspInit+0x12c>)
 80044cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ce:	f003 0302 	and.w	r3, r3, #2
 80044d2:	61bb      	str	r3, [r7, #24]
 80044d4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80044d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80044da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80044dc:	2312      	movs	r3, #18
 80044de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80044e0:	2301      	movs	r3, #1
 80044e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044e4:	2303      	movs	r3, #3
 80044e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80044e8:	2304      	movs	r3, #4
 80044ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044ec:	f107 031c 	add.w	r3, r7, #28
 80044f0:	4619      	mov	r1, r3
 80044f2:	4835      	ldr	r0, [pc, #212]	; (80045c8 <HAL_I2C_MspInit+0x130>)
 80044f4:	f001 f970 	bl	80057d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80044f8:	2300      	movs	r3, #0
 80044fa:	617b      	str	r3, [r7, #20]
 80044fc:	4b31      	ldr	r3, [pc, #196]	; (80045c4 <HAL_I2C_MspInit+0x12c>)
 80044fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004500:	4a30      	ldr	r2, [pc, #192]	; (80045c4 <HAL_I2C_MspInit+0x12c>)
 8004502:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004506:	6413      	str	r3, [r2, #64]	; 0x40
 8004508:	4b2e      	ldr	r3, [pc, #184]	; (80045c4 <HAL_I2C_MspInit+0x12c>)
 800450a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004510:	617b      	str	r3, [r7, #20]
 8004512:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004514:	e050      	b.n	80045b8 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a2c      	ldr	r2, [pc, #176]	; (80045cc <HAL_I2C_MspInit+0x134>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d14b      	bne.n	80045b8 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004520:	2300      	movs	r3, #0
 8004522:	613b      	str	r3, [r7, #16]
 8004524:	4b27      	ldr	r3, [pc, #156]	; (80045c4 <HAL_I2C_MspInit+0x12c>)
 8004526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004528:	4a26      	ldr	r2, [pc, #152]	; (80045c4 <HAL_I2C_MspInit+0x12c>)
 800452a:	f043 0304 	orr.w	r3, r3, #4
 800452e:	6313      	str	r3, [r2, #48]	; 0x30
 8004530:	4b24      	ldr	r3, [pc, #144]	; (80045c4 <HAL_I2C_MspInit+0x12c>)
 8004532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004534:	f003 0304 	and.w	r3, r3, #4
 8004538:	613b      	str	r3, [r7, #16]
 800453a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800453c:	2300      	movs	r3, #0
 800453e:	60fb      	str	r3, [r7, #12]
 8004540:	4b20      	ldr	r3, [pc, #128]	; (80045c4 <HAL_I2C_MspInit+0x12c>)
 8004542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004544:	4a1f      	ldr	r2, [pc, #124]	; (80045c4 <HAL_I2C_MspInit+0x12c>)
 8004546:	f043 0301 	orr.w	r3, r3, #1
 800454a:	6313      	str	r3, [r2, #48]	; 0x30
 800454c:	4b1d      	ldr	r3, [pc, #116]	; (80045c4 <HAL_I2C_MspInit+0x12c>)
 800454e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004550:	f003 0301 	and.w	r3, r3, #1
 8004554:	60fb      	str	r3, [r7, #12]
 8004556:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004558:	f44f 7300 	mov.w	r3, #512	; 0x200
 800455c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800455e:	2312      	movs	r3, #18
 8004560:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004562:	2301      	movs	r3, #1
 8004564:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004566:	2303      	movs	r3, #3
 8004568:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800456a:	2304      	movs	r3, #4
 800456c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800456e:	f107 031c 	add.w	r3, r7, #28
 8004572:	4619      	mov	r1, r3
 8004574:	4816      	ldr	r0, [pc, #88]	; (80045d0 <HAL_I2C_MspInit+0x138>)
 8004576:	f001 f92f 	bl	80057d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800457a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800457e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004580:	2312      	movs	r3, #18
 8004582:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004584:	2301      	movs	r3, #1
 8004586:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004588:	2303      	movs	r3, #3
 800458a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800458c:	2304      	movs	r3, #4
 800458e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004590:	f107 031c 	add.w	r3, r7, #28
 8004594:	4619      	mov	r1, r3
 8004596:	480f      	ldr	r0, [pc, #60]	; (80045d4 <HAL_I2C_MspInit+0x13c>)
 8004598:	f001 f91e 	bl	80057d8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800459c:	2300      	movs	r3, #0
 800459e:	60bb      	str	r3, [r7, #8]
 80045a0:	4b08      	ldr	r3, [pc, #32]	; (80045c4 <HAL_I2C_MspInit+0x12c>)
 80045a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a4:	4a07      	ldr	r2, [pc, #28]	; (80045c4 <HAL_I2C_MspInit+0x12c>)
 80045a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80045aa:	6413      	str	r3, [r2, #64]	; 0x40
 80045ac:	4b05      	ldr	r3, [pc, #20]	; (80045c4 <HAL_I2C_MspInit+0x12c>)
 80045ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045b4:	60bb      	str	r3, [r7, #8]
 80045b6:	68bb      	ldr	r3, [r7, #8]
}
 80045b8:	bf00      	nop
 80045ba:	3730      	adds	r7, #48	; 0x30
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	40005400 	.word	0x40005400
 80045c4:	40023800 	.word	0x40023800
 80045c8:	40020400 	.word	0x40020400
 80045cc:	40005c00 	.word	0x40005c00
 80045d0:	40020800 	.word	0x40020800
 80045d4:	40020000 	.word	0x40020000

080045d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b094      	sub	sp, #80	; 0x50
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045e0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80045e4:	2200      	movs	r2, #0
 80045e6:	601a      	str	r2, [r3, #0]
 80045e8:	605a      	str	r2, [r3, #4]
 80045ea:	609a      	str	r2, [r3, #8]
 80045ec:	60da      	str	r2, [r3, #12]
 80045ee:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045f8:	d116      	bne.n	8004628 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80045fa:	2300      	movs	r3, #0
 80045fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80045fe:	4ba6      	ldr	r3, [pc, #664]	; (8004898 <HAL_TIM_Base_MspInit+0x2c0>)
 8004600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004602:	4aa5      	ldr	r2, [pc, #660]	; (8004898 <HAL_TIM_Base_MspInit+0x2c0>)
 8004604:	f043 0301 	orr.w	r3, r3, #1
 8004608:	6413      	str	r3, [r2, #64]	; 0x40
 800460a:	4ba3      	ldr	r3, [pc, #652]	; (8004898 <HAL_TIM_Base_MspInit+0x2c0>)
 800460c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	63bb      	str	r3, [r7, #56]	; 0x38
 8004614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004616:	2200      	movs	r2, #0
 8004618:	2100      	movs	r1, #0
 800461a:	201c      	movs	r0, #28
 800461c:	f000 fd37 	bl	800508e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004620:	201c      	movs	r0, #28
 8004622:	f000 fd50 	bl	80050c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8004626:	e16a      	b.n	80048fe <HAL_TIM_Base_MspInit+0x326>
  else if(htim_base->Instance==TIM3)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a9b      	ldr	r2, [pc, #620]	; (800489c <HAL_TIM_Base_MspInit+0x2c4>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d152      	bne.n	80046d8 <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004632:	2300      	movs	r3, #0
 8004634:	637b      	str	r3, [r7, #52]	; 0x34
 8004636:	4b98      	ldr	r3, [pc, #608]	; (8004898 <HAL_TIM_Base_MspInit+0x2c0>)
 8004638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463a:	4a97      	ldr	r2, [pc, #604]	; (8004898 <HAL_TIM_Base_MspInit+0x2c0>)
 800463c:	f043 0302 	orr.w	r3, r3, #2
 8004640:	6413      	str	r3, [r2, #64]	; 0x40
 8004642:	4b95      	ldr	r3, [pc, #596]	; (8004898 <HAL_TIM_Base_MspInit+0x2c0>)
 8004644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004646:	f003 0302 	and.w	r3, r3, #2
 800464a:	637b      	str	r3, [r7, #52]	; 0x34
 800464c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800464e:	2300      	movs	r3, #0
 8004650:	633b      	str	r3, [r7, #48]	; 0x30
 8004652:	4b91      	ldr	r3, [pc, #580]	; (8004898 <HAL_TIM_Base_MspInit+0x2c0>)
 8004654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004656:	4a90      	ldr	r2, [pc, #576]	; (8004898 <HAL_TIM_Base_MspInit+0x2c0>)
 8004658:	f043 0304 	orr.w	r3, r3, #4
 800465c:	6313      	str	r3, [r2, #48]	; 0x30
 800465e:	4b8e      	ldr	r3, [pc, #568]	; (8004898 <HAL_TIM_Base_MspInit+0x2c0>)
 8004660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004662:	f003 0304 	and.w	r3, r3, #4
 8004666:	633b      	str	r3, [r7, #48]	; 0x30
 8004668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800466a:	2300      	movs	r3, #0
 800466c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800466e:	4b8a      	ldr	r3, [pc, #552]	; (8004898 <HAL_TIM_Base_MspInit+0x2c0>)
 8004670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004672:	4a89      	ldr	r2, [pc, #548]	; (8004898 <HAL_TIM_Base_MspInit+0x2c0>)
 8004674:	f043 0302 	orr.w	r3, r3, #2
 8004678:	6313      	str	r3, [r2, #48]	; 0x30
 800467a:	4b87      	ldr	r3, [pc, #540]	; (8004898 <HAL_TIM_Base_MspInit+0x2c0>)
 800467c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467e:	f003 0302 	and.w	r3, r3, #2
 8004682:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004686:	2380      	movs	r3, #128	; 0x80
 8004688:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800468a:	2302      	movs	r3, #2
 800468c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800468e:	2300      	movs	r3, #0
 8004690:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004692:	2300      	movs	r3, #0
 8004694:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004696:	2302      	movs	r3, #2
 8004698:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800469a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800469e:	4619      	mov	r1, r3
 80046a0:	487f      	ldr	r0, [pc, #508]	; (80048a0 <HAL_TIM_Base_MspInit+0x2c8>)
 80046a2:	f001 f899 	bl	80057d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80046a6:	2310      	movs	r3, #16
 80046a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046aa:	2302      	movs	r3, #2
 80046ac:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ae:	2300      	movs	r3, #0
 80046b0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046b2:	2300      	movs	r3, #0
 80046b4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80046b6:	2302      	movs	r3, #2
 80046b8:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046ba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80046be:	4619      	mov	r1, r3
 80046c0:	4878      	ldr	r0, [pc, #480]	; (80048a4 <HAL_TIM_Base_MspInit+0x2cc>)
 80046c2:	f001 f889 	bl	80057d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80046c6:	2200      	movs	r2, #0
 80046c8:	2100      	movs	r1, #0
 80046ca:	201d      	movs	r0, #29
 80046cc:	f000 fcdf 	bl	800508e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80046d0:	201d      	movs	r0, #29
 80046d2:	f000 fcf8 	bl	80050c6 <HAL_NVIC_EnableIRQ>
}
 80046d6:	e112      	b.n	80048fe <HAL_TIM_Base_MspInit+0x326>
  else if(htim_base->Instance==TIM4)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a72      	ldr	r2, [pc, #456]	; (80048a8 <HAL_TIM_Base_MspInit+0x2d0>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d135      	bne.n	800474e <HAL_TIM_Base_MspInit+0x176>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80046e2:	2300      	movs	r3, #0
 80046e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80046e6:	4b6c      	ldr	r3, [pc, #432]	; (8004898 <HAL_TIM_Base_MspInit+0x2c0>)
 80046e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ea:	4a6b      	ldr	r2, [pc, #428]	; (8004898 <HAL_TIM_Base_MspInit+0x2c0>)
 80046ec:	f043 0304 	orr.w	r3, r3, #4
 80046f0:	6413      	str	r3, [r2, #64]	; 0x40
 80046f2:	4b69      	ldr	r3, [pc, #420]	; (8004898 <HAL_TIM_Base_MspInit+0x2c0>)
 80046f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f6:	f003 0304 	and.w	r3, r3, #4
 80046fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80046fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80046fe:	2300      	movs	r3, #0
 8004700:	627b      	str	r3, [r7, #36]	; 0x24
 8004702:	4b65      	ldr	r3, [pc, #404]	; (8004898 <HAL_TIM_Base_MspInit+0x2c0>)
 8004704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004706:	4a64      	ldr	r2, [pc, #400]	; (8004898 <HAL_TIM_Base_MspInit+0x2c0>)
 8004708:	f043 0308 	orr.w	r3, r3, #8
 800470c:	6313      	str	r3, [r2, #48]	; 0x30
 800470e:	4b62      	ldr	r3, [pc, #392]	; (8004898 <HAL_TIM_Base_MspInit+0x2c0>)
 8004710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004712:	f003 0308 	and.w	r3, r3, #8
 8004716:	627b      	str	r3, [r7, #36]	; 0x24
 8004718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800471a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800471e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004720:	2302      	movs	r3, #2
 8004722:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004724:	2300      	movs	r3, #0
 8004726:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004728:	2300      	movs	r3, #0
 800472a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800472c:	2302      	movs	r3, #2
 800472e:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004730:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004734:	4619      	mov	r1, r3
 8004736:	485d      	ldr	r0, [pc, #372]	; (80048ac <HAL_TIM_Base_MspInit+0x2d4>)
 8004738:	f001 f84e 	bl	80057d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800473c:	2200      	movs	r2, #0
 800473e:	2100      	movs	r1, #0
 8004740:	201e      	movs	r0, #30
 8004742:	f000 fca4 	bl	800508e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004746:	201e      	movs	r0, #30
 8004748:	f000 fcbd 	bl	80050c6 <HAL_NVIC_EnableIRQ>
}
 800474c:	e0d7      	b.n	80048fe <HAL_TIM_Base_MspInit+0x326>
  else if(htim_base->Instance==TIM5)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a57      	ldr	r2, [pc, #348]	; (80048b0 <HAL_TIM_Base_MspInit+0x2d8>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d134      	bne.n	80047c2 <HAL_TIM_Base_MspInit+0x1ea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004758:	2300      	movs	r3, #0
 800475a:	623b      	str	r3, [r7, #32]
 800475c:	4b4e      	ldr	r3, [pc, #312]	; (8004898 <HAL_TIM_Base_MspInit+0x2c0>)
 800475e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004760:	4a4d      	ldr	r2, [pc, #308]	; (8004898 <HAL_TIM_Base_MspInit+0x2c0>)
 8004762:	f043 0308 	orr.w	r3, r3, #8
 8004766:	6413      	str	r3, [r2, #64]	; 0x40
 8004768:	4b4b      	ldr	r3, [pc, #300]	; (8004898 <HAL_TIM_Base_MspInit+0x2c0>)
 800476a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476c:	f003 0308 	and.w	r3, r3, #8
 8004770:	623b      	str	r3, [r7, #32]
 8004772:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004774:	2300      	movs	r3, #0
 8004776:	61fb      	str	r3, [r7, #28]
 8004778:	4b47      	ldr	r3, [pc, #284]	; (8004898 <HAL_TIM_Base_MspInit+0x2c0>)
 800477a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477c:	4a46      	ldr	r2, [pc, #280]	; (8004898 <HAL_TIM_Base_MspInit+0x2c0>)
 800477e:	f043 0301 	orr.w	r3, r3, #1
 8004782:	6313      	str	r3, [r2, #48]	; 0x30
 8004784:	4b44      	ldr	r3, [pc, #272]	; (8004898 <HAL_TIM_Base_MspInit+0x2c0>)
 8004786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004788:	f003 0301 	and.w	r3, r3, #1
 800478c:	61fb      	str	r3, [r7, #28]
 800478e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004790:	2301      	movs	r3, #1
 8004792:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004794:	2302      	movs	r3, #2
 8004796:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004798:	2300      	movs	r3, #0
 800479a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800479c:	2300      	movs	r3, #0
 800479e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80047a0:	2302      	movs	r3, #2
 80047a2:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80047a8:	4619      	mov	r1, r3
 80047aa:	4842      	ldr	r0, [pc, #264]	; (80048b4 <HAL_TIM_Base_MspInit+0x2dc>)
 80047ac:	f001 f814 	bl	80057d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80047b0:	2200      	movs	r2, #0
 80047b2:	2100      	movs	r1, #0
 80047b4:	2032      	movs	r0, #50	; 0x32
 80047b6:	f000 fc6a 	bl	800508e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80047ba:	2032      	movs	r0, #50	; 0x32
 80047bc:	f000 fc83 	bl	80050c6 <HAL_NVIC_EnableIRQ>
}
 80047c0:	e09d      	b.n	80048fe <HAL_TIM_Base_MspInit+0x326>
  else if(htim_base->Instance==TIM6)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a3c      	ldr	r2, [pc, #240]	; (80048b8 <HAL_TIM_Base_MspInit+0x2e0>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d10e      	bne.n	80047ea <HAL_TIM_Base_MspInit+0x212>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80047cc:	2300      	movs	r3, #0
 80047ce:	61bb      	str	r3, [r7, #24]
 80047d0:	4b31      	ldr	r3, [pc, #196]	; (8004898 <HAL_TIM_Base_MspInit+0x2c0>)
 80047d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d4:	4a30      	ldr	r2, [pc, #192]	; (8004898 <HAL_TIM_Base_MspInit+0x2c0>)
 80047d6:	f043 0310 	orr.w	r3, r3, #16
 80047da:	6413      	str	r3, [r2, #64]	; 0x40
 80047dc:	4b2e      	ldr	r3, [pc, #184]	; (8004898 <HAL_TIM_Base_MspInit+0x2c0>)
 80047de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e0:	f003 0310 	and.w	r3, r3, #16
 80047e4:	61bb      	str	r3, [r7, #24]
 80047e6:	69bb      	ldr	r3, [r7, #24]
}
 80047e8:	e089      	b.n	80048fe <HAL_TIM_Base_MspInit+0x326>
  else if(htim_base->Instance==TIM7)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a33      	ldr	r2, [pc, #204]	; (80048bc <HAL_TIM_Base_MspInit+0x2e4>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d116      	bne.n	8004822 <HAL_TIM_Base_MspInit+0x24a>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80047f4:	2300      	movs	r3, #0
 80047f6:	617b      	str	r3, [r7, #20]
 80047f8:	4b27      	ldr	r3, [pc, #156]	; (8004898 <HAL_TIM_Base_MspInit+0x2c0>)
 80047fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fc:	4a26      	ldr	r2, [pc, #152]	; (8004898 <HAL_TIM_Base_MspInit+0x2c0>)
 80047fe:	f043 0320 	orr.w	r3, r3, #32
 8004802:	6413      	str	r3, [r2, #64]	; 0x40
 8004804:	4b24      	ldr	r3, [pc, #144]	; (8004898 <HAL_TIM_Base_MspInit+0x2c0>)
 8004806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004808:	f003 0320 	and.w	r3, r3, #32
 800480c:	617b      	str	r3, [r7, #20]
 800480e:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 8004810:	2200      	movs	r2, #0
 8004812:	2101      	movs	r1, #1
 8004814:	2037      	movs	r0, #55	; 0x37
 8004816:	f000 fc3a 	bl	800508e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800481a:	2037      	movs	r0, #55	; 0x37
 800481c:	f000 fc53 	bl	80050c6 <HAL_NVIC_EnableIRQ>
}
 8004820:	e06d      	b.n	80048fe <HAL_TIM_Base_MspInit+0x326>
  else if(htim_base->Instance==TIM9)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a26      	ldr	r2, [pc, #152]	; (80048c0 <HAL_TIM_Base_MspInit+0x2e8>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d14d      	bne.n	80048c8 <HAL_TIM_Base_MspInit+0x2f0>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800482c:	2300      	movs	r3, #0
 800482e:	613b      	str	r3, [r7, #16]
 8004830:	4b19      	ldr	r3, [pc, #100]	; (8004898 <HAL_TIM_Base_MspInit+0x2c0>)
 8004832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004834:	4a18      	ldr	r2, [pc, #96]	; (8004898 <HAL_TIM_Base_MspInit+0x2c0>)
 8004836:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800483a:	6453      	str	r3, [r2, #68]	; 0x44
 800483c:	4b16      	ldr	r3, [pc, #88]	; (8004898 <HAL_TIM_Base_MspInit+0x2c0>)
 800483e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004840:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004844:	613b      	str	r3, [r7, #16]
 8004846:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004848:	2300      	movs	r3, #0
 800484a:	60fb      	str	r3, [r7, #12]
 800484c:	4b12      	ldr	r3, [pc, #72]	; (8004898 <HAL_TIM_Base_MspInit+0x2c0>)
 800484e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004850:	4a11      	ldr	r2, [pc, #68]	; (8004898 <HAL_TIM_Base_MspInit+0x2c0>)
 8004852:	f043 0310 	orr.w	r3, r3, #16
 8004856:	6313      	str	r3, [r2, #48]	; 0x30
 8004858:	4b0f      	ldr	r3, [pc, #60]	; (8004898 <HAL_TIM_Base_MspInit+0x2c0>)
 800485a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485c:	f003 0310 	and.w	r3, r3, #16
 8004860:	60fb      	str	r3, [r7, #12]
 8004862:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004864:	2340      	movs	r3, #64	; 0x40
 8004866:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004868:	2302      	movs	r3, #2
 800486a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800486c:	2300      	movs	r3, #0
 800486e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004870:	2300      	movs	r3, #0
 8004872:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8004874:	2303      	movs	r3, #3
 8004876:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004878:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800487c:	4619      	mov	r1, r3
 800487e:	4811      	ldr	r0, [pc, #68]	; (80048c4 <HAL_TIM_Base_MspInit+0x2ec>)
 8004880:	f000 ffaa 	bl	80057d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8004884:	2200      	movs	r2, #0
 8004886:	2100      	movs	r1, #0
 8004888:	2018      	movs	r0, #24
 800488a:	f000 fc00 	bl	800508e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800488e:	2018      	movs	r0, #24
 8004890:	f000 fc19 	bl	80050c6 <HAL_NVIC_EnableIRQ>
}
 8004894:	e033      	b.n	80048fe <HAL_TIM_Base_MspInit+0x326>
 8004896:	bf00      	nop
 8004898:	40023800 	.word	0x40023800
 800489c:	40000400 	.word	0x40000400
 80048a0:	40020800 	.word	0x40020800
 80048a4:	40020400 	.word	0x40020400
 80048a8:	40000800 	.word	0x40000800
 80048ac:	40020c00 	.word	0x40020c00
 80048b0:	40000c00 	.word	0x40000c00
 80048b4:	40020000 	.word	0x40020000
 80048b8:	40001000 	.word	0x40001000
 80048bc:	40001400 	.word	0x40001400
 80048c0:	40014000 	.word	0x40014000
 80048c4:	40021000 	.word	0x40021000
  else if(htim_base->Instance==TIM10)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a0e      	ldr	r2, [pc, #56]	; (8004908 <HAL_TIM_Base_MspInit+0x330>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d115      	bne.n	80048fe <HAL_TIM_Base_MspInit+0x326>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80048d2:	2300      	movs	r3, #0
 80048d4:	60bb      	str	r3, [r7, #8]
 80048d6:	4b0d      	ldr	r3, [pc, #52]	; (800490c <HAL_TIM_Base_MspInit+0x334>)
 80048d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048da:	4a0c      	ldr	r2, [pc, #48]	; (800490c <HAL_TIM_Base_MspInit+0x334>)
 80048dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048e0:	6453      	str	r3, [r2, #68]	; 0x44
 80048e2:	4b0a      	ldr	r3, [pc, #40]	; (800490c <HAL_TIM_Base_MspInit+0x334>)
 80048e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ea:	60bb      	str	r3, [r7, #8]
 80048ec:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 2, 0);
 80048ee:	2200      	movs	r2, #0
 80048f0:	2102      	movs	r1, #2
 80048f2:	2019      	movs	r0, #25
 80048f4:	f000 fbcb 	bl	800508e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80048f8:	2019      	movs	r0, #25
 80048fa:	f000 fbe4 	bl	80050c6 <HAL_NVIC_EnableIRQ>
}
 80048fe:	bf00      	nop
 8004900:	3750      	adds	r7, #80	; 0x50
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	40014400 	.word	0x40014400
 800490c:	40023800 	.word	0x40023800

08004910 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b088      	sub	sp, #32
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004918:	f107 030c 	add.w	r3, r7, #12
 800491c:	2200      	movs	r2, #0
 800491e:	601a      	str	r2, [r3, #0]
 8004920:	605a      	str	r2, [r3, #4]
 8004922:	609a      	str	r2, [r3, #8]
 8004924:	60da      	str	r2, [r3, #12]
 8004926:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004930:	d11e      	bne.n	8004970 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004932:	2300      	movs	r3, #0
 8004934:	60bb      	str	r3, [r7, #8]
 8004936:	4b10      	ldr	r3, [pc, #64]	; (8004978 <HAL_TIM_MspPostInit+0x68>)
 8004938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493a:	4a0f      	ldr	r2, [pc, #60]	; (8004978 <HAL_TIM_MspPostInit+0x68>)
 800493c:	f043 0301 	orr.w	r3, r3, #1
 8004940:	6313      	str	r3, [r2, #48]	; 0x30
 8004942:	4b0d      	ldr	r3, [pc, #52]	; (8004978 <HAL_TIM_MspPostInit+0x68>)
 8004944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	60bb      	str	r3, [r7, #8]
 800494c:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 800494e:	f248 030e 	movw	r3, #32782	; 0x800e
 8004952:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004954:	2302      	movs	r3, #2
 8004956:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004958:	2300      	movs	r3, #0
 800495a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800495c:	2300      	movs	r3, #0
 800495e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004960:	2301      	movs	r3, #1
 8004962:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004964:	f107 030c 	add.w	r3, r7, #12
 8004968:	4619      	mov	r1, r3
 800496a:	4804      	ldr	r0, [pc, #16]	; (800497c <HAL_TIM_MspPostInit+0x6c>)
 800496c:	f000 ff34 	bl	80057d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004970:	bf00      	nop
 8004972:	3720      	adds	r7, #32
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	40023800 	.word	0x40023800
 800497c:	40020000 	.word	0x40020000

08004980 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b08e      	sub	sp, #56	; 0x38
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004988:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800498c:	2200      	movs	r2, #0
 800498e:	601a      	str	r2, [r3, #0]
 8004990:	605a      	str	r2, [r3, #4]
 8004992:	609a      	str	r2, [r3, #8]
 8004994:	60da      	str	r2, [r3, #12]
 8004996:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a7b      	ldr	r2, [pc, #492]	; (8004b8c <HAL_UART_MspInit+0x20c>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d12d      	bne.n	80049fe <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80049a2:	2300      	movs	r3, #0
 80049a4:	623b      	str	r3, [r7, #32]
 80049a6:	4b7a      	ldr	r3, [pc, #488]	; (8004b90 <HAL_UART_MspInit+0x210>)
 80049a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049aa:	4a79      	ldr	r2, [pc, #484]	; (8004b90 <HAL_UART_MspInit+0x210>)
 80049ac:	f043 0310 	orr.w	r3, r3, #16
 80049b0:	6453      	str	r3, [r2, #68]	; 0x44
 80049b2:	4b77      	ldr	r3, [pc, #476]	; (8004b90 <HAL_UART_MspInit+0x210>)
 80049b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049b6:	f003 0310 	and.w	r3, r3, #16
 80049ba:	623b      	str	r3, [r7, #32]
 80049bc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049be:	2300      	movs	r3, #0
 80049c0:	61fb      	str	r3, [r7, #28]
 80049c2:	4b73      	ldr	r3, [pc, #460]	; (8004b90 <HAL_UART_MspInit+0x210>)
 80049c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c6:	4a72      	ldr	r2, [pc, #456]	; (8004b90 <HAL_UART_MspInit+0x210>)
 80049c8:	f043 0301 	orr.w	r3, r3, #1
 80049cc:	6313      	str	r3, [r2, #48]	; 0x30
 80049ce:	4b70      	ldr	r3, [pc, #448]	; (8004b90 <HAL_UART_MspInit+0x210>)
 80049d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	61fb      	str	r3, [r7, #28]
 80049d8:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80049da:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80049de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049e0:	2302      	movs	r3, #2
 80049e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049e4:	2300      	movs	r3, #0
 80049e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049e8:	2303      	movs	r3, #3
 80049ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80049ec:	2307      	movs	r3, #7
 80049ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049f4:	4619      	mov	r1, r3
 80049f6:	4867      	ldr	r0, [pc, #412]	; (8004b94 <HAL_UART_MspInit+0x214>)
 80049f8:	f000 feee 	bl	80057d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80049fc:	e0c1      	b.n	8004b82 <HAL_UART_MspInit+0x202>
  else if(huart->Instance==USART2)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a65      	ldr	r2, [pc, #404]	; (8004b98 <HAL_UART_MspInit+0x218>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d15b      	bne.n	8004ac0 <HAL_UART_MspInit+0x140>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004a08:	2300      	movs	r3, #0
 8004a0a:	61bb      	str	r3, [r7, #24]
 8004a0c:	4b60      	ldr	r3, [pc, #384]	; (8004b90 <HAL_UART_MspInit+0x210>)
 8004a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a10:	4a5f      	ldr	r2, [pc, #380]	; (8004b90 <HAL_UART_MspInit+0x210>)
 8004a12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a16:	6413      	str	r3, [r2, #64]	; 0x40
 8004a18:	4b5d      	ldr	r3, [pc, #372]	; (8004b90 <HAL_UART_MspInit+0x210>)
 8004a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a20:	61bb      	str	r3, [r7, #24]
 8004a22:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004a24:	2300      	movs	r3, #0
 8004a26:	617b      	str	r3, [r7, #20]
 8004a28:	4b59      	ldr	r3, [pc, #356]	; (8004b90 <HAL_UART_MspInit+0x210>)
 8004a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2c:	4a58      	ldr	r2, [pc, #352]	; (8004b90 <HAL_UART_MspInit+0x210>)
 8004a2e:	f043 0308 	orr.w	r3, r3, #8
 8004a32:	6313      	str	r3, [r2, #48]	; 0x30
 8004a34:	4b56      	ldr	r3, [pc, #344]	; (8004b90 <HAL_UART_MspInit+0x210>)
 8004a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a38:	f003 0308 	and.w	r3, r3, #8
 8004a3c:	617b      	str	r3, [r7, #20]
 8004a3e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8004a40:	2360      	movs	r3, #96	; 0x60
 8004a42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a44:	2302      	movs	r3, #2
 8004a46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004a50:	2307      	movs	r3, #7
 8004a52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004a54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a58:	4619      	mov	r1, r3
 8004a5a:	4850      	ldr	r0, [pc, #320]	; (8004b9c <HAL_UART_MspInit+0x21c>)
 8004a5c:	f000 febc 	bl	80057d8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004a60:	4b4f      	ldr	r3, [pc, #316]	; (8004ba0 <HAL_UART_MspInit+0x220>)
 8004a62:	4a50      	ldr	r2, [pc, #320]	; (8004ba4 <HAL_UART_MspInit+0x224>)
 8004a64:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8004a66:	4b4e      	ldr	r3, [pc, #312]	; (8004ba0 <HAL_UART_MspInit+0x220>)
 8004a68:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004a6c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004a6e:	4b4c      	ldr	r3, [pc, #304]	; (8004ba0 <HAL_UART_MspInit+0x220>)
 8004a70:	2200      	movs	r2, #0
 8004a72:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a74:	4b4a      	ldr	r3, [pc, #296]	; (8004ba0 <HAL_UART_MspInit+0x220>)
 8004a76:	2200      	movs	r2, #0
 8004a78:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004a7a:	4b49      	ldr	r3, [pc, #292]	; (8004ba0 <HAL_UART_MspInit+0x220>)
 8004a7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a80:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a82:	4b47      	ldr	r3, [pc, #284]	; (8004ba0 <HAL_UART_MspInit+0x220>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a88:	4b45      	ldr	r3, [pc, #276]	; (8004ba0 <HAL_UART_MspInit+0x220>)
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8004a8e:	4b44      	ldr	r3, [pc, #272]	; (8004ba0 <HAL_UART_MspInit+0x220>)
 8004a90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a94:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004a96:	4b42      	ldr	r3, [pc, #264]	; (8004ba0 <HAL_UART_MspInit+0x220>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004a9c:	4b40      	ldr	r3, [pc, #256]	; (8004ba0 <HAL_UART_MspInit+0x220>)
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004aa2:	483f      	ldr	r0, [pc, #252]	; (8004ba0 <HAL_UART_MspInit+0x220>)
 8004aa4:	f000 fb2a 	bl	80050fc <HAL_DMA_Init>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d001      	beq.n	8004ab2 <HAL_UART_MspInit+0x132>
      Error_Handler();
 8004aae:	f7fe ff39 	bl	8003924 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a3a      	ldr	r2, [pc, #232]	; (8004ba0 <HAL_UART_MspInit+0x220>)
 8004ab6:	635a      	str	r2, [r3, #52]	; 0x34
 8004ab8:	4a39      	ldr	r2, [pc, #228]	; (8004ba0 <HAL_UART_MspInit+0x220>)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6393      	str	r3, [r2, #56]	; 0x38
}
 8004abe:	e060      	b.n	8004b82 <HAL_UART_MspInit+0x202>
  else if(huart->Instance==USART3)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a38      	ldr	r2, [pc, #224]	; (8004ba8 <HAL_UART_MspInit+0x228>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d15b      	bne.n	8004b82 <HAL_UART_MspInit+0x202>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004aca:	2300      	movs	r3, #0
 8004acc:	613b      	str	r3, [r7, #16]
 8004ace:	4b30      	ldr	r3, [pc, #192]	; (8004b90 <HAL_UART_MspInit+0x210>)
 8004ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad2:	4a2f      	ldr	r2, [pc, #188]	; (8004b90 <HAL_UART_MspInit+0x210>)
 8004ad4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8004ada:	4b2d      	ldr	r3, [pc, #180]	; (8004b90 <HAL_UART_MspInit+0x210>)
 8004adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ade:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ae2:	613b      	str	r3, [r7, #16]
 8004ae4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	60fb      	str	r3, [r7, #12]
 8004aea:	4b29      	ldr	r3, [pc, #164]	; (8004b90 <HAL_UART_MspInit+0x210>)
 8004aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aee:	4a28      	ldr	r2, [pc, #160]	; (8004b90 <HAL_UART_MspInit+0x210>)
 8004af0:	f043 0304 	orr.w	r3, r3, #4
 8004af4:	6313      	str	r3, [r2, #48]	; 0x30
 8004af6:	4b26      	ldr	r3, [pc, #152]	; (8004b90 <HAL_UART_MspInit+0x210>)
 8004af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004afa:	f003 0304 	and.w	r3, r3, #4
 8004afe:	60fb      	str	r3, [r7, #12]
 8004b00:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004b02:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004b06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b08:	2302      	movs	r3, #2
 8004b0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b10:	2303      	movs	r3, #3
 8004b12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004b14:	2307      	movs	r3, #7
 8004b16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	4823      	ldr	r0, [pc, #140]	; (8004bac <HAL_UART_MspInit+0x22c>)
 8004b20:	f000 fe5a 	bl	80057d8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8004b24:	4b22      	ldr	r3, [pc, #136]	; (8004bb0 <HAL_UART_MspInit+0x230>)
 8004b26:	4a23      	ldr	r2, [pc, #140]	; (8004bb4 <HAL_UART_MspInit+0x234>)
 8004b28:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8004b2a:	4b21      	ldr	r3, [pc, #132]	; (8004bb0 <HAL_UART_MspInit+0x230>)
 8004b2c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004b30:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004b32:	4b1f      	ldr	r3, [pc, #124]	; (8004bb0 <HAL_UART_MspInit+0x230>)
 8004b34:	2200      	movs	r2, #0
 8004b36:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b38:	4b1d      	ldr	r3, [pc, #116]	; (8004bb0 <HAL_UART_MspInit+0x230>)
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004b3e:	4b1c      	ldr	r3, [pc, #112]	; (8004bb0 <HAL_UART_MspInit+0x230>)
 8004b40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004b44:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004b46:	4b1a      	ldr	r3, [pc, #104]	; (8004bb0 <HAL_UART_MspInit+0x230>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004b4c:	4b18      	ldr	r3, [pc, #96]	; (8004bb0 <HAL_UART_MspInit+0x230>)
 8004b4e:	2200      	movs	r2, #0
 8004b50:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8004b52:	4b17      	ldr	r3, [pc, #92]	; (8004bb0 <HAL_UART_MspInit+0x230>)
 8004b54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b58:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004b5a:	4b15      	ldr	r3, [pc, #84]	; (8004bb0 <HAL_UART_MspInit+0x230>)
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004b60:	4b13      	ldr	r3, [pc, #76]	; (8004bb0 <HAL_UART_MspInit+0x230>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004b66:	4812      	ldr	r0, [pc, #72]	; (8004bb0 <HAL_UART_MspInit+0x230>)
 8004b68:	f000 fac8 	bl	80050fc <HAL_DMA_Init>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d001      	beq.n	8004b76 <HAL_UART_MspInit+0x1f6>
      Error_Handler();
 8004b72:	f7fe fed7 	bl	8003924 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a0d      	ldr	r2, [pc, #52]	; (8004bb0 <HAL_UART_MspInit+0x230>)
 8004b7a:	635a      	str	r2, [r3, #52]	; 0x34
 8004b7c:	4a0c      	ldr	r2, [pc, #48]	; (8004bb0 <HAL_UART_MspInit+0x230>)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6393      	str	r3, [r2, #56]	; 0x38
}
 8004b82:	bf00      	nop
 8004b84:	3738      	adds	r7, #56	; 0x38
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	40011000 	.word	0x40011000
 8004b90:	40023800 	.word	0x40023800
 8004b94:	40020000 	.word	0x40020000
 8004b98:	40004400 	.word	0x40004400
 8004b9c:	40020c00 	.word	0x40020c00
 8004ba0:	20000250 	.word	0x20000250
 8004ba4:	40026088 	.word	0x40026088
 8004ba8:	40004800 	.word	0x40004800
 8004bac:	40020800 	.word	0x40020800
 8004bb0:	20000344 	.word	0x20000344
 8004bb4:	40026028 	.word	0x40026028

08004bb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004bbc:	bf00      	nop
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr

08004bc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004bc6:	b480      	push	{r7}
 8004bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004bca:	e7fe      	b.n	8004bca <HardFault_Handler+0x4>

08004bcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004bd0:	e7fe      	b.n	8004bd0 <MemManage_Handler+0x4>

08004bd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004bd6:	e7fe      	b.n	8004bd6 <BusFault_Handler+0x4>

08004bd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004bdc:	e7fe      	b.n	8004bdc <UsageFault_Handler+0x4>

08004bde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004bde:	b480      	push	{r7}
 8004be0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004be2:	bf00      	nop
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004bec:	b480      	push	{r7}
 8004bee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004bf0:	bf00      	nop
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr

08004bfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004bfe:	bf00      	nop
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	HAL_IncTick();
 8004c0c:	f000 f922 	bl	8004e54 <HAL_IncTick>
  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004c10:	bf00      	nop
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8004c18:	2008      	movs	r0, #8
 8004c1a:	f000 ff77 	bl	8005b0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8004c1e:	bf00      	nop
 8004c20:	bd80      	pop	{r7, pc}
	...

08004c24 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004c28:	4802      	ldr	r0, [pc, #8]	; (8004c34 <DMA1_Stream1_IRQHandler+0x10>)
 8004c2a:	f000 fb6d 	bl	8005308 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004c2e:	bf00      	nop
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	20000344 	.word	0x20000344

08004c38 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004c3c:	4802      	ldr	r0, [pc, #8]	; (8004c48 <DMA1_Stream5_IRQHandler+0x10>)
 8004c3e:	f000 fb63 	bl	8005308 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004c42:	bf00      	nop
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	20000250 	.word	0x20000250

08004c4c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8004c50:	4802      	ldr	r0, [pc, #8]	; (8004c5c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8004c52:	f002 fd33 	bl	80076bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8004c56:	bf00      	nop
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	20000b80 	.word	0x20000b80

08004c60 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8004c64:	4802      	ldr	r0, [pc, #8]	; (8004c70 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004c66:	f002 fd29 	bl	80076bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004c6a:	bf00      	nop
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	20000458 	.word	0x20000458

08004c74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004c78:	4802      	ldr	r0, [pc, #8]	; (8004c84 <TIM2_IRQHandler+0x10>)
 8004c7a:	f002 fd1f 	bl	80076bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004c7e:	bf00      	nop
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	20000be8 	.word	0x20000be8

08004c88 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004c8c:	4802      	ldr	r0, [pc, #8]	; (8004c98 <TIM3_IRQHandler+0x10>)
 8004c8e:	f002 fd15 	bl	80076bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004c92:	bf00      	nop
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	2000072c 	.word	0x2000072c

08004c9c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004ca0:	4802      	ldr	r0, [pc, #8]	; (8004cac <TIM4_IRQHandler+0x10>)
 8004ca2:	f002 fd0b 	bl	80076bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004ca6:	bf00      	nop
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	20000304 	.word	0x20000304

08004cb0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004cb4:	4802      	ldr	r0, [pc, #8]	; (8004cc0 <TIM5_IRQHandler+0x10>)
 8004cb6:	f002 fd01 	bl	80076bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004cba:	bf00      	nop
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	200006d0 	.word	0x200006d0

08004cc4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004cc8:	4802      	ldr	r0, [pc, #8]	; (8004cd4 <TIM7_IRQHandler+0x10>)
 8004cca:	f002 fcf7 	bl	80076bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004cce:	bf00      	nop
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	20000cc8 	.word	0x20000cc8

08004cd8 <_sbrk>:
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	4b11      	ldr	r3, [pc, #68]	; (8004d28 <_sbrk+0x50>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d102      	bne.n	8004cee <_sbrk+0x16>
 8004ce8:	4b0f      	ldr	r3, [pc, #60]	; (8004d28 <_sbrk+0x50>)
 8004cea:	4a10      	ldr	r2, [pc, #64]	; (8004d2c <_sbrk+0x54>)
 8004cec:	601a      	str	r2, [r3, #0]
 8004cee:	4b0e      	ldr	r3, [pc, #56]	; (8004d28 <_sbrk+0x50>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	60fb      	str	r3, [r7, #12]
 8004cf4:	4b0c      	ldr	r3, [pc, #48]	; (8004d28 <_sbrk+0x50>)
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	466a      	mov	r2, sp
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d907      	bls.n	8004d12 <_sbrk+0x3a>
 8004d02:	f004 fb29 	bl	8009358 <__errno>
 8004d06:	4602      	mov	r2, r0
 8004d08:	230c      	movs	r3, #12
 8004d0a:	6013      	str	r3, [r2, #0]
 8004d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8004d10:	e006      	b.n	8004d20 <_sbrk+0x48>
 8004d12:	4b05      	ldr	r3, [pc, #20]	; (8004d28 <_sbrk+0x50>)
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4413      	add	r3, r2
 8004d1a:	4a03      	ldr	r2, [pc, #12]	; (8004d28 <_sbrk+0x50>)
 8004d1c:	6013      	str	r3, [r2, #0]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	4618      	mov	r0, r3
 8004d22:	3710      	adds	r7, #16
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	20000214 	.word	0x20000214
 8004d2c:	20000d70 	.word	0x20000d70

08004d30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004d30:	b480      	push	{r7}
 8004d32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004d34:	4b08      	ldr	r3, [pc, #32]	; (8004d58 <SystemInit+0x28>)
 8004d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d3a:	4a07      	ldr	r2, [pc, #28]	; (8004d58 <SystemInit+0x28>)
 8004d3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004d44:	4b04      	ldr	r3, [pc, #16]	; (8004d58 <SystemInit+0x28>)
 8004d46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004d4a:	609a      	str	r2, [r3, #8]
#endif
}
 8004d4c:	bf00      	nop
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	e000ed00 	.word	0xe000ed00

08004d5c <Reset_Handler>:
 8004d5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004d94 <LoopFillZerobss+0x14>
 8004d60:	2100      	movs	r1, #0
 8004d62:	e003      	b.n	8004d6c <LoopCopyDataInit>

08004d64 <CopyDataInit>:
 8004d64:	4b0c      	ldr	r3, [pc, #48]	; (8004d98 <LoopFillZerobss+0x18>)
 8004d66:	585b      	ldr	r3, [r3, r1]
 8004d68:	5043      	str	r3, [r0, r1]
 8004d6a:	3104      	adds	r1, #4

08004d6c <LoopCopyDataInit>:
 8004d6c:	480b      	ldr	r0, [pc, #44]	; (8004d9c <LoopFillZerobss+0x1c>)
 8004d6e:	4b0c      	ldr	r3, [pc, #48]	; (8004da0 <LoopFillZerobss+0x20>)
 8004d70:	1842      	adds	r2, r0, r1
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d3f6      	bcc.n	8004d64 <CopyDataInit>
 8004d76:	4a0b      	ldr	r2, [pc, #44]	; (8004da4 <LoopFillZerobss+0x24>)
 8004d78:	e002      	b.n	8004d80 <LoopFillZerobss>

08004d7a <FillZerobss>:
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	f842 3b04 	str.w	r3, [r2], #4

08004d80 <LoopFillZerobss>:
 8004d80:	4b09      	ldr	r3, [pc, #36]	; (8004da8 <LoopFillZerobss+0x28>)
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d3f9      	bcc.n	8004d7a <FillZerobss>
 8004d86:	f7ff ffd3 	bl	8004d30 <SystemInit>
 8004d8a:	f004 faeb 	bl	8009364 <__libc_init_array>
 8004d8e:	f7fc ff4b 	bl	8001c28 <main>
 8004d92:	4770      	bx	lr
 8004d94:	20020000 	.word	0x20020000
 8004d98:	0800db40 	.word	0x0800db40
 8004d9c:	20000000 	.word	0x20000000
 8004da0:	200001e0 	.word	0x200001e0
 8004da4:	200001e0 	.word	0x200001e0
 8004da8:	20000d70 	.word	0x20000d70

08004dac <ADC_IRQHandler>:
 8004dac:	e7fe      	b.n	8004dac <ADC_IRQHandler>
	...

08004db0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004db4:	4b0e      	ldr	r3, [pc, #56]	; (8004df0 <HAL_Init+0x40>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a0d      	ldr	r2, [pc, #52]	; (8004df0 <HAL_Init+0x40>)
 8004dba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004dbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004dc0:	4b0b      	ldr	r3, [pc, #44]	; (8004df0 <HAL_Init+0x40>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a0a      	ldr	r2, [pc, #40]	; (8004df0 <HAL_Init+0x40>)
 8004dc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004dca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004dcc:	4b08      	ldr	r3, [pc, #32]	; (8004df0 <HAL_Init+0x40>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a07      	ldr	r2, [pc, #28]	; (8004df0 <HAL_Init+0x40>)
 8004dd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004dd8:	2003      	movs	r0, #3
 8004dda:	f000 f94d 	bl	8005078 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004dde:	2000      	movs	r0, #0
 8004de0:	f000 f808 	bl	8004df4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004de4:	f7ff fb30 	bl	8004448 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	40023c00 	.word	0x40023c00

08004df4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b082      	sub	sp, #8
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004dfc:	4b12      	ldr	r3, [pc, #72]	; (8004e48 <HAL_InitTick+0x54>)
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	4b12      	ldr	r3, [pc, #72]	; (8004e4c <HAL_InitTick+0x58>)
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	4619      	mov	r1, r3
 8004e06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e12:	4618      	mov	r0, r3
 8004e14:	f000 f965 	bl	80050e2 <HAL_SYSTICK_Config>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d001      	beq.n	8004e22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e00e      	b.n	8004e40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2b0f      	cmp	r3, #15
 8004e26:	d80a      	bhi.n	8004e3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004e28:	2200      	movs	r2, #0
 8004e2a:	6879      	ldr	r1, [r7, #4]
 8004e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e30:	f000 f92d 	bl	800508e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004e34:	4a06      	ldr	r2, [pc, #24]	; (8004e50 <HAL_InitTick+0x5c>)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	e000      	b.n	8004e40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3708      	adds	r7, #8
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	20000000 	.word	0x20000000
 8004e4c:	20000008 	.word	0x20000008
 8004e50:	20000004 	.word	0x20000004

08004e54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004e54:	b480      	push	{r7}
 8004e56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004e58:	4b06      	ldr	r3, [pc, #24]	; (8004e74 <HAL_IncTick+0x20>)
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	4b06      	ldr	r3, [pc, #24]	; (8004e78 <HAL_IncTick+0x24>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4413      	add	r3, r2
 8004e64:	4a04      	ldr	r2, [pc, #16]	; (8004e78 <HAL_IncTick+0x24>)
 8004e66:	6013      	str	r3, [r2, #0]
}
 8004e68:	bf00      	nop
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	20000008 	.word	0x20000008
 8004e78:	20000d68 	.word	0x20000d68

08004e7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	af00      	add	r7, sp, #0
  return uwTick;
 8004e80:	4b03      	ldr	r3, [pc, #12]	; (8004e90 <HAL_GetTick+0x14>)
 8004e82:	681b      	ldr	r3, [r3, #0]
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	20000d68 	.word	0x20000d68

08004e94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004e9c:	f7ff ffee 	bl	8004e7c <HAL_GetTick>
 8004ea0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eac:	d005      	beq.n	8004eba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004eae:	4b09      	ldr	r3, [pc, #36]	; (8004ed4 <HAL_Delay+0x40>)
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004eba:	bf00      	nop
 8004ebc:	f7ff ffde 	bl	8004e7c <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d8f7      	bhi.n	8004ebc <HAL_Delay+0x28>
  {
  }
}
 8004ecc:	bf00      	nop
 8004ece:	3710      	adds	r7, #16
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	20000008 	.word	0x20000008

08004ed8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f003 0307 	and.w	r3, r3, #7
 8004ee6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ee8:	4b0c      	ldr	r3, [pc, #48]	; (8004f1c <__NVIC_SetPriorityGrouping+0x44>)
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004eee:	68ba      	ldr	r2, [r7, #8]
 8004ef0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004f04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f0a:	4a04      	ldr	r2, [pc, #16]	; (8004f1c <__NVIC_SetPriorityGrouping+0x44>)
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	60d3      	str	r3, [r2, #12]
}
 8004f10:	bf00      	nop
 8004f12:	3714      	adds	r7, #20
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr
 8004f1c:	e000ed00 	.word	0xe000ed00

08004f20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f20:	b480      	push	{r7}
 8004f22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f24:	4b04      	ldr	r3, [pc, #16]	; (8004f38 <__NVIC_GetPriorityGrouping+0x18>)
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	0a1b      	lsrs	r3, r3, #8
 8004f2a:	f003 0307 	and.w	r3, r3, #7
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr
 8004f38:	e000ed00 	.word	0xe000ed00

08004f3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	4603      	mov	r3, r0
 8004f44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	db0b      	blt.n	8004f66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f4e:	79fb      	ldrb	r3, [r7, #7]
 8004f50:	f003 021f 	and.w	r2, r3, #31
 8004f54:	4907      	ldr	r1, [pc, #28]	; (8004f74 <__NVIC_EnableIRQ+0x38>)
 8004f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f5a:	095b      	lsrs	r3, r3, #5
 8004f5c:	2001      	movs	r0, #1
 8004f5e:	fa00 f202 	lsl.w	r2, r0, r2
 8004f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004f66:	bf00      	nop
 8004f68:	370c      	adds	r7, #12
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop
 8004f74:	e000e100 	.word	0xe000e100

08004f78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	4603      	mov	r3, r0
 8004f80:	6039      	str	r1, [r7, #0]
 8004f82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	db0a      	blt.n	8004fa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	b2da      	uxtb	r2, r3
 8004f90:	490c      	ldr	r1, [pc, #48]	; (8004fc4 <__NVIC_SetPriority+0x4c>)
 8004f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f96:	0112      	lsls	r2, r2, #4
 8004f98:	b2d2      	uxtb	r2, r2
 8004f9a:	440b      	add	r3, r1
 8004f9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004fa0:	e00a      	b.n	8004fb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	b2da      	uxtb	r2, r3
 8004fa6:	4908      	ldr	r1, [pc, #32]	; (8004fc8 <__NVIC_SetPriority+0x50>)
 8004fa8:	79fb      	ldrb	r3, [r7, #7]
 8004faa:	f003 030f 	and.w	r3, r3, #15
 8004fae:	3b04      	subs	r3, #4
 8004fb0:	0112      	lsls	r2, r2, #4
 8004fb2:	b2d2      	uxtb	r2, r2
 8004fb4:	440b      	add	r3, r1
 8004fb6:	761a      	strb	r2, [r3, #24]
}
 8004fb8:	bf00      	nop
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr
 8004fc4:	e000e100 	.word	0xe000e100
 8004fc8:	e000ed00 	.word	0xe000ed00

08004fcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b089      	sub	sp, #36	; 0x24
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f003 0307 	and.w	r3, r3, #7
 8004fde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	f1c3 0307 	rsb	r3, r3, #7
 8004fe6:	2b04      	cmp	r3, #4
 8004fe8:	bf28      	it	cs
 8004fea:	2304      	movcs	r3, #4
 8004fec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	3304      	adds	r3, #4
 8004ff2:	2b06      	cmp	r3, #6
 8004ff4:	d902      	bls.n	8004ffc <NVIC_EncodePriority+0x30>
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	3b03      	subs	r3, #3
 8004ffa:	e000      	b.n	8004ffe <NVIC_EncodePriority+0x32>
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005000:	f04f 32ff 	mov.w	r2, #4294967295
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	fa02 f303 	lsl.w	r3, r2, r3
 800500a:	43da      	mvns	r2, r3
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	401a      	ands	r2, r3
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005014:	f04f 31ff 	mov.w	r1, #4294967295
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	fa01 f303 	lsl.w	r3, r1, r3
 800501e:	43d9      	mvns	r1, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005024:	4313      	orrs	r3, r2
         );
}
 8005026:	4618      	mov	r0, r3
 8005028:	3724      	adds	r7, #36	; 0x24
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
	...

08005034 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	3b01      	subs	r3, #1
 8005040:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005044:	d301      	bcc.n	800504a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005046:	2301      	movs	r3, #1
 8005048:	e00f      	b.n	800506a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800504a:	4a0a      	ldr	r2, [pc, #40]	; (8005074 <SysTick_Config+0x40>)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	3b01      	subs	r3, #1
 8005050:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005052:	210f      	movs	r1, #15
 8005054:	f04f 30ff 	mov.w	r0, #4294967295
 8005058:	f7ff ff8e 	bl	8004f78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800505c:	4b05      	ldr	r3, [pc, #20]	; (8005074 <SysTick_Config+0x40>)
 800505e:	2200      	movs	r2, #0
 8005060:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005062:	4b04      	ldr	r3, [pc, #16]	; (8005074 <SysTick_Config+0x40>)
 8005064:	2207      	movs	r2, #7
 8005066:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3708      	adds	r7, #8
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	e000e010 	.word	0xe000e010

08005078 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f7ff ff29 	bl	8004ed8 <__NVIC_SetPriorityGrouping>
}
 8005086:	bf00      	nop
 8005088:	3708      	adds	r7, #8
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}

0800508e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800508e:	b580      	push	{r7, lr}
 8005090:	b086      	sub	sp, #24
 8005092:	af00      	add	r7, sp, #0
 8005094:	4603      	mov	r3, r0
 8005096:	60b9      	str	r1, [r7, #8]
 8005098:	607a      	str	r2, [r7, #4]
 800509a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800509c:	2300      	movs	r3, #0
 800509e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80050a0:	f7ff ff3e 	bl	8004f20 <__NVIC_GetPriorityGrouping>
 80050a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	68b9      	ldr	r1, [r7, #8]
 80050aa:	6978      	ldr	r0, [r7, #20]
 80050ac:	f7ff ff8e 	bl	8004fcc <NVIC_EncodePriority>
 80050b0:	4602      	mov	r2, r0
 80050b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050b6:	4611      	mov	r1, r2
 80050b8:	4618      	mov	r0, r3
 80050ba:	f7ff ff5d 	bl	8004f78 <__NVIC_SetPriority>
}
 80050be:	bf00      	nop
 80050c0:	3718      	adds	r7, #24
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}

080050c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050c6:	b580      	push	{r7, lr}
 80050c8:	b082      	sub	sp, #8
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	4603      	mov	r3, r0
 80050ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80050d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050d4:	4618      	mov	r0, r3
 80050d6:	f7ff ff31 	bl	8004f3c <__NVIC_EnableIRQ>
}
 80050da:	bf00      	nop
 80050dc:	3708      	adds	r7, #8
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}

080050e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80050e2:	b580      	push	{r7, lr}
 80050e4:	b082      	sub	sp, #8
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f7ff ffa2 	bl	8005034 <SysTick_Config>
 80050f0:	4603      	mov	r3, r0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3708      	adds	r7, #8
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
	...

080050fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b086      	sub	sp, #24
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005104:	2300      	movs	r3, #0
 8005106:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005108:	f7ff feb8 	bl	8004e7c <HAL_GetTick>
 800510c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d101      	bne.n	8005118 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e099      	b.n	800524c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2202      	movs	r2, #2
 8005124:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f022 0201 	bic.w	r2, r2, #1
 8005136:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005138:	e00f      	b.n	800515a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800513a:	f7ff fe9f 	bl	8004e7c <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	2b05      	cmp	r3, #5
 8005146:	d908      	bls.n	800515a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2220      	movs	r2, #32
 800514c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2203      	movs	r2, #3
 8005152:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e078      	b.n	800524c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0301 	and.w	r3, r3, #1
 8005164:	2b00      	cmp	r3, #0
 8005166:	d1e8      	bne.n	800513a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005170:	697a      	ldr	r2, [r7, #20]
 8005172:	4b38      	ldr	r3, [pc, #224]	; (8005254 <HAL_DMA_Init+0x158>)
 8005174:	4013      	ands	r3, r2
 8005176:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685a      	ldr	r2, [r3, #4]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005186:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005192:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800519e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a1b      	ldr	r3, [r3, #32]
 80051a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b0:	2b04      	cmp	r3, #4
 80051b2:	d107      	bne.n	80051c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051bc:	4313      	orrs	r3, r2
 80051be:	697a      	ldr	r2, [r7, #20]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	697a      	ldr	r2, [r7, #20]
 80051ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	f023 0307 	bic.w	r3, r3, #7
 80051da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e0:	697a      	ldr	r2, [r7, #20]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ea:	2b04      	cmp	r3, #4
 80051ec:	d117      	bne.n	800521e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d00e      	beq.n	800521e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 fa6f 	bl	80056e4 <DMA_CheckFifoParam>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d008      	beq.n	800521e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2240      	movs	r2, #64	; 0x40
 8005210:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2201      	movs	r2, #1
 8005216:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800521a:	2301      	movs	r3, #1
 800521c:	e016      	b.n	800524c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 fa26 	bl	8005678 <DMA_CalcBaseAndBitshift>
 800522c:	4603      	mov	r3, r0
 800522e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005234:	223f      	movs	r2, #63	; 0x3f
 8005236:	409a      	lsls	r2, r3
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2201      	movs	r2, #1
 8005246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3718      	adds	r7, #24
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}
 8005254:	f010803f 	.word	0xf010803f

08005258 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b086      	sub	sp, #24
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
 8005264:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005266:	2300      	movs	r3, #0
 8005268:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800526e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005276:	2b01      	cmp	r3, #1
 8005278:	d101      	bne.n	800527e <HAL_DMA_Start_IT+0x26>
 800527a:	2302      	movs	r3, #2
 800527c:	e040      	b.n	8005300 <HAL_DMA_Start_IT+0xa8>
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2201      	movs	r2, #1
 8005282:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800528c:	b2db      	uxtb	r3, r3
 800528e:	2b01      	cmp	r3, #1
 8005290:	d12f      	bne.n	80052f2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2202      	movs	r2, #2
 8005296:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	68b9      	ldr	r1, [r7, #8]
 80052a6:	68f8      	ldr	r0, [r7, #12]
 80052a8:	f000 f9b8 	bl	800561c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052b0:	223f      	movs	r2, #63	; 0x3f
 80052b2:	409a      	lsls	r2, r3
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f042 0216 	orr.w	r2, r2, #22
 80052c6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d007      	beq.n	80052e0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f042 0208 	orr.w	r2, r2, #8
 80052de:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f042 0201 	orr.w	r2, r2, #1
 80052ee:	601a      	str	r2, [r3, #0]
 80052f0:	e005      	b.n	80052fe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80052fa:	2302      	movs	r3, #2
 80052fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80052fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005300:	4618      	mov	r0, r3
 8005302:	3718      	adds	r7, #24
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b086      	sub	sp, #24
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005310:	2300      	movs	r3, #0
 8005312:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005314:	4b92      	ldr	r3, [pc, #584]	; (8005560 <HAL_DMA_IRQHandler+0x258>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a92      	ldr	r2, [pc, #584]	; (8005564 <HAL_DMA_IRQHandler+0x25c>)
 800531a:	fba2 2303 	umull	r2, r3, r2, r3
 800531e:	0a9b      	lsrs	r3, r3, #10
 8005320:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005326:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005332:	2208      	movs	r2, #8
 8005334:	409a      	lsls	r2, r3
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	4013      	ands	r3, r2
 800533a:	2b00      	cmp	r3, #0
 800533c:	d01a      	beq.n	8005374 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0304 	and.w	r3, r3, #4
 8005348:	2b00      	cmp	r3, #0
 800534a:	d013      	beq.n	8005374 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f022 0204 	bic.w	r2, r2, #4
 800535a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005360:	2208      	movs	r2, #8
 8005362:	409a      	lsls	r2, r3
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800536c:	f043 0201 	orr.w	r2, r3, #1
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005378:	2201      	movs	r2, #1
 800537a:	409a      	lsls	r2, r3
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	4013      	ands	r3, r2
 8005380:	2b00      	cmp	r3, #0
 8005382:	d012      	beq.n	80053aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00b      	beq.n	80053aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005396:	2201      	movs	r2, #1
 8005398:	409a      	lsls	r2, r3
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053a2:	f043 0202 	orr.w	r2, r3, #2
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053ae:	2204      	movs	r2, #4
 80053b0:	409a      	lsls	r2, r3
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	4013      	ands	r3, r2
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d012      	beq.n	80053e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0302 	and.w	r3, r3, #2
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d00b      	beq.n	80053e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053cc:	2204      	movs	r2, #4
 80053ce:	409a      	lsls	r2, r3
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053d8:	f043 0204 	orr.w	r2, r3, #4
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053e4:	2210      	movs	r2, #16
 80053e6:	409a      	lsls	r2, r3
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	4013      	ands	r3, r2
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d043      	beq.n	8005478 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0308 	and.w	r3, r3, #8
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d03c      	beq.n	8005478 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005402:	2210      	movs	r2, #16
 8005404:	409a      	lsls	r2, r3
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005414:	2b00      	cmp	r3, #0
 8005416:	d018      	beq.n	800544a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d108      	bne.n	8005438 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542a:	2b00      	cmp	r3, #0
 800542c:	d024      	beq.n	8005478 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	4798      	blx	r3
 8005436:	e01f      	b.n	8005478 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800543c:	2b00      	cmp	r3, #0
 800543e:	d01b      	beq.n	8005478 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	4798      	blx	r3
 8005448:	e016      	b.n	8005478 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005454:	2b00      	cmp	r3, #0
 8005456:	d107      	bne.n	8005468 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f022 0208 	bic.w	r2, r2, #8
 8005466:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546c:	2b00      	cmp	r3, #0
 800546e:	d003      	beq.n	8005478 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800547c:	2220      	movs	r2, #32
 800547e:	409a      	lsls	r2, r3
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	4013      	ands	r3, r2
 8005484:	2b00      	cmp	r3, #0
 8005486:	f000 808e 	beq.w	80055a6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 0310 	and.w	r3, r3, #16
 8005494:	2b00      	cmp	r3, #0
 8005496:	f000 8086 	beq.w	80055a6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800549e:	2220      	movs	r2, #32
 80054a0:	409a      	lsls	r2, r3
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	2b05      	cmp	r3, #5
 80054b0:	d136      	bne.n	8005520 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f022 0216 	bic.w	r2, r2, #22
 80054c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	695a      	ldr	r2, [r3, #20]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d103      	bne.n	80054e2 <HAL_DMA_IRQHandler+0x1da>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d007      	beq.n	80054f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f022 0208 	bic.w	r2, r2, #8
 80054f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054f6:	223f      	movs	r2, #63	; 0x3f
 80054f8:	409a      	lsls	r2, r3
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2201      	movs	r2, #1
 800550a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005512:	2b00      	cmp	r3, #0
 8005514:	d07d      	beq.n	8005612 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	4798      	blx	r3
        }
        return;
 800551e:	e078      	b.n	8005612 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d01c      	beq.n	8005568 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d108      	bne.n	800554e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005540:	2b00      	cmp	r3, #0
 8005542:	d030      	beq.n	80055a6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	4798      	blx	r3
 800554c:	e02b      	b.n	80055a6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005552:	2b00      	cmp	r3, #0
 8005554:	d027      	beq.n	80055a6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	4798      	blx	r3
 800555e:	e022      	b.n	80055a6 <HAL_DMA_IRQHandler+0x29e>
 8005560:	20000000 	.word	0x20000000
 8005564:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005572:	2b00      	cmp	r3, #0
 8005574:	d10f      	bne.n	8005596 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f022 0210 	bic.w	r2, r2, #16
 8005584:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2201      	movs	r2, #1
 8005592:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800559a:	2b00      	cmp	r3, #0
 800559c:	d003      	beq.n	80055a6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d032      	beq.n	8005614 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055b2:	f003 0301 	and.w	r3, r3, #1
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d022      	beq.n	8005600 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2205      	movs	r2, #5
 80055be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f022 0201 	bic.w	r2, r2, #1
 80055d0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	3301      	adds	r3, #1
 80055d6:	60bb      	str	r3, [r7, #8]
 80055d8:	697a      	ldr	r2, [r7, #20]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d307      	bcc.n	80055ee <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 0301 	and.w	r3, r3, #1
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d1f2      	bne.n	80055d2 <HAL_DMA_IRQHandler+0x2ca>
 80055ec:	e000      	b.n	80055f0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80055ee:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005604:	2b00      	cmp	r3, #0
 8005606:	d005      	beq.n	8005614 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	4798      	blx	r3
 8005610:	e000      	b.n	8005614 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005612:	bf00      	nop
    }
  }
}
 8005614:	3718      	adds	r7, #24
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop

0800561c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800561c:	b480      	push	{r7}
 800561e:	b085      	sub	sp, #20
 8005620:	af00      	add	r7, sp, #0
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	607a      	str	r2, [r7, #4]
 8005628:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005638:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	683a      	ldr	r2, [r7, #0]
 8005640:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	2b40      	cmp	r3, #64	; 0x40
 8005648:	d108      	bne.n	800565c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	68ba      	ldr	r2, [r7, #8]
 8005658:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800565a:	e007      	b.n	800566c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68ba      	ldr	r2, [r7, #8]
 8005662:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	60da      	str	r2, [r3, #12]
}
 800566c:	bf00      	nop
 800566e:	3714      	adds	r7, #20
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005678:	b480      	push	{r7}
 800567a:	b085      	sub	sp, #20
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	b2db      	uxtb	r3, r3
 8005686:	3b10      	subs	r3, #16
 8005688:	4a14      	ldr	r2, [pc, #80]	; (80056dc <DMA_CalcBaseAndBitshift+0x64>)
 800568a:	fba2 2303 	umull	r2, r3, r2, r3
 800568e:	091b      	lsrs	r3, r3, #4
 8005690:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005692:	4a13      	ldr	r2, [pc, #76]	; (80056e0 <DMA_CalcBaseAndBitshift+0x68>)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	4413      	add	r3, r2
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	461a      	mov	r2, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2b03      	cmp	r3, #3
 80056a4:	d909      	bls.n	80056ba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80056ae:	f023 0303 	bic.w	r3, r3, #3
 80056b2:	1d1a      	adds	r2, r3, #4
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	659a      	str	r2, [r3, #88]	; 0x58
 80056b8:	e007      	b.n	80056ca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80056c2:	f023 0303 	bic.w	r3, r3, #3
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3714      	adds	r7, #20
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	aaaaaaab 	.word	0xaaaaaaab
 80056e0:	0800d6a0 	.word	0x0800d6a0

080056e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056ec:	2300      	movs	r3, #0
 80056ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	699b      	ldr	r3, [r3, #24]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d11f      	bne.n	800573e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	2b03      	cmp	r3, #3
 8005702:	d855      	bhi.n	80057b0 <DMA_CheckFifoParam+0xcc>
 8005704:	a201      	add	r2, pc, #4	; (adr r2, 800570c <DMA_CheckFifoParam+0x28>)
 8005706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800570a:	bf00      	nop
 800570c:	0800571d 	.word	0x0800571d
 8005710:	0800572f 	.word	0x0800572f
 8005714:	0800571d 	.word	0x0800571d
 8005718:	080057b1 	.word	0x080057b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005720:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005724:	2b00      	cmp	r3, #0
 8005726:	d045      	beq.n	80057b4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800572c:	e042      	b.n	80057b4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005732:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005736:	d13f      	bne.n	80057b8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800573c:	e03c      	b.n	80057b8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005746:	d121      	bne.n	800578c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	2b03      	cmp	r3, #3
 800574c:	d836      	bhi.n	80057bc <DMA_CheckFifoParam+0xd8>
 800574e:	a201      	add	r2, pc, #4	; (adr r2, 8005754 <DMA_CheckFifoParam+0x70>)
 8005750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005754:	08005765 	.word	0x08005765
 8005758:	0800576b 	.word	0x0800576b
 800575c:	08005765 	.word	0x08005765
 8005760:	0800577d 	.word	0x0800577d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	73fb      	strb	r3, [r7, #15]
      break;
 8005768:	e02f      	b.n	80057ca <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d024      	beq.n	80057c0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800577a:	e021      	b.n	80057c0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005780:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005784:	d11e      	bne.n	80057c4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800578a:	e01b      	b.n	80057c4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	2b02      	cmp	r3, #2
 8005790:	d902      	bls.n	8005798 <DMA_CheckFifoParam+0xb4>
 8005792:	2b03      	cmp	r3, #3
 8005794:	d003      	beq.n	800579e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005796:	e018      	b.n	80057ca <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	73fb      	strb	r3, [r7, #15]
      break;
 800579c:	e015      	b.n	80057ca <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d00e      	beq.n	80057c8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	73fb      	strb	r3, [r7, #15]
      break;
 80057ae:	e00b      	b.n	80057c8 <DMA_CheckFifoParam+0xe4>
      break;
 80057b0:	bf00      	nop
 80057b2:	e00a      	b.n	80057ca <DMA_CheckFifoParam+0xe6>
      break;
 80057b4:	bf00      	nop
 80057b6:	e008      	b.n	80057ca <DMA_CheckFifoParam+0xe6>
      break;
 80057b8:	bf00      	nop
 80057ba:	e006      	b.n	80057ca <DMA_CheckFifoParam+0xe6>
      break;
 80057bc:	bf00      	nop
 80057be:	e004      	b.n	80057ca <DMA_CheckFifoParam+0xe6>
      break;
 80057c0:	bf00      	nop
 80057c2:	e002      	b.n	80057ca <DMA_CheckFifoParam+0xe6>
      break;   
 80057c4:	bf00      	nop
 80057c6:	e000      	b.n	80057ca <DMA_CheckFifoParam+0xe6>
      break;
 80057c8:	bf00      	nop
    }
  } 
  
  return status; 
 80057ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3714      	adds	r7, #20
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80057d8:	b480      	push	{r7}
 80057da:	b089      	sub	sp, #36	; 0x24
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80057e2:	2300      	movs	r3, #0
 80057e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80057e6:	2300      	movs	r3, #0
 80057e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80057ea:	2300      	movs	r3, #0
 80057ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80057ee:	2300      	movs	r3, #0
 80057f0:	61fb      	str	r3, [r7, #28]
 80057f2:	e16b      	b.n	8005acc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80057f4:	2201      	movs	r2, #1
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	fa02 f303 	lsl.w	r3, r2, r3
 80057fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	697a      	ldr	r2, [r7, #20]
 8005804:	4013      	ands	r3, r2
 8005806:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005808:	693a      	ldr	r2, [r7, #16]
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	429a      	cmp	r2, r3
 800580e:	f040 815a 	bne.w	8005ac6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	2b01      	cmp	r3, #1
 8005818:	d00b      	beq.n	8005832 <HAL_GPIO_Init+0x5a>
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	2b02      	cmp	r3, #2
 8005820:	d007      	beq.n	8005832 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005826:	2b11      	cmp	r3, #17
 8005828:	d003      	beq.n	8005832 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	2b12      	cmp	r3, #18
 8005830:	d130      	bne.n	8005894 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	005b      	lsls	r3, r3, #1
 800583c:	2203      	movs	r2, #3
 800583e:	fa02 f303 	lsl.w	r3, r2, r3
 8005842:	43db      	mvns	r3, r3
 8005844:	69ba      	ldr	r2, [r7, #24]
 8005846:	4013      	ands	r3, r2
 8005848:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	68da      	ldr	r2, [r3, #12]
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	005b      	lsls	r3, r3, #1
 8005852:	fa02 f303 	lsl.w	r3, r2, r3
 8005856:	69ba      	ldr	r2, [r7, #24]
 8005858:	4313      	orrs	r3, r2
 800585a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	69ba      	ldr	r2, [r7, #24]
 8005860:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005868:	2201      	movs	r2, #1
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	fa02 f303 	lsl.w	r3, r2, r3
 8005870:	43db      	mvns	r3, r3
 8005872:	69ba      	ldr	r2, [r7, #24]
 8005874:	4013      	ands	r3, r2
 8005876:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	091b      	lsrs	r3, r3, #4
 800587e:	f003 0201 	and.w	r2, r3, #1
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	fa02 f303 	lsl.w	r3, r2, r3
 8005888:	69ba      	ldr	r2, [r7, #24]
 800588a:	4313      	orrs	r3, r2
 800588c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	69ba      	ldr	r2, [r7, #24]
 8005892:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	005b      	lsls	r3, r3, #1
 800589e:	2203      	movs	r2, #3
 80058a0:	fa02 f303 	lsl.w	r3, r2, r3
 80058a4:	43db      	mvns	r3, r3
 80058a6:	69ba      	ldr	r2, [r7, #24]
 80058a8:	4013      	ands	r3, r2
 80058aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	689a      	ldr	r2, [r3, #8]
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	005b      	lsls	r3, r3, #1
 80058b4:	fa02 f303 	lsl.w	r3, r2, r3
 80058b8:	69ba      	ldr	r2, [r7, #24]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	69ba      	ldr	r2, [r7, #24]
 80058c2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d003      	beq.n	80058d4 <HAL_GPIO_Init+0xfc>
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	2b12      	cmp	r3, #18
 80058d2:	d123      	bne.n	800591c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	08da      	lsrs	r2, r3, #3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	3208      	adds	r2, #8
 80058dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	f003 0307 	and.w	r3, r3, #7
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	220f      	movs	r2, #15
 80058ec:	fa02 f303 	lsl.w	r3, r2, r3
 80058f0:	43db      	mvns	r3, r3
 80058f2:	69ba      	ldr	r2, [r7, #24]
 80058f4:	4013      	ands	r3, r2
 80058f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	691a      	ldr	r2, [r3, #16]
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	f003 0307 	and.w	r3, r3, #7
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	fa02 f303 	lsl.w	r3, r2, r3
 8005908:	69ba      	ldr	r2, [r7, #24]
 800590a:	4313      	orrs	r3, r2
 800590c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	08da      	lsrs	r2, r3, #3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	3208      	adds	r2, #8
 8005916:	69b9      	ldr	r1, [r7, #24]
 8005918:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	005b      	lsls	r3, r3, #1
 8005926:	2203      	movs	r2, #3
 8005928:	fa02 f303 	lsl.w	r3, r2, r3
 800592c:	43db      	mvns	r3, r3
 800592e:	69ba      	ldr	r2, [r7, #24]
 8005930:	4013      	ands	r3, r2
 8005932:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	f003 0203 	and.w	r2, r3, #3
 800593c:	69fb      	ldr	r3, [r7, #28]
 800593e:	005b      	lsls	r3, r3, #1
 8005940:	fa02 f303 	lsl.w	r3, r2, r3
 8005944:	69ba      	ldr	r2, [r7, #24]
 8005946:	4313      	orrs	r3, r2
 8005948:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	69ba      	ldr	r2, [r7, #24]
 800594e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005958:	2b00      	cmp	r3, #0
 800595a:	f000 80b4 	beq.w	8005ac6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800595e:	2300      	movs	r3, #0
 8005960:	60fb      	str	r3, [r7, #12]
 8005962:	4b5f      	ldr	r3, [pc, #380]	; (8005ae0 <HAL_GPIO_Init+0x308>)
 8005964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005966:	4a5e      	ldr	r2, [pc, #376]	; (8005ae0 <HAL_GPIO_Init+0x308>)
 8005968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800596c:	6453      	str	r3, [r2, #68]	; 0x44
 800596e:	4b5c      	ldr	r3, [pc, #368]	; (8005ae0 <HAL_GPIO_Init+0x308>)
 8005970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005976:	60fb      	str	r3, [r7, #12]
 8005978:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800597a:	4a5a      	ldr	r2, [pc, #360]	; (8005ae4 <HAL_GPIO_Init+0x30c>)
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	089b      	lsrs	r3, r3, #2
 8005980:	3302      	adds	r3, #2
 8005982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005986:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	f003 0303 	and.w	r3, r3, #3
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	220f      	movs	r2, #15
 8005992:	fa02 f303 	lsl.w	r3, r2, r3
 8005996:	43db      	mvns	r3, r3
 8005998:	69ba      	ldr	r2, [r7, #24]
 800599a:	4013      	ands	r3, r2
 800599c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a51      	ldr	r2, [pc, #324]	; (8005ae8 <HAL_GPIO_Init+0x310>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d02b      	beq.n	80059fe <HAL_GPIO_Init+0x226>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a50      	ldr	r2, [pc, #320]	; (8005aec <HAL_GPIO_Init+0x314>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d025      	beq.n	80059fa <HAL_GPIO_Init+0x222>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a4f      	ldr	r2, [pc, #316]	; (8005af0 <HAL_GPIO_Init+0x318>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d01f      	beq.n	80059f6 <HAL_GPIO_Init+0x21e>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a4e      	ldr	r2, [pc, #312]	; (8005af4 <HAL_GPIO_Init+0x31c>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d019      	beq.n	80059f2 <HAL_GPIO_Init+0x21a>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a4d      	ldr	r2, [pc, #308]	; (8005af8 <HAL_GPIO_Init+0x320>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d013      	beq.n	80059ee <HAL_GPIO_Init+0x216>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a4c      	ldr	r2, [pc, #304]	; (8005afc <HAL_GPIO_Init+0x324>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d00d      	beq.n	80059ea <HAL_GPIO_Init+0x212>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a4b      	ldr	r2, [pc, #300]	; (8005b00 <HAL_GPIO_Init+0x328>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d007      	beq.n	80059e6 <HAL_GPIO_Init+0x20e>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a4a      	ldr	r2, [pc, #296]	; (8005b04 <HAL_GPIO_Init+0x32c>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d101      	bne.n	80059e2 <HAL_GPIO_Init+0x20a>
 80059de:	2307      	movs	r3, #7
 80059e0:	e00e      	b.n	8005a00 <HAL_GPIO_Init+0x228>
 80059e2:	2308      	movs	r3, #8
 80059e4:	e00c      	b.n	8005a00 <HAL_GPIO_Init+0x228>
 80059e6:	2306      	movs	r3, #6
 80059e8:	e00a      	b.n	8005a00 <HAL_GPIO_Init+0x228>
 80059ea:	2305      	movs	r3, #5
 80059ec:	e008      	b.n	8005a00 <HAL_GPIO_Init+0x228>
 80059ee:	2304      	movs	r3, #4
 80059f0:	e006      	b.n	8005a00 <HAL_GPIO_Init+0x228>
 80059f2:	2303      	movs	r3, #3
 80059f4:	e004      	b.n	8005a00 <HAL_GPIO_Init+0x228>
 80059f6:	2302      	movs	r3, #2
 80059f8:	e002      	b.n	8005a00 <HAL_GPIO_Init+0x228>
 80059fa:	2301      	movs	r3, #1
 80059fc:	e000      	b.n	8005a00 <HAL_GPIO_Init+0x228>
 80059fe:	2300      	movs	r3, #0
 8005a00:	69fa      	ldr	r2, [r7, #28]
 8005a02:	f002 0203 	and.w	r2, r2, #3
 8005a06:	0092      	lsls	r2, r2, #2
 8005a08:	4093      	lsls	r3, r2
 8005a0a:	69ba      	ldr	r2, [r7, #24]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a10:	4934      	ldr	r1, [pc, #208]	; (8005ae4 <HAL_GPIO_Init+0x30c>)
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	089b      	lsrs	r3, r3, #2
 8005a16:	3302      	adds	r3, #2
 8005a18:	69ba      	ldr	r2, [r7, #24]
 8005a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a1e:	4b3a      	ldr	r3, [pc, #232]	; (8005b08 <HAL_GPIO_Init+0x330>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	43db      	mvns	r3, r3
 8005a28:	69ba      	ldr	r2, [r7, #24]
 8005a2a:	4013      	ands	r3, r2
 8005a2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d003      	beq.n	8005a42 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005a3a:	69ba      	ldr	r2, [r7, #24]
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005a42:	4a31      	ldr	r2, [pc, #196]	; (8005b08 <HAL_GPIO_Init+0x330>)
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005a48:	4b2f      	ldr	r3, [pc, #188]	; (8005b08 <HAL_GPIO_Init+0x330>)
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	43db      	mvns	r3, r3
 8005a52:	69ba      	ldr	r2, [r7, #24]
 8005a54:	4013      	ands	r3, r2
 8005a56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d003      	beq.n	8005a6c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005a64:	69ba      	ldr	r2, [r7, #24]
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005a6c:	4a26      	ldr	r2, [pc, #152]	; (8005b08 <HAL_GPIO_Init+0x330>)
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005a72:	4b25      	ldr	r3, [pc, #148]	; (8005b08 <HAL_GPIO_Init+0x330>)
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	43db      	mvns	r3, r3
 8005a7c:	69ba      	ldr	r2, [r7, #24]
 8005a7e:	4013      	ands	r3, r2
 8005a80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d003      	beq.n	8005a96 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005a8e:	69ba      	ldr	r2, [r7, #24]
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005a96:	4a1c      	ldr	r2, [pc, #112]	; (8005b08 <HAL_GPIO_Init+0x330>)
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005a9c:	4b1a      	ldr	r3, [pc, #104]	; (8005b08 <HAL_GPIO_Init+0x330>)
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	43db      	mvns	r3, r3
 8005aa6:	69ba      	ldr	r2, [r7, #24]
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d003      	beq.n	8005ac0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005ab8:	69ba      	ldr	r2, [r7, #24]
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005ac0:	4a11      	ldr	r2, [pc, #68]	; (8005b08 <HAL_GPIO_Init+0x330>)
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	3301      	adds	r3, #1
 8005aca:	61fb      	str	r3, [r7, #28]
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	2b0f      	cmp	r3, #15
 8005ad0:	f67f ae90 	bls.w	80057f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005ad4:	bf00      	nop
 8005ad6:	3724      	adds	r7, #36	; 0x24
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr
 8005ae0:	40023800 	.word	0x40023800
 8005ae4:	40013800 	.word	0x40013800
 8005ae8:	40020000 	.word	0x40020000
 8005aec:	40020400 	.word	0x40020400
 8005af0:	40020800 	.word	0x40020800
 8005af4:	40020c00 	.word	0x40020c00
 8005af8:	40021000 	.word	0x40021000
 8005afc:	40021400 	.word	0x40021400
 8005b00:	40021800 	.word	0x40021800
 8005b04:	40021c00 	.word	0x40021c00
 8005b08:	40013c00 	.word	0x40013c00

08005b0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	4603      	mov	r3, r0
 8005b14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005b16:	4b08      	ldr	r3, [pc, #32]	; (8005b38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b18:	695a      	ldr	r2, [r3, #20]
 8005b1a:	88fb      	ldrh	r3, [r7, #6]
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d006      	beq.n	8005b30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005b22:	4a05      	ldr	r2, [pc, #20]	; (8005b38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b24:	88fb      	ldrh	r3, [r7, #6]
 8005b26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005b28:	88fb      	ldrh	r3, [r7, #6]
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f7fd feaa 	bl	8003884 <HAL_GPIO_EXTI_Callback>
  }
}
 8005b30:	bf00      	nop
 8005b32:	3708      	adds	r7, #8
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	40013c00 	.word	0x40013c00

08005b3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d101      	bne.n	8005b4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e11f      	b.n	8005d8e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d106      	bne.n	8005b68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f7fe fc98 	bl	8004498 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2224      	movs	r2, #36	; 0x24
 8005b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f022 0201 	bic.w	r2, r2, #1
 8005b7e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b8e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b9e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005ba0:	f001 fbb4 	bl	800730c <HAL_RCC_GetPCLK1Freq>
 8005ba4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	4a7b      	ldr	r2, [pc, #492]	; (8005d98 <HAL_I2C_Init+0x25c>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d807      	bhi.n	8005bc0 <HAL_I2C_Init+0x84>
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	4a7a      	ldr	r2, [pc, #488]	; (8005d9c <HAL_I2C_Init+0x260>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	bf94      	ite	ls
 8005bb8:	2301      	movls	r3, #1
 8005bba:	2300      	movhi	r3, #0
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	e006      	b.n	8005bce <HAL_I2C_Init+0x92>
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	4a77      	ldr	r2, [pc, #476]	; (8005da0 <HAL_I2C_Init+0x264>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	bf94      	ite	ls
 8005bc8:	2301      	movls	r3, #1
 8005bca:	2300      	movhi	r3, #0
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d001      	beq.n	8005bd6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e0db      	b.n	8005d8e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	4a72      	ldr	r2, [pc, #456]	; (8005da4 <HAL_I2C_Init+0x268>)
 8005bda:	fba2 2303 	umull	r2, r3, r2, r3
 8005bde:	0c9b      	lsrs	r3, r3, #18
 8005be0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68ba      	ldr	r2, [r7, #8]
 8005bf2:	430a      	orrs	r2, r1
 8005bf4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	6a1b      	ldr	r3, [r3, #32]
 8005bfc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	4a64      	ldr	r2, [pc, #400]	; (8005d98 <HAL_I2C_Init+0x25c>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d802      	bhi.n	8005c10 <HAL_I2C_Init+0xd4>
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	e009      	b.n	8005c24 <HAL_I2C_Init+0xe8>
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005c16:	fb02 f303 	mul.w	r3, r2, r3
 8005c1a:	4a63      	ldr	r2, [pc, #396]	; (8005da8 <HAL_I2C_Init+0x26c>)
 8005c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c20:	099b      	lsrs	r3, r3, #6
 8005c22:	3301      	adds	r3, #1
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	6812      	ldr	r2, [r2, #0]
 8005c28:	430b      	orrs	r3, r1
 8005c2a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	69db      	ldr	r3, [r3, #28]
 8005c32:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005c36:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	4956      	ldr	r1, [pc, #344]	; (8005d98 <HAL_I2C_Init+0x25c>)
 8005c40:	428b      	cmp	r3, r1
 8005c42:	d80d      	bhi.n	8005c60 <HAL_I2C_Init+0x124>
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	1e59      	subs	r1, r3, #1
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	005b      	lsls	r3, r3, #1
 8005c4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c52:	3301      	adds	r3, #1
 8005c54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c58:	2b04      	cmp	r3, #4
 8005c5a:	bf38      	it	cc
 8005c5c:	2304      	movcc	r3, #4
 8005c5e:	e04f      	b.n	8005d00 <HAL_I2C_Init+0x1c4>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d111      	bne.n	8005c8c <HAL_I2C_Init+0x150>
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	1e58      	subs	r0, r3, #1
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6859      	ldr	r1, [r3, #4]
 8005c70:	460b      	mov	r3, r1
 8005c72:	005b      	lsls	r3, r3, #1
 8005c74:	440b      	add	r3, r1
 8005c76:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	bf0c      	ite	eq
 8005c84:	2301      	moveq	r3, #1
 8005c86:	2300      	movne	r3, #0
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	e012      	b.n	8005cb2 <HAL_I2C_Init+0x176>
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	1e58      	subs	r0, r3, #1
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6859      	ldr	r1, [r3, #4]
 8005c94:	460b      	mov	r3, r1
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	440b      	add	r3, r1
 8005c9a:	0099      	lsls	r1, r3, #2
 8005c9c:	440b      	add	r3, r1
 8005c9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	bf0c      	ite	eq
 8005cac:	2301      	moveq	r3, #1
 8005cae:	2300      	movne	r3, #0
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d001      	beq.n	8005cba <HAL_I2C_Init+0x17e>
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e022      	b.n	8005d00 <HAL_I2C_Init+0x1c4>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d10e      	bne.n	8005ce0 <HAL_I2C_Init+0x1a4>
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	1e58      	subs	r0, r3, #1
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6859      	ldr	r1, [r3, #4]
 8005cca:	460b      	mov	r3, r1
 8005ccc:	005b      	lsls	r3, r3, #1
 8005cce:	440b      	add	r3, r1
 8005cd0:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cd4:	3301      	adds	r3, #1
 8005cd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cde:	e00f      	b.n	8005d00 <HAL_I2C_Init+0x1c4>
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	1e58      	subs	r0, r3, #1
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6859      	ldr	r1, [r3, #4]
 8005ce8:	460b      	mov	r3, r1
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	440b      	add	r3, r1
 8005cee:	0099      	lsls	r1, r3, #2
 8005cf0:	440b      	add	r3, r1
 8005cf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cfc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d00:	6879      	ldr	r1, [r7, #4]
 8005d02:	6809      	ldr	r1, [r1, #0]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	69da      	ldr	r2, [r3, #28]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a1b      	ldr	r3, [r3, #32]
 8005d1a:	431a      	orrs	r2, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	430a      	orrs	r2, r1
 8005d22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005d2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	6911      	ldr	r1, [r2, #16]
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	68d2      	ldr	r2, [r2, #12]
 8005d3a:	4311      	orrs	r1, r2
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	6812      	ldr	r2, [r2, #0]
 8005d40:	430b      	orrs	r3, r1
 8005d42:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	695a      	ldr	r2, [r3, #20]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	699b      	ldr	r3, [r3, #24]
 8005d56:	431a      	orrs	r2, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	430a      	orrs	r2, r1
 8005d5e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f042 0201 	orr.w	r2, r2, #1
 8005d6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2220      	movs	r2, #32
 8005d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3710      	adds	r7, #16
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	000186a0 	.word	0x000186a0
 8005d9c:	001e847f 	.word	0x001e847f
 8005da0:	003d08ff 	.word	0x003d08ff
 8005da4:	431bde83 	.word	0x431bde83
 8005da8:	10624dd3 	.word	0x10624dd3

08005dac <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b088      	sub	sp, #32
 8005db0:	af02      	add	r7, sp, #8
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	4608      	mov	r0, r1
 8005db6:	4611      	mov	r1, r2
 8005db8:	461a      	mov	r2, r3
 8005dba:	4603      	mov	r3, r0
 8005dbc:	817b      	strh	r3, [r7, #10]
 8005dbe:	460b      	mov	r3, r1
 8005dc0:	813b      	strh	r3, [r7, #8]
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005dc6:	f7ff f859 	bl	8004e7c <HAL_GetTick>
 8005dca:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	2b20      	cmp	r3, #32
 8005dd6:	f040 80d9 	bne.w	8005f8c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	9300      	str	r3, [sp, #0]
 8005dde:	2319      	movs	r3, #25
 8005de0:	2201      	movs	r2, #1
 8005de2:	496d      	ldr	r1, [pc, #436]	; (8005f98 <HAL_I2C_Mem_Write+0x1ec>)
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f000 fc7b 	bl	80066e0 <I2C_WaitOnFlagUntilTimeout>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d001      	beq.n	8005df4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005df0:	2302      	movs	r3, #2
 8005df2:	e0cc      	b.n	8005f8e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d101      	bne.n	8005e02 <HAL_I2C_Mem_Write+0x56>
 8005dfe:	2302      	movs	r3, #2
 8005e00:	e0c5      	b.n	8005f8e <HAL_I2C_Mem_Write+0x1e2>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2201      	movs	r2, #1
 8005e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0301 	and.w	r3, r3, #1
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d007      	beq.n	8005e28 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f042 0201 	orr.w	r2, r2, #1
 8005e26:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e36:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2221      	movs	r2, #33	; 0x21
 8005e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2240      	movs	r2, #64	; 0x40
 8005e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	6a3a      	ldr	r2, [r7, #32]
 8005e52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005e58:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e5e:	b29a      	uxth	r2, r3
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	4a4d      	ldr	r2, [pc, #308]	; (8005f9c <HAL_I2C_Mem_Write+0x1f0>)
 8005e68:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e6a:	88f8      	ldrh	r0, [r7, #6]
 8005e6c:	893a      	ldrh	r2, [r7, #8]
 8005e6e:	8979      	ldrh	r1, [r7, #10]
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	9301      	str	r3, [sp, #4]
 8005e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e76:	9300      	str	r3, [sp, #0]
 8005e78:	4603      	mov	r3, r0
 8005e7a:	68f8      	ldr	r0, [r7, #12]
 8005e7c:	f000 fab6 	bl	80063ec <I2C_RequestMemoryWrite>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d052      	beq.n	8005f2c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e081      	b.n	8005f8e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e8a:	697a      	ldr	r2, [r7, #20]
 8005e8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e8e:	68f8      	ldr	r0, [r7, #12]
 8005e90:	f000 fcfc 	bl	800688c <I2C_WaitOnTXEFlagUntilTimeout>
 8005e94:	4603      	mov	r3, r0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00d      	beq.n	8005eb6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9e:	2b04      	cmp	r3, #4
 8005ea0:	d107      	bne.n	8005eb2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005eb0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e06b      	b.n	8005f8e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eba:	781a      	ldrb	r2, [r3, #0]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec6:	1c5a      	adds	r2, r3, #1
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ed0:	3b01      	subs	r3, #1
 8005ed2:	b29a      	uxth	r2, r3
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	3b01      	subs	r3, #1
 8005ee0:	b29a      	uxth	r2, r3
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	695b      	ldr	r3, [r3, #20]
 8005eec:	f003 0304 	and.w	r3, r3, #4
 8005ef0:	2b04      	cmp	r3, #4
 8005ef2:	d11b      	bne.n	8005f2c <HAL_I2C_Mem_Write+0x180>
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d017      	beq.n	8005f2c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f00:	781a      	ldrb	r2, [r3, #0]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0c:	1c5a      	adds	r2, r3, #1
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f16:	3b01      	subs	r3, #1
 8005f18:	b29a      	uxth	r2, r3
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	3b01      	subs	r3, #1
 8005f26:	b29a      	uxth	r2, r3
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d1aa      	bne.n	8005e8a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f34:	697a      	ldr	r2, [r7, #20]
 8005f36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f38:	68f8      	ldr	r0, [r7, #12]
 8005f3a:	f000 fce8 	bl	800690e <I2C_WaitOnBTFFlagUntilTimeout>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d00d      	beq.n	8005f60 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f48:	2b04      	cmp	r3, #4
 8005f4a:	d107      	bne.n	8005f5c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f5a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e016      	b.n	8005f8e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2220      	movs	r2, #32
 8005f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	e000      	b.n	8005f8e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005f8c:	2302      	movs	r3, #2
  }
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3718      	adds	r7, #24
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop
 8005f98:	00100002 	.word	0x00100002
 8005f9c:	ffff0000 	.word	0xffff0000

08005fa0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b08c      	sub	sp, #48	; 0x30
 8005fa4:	af02      	add	r7, sp, #8
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	4608      	mov	r0, r1
 8005faa:	4611      	mov	r1, r2
 8005fac:	461a      	mov	r2, r3
 8005fae:	4603      	mov	r3, r0
 8005fb0:	817b      	strh	r3, [r7, #10]
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	813b      	strh	r3, [r7, #8]
 8005fb6:	4613      	mov	r3, r2
 8005fb8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005fba:	f7fe ff5f 	bl	8004e7c <HAL_GetTick>
 8005fbe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	2b20      	cmp	r3, #32
 8005fca:	f040 8208 	bne.w	80063de <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd0:	9300      	str	r3, [sp, #0]
 8005fd2:	2319      	movs	r3, #25
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	497b      	ldr	r1, [pc, #492]	; (80061c4 <HAL_I2C_Mem_Read+0x224>)
 8005fd8:	68f8      	ldr	r0, [r7, #12]
 8005fda:	f000 fb81 	bl	80066e0 <I2C_WaitOnFlagUntilTimeout>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d001      	beq.n	8005fe8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005fe4:	2302      	movs	r3, #2
 8005fe6:	e1fb      	b.n	80063e0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d101      	bne.n	8005ff6 <HAL_I2C_Mem_Read+0x56>
 8005ff2:	2302      	movs	r3, #2
 8005ff4:	e1f4      	b.n	80063e0 <HAL_I2C_Mem_Read+0x440>
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f003 0301 	and.w	r3, r3, #1
 8006008:	2b01      	cmp	r3, #1
 800600a:	d007      	beq.n	800601c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f042 0201 	orr.w	r2, r2, #1
 800601a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800602a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2222      	movs	r2, #34	; 0x22
 8006030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2240      	movs	r2, #64	; 0x40
 8006038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2200      	movs	r2, #0
 8006040:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006046:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800604c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006052:	b29a      	uxth	r2, r3
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	4a5b      	ldr	r2, [pc, #364]	; (80061c8 <HAL_I2C_Mem_Read+0x228>)
 800605c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800605e:	88f8      	ldrh	r0, [r7, #6]
 8006060:	893a      	ldrh	r2, [r7, #8]
 8006062:	8979      	ldrh	r1, [r7, #10]
 8006064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006066:	9301      	str	r3, [sp, #4]
 8006068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800606a:	9300      	str	r3, [sp, #0]
 800606c:	4603      	mov	r3, r0
 800606e:	68f8      	ldr	r0, [r7, #12]
 8006070:	f000 fa50 	bl	8006514 <I2C_RequestMemoryRead>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d001      	beq.n	800607e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e1b0      	b.n	80063e0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006082:	2b00      	cmp	r3, #0
 8006084:	d113      	bne.n	80060ae <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006086:	2300      	movs	r3, #0
 8006088:	623b      	str	r3, [r7, #32]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	695b      	ldr	r3, [r3, #20]
 8006090:	623b      	str	r3, [r7, #32]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	699b      	ldr	r3, [r3, #24]
 8006098:	623b      	str	r3, [r7, #32]
 800609a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060aa:	601a      	str	r2, [r3, #0]
 80060ac:	e184      	b.n	80063b8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d11b      	bne.n	80060ee <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060c6:	2300      	movs	r3, #0
 80060c8:	61fb      	str	r3, [r7, #28]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	695b      	ldr	r3, [r3, #20]
 80060d0:	61fb      	str	r3, [r7, #28]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	699b      	ldr	r3, [r3, #24]
 80060d8:	61fb      	str	r3, [r7, #28]
 80060da:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060ea:	601a      	str	r2, [r3, #0]
 80060ec:	e164      	b.n	80063b8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d11b      	bne.n	800612e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006104:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006114:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006116:	2300      	movs	r3, #0
 8006118:	61bb      	str	r3, [r7, #24]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	695b      	ldr	r3, [r3, #20]
 8006120:	61bb      	str	r3, [r7, #24]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	699b      	ldr	r3, [r3, #24]
 8006128:	61bb      	str	r3, [r7, #24]
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	e144      	b.n	80063b8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800612e:	2300      	movs	r3, #0
 8006130:	617b      	str	r3, [r7, #20]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	695b      	ldr	r3, [r3, #20]
 8006138:	617b      	str	r3, [r7, #20]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	699b      	ldr	r3, [r3, #24]
 8006140:	617b      	str	r3, [r7, #20]
 8006142:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006144:	e138      	b.n	80063b8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800614a:	2b03      	cmp	r3, #3
 800614c:	f200 80f1 	bhi.w	8006332 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006154:	2b01      	cmp	r3, #1
 8006156:	d123      	bne.n	80061a0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800615a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800615c:	68f8      	ldr	r0, [r7, #12]
 800615e:	f000 fc17 	bl	8006990 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006162:	4603      	mov	r3, r0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d001      	beq.n	800616c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	e139      	b.n	80063e0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	691a      	ldr	r2, [r3, #16]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006176:	b2d2      	uxtb	r2, r2
 8006178:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617e:	1c5a      	adds	r2, r3, #1
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006188:	3b01      	subs	r3, #1
 800618a:	b29a      	uxth	r2, r3
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006194:	b29b      	uxth	r3, r3
 8006196:	3b01      	subs	r3, #1
 8006198:	b29a      	uxth	r2, r3
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800619e:	e10b      	b.n	80063b8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d14e      	bne.n	8006246 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80061a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061aa:	9300      	str	r3, [sp, #0]
 80061ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ae:	2200      	movs	r2, #0
 80061b0:	4906      	ldr	r1, [pc, #24]	; (80061cc <HAL_I2C_Mem_Read+0x22c>)
 80061b2:	68f8      	ldr	r0, [r7, #12]
 80061b4:	f000 fa94 	bl	80066e0 <I2C_WaitOnFlagUntilTimeout>
 80061b8:	4603      	mov	r3, r0
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d008      	beq.n	80061d0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	e10e      	b.n	80063e0 <HAL_I2C_Mem_Read+0x440>
 80061c2:	bf00      	nop
 80061c4:	00100002 	.word	0x00100002
 80061c8:	ffff0000 	.word	0xffff0000
 80061cc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	691a      	ldr	r2, [r3, #16]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ea:	b2d2      	uxtb	r2, r2
 80061ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f2:	1c5a      	adds	r2, r3, #1
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061fc:	3b01      	subs	r3, #1
 80061fe:	b29a      	uxth	r2, r3
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006208:	b29b      	uxth	r3, r3
 800620a:	3b01      	subs	r3, #1
 800620c:	b29a      	uxth	r2, r3
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	691a      	ldr	r2, [r3, #16]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621c:	b2d2      	uxtb	r2, r2
 800621e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006224:	1c5a      	adds	r2, r3, #1
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800622e:	3b01      	subs	r3, #1
 8006230:	b29a      	uxth	r2, r3
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800623a:	b29b      	uxth	r3, r3
 800623c:	3b01      	subs	r3, #1
 800623e:	b29a      	uxth	r2, r3
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006244:	e0b8      	b.n	80063b8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006248:	9300      	str	r3, [sp, #0]
 800624a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800624c:	2200      	movs	r2, #0
 800624e:	4966      	ldr	r1, [pc, #408]	; (80063e8 <HAL_I2C_Mem_Read+0x448>)
 8006250:	68f8      	ldr	r0, [r7, #12]
 8006252:	f000 fa45 	bl	80066e0 <I2C_WaitOnFlagUntilTimeout>
 8006256:	4603      	mov	r3, r0
 8006258:	2b00      	cmp	r3, #0
 800625a:	d001      	beq.n	8006260 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	e0bf      	b.n	80063e0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800626e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	691a      	ldr	r2, [r3, #16]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627a:	b2d2      	uxtb	r2, r2
 800627c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006282:	1c5a      	adds	r2, r3, #1
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800628c:	3b01      	subs	r3, #1
 800628e:	b29a      	uxth	r2, r3
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006298:	b29b      	uxth	r3, r3
 800629a:	3b01      	subs	r3, #1
 800629c:	b29a      	uxth	r2, r3
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80062a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a4:	9300      	str	r3, [sp, #0]
 80062a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a8:	2200      	movs	r2, #0
 80062aa:	494f      	ldr	r1, [pc, #316]	; (80063e8 <HAL_I2C_Mem_Read+0x448>)
 80062ac:	68f8      	ldr	r0, [r7, #12]
 80062ae:	f000 fa17 	bl	80066e0 <I2C_WaitOnFlagUntilTimeout>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d001      	beq.n	80062bc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e091      	b.n	80063e0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	691a      	ldr	r2, [r3, #16]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d6:	b2d2      	uxtb	r2, r2
 80062d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062de:	1c5a      	adds	r2, r3, #1
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062e8:	3b01      	subs	r3, #1
 80062ea:	b29a      	uxth	r2, r3
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	3b01      	subs	r3, #1
 80062f8:	b29a      	uxth	r2, r3
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	691a      	ldr	r2, [r3, #16]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006308:	b2d2      	uxtb	r2, r2
 800630a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006310:	1c5a      	adds	r2, r3, #1
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800631a:	3b01      	subs	r3, #1
 800631c:	b29a      	uxth	r2, r3
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006326:	b29b      	uxth	r3, r3
 8006328:	3b01      	subs	r3, #1
 800632a:	b29a      	uxth	r2, r3
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006330:	e042      	b.n	80063b8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006334:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006336:	68f8      	ldr	r0, [r7, #12]
 8006338:	f000 fb2a 	bl	8006990 <I2C_WaitOnRXNEFlagUntilTimeout>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d001      	beq.n	8006346 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e04c      	b.n	80063e0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	691a      	ldr	r2, [r3, #16]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006350:	b2d2      	uxtb	r2, r2
 8006352:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006358:	1c5a      	adds	r2, r3, #1
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006362:	3b01      	subs	r3, #1
 8006364:	b29a      	uxth	r2, r3
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800636e:	b29b      	uxth	r3, r3
 8006370:	3b01      	subs	r3, #1
 8006372:	b29a      	uxth	r2, r3
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	695b      	ldr	r3, [r3, #20]
 800637e:	f003 0304 	and.w	r3, r3, #4
 8006382:	2b04      	cmp	r3, #4
 8006384:	d118      	bne.n	80063b8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	691a      	ldr	r2, [r3, #16]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006390:	b2d2      	uxtb	r2, r2
 8006392:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006398:	1c5a      	adds	r2, r3, #1
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063a2:	3b01      	subs	r3, #1
 80063a4:	b29a      	uxth	r2, r3
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	3b01      	subs	r3, #1
 80063b2:	b29a      	uxth	r2, r3
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063bc:	2b00      	cmp	r3, #0
 80063be:	f47f aec2 	bne.w	8006146 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2220      	movs	r2, #32
 80063c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80063da:	2300      	movs	r3, #0
 80063dc:	e000      	b.n	80063e0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80063de:	2302      	movs	r3, #2
  }
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3728      	adds	r7, #40	; 0x28
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	00010004 	.word	0x00010004

080063ec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b088      	sub	sp, #32
 80063f0:	af02      	add	r7, sp, #8
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	4608      	mov	r0, r1
 80063f6:	4611      	mov	r1, r2
 80063f8:	461a      	mov	r2, r3
 80063fa:	4603      	mov	r3, r0
 80063fc:	817b      	strh	r3, [r7, #10]
 80063fe:	460b      	mov	r3, r1
 8006400:	813b      	strh	r3, [r7, #8]
 8006402:	4613      	mov	r3, r2
 8006404:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006414:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006418:	9300      	str	r3, [sp, #0]
 800641a:	6a3b      	ldr	r3, [r7, #32]
 800641c:	2200      	movs	r2, #0
 800641e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006422:	68f8      	ldr	r0, [r7, #12]
 8006424:	f000 f95c 	bl	80066e0 <I2C_WaitOnFlagUntilTimeout>
 8006428:	4603      	mov	r3, r0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d00c      	beq.n	8006448 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006438:	2b00      	cmp	r3, #0
 800643a:	d003      	beq.n	8006444 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006442:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006444:	2303      	movs	r3, #3
 8006446:	e05f      	b.n	8006508 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006448:	897b      	ldrh	r3, [r7, #10]
 800644a:	b2db      	uxtb	r3, r3
 800644c:	461a      	mov	r2, r3
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006456:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645a:	6a3a      	ldr	r2, [r7, #32]
 800645c:	492c      	ldr	r1, [pc, #176]	; (8006510 <I2C_RequestMemoryWrite+0x124>)
 800645e:	68f8      	ldr	r0, [r7, #12]
 8006460:	f000 f995 	bl	800678e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006464:	4603      	mov	r3, r0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d001      	beq.n	800646e <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e04c      	b.n	8006508 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800646e:	2300      	movs	r3, #0
 8006470:	617b      	str	r3, [r7, #20]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	695b      	ldr	r3, [r3, #20]
 8006478:	617b      	str	r3, [r7, #20]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	699b      	ldr	r3, [r3, #24]
 8006480:	617b      	str	r3, [r7, #20]
 8006482:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006486:	6a39      	ldr	r1, [r7, #32]
 8006488:	68f8      	ldr	r0, [r7, #12]
 800648a:	f000 f9ff 	bl	800688c <I2C_WaitOnTXEFlagUntilTimeout>
 800648e:	4603      	mov	r3, r0
 8006490:	2b00      	cmp	r3, #0
 8006492:	d00d      	beq.n	80064b0 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006498:	2b04      	cmp	r3, #4
 800649a:	d107      	bne.n	80064ac <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064aa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	e02b      	b.n	8006508 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80064b0:	88fb      	ldrh	r3, [r7, #6]
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d105      	bne.n	80064c2 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80064b6:	893b      	ldrh	r3, [r7, #8]
 80064b8:	b2da      	uxtb	r2, r3
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	611a      	str	r2, [r3, #16]
 80064c0:	e021      	b.n	8006506 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80064c2:	893b      	ldrh	r3, [r7, #8]
 80064c4:	0a1b      	lsrs	r3, r3, #8
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	b2da      	uxtb	r2, r3
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064d2:	6a39      	ldr	r1, [r7, #32]
 80064d4:	68f8      	ldr	r0, [r7, #12]
 80064d6:	f000 f9d9 	bl	800688c <I2C_WaitOnTXEFlagUntilTimeout>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d00d      	beq.n	80064fc <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e4:	2b04      	cmp	r3, #4
 80064e6:	d107      	bne.n	80064f8 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064f6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	e005      	b.n	8006508 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80064fc:	893b      	ldrh	r3, [r7, #8]
 80064fe:	b2da      	uxtb	r2, r3
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006506:	2300      	movs	r3, #0
}
 8006508:	4618      	mov	r0, r3
 800650a:	3718      	adds	r7, #24
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}
 8006510:	00010002 	.word	0x00010002

08006514 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b088      	sub	sp, #32
 8006518:	af02      	add	r7, sp, #8
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	4608      	mov	r0, r1
 800651e:	4611      	mov	r1, r2
 8006520:	461a      	mov	r2, r3
 8006522:	4603      	mov	r3, r0
 8006524:	817b      	strh	r3, [r7, #10]
 8006526:	460b      	mov	r3, r1
 8006528:	813b      	strh	r3, [r7, #8]
 800652a:	4613      	mov	r3, r2
 800652c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800653c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800654c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800654e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006550:	9300      	str	r3, [sp, #0]
 8006552:	6a3b      	ldr	r3, [r7, #32]
 8006554:	2200      	movs	r2, #0
 8006556:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800655a:	68f8      	ldr	r0, [r7, #12]
 800655c:	f000 f8c0 	bl	80066e0 <I2C_WaitOnFlagUntilTimeout>
 8006560:	4603      	mov	r3, r0
 8006562:	2b00      	cmp	r3, #0
 8006564:	d00c      	beq.n	8006580 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006570:	2b00      	cmp	r3, #0
 8006572:	d003      	beq.n	800657c <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f44f 7200 	mov.w	r2, #512	; 0x200
 800657a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800657c:	2303      	movs	r3, #3
 800657e:	e0a9      	b.n	80066d4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006580:	897b      	ldrh	r3, [r7, #10]
 8006582:	b2db      	uxtb	r3, r3
 8006584:	461a      	mov	r2, r3
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800658e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006592:	6a3a      	ldr	r2, [r7, #32]
 8006594:	4951      	ldr	r1, [pc, #324]	; (80066dc <I2C_RequestMemoryRead+0x1c8>)
 8006596:	68f8      	ldr	r0, [r7, #12]
 8006598:	f000 f8f9 	bl	800678e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d001      	beq.n	80065a6 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e096      	b.n	80066d4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065a6:	2300      	movs	r3, #0
 80065a8:	617b      	str	r3, [r7, #20]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	695b      	ldr	r3, [r3, #20]
 80065b0:	617b      	str	r3, [r7, #20]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	699b      	ldr	r3, [r3, #24]
 80065b8:	617b      	str	r3, [r7, #20]
 80065ba:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065be:	6a39      	ldr	r1, [r7, #32]
 80065c0:	68f8      	ldr	r0, [r7, #12]
 80065c2:	f000 f963 	bl	800688c <I2C_WaitOnTXEFlagUntilTimeout>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d00d      	beq.n	80065e8 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d0:	2b04      	cmp	r3, #4
 80065d2:	d107      	bne.n	80065e4 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065e2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	e075      	b.n	80066d4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80065e8:	88fb      	ldrh	r3, [r7, #6]
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d105      	bne.n	80065fa <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80065ee:	893b      	ldrh	r3, [r7, #8]
 80065f0:	b2da      	uxtb	r2, r3
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	611a      	str	r2, [r3, #16]
 80065f8:	e021      	b.n	800663e <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80065fa:	893b      	ldrh	r3, [r7, #8]
 80065fc:	0a1b      	lsrs	r3, r3, #8
 80065fe:	b29b      	uxth	r3, r3
 8006600:	b2da      	uxtb	r2, r3
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800660a:	6a39      	ldr	r1, [r7, #32]
 800660c:	68f8      	ldr	r0, [r7, #12]
 800660e:	f000 f93d 	bl	800688c <I2C_WaitOnTXEFlagUntilTimeout>
 8006612:	4603      	mov	r3, r0
 8006614:	2b00      	cmp	r3, #0
 8006616:	d00d      	beq.n	8006634 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661c:	2b04      	cmp	r3, #4
 800661e:	d107      	bne.n	8006630 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800662e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	e04f      	b.n	80066d4 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006634:	893b      	ldrh	r3, [r7, #8]
 8006636:	b2da      	uxtb	r2, r3
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800663e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006640:	6a39      	ldr	r1, [r7, #32]
 8006642:	68f8      	ldr	r0, [r7, #12]
 8006644:	f000 f922 	bl	800688c <I2C_WaitOnTXEFlagUntilTimeout>
 8006648:	4603      	mov	r3, r0
 800664a:	2b00      	cmp	r3, #0
 800664c:	d00d      	beq.n	800666a <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006652:	2b04      	cmp	r3, #4
 8006654:	d107      	bne.n	8006666 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006664:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	e034      	b.n	80066d4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006678:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800667a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667c:	9300      	str	r3, [sp, #0]
 800667e:	6a3b      	ldr	r3, [r7, #32]
 8006680:	2200      	movs	r2, #0
 8006682:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006686:	68f8      	ldr	r0, [r7, #12]
 8006688:	f000 f82a 	bl	80066e0 <I2C_WaitOnFlagUntilTimeout>
 800668c:	4603      	mov	r3, r0
 800668e:	2b00      	cmp	r3, #0
 8006690:	d00c      	beq.n	80066ac <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800669c:	2b00      	cmp	r3, #0
 800669e:	d003      	beq.n	80066a8 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80066a8:	2303      	movs	r3, #3
 80066aa:	e013      	b.n	80066d4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80066ac:	897b      	ldrh	r3, [r7, #10]
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	f043 0301 	orr.w	r3, r3, #1
 80066b4:	b2da      	uxtb	r2, r3
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80066bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066be:	6a3a      	ldr	r2, [r7, #32]
 80066c0:	4906      	ldr	r1, [pc, #24]	; (80066dc <I2C_RequestMemoryRead+0x1c8>)
 80066c2:	68f8      	ldr	r0, [r7, #12]
 80066c4:	f000 f863 	bl	800678e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d001      	beq.n	80066d2 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	e000      	b.n	80066d4 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 80066d2:	2300      	movs	r3, #0
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3718      	adds	r7, #24
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}
 80066dc:	00010002 	.word	0x00010002

080066e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b084      	sub	sp, #16
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	603b      	str	r3, [r7, #0]
 80066ec:	4613      	mov	r3, r2
 80066ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066f0:	e025      	b.n	800673e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066f8:	d021      	beq.n	800673e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066fa:	f7fe fbbf 	bl	8004e7c <HAL_GetTick>
 80066fe:	4602      	mov	r2, r0
 8006700:	69bb      	ldr	r3, [r7, #24]
 8006702:	1ad3      	subs	r3, r2, r3
 8006704:	683a      	ldr	r2, [r7, #0]
 8006706:	429a      	cmp	r2, r3
 8006708:	d302      	bcc.n	8006710 <I2C_WaitOnFlagUntilTimeout+0x30>
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d116      	bne.n	800673e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2200      	movs	r2, #0
 8006714:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2220      	movs	r2, #32
 800671a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2200      	movs	r2, #0
 8006722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672a:	f043 0220 	orr.w	r2, r3, #32
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2200      	movs	r2, #0
 8006736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	e023      	b.n	8006786 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	0c1b      	lsrs	r3, r3, #16
 8006742:	b2db      	uxtb	r3, r3
 8006744:	2b01      	cmp	r3, #1
 8006746:	d10d      	bne.n	8006764 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	695b      	ldr	r3, [r3, #20]
 800674e:	43da      	mvns	r2, r3
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	4013      	ands	r3, r2
 8006754:	b29b      	uxth	r3, r3
 8006756:	2b00      	cmp	r3, #0
 8006758:	bf0c      	ite	eq
 800675a:	2301      	moveq	r3, #1
 800675c:	2300      	movne	r3, #0
 800675e:	b2db      	uxtb	r3, r3
 8006760:	461a      	mov	r2, r3
 8006762:	e00c      	b.n	800677e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	699b      	ldr	r3, [r3, #24]
 800676a:	43da      	mvns	r2, r3
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	4013      	ands	r3, r2
 8006770:	b29b      	uxth	r3, r3
 8006772:	2b00      	cmp	r3, #0
 8006774:	bf0c      	ite	eq
 8006776:	2301      	moveq	r3, #1
 8006778:	2300      	movne	r3, #0
 800677a:	b2db      	uxtb	r3, r3
 800677c:	461a      	mov	r2, r3
 800677e:	79fb      	ldrb	r3, [r7, #7]
 8006780:	429a      	cmp	r2, r3
 8006782:	d0b6      	beq.n	80066f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006784:	2300      	movs	r3, #0
}
 8006786:	4618      	mov	r0, r3
 8006788:	3710      	adds	r7, #16
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}

0800678e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800678e:	b580      	push	{r7, lr}
 8006790:	b084      	sub	sp, #16
 8006792:	af00      	add	r7, sp, #0
 8006794:	60f8      	str	r0, [r7, #12]
 8006796:	60b9      	str	r1, [r7, #8]
 8006798:	607a      	str	r2, [r7, #4]
 800679a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800679c:	e051      	b.n	8006842 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	695b      	ldr	r3, [r3, #20]
 80067a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067ac:	d123      	bne.n	80067f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067bc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80067c6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2200      	movs	r2, #0
 80067cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2220      	movs	r2, #32
 80067d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2200      	movs	r2, #0
 80067da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e2:	f043 0204 	orr.w	r2, r3, #4
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e046      	b.n	8006884 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067fc:	d021      	beq.n	8006842 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067fe:	f7fe fb3d 	bl	8004e7c <HAL_GetTick>
 8006802:	4602      	mov	r2, r0
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	1ad3      	subs	r3, r2, r3
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	429a      	cmp	r2, r3
 800680c:	d302      	bcc.n	8006814 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d116      	bne.n	8006842 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2200      	movs	r2, #0
 8006818:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2220      	movs	r2, #32
 800681e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2200      	movs	r2, #0
 8006826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682e:	f043 0220 	orr.w	r2, r3, #32
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e020      	b.n	8006884 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	0c1b      	lsrs	r3, r3, #16
 8006846:	b2db      	uxtb	r3, r3
 8006848:	2b01      	cmp	r3, #1
 800684a:	d10c      	bne.n	8006866 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	695b      	ldr	r3, [r3, #20]
 8006852:	43da      	mvns	r2, r3
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	4013      	ands	r3, r2
 8006858:	b29b      	uxth	r3, r3
 800685a:	2b00      	cmp	r3, #0
 800685c:	bf14      	ite	ne
 800685e:	2301      	movne	r3, #1
 8006860:	2300      	moveq	r3, #0
 8006862:	b2db      	uxtb	r3, r3
 8006864:	e00b      	b.n	800687e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	699b      	ldr	r3, [r3, #24]
 800686c:	43da      	mvns	r2, r3
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	4013      	ands	r3, r2
 8006872:	b29b      	uxth	r3, r3
 8006874:	2b00      	cmp	r3, #0
 8006876:	bf14      	ite	ne
 8006878:	2301      	movne	r3, #1
 800687a:	2300      	moveq	r3, #0
 800687c:	b2db      	uxtb	r3, r3
 800687e:	2b00      	cmp	r3, #0
 8006880:	d18d      	bne.n	800679e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006882:	2300      	movs	r3, #0
}
 8006884:	4618      	mov	r0, r3
 8006886:	3710      	adds	r7, #16
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006898:	e02d      	b.n	80068f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800689a:	68f8      	ldr	r0, [r7, #12]
 800689c:	f000 f8ce 	bl	8006a3c <I2C_IsAcknowledgeFailed>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d001      	beq.n	80068aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	e02d      	b.n	8006906 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068b0:	d021      	beq.n	80068f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068b2:	f7fe fae3 	bl	8004e7c <HAL_GetTick>
 80068b6:	4602      	mov	r2, r0
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	1ad3      	subs	r3, r2, r3
 80068bc:	68ba      	ldr	r2, [r7, #8]
 80068be:	429a      	cmp	r2, r3
 80068c0:	d302      	bcc.n	80068c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d116      	bne.n	80068f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2200      	movs	r2, #0
 80068cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2220      	movs	r2, #32
 80068d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2200      	movs	r2, #0
 80068da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e2:	f043 0220 	orr.w	r2, r3, #32
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2200      	movs	r2, #0
 80068ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e007      	b.n	8006906 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	695b      	ldr	r3, [r3, #20]
 80068fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006900:	2b80      	cmp	r3, #128	; 0x80
 8006902:	d1ca      	bne.n	800689a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006904:	2300      	movs	r3, #0
}
 8006906:	4618      	mov	r0, r3
 8006908:	3710      	adds	r7, #16
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}

0800690e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800690e:	b580      	push	{r7, lr}
 8006910:	b084      	sub	sp, #16
 8006912:	af00      	add	r7, sp, #0
 8006914:	60f8      	str	r0, [r7, #12]
 8006916:	60b9      	str	r1, [r7, #8]
 8006918:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800691a:	e02d      	b.n	8006978 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800691c:	68f8      	ldr	r0, [r7, #12]
 800691e:	f000 f88d 	bl	8006a3c <I2C_IsAcknowledgeFailed>
 8006922:	4603      	mov	r3, r0
 8006924:	2b00      	cmp	r3, #0
 8006926:	d001      	beq.n	800692c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	e02d      	b.n	8006988 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006932:	d021      	beq.n	8006978 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006934:	f7fe faa2 	bl	8004e7c <HAL_GetTick>
 8006938:	4602      	mov	r2, r0
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	68ba      	ldr	r2, [r7, #8]
 8006940:	429a      	cmp	r2, r3
 8006942:	d302      	bcc.n	800694a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d116      	bne.n	8006978 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2200      	movs	r2, #0
 800694e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2220      	movs	r2, #32
 8006954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2200      	movs	r2, #0
 800695c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006964:	f043 0220 	orr.w	r2, r3, #32
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2200      	movs	r2, #0
 8006970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	e007      	b.n	8006988 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	695b      	ldr	r3, [r3, #20]
 800697e:	f003 0304 	and.w	r3, r3, #4
 8006982:	2b04      	cmp	r3, #4
 8006984:	d1ca      	bne.n	800691c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006986:	2300      	movs	r3, #0
}
 8006988:	4618      	mov	r0, r3
 800698a:	3710      	adds	r7, #16
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800699c:	e042      	b.n	8006a24 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	695b      	ldr	r3, [r3, #20]
 80069a4:	f003 0310 	and.w	r3, r3, #16
 80069a8:	2b10      	cmp	r3, #16
 80069aa:	d119      	bne.n	80069e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f06f 0210 	mvn.w	r2, #16
 80069b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2200      	movs	r2, #0
 80069ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2220      	movs	r2, #32
 80069c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	e029      	b.n	8006a34 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069e0:	f7fe fa4c 	bl	8004e7c <HAL_GetTick>
 80069e4:	4602      	mov	r2, r0
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	1ad3      	subs	r3, r2, r3
 80069ea:	68ba      	ldr	r2, [r7, #8]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d302      	bcc.n	80069f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d116      	bne.n	8006a24 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2200      	movs	r2, #0
 80069fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2220      	movs	r2, #32
 8006a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a10:	f043 0220 	orr.w	r2, r3, #32
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006a20:	2301      	movs	r3, #1
 8006a22:	e007      	b.n	8006a34 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	695b      	ldr	r3, [r3, #20]
 8006a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a2e:	2b40      	cmp	r3, #64	; 0x40
 8006a30:	d1b5      	bne.n	800699e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3710      	adds	r7, #16
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	695b      	ldr	r3, [r3, #20]
 8006a4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a52:	d11b      	bne.n	8006a8c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006a5c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2220      	movs	r2, #32
 8006a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a78:	f043 0204 	orr.w	r2, r3, #4
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e000      	b.n	8006a8e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	370c      	adds	r7, #12
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr
	...

08006a9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b086      	sub	sp, #24
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d101      	bne.n	8006aae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e25b      	b.n	8006f66 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f003 0301 	and.w	r3, r3, #1
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d075      	beq.n	8006ba6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006aba:	4ba3      	ldr	r3, [pc, #652]	; (8006d48 <HAL_RCC_OscConfig+0x2ac>)
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	f003 030c 	and.w	r3, r3, #12
 8006ac2:	2b04      	cmp	r3, #4
 8006ac4:	d00c      	beq.n	8006ae0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ac6:	4ba0      	ldr	r3, [pc, #640]	; (8006d48 <HAL_RCC_OscConfig+0x2ac>)
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006ace:	2b08      	cmp	r3, #8
 8006ad0:	d112      	bne.n	8006af8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ad2:	4b9d      	ldr	r3, [pc, #628]	; (8006d48 <HAL_RCC_OscConfig+0x2ac>)
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ada:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ade:	d10b      	bne.n	8006af8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ae0:	4b99      	ldr	r3, [pc, #612]	; (8006d48 <HAL_RCC_OscConfig+0x2ac>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d05b      	beq.n	8006ba4 <HAL_RCC_OscConfig+0x108>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d157      	bne.n	8006ba4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	e236      	b.n	8006f66 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b00:	d106      	bne.n	8006b10 <HAL_RCC_OscConfig+0x74>
 8006b02:	4b91      	ldr	r3, [pc, #580]	; (8006d48 <HAL_RCC_OscConfig+0x2ac>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a90      	ldr	r2, [pc, #576]	; (8006d48 <HAL_RCC_OscConfig+0x2ac>)
 8006b08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b0c:	6013      	str	r3, [r2, #0]
 8006b0e:	e01d      	b.n	8006b4c <HAL_RCC_OscConfig+0xb0>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b18:	d10c      	bne.n	8006b34 <HAL_RCC_OscConfig+0x98>
 8006b1a:	4b8b      	ldr	r3, [pc, #556]	; (8006d48 <HAL_RCC_OscConfig+0x2ac>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a8a      	ldr	r2, [pc, #552]	; (8006d48 <HAL_RCC_OscConfig+0x2ac>)
 8006b20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b24:	6013      	str	r3, [r2, #0]
 8006b26:	4b88      	ldr	r3, [pc, #544]	; (8006d48 <HAL_RCC_OscConfig+0x2ac>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a87      	ldr	r2, [pc, #540]	; (8006d48 <HAL_RCC_OscConfig+0x2ac>)
 8006b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b30:	6013      	str	r3, [r2, #0]
 8006b32:	e00b      	b.n	8006b4c <HAL_RCC_OscConfig+0xb0>
 8006b34:	4b84      	ldr	r3, [pc, #528]	; (8006d48 <HAL_RCC_OscConfig+0x2ac>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a83      	ldr	r2, [pc, #524]	; (8006d48 <HAL_RCC_OscConfig+0x2ac>)
 8006b3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b3e:	6013      	str	r3, [r2, #0]
 8006b40:	4b81      	ldr	r3, [pc, #516]	; (8006d48 <HAL_RCC_OscConfig+0x2ac>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a80      	ldr	r2, [pc, #512]	; (8006d48 <HAL_RCC_OscConfig+0x2ac>)
 8006b46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d013      	beq.n	8006b7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b54:	f7fe f992 	bl	8004e7c <HAL_GetTick>
 8006b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b5a:	e008      	b.n	8006b6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b5c:	f7fe f98e 	bl	8004e7c <HAL_GetTick>
 8006b60:	4602      	mov	r2, r0
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	1ad3      	subs	r3, r2, r3
 8006b66:	2b64      	cmp	r3, #100	; 0x64
 8006b68:	d901      	bls.n	8006b6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006b6a:	2303      	movs	r3, #3
 8006b6c:	e1fb      	b.n	8006f66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b6e:	4b76      	ldr	r3, [pc, #472]	; (8006d48 <HAL_RCC_OscConfig+0x2ac>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d0f0      	beq.n	8006b5c <HAL_RCC_OscConfig+0xc0>
 8006b7a:	e014      	b.n	8006ba6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b7c:	f7fe f97e 	bl	8004e7c <HAL_GetTick>
 8006b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b82:	e008      	b.n	8006b96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b84:	f7fe f97a 	bl	8004e7c <HAL_GetTick>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	1ad3      	subs	r3, r2, r3
 8006b8e:	2b64      	cmp	r3, #100	; 0x64
 8006b90:	d901      	bls.n	8006b96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006b92:	2303      	movs	r3, #3
 8006b94:	e1e7      	b.n	8006f66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b96:	4b6c      	ldr	r3, [pc, #432]	; (8006d48 <HAL_RCC_OscConfig+0x2ac>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d1f0      	bne.n	8006b84 <HAL_RCC_OscConfig+0xe8>
 8006ba2:	e000      	b.n	8006ba6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ba4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f003 0302 	and.w	r3, r3, #2
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d063      	beq.n	8006c7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006bb2:	4b65      	ldr	r3, [pc, #404]	; (8006d48 <HAL_RCC_OscConfig+0x2ac>)
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	f003 030c 	and.w	r3, r3, #12
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d00b      	beq.n	8006bd6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006bbe:	4b62      	ldr	r3, [pc, #392]	; (8006d48 <HAL_RCC_OscConfig+0x2ac>)
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006bc6:	2b08      	cmp	r3, #8
 8006bc8:	d11c      	bne.n	8006c04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006bca:	4b5f      	ldr	r3, [pc, #380]	; (8006d48 <HAL_RCC_OscConfig+0x2ac>)
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d116      	bne.n	8006c04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bd6:	4b5c      	ldr	r3, [pc, #368]	; (8006d48 <HAL_RCC_OscConfig+0x2ac>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f003 0302 	and.w	r3, r3, #2
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d005      	beq.n	8006bee <HAL_RCC_OscConfig+0x152>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	68db      	ldr	r3, [r3, #12]
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d001      	beq.n	8006bee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	e1bb      	b.n	8006f66 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bee:	4b56      	ldr	r3, [pc, #344]	; (8006d48 <HAL_RCC_OscConfig+0x2ac>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	00db      	lsls	r3, r3, #3
 8006bfc:	4952      	ldr	r1, [pc, #328]	; (8006d48 <HAL_RCC_OscConfig+0x2ac>)
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c02:	e03a      	b.n	8006c7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d020      	beq.n	8006c4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c0c:	4b4f      	ldr	r3, [pc, #316]	; (8006d4c <HAL_RCC_OscConfig+0x2b0>)
 8006c0e:	2201      	movs	r2, #1
 8006c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c12:	f7fe f933 	bl	8004e7c <HAL_GetTick>
 8006c16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c18:	e008      	b.n	8006c2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c1a:	f7fe f92f 	bl	8004e7c <HAL_GetTick>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	1ad3      	subs	r3, r2, r3
 8006c24:	2b02      	cmp	r3, #2
 8006c26:	d901      	bls.n	8006c2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006c28:	2303      	movs	r3, #3
 8006c2a:	e19c      	b.n	8006f66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c2c:	4b46      	ldr	r3, [pc, #280]	; (8006d48 <HAL_RCC_OscConfig+0x2ac>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 0302 	and.w	r3, r3, #2
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d0f0      	beq.n	8006c1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c38:	4b43      	ldr	r3, [pc, #268]	; (8006d48 <HAL_RCC_OscConfig+0x2ac>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	691b      	ldr	r3, [r3, #16]
 8006c44:	00db      	lsls	r3, r3, #3
 8006c46:	4940      	ldr	r1, [pc, #256]	; (8006d48 <HAL_RCC_OscConfig+0x2ac>)
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	600b      	str	r3, [r1, #0]
 8006c4c:	e015      	b.n	8006c7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c4e:	4b3f      	ldr	r3, [pc, #252]	; (8006d4c <HAL_RCC_OscConfig+0x2b0>)
 8006c50:	2200      	movs	r2, #0
 8006c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c54:	f7fe f912 	bl	8004e7c <HAL_GetTick>
 8006c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c5a:	e008      	b.n	8006c6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c5c:	f7fe f90e 	bl	8004e7c <HAL_GetTick>
 8006c60:	4602      	mov	r2, r0
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	1ad3      	subs	r3, r2, r3
 8006c66:	2b02      	cmp	r3, #2
 8006c68:	d901      	bls.n	8006c6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	e17b      	b.n	8006f66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c6e:	4b36      	ldr	r3, [pc, #216]	; (8006d48 <HAL_RCC_OscConfig+0x2ac>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f003 0302 	and.w	r3, r3, #2
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d1f0      	bne.n	8006c5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f003 0308 	and.w	r3, r3, #8
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d030      	beq.n	8006ce8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	695b      	ldr	r3, [r3, #20]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d016      	beq.n	8006cbc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c8e:	4b30      	ldr	r3, [pc, #192]	; (8006d50 <HAL_RCC_OscConfig+0x2b4>)
 8006c90:	2201      	movs	r2, #1
 8006c92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c94:	f7fe f8f2 	bl	8004e7c <HAL_GetTick>
 8006c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c9a:	e008      	b.n	8006cae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c9c:	f7fe f8ee 	bl	8004e7c <HAL_GetTick>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	1ad3      	subs	r3, r2, r3
 8006ca6:	2b02      	cmp	r3, #2
 8006ca8:	d901      	bls.n	8006cae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006caa:	2303      	movs	r3, #3
 8006cac:	e15b      	b.n	8006f66 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cae:	4b26      	ldr	r3, [pc, #152]	; (8006d48 <HAL_RCC_OscConfig+0x2ac>)
 8006cb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cb2:	f003 0302 	and.w	r3, r3, #2
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d0f0      	beq.n	8006c9c <HAL_RCC_OscConfig+0x200>
 8006cba:	e015      	b.n	8006ce8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006cbc:	4b24      	ldr	r3, [pc, #144]	; (8006d50 <HAL_RCC_OscConfig+0x2b4>)
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cc2:	f7fe f8db 	bl	8004e7c <HAL_GetTick>
 8006cc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cc8:	e008      	b.n	8006cdc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006cca:	f7fe f8d7 	bl	8004e7c <HAL_GetTick>
 8006cce:	4602      	mov	r2, r0
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	1ad3      	subs	r3, r2, r3
 8006cd4:	2b02      	cmp	r3, #2
 8006cd6:	d901      	bls.n	8006cdc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006cd8:	2303      	movs	r3, #3
 8006cda:	e144      	b.n	8006f66 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cdc:	4b1a      	ldr	r3, [pc, #104]	; (8006d48 <HAL_RCC_OscConfig+0x2ac>)
 8006cde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ce0:	f003 0302 	and.w	r3, r3, #2
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d1f0      	bne.n	8006cca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f003 0304 	and.w	r3, r3, #4
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	f000 80a0 	beq.w	8006e36 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006cfa:	4b13      	ldr	r3, [pc, #76]	; (8006d48 <HAL_RCC_OscConfig+0x2ac>)
 8006cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d10f      	bne.n	8006d26 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d06:	2300      	movs	r3, #0
 8006d08:	60bb      	str	r3, [r7, #8]
 8006d0a:	4b0f      	ldr	r3, [pc, #60]	; (8006d48 <HAL_RCC_OscConfig+0x2ac>)
 8006d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0e:	4a0e      	ldr	r2, [pc, #56]	; (8006d48 <HAL_RCC_OscConfig+0x2ac>)
 8006d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d14:	6413      	str	r3, [r2, #64]	; 0x40
 8006d16:	4b0c      	ldr	r3, [pc, #48]	; (8006d48 <HAL_RCC_OscConfig+0x2ac>)
 8006d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d1e:	60bb      	str	r3, [r7, #8]
 8006d20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d22:	2301      	movs	r3, #1
 8006d24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d26:	4b0b      	ldr	r3, [pc, #44]	; (8006d54 <HAL_RCC_OscConfig+0x2b8>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d121      	bne.n	8006d76 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d32:	4b08      	ldr	r3, [pc, #32]	; (8006d54 <HAL_RCC_OscConfig+0x2b8>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a07      	ldr	r2, [pc, #28]	; (8006d54 <HAL_RCC_OscConfig+0x2b8>)
 8006d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d3e:	f7fe f89d 	bl	8004e7c <HAL_GetTick>
 8006d42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d44:	e011      	b.n	8006d6a <HAL_RCC_OscConfig+0x2ce>
 8006d46:	bf00      	nop
 8006d48:	40023800 	.word	0x40023800
 8006d4c:	42470000 	.word	0x42470000
 8006d50:	42470e80 	.word	0x42470e80
 8006d54:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d58:	f7fe f890 	bl	8004e7c <HAL_GetTick>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	1ad3      	subs	r3, r2, r3
 8006d62:	2b02      	cmp	r3, #2
 8006d64:	d901      	bls.n	8006d6a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006d66:	2303      	movs	r3, #3
 8006d68:	e0fd      	b.n	8006f66 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d6a:	4b81      	ldr	r3, [pc, #516]	; (8006f70 <HAL_RCC_OscConfig+0x4d4>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d0f0      	beq.n	8006d58 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d106      	bne.n	8006d8c <HAL_RCC_OscConfig+0x2f0>
 8006d7e:	4b7d      	ldr	r3, [pc, #500]	; (8006f74 <HAL_RCC_OscConfig+0x4d8>)
 8006d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d82:	4a7c      	ldr	r2, [pc, #496]	; (8006f74 <HAL_RCC_OscConfig+0x4d8>)
 8006d84:	f043 0301 	orr.w	r3, r3, #1
 8006d88:	6713      	str	r3, [r2, #112]	; 0x70
 8006d8a:	e01c      	b.n	8006dc6 <HAL_RCC_OscConfig+0x32a>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	2b05      	cmp	r3, #5
 8006d92:	d10c      	bne.n	8006dae <HAL_RCC_OscConfig+0x312>
 8006d94:	4b77      	ldr	r3, [pc, #476]	; (8006f74 <HAL_RCC_OscConfig+0x4d8>)
 8006d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d98:	4a76      	ldr	r2, [pc, #472]	; (8006f74 <HAL_RCC_OscConfig+0x4d8>)
 8006d9a:	f043 0304 	orr.w	r3, r3, #4
 8006d9e:	6713      	str	r3, [r2, #112]	; 0x70
 8006da0:	4b74      	ldr	r3, [pc, #464]	; (8006f74 <HAL_RCC_OscConfig+0x4d8>)
 8006da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006da4:	4a73      	ldr	r2, [pc, #460]	; (8006f74 <HAL_RCC_OscConfig+0x4d8>)
 8006da6:	f043 0301 	orr.w	r3, r3, #1
 8006daa:	6713      	str	r3, [r2, #112]	; 0x70
 8006dac:	e00b      	b.n	8006dc6 <HAL_RCC_OscConfig+0x32a>
 8006dae:	4b71      	ldr	r3, [pc, #452]	; (8006f74 <HAL_RCC_OscConfig+0x4d8>)
 8006db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006db2:	4a70      	ldr	r2, [pc, #448]	; (8006f74 <HAL_RCC_OscConfig+0x4d8>)
 8006db4:	f023 0301 	bic.w	r3, r3, #1
 8006db8:	6713      	str	r3, [r2, #112]	; 0x70
 8006dba:	4b6e      	ldr	r3, [pc, #440]	; (8006f74 <HAL_RCC_OscConfig+0x4d8>)
 8006dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dbe:	4a6d      	ldr	r2, [pc, #436]	; (8006f74 <HAL_RCC_OscConfig+0x4d8>)
 8006dc0:	f023 0304 	bic.w	r3, r3, #4
 8006dc4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d015      	beq.n	8006dfa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dce:	f7fe f855 	bl	8004e7c <HAL_GetTick>
 8006dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dd4:	e00a      	b.n	8006dec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006dd6:	f7fe f851 	bl	8004e7c <HAL_GetTick>
 8006dda:	4602      	mov	r2, r0
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	1ad3      	subs	r3, r2, r3
 8006de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d901      	bls.n	8006dec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006de8:	2303      	movs	r3, #3
 8006dea:	e0bc      	b.n	8006f66 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dec:	4b61      	ldr	r3, [pc, #388]	; (8006f74 <HAL_RCC_OscConfig+0x4d8>)
 8006dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006df0:	f003 0302 	and.w	r3, r3, #2
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d0ee      	beq.n	8006dd6 <HAL_RCC_OscConfig+0x33a>
 8006df8:	e014      	b.n	8006e24 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006dfa:	f7fe f83f 	bl	8004e7c <HAL_GetTick>
 8006dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e00:	e00a      	b.n	8006e18 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e02:	f7fe f83b 	bl	8004e7c <HAL_GetTick>
 8006e06:	4602      	mov	r2, r0
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	1ad3      	subs	r3, r2, r3
 8006e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d901      	bls.n	8006e18 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006e14:	2303      	movs	r3, #3
 8006e16:	e0a6      	b.n	8006f66 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e18:	4b56      	ldr	r3, [pc, #344]	; (8006f74 <HAL_RCC_OscConfig+0x4d8>)
 8006e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e1c:	f003 0302 	and.w	r3, r3, #2
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d1ee      	bne.n	8006e02 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e24:	7dfb      	ldrb	r3, [r7, #23]
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d105      	bne.n	8006e36 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e2a:	4b52      	ldr	r3, [pc, #328]	; (8006f74 <HAL_RCC_OscConfig+0x4d8>)
 8006e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e2e:	4a51      	ldr	r2, [pc, #324]	; (8006f74 <HAL_RCC_OscConfig+0x4d8>)
 8006e30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e34:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	699b      	ldr	r3, [r3, #24]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	f000 8092 	beq.w	8006f64 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006e40:	4b4c      	ldr	r3, [pc, #304]	; (8006f74 <HAL_RCC_OscConfig+0x4d8>)
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	f003 030c 	and.w	r3, r3, #12
 8006e48:	2b08      	cmp	r3, #8
 8006e4a:	d05c      	beq.n	8006f06 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	699b      	ldr	r3, [r3, #24]
 8006e50:	2b02      	cmp	r3, #2
 8006e52:	d141      	bne.n	8006ed8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e54:	4b48      	ldr	r3, [pc, #288]	; (8006f78 <HAL_RCC_OscConfig+0x4dc>)
 8006e56:	2200      	movs	r2, #0
 8006e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e5a:	f7fe f80f 	bl	8004e7c <HAL_GetTick>
 8006e5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e60:	e008      	b.n	8006e74 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e62:	f7fe f80b 	bl	8004e7c <HAL_GetTick>
 8006e66:	4602      	mov	r2, r0
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	1ad3      	subs	r3, r2, r3
 8006e6c:	2b02      	cmp	r3, #2
 8006e6e:	d901      	bls.n	8006e74 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006e70:	2303      	movs	r3, #3
 8006e72:	e078      	b.n	8006f66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e74:	4b3f      	ldr	r3, [pc, #252]	; (8006f74 <HAL_RCC_OscConfig+0x4d8>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d1f0      	bne.n	8006e62 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	69da      	ldr	r2, [r3, #28]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6a1b      	ldr	r3, [r3, #32]
 8006e88:	431a      	orrs	r2, r3
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8e:	019b      	lsls	r3, r3, #6
 8006e90:	431a      	orrs	r2, r3
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e96:	085b      	lsrs	r3, r3, #1
 8006e98:	3b01      	subs	r3, #1
 8006e9a:	041b      	lsls	r3, r3, #16
 8006e9c:	431a      	orrs	r2, r3
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea2:	061b      	lsls	r3, r3, #24
 8006ea4:	4933      	ldr	r1, [pc, #204]	; (8006f74 <HAL_RCC_OscConfig+0x4d8>)
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006eaa:	4b33      	ldr	r3, [pc, #204]	; (8006f78 <HAL_RCC_OscConfig+0x4dc>)
 8006eac:	2201      	movs	r2, #1
 8006eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006eb0:	f7fd ffe4 	bl	8004e7c <HAL_GetTick>
 8006eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006eb6:	e008      	b.n	8006eca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006eb8:	f7fd ffe0 	bl	8004e7c <HAL_GetTick>
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	1ad3      	subs	r3, r2, r3
 8006ec2:	2b02      	cmp	r3, #2
 8006ec4:	d901      	bls.n	8006eca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006ec6:	2303      	movs	r3, #3
 8006ec8:	e04d      	b.n	8006f66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006eca:	4b2a      	ldr	r3, [pc, #168]	; (8006f74 <HAL_RCC_OscConfig+0x4d8>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d0f0      	beq.n	8006eb8 <HAL_RCC_OscConfig+0x41c>
 8006ed6:	e045      	b.n	8006f64 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ed8:	4b27      	ldr	r3, [pc, #156]	; (8006f78 <HAL_RCC_OscConfig+0x4dc>)
 8006eda:	2200      	movs	r2, #0
 8006edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ede:	f7fd ffcd 	bl	8004e7c <HAL_GetTick>
 8006ee2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ee4:	e008      	b.n	8006ef8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ee6:	f7fd ffc9 	bl	8004e7c <HAL_GetTick>
 8006eea:	4602      	mov	r2, r0
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	1ad3      	subs	r3, r2, r3
 8006ef0:	2b02      	cmp	r3, #2
 8006ef2:	d901      	bls.n	8006ef8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006ef4:	2303      	movs	r3, #3
 8006ef6:	e036      	b.n	8006f66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ef8:	4b1e      	ldr	r3, [pc, #120]	; (8006f74 <HAL_RCC_OscConfig+0x4d8>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d1f0      	bne.n	8006ee6 <HAL_RCC_OscConfig+0x44a>
 8006f04:	e02e      	b.n	8006f64 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	699b      	ldr	r3, [r3, #24]
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d101      	bne.n	8006f12 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e029      	b.n	8006f66 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006f12:	4b18      	ldr	r3, [pc, #96]	; (8006f74 <HAL_RCC_OscConfig+0x4d8>)
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	69db      	ldr	r3, [r3, #28]
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d11c      	bne.n	8006f60 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d115      	bne.n	8006f60 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006f34:	68fa      	ldr	r2, [r7, #12]
 8006f36:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006f3a:	4013      	ands	r3, r2
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d10d      	bne.n	8006f60 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d106      	bne.n	8006f60 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d001      	beq.n	8006f64 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006f60:	2301      	movs	r3, #1
 8006f62:	e000      	b.n	8006f66 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006f64:	2300      	movs	r3, #0
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3718      	adds	r7, #24
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	40007000 	.word	0x40007000
 8006f74:	40023800 	.word	0x40023800
 8006f78:	42470060 	.word	0x42470060

08006f7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d101      	bne.n	8006f90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	e0cc      	b.n	800712a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006f90:	4b68      	ldr	r3, [pc, #416]	; (8007134 <HAL_RCC_ClockConfig+0x1b8>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f003 030f 	and.w	r3, r3, #15
 8006f98:	683a      	ldr	r2, [r7, #0]
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d90c      	bls.n	8006fb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f9e:	4b65      	ldr	r3, [pc, #404]	; (8007134 <HAL_RCC_ClockConfig+0x1b8>)
 8006fa0:	683a      	ldr	r2, [r7, #0]
 8006fa2:	b2d2      	uxtb	r2, r2
 8006fa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fa6:	4b63      	ldr	r3, [pc, #396]	; (8007134 <HAL_RCC_ClockConfig+0x1b8>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f003 030f 	and.w	r3, r3, #15
 8006fae:	683a      	ldr	r2, [r7, #0]
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d001      	beq.n	8006fb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e0b8      	b.n	800712a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f003 0302 	and.w	r3, r3, #2
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d020      	beq.n	8007006 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f003 0304 	and.w	r3, r3, #4
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d005      	beq.n	8006fdc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006fd0:	4b59      	ldr	r3, [pc, #356]	; (8007138 <HAL_RCC_ClockConfig+0x1bc>)
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	4a58      	ldr	r2, [pc, #352]	; (8007138 <HAL_RCC_ClockConfig+0x1bc>)
 8006fd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006fda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f003 0308 	and.w	r3, r3, #8
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d005      	beq.n	8006ff4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006fe8:	4b53      	ldr	r3, [pc, #332]	; (8007138 <HAL_RCC_ClockConfig+0x1bc>)
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	4a52      	ldr	r2, [pc, #328]	; (8007138 <HAL_RCC_ClockConfig+0x1bc>)
 8006fee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006ff2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ff4:	4b50      	ldr	r3, [pc, #320]	; (8007138 <HAL_RCC_ClockConfig+0x1bc>)
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	494d      	ldr	r1, [pc, #308]	; (8007138 <HAL_RCC_ClockConfig+0x1bc>)
 8007002:	4313      	orrs	r3, r2
 8007004:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f003 0301 	and.w	r3, r3, #1
 800700e:	2b00      	cmp	r3, #0
 8007010:	d044      	beq.n	800709c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	2b01      	cmp	r3, #1
 8007018:	d107      	bne.n	800702a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800701a:	4b47      	ldr	r3, [pc, #284]	; (8007138 <HAL_RCC_ClockConfig+0x1bc>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007022:	2b00      	cmp	r3, #0
 8007024:	d119      	bne.n	800705a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	e07f      	b.n	800712a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	2b02      	cmp	r3, #2
 8007030:	d003      	beq.n	800703a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007036:	2b03      	cmp	r3, #3
 8007038:	d107      	bne.n	800704a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800703a:	4b3f      	ldr	r3, [pc, #252]	; (8007138 <HAL_RCC_ClockConfig+0x1bc>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007042:	2b00      	cmp	r3, #0
 8007044:	d109      	bne.n	800705a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	e06f      	b.n	800712a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800704a:	4b3b      	ldr	r3, [pc, #236]	; (8007138 <HAL_RCC_ClockConfig+0x1bc>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f003 0302 	and.w	r3, r3, #2
 8007052:	2b00      	cmp	r3, #0
 8007054:	d101      	bne.n	800705a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	e067      	b.n	800712a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800705a:	4b37      	ldr	r3, [pc, #220]	; (8007138 <HAL_RCC_ClockConfig+0x1bc>)
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	f023 0203 	bic.w	r2, r3, #3
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	4934      	ldr	r1, [pc, #208]	; (8007138 <HAL_RCC_ClockConfig+0x1bc>)
 8007068:	4313      	orrs	r3, r2
 800706a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800706c:	f7fd ff06 	bl	8004e7c <HAL_GetTick>
 8007070:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007072:	e00a      	b.n	800708a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007074:	f7fd ff02 	bl	8004e7c <HAL_GetTick>
 8007078:	4602      	mov	r2, r0
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	1ad3      	subs	r3, r2, r3
 800707e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007082:	4293      	cmp	r3, r2
 8007084:	d901      	bls.n	800708a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007086:	2303      	movs	r3, #3
 8007088:	e04f      	b.n	800712a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800708a:	4b2b      	ldr	r3, [pc, #172]	; (8007138 <HAL_RCC_ClockConfig+0x1bc>)
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	f003 020c 	and.w	r2, r3, #12
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	009b      	lsls	r3, r3, #2
 8007098:	429a      	cmp	r2, r3
 800709a:	d1eb      	bne.n	8007074 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800709c:	4b25      	ldr	r3, [pc, #148]	; (8007134 <HAL_RCC_ClockConfig+0x1b8>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 030f 	and.w	r3, r3, #15
 80070a4:	683a      	ldr	r2, [r7, #0]
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d20c      	bcs.n	80070c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070aa:	4b22      	ldr	r3, [pc, #136]	; (8007134 <HAL_RCC_ClockConfig+0x1b8>)
 80070ac:	683a      	ldr	r2, [r7, #0]
 80070ae:	b2d2      	uxtb	r2, r2
 80070b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80070b2:	4b20      	ldr	r3, [pc, #128]	; (8007134 <HAL_RCC_ClockConfig+0x1b8>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f003 030f 	and.w	r3, r3, #15
 80070ba:	683a      	ldr	r2, [r7, #0]
 80070bc:	429a      	cmp	r2, r3
 80070be:	d001      	beq.n	80070c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80070c0:	2301      	movs	r3, #1
 80070c2:	e032      	b.n	800712a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f003 0304 	and.w	r3, r3, #4
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d008      	beq.n	80070e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80070d0:	4b19      	ldr	r3, [pc, #100]	; (8007138 <HAL_RCC_ClockConfig+0x1bc>)
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	4916      	ldr	r1, [pc, #88]	; (8007138 <HAL_RCC_ClockConfig+0x1bc>)
 80070de:	4313      	orrs	r3, r2
 80070e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f003 0308 	and.w	r3, r3, #8
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d009      	beq.n	8007102 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80070ee:	4b12      	ldr	r3, [pc, #72]	; (8007138 <HAL_RCC_ClockConfig+0x1bc>)
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	691b      	ldr	r3, [r3, #16]
 80070fa:	00db      	lsls	r3, r3, #3
 80070fc:	490e      	ldr	r1, [pc, #56]	; (8007138 <HAL_RCC_ClockConfig+0x1bc>)
 80070fe:	4313      	orrs	r3, r2
 8007100:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007102:	f000 f821 	bl	8007148 <HAL_RCC_GetSysClockFreq>
 8007106:	4601      	mov	r1, r0
 8007108:	4b0b      	ldr	r3, [pc, #44]	; (8007138 <HAL_RCC_ClockConfig+0x1bc>)
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	091b      	lsrs	r3, r3, #4
 800710e:	f003 030f 	and.w	r3, r3, #15
 8007112:	4a0a      	ldr	r2, [pc, #40]	; (800713c <HAL_RCC_ClockConfig+0x1c0>)
 8007114:	5cd3      	ldrb	r3, [r2, r3]
 8007116:	fa21 f303 	lsr.w	r3, r1, r3
 800711a:	4a09      	ldr	r2, [pc, #36]	; (8007140 <HAL_RCC_ClockConfig+0x1c4>)
 800711c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800711e:	4b09      	ldr	r3, [pc, #36]	; (8007144 <HAL_RCC_ClockConfig+0x1c8>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4618      	mov	r0, r3
 8007124:	f7fd fe66 	bl	8004df4 <HAL_InitTick>

  return HAL_OK;
 8007128:	2300      	movs	r3, #0
}
 800712a:	4618      	mov	r0, r3
 800712c:	3710      	adds	r7, #16
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
 8007132:	bf00      	nop
 8007134:	40023c00 	.word	0x40023c00
 8007138:	40023800 	.word	0x40023800
 800713c:	0800d688 	.word	0x0800d688
 8007140:	20000000 	.word	0x20000000
 8007144:	20000004 	.word	0x20000004

08007148 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800714a:	b085      	sub	sp, #20
 800714c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800714e:	2300      	movs	r3, #0
 8007150:	607b      	str	r3, [r7, #4]
 8007152:	2300      	movs	r3, #0
 8007154:	60fb      	str	r3, [r7, #12]
 8007156:	2300      	movs	r3, #0
 8007158:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800715a:	2300      	movs	r3, #0
 800715c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800715e:	4b63      	ldr	r3, [pc, #396]	; (80072ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	f003 030c 	and.w	r3, r3, #12
 8007166:	2b04      	cmp	r3, #4
 8007168:	d007      	beq.n	800717a <HAL_RCC_GetSysClockFreq+0x32>
 800716a:	2b08      	cmp	r3, #8
 800716c:	d008      	beq.n	8007180 <HAL_RCC_GetSysClockFreq+0x38>
 800716e:	2b00      	cmp	r3, #0
 8007170:	f040 80b4 	bne.w	80072dc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007174:	4b5e      	ldr	r3, [pc, #376]	; (80072f0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007176:	60bb      	str	r3, [r7, #8]
       break;
 8007178:	e0b3      	b.n	80072e2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800717a:	4b5d      	ldr	r3, [pc, #372]	; (80072f0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800717c:	60bb      	str	r3, [r7, #8]
      break;
 800717e:	e0b0      	b.n	80072e2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007180:	4b5a      	ldr	r3, [pc, #360]	; (80072ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007188:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800718a:	4b58      	ldr	r3, [pc, #352]	; (80072ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007192:	2b00      	cmp	r3, #0
 8007194:	d04a      	beq.n	800722c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007196:	4b55      	ldr	r3, [pc, #340]	; (80072ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	099b      	lsrs	r3, r3, #6
 800719c:	f04f 0400 	mov.w	r4, #0
 80071a0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80071a4:	f04f 0200 	mov.w	r2, #0
 80071a8:	ea03 0501 	and.w	r5, r3, r1
 80071ac:	ea04 0602 	and.w	r6, r4, r2
 80071b0:	4629      	mov	r1, r5
 80071b2:	4632      	mov	r2, r6
 80071b4:	f04f 0300 	mov.w	r3, #0
 80071b8:	f04f 0400 	mov.w	r4, #0
 80071bc:	0154      	lsls	r4, r2, #5
 80071be:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80071c2:	014b      	lsls	r3, r1, #5
 80071c4:	4619      	mov	r1, r3
 80071c6:	4622      	mov	r2, r4
 80071c8:	1b49      	subs	r1, r1, r5
 80071ca:	eb62 0206 	sbc.w	r2, r2, r6
 80071ce:	f04f 0300 	mov.w	r3, #0
 80071d2:	f04f 0400 	mov.w	r4, #0
 80071d6:	0194      	lsls	r4, r2, #6
 80071d8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80071dc:	018b      	lsls	r3, r1, #6
 80071de:	1a5b      	subs	r3, r3, r1
 80071e0:	eb64 0402 	sbc.w	r4, r4, r2
 80071e4:	f04f 0100 	mov.w	r1, #0
 80071e8:	f04f 0200 	mov.w	r2, #0
 80071ec:	00e2      	lsls	r2, r4, #3
 80071ee:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80071f2:	00d9      	lsls	r1, r3, #3
 80071f4:	460b      	mov	r3, r1
 80071f6:	4614      	mov	r4, r2
 80071f8:	195b      	adds	r3, r3, r5
 80071fa:	eb44 0406 	adc.w	r4, r4, r6
 80071fe:	f04f 0100 	mov.w	r1, #0
 8007202:	f04f 0200 	mov.w	r2, #0
 8007206:	02a2      	lsls	r2, r4, #10
 8007208:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800720c:	0299      	lsls	r1, r3, #10
 800720e:	460b      	mov	r3, r1
 8007210:	4614      	mov	r4, r2
 8007212:	4618      	mov	r0, r3
 8007214:	4621      	mov	r1, r4
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f04f 0400 	mov.w	r4, #0
 800721c:	461a      	mov	r2, r3
 800721e:	4623      	mov	r3, r4
 8007220:	f7f9 fd62 	bl	8000ce8 <__aeabi_uldivmod>
 8007224:	4603      	mov	r3, r0
 8007226:	460c      	mov	r4, r1
 8007228:	60fb      	str	r3, [r7, #12]
 800722a:	e049      	b.n	80072c0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800722c:	4b2f      	ldr	r3, [pc, #188]	; (80072ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	099b      	lsrs	r3, r3, #6
 8007232:	f04f 0400 	mov.w	r4, #0
 8007236:	f240 11ff 	movw	r1, #511	; 0x1ff
 800723a:	f04f 0200 	mov.w	r2, #0
 800723e:	ea03 0501 	and.w	r5, r3, r1
 8007242:	ea04 0602 	and.w	r6, r4, r2
 8007246:	4629      	mov	r1, r5
 8007248:	4632      	mov	r2, r6
 800724a:	f04f 0300 	mov.w	r3, #0
 800724e:	f04f 0400 	mov.w	r4, #0
 8007252:	0154      	lsls	r4, r2, #5
 8007254:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007258:	014b      	lsls	r3, r1, #5
 800725a:	4619      	mov	r1, r3
 800725c:	4622      	mov	r2, r4
 800725e:	1b49      	subs	r1, r1, r5
 8007260:	eb62 0206 	sbc.w	r2, r2, r6
 8007264:	f04f 0300 	mov.w	r3, #0
 8007268:	f04f 0400 	mov.w	r4, #0
 800726c:	0194      	lsls	r4, r2, #6
 800726e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007272:	018b      	lsls	r3, r1, #6
 8007274:	1a5b      	subs	r3, r3, r1
 8007276:	eb64 0402 	sbc.w	r4, r4, r2
 800727a:	f04f 0100 	mov.w	r1, #0
 800727e:	f04f 0200 	mov.w	r2, #0
 8007282:	00e2      	lsls	r2, r4, #3
 8007284:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007288:	00d9      	lsls	r1, r3, #3
 800728a:	460b      	mov	r3, r1
 800728c:	4614      	mov	r4, r2
 800728e:	195b      	adds	r3, r3, r5
 8007290:	eb44 0406 	adc.w	r4, r4, r6
 8007294:	f04f 0100 	mov.w	r1, #0
 8007298:	f04f 0200 	mov.w	r2, #0
 800729c:	02a2      	lsls	r2, r4, #10
 800729e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80072a2:	0299      	lsls	r1, r3, #10
 80072a4:	460b      	mov	r3, r1
 80072a6:	4614      	mov	r4, r2
 80072a8:	4618      	mov	r0, r3
 80072aa:	4621      	mov	r1, r4
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f04f 0400 	mov.w	r4, #0
 80072b2:	461a      	mov	r2, r3
 80072b4:	4623      	mov	r3, r4
 80072b6:	f7f9 fd17 	bl	8000ce8 <__aeabi_uldivmod>
 80072ba:	4603      	mov	r3, r0
 80072bc:	460c      	mov	r4, r1
 80072be:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80072c0:	4b0a      	ldr	r3, [pc, #40]	; (80072ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	0c1b      	lsrs	r3, r3, #16
 80072c6:	f003 0303 	and.w	r3, r3, #3
 80072ca:	3301      	adds	r3, #1
 80072cc:	005b      	lsls	r3, r3, #1
 80072ce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80072d0:	68fa      	ldr	r2, [r7, #12]
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80072d8:	60bb      	str	r3, [r7, #8]
      break;
 80072da:	e002      	b.n	80072e2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80072dc:	4b04      	ldr	r3, [pc, #16]	; (80072f0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80072de:	60bb      	str	r3, [r7, #8]
      break;
 80072e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80072e2:	68bb      	ldr	r3, [r7, #8]
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3714      	adds	r7, #20
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072ec:	40023800 	.word	0x40023800
 80072f0:	00f42400 	.word	0x00f42400

080072f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072f4:	b480      	push	{r7}
 80072f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80072f8:	4b03      	ldr	r3, [pc, #12]	; (8007308 <HAL_RCC_GetHCLKFreq+0x14>)
 80072fa:	681b      	ldr	r3, [r3, #0]
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr
 8007306:	bf00      	nop
 8007308:	20000000 	.word	0x20000000

0800730c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007310:	f7ff fff0 	bl	80072f4 <HAL_RCC_GetHCLKFreq>
 8007314:	4601      	mov	r1, r0
 8007316:	4b05      	ldr	r3, [pc, #20]	; (800732c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	0a9b      	lsrs	r3, r3, #10
 800731c:	f003 0307 	and.w	r3, r3, #7
 8007320:	4a03      	ldr	r2, [pc, #12]	; (8007330 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007322:	5cd3      	ldrb	r3, [r2, r3]
 8007324:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007328:	4618      	mov	r0, r3
 800732a:	bd80      	pop	{r7, pc}
 800732c:	40023800 	.word	0x40023800
 8007330:	0800d698 	.word	0x0800d698

08007334 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007338:	f7ff ffdc 	bl	80072f4 <HAL_RCC_GetHCLKFreq>
 800733c:	4601      	mov	r1, r0
 800733e:	4b05      	ldr	r3, [pc, #20]	; (8007354 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	0b5b      	lsrs	r3, r3, #13
 8007344:	f003 0307 	and.w	r3, r3, #7
 8007348:	4a03      	ldr	r2, [pc, #12]	; (8007358 <HAL_RCC_GetPCLK2Freq+0x24>)
 800734a:	5cd3      	ldrb	r3, [r2, r3]
 800734c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007350:	4618      	mov	r0, r3
 8007352:	bd80      	pop	{r7, pc}
 8007354:	40023800 	.word	0x40023800
 8007358:	0800d698 	.word	0x0800d698

0800735c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b082      	sub	sp, #8
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d101      	bne.n	800736e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	e01d      	b.n	80073aa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007374:	b2db      	uxtb	r3, r3
 8007376:	2b00      	cmp	r3, #0
 8007378:	d106      	bne.n	8007388 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2200      	movs	r2, #0
 800737e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f7fd f928 	bl	80045d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2202      	movs	r2, #2
 800738c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	3304      	adds	r3, #4
 8007398:	4619      	mov	r1, r3
 800739a:	4610      	mov	r0, r2
 800739c:	f000 fd12 	bl	8007dc4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2201      	movs	r2, #1
 80073a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80073a8:	2300      	movs	r3, #0
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3708      	adds	r7, #8
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}

080073b2 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80073b2:	b480      	push	{r7}
 80073b4:	b085      	sub	sp, #20
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2202      	movs	r2, #2
 80073be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	f003 0307 	and.w	r3, r3, #7
 80073cc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2b06      	cmp	r3, #6
 80073d2:	d007      	beq.n	80073e4 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	681a      	ldr	r2, [r3, #0]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f042 0201 	orr.w	r2, r2, #1
 80073e2:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2201      	movs	r2, #1
 80073e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80073ec:	2300      	movs	r3, #0
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3714      	adds	r7, #20
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr

080073fa <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80073fa:	b480      	push	{r7}
 80073fc:	b085      	sub	sp, #20
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	68da      	ldr	r2, [r3, #12]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f042 0201 	orr.w	r2, r2, #1
 8007410:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	f003 0307 	and.w	r3, r3, #7
 800741c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2b06      	cmp	r3, #6
 8007422:	d007      	beq.n	8007434 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f042 0201 	orr.w	r2, r2, #1
 8007432:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007434:	2300      	movs	r3, #0
}
 8007436:	4618      	mov	r0, r3
 8007438:	3714      	adds	r7, #20
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr

08007442 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007442:	b480      	push	{r7}
 8007444:	b083      	sub	sp, #12
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	68da      	ldr	r2, [r3, #12]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f022 0201 	bic.w	r2, r2, #1
 8007458:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	6a1a      	ldr	r2, [r3, #32]
 8007460:	f241 1311 	movw	r3, #4369	; 0x1111
 8007464:	4013      	ands	r3, r2
 8007466:	2b00      	cmp	r3, #0
 8007468:	d10f      	bne.n	800748a <HAL_TIM_Base_Stop_IT+0x48>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	6a1a      	ldr	r2, [r3, #32]
 8007470:	f240 4344 	movw	r3, #1092	; 0x444
 8007474:	4013      	ands	r3, r2
 8007476:	2b00      	cmp	r3, #0
 8007478:	d107      	bne.n	800748a <HAL_TIM_Base_Stop_IT+0x48>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f022 0201 	bic.w	r2, r2, #1
 8007488:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800748a:	2300      	movs	r3, #0
}
 800748c:	4618      	mov	r0, r3
 800748e:	370c      	adds	r7, #12
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr

08007498 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b082      	sub	sp, #8
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d101      	bne.n	80074aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	e01d      	b.n	80074e6 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d106      	bne.n	80074c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2200      	movs	r2, #0
 80074ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 f815 	bl	80074ee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2202      	movs	r2, #2
 80074c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	3304      	adds	r3, #4
 80074d4:	4619      	mov	r1, r3
 80074d6:	4610      	mov	r0, r2
 80074d8:	f000 fc74 	bl	8007dc4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2201      	movs	r2, #1
 80074e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074e4:	2300      	movs	r3, #0
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3708      	adds	r7, #8
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}

080074ee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80074ee:	b480      	push	{r7}
 80074f0:	b083      	sub	sp, #12
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80074f6:	bf00      	nop
 80074f8:	370c      	adds	r7, #12
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr
	...

08007504 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	2201      	movs	r2, #1
 8007514:	6839      	ldr	r1, [r7, #0]
 8007516:	4618      	mov	r0, r3
 8007518:	f001 f868 	bl	80085ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a15      	ldr	r2, [pc, #84]	; (8007578 <HAL_TIM_PWM_Start+0x74>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d004      	beq.n	8007530 <HAL_TIM_PWM_Start+0x2c>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a14      	ldr	r2, [pc, #80]	; (800757c <HAL_TIM_PWM_Start+0x78>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d101      	bne.n	8007534 <HAL_TIM_PWM_Start+0x30>
 8007530:	2301      	movs	r3, #1
 8007532:	e000      	b.n	8007536 <HAL_TIM_PWM_Start+0x32>
 8007534:	2300      	movs	r3, #0
 8007536:	2b00      	cmp	r3, #0
 8007538:	d007      	beq.n	800754a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007548:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	f003 0307 	and.w	r3, r3, #7
 8007554:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2b06      	cmp	r3, #6
 800755a:	d007      	beq.n	800756c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f042 0201 	orr.w	r2, r2, #1
 800756a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800756c:	2300      	movs	r3, #0
}
 800756e:	4618      	mov	r0, r3
 8007570:	3710      	adds	r7, #16
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
 8007576:	bf00      	nop
 8007578:	40010000 	.word	0x40010000
 800757c:	40010400 	.word	0x40010400

08007580 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b082      	sub	sp, #8
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d101      	bne.n	8007592 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	e01d      	b.n	80075ce <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007598:	b2db      	uxtb	r3, r3
 800759a:	2b00      	cmp	r3, #0
 800759c:	d106      	bne.n	80075ac <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 f815 	bl	80075d6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2202      	movs	r2, #2
 80075b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	3304      	adds	r3, #4
 80075bc:	4619      	mov	r1, r3
 80075be:	4610      	mov	r0, r2
 80075c0:	f000 fc00 	bl	8007dc4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2201      	movs	r2, #1
 80075c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80075cc:	2300      	movs	r3, #0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3708      	adds	r7, #8
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}

080075d6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80075d6:	b480      	push	{r7}
 80075d8:	b083      	sub	sp, #12
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80075de:	bf00      	nop
 80075e0:	370c      	adds	r7, #12
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr
	...

080075ec <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	2b0c      	cmp	r3, #12
 80075fa:	d841      	bhi.n	8007680 <HAL_TIM_IC_Start_IT+0x94>
 80075fc:	a201      	add	r2, pc, #4	; (adr r2, 8007604 <HAL_TIM_IC_Start_IT+0x18>)
 80075fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007602:	bf00      	nop
 8007604:	08007639 	.word	0x08007639
 8007608:	08007681 	.word	0x08007681
 800760c:	08007681 	.word	0x08007681
 8007610:	08007681 	.word	0x08007681
 8007614:	0800764b 	.word	0x0800764b
 8007618:	08007681 	.word	0x08007681
 800761c:	08007681 	.word	0x08007681
 8007620:	08007681 	.word	0x08007681
 8007624:	0800765d 	.word	0x0800765d
 8007628:	08007681 	.word	0x08007681
 800762c:	08007681 	.word	0x08007681
 8007630:	08007681 	.word	0x08007681
 8007634:	0800766f 	.word	0x0800766f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	68da      	ldr	r2, [r3, #12]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f042 0202 	orr.w	r2, r2, #2
 8007646:	60da      	str	r2, [r3, #12]
      break;
 8007648:	e01b      	b.n	8007682 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	68da      	ldr	r2, [r3, #12]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f042 0204 	orr.w	r2, r2, #4
 8007658:	60da      	str	r2, [r3, #12]
      break;
 800765a:	e012      	b.n	8007682 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	68da      	ldr	r2, [r3, #12]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f042 0208 	orr.w	r2, r2, #8
 800766a:	60da      	str	r2, [r3, #12]
      break;
 800766c:	e009      	b.n	8007682 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	68da      	ldr	r2, [r3, #12]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f042 0210 	orr.w	r2, r2, #16
 800767c:	60da      	str	r2, [r3, #12]
      break;
 800767e:	e000      	b.n	8007682 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8007680:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	2201      	movs	r2, #1
 8007688:	6839      	ldr	r1, [r7, #0]
 800768a:	4618      	mov	r0, r3
 800768c:	f000 ffae 	bl	80085ec <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	f003 0307 	and.w	r3, r3, #7
 800769a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2b06      	cmp	r3, #6
 80076a0:	d007      	beq.n	80076b2 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f042 0201 	orr.w	r2, r2, #1
 80076b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80076b2:	2300      	movs	r3, #0
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3710      	adds	r7, #16
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}

080076bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b082      	sub	sp, #8
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	691b      	ldr	r3, [r3, #16]
 80076ca:	f003 0302 	and.w	r3, r3, #2
 80076ce:	2b02      	cmp	r3, #2
 80076d0:	d122      	bne.n	8007718 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	68db      	ldr	r3, [r3, #12]
 80076d8:	f003 0302 	and.w	r3, r3, #2
 80076dc:	2b02      	cmp	r3, #2
 80076de:	d11b      	bne.n	8007718 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f06f 0202 	mvn.w	r2, #2
 80076e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2201      	movs	r2, #1
 80076ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	699b      	ldr	r3, [r3, #24]
 80076f6:	f003 0303 	and.w	r3, r3, #3
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d003      	beq.n	8007706 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f7fb ff9c 	bl	800363c <HAL_TIM_IC_CaptureCallback>
 8007704:	e005      	b.n	8007712 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 fb3e 	bl	8007d88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f000 fb45 	bl	8007d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2200      	movs	r2, #0
 8007716:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	691b      	ldr	r3, [r3, #16]
 800771e:	f003 0304 	and.w	r3, r3, #4
 8007722:	2b04      	cmp	r3, #4
 8007724:	d122      	bne.n	800776c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	f003 0304 	and.w	r3, r3, #4
 8007730:	2b04      	cmp	r3, #4
 8007732:	d11b      	bne.n	800776c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f06f 0204 	mvn.w	r2, #4
 800773c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2202      	movs	r2, #2
 8007742:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	699b      	ldr	r3, [r3, #24]
 800774a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800774e:	2b00      	cmp	r3, #0
 8007750:	d003      	beq.n	800775a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f7fb ff72 	bl	800363c <HAL_TIM_IC_CaptureCallback>
 8007758:	e005      	b.n	8007766 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 fb14 	bl	8007d88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 fb1b 	bl	8007d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2200      	movs	r2, #0
 800776a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	691b      	ldr	r3, [r3, #16]
 8007772:	f003 0308 	and.w	r3, r3, #8
 8007776:	2b08      	cmp	r3, #8
 8007778:	d122      	bne.n	80077c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	f003 0308 	and.w	r3, r3, #8
 8007784:	2b08      	cmp	r3, #8
 8007786:	d11b      	bne.n	80077c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f06f 0208 	mvn.w	r2, #8
 8007790:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2204      	movs	r2, #4
 8007796:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	69db      	ldr	r3, [r3, #28]
 800779e:	f003 0303 	and.w	r3, r3, #3
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d003      	beq.n	80077ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f7fb ff48 	bl	800363c <HAL_TIM_IC_CaptureCallback>
 80077ac:	e005      	b.n	80077ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 faea 	bl	8007d88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 faf1 	bl	8007d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2200      	movs	r2, #0
 80077be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	691b      	ldr	r3, [r3, #16]
 80077c6:	f003 0310 	and.w	r3, r3, #16
 80077ca:	2b10      	cmp	r3, #16
 80077cc:	d122      	bne.n	8007814 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	68db      	ldr	r3, [r3, #12]
 80077d4:	f003 0310 	and.w	r3, r3, #16
 80077d8:	2b10      	cmp	r3, #16
 80077da:	d11b      	bne.n	8007814 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f06f 0210 	mvn.w	r2, #16
 80077e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2208      	movs	r2, #8
 80077ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	69db      	ldr	r3, [r3, #28]
 80077f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d003      	beq.n	8007802 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f7fb ff1e 	bl	800363c <HAL_TIM_IC_CaptureCallback>
 8007800:	e005      	b.n	800780e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 fac0 	bl	8007d88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 fac7 	bl	8007d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	691b      	ldr	r3, [r3, #16]
 800781a:	f003 0301 	and.w	r3, r3, #1
 800781e:	2b01      	cmp	r3, #1
 8007820:	d10e      	bne.n	8007840 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	f003 0301 	and.w	r3, r3, #1
 800782c:	2b01      	cmp	r3, #1
 800782e:	d107      	bne.n	8007840 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f06f 0201 	mvn.w	r2, #1
 8007838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f7fb fe42 	bl	80034c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	691b      	ldr	r3, [r3, #16]
 8007846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800784a:	2b80      	cmp	r3, #128	; 0x80
 800784c:	d10e      	bne.n	800786c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	68db      	ldr	r3, [r3, #12]
 8007854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007858:	2b80      	cmp	r3, #128	; 0x80
 800785a:	d107      	bne.n	800786c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 ff6c 	bl	8008744 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	691b      	ldr	r3, [r3, #16]
 8007872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007876:	2b40      	cmp	r3, #64	; 0x40
 8007878:	d10e      	bne.n	8007898 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	68db      	ldr	r3, [r3, #12]
 8007880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007884:	2b40      	cmp	r3, #64	; 0x40
 8007886:	d107      	bne.n	8007898 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007890:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 fa8c 	bl	8007db0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	691b      	ldr	r3, [r3, #16]
 800789e:	f003 0320 	and.w	r3, r3, #32
 80078a2:	2b20      	cmp	r3, #32
 80078a4:	d10e      	bne.n	80078c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	68db      	ldr	r3, [r3, #12]
 80078ac:	f003 0320 	and.w	r3, r3, #32
 80078b0:	2b20      	cmp	r3, #32
 80078b2:	d107      	bne.n	80078c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f06f 0220 	mvn.w	r2, #32
 80078bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 ff36 	bl	8008730 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80078c4:	bf00      	nop
 80078c6:	3708      	adds	r7, #8
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}

080078cc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b084      	sub	sp, #16
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	60f8      	str	r0, [r7, #12]
 80078d4:	60b9      	str	r1, [r7, #8]
 80078d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d101      	bne.n	80078e6 <HAL_TIM_IC_ConfigChannel+0x1a>
 80078e2:	2302      	movs	r3, #2
 80078e4:	e08a      	b.n	80079fc <HAL_TIM_IC_ConfigChannel+0x130>
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2201      	movs	r2, #1
 80078ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2202      	movs	r2, #2
 80078f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d11b      	bne.n	8007934 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	6818      	ldr	r0, [r3, #0]
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	6819      	ldr	r1, [r3, #0]
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	685a      	ldr	r2, [r3, #4]
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	68db      	ldr	r3, [r3, #12]
 800790c:	f000 fcaa 	bl	8008264 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	699a      	ldr	r2, [r3, #24]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f022 020c 	bic.w	r2, r2, #12
 800791e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	6999      	ldr	r1, [r3, #24]
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	689a      	ldr	r2, [r3, #8]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	430a      	orrs	r2, r1
 8007930:	619a      	str	r2, [r3, #24]
 8007932:	e05a      	b.n	80079ea <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2b04      	cmp	r3, #4
 8007938:	d11c      	bne.n	8007974 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	6818      	ldr	r0, [r3, #0]
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	6819      	ldr	r1, [r3, #0]
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	685a      	ldr	r2, [r3, #4]
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	68db      	ldr	r3, [r3, #12]
 800794a:	f000 fd2e 	bl	80083aa <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	699a      	ldr	r2, [r3, #24]
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800795c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	6999      	ldr	r1, [r3, #24]
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	021a      	lsls	r2, r3, #8
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	430a      	orrs	r2, r1
 8007970:	619a      	str	r2, [r3, #24]
 8007972:	e03a      	b.n	80079ea <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2b08      	cmp	r3, #8
 8007978:	d11b      	bne.n	80079b2 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	6818      	ldr	r0, [r3, #0]
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	6819      	ldr	r1, [r3, #0]
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	685a      	ldr	r2, [r3, #4]
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	68db      	ldr	r3, [r3, #12]
 800798a:	f000 fd7b 	bl	8008484 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	69da      	ldr	r2, [r3, #28]
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f022 020c 	bic.w	r2, r2, #12
 800799c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	69d9      	ldr	r1, [r3, #28]
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	689a      	ldr	r2, [r3, #8]
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	430a      	orrs	r2, r1
 80079ae:	61da      	str	r2, [r3, #28]
 80079b0:	e01b      	b.n	80079ea <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	6818      	ldr	r0, [r3, #0]
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	6819      	ldr	r1, [r3, #0]
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	685a      	ldr	r2, [r3, #4]
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	68db      	ldr	r3, [r3, #12]
 80079c2:	f000 fd9b 	bl	80084fc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	69da      	ldr	r2, [r3, #28]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80079d4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	69d9      	ldr	r1, [r3, #28]
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	021a      	lsls	r2, r3, #8
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	430a      	orrs	r2, r1
 80079e8:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2201      	movs	r2, #1
 80079ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	2200      	movs	r2, #0
 80079f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80079fa:	2300      	movs	r3, #0
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3710      	adds	r7, #16
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b084      	sub	sp, #16
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	60f8      	str	r0, [r7, #12]
 8007a0c:	60b9      	str	r1, [r7, #8]
 8007a0e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a16:	2b01      	cmp	r3, #1
 8007a18:	d101      	bne.n	8007a1e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007a1a:	2302      	movs	r3, #2
 8007a1c:	e0b4      	b.n	8007b88 <HAL_TIM_PWM_ConfigChannel+0x184>
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2201      	movs	r2, #1
 8007a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2202      	movs	r2, #2
 8007a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2b0c      	cmp	r3, #12
 8007a32:	f200 809f 	bhi.w	8007b74 <HAL_TIM_PWM_ConfigChannel+0x170>
 8007a36:	a201      	add	r2, pc, #4	; (adr r2, 8007a3c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a3c:	08007a71 	.word	0x08007a71
 8007a40:	08007b75 	.word	0x08007b75
 8007a44:	08007b75 	.word	0x08007b75
 8007a48:	08007b75 	.word	0x08007b75
 8007a4c:	08007ab1 	.word	0x08007ab1
 8007a50:	08007b75 	.word	0x08007b75
 8007a54:	08007b75 	.word	0x08007b75
 8007a58:	08007b75 	.word	0x08007b75
 8007a5c:	08007af3 	.word	0x08007af3
 8007a60:	08007b75 	.word	0x08007b75
 8007a64:	08007b75 	.word	0x08007b75
 8007a68:	08007b75 	.word	0x08007b75
 8007a6c:	08007b33 	.word	0x08007b33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	68b9      	ldr	r1, [r7, #8]
 8007a76:	4618      	mov	r0, r3
 8007a78:	f000 fa44 	bl	8007f04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	699a      	ldr	r2, [r3, #24]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f042 0208 	orr.w	r2, r2, #8
 8007a8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	699a      	ldr	r2, [r3, #24]
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f022 0204 	bic.w	r2, r2, #4
 8007a9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	6999      	ldr	r1, [r3, #24]
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	691a      	ldr	r2, [r3, #16]
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	430a      	orrs	r2, r1
 8007aac:	619a      	str	r2, [r3, #24]
      break;
 8007aae:	e062      	b.n	8007b76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	68b9      	ldr	r1, [r7, #8]
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f000 fa94 	bl	8007fe4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	699a      	ldr	r2, [r3, #24]
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007aca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	699a      	ldr	r2, [r3, #24]
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ada:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	6999      	ldr	r1, [r3, #24]
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	691b      	ldr	r3, [r3, #16]
 8007ae6:	021a      	lsls	r2, r3, #8
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	430a      	orrs	r2, r1
 8007aee:	619a      	str	r2, [r3, #24]
      break;
 8007af0:	e041      	b.n	8007b76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	68b9      	ldr	r1, [r7, #8]
 8007af8:	4618      	mov	r0, r3
 8007afa:	f000 fae9 	bl	80080d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	69da      	ldr	r2, [r3, #28]
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f042 0208 	orr.w	r2, r2, #8
 8007b0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	69da      	ldr	r2, [r3, #28]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f022 0204 	bic.w	r2, r2, #4
 8007b1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	69d9      	ldr	r1, [r3, #28]
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	691a      	ldr	r2, [r3, #16]
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	430a      	orrs	r2, r1
 8007b2e:	61da      	str	r2, [r3, #28]
      break;
 8007b30:	e021      	b.n	8007b76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	68b9      	ldr	r1, [r7, #8]
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f000 fb3d 	bl	80081b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	69da      	ldr	r2, [r3, #28]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	69da      	ldr	r2, [r3, #28]
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	69d9      	ldr	r1, [r3, #28]
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	691b      	ldr	r3, [r3, #16]
 8007b68:	021a      	lsls	r2, r3, #8
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	430a      	orrs	r2, r1
 8007b70:	61da      	str	r2, [r3, #28]
      break;
 8007b72:	e000      	b.n	8007b76 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8007b74:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2200      	movs	r2, #0
 8007b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b86:	2300      	movs	r3, #0
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3710      	adds	r7, #16
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b084      	sub	sp, #16
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d101      	bne.n	8007ba8 <HAL_TIM_ConfigClockSource+0x18>
 8007ba4:	2302      	movs	r3, #2
 8007ba6:	e0a6      	b.n	8007cf6 <HAL_TIM_ConfigClockSource+0x166>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2201      	movs	r2, #1
 8007bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2202      	movs	r2, #2
 8007bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007bc6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007bce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	68fa      	ldr	r2, [r7, #12]
 8007bd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	2b40      	cmp	r3, #64	; 0x40
 8007bde:	d067      	beq.n	8007cb0 <HAL_TIM_ConfigClockSource+0x120>
 8007be0:	2b40      	cmp	r3, #64	; 0x40
 8007be2:	d80b      	bhi.n	8007bfc <HAL_TIM_ConfigClockSource+0x6c>
 8007be4:	2b10      	cmp	r3, #16
 8007be6:	d073      	beq.n	8007cd0 <HAL_TIM_ConfigClockSource+0x140>
 8007be8:	2b10      	cmp	r3, #16
 8007bea:	d802      	bhi.n	8007bf2 <HAL_TIM_ConfigClockSource+0x62>
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d06f      	beq.n	8007cd0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007bf0:	e078      	b.n	8007ce4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007bf2:	2b20      	cmp	r3, #32
 8007bf4:	d06c      	beq.n	8007cd0 <HAL_TIM_ConfigClockSource+0x140>
 8007bf6:	2b30      	cmp	r3, #48	; 0x30
 8007bf8:	d06a      	beq.n	8007cd0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007bfa:	e073      	b.n	8007ce4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007bfc:	2b70      	cmp	r3, #112	; 0x70
 8007bfe:	d00d      	beq.n	8007c1c <HAL_TIM_ConfigClockSource+0x8c>
 8007c00:	2b70      	cmp	r3, #112	; 0x70
 8007c02:	d804      	bhi.n	8007c0e <HAL_TIM_ConfigClockSource+0x7e>
 8007c04:	2b50      	cmp	r3, #80	; 0x50
 8007c06:	d033      	beq.n	8007c70 <HAL_TIM_ConfigClockSource+0xe0>
 8007c08:	2b60      	cmp	r3, #96	; 0x60
 8007c0a:	d041      	beq.n	8007c90 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007c0c:	e06a      	b.n	8007ce4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c12:	d066      	beq.n	8007ce2 <HAL_TIM_ConfigClockSource+0x152>
 8007c14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c18:	d017      	beq.n	8007c4a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007c1a:	e063      	b.n	8007ce4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6818      	ldr	r0, [r3, #0]
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	6899      	ldr	r1, [r3, #8]
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	685a      	ldr	r2, [r3, #4]
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	68db      	ldr	r3, [r3, #12]
 8007c2c:	f000 fcbe 	bl	80085ac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	689b      	ldr	r3, [r3, #8]
 8007c36:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007c3e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	68fa      	ldr	r2, [r7, #12]
 8007c46:	609a      	str	r2, [r3, #8]
      break;
 8007c48:	e04c      	b.n	8007ce4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6818      	ldr	r0, [r3, #0]
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	6899      	ldr	r1, [r3, #8]
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	685a      	ldr	r2, [r3, #4]
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	68db      	ldr	r3, [r3, #12]
 8007c5a:	f000 fca7 	bl	80085ac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	689a      	ldr	r2, [r3, #8]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007c6c:	609a      	str	r2, [r3, #8]
      break;
 8007c6e:	e039      	b.n	8007ce4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6818      	ldr	r0, [r3, #0]
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	6859      	ldr	r1, [r3, #4]
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	68db      	ldr	r3, [r3, #12]
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	f000 fb65 	bl	800834c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	2150      	movs	r1, #80	; 0x50
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f000 fc74 	bl	8008576 <TIM_ITRx_SetConfig>
      break;
 8007c8e:	e029      	b.n	8007ce4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6818      	ldr	r0, [r3, #0]
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	6859      	ldr	r1, [r3, #4]
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	68db      	ldr	r3, [r3, #12]
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	f000 fbc1 	bl	8008424 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	2160      	movs	r1, #96	; 0x60
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f000 fc64 	bl	8008576 <TIM_ITRx_SetConfig>
      break;
 8007cae:	e019      	b.n	8007ce4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6818      	ldr	r0, [r3, #0]
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	6859      	ldr	r1, [r3, #4]
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	68db      	ldr	r3, [r3, #12]
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	f000 fb45 	bl	800834c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	2140      	movs	r1, #64	; 0x40
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f000 fc54 	bl	8008576 <TIM_ITRx_SetConfig>
      break;
 8007cce:	e009      	b.n	8007ce4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4619      	mov	r1, r3
 8007cda:	4610      	mov	r0, r2
 8007cdc:	f000 fc4b 	bl	8008576 <TIM_ITRx_SetConfig>
      break;
 8007ce0:	e000      	b.n	8007ce4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8007ce2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007cf4:	2300      	movs	r3, #0
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3710      	adds	r7, #16
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}
	...

08007d00 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b085      	sub	sp, #20
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	2b0c      	cmp	r3, #12
 8007d12:	d831      	bhi.n	8007d78 <HAL_TIM_ReadCapturedValue+0x78>
 8007d14:	a201      	add	r2, pc, #4	; (adr r2, 8007d1c <HAL_TIM_ReadCapturedValue+0x1c>)
 8007d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d1a:	bf00      	nop
 8007d1c:	08007d51 	.word	0x08007d51
 8007d20:	08007d79 	.word	0x08007d79
 8007d24:	08007d79 	.word	0x08007d79
 8007d28:	08007d79 	.word	0x08007d79
 8007d2c:	08007d5b 	.word	0x08007d5b
 8007d30:	08007d79 	.word	0x08007d79
 8007d34:	08007d79 	.word	0x08007d79
 8007d38:	08007d79 	.word	0x08007d79
 8007d3c:	08007d65 	.word	0x08007d65
 8007d40:	08007d79 	.word	0x08007d79
 8007d44:	08007d79 	.word	0x08007d79
 8007d48:	08007d79 	.word	0x08007d79
 8007d4c:	08007d6f 	.word	0x08007d6f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d56:	60fb      	str	r3, [r7, #12]

      break;
 8007d58:	e00f      	b.n	8007d7a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d60:	60fb      	str	r3, [r7, #12]

      break;
 8007d62:	e00a      	b.n	8007d7a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d6a:	60fb      	str	r3, [r7, #12]

      break;
 8007d6c:	e005      	b.n	8007d7a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d74:	60fb      	str	r3, [r7, #12]

      break;
 8007d76:	e000      	b.n	8007d7a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007d78:	bf00      	nop
  }

  return tmpreg;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3714      	adds	r7, #20
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr

08007d88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b083      	sub	sp, #12
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d90:	bf00      	nop
 8007d92:	370c      	adds	r7, #12
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b083      	sub	sp, #12
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007da4:	bf00      	nop
 8007da6:	370c      	adds	r7, #12
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr

08007db0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b083      	sub	sp, #12
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007db8:	bf00      	nop
 8007dba:	370c      	adds	r7, #12
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr

08007dc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b085      	sub	sp, #20
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	4a40      	ldr	r2, [pc, #256]	; (8007ed8 <TIM_Base_SetConfig+0x114>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d013      	beq.n	8007e04 <TIM_Base_SetConfig+0x40>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007de2:	d00f      	beq.n	8007e04 <TIM_Base_SetConfig+0x40>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	4a3d      	ldr	r2, [pc, #244]	; (8007edc <TIM_Base_SetConfig+0x118>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d00b      	beq.n	8007e04 <TIM_Base_SetConfig+0x40>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	4a3c      	ldr	r2, [pc, #240]	; (8007ee0 <TIM_Base_SetConfig+0x11c>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d007      	beq.n	8007e04 <TIM_Base_SetConfig+0x40>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	4a3b      	ldr	r2, [pc, #236]	; (8007ee4 <TIM_Base_SetConfig+0x120>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d003      	beq.n	8007e04 <TIM_Base_SetConfig+0x40>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	4a3a      	ldr	r2, [pc, #232]	; (8007ee8 <TIM_Base_SetConfig+0x124>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d108      	bne.n	8007e16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	68fa      	ldr	r2, [r7, #12]
 8007e12:	4313      	orrs	r3, r2
 8007e14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	4a2f      	ldr	r2, [pc, #188]	; (8007ed8 <TIM_Base_SetConfig+0x114>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d02b      	beq.n	8007e76 <TIM_Base_SetConfig+0xb2>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e24:	d027      	beq.n	8007e76 <TIM_Base_SetConfig+0xb2>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	4a2c      	ldr	r2, [pc, #176]	; (8007edc <TIM_Base_SetConfig+0x118>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d023      	beq.n	8007e76 <TIM_Base_SetConfig+0xb2>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	4a2b      	ldr	r2, [pc, #172]	; (8007ee0 <TIM_Base_SetConfig+0x11c>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d01f      	beq.n	8007e76 <TIM_Base_SetConfig+0xb2>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	4a2a      	ldr	r2, [pc, #168]	; (8007ee4 <TIM_Base_SetConfig+0x120>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d01b      	beq.n	8007e76 <TIM_Base_SetConfig+0xb2>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	4a29      	ldr	r2, [pc, #164]	; (8007ee8 <TIM_Base_SetConfig+0x124>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d017      	beq.n	8007e76 <TIM_Base_SetConfig+0xb2>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	4a28      	ldr	r2, [pc, #160]	; (8007eec <TIM_Base_SetConfig+0x128>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d013      	beq.n	8007e76 <TIM_Base_SetConfig+0xb2>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	4a27      	ldr	r2, [pc, #156]	; (8007ef0 <TIM_Base_SetConfig+0x12c>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d00f      	beq.n	8007e76 <TIM_Base_SetConfig+0xb2>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	4a26      	ldr	r2, [pc, #152]	; (8007ef4 <TIM_Base_SetConfig+0x130>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d00b      	beq.n	8007e76 <TIM_Base_SetConfig+0xb2>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	4a25      	ldr	r2, [pc, #148]	; (8007ef8 <TIM_Base_SetConfig+0x134>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d007      	beq.n	8007e76 <TIM_Base_SetConfig+0xb2>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	4a24      	ldr	r2, [pc, #144]	; (8007efc <TIM_Base_SetConfig+0x138>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d003      	beq.n	8007e76 <TIM_Base_SetConfig+0xb2>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	4a23      	ldr	r2, [pc, #140]	; (8007f00 <TIM_Base_SetConfig+0x13c>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d108      	bne.n	8007e88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	68db      	ldr	r3, [r3, #12]
 8007e82:	68fa      	ldr	r2, [r7, #12]
 8007e84:	4313      	orrs	r3, r2
 8007e86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	695b      	ldr	r3, [r3, #20]
 8007e92:	4313      	orrs	r3, r2
 8007e94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	68fa      	ldr	r2, [r7, #12]
 8007e9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	689a      	ldr	r2, [r3, #8]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	681a      	ldr	r2, [r3, #0]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	4a0a      	ldr	r2, [pc, #40]	; (8007ed8 <TIM_Base_SetConfig+0x114>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d003      	beq.n	8007ebc <TIM_Base_SetConfig+0xf8>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	4a0c      	ldr	r2, [pc, #48]	; (8007ee8 <TIM_Base_SetConfig+0x124>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d103      	bne.n	8007ec4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	691a      	ldr	r2, [r3, #16]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	615a      	str	r2, [r3, #20]
}
 8007eca:	bf00      	nop
 8007ecc:	3714      	adds	r7, #20
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr
 8007ed6:	bf00      	nop
 8007ed8:	40010000 	.word	0x40010000
 8007edc:	40000400 	.word	0x40000400
 8007ee0:	40000800 	.word	0x40000800
 8007ee4:	40000c00 	.word	0x40000c00
 8007ee8:	40010400 	.word	0x40010400
 8007eec:	40014000 	.word	0x40014000
 8007ef0:	40014400 	.word	0x40014400
 8007ef4:	40014800 	.word	0x40014800
 8007ef8:	40001800 	.word	0x40001800
 8007efc:	40001c00 	.word	0x40001c00
 8007f00:	40002000 	.word	0x40002000

08007f04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b087      	sub	sp, #28
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6a1b      	ldr	r3, [r3, #32]
 8007f12:	f023 0201 	bic.w	r2, r3, #1
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6a1b      	ldr	r3, [r3, #32]
 8007f1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	699b      	ldr	r3, [r3, #24]
 8007f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f023 0303 	bic.w	r3, r3, #3
 8007f3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	68fa      	ldr	r2, [r7, #12]
 8007f42:	4313      	orrs	r3, r2
 8007f44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	f023 0302 	bic.w	r3, r3, #2
 8007f4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	697a      	ldr	r2, [r7, #20]
 8007f54:	4313      	orrs	r3, r2
 8007f56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	4a20      	ldr	r2, [pc, #128]	; (8007fdc <TIM_OC1_SetConfig+0xd8>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d003      	beq.n	8007f68 <TIM_OC1_SetConfig+0x64>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	4a1f      	ldr	r2, [pc, #124]	; (8007fe0 <TIM_OC1_SetConfig+0xdc>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d10c      	bne.n	8007f82 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	f023 0308 	bic.w	r3, r3, #8
 8007f6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	68db      	ldr	r3, [r3, #12]
 8007f74:	697a      	ldr	r2, [r7, #20]
 8007f76:	4313      	orrs	r3, r2
 8007f78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	f023 0304 	bic.w	r3, r3, #4
 8007f80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	4a15      	ldr	r2, [pc, #84]	; (8007fdc <TIM_OC1_SetConfig+0xd8>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d003      	beq.n	8007f92 <TIM_OC1_SetConfig+0x8e>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	4a14      	ldr	r2, [pc, #80]	; (8007fe0 <TIM_OC1_SetConfig+0xdc>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d111      	bne.n	8007fb6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007fa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	695b      	ldr	r3, [r3, #20]
 8007fa6:	693a      	ldr	r2, [r7, #16]
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	699b      	ldr	r3, [r3, #24]
 8007fb0:	693a      	ldr	r2, [r7, #16]
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	693a      	ldr	r2, [r7, #16]
 8007fba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	68fa      	ldr	r2, [r7, #12]
 8007fc0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	685a      	ldr	r2, [r3, #4]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	697a      	ldr	r2, [r7, #20]
 8007fce:	621a      	str	r2, [r3, #32]
}
 8007fd0:	bf00      	nop
 8007fd2:	371c      	adds	r7, #28
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr
 8007fdc:	40010000 	.word	0x40010000
 8007fe0:	40010400 	.word	0x40010400

08007fe4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b087      	sub	sp, #28
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6a1b      	ldr	r3, [r3, #32]
 8007ff2:	f023 0210 	bic.w	r2, r3, #16
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6a1b      	ldr	r3, [r3, #32]
 8007ffe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	699b      	ldr	r3, [r3, #24]
 800800a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008012:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800801a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	021b      	lsls	r3, r3, #8
 8008022:	68fa      	ldr	r2, [r7, #12]
 8008024:	4313      	orrs	r3, r2
 8008026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	f023 0320 	bic.w	r3, r3, #32
 800802e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	689b      	ldr	r3, [r3, #8]
 8008034:	011b      	lsls	r3, r3, #4
 8008036:	697a      	ldr	r2, [r7, #20]
 8008038:	4313      	orrs	r3, r2
 800803a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	4a22      	ldr	r2, [pc, #136]	; (80080c8 <TIM_OC2_SetConfig+0xe4>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d003      	beq.n	800804c <TIM_OC2_SetConfig+0x68>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	4a21      	ldr	r2, [pc, #132]	; (80080cc <TIM_OC2_SetConfig+0xe8>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d10d      	bne.n	8008068 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008052:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	68db      	ldr	r3, [r3, #12]
 8008058:	011b      	lsls	r3, r3, #4
 800805a:	697a      	ldr	r2, [r7, #20]
 800805c:	4313      	orrs	r3, r2
 800805e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008066:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	4a17      	ldr	r2, [pc, #92]	; (80080c8 <TIM_OC2_SetConfig+0xe4>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d003      	beq.n	8008078 <TIM_OC2_SetConfig+0x94>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	4a16      	ldr	r2, [pc, #88]	; (80080cc <TIM_OC2_SetConfig+0xe8>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d113      	bne.n	80080a0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800807e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008086:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	695b      	ldr	r3, [r3, #20]
 800808c:	009b      	lsls	r3, r3, #2
 800808e:	693a      	ldr	r2, [r7, #16]
 8008090:	4313      	orrs	r3, r2
 8008092:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	699b      	ldr	r3, [r3, #24]
 8008098:	009b      	lsls	r3, r3, #2
 800809a:	693a      	ldr	r2, [r7, #16]
 800809c:	4313      	orrs	r3, r2
 800809e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	693a      	ldr	r2, [r7, #16]
 80080a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	68fa      	ldr	r2, [r7, #12]
 80080aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	685a      	ldr	r2, [r3, #4]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	697a      	ldr	r2, [r7, #20]
 80080b8:	621a      	str	r2, [r3, #32]
}
 80080ba:	bf00      	nop
 80080bc:	371c      	adds	r7, #28
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr
 80080c6:	bf00      	nop
 80080c8:	40010000 	.word	0x40010000
 80080cc:	40010400 	.word	0x40010400

080080d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b087      	sub	sp, #28
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6a1b      	ldr	r3, [r3, #32]
 80080de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6a1b      	ldr	r3, [r3, #32]
 80080ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	69db      	ldr	r3, [r3, #28]
 80080f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f023 0303 	bic.w	r3, r3, #3
 8008106:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	68fa      	ldr	r2, [r7, #12]
 800810e:	4313      	orrs	r3, r2
 8008110:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008118:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	689b      	ldr	r3, [r3, #8]
 800811e:	021b      	lsls	r3, r3, #8
 8008120:	697a      	ldr	r2, [r7, #20]
 8008122:	4313      	orrs	r3, r2
 8008124:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	4a21      	ldr	r2, [pc, #132]	; (80081b0 <TIM_OC3_SetConfig+0xe0>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d003      	beq.n	8008136 <TIM_OC3_SetConfig+0x66>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	4a20      	ldr	r2, [pc, #128]	; (80081b4 <TIM_OC3_SetConfig+0xe4>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d10d      	bne.n	8008152 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800813c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	68db      	ldr	r3, [r3, #12]
 8008142:	021b      	lsls	r3, r3, #8
 8008144:	697a      	ldr	r2, [r7, #20]
 8008146:	4313      	orrs	r3, r2
 8008148:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008150:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	4a16      	ldr	r2, [pc, #88]	; (80081b0 <TIM_OC3_SetConfig+0xe0>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d003      	beq.n	8008162 <TIM_OC3_SetConfig+0x92>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	4a15      	ldr	r2, [pc, #84]	; (80081b4 <TIM_OC3_SetConfig+0xe4>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d113      	bne.n	800818a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008168:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008170:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	695b      	ldr	r3, [r3, #20]
 8008176:	011b      	lsls	r3, r3, #4
 8008178:	693a      	ldr	r2, [r7, #16]
 800817a:	4313      	orrs	r3, r2
 800817c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	699b      	ldr	r3, [r3, #24]
 8008182:	011b      	lsls	r3, r3, #4
 8008184:	693a      	ldr	r2, [r7, #16]
 8008186:	4313      	orrs	r3, r2
 8008188:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	693a      	ldr	r2, [r7, #16]
 800818e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	68fa      	ldr	r2, [r7, #12]
 8008194:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	685a      	ldr	r2, [r3, #4]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	697a      	ldr	r2, [r7, #20]
 80081a2:	621a      	str	r2, [r3, #32]
}
 80081a4:	bf00      	nop
 80081a6:	371c      	adds	r7, #28
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr
 80081b0:	40010000 	.word	0x40010000
 80081b4:	40010400 	.word	0x40010400

080081b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b087      	sub	sp, #28
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6a1b      	ldr	r3, [r3, #32]
 80081c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6a1b      	ldr	r3, [r3, #32]
 80081d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	69db      	ldr	r3, [r3, #28]
 80081de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	021b      	lsls	r3, r3, #8
 80081f6:	68fa      	ldr	r2, [r7, #12]
 80081f8:	4313      	orrs	r3, r2
 80081fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008202:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	689b      	ldr	r3, [r3, #8]
 8008208:	031b      	lsls	r3, r3, #12
 800820a:	693a      	ldr	r2, [r7, #16]
 800820c:	4313      	orrs	r3, r2
 800820e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	4a12      	ldr	r2, [pc, #72]	; (800825c <TIM_OC4_SetConfig+0xa4>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d003      	beq.n	8008220 <TIM_OC4_SetConfig+0x68>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	4a11      	ldr	r2, [pc, #68]	; (8008260 <TIM_OC4_SetConfig+0xa8>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d109      	bne.n	8008234 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008226:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	695b      	ldr	r3, [r3, #20]
 800822c:	019b      	lsls	r3, r3, #6
 800822e:	697a      	ldr	r2, [r7, #20]
 8008230:	4313      	orrs	r3, r2
 8008232:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	697a      	ldr	r2, [r7, #20]
 8008238:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	68fa      	ldr	r2, [r7, #12]
 800823e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	685a      	ldr	r2, [r3, #4]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	693a      	ldr	r2, [r7, #16]
 800824c:	621a      	str	r2, [r3, #32]
}
 800824e:	bf00      	nop
 8008250:	371c      	adds	r7, #28
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr
 800825a:	bf00      	nop
 800825c:	40010000 	.word	0x40010000
 8008260:	40010400 	.word	0x40010400

08008264 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008264:	b480      	push	{r7}
 8008266:	b087      	sub	sp, #28
 8008268:	af00      	add	r7, sp, #0
 800826a:	60f8      	str	r0, [r7, #12]
 800826c:	60b9      	str	r1, [r7, #8]
 800826e:	607a      	str	r2, [r7, #4]
 8008270:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	6a1b      	ldr	r3, [r3, #32]
 8008276:	f023 0201 	bic.w	r2, r3, #1
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	699b      	ldr	r3, [r3, #24]
 8008282:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	6a1b      	ldr	r3, [r3, #32]
 8008288:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	4a28      	ldr	r2, [pc, #160]	; (8008330 <TIM_TI1_SetConfig+0xcc>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d01b      	beq.n	80082ca <TIM_TI1_SetConfig+0x66>
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008298:	d017      	beq.n	80082ca <TIM_TI1_SetConfig+0x66>
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	4a25      	ldr	r2, [pc, #148]	; (8008334 <TIM_TI1_SetConfig+0xd0>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d013      	beq.n	80082ca <TIM_TI1_SetConfig+0x66>
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	4a24      	ldr	r2, [pc, #144]	; (8008338 <TIM_TI1_SetConfig+0xd4>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d00f      	beq.n	80082ca <TIM_TI1_SetConfig+0x66>
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	4a23      	ldr	r2, [pc, #140]	; (800833c <TIM_TI1_SetConfig+0xd8>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d00b      	beq.n	80082ca <TIM_TI1_SetConfig+0x66>
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	4a22      	ldr	r2, [pc, #136]	; (8008340 <TIM_TI1_SetConfig+0xdc>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d007      	beq.n	80082ca <TIM_TI1_SetConfig+0x66>
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	4a21      	ldr	r2, [pc, #132]	; (8008344 <TIM_TI1_SetConfig+0xe0>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d003      	beq.n	80082ca <TIM_TI1_SetConfig+0x66>
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	4a20      	ldr	r2, [pc, #128]	; (8008348 <TIM_TI1_SetConfig+0xe4>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d101      	bne.n	80082ce <TIM_TI1_SetConfig+0x6a>
 80082ca:	2301      	movs	r3, #1
 80082cc:	e000      	b.n	80082d0 <TIM_TI1_SetConfig+0x6c>
 80082ce:	2300      	movs	r3, #0
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d008      	beq.n	80082e6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	f023 0303 	bic.w	r3, r3, #3
 80082da:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80082dc:	697a      	ldr	r2, [r7, #20]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	4313      	orrs	r3, r2
 80082e2:	617b      	str	r3, [r7, #20]
 80082e4:	e003      	b.n	80082ee <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	f043 0301 	orr.w	r3, r3, #1
 80082ec:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80082f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	011b      	lsls	r3, r3, #4
 80082fa:	b2db      	uxtb	r3, r3
 80082fc:	697a      	ldr	r2, [r7, #20]
 80082fe:	4313      	orrs	r3, r2
 8008300:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	f023 030a 	bic.w	r3, r3, #10
 8008308:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	f003 030a 	and.w	r3, r3, #10
 8008310:	693a      	ldr	r2, [r7, #16]
 8008312:	4313      	orrs	r3, r2
 8008314:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	697a      	ldr	r2, [r7, #20]
 800831a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	693a      	ldr	r2, [r7, #16]
 8008320:	621a      	str	r2, [r3, #32]
}
 8008322:	bf00      	nop
 8008324:	371c      	adds	r7, #28
 8008326:	46bd      	mov	sp, r7
 8008328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832c:	4770      	bx	lr
 800832e:	bf00      	nop
 8008330:	40010000 	.word	0x40010000
 8008334:	40000400 	.word	0x40000400
 8008338:	40000800 	.word	0x40000800
 800833c:	40000c00 	.word	0x40000c00
 8008340:	40010400 	.word	0x40010400
 8008344:	40014000 	.word	0x40014000
 8008348:	40001800 	.word	0x40001800

0800834c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800834c:	b480      	push	{r7}
 800834e:	b087      	sub	sp, #28
 8008350:	af00      	add	r7, sp, #0
 8008352:	60f8      	str	r0, [r7, #12]
 8008354:	60b9      	str	r1, [r7, #8]
 8008356:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	6a1b      	ldr	r3, [r3, #32]
 800835c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	6a1b      	ldr	r3, [r3, #32]
 8008362:	f023 0201 	bic.w	r2, r3, #1
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	699b      	ldr	r3, [r3, #24]
 800836e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008376:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	011b      	lsls	r3, r3, #4
 800837c:	693a      	ldr	r2, [r7, #16]
 800837e:	4313      	orrs	r3, r2
 8008380:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	f023 030a 	bic.w	r3, r3, #10
 8008388:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800838a:	697a      	ldr	r2, [r7, #20]
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	4313      	orrs	r3, r2
 8008390:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	693a      	ldr	r2, [r7, #16]
 8008396:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	697a      	ldr	r2, [r7, #20]
 800839c:	621a      	str	r2, [r3, #32]
}
 800839e:	bf00      	nop
 80083a0:	371c      	adds	r7, #28
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr

080083aa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80083aa:	b480      	push	{r7}
 80083ac:	b087      	sub	sp, #28
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	60f8      	str	r0, [r7, #12]
 80083b2:	60b9      	str	r1, [r7, #8]
 80083b4:	607a      	str	r2, [r7, #4]
 80083b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	6a1b      	ldr	r3, [r3, #32]
 80083bc:	f023 0210 	bic.w	r2, r3, #16
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	699b      	ldr	r3, [r3, #24]
 80083c8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	6a1b      	ldr	r3, [r3, #32]
 80083ce:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083d6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	021b      	lsls	r3, r3, #8
 80083dc:	697a      	ldr	r2, [r7, #20]
 80083de:	4313      	orrs	r3, r2
 80083e0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80083e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	031b      	lsls	r3, r3, #12
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	697a      	ldr	r2, [r7, #20]
 80083f2:	4313      	orrs	r3, r2
 80083f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80083fc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	011b      	lsls	r3, r3, #4
 8008402:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008406:	693a      	ldr	r2, [r7, #16]
 8008408:	4313      	orrs	r3, r2
 800840a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	697a      	ldr	r2, [r7, #20]
 8008410:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	693a      	ldr	r2, [r7, #16]
 8008416:	621a      	str	r2, [r3, #32]
}
 8008418:	bf00      	nop
 800841a:	371c      	adds	r7, #28
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	4770      	bx	lr

08008424 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008424:	b480      	push	{r7}
 8008426:	b087      	sub	sp, #28
 8008428:	af00      	add	r7, sp, #0
 800842a:	60f8      	str	r0, [r7, #12]
 800842c:	60b9      	str	r1, [r7, #8]
 800842e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	6a1b      	ldr	r3, [r3, #32]
 8008434:	f023 0210 	bic.w	r2, r3, #16
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	699b      	ldr	r3, [r3, #24]
 8008440:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	6a1b      	ldr	r3, [r3, #32]
 8008446:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800844e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	031b      	lsls	r3, r3, #12
 8008454:	697a      	ldr	r2, [r7, #20]
 8008456:	4313      	orrs	r3, r2
 8008458:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008460:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	011b      	lsls	r3, r3, #4
 8008466:	693a      	ldr	r2, [r7, #16]
 8008468:	4313      	orrs	r3, r2
 800846a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	697a      	ldr	r2, [r7, #20]
 8008470:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	693a      	ldr	r2, [r7, #16]
 8008476:	621a      	str	r2, [r3, #32]
}
 8008478:	bf00      	nop
 800847a:	371c      	adds	r7, #28
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr

08008484 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008484:	b480      	push	{r7}
 8008486:	b087      	sub	sp, #28
 8008488:	af00      	add	r7, sp, #0
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	60b9      	str	r1, [r7, #8]
 800848e:	607a      	str	r2, [r7, #4]
 8008490:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	6a1b      	ldr	r3, [r3, #32]
 8008496:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	69db      	ldr	r3, [r3, #28]
 80084a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	6a1b      	ldr	r3, [r3, #32]
 80084a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	f023 0303 	bic.w	r3, r3, #3
 80084b0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80084b2:	697a      	ldr	r2, [r7, #20]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	4313      	orrs	r3, r2
 80084b8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80084c0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	011b      	lsls	r3, r3, #4
 80084c6:	b2db      	uxtb	r3, r3
 80084c8:	697a      	ldr	r2, [r7, #20]
 80084ca:	4313      	orrs	r3, r2
 80084cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80084d4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	021b      	lsls	r3, r3, #8
 80084da:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80084de:	693a      	ldr	r2, [r7, #16]
 80084e0:	4313      	orrs	r3, r2
 80084e2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	697a      	ldr	r2, [r7, #20]
 80084e8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	693a      	ldr	r2, [r7, #16]
 80084ee:	621a      	str	r2, [r3, #32]
}
 80084f0:	bf00      	nop
 80084f2:	371c      	adds	r7, #28
 80084f4:	46bd      	mov	sp, r7
 80084f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fa:	4770      	bx	lr

080084fc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b087      	sub	sp, #28
 8008500:	af00      	add	r7, sp, #0
 8008502:	60f8      	str	r0, [r7, #12]
 8008504:	60b9      	str	r1, [r7, #8]
 8008506:	607a      	str	r2, [r7, #4]
 8008508:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	6a1b      	ldr	r3, [r3, #32]
 800850e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	69db      	ldr	r3, [r3, #28]
 800851a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	6a1b      	ldr	r3, [r3, #32]
 8008520:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008528:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	021b      	lsls	r3, r3, #8
 800852e:	697a      	ldr	r2, [r7, #20]
 8008530:	4313      	orrs	r3, r2
 8008532:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800853a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	031b      	lsls	r3, r3, #12
 8008540:	b29b      	uxth	r3, r3
 8008542:	697a      	ldr	r2, [r7, #20]
 8008544:	4313      	orrs	r3, r2
 8008546:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800854e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	031b      	lsls	r3, r3, #12
 8008554:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008558:	693a      	ldr	r2, [r7, #16]
 800855a:	4313      	orrs	r3, r2
 800855c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	697a      	ldr	r2, [r7, #20]
 8008562:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	693a      	ldr	r2, [r7, #16]
 8008568:	621a      	str	r2, [r3, #32]
}
 800856a:	bf00      	nop
 800856c:	371c      	adds	r7, #28
 800856e:	46bd      	mov	sp, r7
 8008570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008574:	4770      	bx	lr

08008576 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008576:	b480      	push	{r7}
 8008578:	b085      	sub	sp, #20
 800857a:	af00      	add	r7, sp, #0
 800857c:	6078      	str	r0, [r7, #4]
 800857e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	689b      	ldr	r3, [r3, #8]
 8008584:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800858c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800858e:	683a      	ldr	r2, [r7, #0]
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	4313      	orrs	r3, r2
 8008594:	f043 0307 	orr.w	r3, r3, #7
 8008598:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	68fa      	ldr	r2, [r7, #12]
 800859e:	609a      	str	r2, [r3, #8]
}
 80085a0:	bf00      	nop
 80085a2:	3714      	adds	r7, #20
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr

080085ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b087      	sub	sp, #28
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	60f8      	str	r0, [r7, #12]
 80085b4:	60b9      	str	r1, [r7, #8]
 80085b6:	607a      	str	r2, [r7, #4]
 80085b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	689b      	ldr	r3, [r3, #8]
 80085be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80085c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	021a      	lsls	r2, r3, #8
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	431a      	orrs	r2, r3
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	4313      	orrs	r3, r2
 80085d4:	697a      	ldr	r2, [r7, #20]
 80085d6:	4313      	orrs	r3, r2
 80085d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	697a      	ldr	r2, [r7, #20]
 80085de:	609a      	str	r2, [r3, #8]
}
 80085e0:	bf00      	nop
 80085e2:	371c      	adds	r7, #28
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr

080085ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b087      	sub	sp, #28
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	60f8      	str	r0, [r7, #12]
 80085f4:	60b9      	str	r1, [r7, #8]
 80085f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	f003 031f 	and.w	r3, r3, #31
 80085fe:	2201      	movs	r2, #1
 8008600:	fa02 f303 	lsl.w	r3, r2, r3
 8008604:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	6a1a      	ldr	r2, [r3, #32]
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	43db      	mvns	r3, r3
 800860e:	401a      	ands	r2, r3
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	6a1a      	ldr	r2, [r3, #32]
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	f003 031f 	and.w	r3, r3, #31
 800861e:	6879      	ldr	r1, [r7, #4]
 8008620:	fa01 f303 	lsl.w	r3, r1, r3
 8008624:	431a      	orrs	r2, r3
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	621a      	str	r2, [r3, #32]
}
 800862a:	bf00      	nop
 800862c:	371c      	adds	r7, #28
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr
	...

08008638 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008638:	b480      	push	{r7}
 800863a:	b085      	sub	sp, #20
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008648:	2b01      	cmp	r3, #1
 800864a:	d101      	bne.n	8008650 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800864c:	2302      	movs	r3, #2
 800864e:	e05a      	b.n	8008706 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2201      	movs	r2, #1
 8008654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2202      	movs	r2, #2
 800865c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	689b      	ldr	r3, [r3, #8]
 800866e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008676:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	68fa      	ldr	r2, [r7, #12]
 800867e:	4313      	orrs	r3, r2
 8008680:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	68fa      	ldr	r2, [r7, #12]
 8008688:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a21      	ldr	r2, [pc, #132]	; (8008714 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d022      	beq.n	80086da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800869c:	d01d      	beq.n	80086da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4a1d      	ldr	r2, [pc, #116]	; (8008718 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d018      	beq.n	80086da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a1b      	ldr	r2, [pc, #108]	; (800871c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d013      	beq.n	80086da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4a1a      	ldr	r2, [pc, #104]	; (8008720 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d00e      	beq.n	80086da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a18      	ldr	r2, [pc, #96]	; (8008724 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d009      	beq.n	80086da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a17      	ldr	r2, [pc, #92]	; (8008728 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d004      	beq.n	80086da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4a15      	ldr	r2, [pc, #84]	; (800872c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d10c      	bne.n	80086f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	685b      	ldr	r3, [r3, #4]
 80086e6:	68ba      	ldr	r2, [r7, #8]
 80086e8:	4313      	orrs	r3, r2
 80086ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	68ba      	ldr	r2, [r7, #8]
 80086f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2201      	movs	r2, #1
 80086f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2200      	movs	r2, #0
 8008700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008704:	2300      	movs	r3, #0
}
 8008706:	4618      	mov	r0, r3
 8008708:	3714      	adds	r7, #20
 800870a:	46bd      	mov	sp, r7
 800870c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008710:	4770      	bx	lr
 8008712:	bf00      	nop
 8008714:	40010000 	.word	0x40010000
 8008718:	40000400 	.word	0x40000400
 800871c:	40000800 	.word	0x40000800
 8008720:	40000c00 	.word	0x40000c00
 8008724:	40010400 	.word	0x40010400
 8008728:	40014000 	.word	0x40014000
 800872c:	40001800 	.word	0x40001800

08008730 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008730:	b480      	push	{r7}
 8008732:	b083      	sub	sp, #12
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008738:	bf00      	nop
 800873a:	370c      	adds	r7, #12
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr

08008744 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008744:	b480      	push	{r7}
 8008746:	b083      	sub	sp, #12
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800874c:	bf00      	nop
 800874e:	370c      	adds	r7, #12
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr

08008758 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b082      	sub	sp, #8
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d101      	bne.n	800876a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008766:	2301      	movs	r3, #1
 8008768:	e03f      	b.n	80087ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008770:	b2db      	uxtb	r3, r3
 8008772:	2b00      	cmp	r3, #0
 8008774:	d106      	bne.n	8008784 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2200      	movs	r2, #0
 800877a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f7fc f8fe 	bl	8004980 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2224      	movs	r2, #36	; 0x24
 8008788:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	68da      	ldr	r2, [r3, #12]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800879a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 fa5f 	bl	8008c60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	691a      	ldr	r2, [r3, #16]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80087b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	695a      	ldr	r2, [r3, #20]
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80087c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	68da      	ldr	r2, [r3, #12]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80087d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2200      	movs	r2, #0
 80087d6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2220      	movs	r2, #32
 80087dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2220      	movs	r2, #32
 80087e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80087e8:	2300      	movs	r3, #0
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3708      	adds	r7, #8
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}

080087f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80087f2:	b580      	push	{r7, lr}
 80087f4:	b088      	sub	sp, #32
 80087f6:	af02      	add	r7, sp, #8
 80087f8:	60f8      	str	r0, [r7, #12]
 80087fa:	60b9      	str	r1, [r7, #8]
 80087fc:	603b      	str	r3, [r7, #0]
 80087fe:	4613      	mov	r3, r2
 8008800:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8008802:	2300      	movs	r3, #0
 8008804:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800880c:	b2db      	uxtb	r3, r3
 800880e:	2b20      	cmp	r3, #32
 8008810:	f040 8083 	bne.w	800891a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d002      	beq.n	8008820 <HAL_UART_Transmit+0x2e>
 800881a:	88fb      	ldrh	r3, [r7, #6]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d101      	bne.n	8008824 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8008820:	2301      	movs	r3, #1
 8008822:	e07b      	b.n	800891c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800882a:	2b01      	cmp	r3, #1
 800882c:	d101      	bne.n	8008832 <HAL_UART_Transmit+0x40>
 800882e:	2302      	movs	r3, #2
 8008830:	e074      	b.n	800891c <HAL_UART_Transmit+0x12a>
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2201      	movs	r2, #1
 8008836:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	2200      	movs	r2, #0
 800883e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	2221      	movs	r2, #33	; 0x21
 8008844:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008848:	f7fc fb18 	bl	8004e7c <HAL_GetTick>
 800884c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	88fa      	ldrh	r2, [r7, #6]
 8008852:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	88fa      	ldrh	r2, [r7, #6]
 8008858:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2200      	movs	r2, #0
 800885e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8008862:	e042      	b.n	80088ea <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008868:	b29b      	uxth	r3, r3
 800886a:	3b01      	subs	r3, #1
 800886c:	b29a      	uxth	r2, r3
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	689b      	ldr	r3, [r3, #8]
 8008876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800887a:	d122      	bne.n	80088c2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	9300      	str	r3, [sp, #0]
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	2200      	movs	r2, #0
 8008884:	2180      	movs	r1, #128	; 0x80
 8008886:	68f8      	ldr	r0, [r7, #12]
 8008888:	f000 f96c 	bl	8008b64 <UART_WaitOnFlagUntilTimeout>
 800888c:	4603      	mov	r3, r0
 800888e:	2b00      	cmp	r3, #0
 8008890:	d001      	beq.n	8008896 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8008892:	2303      	movs	r3, #3
 8008894:	e042      	b.n	800891c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	881b      	ldrh	r3, [r3, #0]
 800889e:	461a      	mov	r2, r3
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80088a8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	691b      	ldr	r3, [r3, #16]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d103      	bne.n	80088ba <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	3302      	adds	r3, #2
 80088b6:	60bb      	str	r3, [r7, #8]
 80088b8:	e017      	b.n	80088ea <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	3301      	adds	r3, #1
 80088be:	60bb      	str	r3, [r7, #8]
 80088c0:	e013      	b.n	80088ea <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	9300      	str	r3, [sp, #0]
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	2200      	movs	r2, #0
 80088ca:	2180      	movs	r1, #128	; 0x80
 80088cc:	68f8      	ldr	r0, [r7, #12]
 80088ce:	f000 f949 	bl	8008b64 <UART_WaitOnFlagUntilTimeout>
 80088d2:	4603      	mov	r3, r0
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d001      	beq.n	80088dc <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80088d8:	2303      	movs	r3, #3
 80088da:	e01f      	b.n	800891c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	1c5a      	adds	r2, r3, #1
 80088e0:	60ba      	str	r2, [r7, #8]
 80088e2:	781a      	ldrb	r2, [r3, #0]
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d1b7      	bne.n	8008864 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	9300      	str	r3, [sp, #0]
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	2200      	movs	r2, #0
 80088fc:	2140      	movs	r1, #64	; 0x40
 80088fe:	68f8      	ldr	r0, [r7, #12]
 8008900:	f000 f930 	bl	8008b64 <UART_WaitOnFlagUntilTimeout>
 8008904:	4603      	mov	r3, r0
 8008906:	2b00      	cmp	r3, #0
 8008908:	d001      	beq.n	800890e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800890a:	2303      	movs	r3, #3
 800890c:	e006      	b.n	800891c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2220      	movs	r2, #32
 8008912:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8008916:	2300      	movs	r3, #0
 8008918:	e000      	b.n	800891c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800891a:	2302      	movs	r3, #2
  }
}
 800891c:	4618      	mov	r0, r3
 800891e:	3718      	adds	r7, #24
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}

08008924 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b086      	sub	sp, #24
 8008928:	af00      	add	r7, sp, #0
 800892a:	60f8      	str	r0, [r7, #12]
 800892c:	60b9      	str	r1, [r7, #8]
 800892e:	4613      	mov	r3, r2
 8008930:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008938:	b2db      	uxtb	r3, r3
 800893a:	2b20      	cmp	r3, #32
 800893c:	d166      	bne.n	8008a0c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d002      	beq.n	800894a <HAL_UART_Receive_DMA+0x26>
 8008944:	88fb      	ldrh	r3, [r7, #6]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d101      	bne.n	800894e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800894a:	2301      	movs	r3, #1
 800894c:	e05f      	b.n	8008a0e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008954:	2b01      	cmp	r3, #1
 8008956:	d101      	bne.n	800895c <HAL_UART_Receive_DMA+0x38>
 8008958:	2302      	movs	r3, #2
 800895a:	e058      	b.n	8008a0e <HAL_UART_Receive_DMA+0xea>
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2201      	movs	r2, #1
 8008960:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8008964:	68ba      	ldr	r2, [r7, #8]
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	88fa      	ldrh	r2, [r7, #6]
 800896e:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2200      	movs	r2, #0
 8008974:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2222      	movs	r2, #34	; 0x22
 800897a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008982:	4a25      	ldr	r2, [pc, #148]	; (8008a18 <HAL_UART_Receive_DMA+0xf4>)
 8008984:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800898a:	4a24      	ldr	r2, [pc, #144]	; (8008a1c <HAL_UART_Receive_DMA+0xf8>)
 800898c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008992:	4a23      	ldr	r2, [pc, #140]	; (8008a20 <HAL_UART_Receive_DMA+0xfc>)
 8008994:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800899a:	2200      	movs	r2, #0
 800899c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800899e:	f107 0308 	add.w	r3, r7, #8
 80089a2:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	3304      	adds	r3, #4
 80089ae:	4619      	mov	r1, r3
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	681a      	ldr	r2, [r3, #0]
 80089b4:	88fb      	ldrh	r3, [r7, #6]
 80089b6:	f7fc fc4f 	bl	8005258 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80089ba:	2300      	movs	r3, #0
 80089bc:	613b      	str	r3, [r7, #16]
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	613b      	str	r3, [r7, #16]
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	613b      	str	r3, [r7, #16]
 80089ce:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2200      	movs	r2, #0
 80089d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	68da      	ldr	r2, [r3, #12]
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80089e6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	695a      	ldr	r2, [r3, #20]
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f042 0201 	orr.w	r2, r2, #1
 80089f6:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	695a      	ldr	r2, [r3, #20]
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a06:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	e000      	b.n	8008a0e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008a0c:	2302      	movs	r3, #2
  }
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3718      	adds	r7, #24
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}
 8008a16:	bf00      	nop
 8008a18:	08008a4d 	.word	0x08008a4d
 8008a1c:	08008ab5 	.word	0x08008ab5
 8008a20:	08008ad1 	.word	0x08008ad1

08008a24 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b083      	sub	sp, #12
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008a2c:	bf00      	nop
 8008a2e:	370c      	adds	r7, #12
 8008a30:	46bd      	mov	sp, r7
 8008a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a36:	4770      	bx	lr

08008a38 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b083      	sub	sp, #12
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008a40:	bf00      	nop
 8008a42:	370c      	adds	r7, #12
 8008a44:	46bd      	mov	sp, r7
 8008a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4a:	4770      	bx	lr

08008a4c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b084      	sub	sp, #16
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a58:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d11e      	bne.n	8008aa6 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	68da      	ldr	r2, [r3, #12]
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008a7c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	695a      	ldr	r2, [r3, #20]
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f022 0201 	bic.w	r2, r2, #1
 8008a8c:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	695a      	ldr	r2, [r3, #20]
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a9c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2220      	movs	r2, #32
 8008aa2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8008aa6:	68f8      	ldr	r0, [r7, #12]
 8008aa8:	f7fa fcd8 	bl	800345c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008aac:	bf00      	nop
 8008aae:	3710      	adds	r7, #16
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b084      	sub	sp, #16
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ac0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8008ac2:	68f8      	ldr	r0, [r7, #12]
 8008ac4:	f7ff ffae 	bl	8008a24 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ac8:	bf00      	nop
 8008aca:	3710      	adds	r7, #16
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b084      	sub	sp, #16
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ae0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	695b      	ldr	r3, [r3, #20]
 8008ae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008aec:	2b80      	cmp	r3, #128	; 0x80
 8008aee:	bf0c      	ite	eq
 8008af0:	2301      	moveq	r3, #1
 8008af2:	2300      	movne	r3, #0
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008afe:	b2db      	uxtb	r3, r3
 8008b00:	2b21      	cmp	r3, #33	; 0x21
 8008b02:	d108      	bne.n	8008b16 <UART_DMAError+0x46>
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d005      	beq.n	8008b16 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008b10:	68b8      	ldr	r0, [r7, #8]
 8008b12:	f000 f871 	bl	8008bf8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	695b      	ldr	r3, [r3, #20]
 8008b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b20:	2b40      	cmp	r3, #64	; 0x40
 8008b22:	bf0c      	ite	eq
 8008b24:	2301      	moveq	r3, #1
 8008b26:	2300      	movne	r3, #0
 8008b28:	b2db      	uxtb	r3, r3
 8008b2a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008b32:	b2db      	uxtb	r3, r3
 8008b34:	2b22      	cmp	r3, #34	; 0x22
 8008b36:	d108      	bne.n	8008b4a <UART_DMAError+0x7a>
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d005      	beq.n	8008b4a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	2200      	movs	r2, #0
 8008b42:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008b44:	68b8      	ldr	r0, [r7, #8]
 8008b46:	f000 f86d 	bl	8008c24 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b4e:	f043 0210 	orr.w	r2, r3, #16
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008b56:	68b8      	ldr	r0, [r7, #8]
 8008b58:	f7ff ff6e 	bl	8008a38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b5c:	bf00      	nop
 8008b5e:	3710      	adds	r7, #16
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}

08008b64 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b084      	sub	sp, #16
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	60f8      	str	r0, [r7, #12]
 8008b6c:	60b9      	str	r1, [r7, #8]
 8008b6e:	603b      	str	r3, [r7, #0]
 8008b70:	4613      	mov	r3, r2
 8008b72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b74:	e02c      	b.n	8008bd0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b76:	69bb      	ldr	r3, [r7, #24]
 8008b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b7c:	d028      	beq.n	8008bd0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008b7e:	69bb      	ldr	r3, [r7, #24]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d007      	beq.n	8008b94 <UART_WaitOnFlagUntilTimeout+0x30>
 8008b84:	f7fc f97a 	bl	8004e7c <HAL_GetTick>
 8008b88:	4602      	mov	r2, r0
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	1ad3      	subs	r3, r2, r3
 8008b8e:	69ba      	ldr	r2, [r7, #24]
 8008b90:	429a      	cmp	r2, r3
 8008b92:	d21d      	bcs.n	8008bd0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	68da      	ldr	r2, [r3, #12]
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008ba2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	695a      	ldr	r2, [r3, #20]
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f022 0201 	bic.w	r2, r2, #1
 8008bb2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	2220      	movs	r2, #32
 8008bb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2220      	movs	r2, #32
 8008bc0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8008bcc:	2303      	movs	r3, #3
 8008bce:	e00f      	b.n	8008bf0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	681a      	ldr	r2, [r3, #0]
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	4013      	ands	r3, r2
 8008bda:	68ba      	ldr	r2, [r7, #8]
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	bf0c      	ite	eq
 8008be0:	2301      	moveq	r3, #1
 8008be2:	2300      	movne	r3, #0
 8008be4:	b2db      	uxtb	r3, r3
 8008be6:	461a      	mov	r2, r3
 8008be8:	79fb      	ldrb	r3, [r7, #7]
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d0c3      	beq.n	8008b76 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008bee:	2300      	movs	r3, #0
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3710      	adds	r7, #16
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}

08008bf8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b083      	sub	sp, #12
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	68da      	ldr	r2, [r3, #12]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008c0e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2220      	movs	r2, #32
 8008c14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8008c18:	bf00      	nop
 8008c1a:	370c      	adds	r7, #12
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr

08008c24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b083      	sub	sp, #12
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	68da      	ldr	r2, [r3, #12]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008c3a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	695a      	ldr	r2, [r3, #20]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f022 0201 	bic.w	r2, r2, #1
 8008c4a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2220      	movs	r2, #32
 8008c50:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8008c54:	bf00      	nop
 8008c56:	370c      	adds	r7, #12
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5e:	4770      	bx	lr

08008c60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c64:	b085      	sub	sp, #20
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	691b      	ldr	r3, [r3, #16]
 8008c70:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	68da      	ldr	r2, [r3, #12]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	430a      	orrs	r2, r1
 8008c7e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	689a      	ldr	r2, [r3, #8]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	691b      	ldr	r3, [r3, #16]
 8008c88:	431a      	orrs	r2, r3
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	695b      	ldr	r3, [r3, #20]
 8008c8e:	431a      	orrs	r2, r3
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	69db      	ldr	r3, [r3, #28]
 8008c94:	4313      	orrs	r3, r2
 8008c96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	68db      	ldr	r3, [r3, #12]
 8008c9e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008ca2:	f023 030c 	bic.w	r3, r3, #12
 8008ca6:	687a      	ldr	r2, [r7, #4]
 8008ca8:	6812      	ldr	r2, [r2, #0]
 8008caa:	68f9      	ldr	r1, [r7, #12]
 8008cac:	430b      	orrs	r3, r1
 8008cae:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	695b      	ldr	r3, [r3, #20]
 8008cb6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	699a      	ldr	r2, [r3, #24]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	430a      	orrs	r2, r1
 8008cc4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	69db      	ldr	r3, [r3, #28]
 8008cca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008cce:	f040 818b 	bne.w	8008fe8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	4ac1      	ldr	r2, [pc, #772]	; (8008fdc <UART_SetConfig+0x37c>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d005      	beq.n	8008ce8 <UART_SetConfig+0x88>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4abf      	ldr	r2, [pc, #764]	; (8008fe0 <UART_SetConfig+0x380>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	f040 80bd 	bne.w	8008e62 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008ce8:	f7fe fb24 	bl	8007334 <HAL_RCC_GetPCLK2Freq>
 8008cec:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	461d      	mov	r5, r3
 8008cf2:	f04f 0600 	mov.w	r6, #0
 8008cf6:	46a8      	mov	r8, r5
 8008cf8:	46b1      	mov	r9, r6
 8008cfa:	eb18 0308 	adds.w	r3, r8, r8
 8008cfe:	eb49 0409 	adc.w	r4, r9, r9
 8008d02:	4698      	mov	r8, r3
 8008d04:	46a1      	mov	r9, r4
 8008d06:	eb18 0805 	adds.w	r8, r8, r5
 8008d0a:	eb49 0906 	adc.w	r9, r9, r6
 8008d0e:	f04f 0100 	mov.w	r1, #0
 8008d12:	f04f 0200 	mov.w	r2, #0
 8008d16:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008d1a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008d1e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008d22:	4688      	mov	r8, r1
 8008d24:	4691      	mov	r9, r2
 8008d26:	eb18 0005 	adds.w	r0, r8, r5
 8008d2a:	eb49 0106 	adc.w	r1, r9, r6
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	461d      	mov	r5, r3
 8008d34:	f04f 0600 	mov.w	r6, #0
 8008d38:	196b      	adds	r3, r5, r5
 8008d3a:	eb46 0406 	adc.w	r4, r6, r6
 8008d3e:	461a      	mov	r2, r3
 8008d40:	4623      	mov	r3, r4
 8008d42:	f7f7 ffd1 	bl	8000ce8 <__aeabi_uldivmod>
 8008d46:	4603      	mov	r3, r0
 8008d48:	460c      	mov	r4, r1
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	4ba5      	ldr	r3, [pc, #660]	; (8008fe4 <UART_SetConfig+0x384>)
 8008d4e:	fba3 2302 	umull	r2, r3, r3, r2
 8008d52:	095b      	lsrs	r3, r3, #5
 8008d54:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	461d      	mov	r5, r3
 8008d5c:	f04f 0600 	mov.w	r6, #0
 8008d60:	46a9      	mov	r9, r5
 8008d62:	46b2      	mov	sl, r6
 8008d64:	eb19 0309 	adds.w	r3, r9, r9
 8008d68:	eb4a 040a 	adc.w	r4, sl, sl
 8008d6c:	4699      	mov	r9, r3
 8008d6e:	46a2      	mov	sl, r4
 8008d70:	eb19 0905 	adds.w	r9, r9, r5
 8008d74:	eb4a 0a06 	adc.w	sl, sl, r6
 8008d78:	f04f 0100 	mov.w	r1, #0
 8008d7c:	f04f 0200 	mov.w	r2, #0
 8008d80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008d84:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008d88:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008d8c:	4689      	mov	r9, r1
 8008d8e:	4692      	mov	sl, r2
 8008d90:	eb19 0005 	adds.w	r0, r9, r5
 8008d94:	eb4a 0106 	adc.w	r1, sl, r6
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	461d      	mov	r5, r3
 8008d9e:	f04f 0600 	mov.w	r6, #0
 8008da2:	196b      	adds	r3, r5, r5
 8008da4:	eb46 0406 	adc.w	r4, r6, r6
 8008da8:	461a      	mov	r2, r3
 8008daa:	4623      	mov	r3, r4
 8008dac:	f7f7 ff9c 	bl	8000ce8 <__aeabi_uldivmod>
 8008db0:	4603      	mov	r3, r0
 8008db2:	460c      	mov	r4, r1
 8008db4:	461a      	mov	r2, r3
 8008db6:	4b8b      	ldr	r3, [pc, #556]	; (8008fe4 <UART_SetConfig+0x384>)
 8008db8:	fba3 1302 	umull	r1, r3, r3, r2
 8008dbc:	095b      	lsrs	r3, r3, #5
 8008dbe:	2164      	movs	r1, #100	; 0x64
 8008dc0:	fb01 f303 	mul.w	r3, r1, r3
 8008dc4:	1ad3      	subs	r3, r2, r3
 8008dc6:	00db      	lsls	r3, r3, #3
 8008dc8:	3332      	adds	r3, #50	; 0x32
 8008dca:	4a86      	ldr	r2, [pc, #536]	; (8008fe4 <UART_SetConfig+0x384>)
 8008dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8008dd0:	095b      	lsrs	r3, r3, #5
 8008dd2:	005b      	lsls	r3, r3, #1
 8008dd4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008dd8:	4498      	add	r8, r3
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	461d      	mov	r5, r3
 8008dde:	f04f 0600 	mov.w	r6, #0
 8008de2:	46a9      	mov	r9, r5
 8008de4:	46b2      	mov	sl, r6
 8008de6:	eb19 0309 	adds.w	r3, r9, r9
 8008dea:	eb4a 040a 	adc.w	r4, sl, sl
 8008dee:	4699      	mov	r9, r3
 8008df0:	46a2      	mov	sl, r4
 8008df2:	eb19 0905 	adds.w	r9, r9, r5
 8008df6:	eb4a 0a06 	adc.w	sl, sl, r6
 8008dfa:	f04f 0100 	mov.w	r1, #0
 8008dfe:	f04f 0200 	mov.w	r2, #0
 8008e02:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008e06:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008e0a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008e0e:	4689      	mov	r9, r1
 8008e10:	4692      	mov	sl, r2
 8008e12:	eb19 0005 	adds.w	r0, r9, r5
 8008e16:	eb4a 0106 	adc.w	r1, sl, r6
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	461d      	mov	r5, r3
 8008e20:	f04f 0600 	mov.w	r6, #0
 8008e24:	196b      	adds	r3, r5, r5
 8008e26:	eb46 0406 	adc.w	r4, r6, r6
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	4623      	mov	r3, r4
 8008e2e:	f7f7 ff5b 	bl	8000ce8 <__aeabi_uldivmod>
 8008e32:	4603      	mov	r3, r0
 8008e34:	460c      	mov	r4, r1
 8008e36:	461a      	mov	r2, r3
 8008e38:	4b6a      	ldr	r3, [pc, #424]	; (8008fe4 <UART_SetConfig+0x384>)
 8008e3a:	fba3 1302 	umull	r1, r3, r3, r2
 8008e3e:	095b      	lsrs	r3, r3, #5
 8008e40:	2164      	movs	r1, #100	; 0x64
 8008e42:	fb01 f303 	mul.w	r3, r1, r3
 8008e46:	1ad3      	subs	r3, r2, r3
 8008e48:	00db      	lsls	r3, r3, #3
 8008e4a:	3332      	adds	r3, #50	; 0x32
 8008e4c:	4a65      	ldr	r2, [pc, #404]	; (8008fe4 <UART_SetConfig+0x384>)
 8008e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8008e52:	095b      	lsrs	r3, r3, #5
 8008e54:	f003 0207 	and.w	r2, r3, #7
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4442      	add	r2, r8
 8008e5e:	609a      	str	r2, [r3, #8]
 8008e60:	e26f      	b.n	8009342 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008e62:	f7fe fa53 	bl	800730c <HAL_RCC_GetPCLK1Freq>
 8008e66:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	461d      	mov	r5, r3
 8008e6c:	f04f 0600 	mov.w	r6, #0
 8008e70:	46a8      	mov	r8, r5
 8008e72:	46b1      	mov	r9, r6
 8008e74:	eb18 0308 	adds.w	r3, r8, r8
 8008e78:	eb49 0409 	adc.w	r4, r9, r9
 8008e7c:	4698      	mov	r8, r3
 8008e7e:	46a1      	mov	r9, r4
 8008e80:	eb18 0805 	adds.w	r8, r8, r5
 8008e84:	eb49 0906 	adc.w	r9, r9, r6
 8008e88:	f04f 0100 	mov.w	r1, #0
 8008e8c:	f04f 0200 	mov.w	r2, #0
 8008e90:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008e94:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008e98:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008e9c:	4688      	mov	r8, r1
 8008e9e:	4691      	mov	r9, r2
 8008ea0:	eb18 0005 	adds.w	r0, r8, r5
 8008ea4:	eb49 0106 	adc.w	r1, r9, r6
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	685b      	ldr	r3, [r3, #4]
 8008eac:	461d      	mov	r5, r3
 8008eae:	f04f 0600 	mov.w	r6, #0
 8008eb2:	196b      	adds	r3, r5, r5
 8008eb4:	eb46 0406 	adc.w	r4, r6, r6
 8008eb8:	461a      	mov	r2, r3
 8008eba:	4623      	mov	r3, r4
 8008ebc:	f7f7 ff14 	bl	8000ce8 <__aeabi_uldivmod>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	460c      	mov	r4, r1
 8008ec4:	461a      	mov	r2, r3
 8008ec6:	4b47      	ldr	r3, [pc, #284]	; (8008fe4 <UART_SetConfig+0x384>)
 8008ec8:	fba3 2302 	umull	r2, r3, r3, r2
 8008ecc:	095b      	lsrs	r3, r3, #5
 8008ece:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	461d      	mov	r5, r3
 8008ed6:	f04f 0600 	mov.w	r6, #0
 8008eda:	46a9      	mov	r9, r5
 8008edc:	46b2      	mov	sl, r6
 8008ede:	eb19 0309 	adds.w	r3, r9, r9
 8008ee2:	eb4a 040a 	adc.w	r4, sl, sl
 8008ee6:	4699      	mov	r9, r3
 8008ee8:	46a2      	mov	sl, r4
 8008eea:	eb19 0905 	adds.w	r9, r9, r5
 8008eee:	eb4a 0a06 	adc.w	sl, sl, r6
 8008ef2:	f04f 0100 	mov.w	r1, #0
 8008ef6:	f04f 0200 	mov.w	r2, #0
 8008efa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008efe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008f02:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008f06:	4689      	mov	r9, r1
 8008f08:	4692      	mov	sl, r2
 8008f0a:	eb19 0005 	adds.w	r0, r9, r5
 8008f0e:	eb4a 0106 	adc.w	r1, sl, r6
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	685b      	ldr	r3, [r3, #4]
 8008f16:	461d      	mov	r5, r3
 8008f18:	f04f 0600 	mov.w	r6, #0
 8008f1c:	196b      	adds	r3, r5, r5
 8008f1e:	eb46 0406 	adc.w	r4, r6, r6
 8008f22:	461a      	mov	r2, r3
 8008f24:	4623      	mov	r3, r4
 8008f26:	f7f7 fedf 	bl	8000ce8 <__aeabi_uldivmod>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	460c      	mov	r4, r1
 8008f2e:	461a      	mov	r2, r3
 8008f30:	4b2c      	ldr	r3, [pc, #176]	; (8008fe4 <UART_SetConfig+0x384>)
 8008f32:	fba3 1302 	umull	r1, r3, r3, r2
 8008f36:	095b      	lsrs	r3, r3, #5
 8008f38:	2164      	movs	r1, #100	; 0x64
 8008f3a:	fb01 f303 	mul.w	r3, r1, r3
 8008f3e:	1ad3      	subs	r3, r2, r3
 8008f40:	00db      	lsls	r3, r3, #3
 8008f42:	3332      	adds	r3, #50	; 0x32
 8008f44:	4a27      	ldr	r2, [pc, #156]	; (8008fe4 <UART_SetConfig+0x384>)
 8008f46:	fba2 2303 	umull	r2, r3, r2, r3
 8008f4a:	095b      	lsrs	r3, r3, #5
 8008f4c:	005b      	lsls	r3, r3, #1
 8008f4e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008f52:	4498      	add	r8, r3
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	461d      	mov	r5, r3
 8008f58:	f04f 0600 	mov.w	r6, #0
 8008f5c:	46a9      	mov	r9, r5
 8008f5e:	46b2      	mov	sl, r6
 8008f60:	eb19 0309 	adds.w	r3, r9, r9
 8008f64:	eb4a 040a 	adc.w	r4, sl, sl
 8008f68:	4699      	mov	r9, r3
 8008f6a:	46a2      	mov	sl, r4
 8008f6c:	eb19 0905 	adds.w	r9, r9, r5
 8008f70:	eb4a 0a06 	adc.w	sl, sl, r6
 8008f74:	f04f 0100 	mov.w	r1, #0
 8008f78:	f04f 0200 	mov.w	r2, #0
 8008f7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008f80:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008f84:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008f88:	4689      	mov	r9, r1
 8008f8a:	4692      	mov	sl, r2
 8008f8c:	eb19 0005 	adds.w	r0, r9, r5
 8008f90:	eb4a 0106 	adc.w	r1, sl, r6
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	461d      	mov	r5, r3
 8008f9a:	f04f 0600 	mov.w	r6, #0
 8008f9e:	196b      	adds	r3, r5, r5
 8008fa0:	eb46 0406 	adc.w	r4, r6, r6
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	4623      	mov	r3, r4
 8008fa8:	f7f7 fe9e 	bl	8000ce8 <__aeabi_uldivmod>
 8008fac:	4603      	mov	r3, r0
 8008fae:	460c      	mov	r4, r1
 8008fb0:	461a      	mov	r2, r3
 8008fb2:	4b0c      	ldr	r3, [pc, #48]	; (8008fe4 <UART_SetConfig+0x384>)
 8008fb4:	fba3 1302 	umull	r1, r3, r3, r2
 8008fb8:	095b      	lsrs	r3, r3, #5
 8008fba:	2164      	movs	r1, #100	; 0x64
 8008fbc:	fb01 f303 	mul.w	r3, r1, r3
 8008fc0:	1ad3      	subs	r3, r2, r3
 8008fc2:	00db      	lsls	r3, r3, #3
 8008fc4:	3332      	adds	r3, #50	; 0x32
 8008fc6:	4a07      	ldr	r2, [pc, #28]	; (8008fe4 <UART_SetConfig+0x384>)
 8008fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8008fcc:	095b      	lsrs	r3, r3, #5
 8008fce:	f003 0207 	and.w	r2, r3, #7
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	4442      	add	r2, r8
 8008fd8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8008fda:	e1b2      	b.n	8009342 <UART_SetConfig+0x6e2>
 8008fdc:	40011000 	.word	0x40011000
 8008fe0:	40011400 	.word	0x40011400
 8008fe4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4ad7      	ldr	r2, [pc, #860]	; (800934c <UART_SetConfig+0x6ec>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d005      	beq.n	8008ffe <UART_SetConfig+0x39e>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4ad6      	ldr	r2, [pc, #856]	; (8009350 <UART_SetConfig+0x6f0>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	f040 80d1 	bne.w	80091a0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008ffe:	f7fe f999 	bl	8007334 <HAL_RCC_GetPCLK2Freq>
 8009002:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	469a      	mov	sl, r3
 8009008:	f04f 0b00 	mov.w	fp, #0
 800900c:	46d0      	mov	r8, sl
 800900e:	46d9      	mov	r9, fp
 8009010:	eb18 0308 	adds.w	r3, r8, r8
 8009014:	eb49 0409 	adc.w	r4, r9, r9
 8009018:	4698      	mov	r8, r3
 800901a:	46a1      	mov	r9, r4
 800901c:	eb18 080a 	adds.w	r8, r8, sl
 8009020:	eb49 090b 	adc.w	r9, r9, fp
 8009024:	f04f 0100 	mov.w	r1, #0
 8009028:	f04f 0200 	mov.w	r2, #0
 800902c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009030:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009034:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009038:	4688      	mov	r8, r1
 800903a:	4691      	mov	r9, r2
 800903c:	eb1a 0508 	adds.w	r5, sl, r8
 8009040:	eb4b 0609 	adc.w	r6, fp, r9
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	685b      	ldr	r3, [r3, #4]
 8009048:	4619      	mov	r1, r3
 800904a:	f04f 0200 	mov.w	r2, #0
 800904e:	f04f 0300 	mov.w	r3, #0
 8009052:	f04f 0400 	mov.w	r4, #0
 8009056:	0094      	lsls	r4, r2, #2
 8009058:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800905c:	008b      	lsls	r3, r1, #2
 800905e:	461a      	mov	r2, r3
 8009060:	4623      	mov	r3, r4
 8009062:	4628      	mov	r0, r5
 8009064:	4631      	mov	r1, r6
 8009066:	f7f7 fe3f 	bl	8000ce8 <__aeabi_uldivmod>
 800906a:	4603      	mov	r3, r0
 800906c:	460c      	mov	r4, r1
 800906e:	461a      	mov	r2, r3
 8009070:	4bb8      	ldr	r3, [pc, #736]	; (8009354 <UART_SetConfig+0x6f4>)
 8009072:	fba3 2302 	umull	r2, r3, r3, r2
 8009076:	095b      	lsrs	r3, r3, #5
 8009078:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	469b      	mov	fp, r3
 8009080:	f04f 0c00 	mov.w	ip, #0
 8009084:	46d9      	mov	r9, fp
 8009086:	46e2      	mov	sl, ip
 8009088:	eb19 0309 	adds.w	r3, r9, r9
 800908c:	eb4a 040a 	adc.w	r4, sl, sl
 8009090:	4699      	mov	r9, r3
 8009092:	46a2      	mov	sl, r4
 8009094:	eb19 090b 	adds.w	r9, r9, fp
 8009098:	eb4a 0a0c 	adc.w	sl, sl, ip
 800909c:	f04f 0100 	mov.w	r1, #0
 80090a0:	f04f 0200 	mov.w	r2, #0
 80090a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80090a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80090ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80090b0:	4689      	mov	r9, r1
 80090b2:	4692      	mov	sl, r2
 80090b4:	eb1b 0509 	adds.w	r5, fp, r9
 80090b8:	eb4c 060a 	adc.w	r6, ip, sl
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	4619      	mov	r1, r3
 80090c2:	f04f 0200 	mov.w	r2, #0
 80090c6:	f04f 0300 	mov.w	r3, #0
 80090ca:	f04f 0400 	mov.w	r4, #0
 80090ce:	0094      	lsls	r4, r2, #2
 80090d0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80090d4:	008b      	lsls	r3, r1, #2
 80090d6:	461a      	mov	r2, r3
 80090d8:	4623      	mov	r3, r4
 80090da:	4628      	mov	r0, r5
 80090dc:	4631      	mov	r1, r6
 80090de:	f7f7 fe03 	bl	8000ce8 <__aeabi_uldivmod>
 80090e2:	4603      	mov	r3, r0
 80090e4:	460c      	mov	r4, r1
 80090e6:	461a      	mov	r2, r3
 80090e8:	4b9a      	ldr	r3, [pc, #616]	; (8009354 <UART_SetConfig+0x6f4>)
 80090ea:	fba3 1302 	umull	r1, r3, r3, r2
 80090ee:	095b      	lsrs	r3, r3, #5
 80090f0:	2164      	movs	r1, #100	; 0x64
 80090f2:	fb01 f303 	mul.w	r3, r1, r3
 80090f6:	1ad3      	subs	r3, r2, r3
 80090f8:	011b      	lsls	r3, r3, #4
 80090fa:	3332      	adds	r3, #50	; 0x32
 80090fc:	4a95      	ldr	r2, [pc, #596]	; (8009354 <UART_SetConfig+0x6f4>)
 80090fe:	fba2 2303 	umull	r2, r3, r2, r3
 8009102:	095b      	lsrs	r3, r3, #5
 8009104:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009108:	4498      	add	r8, r3
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	469b      	mov	fp, r3
 800910e:	f04f 0c00 	mov.w	ip, #0
 8009112:	46d9      	mov	r9, fp
 8009114:	46e2      	mov	sl, ip
 8009116:	eb19 0309 	adds.w	r3, r9, r9
 800911a:	eb4a 040a 	adc.w	r4, sl, sl
 800911e:	4699      	mov	r9, r3
 8009120:	46a2      	mov	sl, r4
 8009122:	eb19 090b 	adds.w	r9, r9, fp
 8009126:	eb4a 0a0c 	adc.w	sl, sl, ip
 800912a:	f04f 0100 	mov.w	r1, #0
 800912e:	f04f 0200 	mov.w	r2, #0
 8009132:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009136:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800913a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800913e:	4689      	mov	r9, r1
 8009140:	4692      	mov	sl, r2
 8009142:	eb1b 0509 	adds.w	r5, fp, r9
 8009146:	eb4c 060a 	adc.w	r6, ip, sl
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	4619      	mov	r1, r3
 8009150:	f04f 0200 	mov.w	r2, #0
 8009154:	f04f 0300 	mov.w	r3, #0
 8009158:	f04f 0400 	mov.w	r4, #0
 800915c:	0094      	lsls	r4, r2, #2
 800915e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009162:	008b      	lsls	r3, r1, #2
 8009164:	461a      	mov	r2, r3
 8009166:	4623      	mov	r3, r4
 8009168:	4628      	mov	r0, r5
 800916a:	4631      	mov	r1, r6
 800916c:	f7f7 fdbc 	bl	8000ce8 <__aeabi_uldivmod>
 8009170:	4603      	mov	r3, r0
 8009172:	460c      	mov	r4, r1
 8009174:	461a      	mov	r2, r3
 8009176:	4b77      	ldr	r3, [pc, #476]	; (8009354 <UART_SetConfig+0x6f4>)
 8009178:	fba3 1302 	umull	r1, r3, r3, r2
 800917c:	095b      	lsrs	r3, r3, #5
 800917e:	2164      	movs	r1, #100	; 0x64
 8009180:	fb01 f303 	mul.w	r3, r1, r3
 8009184:	1ad3      	subs	r3, r2, r3
 8009186:	011b      	lsls	r3, r3, #4
 8009188:	3332      	adds	r3, #50	; 0x32
 800918a:	4a72      	ldr	r2, [pc, #456]	; (8009354 <UART_SetConfig+0x6f4>)
 800918c:	fba2 2303 	umull	r2, r3, r2, r3
 8009190:	095b      	lsrs	r3, r3, #5
 8009192:	f003 020f 	and.w	r2, r3, #15
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4442      	add	r2, r8
 800919c:	609a      	str	r2, [r3, #8]
 800919e:	e0d0      	b.n	8009342 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80091a0:	f7fe f8b4 	bl	800730c <HAL_RCC_GetPCLK1Freq>
 80091a4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	469a      	mov	sl, r3
 80091aa:	f04f 0b00 	mov.w	fp, #0
 80091ae:	46d0      	mov	r8, sl
 80091b0:	46d9      	mov	r9, fp
 80091b2:	eb18 0308 	adds.w	r3, r8, r8
 80091b6:	eb49 0409 	adc.w	r4, r9, r9
 80091ba:	4698      	mov	r8, r3
 80091bc:	46a1      	mov	r9, r4
 80091be:	eb18 080a 	adds.w	r8, r8, sl
 80091c2:	eb49 090b 	adc.w	r9, r9, fp
 80091c6:	f04f 0100 	mov.w	r1, #0
 80091ca:	f04f 0200 	mov.w	r2, #0
 80091ce:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80091d2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80091d6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80091da:	4688      	mov	r8, r1
 80091dc:	4691      	mov	r9, r2
 80091de:	eb1a 0508 	adds.w	r5, sl, r8
 80091e2:	eb4b 0609 	adc.w	r6, fp, r9
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	4619      	mov	r1, r3
 80091ec:	f04f 0200 	mov.w	r2, #0
 80091f0:	f04f 0300 	mov.w	r3, #0
 80091f4:	f04f 0400 	mov.w	r4, #0
 80091f8:	0094      	lsls	r4, r2, #2
 80091fa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80091fe:	008b      	lsls	r3, r1, #2
 8009200:	461a      	mov	r2, r3
 8009202:	4623      	mov	r3, r4
 8009204:	4628      	mov	r0, r5
 8009206:	4631      	mov	r1, r6
 8009208:	f7f7 fd6e 	bl	8000ce8 <__aeabi_uldivmod>
 800920c:	4603      	mov	r3, r0
 800920e:	460c      	mov	r4, r1
 8009210:	461a      	mov	r2, r3
 8009212:	4b50      	ldr	r3, [pc, #320]	; (8009354 <UART_SetConfig+0x6f4>)
 8009214:	fba3 2302 	umull	r2, r3, r3, r2
 8009218:	095b      	lsrs	r3, r3, #5
 800921a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	469b      	mov	fp, r3
 8009222:	f04f 0c00 	mov.w	ip, #0
 8009226:	46d9      	mov	r9, fp
 8009228:	46e2      	mov	sl, ip
 800922a:	eb19 0309 	adds.w	r3, r9, r9
 800922e:	eb4a 040a 	adc.w	r4, sl, sl
 8009232:	4699      	mov	r9, r3
 8009234:	46a2      	mov	sl, r4
 8009236:	eb19 090b 	adds.w	r9, r9, fp
 800923a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800923e:	f04f 0100 	mov.w	r1, #0
 8009242:	f04f 0200 	mov.w	r2, #0
 8009246:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800924a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800924e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009252:	4689      	mov	r9, r1
 8009254:	4692      	mov	sl, r2
 8009256:	eb1b 0509 	adds.w	r5, fp, r9
 800925a:	eb4c 060a 	adc.w	r6, ip, sl
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	685b      	ldr	r3, [r3, #4]
 8009262:	4619      	mov	r1, r3
 8009264:	f04f 0200 	mov.w	r2, #0
 8009268:	f04f 0300 	mov.w	r3, #0
 800926c:	f04f 0400 	mov.w	r4, #0
 8009270:	0094      	lsls	r4, r2, #2
 8009272:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009276:	008b      	lsls	r3, r1, #2
 8009278:	461a      	mov	r2, r3
 800927a:	4623      	mov	r3, r4
 800927c:	4628      	mov	r0, r5
 800927e:	4631      	mov	r1, r6
 8009280:	f7f7 fd32 	bl	8000ce8 <__aeabi_uldivmod>
 8009284:	4603      	mov	r3, r0
 8009286:	460c      	mov	r4, r1
 8009288:	461a      	mov	r2, r3
 800928a:	4b32      	ldr	r3, [pc, #200]	; (8009354 <UART_SetConfig+0x6f4>)
 800928c:	fba3 1302 	umull	r1, r3, r3, r2
 8009290:	095b      	lsrs	r3, r3, #5
 8009292:	2164      	movs	r1, #100	; 0x64
 8009294:	fb01 f303 	mul.w	r3, r1, r3
 8009298:	1ad3      	subs	r3, r2, r3
 800929a:	011b      	lsls	r3, r3, #4
 800929c:	3332      	adds	r3, #50	; 0x32
 800929e:	4a2d      	ldr	r2, [pc, #180]	; (8009354 <UART_SetConfig+0x6f4>)
 80092a0:	fba2 2303 	umull	r2, r3, r2, r3
 80092a4:	095b      	lsrs	r3, r3, #5
 80092a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80092aa:	4498      	add	r8, r3
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	469b      	mov	fp, r3
 80092b0:	f04f 0c00 	mov.w	ip, #0
 80092b4:	46d9      	mov	r9, fp
 80092b6:	46e2      	mov	sl, ip
 80092b8:	eb19 0309 	adds.w	r3, r9, r9
 80092bc:	eb4a 040a 	adc.w	r4, sl, sl
 80092c0:	4699      	mov	r9, r3
 80092c2:	46a2      	mov	sl, r4
 80092c4:	eb19 090b 	adds.w	r9, r9, fp
 80092c8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80092cc:	f04f 0100 	mov.w	r1, #0
 80092d0:	f04f 0200 	mov.w	r2, #0
 80092d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80092d8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80092dc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80092e0:	4689      	mov	r9, r1
 80092e2:	4692      	mov	sl, r2
 80092e4:	eb1b 0509 	adds.w	r5, fp, r9
 80092e8:	eb4c 060a 	adc.w	r6, ip, sl
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	4619      	mov	r1, r3
 80092f2:	f04f 0200 	mov.w	r2, #0
 80092f6:	f04f 0300 	mov.w	r3, #0
 80092fa:	f04f 0400 	mov.w	r4, #0
 80092fe:	0094      	lsls	r4, r2, #2
 8009300:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009304:	008b      	lsls	r3, r1, #2
 8009306:	461a      	mov	r2, r3
 8009308:	4623      	mov	r3, r4
 800930a:	4628      	mov	r0, r5
 800930c:	4631      	mov	r1, r6
 800930e:	f7f7 fceb 	bl	8000ce8 <__aeabi_uldivmod>
 8009312:	4603      	mov	r3, r0
 8009314:	460c      	mov	r4, r1
 8009316:	461a      	mov	r2, r3
 8009318:	4b0e      	ldr	r3, [pc, #56]	; (8009354 <UART_SetConfig+0x6f4>)
 800931a:	fba3 1302 	umull	r1, r3, r3, r2
 800931e:	095b      	lsrs	r3, r3, #5
 8009320:	2164      	movs	r1, #100	; 0x64
 8009322:	fb01 f303 	mul.w	r3, r1, r3
 8009326:	1ad3      	subs	r3, r2, r3
 8009328:	011b      	lsls	r3, r3, #4
 800932a:	3332      	adds	r3, #50	; 0x32
 800932c:	4a09      	ldr	r2, [pc, #36]	; (8009354 <UART_SetConfig+0x6f4>)
 800932e:	fba2 2303 	umull	r2, r3, r2, r3
 8009332:	095b      	lsrs	r3, r3, #5
 8009334:	f003 020f 	and.w	r2, r3, #15
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	4442      	add	r2, r8
 800933e:	609a      	str	r2, [r3, #8]
}
 8009340:	e7ff      	b.n	8009342 <UART_SetConfig+0x6e2>
 8009342:	bf00      	nop
 8009344:	3714      	adds	r7, #20
 8009346:	46bd      	mov	sp, r7
 8009348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800934c:	40011000 	.word	0x40011000
 8009350:	40011400 	.word	0x40011400
 8009354:	51eb851f 	.word	0x51eb851f

08009358 <__errno>:
 8009358:	4b01      	ldr	r3, [pc, #4]	; (8009360 <__errno+0x8>)
 800935a:	6818      	ldr	r0, [r3, #0]
 800935c:	4770      	bx	lr
 800935e:	bf00      	nop
 8009360:	2000000c 	.word	0x2000000c

08009364 <__libc_init_array>:
 8009364:	b570      	push	{r4, r5, r6, lr}
 8009366:	4e0d      	ldr	r6, [pc, #52]	; (800939c <__libc_init_array+0x38>)
 8009368:	4c0d      	ldr	r4, [pc, #52]	; (80093a0 <__libc_init_array+0x3c>)
 800936a:	1ba4      	subs	r4, r4, r6
 800936c:	10a4      	asrs	r4, r4, #2
 800936e:	2500      	movs	r5, #0
 8009370:	42a5      	cmp	r5, r4
 8009372:	d109      	bne.n	8009388 <__libc_init_array+0x24>
 8009374:	4e0b      	ldr	r6, [pc, #44]	; (80093a4 <__libc_init_array+0x40>)
 8009376:	4c0c      	ldr	r4, [pc, #48]	; (80093a8 <__libc_init_array+0x44>)
 8009378:	f004 f8dc 	bl	800d534 <_init>
 800937c:	1ba4      	subs	r4, r4, r6
 800937e:	10a4      	asrs	r4, r4, #2
 8009380:	2500      	movs	r5, #0
 8009382:	42a5      	cmp	r5, r4
 8009384:	d105      	bne.n	8009392 <__libc_init_array+0x2e>
 8009386:	bd70      	pop	{r4, r5, r6, pc}
 8009388:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800938c:	4798      	blx	r3
 800938e:	3501      	adds	r5, #1
 8009390:	e7ee      	b.n	8009370 <__libc_init_array+0xc>
 8009392:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009396:	4798      	blx	r3
 8009398:	3501      	adds	r5, #1
 800939a:	e7f2      	b.n	8009382 <__libc_init_array+0x1e>
 800939c:	0800db38 	.word	0x0800db38
 80093a0:	0800db38 	.word	0x0800db38
 80093a4:	0800db38 	.word	0x0800db38
 80093a8:	0800db3c 	.word	0x0800db3c

080093ac <memcpy>:
 80093ac:	b510      	push	{r4, lr}
 80093ae:	1e43      	subs	r3, r0, #1
 80093b0:	440a      	add	r2, r1
 80093b2:	4291      	cmp	r1, r2
 80093b4:	d100      	bne.n	80093b8 <memcpy+0xc>
 80093b6:	bd10      	pop	{r4, pc}
 80093b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093c0:	e7f7      	b.n	80093b2 <memcpy+0x6>

080093c2 <memset>:
 80093c2:	4402      	add	r2, r0
 80093c4:	4603      	mov	r3, r0
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d100      	bne.n	80093cc <memset+0xa>
 80093ca:	4770      	bx	lr
 80093cc:	f803 1b01 	strb.w	r1, [r3], #1
 80093d0:	e7f9      	b.n	80093c6 <memset+0x4>

080093d2 <__cvt>:
 80093d2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093d6:	ec55 4b10 	vmov	r4, r5, d0
 80093da:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80093dc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80093e0:	2d00      	cmp	r5, #0
 80093e2:	460e      	mov	r6, r1
 80093e4:	4691      	mov	r9, r2
 80093e6:	4619      	mov	r1, r3
 80093e8:	bfb8      	it	lt
 80093ea:	4622      	movlt	r2, r4
 80093ec:	462b      	mov	r3, r5
 80093ee:	f027 0720 	bic.w	r7, r7, #32
 80093f2:	bfbb      	ittet	lt
 80093f4:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80093f8:	461d      	movlt	r5, r3
 80093fa:	2300      	movge	r3, #0
 80093fc:	232d      	movlt	r3, #45	; 0x2d
 80093fe:	bfb8      	it	lt
 8009400:	4614      	movlt	r4, r2
 8009402:	2f46      	cmp	r7, #70	; 0x46
 8009404:	700b      	strb	r3, [r1, #0]
 8009406:	d004      	beq.n	8009412 <__cvt+0x40>
 8009408:	2f45      	cmp	r7, #69	; 0x45
 800940a:	d100      	bne.n	800940e <__cvt+0x3c>
 800940c:	3601      	adds	r6, #1
 800940e:	2102      	movs	r1, #2
 8009410:	e000      	b.n	8009414 <__cvt+0x42>
 8009412:	2103      	movs	r1, #3
 8009414:	ab03      	add	r3, sp, #12
 8009416:	9301      	str	r3, [sp, #4]
 8009418:	ab02      	add	r3, sp, #8
 800941a:	9300      	str	r3, [sp, #0]
 800941c:	4632      	mov	r2, r6
 800941e:	4653      	mov	r3, sl
 8009420:	ec45 4b10 	vmov	d0, r4, r5
 8009424:	f000 fce0 	bl	8009de8 <_dtoa_r>
 8009428:	2f47      	cmp	r7, #71	; 0x47
 800942a:	4680      	mov	r8, r0
 800942c:	d102      	bne.n	8009434 <__cvt+0x62>
 800942e:	f019 0f01 	tst.w	r9, #1
 8009432:	d026      	beq.n	8009482 <__cvt+0xb0>
 8009434:	2f46      	cmp	r7, #70	; 0x46
 8009436:	eb08 0906 	add.w	r9, r8, r6
 800943a:	d111      	bne.n	8009460 <__cvt+0x8e>
 800943c:	f898 3000 	ldrb.w	r3, [r8]
 8009440:	2b30      	cmp	r3, #48	; 0x30
 8009442:	d10a      	bne.n	800945a <__cvt+0x88>
 8009444:	2200      	movs	r2, #0
 8009446:	2300      	movs	r3, #0
 8009448:	4620      	mov	r0, r4
 800944a:	4629      	mov	r1, r5
 800944c:	f7f7 fb3c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009450:	b918      	cbnz	r0, 800945a <__cvt+0x88>
 8009452:	f1c6 0601 	rsb	r6, r6, #1
 8009456:	f8ca 6000 	str.w	r6, [sl]
 800945a:	f8da 3000 	ldr.w	r3, [sl]
 800945e:	4499      	add	r9, r3
 8009460:	2200      	movs	r2, #0
 8009462:	2300      	movs	r3, #0
 8009464:	4620      	mov	r0, r4
 8009466:	4629      	mov	r1, r5
 8009468:	f7f7 fb2e 	bl	8000ac8 <__aeabi_dcmpeq>
 800946c:	b938      	cbnz	r0, 800947e <__cvt+0xac>
 800946e:	2230      	movs	r2, #48	; 0x30
 8009470:	9b03      	ldr	r3, [sp, #12]
 8009472:	454b      	cmp	r3, r9
 8009474:	d205      	bcs.n	8009482 <__cvt+0xb0>
 8009476:	1c59      	adds	r1, r3, #1
 8009478:	9103      	str	r1, [sp, #12]
 800947a:	701a      	strb	r2, [r3, #0]
 800947c:	e7f8      	b.n	8009470 <__cvt+0x9e>
 800947e:	f8cd 900c 	str.w	r9, [sp, #12]
 8009482:	9b03      	ldr	r3, [sp, #12]
 8009484:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009486:	eba3 0308 	sub.w	r3, r3, r8
 800948a:	4640      	mov	r0, r8
 800948c:	6013      	str	r3, [r2, #0]
 800948e:	b004      	add	sp, #16
 8009490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009494 <__exponent>:
 8009494:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009496:	2900      	cmp	r1, #0
 8009498:	4604      	mov	r4, r0
 800949a:	bfba      	itte	lt
 800949c:	4249      	neglt	r1, r1
 800949e:	232d      	movlt	r3, #45	; 0x2d
 80094a0:	232b      	movge	r3, #43	; 0x2b
 80094a2:	2909      	cmp	r1, #9
 80094a4:	f804 2b02 	strb.w	r2, [r4], #2
 80094a8:	7043      	strb	r3, [r0, #1]
 80094aa:	dd20      	ble.n	80094ee <__exponent+0x5a>
 80094ac:	f10d 0307 	add.w	r3, sp, #7
 80094b0:	461f      	mov	r7, r3
 80094b2:	260a      	movs	r6, #10
 80094b4:	fb91 f5f6 	sdiv	r5, r1, r6
 80094b8:	fb06 1115 	mls	r1, r6, r5, r1
 80094bc:	3130      	adds	r1, #48	; 0x30
 80094be:	2d09      	cmp	r5, #9
 80094c0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80094c4:	f103 32ff 	add.w	r2, r3, #4294967295
 80094c8:	4629      	mov	r1, r5
 80094ca:	dc09      	bgt.n	80094e0 <__exponent+0x4c>
 80094cc:	3130      	adds	r1, #48	; 0x30
 80094ce:	3b02      	subs	r3, #2
 80094d0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80094d4:	42bb      	cmp	r3, r7
 80094d6:	4622      	mov	r2, r4
 80094d8:	d304      	bcc.n	80094e4 <__exponent+0x50>
 80094da:	1a10      	subs	r0, r2, r0
 80094dc:	b003      	add	sp, #12
 80094de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094e0:	4613      	mov	r3, r2
 80094e2:	e7e7      	b.n	80094b4 <__exponent+0x20>
 80094e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094e8:	f804 2b01 	strb.w	r2, [r4], #1
 80094ec:	e7f2      	b.n	80094d4 <__exponent+0x40>
 80094ee:	2330      	movs	r3, #48	; 0x30
 80094f0:	4419      	add	r1, r3
 80094f2:	7083      	strb	r3, [r0, #2]
 80094f4:	1d02      	adds	r2, r0, #4
 80094f6:	70c1      	strb	r1, [r0, #3]
 80094f8:	e7ef      	b.n	80094da <__exponent+0x46>
	...

080094fc <_printf_float>:
 80094fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009500:	b08d      	sub	sp, #52	; 0x34
 8009502:	460c      	mov	r4, r1
 8009504:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8009508:	4616      	mov	r6, r2
 800950a:	461f      	mov	r7, r3
 800950c:	4605      	mov	r5, r0
 800950e:	f001 fa23 	bl	800a958 <_localeconv_r>
 8009512:	6803      	ldr	r3, [r0, #0]
 8009514:	9304      	str	r3, [sp, #16]
 8009516:	4618      	mov	r0, r3
 8009518:	f7f6 feaa 	bl	8000270 <strlen>
 800951c:	2300      	movs	r3, #0
 800951e:	930a      	str	r3, [sp, #40]	; 0x28
 8009520:	f8d8 3000 	ldr.w	r3, [r8]
 8009524:	9005      	str	r0, [sp, #20]
 8009526:	3307      	adds	r3, #7
 8009528:	f023 0307 	bic.w	r3, r3, #7
 800952c:	f103 0208 	add.w	r2, r3, #8
 8009530:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009534:	f8d4 b000 	ldr.w	fp, [r4]
 8009538:	f8c8 2000 	str.w	r2, [r8]
 800953c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009540:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009544:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009548:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800954c:	9307      	str	r3, [sp, #28]
 800954e:	f8cd 8018 	str.w	r8, [sp, #24]
 8009552:	f04f 32ff 	mov.w	r2, #4294967295
 8009556:	4ba7      	ldr	r3, [pc, #668]	; (80097f4 <_printf_float+0x2f8>)
 8009558:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800955c:	f7f7 fae6 	bl	8000b2c <__aeabi_dcmpun>
 8009560:	bb70      	cbnz	r0, 80095c0 <_printf_float+0xc4>
 8009562:	f04f 32ff 	mov.w	r2, #4294967295
 8009566:	4ba3      	ldr	r3, [pc, #652]	; (80097f4 <_printf_float+0x2f8>)
 8009568:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800956c:	f7f7 fac0 	bl	8000af0 <__aeabi_dcmple>
 8009570:	bb30      	cbnz	r0, 80095c0 <_printf_float+0xc4>
 8009572:	2200      	movs	r2, #0
 8009574:	2300      	movs	r3, #0
 8009576:	4640      	mov	r0, r8
 8009578:	4649      	mov	r1, r9
 800957a:	f7f7 faaf 	bl	8000adc <__aeabi_dcmplt>
 800957e:	b110      	cbz	r0, 8009586 <_printf_float+0x8a>
 8009580:	232d      	movs	r3, #45	; 0x2d
 8009582:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009586:	4a9c      	ldr	r2, [pc, #624]	; (80097f8 <_printf_float+0x2fc>)
 8009588:	4b9c      	ldr	r3, [pc, #624]	; (80097fc <_printf_float+0x300>)
 800958a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800958e:	bf8c      	ite	hi
 8009590:	4690      	movhi	r8, r2
 8009592:	4698      	movls	r8, r3
 8009594:	2303      	movs	r3, #3
 8009596:	f02b 0204 	bic.w	r2, fp, #4
 800959a:	6123      	str	r3, [r4, #16]
 800959c:	6022      	str	r2, [r4, #0]
 800959e:	f04f 0900 	mov.w	r9, #0
 80095a2:	9700      	str	r7, [sp, #0]
 80095a4:	4633      	mov	r3, r6
 80095a6:	aa0b      	add	r2, sp, #44	; 0x2c
 80095a8:	4621      	mov	r1, r4
 80095aa:	4628      	mov	r0, r5
 80095ac:	f000 f9e6 	bl	800997c <_printf_common>
 80095b0:	3001      	adds	r0, #1
 80095b2:	f040 808d 	bne.w	80096d0 <_printf_float+0x1d4>
 80095b6:	f04f 30ff 	mov.w	r0, #4294967295
 80095ba:	b00d      	add	sp, #52	; 0x34
 80095bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095c0:	4642      	mov	r2, r8
 80095c2:	464b      	mov	r3, r9
 80095c4:	4640      	mov	r0, r8
 80095c6:	4649      	mov	r1, r9
 80095c8:	f7f7 fab0 	bl	8000b2c <__aeabi_dcmpun>
 80095cc:	b110      	cbz	r0, 80095d4 <_printf_float+0xd8>
 80095ce:	4a8c      	ldr	r2, [pc, #560]	; (8009800 <_printf_float+0x304>)
 80095d0:	4b8c      	ldr	r3, [pc, #560]	; (8009804 <_printf_float+0x308>)
 80095d2:	e7da      	b.n	800958a <_printf_float+0x8e>
 80095d4:	6861      	ldr	r1, [r4, #4]
 80095d6:	1c4b      	adds	r3, r1, #1
 80095d8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80095dc:	a80a      	add	r0, sp, #40	; 0x28
 80095de:	d13e      	bne.n	800965e <_printf_float+0x162>
 80095e0:	2306      	movs	r3, #6
 80095e2:	6063      	str	r3, [r4, #4]
 80095e4:	2300      	movs	r3, #0
 80095e6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80095ea:	ab09      	add	r3, sp, #36	; 0x24
 80095ec:	9300      	str	r3, [sp, #0]
 80095ee:	ec49 8b10 	vmov	d0, r8, r9
 80095f2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80095f6:	6022      	str	r2, [r4, #0]
 80095f8:	f8cd a004 	str.w	sl, [sp, #4]
 80095fc:	6861      	ldr	r1, [r4, #4]
 80095fe:	4628      	mov	r0, r5
 8009600:	f7ff fee7 	bl	80093d2 <__cvt>
 8009604:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8009608:	2b47      	cmp	r3, #71	; 0x47
 800960a:	4680      	mov	r8, r0
 800960c:	d109      	bne.n	8009622 <_printf_float+0x126>
 800960e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009610:	1cd8      	adds	r0, r3, #3
 8009612:	db02      	blt.n	800961a <_printf_float+0x11e>
 8009614:	6862      	ldr	r2, [r4, #4]
 8009616:	4293      	cmp	r3, r2
 8009618:	dd47      	ble.n	80096aa <_printf_float+0x1ae>
 800961a:	f1aa 0a02 	sub.w	sl, sl, #2
 800961e:	fa5f fa8a 	uxtb.w	sl, sl
 8009622:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009626:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009628:	d824      	bhi.n	8009674 <_printf_float+0x178>
 800962a:	3901      	subs	r1, #1
 800962c:	4652      	mov	r2, sl
 800962e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009632:	9109      	str	r1, [sp, #36]	; 0x24
 8009634:	f7ff ff2e 	bl	8009494 <__exponent>
 8009638:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800963a:	1813      	adds	r3, r2, r0
 800963c:	2a01      	cmp	r2, #1
 800963e:	4681      	mov	r9, r0
 8009640:	6123      	str	r3, [r4, #16]
 8009642:	dc02      	bgt.n	800964a <_printf_float+0x14e>
 8009644:	6822      	ldr	r2, [r4, #0]
 8009646:	07d1      	lsls	r1, r2, #31
 8009648:	d501      	bpl.n	800964e <_printf_float+0x152>
 800964a:	3301      	adds	r3, #1
 800964c:	6123      	str	r3, [r4, #16]
 800964e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009652:	2b00      	cmp	r3, #0
 8009654:	d0a5      	beq.n	80095a2 <_printf_float+0xa6>
 8009656:	232d      	movs	r3, #45	; 0x2d
 8009658:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800965c:	e7a1      	b.n	80095a2 <_printf_float+0xa6>
 800965e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8009662:	f000 8177 	beq.w	8009954 <_printf_float+0x458>
 8009666:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800966a:	d1bb      	bne.n	80095e4 <_printf_float+0xe8>
 800966c:	2900      	cmp	r1, #0
 800966e:	d1b9      	bne.n	80095e4 <_printf_float+0xe8>
 8009670:	2301      	movs	r3, #1
 8009672:	e7b6      	b.n	80095e2 <_printf_float+0xe6>
 8009674:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8009678:	d119      	bne.n	80096ae <_printf_float+0x1b2>
 800967a:	2900      	cmp	r1, #0
 800967c:	6863      	ldr	r3, [r4, #4]
 800967e:	dd0c      	ble.n	800969a <_printf_float+0x19e>
 8009680:	6121      	str	r1, [r4, #16]
 8009682:	b913      	cbnz	r3, 800968a <_printf_float+0x18e>
 8009684:	6822      	ldr	r2, [r4, #0]
 8009686:	07d2      	lsls	r2, r2, #31
 8009688:	d502      	bpl.n	8009690 <_printf_float+0x194>
 800968a:	3301      	adds	r3, #1
 800968c:	440b      	add	r3, r1
 800968e:	6123      	str	r3, [r4, #16]
 8009690:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009692:	65a3      	str	r3, [r4, #88]	; 0x58
 8009694:	f04f 0900 	mov.w	r9, #0
 8009698:	e7d9      	b.n	800964e <_printf_float+0x152>
 800969a:	b913      	cbnz	r3, 80096a2 <_printf_float+0x1a6>
 800969c:	6822      	ldr	r2, [r4, #0]
 800969e:	07d0      	lsls	r0, r2, #31
 80096a0:	d501      	bpl.n	80096a6 <_printf_float+0x1aa>
 80096a2:	3302      	adds	r3, #2
 80096a4:	e7f3      	b.n	800968e <_printf_float+0x192>
 80096a6:	2301      	movs	r3, #1
 80096a8:	e7f1      	b.n	800968e <_printf_float+0x192>
 80096aa:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80096ae:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80096b2:	4293      	cmp	r3, r2
 80096b4:	db05      	blt.n	80096c2 <_printf_float+0x1c6>
 80096b6:	6822      	ldr	r2, [r4, #0]
 80096b8:	6123      	str	r3, [r4, #16]
 80096ba:	07d1      	lsls	r1, r2, #31
 80096bc:	d5e8      	bpl.n	8009690 <_printf_float+0x194>
 80096be:	3301      	adds	r3, #1
 80096c0:	e7e5      	b.n	800968e <_printf_float+0x192>
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	bfd4      	ite	le
 80096c6:	f1c3 0302 	rsble	r3, r3, #2
 80096ca:	2301      	movgt	r3, #1
 80096cc:	4413      	add	r3, r2
 80096ce:	e7de      	b.n	800968e <_printf_float+0x192>
 80096d0:	6823      	ldr	r3, [r4, #0]
 80096d2:	055a      	lsls	r2, r3, #21
 80096d4:	d407      	bmi.n	80096e6 <_printf_float+0x1ea>
 80096d6:	6923      	ldr	r3, [r4, #16]
 80096d8:	4642      	mov	r2, r8
 80096da:	4631      	mov	r1, r6
 80096dc:	4628      	mov	r0, r5
 80096de:	47b8      	blx	r7
 80096e0:	3001      	adds	r0, #1
 80096e2:	d12b      	bne.n	800973c <_printf_float+0x240>
 80096e4:	e767      	b.n	80095b6 <_printf_float+0xba>
 80096e6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80096ea:	f240 80dc 	bls.w	80098a6 <_printf_float+0x3aa>
 80096ee:	2200      	movs	r2, #0
 80096f0:	2300      	movs	r3, #0
 80096f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80096f6:	f7f7 f9e7 	bl	8000ac8 <__aeabi_dcmpeq>
 80096fa:	2800      	cmp	r0, #0
 80096fc:	d033      	beq.n	8009766 <_printf_float+0x26a>
 80096fe:	2301      	movs	r3, #1
 8009700:	4a41      	ldr	r2, [pc, #260]	; (8009808 <_printf_float+0x30c>)
 8009702:	4631      	mov	r1, r6
 8009704:	4628      	mov	r0, r5
 8009706:	47b8      	blx	r7
 8009708:	3001      	adds	r0, #1
 800970a:	f43f af54 	beq.w	80095b6 <_printf_float+0xba>
 800970e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009712:	429a      	cmp	r2, r3
 8009714:	db02      	blt.n	800971c <_printf_float+0x220>
 8009716:	6823      	ldr	r3, [r4, #0]
 8009718:	07d8      	lsls	r0, r3, #31
 800971a:	d50f      	bpl.n	800973c <_printf_float+0x240>
 800971c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009720:	4631      	mov	r1, r6
 8009722:	4628      	mov	r0, r5
 8009724:	47b8      	blx	r7
 8009726:	3001      	adds	r0, #1
 8009728:	f43f af45 	beq.w	80095b6 <_printf_float+0xba>
 800972c:	f04f 0800 	mov.w	r8, #0
 8009730:	f104 091a 	add.w	r9, r4, #26
 8009734:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009736:	3b01      	subs	r3, #1
 8009738:	4543      	cmp	r3, r8
 800973a:	dc09      	bgt.n	8009750 <_printf_float+0x254>
 800973c:	6823      	ldr	r3, [r4, #0]
 800973e:	079b      	lsls	r3, r3, #30
 8009740:	f100 8103 	bmi.w	800994a <_printf_float+0x44e>
 8009744:	68e0      	ldr	r0, [r4, #12]
 8009746:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009748:	4298      	cmp	r0, r3
 800974a:	bfb8      	it	lt
 800974c:	4618      	movlt	r0, r3
 800974e:	e734      	b.n	80095ba <_printf_float+0xbe>
 8009750:	2301      	movs	r3, #1
 8009752:	464a      	mov	r2, r9
 8009754:	4631      	mov	r1, r6
 8009756:	4628      	mov	r0, r5
 8009758:	47b8      	blx	r7
 800975a:	3001      	adds	r0, #1
 800975c:	f43f af2b 	beq.w	80095b6 <_printf_float+0xba>
 8009760:	f108 0801 	add.w	r8, r8, #1
 8009764:	e7e6      	b.n	8009734 <_printf_float+0x238>
 8009766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009768:	2b00      	cmp	r3, #0
 800976a:	dc2b      	bgt.n	80097c4 <_printf_float+0x2c8>
 800976c:	2301      	movs	r3, #1
 800976e:	4a26      	ldr	r2, [pc, #152]	; (8009808 <_printf_float+0x30c>)
 8009770:	4631      	mov	r1, r6
 8009772:	4628      	mov	r0, r5
 8009774:	47b8      	blx	r7
 8009776:	3001      	adds	r0, #1
 8009778:	f43f af1d 	beq.w	80095b6 <_printf_float+0xba>
 800977c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800977e:	b923      	cbnz	r3, 800978a <_printf_float+0x28e>
 8009780:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009782:	b913      	cbnz	r3, 800978a <_printf_float+0x28e>
 8009784:	6823      	ldr	r3, [r4, #0]
 8009786:	07d9      	lsls	r1, r3, #31
 8009788:	d5d8      	bpl.n	800973c <_printf_float+0x240>
 800978a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800978e:	4631      	mov	r1, r6
 8009790:	4628      	mov	r0, r5
 8009792:	47b8      	blx	r7
 8009794:	3001      	adds	r0, #1
 8009796:	f43f af0e 	beq.w	80095b6 <_printf_float+0xba>
 800979a:	f04f 0900 	mov.w	r9, #0
 800979e:	f104 0a1a 	add.w	sl, r4, #26
 80097a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097a4:	425b      	negs	r3, r3
 80097a6:	454b      	cmp	r3, r9
 80097a8:	dc01      	bgt.n	80097ae <_printf_float+0x2b2>
 80097aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097ac:	e794      	b.n	80096d8 <_printf_float+0x1dc>
 80097ae:	2301      	movs	r3, #1
 80097b0:	4652      	mov	r2, sl
 80097b2:	4631      	mov	r1, r6
 80097b4:	4628      	mov	r0, r5
 80097b6:	47b8      	blx	r7
 80097b8:	3001      	adds	r0, #1
 80097ba:	f43f aefc 	beq.w	80095b6 <_printf_float+0xba>
 80097be:	f109 0901 	add.w	r9, r9, #1
 80097c2:	e7ee      	b.n	80097a2 <_printf_float+0x2a6>
 80097c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80097c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80097c8:	429a      	cmp	r2, r3
 80097ca:	bfa8      	it	ge
 80097cc:	461a      	movge	r2, r3
 80097ce:	2a00      	cmp	r2, #0
 80097d0:	4691      	mov	r9, r2
 80097d2:	dd07      	ble.n	80097e4 <_printf_float+0x2e8>
 80097d4:	4613      	mov	r3, r2
 80097d6:	4631      	mov	r1, r6
 80097d8:	4642      	mov	r2, r8
 80097da:	4628      	mov	r0, r5
 80097dc:	47b8      	blx	r7
 80097de:	3001      	adds	r0, #1
 80097e0:	f43f aee9 	beq.w	80095b6 <_printf_float+0xba>
 80097e4:	f104 031a 	add.w	r3, r4, #26
 80097e8:	f04f 0b00 	mov.w	fp, #0
 80097ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80097f0:	9306      	str	r3, [sp, #24]
 80097f2:	e015      	b.n	8009820 <_printf_float+0x324>
 80097f4:	7fefffff 	.word	0x7fefffff
 80097f8:	0800d6ac 	.word	0x0800d6ac
 80097fc:	0800d6a8 	.word	0x0800d6a8
 8009800:	0800d6b4 	.word	0x0800d6b4
 8009804:	0800d6b0 	.word	0x0800d6b0
 8009808:	0800d6b8 	.word	0x0800d6b8
 800980c:	2301      	movs	r3, #1
 800980e:	9a06      	ldr	r2, [sp, #24]
 8009810:	4631      	mov	r1, r6
 8009812:	4628      	mov	r0, r5
 8009814:	47b8      	blx	r7
 8009816:	3001      	adds	r0, #1
 8009818:	f43f aecd 	beq.w	80095b6 <_printf_float+0xba>
 800981c:	f10b 0b01 	add.w	fp, fp, #1
 8009820:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009824:	ebaa 0309 	sub.w	r3, sl, r9
 8009828:	455b      	cmp	r3, fp
 800982a:	dcef      	bgt.n	800980c <_printf_float+0x310>
 800982c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009830:	429a      	cmp	r2, r3
 8009832:	44d0      	add	r8, sl
 8009834:	db15      	blt.n	8009862 <_printf_float+0x366>
 8009836:	6823      	ldr	r3, [r4, #0]
 8009838:	07da      	lsls	r2, r3, #31
 800983a:	d412      	bmi.n	8009862 <_printf_float+0x366>
 800983c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800983e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009840:	eba3 020a 	sub.w	r2, r3, sl
 8009844:	eba3 0a01 	sub.w	sl, r3, r1
 8009848:	4592      	cmp	sl, r2
 800984a:	bfa8      	it	ge
 800984c:	4692      	movge	sl, r2
 800984e:	f1ba 0f00 	cmp.w	sl, #0
 8009852:	dc0e      	bgt.n	8009872 <_printf_float+0x376>
 8009854:	f04f 0800 	mov.w	r8, #0
 8009858:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800985c:	f104 091a 	add.w	r9, r4, #26
 8009860:	e019      	b.n	8009896 <_printf_float+0x39a>
 8009862:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009866:	4631      	mov	r1, r6
 8009868:	4628      	mov	r0, r5
 800986a:	47b8      	blx	r7
 800986c:	3001      	adds	r0, #1
 800986e:	d1e5      	bne.n	800983c <_printf_float+0x340>
 8009870:	e6a1      	b.n	80095b6 <_printf_float+0xba>
 8009872:	4653      	mov	r3, sl
 8009874:	4642      	mov	r2, r8
 8009876:	4631      	mov	r1, r6
 8009878:	4628      	mov	r0, r5
 800987a:	47b8      	blx	r7
 800987c:	3001      	adds	r0, #1
 800987e:	d1e9      	bne.n	8009854 <_printf_float+0x358>
 8009880:	e699      	b.n	80095b6 <_printf_float+0xba>
 8009882:	2301      	movs	r3, #1
 8009884:	464a      	mov	r2, r9
 8009886:	4631      	mov	r1, r6
 8009888:	4628      	mov	r0, r5
 800988a:	47b8      	blx	r7
 800988c:	3001      	adds	r0, #1
 800988e:	f43f ae92 	beq.w	80095b6 <_printf_float+0xba>
 8009892:	f108 0801 	add.w	r8, r8, #1
 8009896:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800989a:	1a9b      	subs	r3, r3, r2
 800989c:	eba3 030a 	sub.w	r3, r3, sl
 80098a0:	4543      	cmp	r3, r8
 80098a2:	dcee      	bgt.n	8009882 <_printf_float+0x386>
 80098a4:	e74a      	b.n	800973c <_printf_float+0x240>
 80098a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80098a8:	2a01      	cmp	r2, #1
 80098aa:	dc01      	bgt.n	80098b0 <_printf_float+0x3b4>
 80098ac:	07db      	lsls	r3, r3, #31
 80098ae:	d53a      	bpl.n	8009926 <_printf_float+0x42a>
 80098b0:	2301      	movs	r3, #1
 80098b2:	4642      	mov	r2, r8
 80098b4:	4631      	mov	r1, r6
 80098b6:	4628      	mov	r0, r5
 80098b8:	47b8      	blx	r7
 80098ba:	3001      	adds	r0, #1
 80098bc:	f43f ae7b 	beq.w	80095b6 <_printf_float+0xba>
 80098c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80098c4:	4631      	mov	r1, r6
 80098c6:	4628      	mov	r0, r5
 80098c8:	47b8      	blx	r7
 80098ca:	3001      	adds	r0, #1
 80098cc:	f108 0801 	add.w	r8, r8, #1
 80098d0:	f43f ae71 	beq.w	80095b6 <_printf_float+0xba>
 80098d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098d6:	2200      	movs	r2, #0
 80098d8:	f103 3aff 	add.w	sl, r3, #4294967295
 80098dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80098e0:	2300      	movs	r3, #0
 80098e2:	f7f7 f8f1 	bl	8000ac8 <__aeabi_dcmpeq>
 80098e6:	b9c8      	cbnz	r0, 800991c <_printf_float+0x420>
 80098e8:	4653      	mov	r3, sl
 80098ea:	4642      	mov	r2, r8
 80098ec:	4631      	mov	r1, r6
 80098ee:	4628      	mov	r0, r5
 80098f0:	47b8      	blx	r7
 80098f2:	3001      	adds	r0, #1
 80098f4:	d10e      	bne.n	8009914 <_printf_float+0x418>
 80098f6:	e65e      	b.n	80095b6 <_printf_float+0xba>
 80098f8:	2301      	movs	r3, #1
 80098fa:	4652      	mov	r2, sl
 80098fc:	4631      	mov	r1, r6
 80098fe:	4628      	mov	r0, r5
 8009900:	47b8      	blx	r7
 8009902:	3001      	adds	r0, #1
 8009904:	f43f ae57 	beq.w	80095b6 <_printf_float+0xba>
 8009908:	f108 0801 	add.w	r8, r8, #1
 800990c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800990e:	3b01      	subs	r3, #1
 8009910:	4543      	cmp	r3, r8
 8009912:	dcf1      	bgt.n	80098f8 <_printf_float+0x3fc>
 8009914:	464b      	mov	r3, r9
 8009916:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800991a:	e6de      	b.n	80096da <_printf_float+0x1de>
 800991c:	f04f 0800 	mov.w	r8, #0
 8009920:	f104 0a1a 	add.w	sl, r4, #26
 8009924:	e7f2      	b.n	800990c <_printf_float+0x410>
 8009926:	2301      	movs	r3, #1
 8009928:	e7df      	b.n	80098ea <_printf_float+0x3ee>
 800992a:	2301      	movs	r3, #1
 800992c:	464a      	mov	r2, r9
 800992e:	4631      	mov	r1, r6
 8009930:	4628      	mov	r0, r5
 8009932:	47b8      	blx	r7
 8009934:	3001      	adds	r0, #1
 8009936:	f43f ae3e 	beq.w	80095b6 <_printf_float+0xba>
 800993a:	f108 0801 	add.w	r8, r8, #1
 800993e:	68e3      	ldr	r3, [r4, #12]
 8009940:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009942:	1a9b      	subs	r3, r3, r2
 8009944:	4543      	cmp	r3, r8
 8009946:	dcf0      	bgt.n	800992a <_printf_float+0x42e>
 8009948:	e6fc      	b.n	8009744 <_printf_float+0x248>
 800994a:	f04f 0800 	mov.w	r8, #0
 800994e:	f104 0919 	add.w	r9, r4, #25
 8009952:	e7f4      	b.n	800993e <_printf_float+0x442>
 8009954:	2900      	cmp	r1, #0
 8009956:	f43f ae8b 	beq.w	8009670 <_printf_float+0x174>
 800995a:	2300      	movs	r3, #0
 800995c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009960:	ab09      	add	r3, sp, #36	; 0x24
 8009962:	9300      	str	r3, [sp, #0]
 8009964:	ec49 8b10 	vmov	d0, r8, r9
 8009968:	6022      	str	r2, [r4, #0]
 800996a:	f8cd a004 	str.w	sl, [sp, #4]
 800996e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009972:	4628      	mov	r0, r5
 8009974:	f7ff fd2d 	bl	80093d2 <__cvt>
 8009978:	4680      	mov	r8, r0
 800997a:	e648      	b.n	800960e <_printf_float+0x112>

0800997c <_printf_common>:
 800997c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009980:	4691      	mov	r9, r2
 8009982:	461f      	mov	r7, r3
 8009984:	688a      	ldr	r2, [r1, #8]
 8009986:	690b      	ldr	r3, [r1, #16]
 8009988:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800998c:	4293      	cmp	r3, r2
 800998e:	bfb8      	it	lt
 8009990:	4613      	movlt	r3, r2
 8009992:	f8c9 3000 	str.w	r3, [r9]
 8009996:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800999a:	4606      	mov	r6, r0
 800999c:	460c      	mov	r4, r1
 800999e:	b112      	cbz	r2, 80099a6 <_printf_common+0x2a>
 80099a0:	3301      	adds	r3, #1
 80099a2:	f8c9 3000 	str.w	r3, [r9]
 80099a6:	6823      	ldr	r3, [r4, #0]
 80099a8:	0699      	lsls	r1, r3, #26
 80099aa:	bf42      	ittt	mi
 80099ac:	f8d9 3000 	ldrmi.w	r3, [r9]
 80099b0:	3302      	addmi	r3, #2
 80099b2:	f8c9 3000 	strmi.w	r3, [r9]
 80099b6:	6825      	ldr	r5, [r4, #0]
 80099b8:	f015 0506 	ands.w	r5, r5, #6
 80099bc:	d107      	bne.n	80099ce <_printf_common+0x52>
 80099be:	f104 0a19 	add.w	sl, r4, #25
 80099c2:	68e3      	ldr	r3, [r4, #12]
 80099c4:	f8d9 2000 	ldr.w	r2, [r9]
 80099c8:	1a9b      	subs	r3, r3, r2
 80099ca:	42ab      	cmp	r3, r5
 80099cc:	dc28      	bgt.n	8009a20 <_printf_common+0xa4>
 80099ce:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80099d2:	6822      	ldr	r2, [r4, #0]
 80099d4:	3300      	adds	r3, #0
 80099d6:	bf18      	it	ne
 80099d8:	2301      	movne	r3, #1
 80099da:	0692      	lsls	r2, r2, #26
 80099dc:	d42d      	bmi.n	8009a3a <_printf_common+0xbe>
 80099de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80099e2:	4639      	mov	r1, r7
 80099e4:	4630      	mov	r0, r6
 80099e6:	47c0      	blx	r8
 80099e8:	3001      	adds	r0, #1
 80099ea:	d020      	beq.n	8009a2e <_printf_common+0xb2>
 80099ec:	6823      	ldr	r3, [r4, #0]
 80099ee:	68e5      	ldr	r5, [r4, #12]
 80099f0:	f8d9 2000 	ldr.w	r2, [r9]
 80099f4:	f003 0306 	and.w	r3, r3, #6
 80099f8:	2b04      	cmp	r3, #4
 80099fa:	bf08      	it	eq
 80099fc:	1aad      	subeq	r5, r5, r2
 80099fe:	68a3      	ldr	r3, [r4, #8]
 8009a00:	6922      	ldr	r2, [r4, #16]
 8009a02:	bf0c      	ite	eq
 8009a04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a08:	2500      	movne	r5, #0
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	bfc4      	itt	gt
 8009a0e:	1a9b      	subgt	r3, r3, r2
 8009a10:	18ed      	addgt	r5, r5, r3
 8009a12:	f04f 0900 	mov.w	r9, #0
 8009a16:	341a      	adds	r4, #26
 8009a18:	454d      	cmp	r5, r9
 8009a1a:	d11a      	bne.n	8009a52 <_printf_common+0xd6>
 8009a1c:	2000      	movs	r0, #0
 8009a1e:	e008      	b.n	8009a32 <_printf_common+0xb6>
 8009a20:	2301      	movs	r3, #1
 8009a22:	4652      	mov	r2, sl
 8009a24:	4639      	mov	r1, r7
 8009a26:	4630      	mov	r0, r6
 8009a28:	47c0      	blx	r8
 8009a2a:	3001      	adds	r0, #1
 8009a2c:	d103      	bne.n	8009a36 <_printf_common+0xba>
 8009a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8009a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a36:	3501      	adds	r5, #1
 8009a38:	e7c3      	b.n	80099c2 <_printf_common+0x46>
 8009a3a:	18e1      	adds	r1, r4, r3
 8009a3c:	1c5a      	adds	r2, r3, #1
 8009a3e:	2030      	movs	r0, #48	; 0x30
 8009a40:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009a44:	4422      	add	r2, r4
 8009a46:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009a4a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009a4e:	3302      	adds	r3, #2
 8009a50:	e7c5      	b.n	80099de <_printf_common+0x62>
 8009a52:	2301      	movs	r3, #1
 8009a54:	4622      	mov	r2, r4
 8009a56:	4639      	mov	r1, r7
 8009a58:	4630      	mov	r0, r6
 8009a5a:	47c0      	blx	r8
 8009a5c:	3001      	adds	r0, #1
 8009a5e:	d0e6      	beq.n	8009a2e <_printf_common+0xb2>
 8009a60:	f109 0901 	add.w	r9, r9, #1
 8009a64:	e7d8      	b.n	8009a18 <_printf_common+0x9c>
	...

08009a68 <_printf_i>:
 8009a68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009a6c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009a70:	460c      	mov	r4, r1
 8009a72:	7e09      	ldrb	r1, [r1, #24]
 8009a74:	b085      	sub	sp, #20
 8009a76:	296e      	cmp	r1, #110	; 0x6e
 8009a78:	4617      	mov	r7, r2
 8009a7a:	4606      	mov	r6, r0
 8009a7c:	4698      	mov	r8, r3
 8009a7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a80:	f000 80b3 	beq.w	8009bea <_printf_i+0x182>
 8009a84:	d822      	bhi.n	8009acc <_printf_i+0x64>
 8009a86:	2963      	cmp	r1, #99	; 0x63
 8009a88:	d036      	beq.n	8009af8 <_printf_i+0x90>
 8009a8a:	d80a      	bhi.n	8009aa2 <_printf_i+0x3a>
 8009a8c:	2900      	cmp	r1, #0
 8009a8e:	f000 80b9 	beq.w	8009c04 <_printf_i+0x19c>
 8009a92:	2958      	cmp	r1, #88	; 0x58
 8009a94:	f000 8083 	beq.w	8009b9e <_printf_i+0x136>
 8009a98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a9c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009aa0:	e032      	b.n	8009b08 <_printf_i+0xa0>
 8009aa2:	2964      	cmp	r1, #100	; 0x64
 8009aa4:	d001      	beq.n	8009aaa <_printf_i+0x42>
 8009aa6:	2969      	cmp	r1, #105	; 0x69
 8009aa8:	d1f6      	bne.n	8009a98 <_printf_i+0x30>
 8009aaa:	6820      	ldr	r0, [r4, #0]
 8009aac:	6813      	ldr	r3, [r2, #0]
 8009aae:	0605      	lsls	r5, r0, #24
 8009ab0:	f103 0104 	add.w	r1, r3, #4
 8009ab4:	d52a      	bpl.n	8009b0c <_printf_i+0xa4>
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	6011      	str	r1, [r2, #0]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	da03      	bge.n	8009ac6 <_printf_i+0x5e>
 8009abe:	222d      	movs	r2, #45	; 0x2d
 8009ac0:	425b      	negs	r3, r3
 8009ac2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009ac6:	486f      	ldr	r0, [pc, #444]	; (8009c84 <_printf_i+0x21c>)
 8009ac8:	220a      	movs	r2, #10
 8009aca:	e039      	b.n	8009b40 <_printf_i+0xd8>
 8009acc:	2973      	cmp	r1, #115	; 0x73
 8009ace:	f000 809d 	beq.w	8009c0c <_printf_i+0x1a4>
 8009ad2:	d808      	bhi.n	8009ae6 <_printf_i+0x7e>
 8009ad4:	296f      	cmp	r1, #111	; 0x6f
 8009ad6:	d020      	beq.n	8009b1a <_printf_i+0xb2>
 8009ad8:	2970      	cmp	r1, #112	; 0x70
 8009ada:	d1dd      	bne.n	8009a98 <_printf_i+0x30>
 8009adc:	6823      	ldr	r3, [r4, #0]
 8009ade:	f043 0320 	orr.w	r3, r3, #32
 8009ae2:	6023      	str	r3, [r4, #0]
 8009ae4:	e003      	b.n	8009aee <_printf_i+0x86>
 8009ae6:	2975      	cmp	r1, #117	; 0x75
 8009ae8:	d017      	beq.n	8009b1a <_printf_i+0xb2>
 8009aea:	2978      	cmp	r1, #120	; 0x78
 8009aec:	d1d4      	bne.n	8009a98 <_printf_i+0x30>
 8009aee:	2378      	movs	r3, #120	; 0x78
 8009af0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009af4:	4864      	ldr	r0, [pc, #400]	; (8009c88 <_printf_i+0x220>)
 8009af6:	e055      	b.n	8009ba4 <_printf_i+0x13c>
 8009af8:	6813      	ldr	r3, [r2, #0]
 8009afa:	1d19      	adds	r1, r3, #4
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	6011      	str	r1, [r2, #0]
 8009b00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b08:	2301      	movs	r3, #1
 8009b0a:	e08c      	b.n	8009c26 <_printf_i+0x1be>
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	6011      	str	r1, [r2, #0]
 8009b10:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009b14:	bf18      	it	ne
 8009b16:	b21b      	sxthne	r3, r3
 8009b18:	e7cf      	b.n	8009aba <_printf_i+0x52>
 8009b1a:	6813      	ldr	r3, [r2, #0]
 8009b1c:	6825      	ldr	r5, [r4, #0]
 8009b1e:	1d18      	adds	r0, r3, #4
 8009b20:	6010      	str	r0, [r2, #0]
 8009b22:	0628      	lsls	r0, r5, #24
 8009b24:	d501      	bpl.n	8009b2a <_printf_i+0xc2>
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	e002      	b.n	8009b30 <_printf_i+0xc8>
 8009b2a:	0668      	lsls	r0, r5, #25
 8009b2c:	d5fb      	bpl.n	8009b26 <_printf_i+0xbe>
 8009b2e:	881b      	ldrh	r3, [r3, #0]
 8009b30:	4854      	ldr	r0, [pc, #336]	; (8009c84 <_printf_i+0x21c>)
 8009b32:	296f      	cmp	r1, #111	; 0x6f
 8009b34:	bf14      	ite	ne
 8009b36:	220a      	movne	r2, #10
 8009b38:	2208      	moveq	r2, #8
 8009b3a:	2100      	movs	r1, #0
 8009b3c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009b40:	6865      	ldr	r5, [r4, #4]
 8009b42:	60a5      	str	r5, [r4, #8]
 8009b44:	2d00      	cmp	r5, #0
 8009b46:	f2c0 8095 	blt.w	8009c74 <_printf_i+0x20c>
 8009b4a:	6821      	ldr	r1, [r4, #0]
 8009b4c:	f021 0104 	bic.w	r1, r1, #4
 8009b50:	6021      	str	r1, [r4, #0]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d13d      	bne.n	8009bd2 <_printf_i+0x16a>
 8009b56:	2d00      	cmp	r5, #0
 8009b58:	f040 808e 	bne.w	8009c78 <_printf_i+0x210>
 8009b5c:	4665      	mov	r5, ip
 8009b5e:	2a08      	cmp	r2, #8
 8009b60:	d10b      	bne.n	8009b7a <_printf_i+0x112>
 8009b62:	6823      	ldr	r3, [r4, #0]
 8009b64:	07db      	lsls	r3, r3, #31
 8009b66:	d508      	bpl.n	8009b7a <_printf_i+0x112>
 8009b68:	6923      	ldr	r3, [r4, #16]
 8009b6a:	6862      	ldr	r2, [r4, #4]
 8009b6c:	429a      	cmp	r2, r3
 8009b6e:	bfde      	ittt	le
 8009b70:	2330      	movle	r3, #48	; 0x30
 8009b72:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009b76:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009b7a:	ebac 0305 	sub.w	r3, ip, r5
 8009b7e:	6123      	str	r3, [r4, #16]
 8009b80:	f8cd 8000 	str.w	r8, [sp]
 8009b84:	463b      	mov	r3, r7
 8009b86:	aa03      	add	r2, sp, #12
 8009b88:	4621      	mov	r1, r4
 8009b8a:	4630      	mov	r0, r6
 8009b8c:	f7ff fef6 	bl	800997c <_printf_common>
 8009b90:	3001      	adds	r0, #1
 8009b92:	d14d      	bne.n	8009c30 <_printf_i+0x1c8>
 8009b94:	f04f 30ff 	mov.w	r0, #4294967295
 8009b98:	b005      	add	sp, #20
 8009b9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b9e:	4839      	ldr	r0, [pc, #228]	; (8009c84 <_printf_i+0x21c>)
 8009ba0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009ba4:	6813      	ldr	r3, [r2, #0]
 8009ba6:	6821      	ldr	r1, [r4, #0]
 8009ba8:	1d1d      	adds	r5, r3, #4
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	6015      	str	r5, [r2, #0]
 8009bae:	060a      	lsls	r2, r1, #24
 8009bb0:	d50b      	bpl.n	8009bca <_printf_i+0x162>
 8009bb2:	07ca      	lsls	r2, r1, #31
 8009bb4:	bf44      	itt	mi
 8009bb6:	f041 0120 	orrmi.w	r1, r1, #32
 8009bba:	6021      	strmi	r1, [r4, #0]
 8009bbc:	b91b      	cbnz	r3, 8009bc6 <_printf_i+0x15e>
 8009bbe:	6822      	ldr	r2, [r4, #0]
 8009bc0:	f022 0220 	bic.w	r2, r2, #32
 8009bc4:	6022      	str	r2, [r4, #0]
 8009bc6:	2210      	movs	r2, #16
 8009bc8:	e7b7      	b.n	8009b3a <_printf_i+0xd2>
 8009bca:	064d      	lsls	r5, r1, #25
 8009bcc:	bf48      	it	mi
 8009bce:	b29b      	uxthmi	r3, r3
 8009bd0:	e7ef      	b.n	8009bb2 <_printf_i+0x14a>
 8009bd2:	4665      	mov	r5, ip
 8009bd4:	fbb3 f1f2 	udiv	r1, r3, r2
 8009bd8:	fb02 3311 	mls	r3, r2, r1, r3
 8009bdc:	5cc3      	ldrb	r3, [r0, r3]
 8009bde:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009be2:	460b      	mov	r3, r1
 8009be4:	2900      	cmp	r1, #0
 8009be6:	d1f5      	bne.n	8009bd4 <_printf_i+0x16c>
 8009be8:	e7b9      	b.n	8009b5e <_printf_i+0xf6>
 8009bea:	6813      	ldr	r3, [r2, #0]
 8009bec:	6825      	ldr	r5, [r4, #0]
 8009bee:	6961      	ldr	r1, [r4, #20]
 8009bf0:	1d18      	adds	r0, r3, #4
 8009bf2:	6010      	str	r0, [r2, #0]
 8009bf4:	0628      	lsls	r0, r5, #24
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	d501      	bpl.n	8009bfe <_printf_i+0x196>
 8009bfa:	6019      	str	r1, [r3, #0]
 8009bfc:	e002      	b.n	8009c04 <_printf_i+0x19c>
 8009bfe:	066a      	lsls	r2, r5, #25
 8009c00:	d5fb      	bpl.n	8009bfa <_printf_i+0x192>
 8009c02:	8019      	strh	r1, [r3, #0]
 8009c04:	2300      	movs	r3, #0
 8009c06:	6123      	str	r3, [r4, #16]
 8009c08:	4665      	mov	r5, ip
 8009c0a:	e7b9      	b.n	8009b80 <_printf_i+0x118>
 8009c0c:	6813      	ldr	r3, [r2, #0]
 8009c0e:	1d19      	adds	r1, r3, #4
 8009c10:	6011      	str	r1, [r2, #0]
 8009c12:	681d      	ldr	r5, [r3, #0]
 8009c14:	6862      	ldr	r2, [r4, #4]
 8009c16:	2100      	movs	r1, #0
 8009c18:	4628      	mov	r0, r5
 8009c1a:	f7f6 fad9 	bl	80001d0 <memchr>
 8009c1e:	b108      	cbz	r0, 8009c24 <_printf_i+0x1bc>
 8009c20:	1b40      	subs	r0, r0, r5
 8009c22:	6060      	str	r0, [r4, #4]
 8009c24:	6863      	ldr	r3, [r4, #4]
 8009c26:	6123      	str	r3, [r4, #16]
 8009c28:	2300      	movs	r3, #0
 8009c2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c2e:	e7a7      	b.n	8009b80 <_printf_i+0x118>
 8009c30:	6923      	ldr	r3, [r4, #16]
 8009c32:	462a      	mov	r2, r5
 8009c34:	4639      	mov	r1, r7
 8009c36:	4630      	mov	r0, r6
 8009c38:	47c0      	blx	r8
 8009c3a:	3001      	adds	r0, #1
 8009c3c:	d0aa      	beq.n	8009b94 <_printf_i+0x12c>
 8009c3e:	6823      	ldr	r3, [r4, #0]
 8009c40:	079b      	lsls	r3, r3, #30
 8009c42:	d413      	bmi.n	8009c6c <_printf_i+0x204>
 8009c44:	68e0      	ldr	r0, [r4, #12]
 8009c46:	9b03      	ldr	r3, [sp, #12]
 8009c48:	4298      	cmp	r0, r3
 8009c4a:	bfb8      	it	lt
 8009c4c:	4618      	movlt	r0, r3
 8009c4e:	e7a3      	b.n	8009b98 <_printf_i+0x130>
 8009c50:	2301      	movs	r3, #1
 8009c52:	464a      	mov	r2, r9
 8009c54:	4639      	mov	r1, r7
 8009c56:	4630      	mov	r0, r6
 8009c58:	47c0      	blx	r8
 8009c5a:	3001      	adds	r0, #1
 8009c5c:	d09a      	beq.n	8009b94 <_printf_i+0x12c>
 8009c5e:	3501      	adds	r5, #1
 8009c60:	68e3      	ldr	r3, [r4, #12]
 8009c62:	9a03      	ldr	r2, [sp, #12]
 8009c64:	1a9b      	subs	r3, r3, r2
 8009c66:	42ab      	cmp	r3, r5
 8009c68:	dcf2      	bgt.n	8009c50 <_printf_i+0x1e8>
 8009c6a:	e7eb      	b.n	8009c44 <_printf_i+0x1dc>
 8009c6c:	2500      	movs	r5, #0
 8009c6e:	f104 0919 	add.w	r9, r4, #25
 8009c72:	e7f5      	b.n	8009c60 <_printf_i+0x1f8>
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d1ac      	bne.n	8009bd2 <_printf_i+0x16a>
 8009c78:	7803      	ldrb	r3, [r0, #0]
 8009c7a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c7e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c82:	e76c      	b.n	8009b5e <_printf_i+0xf6>
 8009c84:	0800d6ba 	.word	0x0800d6ba
 8009c88:	0800d6cb 	.word	0x0800d6cb

08009c8c <siprintf>:
 8009c8c:	b40e      	push	{r1, r2, r3}
 8009c8e:	b500      	push	{lr}
 8009c90:	b09c      	sub	sp, #112	; 0x70
 8009c92:	ab1d      	add	r3, sp, #116	; 0x74
 8009c94:	9002      	str	r0, [sp, #8]
 8009c96:	9006      	str	r0, [sp, #24]
 8009c98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009c9c:	4809      	ldr	r0, [pc, #36]	; (8009cc4 <siprintf+0x38>)
 8009c9e:	9107      	str	r1, [sp, #28]
 8009ca0:	9104      	str	r1, [sp, #16]
 8009ca2:	4909      	ldr	r1, [pc, #36]	; (8009cc8 <siprintf+0x3c>)
 8009ca4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ca8:	9105      	str	r1, [sp, #20]
 8009caa:	6800      	ldr	r0, [r0, #0]
 8009cac:	9301      	str	r3, [sp, #4]
 8009cae:	a902      	add	r1, sp, #8
 8009cb0:	f001 fa54 	bl	800b15c <_svfiprintf_r>
 8009cb4:	9b02      	ldr	r3, [sp, #8]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	701a      	strb	r2, [r3, #0]
 8009cba:	b01c      	add	sp, #112	; 0x70
 8009cbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009cc0:	b003      	add	sp, #12
 8009cc2:	4770      	bx	lr
 8009cc4:	2000000c 	.word	0x2000000c
 8009cc8:	ffff0208 	.word	0xffff0208

08009ccc <quorem>:
 8009ccc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cd0:	6903      	ldr	r3, [r0, #16]
 8009cd2:	690c      	ldr	r4, [r1, #16]
 8009cd4:	42a3      	cmp	r3, r4
 8009cd6:	4680      	mov	r8, r0
 8009cd8:	f2c0 8082 	blt.w	8009de0 <quorem+0x114>
 8009cdc:	3c01      	subs	r4, #1
 8009cde:	f101 0714 	add.w	r7, r1, #20
 8009ce2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8009ce6:	f100 0614 	add.w	r6, r0, #20
 8009cea:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8009cee:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009cf2:	eb06 030c 	add.w	r3, r6, ip
 8009cf6:	3501      	adds	r5, #1
 8009cf8:	eb07 090c 	add.w	r9, r7, ip
 8009cfc:	9301      	str	r3, [sp, #4]
 8009cfe:	fbb0 f5f5 	udiv	r5, r0, r5
 8009d02:	b395      	cbz	r5, 8009d6a <quorem+0x9e>
 8009d04:	f04f 0a00 	mov.w	sl, #0
 8009d08:	4638      	mov	r0, r7
 8009d0a:	46b6      	mov	lr, r6
 8009d0c:	46d3      	mov	fp, sl
 8009d0e:	f850 2b04 	ldr.w	r2, [r0], #4
 8009d12:	b293      	uxth	r3, r2
 8009d14:	fb05 a303 	mla	r3, r5, r3, sl
 8009d18:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009d1c:	b29b      	uxth	r3, r3
 8009d1e:	ebab 0303 	sub.w	r3, fp, r3
 8009d22:	0c12      	lsrs	r2, r2, #16
 8009d24:	f8de b000 	ldr.w	fp, [lr]
 8009d28:	fb05 a202 	mla	r2, r5, r2, sl
 8009d2c:	fa13 f38b 	uxtah	r3, r3, fp
 8009d30:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009d34:	fa1f fb82 	uxth.w	fp, r2
 8009d38:	f8de 2000 	ldr.w	r2, [lr]
 8009d3c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009d40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009d44:	b29b      	uxth	r3, r3
 8009d46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009d4a:	4581      	cmp	r9, r0
 8009d4c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009d50:	f84e 3b04 	str.w	r3, [lr], #4
 8009d54:	d2db      	bcs.n	8009d0e <quorem+0x42>
 8009d56:	f856 300c 	ldr.w	r3, [r6, ip]
 8009d5a:	b933      	cbnz	r3, 8009d6a <quorem+0x9e>
 8009d5c:	9b01      	ldr	r3, [sp, #4]
 8009d5e:	3b04      	subs	r3, #4
 8009d60:	429e      	cmp	r6, r3
 8009d62:	461a      	mov	r2, r3
 8009d64:	d330      	bcc.n	8009dc8 <quorem+0xfc>
 8009d66:	f8c8 4010 	str.w	r4, [r8, #16]
 8009d6a:	4640      	mov	r0, r8
 8009d6c:	f001 f820 	bl	800adb0 <__mcmp>
 8009d70:	2800      	cmp	r0, #0
 8009d72:	db25      	blt.n	8009dc0 <quorem+0xf4>
 8009d74:	3501      	adds	r5, #1
 8009d76:	4630      	mov	r0, r6
 8009d78:	f04f 0c00 	mov.w	ip, #0
 8009d7c:	f857 2b04 	ldr.w	r2, [r7], #4
 8009d80:	f8d0 e000 	ldr.w	lr, [r0]
 8009d84:	b293      	uxth	r3, r2
 8009d86:	ebac 0303 	sub.w	r3, ip, r3
 8009d8a:	0c12      	lsrs	r2, r2, #16
 8009d8c:	fa13 f38e 	uxtah	r3, r3, lr
 8009d90:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009d94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009d98:	b29b      	uxth	r3, r3
 8009d9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009d9e:	45b9      	cmp	r9, r7
 8009da0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009da4:	f840 3b04 	str.w	r3, [r0], #4
 8009da8:	d2e8      	bcs.n	8009d7c <quorem+0xb0>
 8009daa:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8009dae:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8009db2:	b92a      	cbnz	r2, 8009dc0 <quorem+0xf4>
 8009db4:	3b04      	subs	r3, #4
 8009db6:	429e      	cmp	r6, r3
 8009db8:	461a      	mov	r2, r3
 8009dba:	d30b      	bcc.n	8009dd4 <quorem+0x108>
 8009dbc:	f8c8 4010 	str.w	r4, [r8, #16]
 8009dc0:	4628      	mov	r0, r5
 8009dc2:	b003      	add	sp, #12
 8009dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dc8:	6812      	ldr	r2, [r2, #0]
 8009dca:	3b04      	subs	r3, #4
 8009dcc:	2a00      	cmp	r2, #0
 8009dce:	d1ca      	bne.n	8009d66 <quorem+0x9a>
 8009dd0:	3c01      	subs	r4, #1
 8009dd2:	e7c5      	b.n	8009d60 <quorem+0x94>
 8009dd4:	6812      	ldr	r2, [r2, #0]
 8009dd6:	3b04      	subs	r3, #4
 8009dd8:	2a00      	cmp	r2, #0
 8009dda:	d1ef      	bne.n	8009dbc <quorem+0xf0>
 8009ddc:	3c01      	subs	r4, #1
 8009dde:	e7ea      	b.n	8009db6 <quorem+0xea>
 8009de0:	2000      	movs	r0, #0
 8009de2:	e7ee      	b.n	8009dc2 <quorem+0xf6>
 8009de4:	0000      	movs	r0, r0
	...

08009de8 <_dtoa_r>:
 8009de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dec:	ec57 6b10 	vmov	r6, r7, d0
 8009df0:	b097      	sub	sp, #92	; 0x5c
 8009df2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009df4:	9106      	str	r1, [sp, #24]
 8009df6:	4604      	mov	r4, r0
 8009df8:	920b      	str	r2, [sp, #44]	; 0x2c
 8009dfa:	9312      	str	r3, [sp, #72]	; 0x48
 8009dfc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009e00:	e9cd 6700 	strd	r6, r7, [sp]
 8009e04:	b93d      	cbnz	r5, 8009e16 <_dtoa_r+0x2e>
 8009e06:	2010      	movs	r0, #16
 8009e08:	f000 fdb4 	bl	800a974 <malloc>
 8009e0c:	6260      	str	r0, [r4, #36]	; 0x24
 8009e0e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009e12:	6005      	str	r5, [r0, #0]
 8009e14:	60c5      	str	r5, [r0, #12]
 8009e16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e18:	6819      	ldr	r1, [r3, #0]
 8009e1a:	b151      	cbz	r1, 8009e32 <_dtoa_r+0x4a>
 8009e1c:	685a      	ldr	r2, [r3, #4]
 8009e1e:	604a      	str	r2, [r1, #4]
 8009e20:	2301      	movs	r3, #1
 8009e22:	4093      	lsls	r3, r2
 8009e24:	608b      	str	r3, [r1, #8]
 8009e26:	4620      	mov	r0, r4
 8009e28:	f000 fde0 	bl	800a9ec <_Bfree>
 8009e2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e2e:	2200      	movs	r2, #0
 8009e30:	601a      	str	r2, [r3, #0]
 8009e32:	1e3b      	subs	r3, r7, #0
 8009e34:	bfbb      	ittet	lt
 8009e36:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009e3a:	9301      	strlt	r3, [sp, #4]
 8009e3c:	2300      	movge	r3, #0
 8009e3e:	2201      	movlt	r2, #1
 8009e40:	bfac      	ite	ge
 8009e42:	f8c8 3000 	strge.w	r3, [r8]
 8009e46:	f8c8 2000 	strlt.w	r2, [r8]
 8009e4a:	4baf      	ldr	r3, [pc, #700]	; (800a108 <_dtoa_r+0x320>)
 8009e4c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009e50:	ea33 0308 	bics.w	r3, r3, r8
 8009e54:	d114      	bne.n	8009e80 <_dtoa_r+0x98>
 8009e56:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009e58:	f242 730f 	movw	r3, #9999	; 0x270f
 8009e5c:	6013      	str	r3, [r2, #0]
 8009e5e:	9b00      	ldr	r3, [sp, #0]
 8009e60:	b923      	cbnz	r3, 8009e6c <_dtoa_r+0x84>
 8009e62:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8009e66:	2800      	cmp	r0, #0
 8009e68:	f000 8542 	beq.w	800a8f0 <_dtoa_r+0xb08>
 8009e6c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e6e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800a11c <_dtoa_r+0x334>
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	f000 8544 	beq.w	800a900 <_dtoa_r+0xb18>
 8009e78:	f10b 0303 	add.w	r3, fp, #3
 8009e7c:	f000 bd3e 	b.w	800a8fc <_dtoa_r+0xb14>
 8009e80:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009e84:	2200      	movs	r2, #0
 8009e86:	2300      	movs	r3, #0
 8009e88:	4630      	mov	r0, r6
 8009e8a:	4639      	mov	r1, r7
 8009e8c:	f7f6 fe1c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e90:	4681      	mov	r9, r0
 8009e92:	b168      	cbz	r0, 8009eb0 <_dtoa_r+0xc8>
 8009e94:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009e96:	2301      	movs	r3, #1
 8009e98:	6013      	str	r3, [r2, #0]
 8009e9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	f000 8524 	beq.w	800a8ea <_dtoa_r+0xb02>
 8009ea2:	4b9a      	ldr	r3, [pc, #616]	; (800a10c <_dtoa_r+0x324>)
 8009ea4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009ea6:	f103 3bff 	add.w	fp, r3, #4294967295
 8009eaa:	6013      	str	r3, [r2, #0]
 8009eac:	f000 bd28 	b.w	800a900 <_dtoa_r+0xb18>
 8009eb0:	aa14      	add	r2, sp, #80	; 0x50
 8009eb2:	a915      	add	r1, sp, #84	; 0x54
 8009eb4:	ec47 6b10 	vmov	d0, r6, r7
 8009eb8:	4620      	mov	r0, r4
 8009eba:	f000 fff0 	bl	800ae9e <__d2b>
 8009ebe:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009ec2:	9004      	str	r0, [sp, #16]
 8009ec4:	2d00      	cmp	r5, #0
 8009ec6:	d07c      	beq.n	8009fc2 <_dtoa_r+0x1da>
 8009ec8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009ecc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8009ed0:	46b2      	mov	sl, r6
 8009ed2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8009ed6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009eda:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8009ede:	2200      	movs	r2, #0
 8009ee0:	4b8b      	ldr	r3, [pc, #556]	; (800a110 <_dtoa_r+0x328>)
 8009ee2:	4650      	mov	r0, sl
 8009ee4:	4659      	mov	r1, fp
 8009ee6:	f7f6 f9cf 	bl	8000288 <__aeabi_dsub>
 8009eea:	a381      	add	r3, pc, #516	; (adr r3, 800a0f0 <_dtoa_r+0x308>)
 8009eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef0:	f7f6 fb82 	bl	80005f8 <__aeabi_dmul>
 8009ef4:	a380      	add	r3, pc, #512	; (adr r3, 800a0f8 <_dtoa_r+0x310>)
 8009ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009efa:	f7f6 f9c7 	bl	800028c <__adddf3>
 8009efe:	4606      	mov	r6, r0
 8009f00:	4628      	mov	r0, r5
 8009f02:	460f      	mov	r7, r1
 8009f04:	f7f6 fb0e 	bl	8000524 <__aeabi_i2d>
 8009f08:	a37d      	add	r3, pc, #500	; (adr r3, 800a100 <_dtoa_r+0x318>)
 8009f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f0e:	f7f6 fb73 	bl	80005f8 <__aeabi_dmul>
 8009f12:	4602      	mov	r2, r0
 8009f14:	460b      	mov	r3, r1
 8009f16:	4630      	mov	r0, r6
 8009f18:	4639      	mov	r1, r7
 8009f1a:	f7f6 f9b7 	bl	800028c <__adddf3>
 8009f1e:	4606      	mov	r6, r0
 8009f20:	460f      	mov	r7, r1
 8009f22:	f7f6 fe19 	bl	8000b58 <__aeabi_d2iz>
 8009f26:	2200      	movs	r2, #0
 8009f28:	4682      	mov	sl, r0
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	4630      	mov	r0, r6
 8009f2e:	4639      	mov	r1, r7
 8009f30:	f7f6 fdd4 	bl	8000adc <__aeabi_dcmplt>
 8009f34:	b148      	cbz	r0, 8009f4a <_dtoa_r+0x162>
 8009f36:	4650      	mov	r0, sl
 8009f38:	f7f6 faf4 	bl	8000524 <__aeabi_i2d>
 8009f3c:	4632      	mov	r2, r6
 8009f3e:	463b      	mov	r3, r7
 8009f40:	f7f6 fdc2 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f44:	b908      	cbnz	r0, 8009f4a <_dtoa_r+0x162>
 8009f46:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009f4a:	f1ba 0f16 	cmp.w	sl, #22
 8009f4e:	d859      	bhi.n	800a004 <_dtoa_r+0x21c>
 8009f50:	4970      	ldr	r1, [pc, #448]	; (800a114 <_dtoa_r+0x32c>)
 8009f52:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009f56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f5e:	f7f6 fddb 	bl	8000b18 <__aeabi_dcmpgt>
 8009f62:	2800      	cmp	r0, #0
 8009f64:	d050      	beq.n	800a008 <_dtoa_r+0x220>
 8009f66:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009f70:	1b5d      	subs	r5, r3, r5
 8009f72:	f1b5 0801 	subs.w	r8, r5, #1
 8009f76:	bf49      	itett	mi
 8009f78:	f1c5 0301 	rsbmi	r3, r5, #1
 8009f7c:	2300      	movpl	r3, #0
 8009f7e:	9305      	strmi	r3, [sp, #20]
 8009f80:	f04f 0800 	movmi.w	r8, #0
 8009f84:	bf58      	it	pl
 8009f86:	9305      	strpl	r3, [sp, #20]
 8009f88:	f1ba 0f00 	cmp.w	sl, #0
 8009f8c:	db3e      	blt.n	800a00c <_dtoa_r+0x224>
 8009f8e:	2300      	movs	r3, #0
 8009f90:	44d0      	add	r8, sl
 8009f92:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009f96:	9307      	str	r3, [sp, #28]
 8009f98:	9b06      	ldr	r3, [sp, #24]
 8009f9a:	2b09      	cmp	r3, #9
 8009f9c:	f200 8090 	bhi.w	800a0c0 <_dtoa_r+0x2d8>
 8009fa0:	2b05      	cmp	r3, #5
 8009fa2:	bfc4      	itt	gt
 8009fa4:	3b04      	subgt	r3, #4
 8009fa6:	9306      	strgt	r3, [sp, #24]
 8009fa8:	9b06      	ldr	r3, [sp, #24]
 8009faa:	f1a3 0302 	sub.w	r3, r3, #2
 8009fae:	bfcc      	ite	gt
 8009fb0:	2500      	movgt	r5, #0
 8009fb2:	2501      	movle	r5, #1
 8009fb4:	2b03      	cmp	r3, #3
 8009fb6:	f200 808f 	bhi.w	800a0d8 <_dtoa_r+0x2f0>
 8009fba:	e8df f003 	tbb	[pc, r3]
 8009fbe:	7f7d      	.short	0x7f7d
 8009fc0:	7131      	.short	0x7131
 8009fc2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8009fc6:	441d      	add	r5, r3
 8009fc8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8009fcc:	2820      	cmp	r0, #32
 8009fce:	dd13      	ble.n	8009ff8 <_dtoa_r+0x210>
 8009fd0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8009fd4:	9b00      	ldr	r3, [sp, #0]
 8009fd6:	fa08 f800 	lsl.w	r8, r8, r0
 8009fda:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8009fde:	fa23 f000 	lsr.w	r0, r3, r0
 8009fe2:	ea48 0000 	orr.w	r0, r8, r0
 8009fe6:	f7f6 fa8d 	bl	8000504 <__aeabi_ui2d>
 8009fea:	2301      	movs	r3, #1
 8009fec:	4682      	mov	sl, r0
 8009fee:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8009ff2:	3d01      	subs	r5, #1
 8009ff4:	9313      	str	r3, [sp, #76]	; 0x4c
 8009ff6:	e772      	b.n	8009ede <_dtoa_r+0xf6>
 8009ff8:	9b00      	ldr	r3, [sp, #0]
 8009ffa:	f1c0 0020 	rsb	r0, r0, #32
 8009ffe:	fa03 f000 	lsl.w	r0, r3, r0
 800a002:	e7f0      	b.n	8009fe6 <_dtoa_r+0x1fe>
 800a004:	2301      	movs	r3, #1
 800a006:	e7b1      	b.n	8009f6c <_dtoa_r+0x184>
 800a008:	900f      	str	r0, [sp, #60]	; 0x3c
 800a00a:	e7b0      	b.n	8009f6e <_dtoa_r+0x186>
 800a00c:	9b05      	ldr	r3, [sp, #20]
 800a00e:	eba3 030a 	sub.w	r3, r3, sl
 800a012:	9305      	str	r3, [sp, #20]
 800a014:	f1ca 0300 	rsb	r3, sl, #0
 800a018:	9307      	str	r3, [sp, #28]
 800a01a:	2300      	movs	r3, #0
 800a01c:	930e      	str	r3, [sp, #56]	; 0x38
 800a01e:	e7bb      	b.n	8009f98 <_dtoa_r+0x1b0>
 800a020:	2301      	movs	r3, #1
 800a022:	930a      	str	r3, [sp, #40]	; 0x28
 800a024:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a026:	2b00      	cmp	r3, #0
 800a028:	dd59      	ble.n	800a0de <_dtoa_r+0x2f6>
 800a02a:	9302      	str	r3, [sp, #8]
 800a02c:	4699      	mov	r9, r3
 800a02e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a030:	2200      	movs	r2, #0
 800a032:	6072      	str	r2, [r6, #4]
 800a034:	2204      	movs	r2, #4
 800a036:	f102 0014 	add.w	r0, r2, #20
 800a03a:	4298      	cmp	r0, r3
 800a03c:	6871      	ldr	r1, [r6, #4]
 800a03e:	d953      	bls.n	800a0e8 <_dtoa_r+0x300>
 800a040:	4620      	mov	r0, r4
 800a042:	f000 fc9f 	bl	800a984 <_Balloc>
 800a046:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a048:	6030      	str	r0, [r6, #0]
 800a04a:	f1b9 0f0e 	cmp.w	r9, #14
 800a04e:	f8d3 b000 	ldr.w	fp, [r3]
 800a052:	f200 80e6 	bhi.w	800a222 <_dtoa_r+0x43a>
 800a056:	2d00      	cmp	r5, #0
 800a058:	f000 80e3 	beq.w	800a222 <_dtoa_r+0x43a>
 800a05c:	ed9d 7b00 	vldr	d7, [sp]
 800a060:	f1ba 0f00 	cmp.w	sl, #0
 800a064:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800a068:	dd74      	ble.n	800a154 <_dtoa_r+0x36c>
 800a06a:	4a2a      	ldr	r2, [pc, #168]	; (800a114 <_dtoa_r+0x32c>)
 800a06c:	f00a 030f 	and.w	r3, sl, #15
 800a070:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a074:	ed93 7b00 	vldr	d7, [r3]
 800a078:	ea4f 162a 	mov.w	r6, sl, asr #4
 800a07c:	06f0      	lsls	r0, r6, #27
 800a07e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800a082:	d565      	bpl.n	800a150 <_dtoa_r+0x368>
 800a084:	4b24      	ldr	r3, [pc, #144]	; (800a118 <_dtoa_r+0x330>)
 800a086:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a08a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a08e:	f7f6 fbdd 	bl	800084c <__aeabi_ddiv>
 800a092:	e9cd 0100 	strd	r0, r1, [sp]
 800a096:	f006 060f 	and.w	r6, r6, #15
 800a09a:	2503      	movs	r5, #3
 800a09c:	4f1e      	ldr	r7, [pc, #120]	; (800a118 <_dtoa_r+0x330>)
 800a09e:	e04c      	b.n	800a13a <_dtoa_r+0x352>
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	930a      	str	r3, [sp, #40]	; 0x28
 800a0a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0a6:	4453      	add	r3, sl
 800a0a8:	f103 0901 	add.w	r9, r3, #1
 800a0ac:	9302      	str	r3, [sp, #8]
 800a0ae:	464b      	mov	r3, r9
 800a0b0:	2b01      	cmp	r3, #1
 800a0b2:	bfb8      	it	lt
 800a0b4:	2301      	movlt	r3, #1
 800a0b6:	e7ba      	b.n	800a02e <_dtoa_r+0x246>
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	e7b2      	b.n	800a022 <_dtoa_r+0x23a>
 800a0bc:	2300      	movs	r3, #0
 800a0be:	e7f0      	b.n	800a0a2 <_dtoa_r+0x2ba>
 800a0c0:	2501      	movs	r5, #1
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	9306      	str	r3, [sp, #24]
 800a0c6:	950a      	str	r5, [sp, #40]	; 0x28
 800a0c8:	f04f 33ff 	mov.w	r3, #4294967295
 800a0cc:	9302      	str	r3, [sp, #8]
 800a0ce:	4699      	mov	r9, r3
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	2312      	movs	r3, #18
 800a0d4:	920b      	str	r2, [sp, #44]	; 0x2c
 800a0d6:	e7aa      	b.n	800a02e <_dtoa_r+0x246>
 800a0d8:	2301      	movs	r3, #1
 800a0da:	930a      	str	r3, [sp, #40]	; 0x28
 800a0dc:	e7f4      	b.n	800a0c8 <_dtoa_r+0x2e0>
 800a0de:	2301      	movs	r3, #1
 800a0e0:	9302      	str	r3, [sp, #8]
 800a0e2:	4699      	mov	r9, r3
 800a0e4:	461a      	mov	r2, r3
 800a0e6:	e7f5      	b.n	800a0d4 <_dtoa_r+0x2ec>
 800a0e8:	3101      	adds	r1, #1
 800a0ea:	6071      	str	r1, [r6, #4]
 800a0ec:	0052      	lsls	r2, r2, #1
 800a0ee:	e7a2      	b.n	800a036 <_dtoa_r+0x24e>
 800a0f0:	636f4361 	.word	0x636f4361
 800a0f4:	3fd287a7 	.word	0x3fd287a7
 800a0f8:	8b60c8b3 	.word	0x8b60c8b3
 800a0fc:	3fc68a28 	.word	0x3fc68a28
 800a100:	509f79fb 	.word	0x509f79fb
 800a104:	3fd34413 	.word	0x3fd34413
 800a108:	7ff00000 	.word	0x7ff00000
 800a10c:	0800d6b9 	.word	0x0800d6b9
 800a110:	3ff80000 	.word	0x3ff80000
 800a114:	0800d718 	.word	0x0800d718
 800a118:	0800d6f0 	.word	0x0800d6f0
 800a11c:	0800d6e5 	.word	0x0800d6e5
 800a120:	07f1      	lsls	r1, r6, #31
 800a122:	d508      	bpl.n	800a136 <_dtoa_r+0x34e>
 800a124:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a128:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a12c:	f7f6 fa64 	bl	80005f8 <__aeabi_dmul>
 800a130:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a134:	3501      	adds	r5, #1
 800a136:	1076      	asrs	r6, r6, #1
 800a138:	3708      	adds	r7, #8
 800a13a:	2e00      	cmp	r6, #0
 800a13c:	d1f0      	bne.n	800a120 <_dtoa_r+0x338>
 800a13e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a142:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a146:	f7f6 fb81 	bl	800084c <__aeabi_ddiv>
 800a14a:	e9cd 0100 	strd	r0, r1, [sp]
 800a14e:	e01a      	b.n	800a186 <_dtoa_r+0x39e>
 800a150:	2502      	movs	r5, #2
 800a152:	e7a3      	b.n	800a09c <_dtoa_r+0x2b4>
 800a154:	f000 80a0 	beq.w	800a298 <_dtoa_r+0x4b0>
 800a158:	f1ca 0600 	rsb	r6, sl, #0
 800a15c:	4b9f      	ldr	r3, [pc, #636]	; (800a3dc <_dtoa_r+0x5f4>)
 800a15e:	4fa0      	ldr	r7, [pc, #640]	; (800a3e0 <_dtoa_r+0x5f8>)
 800a160:	f006 020f 	and.w	r2, r6, #15
 800a164:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a16c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a170:	f7f6 fa42 	bl	80005f8 <__aeabi_dmul>
 800a174:	e9cd 0100 	strd	r0, r1, [sp]
 800a178:	1136      	asrs	r6, r6, #4
 800a17a:	2300      	movs	r3, #0
 800a17c:	2502      	movs	r5, #2
 800a17e:	2e00      	cmp	r6, #0
 800a180:	d17f      	bne.n	800a282 <_dtoa_r+0x49a>
 800a182:	2b00      	cmp	r3, #0
 800a184:	d1e1      	bne.n	800a14a <_dtoa_r+0x362>
 800a186:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a188:	2b00      	cmp	r3, #0
 800a18a:	f000 8087 	beq.w	800a29c <_dtoa_r+0x4b4>
 800a18e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a192:	2200      	movs	r2, #0
 800a194:	4b93      	ldr	r3, [pc, #588]	; (800a3e4 <_dtoa_r+0x5fc>)
 800a196:	4630      	mov	r0, r6
 800a198:	4639      	mov	r1, r7
 800a19a:	f7f6 fc9f 	bl	8000adc <__aeabi_dcmplt>
 800a19e:	2800      	cmp	r0, #0
 800a1a0:	d07c      	beq.n	800a29c <_dtoa_r+0x4b4>
 800a1a2:	f1b9 0f00 	cmp.w	r9, #0
 800a1a6:	d079      	beq.n	800a29c <_dtoa_r+0x4b4>
 800a1a8:	9b02      	ldr	r3, [sp, #8]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	dd35      	ble.n	800a21a <_dtoa_r+0x432>
 800a1ae:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a1b2:	9308      	str	r3, [sp, #32]
 800a1b4:	4639      	mov	r1, r7
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	4b8b      	ldr	r3, [pc, #556]	; (800a3e8 <_dtoa_r+0x600>)
 800a1ba:	4630      	mov	r0, r6
 800a1bc:	f7f6 fa1c 	bl	80005f8 <__aeabi_dmul>
 800a1c0:	e9cd 0100 	strd	r0, r1, [sp]
 800a1c4:	9f02      	ldr	r7, [sp, #8]
 800a1c6:	3501      	adds	r5, #1
 800a1c8:	4628      	mov	r0, r5
 800a1ca:	f7f6 f9ab 	bl	8000524 <__aeabi_i2d>
 800a1ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a1d2:	f7f6 fa11 	bl	80005f8 <__aeabi_dmul>
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	4b84      	ldr	r3, [pc, #528]	; (800a3ec <_dtoa_r+0x604>)
 800a1da:	f7f6 f857 	bl	800028c <__adddf3>
 800a1de:	4605      	mov	r5, r0
 800a1e0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a1e4:	2f00      	cmp	r7, #0
 800a1e6:	d15d      	bne.n	800a2a4 <_dtoa_r+0x4bc>
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	4b81      	ldr	r3, [pc, #516]	; (800a3f0 <_dtoa_r+0x608>)
 800a1ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a1f0:	f7f6 f84a 	bl	8000288 <__aeabi_dsub>
 800a1f4:	462a      	mov	r2, r5
 800a1f6:	4633      	mov	r3, r6
 800a1f8:	e9cd 0100 	strd	r0, r1, [sp]
 800a1fc:	f7f6 fc8c 	bl	8000b18 <__aeabi_dcmpgt>
 800a200:	2800      	cmp	r0, #0
 800a202:	f040 8288 	bne.w	800a716 <_dtoa_r+0x92e>
 800a206:	462a      	mov	r2, r5
 800a208:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a20c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a210:	f7f6 fc64 	bl	8000adc <__aeabi_dcmplt>
 800a214:	2800      	cmp	r0, #0
 800a216:	f040 827c 	bne.w	800a712 <_dtoa_r+0x92a>
 800a21a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a21e:	e9cd 2300 	strd	r2, r3, [sp]
 800a222:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a224:	2b00      	cmp	r3, #0
 800a226:	f2c0 8150 	blt.w	800a4ca <_dtoa_r+0x6e2>
 800a22a:	f1ba 0f0e 	cmp.w	sl, #14
 800a22e:	f300 814c 	bgt.w	800a4ca <_dtoa_r+0x6e2>
 800a232:	4b6a      	ldr	r3, [pc, #424]	; (800a3dc <_dtoa_r+0x5f4>)
 800a234:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a238:	ed93 7b00 	vldr	d7, [r3]
 800a23c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a23e:	2b00      	cmp	r3, #0
 800a240:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a244:	f280 80d8 	bge.w	800a3f8 <_dtoa_r+0x610>
 800a248:	f1b9 0f00 	cmp.w	r9, #0
 800a24c:	f300 80d4 	bgt.w	800a3f8 <_dtoa_r+0x610>
 800a250:	f040 825e 	bne.w	800a710 <_dtoa_r+0x928>
 800a254:	2200      	movs	r2, #0
 800a256:	4b66      	ldr	r3, [pc, #408]	; (800a3f0 <_dtoa_r+0x608>)
 800a258:	ec51 0b17 	vmov	r0, r1, d7
 800a25c:	f7f6 f9cc 	bl	80005f8 <__aeabi_dmul>
 800a260:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a264:	f7f6 fc4e 	bl	8000b04 <__aeabi_dcmpge>
 800a268:	464f      	mov	r7, r9
 800a26a:	464e      	mov	r6, r9
 800a26c:	2800      	cmp	r0, #0
 800a26e:	f040 8234 	bne.w	800a6da <_dtoa_r+0x8f2>
 800a272:	2331      	movs	r3, #49	; 0x31
 800a274:	f10b 0501 	add.w	r5, fp, #1
 800a278:	f88b 3000 	strb.w	r3, [fp]
 800a27c:	f10a 0a01 	add.w	sl, sl, #1
 800a280:	e22f      	b.n	800a6e2 <_dtoa_r+0x8fa>
 800a282:	07f2      	lsls	r2, r6, #31
 800a284:	d505      	bpl.n	800a292 <_dtoa_r+0x4aa>
 800a286:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a28a:	f7f6 f9b5 	bl	80005f8 <__aeabi_dmul>
 800a28e:	3501      	adds	r5, #1
 800a290:	2301      	movs	r3, #1
 800a292:	1076      	asrs	r6, r6, #1
 800a294:	3708      	adds	r7, #8
 800a296:	e772      	b.n	800a17e <_dtoa_r+0x396>
 800a298:	2502      	movs	r5, #2
 800a29a:	e774      	b.n	800a186 <_dtoa_r+0x39e>
 800a29c:	f8cd a020 	str.w	sl, [sp, #32]
 800a2a0:	464f      	mov	r7, r9
 800a2a2:	e791      	b.n	800a1c8 <_dtoa_r+0x3e0>
 800a2a4:	4b4d      	ldr	r3, [pc, #308]	; (800a3dc <_dtoa_r+0x5f4>)
 800a2a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a2aa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a2ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d047      	beq.n	800a344 <_dtoa_r+0x55c>
 800a2b4:	4602      	mov	r2, r0
 800a2b6:	460b      	mov	r3, r1
 800a2b8:	2000      	movs	r0, #0
 800a2ba:	494e      	ldr	r1, [pc, #312]	; (800a3f4 <_dtoa_r+0x60c>)
 800a2bc:	f7f6 fac6 	bl	800084c <__aeabi_ddiv>
 800a2c0:	462a      	mov	r2, r5
 800a2c2:	4633      	mov	r3, r6
 800a2c4:	f7f5 ffe0 	bl	8000288 <__aeabi_dsub>
 800a2c8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a2cc:	465d      	mov	r5, fp
 800a2ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a2d2:	f7f6 fc41 	bl	8000b58 <__aeabi_d2iz>
 800a2d6:	4606      	mov	r6, r0
 800a2d8:	f7f6 f924 	bl	8000524 <__aeabi_i2d>
 800a2dc:	4602      	mov	r2, r0
 800a2de:	460b      	mov	r3, r1
 800a2e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a2e4:	f7f5 ffd0 	bl	8000288 <__aeabi_dsub>
 800a2e8:	3630      	adds	r6, #48	; 0x30
 800a2ea:	f805 6b01 	strb.w	r6, [r5], #1
 800a2ee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a2f2:	e9cd 0100 	strd	r0, r1, [sp]
 800a2f6:	f7f6 fbf1 	bl	8000adc <__aeabi_dcmplt>
 800a2fa:	2800      	cmp	r0, #0
 800a2fc:	d163      	bne.n	800a3c6 <_dtoa_r+0x5de>
 800a2fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a302:	2000      	movs	r0, #0
 800a304:	4937      	ldr	r1, [pc, #220]	; (800a3e4 <_dtoa_r+0x5fc>)
 800a306:	f7f5 ffbf 	bl	8000288 <__aeabi_dsub>
 800a30a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a30e:	f7f6 fbe5 	bl	8000adc <__aeabi_dcmplt>
 800a312:	2800      	cmp	r0, #0
 800a314:	f040 80b7 	bne.w	800a486 <_dtoa_r+0x69e>
 800a318:	eba5 030b 	sub.w	r3, r5, fp
 800a31c:	429f      	cmp	r7, r3
 800a31e:	f77f af7c 	ble.w	800a21a <_dtoa_r+0x432>
 800a322:	2200      	movs	r2, #0
 800a324:	4b30      	ldr	r3, [pc, #192]	; (800a3e8 <_dtoa_r+0x600>)
 800a326:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a32a:	f7f6 f965 	bl	80005f8 <__aeabi_dmul>
 800a32e:	2200      	movs	r2, #0
 800a330:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a334:	4b2c      	ldr	r3, [pc, #176]	; (800a3e8 <_dtoa_r+0x600>)
 800a336:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a33a:	f7f6 f95d 	bl	80005f8 <__aeabi_dmul>
 800a33e:	e9cd 0100 	strd	r0, r1, [sp]
 800a342:	e7c4      	b.n	800a2ce <_dtoa_r+0x4e6>
 800a344:	462a      	mov	r2, r5
 800a346:	4633      	mov	r3, r6
 800a348:	f7f6 f956 	bl	80005f8 <__aeabi_dmul>
 800a34c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a350:	eb0b 0507 	add.w	r5, fp, r7
 800a354:	465e      	mov	r6, fp
 800a356:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a35a:	f7f6 fbfd 	bl	8000b58 <__aeabi_d2iz>
 800a35e:	4607      	mov	r7, r0
 800a360:	f7f6 f8e0 	bl	8000524 <__aeabi_i2d>
 800a364:	3730      	adds	r7, #48	; 0x30
 800a366:	4602      	mov	r2, r0
 800a368:	460b      	mov	r3, r1
 800a36a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a36e:	f7f5 ff8b 	bl	8000288 <__aeabi_dsub>
 800a372:	f806 7b01 	strb.w	r7, [r6], #1
 800a376:	42ae      	cmp	r6, r5
 800a378:	e9cd 0100 	strd	r0, r1, [sp]
 800a37c:	f04f 0200 	mov.w	r2, #0
 800a380:	d126      	bne.n	800a3d0 <_dtoa_r+0x5e8>
 800a382:	4b1c      	ldr	r3, [pc, #112]	; (800a3f4 <_dtoa_r+0x60c>)
 800a384:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a388:	f7f5 ff80 	bl	800028c <__adddf3>
 800a38c:	4602      	mov	r2, r0
 800a38e:	460b      	mov	r3, r1
 800a390:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a394:	f7f6 fbc0 	bl	8000b18 <__aeabi_dcmpgt>
 800a398:	2800      	cmp	r0, #0
 800a39a:	d174      	bne.n	800a486 <_dtoa_r+0x69e>
 800a39c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a3a0:	2000      	movs	r0, #0
 800a3a2:	4914      	ldr	r1, [pc, #80]	; (800a3f4 <_dtoa_r+0x60c>)
 800a3a4:	f7f5 ff70 	bl	8000288 <__aeabi_dsub>
 800a3a8:	4602      	mov	r2, r0
 800a3aa:	460b      	mov	r3, r1
 800a3ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a3b0:	f7f6 fb94 	bl	8000adc <__aeabi_dcmplt>
 800a3b4:	2800      	cmp	r0, #0
 800a3b6:	f43f af30 	beq.w	800a21a <_dtoa_r+0x432>
 800a3ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a3be:	2b30      	cmp	r3, #48	; 0x30
 800a3c0:	f105 32ff 	add.w	r2, r5, #4294967295
 800a3c4:	d002      	beq.n	800a3cc <_dtoa_r+0x5e4>
 800a3c6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a3ca:	e04a      	b.n	800a462 <_dtoa_r+0x67a>
 800a3cc:	4615      	mov	r5, r2
 800a3ce:	e7f4      	b.n	800a3ba <_dtoa_r+0x5d2>
 800a3d0:	4b05      	ldr	r3, [pc, #20]	; (800a3e8 <_dtoa_r+0x600>)
 800a3d2:	f7f6 f911 	bl	80005f8 <__aeabi_dmul>
 800a3d6:	e9cd 0100 	strd	r0, r1, [sp]
 800a3da:	e7bc      	b.n	800a356 <_dtoa_r+0x56e>
 800a3dc:	0800d718 	.word	0x0800d718
 800a3e0:	0800d6f0 	.word	0x0800d6f0
 800a3e4:	3ff00000 	.word	0x3ff00000
 800a3e8:	40240000 	.word	0x40240000
 800a3ec:	401c0000 	.word	0x401c0000
 800a3f0:	40140000 	.word	0x40140000
 800a3f4:	3fe00000 	.word	0x3fe00000
 800a3f8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a3fc:	465d      	mov	r5, fp
 800a3fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a402:	4630      	mov	r0, r6
 800a404:	4639      	mov	r1, r7
 800a406:	f7f6 fa21 	bl	800084c <__aeabi_ddiv>
 800a40a:	f7f6 fba5 	bl	8000b58 <__aeabi_d2iz>
 800a40e:	4680      	mov	r8, r0
 800a410:	f7f6 f888 	bl	8000524 <__aeabi_i2d>
 800a414:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a418:	f7f6 f8ee 	bl	80005f8 <__aeabi_dmul>
 800a41c:	4602      	mov	r2, r0
 800a41e:	460b      	mov	r3, r1
 800a420:	4630      	mov	r0, r6
 800a422:	4639      	mov	r1, r7
 800a424:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800a428:	f7f5 ff2e 	bl	8000288 <__aeabi_dsub>
 800a42c:	f805 6b01 	strb.w	r6, [r5], #1
 800a430:	eba5 060b 	sub.w	r6, r5, fp
 800a434:	45b1      	cmp	r9, r6
 800a436:	4602      	mov	r2, r0
 800a438:	460b      	mov	r3, r1
 800a43a:	d139      	bne.n	800a4b0 <_dtoa_r+0x6c8>
 800a43c:	f7f5 ff26 	bl	800028c <__adddf3>
 800a440:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a444:	4606      	mov	r6, r0
 800a446:	460f      	mov	r7, r1
 800a448:	f7f6 fb66 	bl	8000b18 <__aeabi_dcmpgt>
 800a44c:	b9c8      	cbnz	r0, 800a482 <_dtoa_r+0x69a>
 800a44e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a452:	4630      	mov	r0, r6
 800a454:	4639      	mov	r1, r7
 800a456:	f7f6 fb37 	bl	8000ac8 <__aeabi_dcmpeq>
 800a45a:	b110      	cbz	r0, 800a462 <_dtoa_r+0x67a>
 800a45c:	f018 0f01 	tst.w	r8, #1
 800a460:	d10f      	bne.n	800a482 <_dtoa_r+0x69a>
 800a462:	9904      	ldr	r1, [sp, #16]
 800a464:	4620      	mov	r0, r4
 800a466:	f000 fac1 	bl	800a9ec <_Bfree>
 800a46a:	2300      	movs	r3, #0
 800a46c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a46e:	702b      	strb	r3, [r5, #0]
 800a470:	f10a 0301 	add.w	r3, sl, #1
 800a474:	6013      	str	r3, [r2, #0]
 800a476:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a478:	2b00      	cmp	r3, #0
 800a47a:	f000 8241 	beq.w	800a900 <_dtoa_r+0xb18>
 800a47e:	601d      	str	r5, [r3, #0]
 800a480:	e23e      	b.n	800a900 <_dtoa_r+0xb18>
 800a482:	f8cd a020 	str.w	sl, [sp, #32]
 800a486:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a48a:	2a39      	cmp	r2, #57	; 0x39
 800a48c:	f105 33ff 	add.w	r3, r5, #4294967295
 800a490:	d108      	bne.n	800a4a4 <_dtoa_r+0x6bc>
 800a492:	459b      	cmp	fp, r3
 800a494:	d10a      	bne.n	800a4ac <_dtoa_r+0x6c4>
 800a496:	9b08      	ldr	r3, [sp, #32]
 800a498:	3301      	adds	r3, #1
 800a49a:	9308      	str	r3, [sp, #32]
 800a49c:	2330      	movs	r3, #48	; 0x30
 800a49e:	f88b 3000 	strb.w	r3, [fp]
 800a4a2:	465b      	mov	r3, fp
 800a4a4:	781a      	ldrb	r2, [r3, #0]
 800a4a6:	3201      	adds	r2, #1
 800a4a8:	701a      	strb	r2, [r3, #0]
 800a4aa:	e78c      	b.n	800a3c6 <_dtoa_r+0x5de>
 800a4ac:	461d      	mov	r5, r3
 800a4ae:	e7ea      	b.n	800a486 <_dtoa_r+0x69e>
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	4b9b      	ldr	r3, [pc, #620]	; (800a720 <_dtoa_r+0x938>)
 800a4b4:	f7f6 f8a0 	bl	80005f8 <__aeabi_dmul>
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	4606      	mov	r6, r0
 800a4be:	460f      	mov	r7, r1
 800a4c0:	f7f6 fb02 	bl	8000ac8 <__aeabi_dcmpeq>
 800a4c4:	2800      	cmp	r0, #0
 800a4c6:	d09a      	beq.n	800a3fe <_dtoa_r+0x616>
 800a4c8:	e7cb      	b.n	800a462 <_dtoa_r+0x67a>
 800a4ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a4cc:	2a00      	cmp	r2, #0
 800a4ce:	f000 808b 	beq.w	800a5e8 <_dtoa_r+0x800>
 800a4d2:	9a06      	ldr	r2, [sp, #24]
 800a4d4:	2a01      	cmp	r2, #1
 800a4d6:	dc6e      	bgt.n	800a5b6 <_dtoa_r+0x7ce>
 800a4d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a4da:	2a00      	cmp	r2, #0
 800a4dc:	d067      	beq.n	800a5ae <_dtoa_r+0x7c6>
 800a4de:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a4e2:	9f07      	ldr	r7, [sp, #28]
 800a4e4:	9d05      	ldr	r5, [sp, #20]
 800a4e6:	9a05      	ldr	r2, [sp, #20]
 800a4e8:	2101      	movs	r1, #1
 800a4ea:	441a      	add	r2, r3
 800a4ec:	4620      	mov	r0, r4
 800a4ee:	9205      	str	r2, [sp, #20]
 800a4f0:	4498      	add	r8, r3
 800a4f2:	f000 fb1b 	bl	800ab2c <__i2b>
 800a4f6:	4606      	mov	r6, r0
 800a4f8:	2d00      	cmp	r5, #0
 800a4fa:	dd0c      	ble.n	800a516 <_dtoa_r+0x72e>
 800a4fc:	f1b8 0f00 	cmp.w	r8, #0
 800a500:	dd09      	ble.n	800a516 <_dtoa_r+0x72e>
 800a502:	4545      	cmp	r5, r8
 800a504:	9a05      	ldr	r2, [sp, #20]
 800a506:	462b      	mov	r3, r5
 800a508:	bfa8      	it	ge
 800a50a:	4643      	movge	r3, r8
 800a50c:	1ad2      	subs	r2, r2, r3
 800a50e:	9205      	str	r2, [sp, #20]
 800a510:	1aed      	subs	r5, r5, r3
 800a512:	eba8 0803 	sub.w	r8, r8, r3
 800a516:	9b07      	ldr	r3, [sp, #28]
 800a518:	b1eb      	cbz	r3, 800a556 <_dtoa_r+0x76e>
 800a51a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d067      	beq.n	800a5f0 <_dtoa_r+0x808>
 800a520:	b18f      	cbz	r7, 800a546 <_dtoa_r+0x75e>
 800a522:	4631      	mov	r1, r6
 800a524:	463a      	mov	r2, r7
 800a526:	4620      	mov	r0, r4
 800a528:	f000 fba0 	bl	800ac6c <__pow5mult>
 800a52c:	9a04      	ldr	r2, [sp, #16]
 800a52e:	4601      	mov	r1, r0
 800a530:	4606      	mov	r6, r0
 800a532:	4620      	mov	r0, r4
 800a534:	f000 fb03 	bl	800ab3e <__multiply>
 800a538:	9904      	ldr	r1, [sp, #16]
 800a53a:	9008      	str	r0, [sp, #32]
 800a53c:	4620      	mov	r0, r4
 800a53e:	f000 fa55 	bl	800a9ec <_Bfree>
 800a542:	9b08      	ldr	r3, [sp, #32]
 800a544:	9304      	str	r3, [sp, #16]
 800a546:	9b07      	ldr	r3, [sp, #28]
 800a548:	1bda      	subs	r2, r3, r7
 800a54a:	d004      	beq.n	800a556 <_dtoa_r+0x76e>
 800a54c:	9904      	ldr	r1, [sp, #16]
 800a54e:	4620      	mov	r0, r4
 800a550:	f000 fb8c 	bl	800ac6c <__pow5mult>
 800a554:	9004      	str	r0, [sp, #16]
 800a556:	2101      	movs	r1, #1
 800a558:	4620      	mov	r0, r4
 800a55a:	f000 fae7 	bl	800ab2c <__i2b>
 800a55e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a560:	4607      	mov	r7, r0
 800a562:	2b00      	cmp	r3, #0
 800a564:	f000 81d0 	beq.w	800a908 <_dtoa_r+0xb20>
 800a568:	461a      	mov	r2, r3
 800a56a:	4601      	mov	r1, r0
 800a56c:	4620      	mov	r0, r4
 800a56e:	f000 fb7d 	bl	800ac6c <__pow5mult>
 800a572:	9b06      	ldr	r3, [sp, #24]
 800a574:	2b01      	cmp	r3, #1
 800a576:	4607      	mov	r7, r0
 800a578:	dc40      	bgt.n	800a5fc <_dtoa_r+0x814>
 800a57a:	9b00      	ldr	r3, [sp, #0]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d139      	bne.n	800a5f4 <_dtoa_r+0x80c>
 800a580:	9b01      	ldr	r3, [sp, #4]
 800a582:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a586:	2b00      	cmp	r3, #0
 800a588:	d136      	bne.n	800a5f8 <_dtoa_r+0x810>
 800a58a:	9b01      	ldr	r3, [sp, #4]
 800a58c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a590:	0d1b      	lsrs	r3, r3, #20
 800a592:	051b      	lsls	r3, r3, #20
 800a594:	b12b      	cbz	r3, 800a5a2 <_dtoa_r+0x7ba>
 800a596:	9b05      	ldr	r3, [sp, #20]
 800a598:	3301      	adds	r3, #1
 800a59a:	9305      	str	r3, [sp, #20]
 800a59c:	f108 0801 	add.w	r8, r8, #1
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	9307      	str	r3, [sp, #28]
 800a5a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d12a      	bne.n	800a600 <_dtoa_r+0x818>
 800a5aa:	2001      	movs	r0, #1
 800a5ac:	e030      	b.n	800a610 <_dtoa_r+0x828>
 800a5ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a5b0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a5b4:	e795      	b.n	800a4e2 <_dtoa_r+0x6fa>
 800a5b6:	9b07      	ldr	r3, [sp, #28]
 800a5b8:	f109 37ff 	add.w	r7, r9, #4294967295
 800a5bc:	42bb      	cmp	r3, r7
 800a5be:	bfbf      	itttt	lt
 800a5c0:	9b07      	ldrlt	r3, [sp, #28]
 800a5c2:	9707      	strlt	r7, [sp, #28]
 800a5c4:	1afa      	sublt	r2, r7, r3
 800a5c6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a5c8:	bfbb      	ittet	lt
 800a5ca:	189b      	addlt	r3, r3, r2
 800a5cc:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a5ce:	1bdf      	subge	r7, r3, r7
 800a5d0:	2700      	movlt	r7, #0
 800a5d2:	f1b9 0f00 	cmp.w	r9, #0
 800a5d6:	bfb5      	itete	lt
 800a5d8:	9b05      	ldrlt	r3, [sp, #20]
 800a5da:	9d05      	ldrge	r5, [sp, #20]
 800a5dc:	eba3 0509 	sublt.w	r5, r3, r9
 800a5e0:	464b      	movge	r3, r9
 800a5e2:	bfb8      	it	lt
 800a5e4:	2300      	movlt	r3, #0
 800a5e6:	e77e      	b.n	800a4e6 <_dtoa_r+0x6fe>
 800a5e8:	9f07      	ldr	r7, [sp, #28]
 800a5ea:	9d05      	ldr	r5, [sp, #20]
 800a5ec:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800a5ee:	e783      	b.n	800a4f8 <_dtoa_r+0x710>
 800a5f0:	9a07      	ldr	r2, [sp, #28]
 800a5f2:	e7ab      	b.n	800a54c <_dtoa_r+0x764>
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	e7d4      	b.n	800a5a2 <_dtoa_r+0x7ba>
 800a5f8:	9b00      	ldr	r3, [sp, #0]
 800a5fa:	e7d2      	b.n	800a5a2 <_dtoa_r+0x7ba>
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	9307      	str	r3, [sp, #28]
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800a606:	6918      	ldr	r0, [r3, #16]
 800a608:	f000 fa42 	bl	800aa90 <__hi0bits>
 800a60c:	f1c0 0020 	rsb	r0, r0, #32
 800a610:	4440      	add	r0, r8
 800a612:	f010 001f 	ands.w	r0, r0, #31
 800a616:	d047      	beq.n	800a6a8 <_dtoa_r+0x8c0>
 800a618:	f1c0 0320 	rsb	r3, r0, #32
 800a61c:	2b04      	cmp	r3, #4
 800a61e:	dd3b      	ble.n	800a698 <_dtoa_r+0x8b0>
 800a620:	9b05      	ldr	r3, [sp, #20]
 800a622:	f1c0 001c 	rsb	r0, r0, #28
 800a626:	4403      	add	r3, r0
 800a628:	9305      	str	r3, [sp, #20]
 800a62a:	4405      	add	r5, r0
 800a62c:	4480      	add	r8, r0
 800a62e:	9b05      	ldr	r3, [sp, #20]
 800a630:	2b00      	cmp	r3, #0
 800a632:	dd05      	ble.n	800a640 <_dtoa_r+0x858>
 800a634:	461a      	mov	r2, r3
 800a636:	9904      	ldr	r1, [sp, #16]
 800a638:	4620      	mov	r0, r4
 800a63a:	f000 fb65 	bl	800ad08 <__lshift>
 800a63e:	9004      	str	r0, [sp, #16]
 800a640:	f1b8 0f00 	cmp.w	r8, #0
 800a644:	dd05      	ble.n	800a652 <_dtoa_r+0x86a>
 800a646:	4639      	mov	r1, r7
 800a648:	4642      	mov	r2, r8
 800a64a:	4620      	mov	r0, r4
 800a64c:	f000 fb5c 	bl	800ad08 <__lshift>
 800a650:	4607      	mov	r7, r0
 800a652:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a654:	b353      	cbz	r3, 800a6ac <_dtoa_r+0x8c4>
 800a656:	4639      	mov	r1, r7
 800a658:	9804      	ldr	r0, [sp, #16]
 800a65a:	f000 fba9 	bl	800adb0 <__mcmp>
 800a65e:	2800      	cmp	r0, #0
 800a660:	da24      	bge.n	800a6ac <_dtoa_r+0x8c4>
 800a662:	2300      	movs	r3, #0
 800a664:	220a      	movs	r2, #10
 800a666:	9904      	ldr	r1, [sp, #16]
 800a668:	4620      	mov	r0, r4
 800a66a:	f000 f9d6 	bl	800aa1a <__multadd>
 800a66e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a670:	9004      	str	r0, [sp, #16]
 800a672:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a676:	2b00      	cmp	r3, #0
 800a678:	f000 814d 	beq.w	800a916 <_dtoa_r+0xb2e>
 800a67c:	2300      	movs	r3, #0
 800a67e:	4631      	mov	r1, r6
 800a680:	220a      	movs	r2, #10
 800a682:	4620      	mov	r0, r4
 800a684:	f000 f9c9 	bl	800aa1a <__multadd>
 800a688:	9b02      	ldr	r3, [sp, #8]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	4606      	mov	r6, r0
 800a68e:	dc4f      	bgt.n	800a730 <_dtoa_r+0x948>
 800a690:	9b06      	ldr	r3, [sp, #24]
 800a692:	2b02      	cmp	r3, #2
 800a694:	dd4c      	ble.n	800a730 <_dtoa_r+0x948>
 800a696:	e011      	b.n	800a6bc <_dtoa_r+0x8d4>
 800a698:	d0c9      	beq.n	800a62e <_dtoa_r+0x846>
 800a69a:	9a05      	ldr	r2, [sp, #20]
 800a69c:	331c      	adds	r3, #28
 800a69e:	441a      	add	r2, r3
 800a6a0:	9205      	str	r2, [sp, #20]
 800a6a2:	441d      	add	r5, r3
 800a6a4:	4498      	add	r8, r3
 800a6a6:	e7c2      	b.n	800a62e <_dtoa_r+0x846>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	e7f6      	b.n	800a69a <_dtoa_r+0x8b2>
 800a6ac:	f1b9 0f00 	cmp.w	r9, #0
 800a6b0:	dc38      	bgt.n	800a724 <_dtoa_r+0x93c>
 800a6b2:	9b06      	ldr	r3, [sp, #24]
 800a6b4:	2b02      	cmp	r3, #2
 800a6b6:	dd35      	ble.n	800a724 <_dtoa_r+0x93c>
 800a6b8:	f8cd 9008 	str.w	r9, [sp, #8]
 800a6bc:	9b02      	ldr	r3, [sp, #8]
 800a6be:	b963      	cbnz	r3, 800a6da <_dtoa_r+0x8f2>
 800a6c0:	4639      	mov	r1, r7
 800a6c2:	2205      	movs	r2, #5
 800a6c4:	4620      	mov	r0, r4
 800a6c6:	f000 f9a8 	bl	800aa1a <__multadd>
 800a6ca:	4601      	mov	r1, r0
 800a6cc:	4607      	mov	r7, r0
 800a6ce:	9804      	ldr	r0, [sp, #16]
 800a6d0:	f000 fb6e 	bl	800adb0 <__mcmp>
 800a6d4:	2800      	cmp	r0, #0
 800a6d6:	f73f adcc 	bgt.w	800a272 <_dtoa_r+0x48a>
 800a6da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6dc:	465d      	mov	r5, fp
 800a6de:	ea6f 0a03 	mvn.w	sl, r3
 800a6e2:	f04f 0900 	mov.w	r9, #0
 800a6e6:	4639      	mov	r1, r7
 800a6e8:	4620      	mov	r0, r4
 800a6ea:	f000 f97f 	bl	800a9ec <_Bfree>
 800a6ee:	2e00      	cmp	r6, #0
 800a6f0:	f43f aeb7 	beq.w	800a462 <_dtoa_r+0x67a>
 800a6f4:	f1b9 0f00 	cmp.w	r9, #0
 800a6f8:	d005      	beq.n	800a706 <_dtoa_r+0x91e>
 800a6fa:	45b1      	cmp	r9, r6
 800a6fc:	d003      	beq.n	800a706 <_dtoa_r+0x91e>
 800a6fe:	4649      	mov	r1, r9
 800a700:	4620      	mov	r0, r4
 800a702:	f000 f973 	bl	800a9ec <_Bfree>
 800a706:	4631      	mov	r1, r6
 800a708:	4620      	mov	r0, r4
 800a70a:	f000 f96f 	bl	800a9ec <_Bfree>
 800a70e:	e6a8      	b.n	800a462 <_dtoa_r+0x67a>
 800a710:	2700      	movs	r7, #0
 800a712:	463e      	mov	r6, r7
 800a714:	e7e1      	b.n	800a6da <_dtoa_r+0x8f2>
 800a716:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a71a:	463e      	mov	r6, r7
 800a71c:	e5a9      	b.n	800a272 <_dtoa_r+0x48a>
 800a71e:	bf00      	nop
 800a720:	40240000 	.word	0x40240000
 800a724:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a726:	f8cd 9008 	str.w	r9, [sp, #8]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	f000 80fa 	beq.w	800a924 <_dtoa_r+0xb3c>
 800a730:	2d00      	cmp	r5, #0
 800a732:	dd05      	ble.n	800a740 <_dtoa_r+0x958>
 800a734:	4631      	mov	r1, r6
 800a736:	462a      	mov	r2, r5
 800a738:	4620      	mov	r0, r4
 800a73a:	f000 fae5 	bl	800ad08 <__lshift>
 800a73e:	4606      	mov	r6, r0
 800a740:	9b07      	ldr	r3, [sp, #28]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d04c      	beq.n	800a7e0 <_dtoa_r+0x9f8>
 800a746:	6871      	ldr	r1, [r6, #4]
 800a748:	4620      	mov	r0, r4
 800a74a:	f000 f91b 	bl	800a984 <_Balloc>
 800a74e:	6932      	ldr	r2, [r6, #16]
 800a750:	3202      	adds	r2, #2
 800a752:	4605      	mov	r5, r0
 800a754:	0092      	lsls	r2, r2, #2
 800a756:	f106 010c 	add.w	r1, r6, #12
 800a75a:	300c      	adds	r0, #12
 800a75c:	f7fe fe26 	bl	80093ac <memcpy>
 800a760:	2201      	movs	r2, #1
 800a762:	4629      	mov	r1, r5
 800a764:	4620      	mov	r0, r4
 800a766:	f000 facf 	bl	800ad08 <__lshift>
 800a76a:	9b00      	ldr	r3, [sp, #0]
 800a76c:	f8cd b014 	str.w	fp, [sp, #20]
 800a770:	f003 0301 	and.w	r3, r3, #1
 800a774:	46b1      	mov	r9, r6
 800a776:	9307      	str	r3, [sp, #28]
 800a778:	4606      	mov	r6, r0
 800a77a:	4639      	mov	r1, r7
 800a77c:	9804      	ldr	r0, [sp, #16]
 800a77e:	f7ff faa5 	bl	8009ccc <quorem>
 800a782:	4649      	mov	r1, r9
 800a784:	4605      	mov	r5, r0
 800a786:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a78a:	9804      	ldr	r0, [sp, #16]
 800a78c:	f000 fb10 	bl	800adb0 <__mcmp>
 800a790:	4632      	mov	r2, r6
 800a792:	9000      	str	r0, [sp, #0]
 800a794:	4639      	mov	r1, r7
 800a796:	4620      	mov	r0, r4
 800a798:	f000 fb24 	bl	800ade4 <__mdiff>
 800a79c:	68c3      	ldr	r3, [r0, #12]
 800a79e:	4602      	mov	r2, r0
 800a7a0:	bb03      	cbnz	r3, 800a7e4 <_dtoa_r+0x9fc>
 800a7a2:	4601      	mov	r1, r0
 800a7a4:	9008      	str	r0, [sp, #32]
 800a7a6:	9804      	ldr	r0, [sp, #16]
 800a7a8:	f000 fb02 	bl	800adb0 <__mcmp>
 800a7ac:	9a08      	ldr	r2, [sp, #32]
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	4611      	mov	r1, r2
 800a7b2:	4620      	mov	r0, r4
 800a7b4:	9308      	str	r3, [sp, #32]
 800a7b6:	f000 f919 	bl	800a9ec <_Bfree>
 800a7ba:	9b08      	ldr	r3, [sp, #32]
 800a7bc:	b9a3      	cbnz	r3, 800a7e8 <_dtoa_r+0xa00>
 800a7be:	9a06      	ldr	r2, [sp, #24]
 800a7c0:	b992      	cbnz	r2, 800a7e8 <_dtoa_r+0xa00>
 800a7c2:	9a07      	ldr	r2, [sp, #28]
 800a7c4:	b982      	cbnz	r2, 800a7e8 <_dtoa_r+0xa00>
 800a7c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a7ca:	d029      	beq.n	800a820 <_dtoa_r+0xa38>
 800a7cc:	9b00      	ldr	r3, [sp, #0]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	dd01      	ble.n	800a7d6 <_dtoa_r+0x9ee>
 800a7d2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800a7d6:	9b05      	ldr	r3, [sp, #20]
 800a7d8:	1c5d      	adds	r5, r3, #1
 800a7da:	f883 8000 	strb.w	r8, [r3]
 800a7de:	e782      	b.n	800a6e6 <_dtoa_r+0x8fe>
 800a7e0:	4630      	mov	r0, r6
 800a7e2:	e7c2      	b.n	800a76a <_dtoa_r+0x982>
 800a7e4:	2301      	movs	r3, #1
 800a7e6:	e7e3      	b.n	800a7b0 <_dtoa_r+0x9c8>
 800a7e8:	9a00      	ldr	r2, [sp, #0]
 800a7ea:	2a00      	cmp	r2, #0
 800a7ec:	db04      	blt.n	800a7f8 <_dtoa_r+0xa10>
 800a7ee:	d125      	bne.n	800a83c <_dtoa_r+0xa54>
 800a7f0:	9a06      	ldr	r2, [sp, #24]
 800a7f2:	bb1a      	cbnz	r2, 800a83c <_dtoa_r+0xa54>
 800a7f4:	9a07      	ldr	r2, [sp, #28]
 800a7f6:	bb0a      	cbnz	r2, 800a83c <_dtoa_r+0xa54>
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	ddec      	ble.n	800a7d6 <_dtoa_r+0x9ee>
 800a7fc:	2201      	movs	r2, #1
 800a7fe:	9904      	ldr	r1, [sp, #16]
 800a800:	4620      	mov	r0, r4
 800a802:	f000 fa81 	bl	800ad08 <__lshift>
 800a806:	4639      	mov	r1, r7
 800a808:	9004      	str	r0, [sp, #16]
 800a80a:	f000 fad1 	bl	800adb0 <__mcmp>
 800a80e:	2800      	cmp	r0, #0
 800a810:	dc03      	bgt.n	800a81a <_dtoa_r+0xa32>
 800a812:	d1e0      	bne.n	800a7d6 <_dtoa_r+0x9ee>
 800a814:	f018 0f01 	tst.w	r8, #1
 800a818:	d0dd      	beq.n	800a7d6 <_dtoa_r+0x9ee>
 800a81a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a81e:	d1d8      	bne.n	800a7d2 <_dtoa_r+0x9ea>
 800a820:	9b05      	ldr	r3, [sp, #20]
 800a822:	9a05      	ldr	r2, [sp, #20]
 800a824:	1c5d      	adds	r5, r3, #1
 800a826:	2339      	movs	r3, #57	; 0x39
 800a828:	7013      	strb	r3, [r2, #0]
 800a82a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a82e:	2b39      	cmp	r3, #57	; 0x39
 800a830:	f105 32ff 	add.w	r2, r5, #4294967295
 800a834:	d04f      	beq.n	800a8d6 <_dtoa_r+0xaee>
 800a836:	3301      	adds	r3, #1
 800a838:	7013      	strb	r3, [r2, #0]
 800a83a:	e754      	b.n	800a6e6 <_dtoa_r+0x8fe>
 800a83c:	9a05      	ldr	r2, [sp, #20]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	f102 0501 	add.w	r5, r2, #1
 800a844:	dd06      	ble.n	800a854 <_dtoa_r+0xa6c>
 800a846:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a84a:	d0e9      	beq.n	800a820 <_dtoa_r+0xa38>
 800a84c:	f108 0801 	add.w	r8, r8, #1
 800a850:	9b05      	ldr	r3, [sp, #20]
 800a852:	e7c2      	b.n	800a7da <_dtoa_r+0x9f2>
 800a854:	9a02      	ldr	r2, [sp, #8]
 800a856:	f805 8c01 	strb.w	r8, [r5, #-1]
 800a85a:	eba5 030b 	sub.w	r3, r5, fp
 800a85e:	4293      	cmp	r3, r2
 800a860:	d021      	beq.n	800a8a6 <_dtoa_r+0xabe>
 800a862:	2300      	movs	r3, #0
 800a864:	220a      	movs	r2, #10
 800a866:	9904      	ldr	r1, [sp, #16]
 800a868:	4620      	mov	r0, r4
 800a86a:	f000 f8d6 	bl	800aa1a <__multadd>
 800a86e:	45b1      	cmp	r9, r6
 800a870:	9004      	str	r0, [sp, #16]
 800a872:	f04f 0300 	mov.w	r3, #0
 800a876:	f04f 020a 	mov.w	r2, #10
 800a87a:	4649      	mov	r1, r9
 800a87c:	4620      	mov	r0, r4
 800a87e:	d105      	bne.n	800a88c <_dtoa_r+0xaa4>
 800a880:	f000 f8cb 	bl	800aa1a <__multadd>
 800a884:	4681      	mov	r9, r0
 800a886:	4606      	mov	r6, r0
 800a888:	9505      	str	r5, [sp, #20]
 800a88a:	e776      	b.n	800a77a <_dtoa_r+0x992>
 800a88c:	f000 f8c5 	bl	800aa1a <__multadd>
 800a890:	4631      	mov	r1, r6
 800a892:	4681      	mov	r9, r0
 800a894:	2300      	movs	r3, #0
 800a896:	220a      	movs	r2, #10
 800a898:	4620      	mov	r0, r4
 800a89a:	f000 f8be 	bl	800aa1a <__multadd>
 800a89e:	4606      	mov	r6, r0
 800a8a0:	e7f2      	b.n	800a888 <_dtoa_r+0xaa0>
 800a8a2:	f04f 0900 	mov.w	r9, #0
 800a8a6:	2201      	movs	r2, #1
 800a8a8:	9904      	ldr	r1, [sp, #16]
 800a8aa:	4620      	mov	r0, r4
 800a8ac:	f000 fa2c 	bl	800ad08 <__lshift>
 800a8b0:	4639      	mov	r1, r7
 800a8b2:	9004      	str	r0, [sp, #16]
 800a8b4:	f000 fa7c 	bl	800adb0 <__mcmp>
 800a8b8:	2800      	cmp	r0, #0
 800a8ba:	dcb6      	bgt.n	800a82a <_dtoa_r+0xa42>
 800a8bc:	d102      	bne.n	800a8c4 <_dtoa_r+0xadc>
 800a8be:	f018 0f01 	tst.w	r8, #1
 800a8c2:	d1b2      	bne.n	800a82a <_dtoa_r+0xa42>
 800a8c4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a8c8:	2b30      	cmp	r3, #48	; 0x30
 800a8ca:	f105 32ff 	add.w	r2, r5, #4294967295
 800a8ce:	f47f af0a 	bne.w	800a6e6 <_dtoa_r+0x8fe>
 800a8d2:	4615      	mov	r5, r2
 800a8d4:	e7f6      	b.n	800a8c4 <_dtoa_r+0xadc>
 800a8d6:	4593      	cmp	fp, r2
 800a8d8:	d105      	bne.n	800a8e6 <_dtoa_r+0xafe>
 800a8da:	2331      	movs	r3, #49	; 0x31
 800a8dc:	f10a 0a01 	add.w	sl, sl, #1
 800a8e0:	f88b 3000 	strb.w	r3, [fp]
 800a8e4:	e6ff      	b.n	800a6e6 <_dtoa_r+0x8fe>
 800a8e6:	4615      	mov	r5, r2
 800a8e8:	e79f      	b.n	800a82a <_dtoa_r+0xa42>
 800a8ea:	f8df b064 	ldr.w	fp, [pc, #100]	; 800a950 <_dtoa_r+0xb68>
 800a8ee:	e007      	b.n	800a900 <_dtoa_r+0xb18>
 800a8f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a8f2:	f8df b060 	ldr.w	fp, [pc, #96]	; 800a954 <_dtoa_r+0xb6c>
 800a8f6:	b11b      	cbz	r3, 800a900 <_dtoa_r+0xb18>
 800a8f8:	f10b 0308 	add.w	r3, fp, #8
 800a8fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a8fe:	6013      	str	r3, [r2, #0]
 800a900:	4658      	mov	r0, fp
 800a902:	b017      	add	sp, #92	; 0x5c
 800a904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a908:	9b06      	ldr	r3, [sp, #24]
 800a90a:	2b01      	cmp	r3, #1
 800a90c:	f77f ae35 	ble.w	800a57a <_dtoa_r+0x792>
 800a910:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a912:	9307      	str	r3, [sp, #28]
 800a914:	e649      	b.n	800a5aa <_dtoa_r+0x7c2>
 800a916:	9b02      	ldr	r3, [sp, #8]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	dc03      	bgt.n	800a924 <_dtoa_r+0xb3c>
 800a91c:	9b06      	ldr	r3, [sp, #24]
 800a91e:	2b02      	cmp	r3, #2
 800a920:	f73f aecc 	bgt.w	800a6bc <_dtoa_r+0x8d4>
 800a924:	465d      	mov	r5, fp
 800a926:	4639      	mov	r1, r7
 800a928:	9804      	ldr	r0, [sp, #16]
 800a92a:	f7ff f9cf 	bl	8009ccc <quorem>
 800a92e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a932:	f805 8b01 	strb.w	r8, [r5], #1
 800a936:	9a02      	ldr	r2, [sp, #8]
 800a938:	eba5 030b 	sub.w	r3, r5, fp
 800a93c:	429a      	cmp	r2, r3
 800a93e:	ddb0      	ble.n	800a8a2 <_dtoa_r+0xaba>
 800a940:	2300      	movs	r3, #0
 800a942:	220a      	movs	r2, #10
 800a944:	9904      	ldr	r1, [sp, #16]
 800a946:	4620      	mov	r0, r4
 800a948:	f000 f867 	bl	800aa1a <__multadd>
 800a94c:	9004      	str	r0, [sp, #16]
 800a94e:	e7ea      	b.n	800a926 <_dtoa_r+0xb3e>
 800a950:	0800d6b8 	.word	0x0800d6b8
 800a954:	0800d6dc 	.word	0x0800d6dc

0800a958 <_localeconv_r>:
 800a958:	4b04      	ldr	r3, [pc, #16]	; (800a96c <_localeconv_r+0x14>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	6a18      	ldr	r0, [r3, #32]
 800a95e:	4b04      	ldr	r3, [pc, #16]	; (800a970 <_localeconv_r+0x18>)
 800a960:	2800      	cmp	r0, #0
 800a962:	bf08      	it	eq
 800a964:	4618      	moveq	r0, r3
 800a966:	30f0      	adds	r0, #240	; 0xf0
 800a968:	4770      	bx	lr
 800a96a:	bf00      	nop
 800a96c:	2000000c 	.word	0x2000000c
 800a970:	20000070 	.word	0x20000070

0800a974 <malloc>:
 800a974:	4b02      	ldr	r3, [pc, #8]	; (800a980 <malloc+0xc>)
 800a976:	4601      	mov	r1, r0
 800a978:	6818      	ldr	r0, [r3, #0]
 800a97a:	f000 bb3b 	b.w	800aff4 <_malloc_r>
 800a97e:	bf00      	nop
 800a980:	2000000c 	.word	0x2000000c

0800a984 <_Balloc>:
 800a984:	b570      	push	{r4, r5, r6, lr}
 800a986:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a988:	4604      	mov	r4, r0
 800a98a:	460e      	mov	r6, r1
 800a98c:	b93d      	cbnz	r5, 800a99e <_Balloc+0x1a>
 800a98e:	2010      	movs	r0, #16
 800a990:	f7ff fff0 	bl	800a974 <malloc>
 800a994:	6260      	str	r0, [r4, #36]	; 0x24
 800a996:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a99a:	6005      	str	r5, [r0, #0]
 800a99c:	60c5      	str	r5, [r0, #12]
 800a99e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a9a0:	68eb      	ldr	r3, [r5, #12]
 800a9a2:	b183      	cbz	r3, 800a9c6 <_Balloc+0x42>
 800a9a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a9a6:	68db      	ldr	r3, [r3, #12]
 800a9a8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a9ac:	b9b8      	cbnz	r0, 800a9de <_Balloc+0x5a>
 800a9ae:	2101      	movs	r1, #1
 800a9b0:	fa01 f506 	lsl.w	r5, r1, r6
 800a9b4:	1d6a      	adds	r2, r5, #5
 800a9b6:	0092      	lsls	r2, r2, #2
 800a9b8:	4620      	mov	r0, r4
 800a9ba:	f000 fabf 	bl	800af3c <_calloc_r>
 800a9be:	b160      	cbz	r0, 800a9da <_Balloc+0x56>
 800a9c0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a9c4:	e00e      	b.n	800a9e4 <_Balloc+0x60>
 800a9c6:	2221      	movs	r2, #33	; 0x21
 800a9c8:	2104      	movs	r1, #4
 800a9ca:	4620      	mov	r0, r4
 800a9cc:	f000 fab6 	bl	800af3c <_calloc_r>
 800a9d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a9d2:	60e8      	str	r0, [r5, #12]
 800a9d4:	68db      	ldr	r3, [r3, #12]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d1e4      	bne.n	800a9a4 <_Balloc+0x20>
 800a9da:	2000      	movs	r0, #0
 800a9dc:	bd70      	pop	{r4, r5, r6, pc}
 800a9de:	6802      	ldr	r2, [r0, #0]
 800a9e0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a9ea:	e7f7      	b.n	800a9dc <_Balloc+0x58>

0800a9ec <_Bfree>:
 800a9ec:	b570      	push	{r4, r5, r6, lr}
 800a9ee:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a9f0:	4606      	mov	r6, r0
 800a9f2:	460d      	mov	r5, r1
 800a9f4:	b93c      	cbnz	r4, 800aa06 <_Bfree+0x1a>
 800a9f6:	2010      	movs	r0, #16
 800a9f8:	f7ff ffbc 	bl	800a974 <malloc>
 800a9fc:	6270      	str	r0, [r6, #36]	; 0x24
 800a9fe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aa02:	6004      	str	r4, [r0, #0]
 800aa04:	60c4      	str	r4, [r0, #12]
 800aa06:	b13d      	cbz	r5, 800aa18 <_Bfree+0x2c>
 800aa08:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800aa0a:	686a      	ldr	r2, [r5, #4]
 800aa0c:	68db      	ldr	r3, [r3, #12]
 800aa0e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aa12:	6029      	str	r1, [r5, #0]
 800aa14:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800aa18:	bd70      	pop	{r4, r5, r6, pc}

0800aa1a <__multadd>:
 800aa1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa1e:	690d      	ldr	r5, [r1, #16]
 800aa20:	461f      	mov	r7, r3
 800aa22:	4606      	mov	r6, r0
 800aa24:	460c      	mov	r4, r1
 800aa26:	f101 0c14 	add.w	ip, r1, #20
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	f8dc 0000 	ldr.w	r0, [ip]
 800aa30:	b281      	uxth	r1, r0
 800aa32:	fb02 7101 	mla	r1, r2, r1, r7
 800aa36:	0c0f      	lsrs	r7, r1, #16
 800aa38:	0c00      	lsrs	r0, r0, #16
 800aa3a:	fb02 7000 	mla	r0, r2, r0, r7
 800aa3e:	b289      	uxth	r1, r1
 800aa40:	3301      	adds	r3, #1
 800aa42:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800aa46:	429d      	cmp	r5, r3
 800aa48:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800aa4c:	f84c 1b04 	str.w	r1, [ip], #4
 800aa50:	dcec      	bgt.n	800aa2c <__multadd+0x12>
 800aa52:	b1d7      	cbz	r7, 800aa8a <__multadd+0x70>
 800aa54:	68a3      	ldr	r3, [r4, #8]
 800aa56:	42ab      	cmp	r3, r5
 800aa58:	dc12      	bgt.n	800aa80 <__multadd+0x66>
 800aa5a:	6861      	ldr	r1, [r4, #4]
 800aa5c:	4630      	mov	r0, r6
 800aa5e:	3101      	adds	r1, #1
 800aa60:	f7ff ff90 	bl	800a984 <_Balloc>
 800aa64:	6922      	ldr	r2, [r4, #16]
 800aa66:	3202      	adds	r2, #2
 800aa68:	f104 010c 	add.w	r1, r4, #12
 800aa6c:	4680      	mov	r8, r0
 800aa6e:	0092      	lsls	r2, r2, #2
 800aa70:	300c      	adds	r0, #12
 800aa72:	f7fe fc9b 	bl	80093ac <memcpy>
 800aa76:	4621      	mov	r1, r4
 800aa78:	4630      	mov	r0, r6
 800aa7a:	f7ff ffb7 	bl	800a9ec <_Bfree>
 800aa7e:	4644      	mov	r4, r8
 800aa80:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aa84:	3501      	adds	r5, #1
 800aa86:	615f      	str	r7, [r3, #20]
 800aa88:	6125      	str	r5, [r4, #16]
 800aa8a:	4620      	mov	r0, r4
 800aa8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800aa90 <__hi0bits>:
 800aa90:	0c02      	lsrs	r2, r0, #16
 800aa92:	0412      	lsls	r2, r2, #16
 800aa94:	4603      	mov	r3, r0
 800aa96:	b9b2      	cbnz	r2, 800aac6 <__hi0bits+0x36>
 800aa98:	0403      	lsls	r3, r0, #16
 800aa9a:	2010      	movs	r0, #16
 800aa9c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800aaa0:	bf04      	itt	eq
 800aaa2:	021b      	lsleq	r3, r3, #8
 800aaa4:	3008      	addeq	r0, #8
 800aaa6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800aaaa:	bf04      	itt	eq
 800aaac:	011b      	lsleq	r3, r3, #4
 800aaae:	3004      	addeq	r0, #4
 800aab0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800aab4:	bf04      	itt	eq
 800aab6:	009b      	lsleq	r3, r3, #2
 800aab8:	3002      	addeq	r0, #2
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	db06      	blt.n	800aacc <__hi0bits+0x3c>
 800aabe:	005b      	lsls	r3, r3, #1
 800aac0:	d503      	bpl.n	800aaca <__hi0bits+0x3a>
 800aac2:	3001      	adds	r0, #1
 800aac4:	4770      	bx	lr
 800aac6:	2000      	movs	r0, #0
 800aac8:	e7e8      	b.n	800aa9c <__hi0bits+0xc>
 800aaca:	2020      	movs	r0, #32
 800aacc:	4770      	bx	lr

0800aace <__lo0bits>:
 800aace:	6803      	ldr	r3, [r0, #0]
 800aad0:	f013 0207 	ands.w	r2, r3, #7
 800aad4:	4601      	mov	r1, r0
 800aad6:	d00b      	beq.n	800aaf0 <__lo0bits+0x22>
 800aad8:	07da      	lsls	r2, r3, #31
 800aada:	d423      	bmi.n	800ab24 <__lo0bits+0x56>
 800aadc:	0798      	lsls	r0, r3, #30
 800aade:	bf49      	itett	mi
 800aae0:	085b      	lsrmi	r3, r3, #1
 800aae2:	089b      	lsrpl	r3, r3, #2
 800aae4:	2001      	movmi	r0, #1
 800aae6:	600b      	strmi	r3, [r1, #0]
 800aae8:	bf5c      	itt	pl
 800aaea:	600b      	strpl	r3, [r1, #0]
 800aaec:	2002      	movpl	r0, #2
 800aaee:	4770      	bx	lr
 800aaf0:	b298      	uxth	r0, r3
 800aaf2:	b9a8      	cbnz	r0, 800ab20 <__lo0bits+0x52>
 800aaf4:	0c1b      	lsrs	r3, r3, #16
 800aaf6:	2010      	movs	r0, #16
 800aaf8:	f013 0fff 	tst.w	r3, #255	; 0xff
 800aafc:	bf04      	itt	eq
 800aafe:	0a1b      	lsreq	r3, r3, #8
 800ab00:	3008      	addeq	r0, #8
 800ab02:	071a      	lsls	r2, r3, #28
 800ab04:	bf04      	itt	eq
 800ab06:	091b      	lsreq	r3, r3, #4
 800ab08:	3004      	addeq	r0, #4
 800ab0a:	079a      	lsls	r2, r3, #30
 800ab0c:	bf04      	itt	eq
 800ab0e:	089b      	lsreq	r3, r3, #2
 800ab10:	3002      	addeq	r0, #2
 800ab12:	07da      	lsls	r2, r3, #31
 800ab14:	d402      	bmi.n	800ab1c <__lo0bits+0x4e>
 800ab16:	085b      	lsrs	r3, r3, #1
 800ab18:	d006      	beq.n	800ab28 <__lo0bits+0x5a>
 800ab1a:	3001      	adds	r0, #1
 800ab1c:	600b      	str	r3, [r1, #0]
 800ab1e:	4770      	bx	lr
 800ab20:	4610      	mov	r0, r2
 800ab22:	e7e9      	b.n	800aaf8 <__lo0bits+0x2a>
 800ab24:	2000      	movs	r0, #0
 800ab26:	4770      	bx	lr
 800ab28:	2020      	movs	r0, #32
 800ab2a:	4770      	bx	lr

0800ab2c <__i2b>:
 800ab2c:	b510      	push	{r4, lr}
 800ab2e:	460c      	mov	r4, r1
 800ab30:	2101      	movs	r1, #1
 800ab32:	f7ff ff27 	bl	800a984 <_Balloc>
 800ab36:	2201      	movs	r2, #1
 800ab38:	6144      	str	r4, [r0, #20]
 800ab3a:	6102      	str	r2, [r0, #16]
 800ab3c:	bd10      	pop	{r4, pc}

0800ab3e <__multiply>:
 800ab3e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab42:	4614      	mov	r4, r2
 800ab44:	690a      	ldr	r2, [r1, #16]
 800ab46:	6923      	ldr	r3, [r4, #16]
 800ab48:	429a      	cmp	r2, r3
 800ab4a:	bfb8      	it	lt
 800ab4c:	460b      	movlt	r3, r1
 800ab4e:	4688      	mov	r8, r1
 800ab50:	bfbc      	itt	lt
 800ab52:	46a0      	movlt	r8, r4
 800ab54:	461c      	movlt	r4, r3
 800ab56:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ab5a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ab5e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ab62:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ab66:	eb07 0609 	add.w	r6, r7, r9
 800ab6a:	42b3      	cmp	r3, r6
 800ab6c:	bfb8      	it	lt
 800ab6e:	3101      	addlt	r1, #1
 800ab70:	f7ff ff08 	bl	800a984 <_Balloc>
 800ab74:	f100 0514 	add.w	r5, r0, #20
 800ab78:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800ab7c:	462b      	mov	r3, r5
 800ab7e:	2200      	movs	r2, #0
 800ab80:	4573      	cmp	r3, lr
 800ab82:	d316      	bcc.n	800abb2 <__multiply+0x74>
 800ab84:	f104 0214 	add.w	r2, r4, #20
 800ab88:	f108 0114 	add.w	r1, r8, #20
 800ab8c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800ab90:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800ab94:	9300      	str	r3, [sp, #0]
 800ab96:	9b00      	ldr	r3, [sp, #0]
 800ab98:	9201      	str	r2, [sp, #4]
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	d80c      	bhi.n	800abb8 <__multiply+0x7a>
 800ab9e:	2e00      	cmp	r6, #0
 800aba0:	dd03      	ble.n	800abaa <__multiply+0x6c>
 800aba2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d05d      	beq.n	800ac66 <__multiply+0x128>
 800abaa:	6106      	str	r6, [r0, #16]
 800abac:	b003      	add	sp, #12
 800abae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abb2:	f843 2b04 	str.w	r2, [r3], #4
 800abb6:	e7e3      	b.n	800ab80 <__multiply+0x42>
 800abb8:	f8b2 b000 	ldrh.w	fp, [r2]
 800abbc:	f1bb 0f00 	cmp.w	fp, #0
 800abc0:	d023      	beq.n	800ac0a <__multiply+0xcc>
 800abc2:	4689      	mov	r9, r1
 800abc4:	46ac      	mov	ip, r5
 800abc6:	f04f 0800 	mov.w	r8, #0
 800abca:	f859 4b04 	ldr.w	r4, [r9], #4
 800abce:	f8dc a000 	ldr.w	sl, [ip]
 800abd2:	b2a3      	uxth	r3, r4
 800abd4:	fa1f fa8a 	uxth.w	sl, sl
 800abd8:	fb0b a303 	mla	r3, fp, r3, sl
 800abdc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800abe0:	f8dc 4000 	ldr.w	r4, [ip]
 800abe4:	4443      	add	r3, r8
 800abe6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800abea:	fb0b 840a 	mla	r4, fp, sl, r8
 800abee:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800abf2:	46e2      	mov	sl, ip
 800abf4:	b29b      	uxth	r3, r3
 800abf6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800abfa:	454f      	cmp	r7, r9
 800abfc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ac00:	f84a 3b04 	str.w	r3, [sl], #4
 800ac04:	d82b      	bhi.n	800ac5e <__multiply+0x120>
 800ac06:	f8cc 8004 	str.w	r8, [ip, #4]
 800ac0a:	9b01      	ldr	r3, [sp, #4]
 800ac0c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800ac10:	3204      	adds	r2, #4
 800ac12:	f1ba 0f00 	cmp.w	sl, #0
 800ac16:	d020      	beq.n	800ac5a <__multiply+0x11c>
 800ac18:	682b      	ldr	r3, [r5, #0]
 800ac1a:	4689      	mov	r9, r1
 800ac1c:	46a8      	mov	r8, r5
 800ac1e:	f04f 0b00 	mov.w	fp, #0
 800ac22:	f8b9 c000 	ldrh.w	ip, [r9]
 800ac26:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800ac2a:	fb0a 440c 	mla	r4, sl, ip, r4
 800ac2e:	445c      	add	r4, fp
 800ac30:	46c4      	mov	ip, r8
 800ac32:	b29b      	uxth	r3, r3
 800ac34:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ac38:	f84c 3b04 	str.w	r3, [ip], #4
 800ac3c:	f859 3b04 	ldr.w	r3, [r9], #4
 800ac40:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800ac44:	0c1b      	lsrs	r3, r3, #16
 800ac46:	fb0a b303 	mla	r3, sl, r3, fp
 800ac4a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800ac4e:	454f      	cmp	r7, r9
 800ac50:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800ac54:	d805      	bhi.n	800ac62 <__multiply+0x124>
 800ac56:	f8c8 3004 	str.w	r3, [r8, #4]
 800ac5a:	3504      	adds	r5, #4
 800ac5c:	e79b      	b.n	800ab96 <__multiply+0x58>
 800ac5e:	46d4      	mov	ip, sl
 800ac60:	e7b3      	b.n	800abca <__multiply+0x8c>
 800ac62:	46e0      	mov	r8, ip
 800ac64:	e7dd      	b.n	800ac22 <__multiply+0xe4>
 800ac66:	3e01      	subs	r6, #1
 800ac68:	e799      	b.n	800ab9e <__multiply+0x60>
	...

0800ac6c <__pow5mult>:
 800ac6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac70:	4615      	mov	r5, r2
 800ac72:	f012 0203 	ands.w	r2, r2, #3
 800ac76:	4606      	mov	r6, r0
 800ac78:	460f      	mov	r7, r1
 800ac7a:	d007      	beq.n	800ac8c <__pow5mult+0x20>
 800ac7c:	3a01      	subs	r2, #1
 800ac7e:	4c21      	ldr	r4, [pc, #132]	; (800ad04 <__pow5mult+0x98>)
 800ac80:	2300      	movs	r3, #0
 800ac82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ac86:	f7ff fec8 	bl	800aa1a <__multadd>
 800ac8a:	4607      	mov	r7, r0
 800ac8c:	10ad      	asrs	r5, r5, #2
 800ac8e:	d035      	beq.n	800acfc <__pow5mult+0x90>
 800ac90:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ac92:	b93c      	cbnz	r4, 800aca4 <__pow5mult+0x38>
 800ac94:	2010      	movs	r0, #16
 800ac96:	f7ff fe6d 	bl	800a974 <malloc>
 800ac9a:	6270      	str	r0, [r6, #36]	; 0x24
 800ac9c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aca0:	6004      	str	r4, [r0, #0]
 800aca2:	60c4      	str	r4, [r0, #12]
 800aca4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800aca8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800acac:	b94c      	cbnz	r4, 800acc2 <__pow5mult+0x56>
 800acae:	f240 2171 	movw	r1, #625	; 0x271
 800acb2:	4630      	mov	r0, r6
 800acb4:	f7ff ff3a 	bl	800ab2c <__i2b>
 800acb8:	2300      	movs	r3, #0
 800acba:	f8c8 0008 	str.w	r0, [r8, #8]
 800acbe:	4604      	mov	r4, r0
 800acc0:	6003      	str	r3, [r0, #0]
 800acc2:	f04f 0800 	mov.w	r8, #0
 800acc6:	07eb      	lsls	r3, r5, #31
 800acc8:	d50a      	bpl.n	800ace0 <__pow5mult+0x74>
 800acca:	4639      	mov	r1, r7
 800accc:	4622      	mov	r2, r4
 800acce:	4630      	mov	r0, r6
 800acd0:	f7ff ff35 	bl	800ab3e <__multiply>
 800acd4:	4639      	mov	r1, r7
 800acd6:	4681      	mov	r9, r0
 800acd8:	4630      	mov	r0, r6
 800acda:	f7ff fe87 	bl	800a9ec <_Bfree>
 800acde:	464f      	mov	r7, r9
 800ace0:	106d      	asrs	r5, r5, #1
 800ace2:	d00b      	beq.n	800acfc <__pow5mult+0x90>
 800ace4:	6820      	ldr	r0, [r4, #0]
 800ace6:	b938      	cbnz	r0, 800acf8 <__pow5mult+0x8c>
 800ace8:	4622      	mov	r2, r4
 800acea:	4621      	mov	r1, r4
 800acec:	4630      	mov	r0, r6
 800acee:	f7ff ff26 	bl	800ab3e <__multiply>
 800acf2:	6020      	str	r0, [r4, #0]
 800acf4:	f8c0 8000 	str.w	r8, [r0]
 800acf8:	4604      	mov	r4, r0
 800acfa:	e7e4      	b.n	800acc6 <__pow5mult+0x5a>
 800acfc:	4638      	mov	r0, r7
 800acfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad02:	bf00      	nop
 800ad04:	0800d7e0 	.word	0x0800d7e0

0800ad08 <__lshift>:
 800ad08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad0c:	460c      	mov	r4, r1
 800ad0e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ad12:	6923      	ldr	r3, [r4, #16]
 800ad14:	6849      	ldr	r1, [r1, #4]
 800ad16:	eb0a 0903 	add.w	r9, sl, r3
 800ad1a:	68a3      	ldr	r3, [r4, #8]
 800ad1c:	4607      	mov	r7, r0
 800ad1e:	4616      	mov	r6, r2
 800ad20:	f109 0501 	add.w	r5, r9, #1
 800ad24:	42ab      	cmp	r3, r5
 800ad26:	db32      	blt.n	800ad8e <__lshift+0x86>
 800ad28:	4638      	mov	r0, r7
 800ad2a:	f7ff fe2b 	bl	800a984 <_Balloc>
 800ad2e:	2300      	movs	r3, #0
 800ad30:	4680      	mov	r8, r0
 800ad32:	f100 0114 	add.w	r1, r0, #20
 800ad36:	461a      	mov	r2, r3
 800ad38:	4553      	cmp	r3, sl
 800ad3a:	db2b      	blt.n	800ad94 <__lshift+0x8c>
 800ad3c:	6920      	ldr	r0, [r4, #16]
 800ad3e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ad42:	f104 0314 	add.w	r3, r4, #20
 800ad46:	f016 021f 	ands.w	r2, r6, #31
 800ad4a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ad4e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ad52:	d025      	beq.n	800ada0 <__lshift+0x98>
 800ad54:	f1c2 0e20 	rsb	lr, r2, #32
 800ad58:	2000      	movs	r0, #0
 800ad5a:	681e      	ldr	r6, [r3, #0]
 800ad5c:	468a      	mov	sl, r1
 800ad5e:	4096      	lsls	r6, r2
 800ad60:	4330      	orrs	r0, r6
 800ad62:	f84a 0b04 	str.w	r0, [sl], #4
 800ad66:	f853 0b04 	ldr.w	r0, [r3], #4
 800ad6a:	459c      	cmp	ip, r3
 800ad6c:	fa20 f00e 	lsr.w	r0, r0, lr
 800ad70:	d814      	bhi.n	800ad9c <__lshift+0x94>
 800ad72:	6048      	str	r0, [r1, #4]
 800ad74:	b108      	cbz	r0, 800ad7a <__lshift+0x72>
 800ad76:	f109 0502 	add.w	r5, r9, #2
 800ad7a:	3d01      	subs	r5, #1
 800ad7c:	4638      	mov	r0, r7
 800ad7e:	f8c8 5010 	str.w	r5, [r8, #16]
 800ad82:	4621      	mov	r1, r4
 800ad84:	f7ff fe32 	bl	800a9ec <_Bfree>
 800ad88:	4640      	mov	r0, r8
 800ad8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad8e:	3101      	adds	r1, #1
 800ad90:	005b      	lsls	r3, r3, #1
 800ad92:	e7c7      	b.n	800ad24 <__lshift+0x1c>
 800ad94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800ad98:	3301      	adds	r3, #1
 800ad9a:	e7cd      	b.n	800ad38 <__lshift+0x30>
 800ad9c:	4651      	mov	r1, sl
 800ad9e:	e7dc      	b.n	800ad5a <__lshift+0x52>
 800ada0:	3904      	subs	r1, #4
 800ada2:	f853 2b04 	ldr.w	r2, [r3], #4
 800ada6:	f841 2f04 	str.w	r2, [r1, #4]!
 800adaa:	459c      	cmp	ip, r3
 800adac:	d8f9      	bhi.n	800ada2 <__lshift+0x9a>
 800adae:	e7e4      	b.n	800ad7a <__lshift+0x72>

0800adb0 <__mcmp>:
 800adb0:	6903      	ldr	r3, [r0, #16]
 800adb2:	690a      	ldr	r2, [r1, #16]
 800adb4:	1a9b      	subs	r3, r3, r2
 800adb6:	b530      	push	{r4, r5, lr}
 800adb8:	d10c      	bne.n	800add4 <__mcmp+0x24>
 800adba:	0092      	lsls	r2, r2, #2
 800adbc:	3014      	adds	r0, #20
 800adbe:	3114      	adds	r1, #20
 800adc0:	1884      	adds	r4, r0, r2
 800adc2:	4411      	add	r1, r2
 800adc4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800adc8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800adcc:	4295      	cmp	r5, r2
 800adce:	d003      	beq.n	800add8 <__mcmp+0x28>
 800add0:	d305      	bcc.n	800adde <__mcmp+0x2e>
 800add2:	2301      	movs	r3, #1
 800add4:	4618      	mov	r0, r3
 800add6:	bd30      	pop	{r4, r5, pc}
 800add8:	42a0      	cmp	r0, r4
 800adda:	d3f3      	bcc.n	800adc4 <__mcmp+0x14>
 800addc:	e7fa      	b.n	800add4 <__mcmp+0x24>
 800adde:	f04f 33ff 	mov.w	r3, #4294967295
 800ade2:	e7f7      	b.n	800add4 <__mcmp+0x24>

0800ade4 <__mdiff>:
 800ade4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ade8:	460d      	mov	r5, r1
 800adea:	4607      	mov	r7, r0
 800adec:	4611      	mov	r1, r2
 800adee:	4628      	mov	r0, r5
 800adf0:	4614      	mov	r4, r2
 800adf2:	f7ff ffdd 	bl	800adb0 <__mcmp>
 800adf6:	1e06      	subs	r6, r0, #0
 800adf8:	d108      	bne.n	800ae0c <__mdiff+0x28>
 800adfa:	4631      	mov	r1, r6
 800adfc:	4638      	mov	r0, r7
 800adfe:	f7ff fdc1 	bl	800a984 <_Balloc>
 800ae02:	2301      	movs	r3, #1
 800ae04:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ae08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae0c:	bfa4      	itt	ge
 800ae0e:	4623      	movge	r3, r4
 800ae10:	462c      	movge	r4, r5
 800ae12:	4638      	mov	r0, r7
 800ae14:	6861      	ldr	r1, [r4, #4]
 800ae16:	bfa6      	itte	ge
 800ae18:	461d      	movge	r5, r3
 800ae1a:	2600      	movge	r6, #0
 800ae1c:	2601      	movlt	r6, #1
 800ae1e:	f7ff fdb1 	bl	800a984 <_Balloc>
 800ae22:	692b      	ldr	r3, [r5, #16]
 800ae24:	60c6      	str	r6, [r0, #12]
 800ae26:	6926      	ldr	r6, [r4, #16]
 800ae28:	f105 0914 	add.w	r9, r5, #20
 800ae2c:	f104 0214 	add.w	r2, r4, #20
 800ae30:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800ae34:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800ae38:	f100 0514 	add.w	r5, r0, #20
 800ae3c:	f04f 0e00 	mov.w	lr, #0
 800ae40:	f852 ab04 	ldr.w	sl, [r2], #4
 800ae44:	f859 4b04 	ldr.w	r4, [r9], #4
 800ae48:	fa1e f18a 	uxtah	r1, lr, sl
 800ae4c:	b2a3      	uxth	r3, r4
 800ae4e:	1ac9      	subs	r1, r1, r3
 800ae50:	0c23      	lsrs	r3, r4, #16
 800ae52:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800ae56:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ae5a:	b289      	uxth	r1, r1
 800ae5c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800ae60:	45c8      	cmp	r8, r9
 800ae62:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ae66:	4694      	mov	ip, r2
 800ae68:	f845 3b04 	str.w	r3, [r5], #4
 800ae6c:	d8e8      	bhi.n	800ae40 <__mdiff+0x5c>
 800ae6e:	45bc      	cmp	ip, r7
 800ae70:	d304      	bcc.n	800ae7c <__mdiff+0x98>
 800ae72:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800ae76:	b183      	cbz	r3, 800ae9a <__mdiff+0xb6>
 800ae78:	6106      	str	r6, [r0, #16]
 800ae7a:	e7c5      	b.n	800ae08 <__mdiff+0x24>
 800ae7c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ae80:	fa1e f381 	uxtah	r3, lr, r1
 800ae84:	141a      	asrs	r2, r3, #16
 800ae86:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ae8a:	b29b      	uxth	r3, r3
 800ae8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae90:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800ae94:	f845 3b04 	str.w	r3, [r5], #4
 800ae98:	e7e9      	b.n	800ae6e <__mdiff+0x8a>
 800ae9a:	3e01      	subs	r6, #1
 800ae9c:	e7e9      	b.n	800ae72 <__mdiff+0x8e>

0800ae9e <__d2b>:
 800ae9e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aea2:	460e      	mov	r6, r1
 800aea4:	2101      	movs	r1, #1
 800aea6:	ec59 8b10 	vmov	r8, r9, d0
 800aeaa:	4615      	mov	r5, r2
 800aeac:	f7ff fd6a 	bl	800a984 <_Balloc>
 800aeb0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800aeb4:	4607      	mov	r7, r0
 800aeb6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aeba:	bb34      	cbnz	r4, 800af0a <__d2b+0x6c>
 800aebc:	9301      	str	r3, [sp, #4]
 800aebe:	f1b8 0300 	subs.w	r3, r8, #0
 800aec2:	d027      	beq.n	800af14 <__d2b+0x76>
 800aec4:	a802      	add	r0, sp, #8
 800aec6:	f840 3d08 	str.w	r3, [r0, #-8]!
 800aeca:	f7ff fe00 	bl	800aace <__lo0bits>
 800aece:	9900      	ldr	r1, [sp, #0]
 800aed0:	b1f0      	cbz	r0, 800af10 <__d2b+0x72>
 800aed2:	9a01      	ldr	r2, [sp, #4]
 800aed4:	f1c0 0320 	rsb	r3, r0, #32
 800aed8:	fa02 f303 	lsl.w	r3, r2, r3
 800aedc:	430b      	orrs	r3, r1
 800aede:	40c2      	lsrs	r2, r0
 800aee0:	617b      	str	r3, [r7, #20]
 800aee2:	9201      	str	r2, [sp, #4]
 800aee4:	9b01      	ldr	r3, [sp, #4]
 800aee6:	61bb      	str	r3, [r7, #24]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	bf14      	ite	ne
 800aeec:	2102      	movne	r1, #2
 800aeee:	2101      	moveq	r1, #1
 800aef0:	6139      	str	r1, [r7, #16]
 800aef2:	b1c4      	cbz	r4, 800af26 <__d2b+0x88>
 800aef4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800aef8:	4404      	add	r4, r0
 800aefa:	6034      	str	r4, [r6, #0]
 800aefc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800af00:	6028      	str	r0, [r5, #0]
 800af02:	4638      	mov	r0, r7
 800af04:	b003      	add	sp, #12
 800af06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800af0e:	e7d5      	b.n	800aebc <__d2b+0x1e>
 800af10:	6179      	str	r1, [r7, #20]
 800af12:	e7e7      	b.n	800aee4 <__d2b+0x46>
 800af14:	a801      	add	r0, sp, #4
 800af16:	f7ff fdda 	bl	800aace <__lo0bits>
 800af1a:	9b01      	ldr	r3, [sp, #4]
 800af1c:	617b      	str	r3, [r7, #20]
 800af1e:	2101      	movs	r1, #1
 800af20:	6139      	str	r1, [r7, #16]
 800af22:	3020      	adds	r0, #32
 800af24:	e7e5      	b.n	800aef2 <__d2b+0x54>
 800af26:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800af2a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800af2e:	6030      	str	r0, [r6, #0]
 800af30:	6918      	ldr	r0, [r3, #16]
 800af32:	f7ff fdad 	bl	800aa90 <__hi0bits>
 800af36:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800af3a:	e7e1      	b.n	800af00 <__d2b+0x62>

0800af3c <_calloc_r>:
 800af3c:	b538      	push	{r3, r4, r5, lr}
 800af3e:	fb02 f401 	mul.w	r4, r2, r1
 800af42:	4621      	mov	r1, r4
 800af44:	f000 f856 	bl	800aff4 <_malloc_r>
 800af48:	4605      	mov	r5, r0
 800af4a:	b118      	cbz	r0, 800af54 <_calloc_r+0x18>
 800af4c:	4622      	mov	r2, r4
 800af4e:	2100      	movs	r1, #0
 800af50:	f7fe fa37 	bl	80093c2 <memset>
 800af54:	4628      	mov	r0, r5
 800af56:	bd38      	pop	{r3, r4, r5, pc}

0800af58 <_free_r>:
 800af58:	b538      	push	{r3, r4, r5, lr}
 800af5a:	4605      	mov	r5, r0
 800af5c:	2900      	cmp	r1, #0
 800af5e:	d045      	beq.n	800afec <_free_r+0x94>
 800af60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af64:	1f0c      	subs	r4, r1, #4
 800af66:	2b00      	cmp	r3, #0
 800af68:	bfb8      	it	lt
 800af6a:	18e4      	addlt	r4, r4, r3
 800af6c:	f000 fa29 	bl	800b3c2 <__malloc_lock>
 800af70:	4a1f      	ldr	r2, [pc, #124]	; (800aff0 <_free_r+0x98>)
 800af72:	6813      	ldr	r3, [r2, #0]
 800af74:	4610      	mov	r0, r2
 800af76:	b933      	cbnz	r3, 800af86 <_free_r+0x2e>
 800af78:	6063      	str	r3, [r4, #4]
 800af7a:	6014      	str	r4, [r2, #0]
 800af7c:	4628      	mov	r0, r5
 800af7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af82:	f000 ba1f 	b.w	800b3c4 <__malloc_unlock>
 800af86:	42a3      	cmp	r3, r4
 800af88:	d90c      	bls.n	800afa4 <_free_r+0x4c>
 800af8a:	6821      	ldr	r1, [r4, #0]
 800af8c:	1862      	adds	r2, r4, r1
 800af8e:	4293      	cmp	r3, r2
 800af90:	bf04      	itt	eq
 800af92:	681a      	ldreq	r2, [r3, #0]
 800af94:	685b      	ldreq	r3, [r3, #4]
 800af96:	6063      	str	r3, [r4, #4]
 800af98:	bf04      	itt	eq
 800af9a:	1852      	addeq	r2, r2, r1
 800af9c:	6022      	streq	r2, [r4, #0]
 800af9e:	6004      	str	r4, [r0, #0]
 800afa0:	e7ec      	b.n	800af7c <_free_r+0x24>
 800afa2:	4613      	mov	r3, r2
 800afa4:	685a      	ldr	r2, [r3, #4]
 800afa6:	b10a      	cbz	r2, 800afac <_free_r+0x54>
 800afa8:	42a2      	cmp	r2, r4
 800afaa:	d9fa      	bls.n	800afa2 <_free_r+0x4a>
 800afac:	6819      	ldr	r1, [r3, #0]
 800afae:	1858      	adds	r0, r3, r1
 800afb0:	42a0      	cmp	r0, r4
 800afb2:	d10b      	bne.n	800afcc <_free_r+0x74>
 800afb4:	6820      	ldr	r0, [r4, #0]
 800afb6:	4401      	add	r1, r0
 800afb8:	1858      	adds	r0, r3, r1
 800afba:	4282      	cmp	r2, r0
 800afbc:	6019      	str	r1, [r3, #0]
 800afbe:	d1dd      	bne.n	800af7c <_free_r+0x24>
 800afc0:	6810      	ldr	r0, [r2, #0]
 800afc2:	6852      	ldr	r2, [r2, #4]
 800afc4:	605a      	str	r2, [r3, #4]
 800afc6:	4401      	add	r1, r0
 800afc8:	6019      	str	r1, [r3, #0]
 800afca:	e7d7      	b.n	800af7c <_free_r+0x24>
 800afcc:	d902      	bls.n	800afd4 <_free_r+0x7c>
 800afce:	230c      	movs	r3, #12
 800afd0:	602b      	str	r3, [r5, #0]
 800afd2:	e7d3      	b.n	800af7c <_free_r+0x24>
 800afd4:	6820      	ldr	r0, [r4, #0]
 800afd6:	1821      	adds	r1, r4, r0
 800afd8:	428a      	cmp	r2, r1
 800afda:	bf04      	itt	eq
 800afdc:	6811      	ldreq	r1, [r2, #0]
 800afde:	6852      	ldreq	r2, [r2, #4]
 800afe0:	6062      	str	r2, [r4, #4]
 800afe2:	bf04      	itt	eq
 800afe4:	1809      	addeq	r1, r1, r0
 800afe6:	6021      	streq	r1, [r4, #0]
 800afe8:	605c      	str	r4, [r3, #4]
 800afea:	e7c7      	b.n	800af7c <_free_r+0x24>
 800afec:	bd38      	pop	{r3, r4, r5, pc}
 800afee:	bf00      	nop
 800aff0:	20000218 	.word	0x20000218

0800aff4 <_malloc_r>:
 800aff4:	b570      	push	{r4, r5, r6, lr}
 800aff6:	1ccd      	adds	r5, r1, #3
 800aff8:	f025 0503 	bic.w	r5, r5, #3
 800affc:	3508      	adds	r5, #8
 800affe:	2d0c      	cmp	r5, #12
 800b000:	bf38      	it	cc
 800b002:	250c      	movcc	r5, #12
 800b004:	2d00      	cmp	r5, #0
 800b006:	4606      	mov	r6, r0
 800b008:	db01      	blt.n	800b00e <_malloc_r+0x1a>
 800b00a:	42a9      	cmp	r1, r5
 800b00c:	d903      	bls.n	800b016 <_malloc_r+0x22>
 800b00e:	230c      	movs	r3, #12
 800b010:	6033      	str	r3, [r6, #0]
 800b012:	2000      	movs	r0, #0
 800b014:	bd70      	pop	{r4, r5, r6, pc}
 800b016:	f000 f9d4 	bl	800b3c2 <__malloc_lock>
 800b01a:	4a21      	ldr	r2, [pc, #132]	; (800b0a0 <_malloc_r+0xac>)
 800b01c:	6814      	ldr	r4, [r2, #0]
 800b01e:	4621      	mov	r1, r4
 800b020:	b991      	cbnz	r1, 800b048 <_malloc_r+0x54>
 800b022:	4c20      	ldr	r4, [pc, #128]	; (800b0a4 <_malloc_r+0xb0>)
 800b024:	6823      	ldr	r3, [r4, #0]
 800b026:	b91b      	cbnz	r3, 800b030 <_malloc_r+0x3c>
 800b028:	4630      	mov	r0, r6
 800b02a:	f000 f98f 	bl	800b34c <_sbrk_r>
 800b02e:	6020      	str	r0, [r4, #0]
 800b030:	4629      	mov	r1, r5
 800b032:	4630      	mov	r0, r6
 800b034:	f000 f98a 	bl	800b34c <_sbrk_r>
 800b038:	1c43      	adds	r3, r0, #1
 800b03a:	d124      	bne.n	800b086 <_malloc_r+0x92>
 800b03c:	230c      	movs	r3, #12
 800b03e:	6033      	str	r3, [r6, #0]
 800b040:	4630      	mov	r0, r6
 800b042:	f000 f9bf 	bl	800b3c4 <__malloc_unlock>
 800b046:	e7e4      	b.n	800b012 <_malloc_r+0x1e>
 800b048:	680b      	ldr	r3, [r1, #0]
 800b04a:	1b5b      	subs	r3, r3, r5
 800b04c:	d418      	bmi.n	800b080 <_malloc_r+0x8c>
 800b04e:	2b0b      	cmp	r3, #11
 800b050:	d90f      	bls.n	800b072 <_malloc_r+0x7e>
 800b052:	600b      	str	r3, [r1, #0]
 800b054:	50cd      	str	r5, [r1, r3]
 800b056:	18cc      	adds	r4, r1, r3
 800b058:	4630      	mov	r0, r6
 800b05a:	f000 f9b3 	bl	800b3c4 <__malloc_unlock>
 800b05e:	f104 000b 	add.w	r0, r4, #11
 800b062:	1d23      	adds	r3, r4, #4
 800b064:	f020 0007 	bic.w	r0, r0, #7
 800b068:	1ac3      	subs	r3, r0, r3
 800b06a:	d0d3      	beq.n	800b014 <_malloc_r+0x20>
 800b06c:	425a      	negs	r2, r3
 800b06e:	50e2      	str	r2, [r4, r3]
 800b070:	e7d0      	b.n	800b014 <_malloc_r+0x20>
 800b072:	428c      	cmp	r4, r1
 800b074:	684b      	ldr	r3, [r1, #4]
 800b076:	bf16      	itet	ne
 800b078:	6063      	strne	r3, [r4, #4]
 800b07a:	6013      	streq	r3, [r2, #0]
 800b07c:	460c      	movne	r4, r1
 800b07e:	e7eb      	b.n	800b058 <_malloc_r+0x64>
 800b080:	460c      	mov	r4, r1
 800b082:	6849      	ldr	r1, [r1, #4]
 800b084:	e7cc      	b.n	800b020 <_malloc_r+0x2c>
 800b086:	1cc4      	adds	r4, r0, #3
 800b088:	f024 0403 	bic.w	r4, r4, #3
 800b08c:	42a0      	cmp	r0, r4
 800b08e:	d005      	beq.n	800b09c <_malloc_r+0xa8>
 800b090:	1a21      	subs	r1, r4, r0
 800b092:	4630      	mov	r0, r6
 800b094:	f000 f95a 	bl	800b34c <_sbrk_r>
 800b098:	3001      	adds	r0, #1
 800b09a:	d0cf      	beq.n	800b03c <_malloc_r+0x48>
 800b09c:	6025      	str	r5, [r4, #0]
 800b09e:	e7db      	b.n	800b058 <_malloc_r+0x64>
 800b0a0:	20000218 	.word	0x20000218
 800b0a4:	2000021c 	.word	0x2000021c

0800b0a8 <__ssputs_r>:
 800b0a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0ac:	688e      	ldr	r6, [r1, #8]
 800b0ae:	429e      	cmp	r6, r3
 800b0b0:	4682      	mov	sl, r0
 800b0b2:	460c      	mov	r4, r1
 800b0b4:	4690      	mov	r8, r2
 800b0b6:	4699      	mov	r9, r3
 800b0b8:	d837      	bhi.n	800b12a <__ssputs_r+0x82>
 800b0ba:	898a      	ldrh	r2, [r1, #12]
 800b0bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b0c0:	d031      	beq.n	800b126 <__ssputs_r+0x7e>
 800b0c2:	6825      	ldr	r5, [r4, #0]
 800b0c4:	6909      	ldr	r1, [r1, #16]
 800b0c6:	1a6f      	subs	r7, r5, r1
 800b0c8:	6965      	ldr	r5, [r4, #20]
 800b0ca:	2302      	movs	r3, #2
 800b0cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b0d0:	fb95 f5f3 	sdiv	r5, r5, r3
 800b0d4:	f109 0301 	add.w	r3, r9, #1
 800b0d8:	443b      	add	r3, r7
 800b0da:	429d      	cmp	r5, r3
 800b0dc:	bf38      	it	cc
 800b0de:	461d      	movcc	r5, r3
 800b0e0:	0553      	lsls	r3, r2, #21
 800b0e2:	d530      	bpl.n	800b146 <__ssputs_r+0x9e>
 800b0e4:	4629      	mov	r1, r5
 800b0e6:	f7ff ff85 	bl	800aff4 <_malloc_r>
 800b0ea:	4606      	mov	r6, r0
 800b0ec:	b950      	cbnz	r0, 800b104 <__ssputs_r+0x5c>
 800b0ee:	230c      	movs	r3, #12
 800b0f0:	f8ca 3000 	str.w	r3, [sl]
 800b0f4:	89a3      	ldrh	r3, [r4, #12]
 800b0f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0fa:	81a3      	strh	r3, [r4, #12]
 800b0fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b104:	463a      	mov	r2, r7
 800b106:	6921      	ldr	r1, [r4, #16]
 800b108:	f7fe f950 	bl	80093ac <memcpy>
 800b10c:	89a3      	ldrh	r3, [r4, #12]
 800b10e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b112:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b116:	81a3      	strh	r3, [r4, #12]
 800b118:	6126      	str	r6, [r4, #16]
 800b11a:	6165      	str	r5, [r4, #20]
 800b11c:	443e      	add	r6, r7
 800b11e:	1bed      	subs	r5, r5, r7
 800b120:	6026      	str	r6, [r4, #0]
 800b122:	60a5      	str	r5, [r4, #8]
 800b124:	464e      	mov	r6, r9
 800b126:	454e      	cmp	r6, r9
 800b128:	d900      	bls.n	800b12c <__ssputs_r+0x84>
 800b12a:	464e      	mov	r6, r9
 800b12c:	4632      	mov	r2, r6
 800b12e:	4641      	mov	r1, r8
 800b130:	6820      	ldr	r0, [r4, #0]
 800b132:	f000 f92d 	bl	800b390 <memmove>
 800b136:	68a3      	ldr	r3, [r4, #8]
 800b138:	1b9b      	subs	r3, r3, r6
 800b13a:	60a3      	str	r3, [r4, #8]
 800b13c:	6823      	ldr	r3, [r4, #0]
 800b13e:	441e      	add	r6, r3
 800b140:	6026      	str	r6, [r4, #0]
 800b142:	2000      	movs	r0, #0
 800b144:	e7dc      	b.n	800b100 <__ssputs_r+0x58>
 800b146:	462a      	mov	r2, r5
 800b148:	f000 f93d 	bl	800b3c6 <_realloc_r>
 800b14c:	4606      	mov	r6, r0
 800b14e:	2800      	cmp	r0, #0
 800b150:	d1e2      	bne.n	800b118 <__ssputs_r+0x70>
 800b152:	6921      	ldr	r1, [r4, #16]
 800b154:	4650      	mov	r0, sl
 800b156:	f7ff feff 	bl	800af58 <_free_r>
 800b15a:	e7c8      	b.n	800b0ee <__ssputs_r+0x46>

0800b15c <_svfiprintf_r>:
 800b15c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b160:	461d      	mov	r5, r3
 800b162:	898b      	ldrh	r3, [r1, #12]
 800b164:	061f      	lsls	r7, r3, #24
 800b166:	b09d      	sub	sp, #116	; 0x74
 800b168:	4680      	mov	r8, r0
 800b16a:	460c      	mov	r4, r1
 800b16c:	4616      	mov	r6, r2
 800b16e:	d50f      	bpl.n	800b190 <_svfiprintf_r+0x34>
 800b170:	690b      	ldr	r3, [r1, #16]
 800b172:	b96b      	cbnz	r3, 800b190 <_svfiprintf_r+0x34>
 800b174:	2140      	movs	r1, #64	; 0x40
 800b176:	f7ff ff3d 	bl	800aff4 <_malloc_r>
 800b17a:	6020      	str	r0, [r4, #0]
 800b17c:	6120      	str	r0, [r4, #16]
 800b17e:	b928      	cbnz	r0, 800b18c <_svfiprintf_r+0x30>
 800b180:	230c      	movs	r3, #12
 800b182:	f8c8 3000 	str.w	r3, [r8]
 800b186:	f04f 30ff 	mov.w	r0, #4294967295
 800b18a:	e0c8      	b.n	800b31e <_svfiprintf_r+0x1c2>
 800b18c:	2340      	movs	r3, #64	; 0x40
 800b18e:	6163      	str	r3, [r4, #20]
 800b190:	2300      	movs	r3, #0
 800b192:	9309      	str	r3, [sp, #36]	; 0x24
 800b194:	2320      	movs	r3, #32
 800b196:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b19a:	2330      	movs	r3, #48	; 0x30
 800b19c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b1a0:	9503      	str	r5, [sp, #12]
 800b1a2:	f04f 0b01 	mov.w	fp, #1
 800b1a6:	4637      	mov	r7, r6
 800b1a8:	463d      	mov	r5, r7
 800b1aa:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b1ae:	b10b      	cbz	r3, 800b1b4 <_svfiprintf_r+0x58>
 800b1b0:	2b25      	cmp	r3, #37	; 0x25
 800b1b2:	d13e      	bne.n	800b232 <_svfiprintf_r+0xd6>
 800b1b4:	ebb7 0a06 	subs.w	sl, r7, r6
 800b1b8:	d00b      	beq.n	800b1d2 <_svfiprintf_r+0x76>
 800b1ba:	4653      	mov	r3, sl
 800b1bc:	4632      	mov	r2, r6
 800b1be:	4621      	mov	r1, r4
 800b1c0:	4640      	mov	r0, r8
 800b1c2:	f7ff ff71 	bl	800b0a8 <__ssputs_r>
 800b1c6:	3001      	adds	r0, #1
 800b1c8:	f000 80a4 	beq.w	800b314 <_svfiprintf_r+0x1b8>
 800b1cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1ce:	4453      	add	r3, sl
 800b1d0:	9309      	str	r3, [sp, #36]	; 0x24
 800b1d2:	783b      	ldrb	r3, [r7, #0]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	f000 809d 	beq.w	800b314 <_svfiprintf_r+0x1b8>
 800b1da:	2300      	movs	r3, #0
 800b1dc:	f04f 32ff 	mov.w	r2, #4294967295
 800b1e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b1e4:	9304      	str	r3, [sp, #16]
 800b1e6:	9307      	str	r3, [sp, #28]
 800b1e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b1ec:	931a      	str	r3, [sp, #104]	; 0x68
 800b1ee:	462f      	mov	r7, r5
 800b1f0:	2205      	movs	r2, #5
 800b1f2:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b1f6:	4850      	ldr	r0, [pc, #320]	; (800b338 <_svfiprintf_r+0x1dc>)
 800b1f8:	f7f4 ffea 	bl	80001d0 <memchr>
 800b1fc:	9b04      	ldr	r3, [sp, #16]
 800b1fe:	b9d0      	cbnz	r0, 800b236 <_svfiprintf_r+0xda>
 800b200:	06d9      	lsls	r1, r3, #27
 800b202:	bf44      	itt	mi
 800b204:	2220      	movmi	r2, #32
 800b206:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b20a:	071a      	lsls	r2, r3, #28
 800b20c:	bf44      	itt	mi
 800b20e:	222b      	movmi	r2, #43	; 0x2b
 800b210:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b214:	782a      	ldrb	r2, [r5, #0]
 800b216:	2a2a      	cmp	r2, #42	; 0x2a
 800b218:	d015      	beq.n	800b246 <_svfiprintf_r+0xea>
 800b21a:	9a07      	ldr	r2, [sp, #28]
 800b21c:	462f      	mov	r7, r5
 800b21e:	2000      	movs	r0, #0
 800b220:	250a      	movs	r5, #10
 800b222:	4639      	mov	r1, r7
 800b224:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b228:	3b30      	subs	r3, #48	; 0x30
 800b22a:	2b09      	cmp	r3, #9
 800b22c:	d94d      	bls.n	800b2ca <_svfiprintf_r+0x16e>
 800b22e:	b1b8      	cbz	r0, 800b260 <_svfiprintf_r+0x104>
 800b230:	e00f      	b.n	800b252 <_svfiprintf_r+0xf6>
 800b232:	462f      	mov	r7, r5
 800b234:	e7b8      	b.n	800b1a8 <_svfiprintf_r+0x4c>
 800b236:	4a40      	ldr	r2, [pc, #256]	; (800b338 <_svfiprintf_r+0x1dc>)
 800b238:	1a80      	subs	r0, r0, r2
 800b23a:	fa0b f000 	lsl.w	r0, fp, r0
 800b23e:	4318      	orrs	r0, r3
 800b240:	9004      	str	r0, [sp, #16]
 800b242:	463d      	mov	r5, r7
 800b244:	e7d3      	b.n	800b1ee <_svfiprintf_r+0x92>
 800b246:	9a03      	ldr	r2, [sp, #12]
 800b248:	1d11      	adds	r1, r2, #4
 800b24a:	6812      	ldr	r2, [r2, #0]
 800b24c:	9103      	str	r1, [sp, #12]
 800b24e:	2a00      	cmp	r2, #0
 800b250:	db01      	blt.n	800b256 <_svfiprintf_r+0xfa>
 800b252:	9207      	str	r2, [sp, #28]
 800b254:	e004      	b.n	800b260 <_svfiprintf_r+0x104>
 800b256:	4252      	negs	r2, r2
 800b258:	f043 0302 	orr.w	r3, r3, #2
 800b25c:	9207      	str	r2, [sp, #28]
 800b25e:	9304      	str	r3, [sp, #16]
 800b260:	783b      	ldrb	r3, [r7, #0]
 800b262:	2b2e      	cmp	r3, #46	; 0x2e
 800b264:	d10c      	bne.n	800b280 <_svfiprintf_r+0x124>
 800b266:	787b      	ldrb	r3, [r7, #1]
 800b268:	2b2a      	cmp	r3, #42	; 0x2a
 800b26a:	d133      	bne.n	800b2d4 <_svfiprintf_r+0x178>
 800b26c:	9b03      	ldr	r3, [sp, #12]
 800b26e:	1d1a      	adds	r2, r3, #4
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	9203      	str	r2, [sp, #12]
 800b274:	2b00      	cmp	r3, #0
 800b276:	bfb8      	it	lt
 800b278:	f04f 33ff 	movlt.w	r3, #4294967295
 800b27c:	3702      	adds	r7, #2
 800b27e:	9305      	str	r3, [sp, #20]
 800b280:	4d2e      	ldr	r5, [pc, #184]	; (800b33c <_svfiprintf_r+0x1e0>)
 800b282:	7839      	ldrb	r1, [r7, #0]
 800b284:	2203      	movs	r2, #3
 800b286:	4628      	mov	r0, r5
 800b288:	f7f4 ffa2 	bl	80001d0 <memchr>
 800b28c:	b138      	cbz	r0, 800b29e <_svfiprintf_r+0x142>
 800b28e:	2340      	movs	r3, #64	; 0x40
 800b290:	1b40      	subs	r0, r0, r5
 800b292:	fa03 f000 	lsl.w	r0, r3, r0
 800b296:	9b04      	ldr	r3, [sp, #16]
 800b298:	4303      	orrs	r3, r0
 800b29a:	3701      	adds	r7, #1
 800b29c:	9304      	str	r3, [sp, #16]
 800b29e:	7839      	ldrb	r1, [r7, #0]
 800b2a0:	4827      	ldr	r0, [pc, #156]	; (800b340 <_svfiprintf_r+0x1e4>)
 800b2a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b2a6:	2206      	movs	r2, #6
 800b2a8:	1c7e      	adds	r6, r7, #1
 800b2aa:	f7f4 ff91 	bl	80001d0 <memchr>
 800b2ae:	2800      	cmp	r0, #0
 800b2b0:	d038      	beq.n	800b324 <_svfiprintf_r+0x1c8>
 800b2b2:	4b24      	ldr	r3, [pc, #144]	; (800b344 <_svfiprintf_r+0x1e8>)
 800b2b4:	bb13      	cbnz	r3, 800b2fc <_svfiprintf_r+0x1a0>
 800b2b6:	9b03      	ldr	r3, [sp, #12]
 800b2b8:	3307      	adds	r3, #7
 800b2ba:	f023 0307 	bic.w	r3, r3, #7
 800b2be:	3308      	adds	r3, #8
 800b2c0:	9303      	str	r3, [sp, #12]
 800b2c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2c4:	444b      	add	r3, r9
 800b2c6:	9309      	str	r3, [sp, #36]	; 0x24
 800b2c8:	e76d      	b.n	800b1a6 <_svfiprintf_r+0x4a>
 800b2ca:	fb05 3202 	mla	r2, r5, r2, r3
 800b2ce:	2001      	movs	r0, #1
 800b2d0:	460f      	mov	r7, r1
 800b2d2:	e7a6      	b.n	800b222 <_svfiprintf_r+0xc6>
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	3701      	adds	r7, #1
 800b2d8:	9305      	str	r3, [sp, #20]
 800b2da:	4619      	mov	r1, r3
 800b2dc:	250a      	movs	r5, #10
 800b2de:	4638      	mov	r0, r7
 800b2e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b2e4:	3a30      	subs	r2, #48	; 0x30
 800b2e6:	2a09      	cmp	r2, #9
 800b2e8:	d903      	bls.n	800b2f2 <_svfiprintf_r+0x196>
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d0c8      	beq.n	800b280 <_svfiprintf_r+0x124>
 800b2ee:	9105      	str	r1, [sp, #20]
 800b2f0:	e7c6      	b.n	800b280 <_svfiprintf_r+0x124>
 800b2f2:	fb05 2101 	mla	r1, r5, r1, r2
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	4607      	mov	r7, r0
 800b2fa:	e7f0      	b.n	800b2de <_svfiprintf_r+0x182>
 800b2fc:	ab03      	add	r3, sp, #12
 800b2fe:	9300      	str	r3, [sp, #0]
 800b300:	4622      	mov	r2, r4
 800b302:	4b11      	ldr	r3, [pc, #68]	; (800b348 <_svfiprintf_r+0x1ec>)
 800b304:	a904      	add	r1, sp, #16
 800b306:	4640      	mov	r0, r8
 800b308:	f7fe f8f8 	bl	80094fc <_printf_float>
 800b30c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b310:	4681      	mov	r9, r0
 800b312:	d1d6      	bne.n	800b2c2 <_svfiprintf_r+0x166>
 800b314:	89a3      	ldrh	r3, [r4, #12]
 800b316:	065b      	lsls	r3, r3, #25
 800b318:	f53f af35 	bmi.w	800b186 <_svfiprintf_r+0x2a>
 800b31c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b31e:	b01d      	add	sp, #116	; 0x74
 800b320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b324:	ab03      	add	r3, sp, #12
 800b326:	9300      	str	r3, [sp, #0]
 800b328:	4622      	mov	r2, r4
 800b32a:	4b07      	ldr	r3, [pc, #28]	; (800b348 <_svfiprintf_r+0x1ec>)
 800b32c:	a904      	add	r1, sp, #16
 800b32e:	4640      	mov	r0, r8
 800b330:	f7fe fb9a 	bl	8009a68 <_printf_i>
 800b334:	e7ea      	b.n	800b30c <_svfiprintf_r+0x1b0>
 800b336:	bf00      	nop
 800b338:	0800d7ec 	.word	0x0800d7ec
 800b33c:	0800d7f2 	.word	0x0800d7f2
 800b340:	0800d7f6 	.word	0x0800d7f6
 800b344:	080094fd 	.word	0x080094fd
 800b348:	0800b0a9 	.word	0x0800b0a9

0800b34c <_sbrk_r>:
 800b34c:	b538      	push	{r3, r4, r5, lr}
 800b34e:	4c06      	ldr	r4, [pc, #24]	; (800b368 <_sbrk_r+0x1c>)
 800b350:	2300      	movs	r3, #0
 800b352:	4605      	mov	r5, r0
 800b354:	4608      	mov	r0, r1
 800b356:	6023      	str	r3, [r4, #0]
 800b358:	f7f9 fcbe 	bl	8004cd8 <_sbrk>
 800b35c:	1c43      	adds	r3, r0, #1
 800b35e:	d102      	bne.n	800b366 <_sbrk_r+0x1a>
 800b360:	6823      	ldr	r3, [r4, #0]
 800b362:	b103      	cbz	r3, 800b366 <_sbrk_r+0x1a>
 800b364:	602b      	str	r3, [r5, #0]
 800b366:	bd38      	pop	{r3, r4, r5, pc}
 800b368:	20000d6c 	.word	0x20000d6c

0800b36c <__ascii_mbtowc>:
 800b36c:	b082      	sub	sp, #8
 800b36e:	b901      	cbnz	r1, 800b372 <__ascii_mbtowc+0x6>
 800b370:	a901      	add	r1, sp, #4
 800b372:	b142      	cbz	r2, 800b386 <__ascii_mbtowc+0x1a>
 800b374:	b14b      	cbz	r3, 800b38a <__ascii_mbtowc+0x1e>
 800b376:	7813      	ldrb	r3, [r2, #0]
 800b378:	600b      	str	r3, [r1, #0]
 800b37a:	7812      	ldrb	r2, [r2, #0]
 800b37c:	1c10      	adds	r0, r2, #0
 800b37e:	bf18      	it	ne
 800b380:	2001      	movne	r0, #1
 800b382:	b002      	add	sp, #8
 800b384:	4770      	bx	lr
 800b386:	4610      	mov	r0, r2
 800b388:	e7fb      	b.n	800b382 <__ascii_mbtowc+0x16>
 800b38a:	f06f 0001 	mvn.w	r0, #1
 800b38e:	e7f8      	b.n	800b382 <__ascii_mbtowc+0x16>

0800b390 <memmove>:
 800b390:	4288      	cmp	r0, r1
 800b392:	b510      	push	{r4, lr}
 800b394:	eb01 0302 	add.w	r3, r1, r2
 800b398:	d807      	bhi.n	800b3aa <memmove+0x1a>
 800b39a:	1e42      	subs	r2, r0, #1
 800b39c:	4299      	cmp	r1, r3
 800b39e:	d00a      	beq.n	800b3b6 <memmove+0x26>
 800b3a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3a4:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b3a8:	e7f8      	b.n	800b39c <memmove+0xc>
 800b3aa:	4283      	cmp	r3, r0
 800b3ac:	d9f5      	bls.n	800b39a <memmove+0xa>
 800b3ae:	1881      	adds	r1, r0, r2
 800b3b0:	1ad2      	subs	r2, r2, r3
 800b3b2:	42d3      	cmn	r3, r2
 800b3b4:	d100      	bne.n	800b3b8 <memmove+0x28>
 800b3b6:	bd10      	pop	{r4, pc}
 800b3b8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b3bc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b3c0:	e7f7      	b.n	800b3b2 <memmove+0x22>

0800b3c2 <__malloc_lock>:
 800b3c2:	4770      	bx	lr

0800b3c4 <__malloc_unlock>:
 800b3c4:	4770      	bx	lr

0800b3c6 <_realloc_r>:
 800b3c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3c8:	4607      	mov	r7, r0
 800b3ca:	4614      	mov	r4, r2
 800b3cc:	460e      	mov	r6, r1
 800b3ce:	b921      	cbnz	r1, 800b3da <_realloc_r+0x14>
 800b3d0:	4611      	mov	r1, r2
 800b3d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b3d6:	f7ff be0d 	b.w	800aff4 <_malloc_r>
 800b3da:	b922      	cbnz	r2, 800b3e6 <_realloc_r+0x20>
 800b3dc:	f7ff fdbc 	bl	800af58 <_free_r>
 800b3e0:	4625      	mov	r5, r4
 800b3e2:	4628      	mov	r0, r5
 800b3e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3e6:	f000 f821 	bl	800b42c <_malloc_usable_size_r>
 800b3ea:	42a0      	cmp	r0, r4
 800b3ec:	d20f      	bcs.n	800b40e <_realloc_r+0x48>
 800b3ee:	4621      	mov	r1, r4
 800b3f0:	4638      	mov	r0, r7
 800b3f2:	f7ff fdff 	bl	800aff4 <_malloc_r>
 800b3f6:	4605      	mov	r5, r0
 800b3f8:	2800      	cmp	r0, #0
 800b3fa:	d0f2      	beq.n	800b3e2 <_realloc_r+0x1c>
 800b3fc:	4631      	mov	r1, r6
 800b3fe:	4622      	mov	r2, r4
 800b400:	f7fd ffd4 	bl	80093ac <memcpy>
 800b404:	4631      	mov	r1, r6
 800b406:	4638      	mov	r0, r7
 800b408:	f7ff fda6 	bl	800af58 <_free_r>
 800b40c:	e7e9      	b.n	800b3e2 <_realloc_r+0x1c>
 800b40e:	4635      	mov	r5, r6
 800b410:	e7e7      	b.n	800b3e2 <_realloc_r+0x1c>

0800b412 <__ascii_wctomb>:
 800b412:	b149      	cbz	r1, 800b428 <__ascii_wctomb+0x16>
 800b414:	2aff      	cmp	r2, #255	; 0xff
 800b416:	bf85      	ittet	hi
 800b418:	238a      	movhi	r3, #138	; 0x8a
 800b41a:	6003      	strhi	r3, [r0, #0]
 800b41c:	700a      	strbls	r2, [r1, #0]
 800b41e:	f04f 30ff 	movhi.w	r0, #4294967295
 800b422:	bf98      	it	ls
 800b424:	2001      	movls	r0, #1
 800b426:	4770      	bx	lr
 800b428:	4608      	mov	r0, r1
 800b42a:	4770      	bx	lr

0800b42c <_malloc_usable_size_r>:
 800b42c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b430:	1f18      	subs	r0, r3, #4
 800b432:	2b00      	cmp	r3, #0
 800b434:	bfbc      	itt	lt
 800b436:	580b      	ldrlt	r3, [r1, r0]
 800b438:	18c0      	addlt	r0, r0, r3
 800b43a:	4770      	bx	lr
 800b43c:	0000      	movs	r0, r0
	...

0800b440 <cos>:
 800b440:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b442:	ec51 0b10 	vmov	r0, r1, d0
 800b446:	4a1e      	ldr	r2, [pc, #120]	; (800b4c0 <cos+0x80>)
 800b448:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b44c:	4293      	cmp	r3, r2
 800b44e:	dc06      	bgt.n	800b45e <cos+0x1e>
 800b450:	ed9f 1b19 	vldr	d1, [pc, #100]	; 800b4b8 <cos+0x78>
 800b454:	f001 fa00 	bl	800c858 <__kernel_cos>
 800b458:	ec51 0b10 	vmov	r0, r1, d0
 800b45c:	e007      	b.n	800b46e <cos+0x2e>
 800b45e:	4a19      	ldr	r2, [pc, #100]	; (800b4c4 <cos+0x84>)
 800b460:	4293      	cmp	r3, r2
 800b462:	dd09      	ble.n	800b478 <cos+0x38>
 800b464:	ee10 2a10 	vmov	r2, s0
 800b468:	460b      	mov	r3, r1
 800b46a:	f7f4 ff0d 	bl	8000288 <__aeabi_dsub>
 800b46e:	ec41 0b10 	vmov	d0, r0, r1
 800b472:	b005      	add	sp, #20
 800b474:	f85d fb04 	ldr.w	pc, [sp], #4
 800b478:	4668      	mov	r0, sp
 800b47a:	f000 ff49 	bl	800c310 <__ieee754_rem_pio2>
 800b47e:	f000 0003 	and.w	r0, r0, #3
 800b482:	2801      	cmp	r0, #1
 800b484:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b488:	ed9d 0b00 	vldr	d0, [sp]
 800b48c:	d007      	beq.n	800b49e <cos+0x5e>
 800b48e:	2802      	cmp	r0, #2
 800b490:	d00e      	beq.n	800b4b0 <cos+0x70>
 800b492:	2800      	cmp	r0, #0
 800b494:	d0de      	beq.n	800b454 <cos+0x14>
 800b496:	2001      	movs	r0, #1
 800b498:	f001 fde6 	bl	800d068 <__kernel_sin>
 800b49c:	e7dc      	b.n	800b458 <cos+0x18>
 800b49e:	f001 fde3 	bl	800d068 <__kernel_sin>
 800b4a2:	ec53 2b10 	vmov	r2, r3, d0
 800b4a6:	ee10 0a10 	vmov	r0, s0
 800b4aa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b4ae:	e7de      	b.n	800b46e <cos+0x2e>
 800b4b0:	f001 f9d2 	bl	800c858 <__kernel_cos>
 800b4b4:	e7f5      	b.n	800b4a2 <cos+0x62>
 800b4b6:	bf00      	nop
	...
 800b4c0:	3fe921fb 	.word	0x3fe921fb
 800b4c4:	7fefffff 	.word	0x7fefffff

0800b4c8 <sin>:
 800b4c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b4ca:	ec51 0b10 	vmov	r0, r1, d0
 800b4ce:	4a20      	ldr	r2, [pc, #128]	; (800b550 <sin+0x88>)
 800b4d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b4d4:	4293      	cmp	r3, r2
 800b4d6:	dc07      	bgt.n	800b4e8 <sin+0x20>
 800b4d8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800b548 <sin+0x80>
 800b4dc:	2000      	movs	r0, #0
 800b4de:	f001 fdc3 	bl	800d068 <__kernel_sin>
 800b4e2:	ec51 0b10 	vmov	r0, r1, d0
 800b4e6:	e007      	b.n	800b4f8 <sin+0x30>
 800b4e8:	4a1a      	ldr	r2, [pc, #104]	; (800b554 <sin+0x8c>)
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	dd09      	ble.n	800b502 <sin+0x3a>
 800b4ee:	ee10 2a10 	vmov	r2, s0
 800b4f2:	460b      	mov	r3, r1
 800b4f4:	f7f4 fec8 	bl	8000288 <__aeabi_dsub>
 800b4f8:	ec41 0b10 	vmov	d0, r0, r1
 800b4fc:	b005      	add	sp, #20
 800b4fe:	f85d fb04 	ldr.w	pc, [sp], #4
 800b502:	4668      	mov	r0, sp
 800b504:	f000 ff04 	bl	800c310 <__ieee754_rem_pio2>
 800b508:	f000 0003 	and.w	r0, r0, #3
 800b50c:	2801      	cmp	r0, #1
 800b50e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b512:	ed9d 0b00 	vldr	d0, [sp]
 800b516:	d004      	beq.n	800b522 <sin+0x5a>
 800b518:	2802      	cmp	r0, #2
 800b51a:	d005      	beq.n	800b528 <sin+0x60>
 800b51c:	b970      	cbnz	r0, 800b53c <sin+0x74>
 800b51e:	2001      	movs	r0, #1
 800b520:	e7dd      	b.n	800b4de <sin+0x16>
 800b522:	f001 f999 	bl	800c858 <__kernel_cos>
 800b526:	e7dc      	b.n	800b4e2 <sin+0x1a>
 800b528:	2001      	movs	r0, #1
 800b52a:	f001 fd9d 	bl	800d068 <__kernel_sin>
 800b52e:	ec53 2b10 	vmov	r2, r3, d0
 800b532:	ee10 0a10 	vmov	r0, s0
 800b536:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b53a:	e7dd      	b.n	800b4f8 <sin+0x30>
 800b53c:	f001 f98c 	bl	800c858 <__kernel_cos>
 800b540:	e7f5      	b.n	800b52e <sin+0x66>
 800b542:	bf00      	nop
 800b544:	f3af 8000 	nop.w
	...
 800b550:	3fe921fb 	.word	0x3fe921fb
 800b554:	7fefffff 	.word	0x7fefffff

0800b558 <pow>:
 800b558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b55c:	ed2d 8b04 	vpush	{d8-d9}
 800b560:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800b834 <pow+0x2dc>
 800b564:	b08d      	sub	sp, #52	; 0x34
 800b566:	ec57 6b10 	vmov	r6, r7, d0
 800b56a:	ec55 4b11 	vmov	r4, r5, d1
 800b56e:	f000 f9bf 	bl	800b8f0 <__ieee754_pow>
 800b572:	f999 3000 	ldrsb.w	r3, [r9]
 800b576:	9300      	str	r3, [sp, #0]
 800b578:	3301      	adds	r3, #1
 800b57a:	eeb0 8a40 	vmov.f32	s16, s0
 800b57e:	eef0 8a60 	vmov.f32	s17, s1
 800b582:	46c8      	mov	r8, r9
 800b584:	d05f      	beq.n	800b646 <pow+0xee>
 800b586:	4622      	mov	r2, r4
 800b588:	462b      	mov	r3, r5
 800b58a:	4620      	mov	r0, r4
 800b58c:	4629      	mov	r1, r5
 800b58e:	f7f5 facd 	bl	8000b2c <__aeabi_dcmpun>
 800b592:	4683      	mov	fp, r0
 800b594:	2800      	cmp	r0, #0
 800b596:	d156      	bne.n	800b646 <pow+0xee>
 800b598:	4632      	mov	r2, r6
 800b59a:	463b      	mov	r3, r7
 800b59c:	4630      	mov	r0, r6
 800b59e:	4639      	mov	r1, r7
 800b5a0:	f7f5 fac4 	bl	8000b2c <__aeabi_dcmpun>
 800b5a4:	9001      	str	r0, [sp, #4]
 800b5a6:	b1e8      	cbz	r0, 800b5e4 <pow+0x8c>
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	4620      	mov	r0, r4
 800b5ae:	4629      	mov	r1, r5
 800b5b0:	f7f5 fa8a 	bl	8000ac8 <__aeabi_dcmpeq>
 800b5b4:	2800      	cmp	r0, #0
 800b5b6:	d046      	beq.n	800b646 <pow+0xee>
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	9302      	str	r3, [sp, #8]
 800b5bc:	4b96      	ldr	r3, [pc, #600]	; (800b818 <pow+0x2c0>)
 800b5be:	9303      	str	r3, [sp, #12]
 800b5c0:	4b96      	ldr	r3, [pc, #600]	; (800b81c <pow+0x2c4>)
 800b5c2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b5cc:	9b00      	ldr	r3, [sp, #0]
 800b5ce:	2b02      	cmp	r3, #2
 800b5d0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b5d4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b5d8:	d033      	beq.n	800b642 <pow+0xea>
 800b5da:	a802      	add	r0, sp, #8
 800b5dc:	f001 fe94 	bl	800d308 <matherr>
 800b5e0:	bb48      	cbnz	r0, 800b636 <pow+0xde>
 800b5e2:	e05d      	b.n	800b6a0 <pow+0x148>
 800b5e4:	f04f 0a00 	mov.w	sl, #0
 800b5e8:	f04f 0b00 	mov.w	fp, #0
 800b5ec:	4652      	mov	r2, sl
 800b5ee:	465b      	mov	r3, fp
 800b5f0:	4630      	mov	r0, r6
 800b5f2:	4639      	mov	r1, r7
 800b5f4:	f7f5 fa68 	bl	8000ac8 <__aeabi_dcmpeq>
 800b5f8:	ec4b ab19 	vmov	d9, sl, fp
 800b5fc:	2800      	cmp	r0, #0
 800b5fe:	d054      	beq.n	800b6aa <pow+0x152>
 800b600:	4652      	mov	r2, sl
 800b602:	465b      	mov	r3, fp
 800b604:	4620      	mov	r0, r4
 800b606:	4629      	mov	r1, r5
 800b608:	f7f5 fa5e 	bl	8000ac8 <__aeabi_dcmpeq>
 800b60c:	4680      	mov	r8, r0
 800b60e:	b318      	cbz	r0, 800b658 <pow+0x100>
 800b610:	2301      	movs	r3, #1
 800b612:	9302      	str	r3, [sp, #8]
 800b614:	4b80      	ldr	r3, [pc, #512]	; (800b818 <pow+0x2c0>)
 800b616:	9303      	str	r3, [sp, #12]
 800b618:	9b01      	ldr	r3, [sp, #4]
 800b61a:	930a      	str	r3, [sp, #40]	; 0x28
 800b61c:	9b00      	ldr	r3, [sp, #0]
 800b61e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b622:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b626:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d0d5      	beq.n	800b5da <pow+0x82>
 800b62e:	4b7b      	ldr	r3, [pc, #492]	; (800b81c <pow+0x2c4>)
 800b630:	2200      	movs	r2, #0
 800b632:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b638:	b11b      	cbz	r3, 800b642 <pow+0xea>
 800b63a:	f7fd fe8d 	bl	8009358 <__errno>
 800b63e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b640:	6003      	str	r3, [r0, #0]
 800b642:	ed9d 8b08 	vldr	d8, [sp, #32]
 800b646:	eeb0 0a48 	vmov.f32	s0, s16
 800b64a:	eef0 0a68 	vmov.f32	s1, s17
 800b64e:	b00d      	add	sp, #52	; 0x34
 800b650:	ecbd 8b04 	vpop	{d8-d9}
 800b654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b658:	ec45 4b10 	vmov	d0, r4, r5
 800b65c:	f001 fdc7 	bl	800d1ee <finite>
 800b660:	2800      	cmp	r0, #0
 800b662:	d0f0      	beq.n	800b646 <pow+0xee>
 800b664:	4652      	mov	r2, sl
 800b666:	465b      	mov	r3, fp
 800b668:	4620      	mov	r0, r4
 800b66a:	4629      	mov	r1, r5
 800b66c:	f7f5 fa36 	bl	8000adc <__aeabi_dcmplt>
 800b670:	2800      	cmp	r0, #0
 800b672:	d0e8      	beq.n	800b646 <pow+0xee>
 800b674:	2301      	movs	r3, #1
 800b676:	9302      	str	r3, [sp, #8]
 800b678:	4b67      	ldr	r3, [pc, #412]	; (800b818 <pow+0x2c0>)
 800b67a:	9303      	str	r3, [sp, #12]
 800b67c:	f999 3000 	ldrsb.w	r3, [r9]
 800b680:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800b684:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b688:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b68c:	b913      	cbnz	r3, 800b694 <pow+0x13c>
 800b68e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800b692:	e7a2      	b.n	800b5da <pow+0x82>
 800b694:	4962      	ldr	r1, [pc, #392]	; (800b820 <pow+0x2c8>)
 800b696:	2000      	movs	r0, #0
 800b698:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b69c:	2b02      	cmp	r3, #2
 800b69e:	d19c      	bne.n	800b5da <pow+0x82>
 800b6a0:	f7fd fe5a 	bl	8009358 <__errno>
 800b6a4:	2321      	movs	r3, #33	; 0x21
 800b6a6:	6003      	str	r3, [r0, #0]
 800b6a8:	e7c5      	b.n	800b636 <pow+0xde>
 800b6aa:	eeb0 0a48 	vmov.f32	s0, s16
 800b6ae:	eef0 0a68 	vmov.f32	s1, s17
 800b6b2:	f001 fd9c 	bl	800d1ee <finite>
 800b6b6:	9000      	str	r0, [sp, #0]
 800b6b8:	2800      	cmp	r0, #0
 800b6ba:	f040 8081 	bne.w	800b7c0 <pow+0x268>
 800b6be:	ec47 6b10 	vmov	d0, r6, r7
 800b6c2:	f001 fd94 	bl	800d1ee <finite>
 800b6c6:	2800      	cmp	r0, #0
 800b6c8:	d07a      	beq.n	800b7c0 <pow+0x268>
 800b6ca:	ec45 4b10 	vmov	d0, r4, r5
 800b6ce:	f001 fd8e 	bl	800d1ee <finite>
 800b6d2:	2800      	cmp	r0, #0
 800b6d4:	d074      	beq.n	800b7c0 <pow+0x268>
 800b6d6:	ec53 2b18 	vmov	r2, r3, d8
 800b6da:	ee18 0a10 	vmov	r0, s16
 800b6de:	4619      	mov	r1, r3
 800b6e0:	f7f5 fa24 	bl	8000b2c <__aeabi_dcmpun>
 800b6e4:	f999 9000 	ldrsb.w	r9, [r9]
 800b6e8:	4b4b      	ldr	r3, [pc, #300]	; (800b818 <pow+0x2c0>)
 800b6ea:	b1b0      	cbz	r0, 800b71a <pow+0x1c2>
 800b6ec:	2201      	movs	r2, #1
 800b6ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b6f2:	9b00      	ldr	r3, [sp, #0]
 800b6f4:	930a      	str	r3, [sp, #40]	; 0x28
 800b6f6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b6fa:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b6fe:	f1b9 0f00 	cmp.w	r9, #0
 800b702:	d0c4      	beq.n	800b68e <pow+0x136>
 800b704:	4652      	mov	r2, sl
 800b706:	465b      	mov	r3, fp
 800b708:	4650      	mov	r0, sl
 800b70a:	4659      	mov	r1, fp
 800b70c:	f7f5 f89e 	bl	800084c <__aeabi_ddiv>
 800b710:	f1b9 0f02 	cmp.w	r9, #2
 800b714:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b718:	e7c1      	b.n	800b69e <pow+0x146>
 800b71a:	2203      	movs	r2, #3
 800b71c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b720:	900a      	str	r0, [sp, #40]	; 0x28
 800b722:	4629      	mov	r1, r5
 800b724:	4620      	mov	r0, r4
 800b726:	2200      	movs	r2, #0
 800b728:	4b3e      	ldr	r3, [pc, #248]	; (800b824 <pow+0x2cc>)
 800b72a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b72e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b732:	f7f4 ff61 	bl	80005f8 <__aeabi_dmul>
 800b736:	4604      	mov	r4, r0
 800b738:	460d      	mov	r5, r1
 800b73a:	f1b9 0f00 	cmp.w	r9, #0
 800b73e:	d124      	bne.n	800b78a <pow+0x232>
 800b740:	4b39      	ldr	r3, [pc, #228]	; (800b828 <pow+0x2d0>)
 800b742:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b746:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b74a:	4630      	mov	r0, r6
 800b74c:	4652      	mov	r2, sl
 800b74e:	465b      	mov	r3, fp
 800b750:	4639      	mov	r1, r7
 800b752:	f7f5 f9c3 	bl	8000adc <__aeabi_dcmplt>
 800b756:	2800      	cmp	r0, #0
 800b758:	d056      	beq.n	800b808 <pow+0x2b0>
 800b75a:	ec45 4b10 	vmov	d0, r4, r5
 800b75e:	f001 fddf 	bl	800d320 <rint>
 800b762:	4622      	mov	r2, r4
 800b764:	462b      	mov	r3, r5
 800b766:	ec51 0b10 	vmov	r0, r1, d0
 800b76a:	f7f5 f9ad 	bl	8000ac8 <__aeabi_dcmpeq>
 800b76e:	b920      	cbnz	r0, 800b77a <pow+0x222>
 800b770:	4b2e      	ldr	r3, [pc, #184]	; (800b82c <pow+0x2d4>)
 800b772:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b776:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b77a:	f998 3000 	ldrsb.w	r3, [r8]
 800b77e:	2b02      	cmp	r3, #2
 800b780:	d142      	bne.n	800b808 <pow+0x2b0>
 800b782:	f7fd fde9 	bl	8009358 <__errno>
 800b786:	2322      	movs	r3, #34	; 0x22
 800b788:	e78d      	b.n	800b6a6 <pow+0x14e>
 800b78a:	4b29      	ldr	r3, [pc, #164]	; (800b830 <pow+0x2d8>)
 800b78c:	2200      	movs	r2, #0
 800b78e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b792:	4630      	mov	r0, r6
 800b794:	4652      	mov	r2, sl
 800b796:	465b      	mov	r3, fp
 800b798:	4639      	mov	r1, r7
 800b79a:	f7f5 f99f 	bl	8000adc <__aeabi_dcmplt>
 800b79e:	2800      	cmp	r0, #0
 800b7a0:	d0eb      	beq.n	800b77a <pow+0x222>
 800b7a2:	ec45 4b10 	vmov	d0, r4, r5
 800b7a6:	f001 fdbb 	bl	800d320 <rint>
 800b7aa:	4622      	mov	r2, r4
 800b7ac:	462b      	mov	r3, r5
 800b7ae:	ec51 0b10 	vmov	r0, r1, d0
 800b7b2:	f7f5 f989 	bl	8000ac8 <__aeabi_dcmpeq>
 800b7b6:	2800      	cmp	r0, #0
 800b7b8:	d1df      	bne.n	800b77a <pow+0x222>
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	4b18      	ldr	r3, [pc, #96]	; (800b820 <pow+0x2c8>)
 800b7be:	e7da      	b.n	800b776 <pow+0x21e>
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	ec51 0b18 	vmov	r0, r1, d8
 800b7c8:	f7f5 f97e 	bl	8000ac8 <__aeabi_dcmpeq>
 800b7cc:	2800      	cmp	r0, #0
 800b7ce:	f43f af3a 	beq.w	800b646 <pow+0xee>
 800b7d2:	ec47 6b10 	vmov	d0, r6, r7
 800b7d6:	f001 fd0a 	bl	800d1ee <finite>
 800b7da:	2800      	cmp	r0, #0
 800b7dc:	f43f af33 	beq.w	800b646 <pow+0xee>
 800b7e0:	ec45 4b10 	vmov	d0, r4, r5
 800b7e4:	f001 fd03 	bl	800d1ee <finite>
 800b7e8:	2800      	cmp	r0, #0
 800b7ea:	f43f af2c 	beq.w	800b646 <pow+0xee>
 800b7ee:	2304      	movs	r3, #4
 800b7f0:	9302      	str	r3, [sp, #8]
 800b7f2:	4b09      	ldr	r3, [pc, #36]	; (800b818 <pow+0x2c0>)
 800b7f4:	9303      	str	r3, [sp, #12]
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	930a      	str	r3, [sp, #40]	; 0x28
 800b7fa:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b7fe:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b802:	ed8d 9b08 	vstr	d9, [sp, #32]
 800b806:	e7b8      	b.n	800b77a <pow+0x222>
 800b808:	a802      	add	r0, sp, #8
 800b80a:	f001 fd7d 	bl	800d308 <matherr>
 800b80e:	2800      	cmp	r0, #0
 800b810:	f47f af11 	bne.w	800b636 <pow+0xde>
 800b814:	e7b5      	b.n	800b782 <pow+0x22a>
 800b816:	bf00      	nop
 800b818:	0800d908 	.word	0x0800d908
 800b81c:	3ff00000 	.word	0x3ff00000
 800b820:	fff00000 	.word	0xfff00000
 800b824:	3fe00000 	.word	0x3fe00000
 800b828:	47efffff 	.word	0x47efffff
 800b82c:	c7efffff 	.word	0xc7efffff
 800b830:	7ff00000 	.word	0x7ff00000
 800b834:	200001dc 	.word	0x200001dc

0800b838 <sqrt>:
 800b838:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b83c:	ed2d 8b02 	vpush	{d8}
 800b840:	b08b      	sub	sp, #44	; 0x2c
 800b842:	ec55 4b10 	vmov	r4, r5, d0
 800b846:	f000 ff55 	bl	800c6f4 <__ieee754_sqrt>
 800b84a:	4b26      	ldr	r3, [pc, #152]	; (800b8e4 <sqrt+0xac>)
 800b84c:	eeb0 8a40 	vmov.f32	s16, s0
 800b850:	eef0 8a60 	vmov.f32	s17, s1
 800b854:	f993 6000 	ldrsb.w	r6, [r3]
 800b858:	1c73      	adds	r3, r6, #1
 800b85a:	d02a      	beq.n	800b8b2 <sqrt+0x7a>
 800b85c:	4622      	mov	r2, r4
 800b85e:	462b      	mov	r3, r5
 800b860:	4620      	mov	r0, r4
 800b862:	4629      	mov	r1, r5
 800b864:	f7f5 f962 	bl	8000b2c <__aeabi_dcmpun>
 800b868:	4607      	mov	r7, r0
 800b86a:	bb10      	cbnz	r0, 800b8b2 <sqrt+0x7a>
 800b86c:	f04f 0800 	mov.w	r8, #0
 800b870:	f04f 0900 	mov.w	r9, #0
 800b874:	4642      	mov	r2, r8
 800b876:	464b      	mov	r3, r9
 800b878:	4620      	mov	r0, r4
 800b87a:	4629      	mov	r1, r5
 800b87c:	f7f5 f92e 	bl	8000adc <__aeabi_dcmplt>
 800b880:	b1b8      	cbz	r0, 800b8b2 <sqrt+0x7a>
 800b882:	2301      	movs	r3, #1
 800b884:	9300      	str	r3, [sp, #0]
 800b886:	4b18      	ldr	r3, [pc, #96]	; (800b8e8 <sqrt+0xb0>)
 800b888:	9301      	str	r3, [sp, #4]
 800b88a:	9708      	str	r7, [sp, #32]
 800b88c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800b890:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b894:	b9b6      	cbnz	r6, 800b8c4 <sqrt+0x8c>
 800b896:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800b89a:	4668      	mov	r0, sp
 800b89c:	f001 fd34 	bl	800d308 <matherr>
 800b8a0:	b1d0      	cbz	r0, 800b8d8 <sqrt+0xa0>
 800b8a2:	9b08      	ldr	r3, [sp, #32]
 800b8a4:	b11b      	cbz	r3, 800b8ae <sqrt+0x76>
 800b8a6:	f7fd fd57 	bl	8009358 <__errno>
 800b8aa:	9b08      	ldr	r3, [sp, #32]
 800b8ac:	6003      	str	r3, [r0, #0]
 800b8ae:	ed9d 8b06 	vldr	d8, [sp, #24]
 800b8b2:	eeb0 0a48 	vmov.f32	s0, s16
 800b8b6:	eef0 0a68 	vmov.f32	s1, s17
 800b8ba:	b00b      	add	sp, #44	; 0x2c
 800b8bc:	ecbd 8b02 	vpop	{d8}
 800b8c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b8c4:	4642      	mov	r2, r8
 800b8c6:	464b      	mov	r3, r9
 800b8c8:	4640      	mov	r0, r8
 800b8ca:	4649      	mov	r1, r9
 800b8cc:	f7f4 ffbe 	bl	800084c <__aeabi_ddiv>
 800b8d0:	2e02      	cmp	r6, #2
 800b8d2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b8d6:	d1e0      	bne.n	800b89a <sqrt+0x62>
 800b8d8:	f7fd fd3e 	bl	8009358 <__errno>
 800b8dc:	2321      	movs	r3, #33	; 0x21
 800b8de:	6003      	str	r3, [r0, #0]
 800b8e0:	e7df      	b.n	800b8a2 <sqrt+0x6a>
 800b8e2:	bf00      	nop
 800b8e4:	200001dc 	.word	0x200001dc
 800b8e8:	0800d90c 	.word	0x0800d90c
 800b8ec:	00000000 	.word	0x00000000

0800b8f0 <__ieee754_pow>:
 800b8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8f4:	b091      	sub	sp, #68	; 0x44
 800b8f6:	ed8d 1b00 	vstr	d1, [sp]
 800b8fa:	e9dd 2900 	ldrd	r2, r9, [sp]
 800b8fe:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800b902:	ea58 0302 	orrs.w	r3, r8, r2
 800b906:	ec57 6b10 	vmov	r6, r7, d0
 800b90a:	f000 84be 	beq.w	800c28a <__ieee754_pow+0x99a>
 800b90e:	4b7a      	ldr	r3, [pc, #488]	; (800baf8 <__ieee754_pow+0x208>)
 800b910:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800b914:	429c      	cmp	r4, r3
 800b916:	463d      	mov	r5, r7
 800b918:	ee10 aa10 	vmov	sl, s0
 800b91c:	dc09      	bgt.n	800b932 <__ieee754_pow+0x42>
 800b91e:	d103      	bne.n	800b928 <__ieee754_pow+0x38>
 800b920:	b93e      	cbnz	r6, 800b932 <__ieee754_pow+0x42>
 800b922:	45a0      	cmp	r8, r4
 800b924:	dc0d      	bgt.n	800b942 <__ieee754_pow+0x52>
 800b926:	e001      	b.n	800b92c <__ieee754_pow+0x3c>
 800b928:	4598      	cmp	r8, r3
 800b92a:	dc02      	bgt.n	800b932 <__ieee754_pow+0x42>
 800b92c:	4598      	cmp	r8, r3
 800b92e:	d10e      	bne.n	800b94e <__ieee754_pow+0x5e>
 800b930:	b16a      	cbz	r2, 800b94e <__ieee754_pow+0x5e>
 800b932:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b936:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b93a:	ea54 030a 	orrs.w	r3, r4, sl
 800b93e:	f000 84a4 	beq.w	800c28a <__ieee754_pow+0x99a>
 800b942:	486e      	ldr	r0, [pc, #440]	; (800bafc <__ieee754_pow+0x20c>)
 800b944:	b011      	add	sp, #68	; 0x44
 800b946:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b94a:	f001 bce1 	b.w	800d310 <nan>
 800b94e:	2d00      	cmp	r5, #0
 800b950:	da53      	bge.n	800b9fa <__ieee754_pow+0x10a>
 800b952:	4b6b      	ldr	r3, [pc, #428]	; (800bb00 <__ieee754_pow+0x210>)
 800b954:	4598      	cmp	r8, r3
 800b956:	dc4d      	bgt.n	800b9f4 <__ieee754_pow+0x104>
 800b958:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b95c:	4598      	cmp	r8, r3
 800b95e:	dd4c      	ble.n	800b9fa <__ieee754_pow+0x10a>
 800b960:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b964:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b968:	2b14      	cmp	r3, #20
 800b96a:	dd26      	ble.n	800b9ba <__ieee754_pow+0xca>
 800b96c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b970:	fa22 f103 	lsr.w	r1, r2, r3
 800b974:	fa01 f303 	lsl.w	r3, r1, r3
 800b978:	4293      	cmp	r3, r2
 800b97a:	d13e      	bne.n	800b9fa <__ieee754_pow+0x10a>
 800b97c:	f001 0101 	and.w	r1, r1, #1
 800b980:	f1c1 0b02 	rsb	fp, r1, #2
 800b984:	2a00      	cmp	r2, #0
 800b986:	d15b      	bne.n	800ba40 <__ieee754_pow+0x150>
 800b988:	4b5b      	ldr	r3, [pc, #364]	; (800baf8 <__ieee754_pow+0x208>)
 800b98a:	4598      	cmp	r8, r3
 800b98c:	d124      	bne.n	800b9d8 <__ieee754_pow+0xe8>
 800b98e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b992:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b996:	ea53 030a 	orrs.w	r3, r3, sl
 800b99a:	f000 8476 	beq.w	800c28a <__ieee754_pow+0x99a>
 800b99e:	4b59      	ldr	r3, [pc, #356]	; (800bb04 <__ieee754_pow+0x214>)
 800b9a0:	429c      	cmp	r4, r3
 800b9a2:	dd2d      	ble.n	800ba00 <__ieee754_pow+0x110>
 800b9a4:	f1b9 0f00 	cmp.w	r9, #0
 800b9a8:	f280 8473 	bge.w	800c292 <__ieee754_pow+0x9a2>
 800b9ac:	2000      	movs	r0, #0
 800b9ae:	2100      	movs	r1, #0
 800b9b0:	ec41 0b10 	vmov	d0, r0, r1
 800b9b4:	b011      	add	sp, #68	; 0x44
 800b9b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9ba:	2a00      	cmp	r2, #0
 800b9bc:	d13e      	bne.n	800ba3c <__ieee754_pow+0x14c>
 800b9be:	f1c3 0314 	rsb	r3, r3, #20
 800b9c2:	fa48 f103 	asr.w	r1, r8, r3
 800b9c6:	fa01 f303 	lsl.w	r3, r1, r3
 800b9ca:	4543      	cmp	r3, r8
 800b9cc:	f040 8469 	bne.w	800c2a2 <__ieee754_pow+0x9b2>
 800b9d0:	f001 0101 	and.w	r1, r1, #1
 800b9d4:	f1c1 0b02 	rsb	fp, r1, #2
 800b9d8:	4b4b      	ldr	r3, [pc, #300]	; (800bb08 <__ieee754_pow+0x218>)
 800b9da:	4598      	cmp	r8, r3
 800b9dc:	d118      	bne.n	800ba10 <__ieee754_pow+0x120>
 800b9de:	f1b9 0f00 	cmp.w	r9, #0
 800b9e2:	f280 845a 	bge.w	800c29a <__ieee754_pow+0x9aa>
 800b9e6:	4948      	ldr	r1, [pc, #288]	; (800bb08 <__ieee754_pow+0x218>)
 800b9e8:	4632      	mov	r2, r6
 800b9ea:	463b      	mov	r3, r7
 800b9ec:	2000      	movs	r0, #0
 800b9ee:	f7f4 ff2d 	bl	800084c <__aeabi_ddiv>
 800b9f2:	e7dd      	b.n	800b9b0 <__ieee754_pow+0xc0>
 800b9f4:	f04f 0b02 	mov.w	fp, #2
 800b9f8:	e7c4      	b.n	800b984 <__ieee754_pow+0x94>
 800b9fa:	f04f 0b00 	mov.w	fp, #0
 800b9fe:	e7c1      	b.n	800b984 <__ieee754_pow+0x94>
 800ba00:	f1b9 0f00 	cmp.w	r9, #0
 800ba04:	dad2      	bge.n	800b9ac <__ieee754_pow+0xbc>
 800ba06:	e9dd 0300 	ldrd	r0, r3, [sp]
 800ba0a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ba0e:	e7cf      	b.n	800b9b0 <__ieee754_pow+0xc0>
 800ba10:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800ba14:	d106      	bne.n	800ba24 <__ieee754_pow+0x134>
 800ba16:	4632      	mov	r2, r6
 800ba18:	463b      	mov	r3, r7
 800ba1a:	4610      	mov	r0, r2
 800ba1c:	4619      	mov	r1, r3
 800ba1e:	f7f4 fdeb 	bl	80005f8 <__aeabi_dmul>
 800ba22:	e7c5      	b.n	800b9b0 <__ieee754_pow+0xc0>
 800ba24:	4b39      	ldr	r3, [pc, #228]	; (800bb0c <__ieee754_pow+0x21c>)
 800ba26:	4599      	cmp	r9, r3
 800ba28:	d10a      	bne.n	800ba40 <__ieee754_pow+0x150>
 800ba2a:	2d00      	cmp	r5, #0
 800ba2c:	db08      	blt.n	800ba40 <__ieee754_pow+0x150>
 800ba2e:	ec47 6b10 	vmov	d0, r6, r7
 800ba32:	b011      	add	sp, #68	; 0x44
 800ba34:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba38:	f000 be5c 	b.w	800c6f4 <__ieee754_sqrt>
 800ba3c:	f04f 0b00 	mov.w	fp, #0
 800ba40:	ec47 6b10 	vmov	d0, r6, r7
 800ba44:	f001 fbca 	bl	800d1dc <fabs>
 800ba48:	ec51 0b10 	vmov	r0, r1, d0
 800ba4c:	f1ba 0f00 	cmp.w	sl, #0
 800ba50:	d127      	bne.n	800baa2 <__ieee754_pow+0x1b2>
 800ba52:	b124      	cbz	r4, 800ba5e <__ieee754_pow+0x16e>
 800ba54:	4b2c      	ldr	r3, [pc, #176]	; (800bb08 <__ieee754_pow+0x218>)
 800ba56:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800ba5a:	429a      	cmp	r2, r3
 800ba5c:	d121      	bne.n	800baa2 <__ieee754_pow+0x1b2>
 800ba5e:	f1b9 0f00 	cmp.w	r9, #0
 800ba62:	da05      	bge.n	800ba70 <__ieee754_pow+0x180>
 800ba64:	4602      	mov	r2, r0
 800ba66:	460b      	mov	r3, r1
 800ba68:	2000      	movs	r0, #0
 800ba6a:	4927      	ldr	r1, [pc, #156]	; (800bb08 <__ieee754_pow+0x218>)
 800ba6c:	f7f4 feee 	bl	800084c <__aeabi_ddiv>
 800ba70:	2d00      	cmp	r5, #0
 800ba72:	da9d      	bge.n	800b9b0 <__ieee754_pow+0xc0>
 800ba74:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800ba78:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ba7c:	ea54 030b 	orrs.w	r3, r4, fp
 800ba80:	d108      	bne.n	800ba94 <__ieee754_pow+0x1a4>
 800ba82:	4602      	mov	r2, r0
 800ba84:	460b      	mov	r3, r1
 800ba86:	4610      	mov	r0, r2
 800ba88:	4619      	mov	r1, r3
 800ba8a:	f7f4 fbfd 	bl	8000288 <__aeabi_dsub>
 800ba8e:	4602      	mov	r2, r0
 800ba90:	460b      	mov	r3, r1
 800ba92:	e7ac      	b.n	800b9ee <__ieee754_pow+0xfe>
 800ba94:	f1bb 0f01 	cmp.w	fp, #1
 800ba98:	d18a      	bne.n	800b9b0 <__ieee754_pow+0xc0>
 800ba9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ba9e:	4619      	mov	r1, r3
 800baa0:	e786      	b.n	800b9b0 <__ieee754_pow+0xc0>
 800baa2:	0fed      	lsrs	r5, r5, #31
 800baa4:	1e6b      	subs	r3, r5, #1
 800baa6:	930d      	str	r3, [sp, #52]	; 0x34
 800baa8:	ea5b 0303 	orrs.w	r3, fp, r3
 800baac:	d102      	bne.n	800bab4 <__ieee754_pow+0x1c4>
 800baae:	4632      	mov	r2, r6
 800bab0:	463b      	mov	r3, r7
 800bab2:	e7e8      	b.n	800ba86 <__ieee754_pow+0x196>
 800bab4:	4b16      	ldr	r3, [pc, #88]	; (800bb10 <__ieee754_pow+0x220>)
 800bab6:	4598      	cmp	r8, r3
 800bab8:	f340 80fe 	ble.w	800bcb8 <__ieee754_pow+0x3c8>
 800babc:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800bac0:	4598      	cmp	r8, r3
 800bac2:	dd0a      	ble.n	800bada <__ieee754_pow+0x1ea>
 800bac4:	4b0f      	ldr	r3, [pc, #60]	; (800bb04 <__ieee754_pow+0x214>)
 800bac6:	429c      	cmp	r4, r3
 800bac8:	dc0d      	bgt.n	800bae6 <__ieee754_pow+0x1f6>
 800baca:	f1b9 0f00 	cmp.w	r9, #0
 800bace:	f6bf af6d 	bge.w	800b9ac <__ieee754_pow+0xbc>
 800bad2:	a307      	add	r3, pc, #28	; (adr r3, 800baf0 <__ieee754_pow+0x200>)
 800bad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad8:	e79f      	b.n	800ba1a <__ieee754_pow+0x12a>
 800bada:	4b0e      	ldr	r3, [pc, #56]	; (800bb14 <__ieee754_pow+0x224>)
 800badc:	429c      	cmp	r4, r3
 800bade:	ddf4      	ble.n	800baca <__ieee754_pow+0x1da>
 800bae0:	4b09      	ldr	r3, [pc, #36]	; (800bb08 <__ieee754_pow+0x218>)
 800bae2:	429c      	cmp	r4, r3
 800bae4:	dd18      	ble.n	800bb18 <__ieee754_pow+0x228>
 800bae6:	f1b9 0f00 	cmp.w	r9, #0
 800baea:	dcf2      	bgt.n	800bad2 <__ieee754_pow+0x1e2>
 800baec:	e75e      	b.n	800b9ac <__ieee754_pow+0xbc>
 800baee:	bf00      	nop
 800baf0:	8800759c 	.word	0x8800759c
 800baf4:	7e37e43c 	.word	0x7e37e43c
 800baf8:	7ff00000 	.word	0x7ff00000
 800bafc:	0800d7f1 	.word	0x0800d7f1
 800bb00:	433fffff 	.word	0x433fffff
 800bb04:	3fefffff 	.word	0x3fefffff
 800bb08:	3ff00000 	.word	0x3ff00000
 800bb0c:	3fe00000 	.word	0x3fe00000
 800bb10:	41e00000 	.word	0x41e00000
 800bb14:	3feffffe 	.word	0x3feffffe
 800bb18:	2200      	movs	r2, #0
 800bb1a:	4b63      	ldr	r3, [pc, #396]	; (800bca8 <__ieee754_pow+0x3b8>)
 800bb1c:	f7f4 fbb4 	bl	8000288 <__aeabi_dsub>
 800bb20:	a355      	add	r3, pc, #340	; (adr r3, 800bc78 <__ieee754_pow+0x388>)
 800bb22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb26:	4604      	mov	r4, r0
 800bb28:	460d      	mov	r5, r1
 800bb2a:	f7f4 fd65 	bl	80005f8 <__aeabi_dmul>
 800bb2e:	a354      	add	r3, pc, #336	; (adr r3, 800bc80 <__ieee754_pow+0x390>)
 800bb30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb34:	4606      	mov	r6, r0
 800bb36:	460f      	mov	r7, r1
 800bb38:	4620      	mov	r0, r4
 800bb3a:	4629      	mov	r1, r5
 800bb3c:	f7f4 fd5c 	bl	80005f8 <__aeabi_dmul>
 800bb40:	2200      	movs	r2, #0
 800bb42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb46:	4b59      	ldr	r3, [pc, #356]	; (800bcac <__ieee754_pow+0x3bc>)
 800bb48:	4620      	mov	r0, r4
 800bb4a:	4629      	mov	r1, r5
 800bb4c:	f7f4 fd54 	bl	80005f8 <__aeabi_dmul>
 800bb50:	4602      	mov	r2, r0
 800bb52:	460b      	mov	r3, r1
 800bb54:	a14c      	add	r1, pc, #304	; (adr r1, 800bc88 <__ieee754_pow+0x398>)
 800bb56:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb5a:	f7f4 fb95 	bl	8000288 <__aeabi_dsub>
 800bb5e:	4622      	mov	r2, r4
 800bb60:	462b      	mov	r3, r5
 800bb62:	f7f4 fd49 	bl	80005f8 <__aeabi_dmul>
 800bb66:	4602      	mov	r2, r0
 800bb68:	460b      	mov	r3, r1
 800bb6a:	2000      	movs	r0, #0
 800bb6c:	4950      	ldr	r1, [pc, #320]	; (800bcb0 <__ieee754_pow+0x3c0>)
 800bb6e:	f7f4 fb8b 	bl	8000288 <__aeabi_dsub>
 800bb72:	4622      	mov	r2, r4
 800bb74:	462b      	mov	r3, r5
 800bb76:	4680      	mov	r8, r0
 800bb78:	4689      	mov	r9, r1
 800bb7a:	4620      	mov	r0, r4
 800bb7c:	4629      	mov	r1, r5
 800bb7e:	f7f4 fd3b 	bl	80005f8 <__aeabi_dmul>
 800bb82:	4602      	mov	r2, r0
 800bb84:	460b      	mov	r3, r1
 800bb86:	4640      	mov	r0, r8
 800bb88:	4649      	mov	r1, r9
 800bb8a:	f7f4 fd35 	bl	80005f8 <__aeabi_dmul>
 800bb8e:	a340      	add	r3, pc, #256	; (adr r3, 800bc90 <__ieee754_pow+0x3a0>)
 800bb90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb94:	f7f4 fd30 	bl	80005f8 <__aeabi_dmul>
 800bb98:	4602      	mov	r2, r0
 800bb9a:	460b      	mov	r3, r1
 800bb9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bba0:	f7f4 fb72 	bl	8000288 <__aeabi_dsub>
 800bba4:	4602      	mov	r2, r0
 800bba6:	460b      	mov	r3, r1
 800bba8:	4604      	mov	r4, r0
 800bbaa:	460d      	mov	r5, r1
 800bbac:	4630      	mov	r0, r6
 800bbae:	4639      	mov	r1, r7
 800bbb0:	f7f4 fb6c 	bl	800028c <__adddf3>
 800bbb4:	2000      	movs	r0, #0
 800bbb6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bbba:	4632      	mov	r2, r6
 800bbbc:	463b      	mov	r3, r7
 800bbbe:	f7f4 fb63 	bl	8000288 <__aeabi_dsub>
 800bbc2:	4602      	mov	r2, r0
 800bbc4:	460b      	mov	r3, r1
 800bbc6:	4620      	mov	r0, r4
 800bbc8:	4629      	mov	r1, r5
 800bbca:	f7f4 fb5d 	bl	8000288 <__aeabi_dsub>
 800bbce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bbd0:	f10b 33ff 	add.w	r3, fp, #4294967295
 800bbd4:	4313      	orrs	r3, r2
 800bbd6:	4606      	mov	r6, r0
 800bbd8:	460f      	mov	r7, r1
 800bbda:	f040 81eb 	bne.w	800bfb4 <__ieee754_pow+0x6c4>
 800bbde:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800bc98 <__ieee754_pow+0x3a8>
 800bbe2:	e9dd 4500 	ldrd	r4, r5, [sp]
 800bbe6:	2400      	movs	r4, #0
 800bbe8:	4622      	mov	r2, r4
 800bbea:	462b      	mov	r3, r5
 800bbec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bbf0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bbf4:	f7f4 fb48 	bl	8000288 <__aeabi_dsub>
 800bbf8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bbfc:	f7f4 fcfc 	bl	80005f8 <__aeabi_dmul>
 800bc00:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc04:	4680      	mov	r8, r0
 800bc06:	4689      	mov	r9, r1
 800bc08:	4630      	mov	r0, r6
 800bc0a:	4639      	mov	r1, r7
 800bc0c:	f7f4 fcf4 	bl	80005f8 <__aeabi_dmul>
 800bc10:	4602      	mov	r2, r0
 800bc12:	460b      	mov	r3, r1
 800bc14:	4640      	mov	r0, r8
 800bc16:	4649      	mov	r1, r9
 800bc18:	f7f4 fb38 	bl	800028c <__adddf3>
 800bc1c:	4622      	mov	r2, r4
 800bc1e:	462b      	mov	r3, r5
 800bc20:	4680      	mov	r8, r0
 800bc22:	4689      	mov	r9, r1
 800bc24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc28:	f7f4 fce6 	bl	80005f8 <__aeabi_dmul>
 800bc2c:	460b      	mov	r3, r1
 800bc2e:	4604      	mov	r4, r0
 800bc30:	460d      	mov	r5, r1
 800bc32:	4602      	mov	r2, r0
 800bc34:	4649      	mov	r1, r9
 800bc36:	4640      	mov	r0, r8
 800bc38:	e9cd 4500 	strd	r4, r5, [sp]
 800bc3c:	f7f4 fb26 	bl	800028c <__adddf3>
 800bc40:	4b1c      	ldr	r3, [pc, #112]	; (800bcb4 <__ieee754_pow+0x3c4>)
 800bc42:	4299      	cmp	r1, r3
 800bc44:	4606      	mov	r6, r0
 800bc46:	460f      	mov	r7, r1
 800bc48:	468b      	mov	fp, r1
 800bc4a:	f340 82f7 	ble.w	800c23c <__ieee754_pow+0x94c>
 800bc4e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800bc52:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800bc56:	4303      	orrs	r3, r0
 800bc58:	f000 81ea 	beq.w	800c030 <__ieee754_pow+0x740>
 800bc5c:	a310      	add	r3, pc, #64	; (adr r3, 800bca0 <__ieee754_pow+0x3b0>)
 800bc5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc66:	f7f4 fcc7 	bl	80005f8 <__aeabi_dmul>
 800bc6a:	a30d      	add	r3, pc, #52	; (adr r3, 800bca0 <__ieee754_pow+0x3b0>)
 800bc6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc70:	e6d5      	b.n	800ba1e <__ieee754_pow+0x12e>
 800bc72:	bf00      	nop
 800bc74:	f3af 8000 	nop.w
 800bc78:	60000000 	.word	0x60000000
 800bc7c:	3ff71547 	.word	0x3ff71547
 800bc80:	f85ddf44 	.word	0xf85ddf44
 800bc84:	3e54ae0b 	.word	0x3e54ae0b
 800bc88:	55555555 	.word	0x55555555
 800bc8c:	3fd55555 	.word	0x3fd55555
 800bc90:	652b82fe 	.word	0x652b82fe
 800bc94:	3ff71547 	.word	0x3ff71547
 800bc98:	00000000 	.word	0x00000000
 800bc9c:	bff00000 	.word	0xbff00000
 800bca0:	8800759c 	.word	0x8800759c
 800bca4:	7e37e43c 	.word	0x7e37e43c
 800bca8:	3ff00000 	.word	0x3ff00000
 800bcac:	3fd00000 	.word	0x3fd00000
 800bcb0:	3fe00000 	.word	0x3fe00000
 800bcb4:	408fffff 	.word	0x408fffff
 800bcb8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800bcbc:	f04f 0200 	mov.w	r2, #0
 800bcc0:	da05      	bge.n	800bcce <__ieee754_pow+0x3de>
 800bcc2:	4bd3      	ldr	r3, [pc, #844]	; (800c010 <__ieee754_pow+0x720>)
 800bcc4:	f7f4 fc98 	bl	80005f8 <__aeabi_dmul>
 800bcc8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800bccc:	460c      	mov	r4, r1
 800bcce:	1523      	asrs	r3, r4, #20
 800bcd0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bcd4:	4413      	add	r3, r2
 800bcd6:	9309      	str	r3, [sp, #36]	; 0x24
 800bcd8:	4bce      	ldr	r3, [pc, #824]	; (800c014 <__ieee754_pow+0x724>)
 800bcda:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800bcde:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800bce2:	429c      	cmp	r4, r3
 800bce4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bce8:	dd08      	ble.n	800bcfc <__ieee754_pow+0x40c>
 800bcea:	4bcb      	ldr	r3, [pc, #812]	; (800c018 <__ieee754_pow+0x728>)
 800bcec:	429c      	cmp	r4, r3
 800bcee:	f340 815e 	ble.w	800bfae <__ieee754_pow+0x6be>
 800bcf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcf4:	3301      	adds	r3, #1
 800bcf6:	9309      	str	r3, [sp, #36]	; 0x24
 800bcf8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800bcfc:	f04f 0a00 	mov.w	sl, #0
 800bd00:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800bd04:	930c      	str	r3, [sp, #48]	; 0x30
 800bd06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bd08:	4bc4      	ldr	r3, [pc, #784]	; (800c01c <__ieee754_pow+0x72c>)
 800bd0a:	4413      	add	r3, r2
 800bd0c:	ed93 7b00 	vldr	d7, [r3]
 800bd10:	4629      	mov	r1, r5
 800bd12:	ec53 2b17 	vmov	r2, r3, d7
 800bd16:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bd1a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800bd1e:	f7f4 fab3 	bl	8000288 <__aeabi_dsub>
 800bd22:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bd26:	4606      	mov	r6, r0
 800bd28:	460f      	mov	r7, r1
 800bd2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bd2e:	f7f4 faad 	bl	800028c <__adddf3>
 800bd32:	4602      	mov	r2, r0
 800bd34:	460b      	mov	r3, r1
 800bd36:	2000      	movs	r0, #0
 800bd38:	49b9      	ldr	r1, [pc, #740]	; (800c020 <__ieee754_pow+0x730>)
 800bd3a:	f7f4 fd87 	bl	800084c <__aeabi_ddiv>
 800bd3e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800bd42:	4602      	mov	r2, r0
 800bd44:	460b      	mov	r3, r1
 800bd46:	4630      	mov	r0, r6
 800bd48:	4639      	mov	r1, r7
 800bd4a:	f7f4 fc55 	bl	80005f8 <__aeabi_dmul>
 800bd4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bd52:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800bd56:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	9302      	str	r3, [sp, #8]
 800bd5e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bd62:	106d      	asrs	r5, r5, #1
 800bd64:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800bd68:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800bd72:	4640      	mov	r0, r8
 800bd74:	4649      	mov	r1, r9
 800bd76:	4614      	mov	r4, r2
 800bd78:	461d      	mov	r5, r3
 800bd7a:	f7f4 fc3d 	bl	80005f8 <__aeabi_dmul>
 800bd7e:	4602      	mov	r2, r0
 800bd80:	460b      	mov	r3, r1
 800bd82:	4630      	mov	r0, r6
 800bd84:	4639      	mov	r1, r7
 800bd86:	f7f4 fa7f 	bl	8000288 <__aeabi_dsub>
 800bd8a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bd8e:	4606      	mov	r6, r0
 800bd90:	460f      	mov	r7, r1
 800bd92:	4620      	mov	r0, r4
 800bd94:	4629      	mov	r1, r5
 800bd96:	f7f4 fa77 	bl	8000288 <__aeabi_dsub>
 800bd9a:	4602      	mov	r2, r0
 800bd9c:	460b      	mov	r3, r1
 800bd9e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bda2:	f7f4 fa71 	bl	8000288 <__aeabi_dsub>
 800bda6:	4642      	mov	r2, r8
 800bda8:	464b      	mov	r3, r9
 800bdaa:	f7f4 fc25 	bl	80005f8 <__aeabi_dmul>
 800bdae:	4602      	mov	r2, r0
 800bdb0:	460b      	mov	r3, r1
 800bdb2:	4630      	mov	r0, r6
 800bdb4:	4639      	mov	r1, r7
 800bdb6:	f7f4 fa67 	bl	8000288 <__aeabi_dsub>
 800bdba:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800bdbe:	f7f4 fc1b 	bl	80005f8 <__aeabi_dmul>
 800bdc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bdc6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bdca:	4610      	mov	r0, r2
 800bdcc:	4619      	mov	r1, r3
 800bdce:	f7f4 fc13 	bl	80005f8 <__aeabi_dmul>
 800bdd2:	a37b      	add	r3, pc, #492	; (adr r3, 800bfc0 <__ieee754_pow+0x6d0>)
 800bdd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd8:	4604      	mov	r4, r0
 800bdda:	460d      	mov	r5, r1
 800bddc:	f7f4 fc0c 	bl	80005f8 <__aeabi_dmul>
 800bde0:	a379      	add	r3, pc, #484	; (adr r3, 800bfc8 <__ieee754_pow+0x6d8>)
 800bde2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bde6:	f7f4 fa51 	bl	800028c <__adddf3>
 800bdea:	4622      	mov	r2, r4
 800bdec:	462b      	mov	r3, r5
 800bdee:	f7f4 fc03 	bl	80005f8 <__aeabi_dmul>
 800bdf2:	a377      	add	r3, pc, #476	; (adr r3, 800bfd0 <__ieee754_pow+0x6e0>)
 800bdf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf8:	f7f4 fa48 	bl	800028c <__adddf3>
 800bdfc:	4622      	mov	r2, r4
 800bdfe:	462b      	mov	r3, r5
 800be00:	f7f4 fbfa 	bl	80005f8 <__aeabi_dmul>
 800be04:	a374      	add	r3, pc, #464	; (adr r3, 800bfd8 <__ieee754_pow+0x6e8>)
 800be06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be0a:	f7f4 fa3f 	bl	800028c <__adddf3>
 800be0e:	4622      	mov	r2, r4
 800be10:	462b      	mov	r3, r5
 800be12:	f7f4 fbf1 	bl	80005f8 <__aeabi_dmul>
 800be16:	a372      	add	r3, pc, #456	; (adr r3, 800bfe0 <__ieee754_pow+0x6f0>)
 800be18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be1c:	f7f4 fa36 	bl	800028c <__adddf3>
 800be20:	4622      	mov	r2, r4
 800be22:	462b      	mov	r3, r5
 800be24:	f7f4 fbe8 	bl	80005f8 <__aeabi_dmul>
 800be28:	a36f      	add	r3, pc, #444	; (adr r3, 800bfe8 <__ieee754_pow+0x6f8>)
 800be2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be2e:	f7f4 fa2d 	bl	800028c <__adddf3>
 800be32:	4622      	mov	r2, r4
 800be34:	4606      	mov	r6, r0
 800be36:	460f      	mov	r7, r1
 800be38:	462b      	mov	r3, r5
 800be3a:	4620      	mov	r0, r4
 800be3c:	4629      	mov	r1, r5
 800be3e:	f7f4 fbdb 	bl	80005f8 <__aeabi_dmul>
 800be42:	4602      	mov	r2, r0
 800be44:	460b      	mov	r3, r1
 800be46:	4630      	mov	r0, r6
 800be48:	4639      	mov	r1, r7
 800be4a:	f7f4 fbd5 	bl	80005f8 <__aeabi_dmul>
 800be4e:	4642      	mov	r2, r8
 800be50:	4604      	mov	r4, r0
 800be52:	460d      	mov	r5, r1
 800be54:	464b      	mov	r3, r9
 800be56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be5a:	f7f4 fa17 	bl	800028c <__adddf3>
 800be5e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800be62:	f7f4 fbc9 	bl	80005f8 <__aeabi_dmul>
 800be66:	4622      	mov	r2, r4
 800be68:	462b      	mov	r3, r5
 800be6a:	f7f4 fa0f 	bl	800028c <__adddf3>
 800be6e:	4642      	mov	r2, r8
 800be70:	4606      	mov	r6, r0
 800be72:	460f      	mov	r7, r1
 800be74:	464b      	mov	r3, r9
 800be76:	4640      	mov	r0, r8
 800be78:	4649      	mov	r1, r9
 800be7a:	f7f4 fbbd 	bl	80005f8 <__aeabi_dmul>
 800be7e:	2200      	movs	r2, #0
 800be80:	4b68      	ldr	r3, [pc, #416]	; (800c024 <__ieee754_pow+0x734>)
 800be82:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800be86:	f7f4 fa01 	bl	800028c <__adddf3>
 800be8a:	4632      	mov	r2, r6
 800be8c:	463b      	mov	r3, r7
 800be8e:	f7f4 f9fd 	bl	800028c <__adddf3>
 800be92:	9802      	ldr	r0, [sp, #8]
 800be94:	460d      	mov	r5, r1
 800be96:	4604      	mov	r4, r0
 800be98:	4602      	mov	r2, r0
 800be9a:	460b      	mov	r3, r1
 800be9c:	4640      	mov	r0, r8
 800be9e:	4649      	mov	r1, r9
 800bea0:	f7f4 fbaa 	bl	80005f8 <__aeabi_dmul>
 800bea4:	2200      	movs	r2, #0
 800bea6:	4680      	mov	r8, r0
 800bea8:	4689      	mov	r9, r1
 800beaa:	4b5e      	ldr	r3, [pc, #376]	; (800c024 <__ieee754_pow+0x734>)
 800beac:	4620      	mov	r0, r4
 800beae:	4629      	mov	r1, r5
 800beb0:	f7f4 f9ea 	bl	8000288 <__aeabi_dsub>
 800beb4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800beb8:	f7f4 f9e6 	bl	8000288 <__aeabi_dsub>
 800bebc:	4602      	mov	r2, r0
 800bebe:	460b      	mov	r3, r1
 800bec0:	4630      	mov	r0, r6
 800bec2:	4639      	mov	r1, r7
 800bec4:	f7f4 f9e0 	bl	8000288 <__aeabi_dsub>
 800bec8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800becc:	f7f4 fb94 	bl	80005f8 <__aeabi_dmul>
 800bed0:	4622      	mov	r2, r4
 800bed2:	4606      	mov	r6, r0
 800bed4:	460f      	mov	r7, r1
 800bed6:	462b      	mov	r3, r5
 800bed8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bedc:	f7f4 fb8c 	bl	80005f8 <__aeabi_dmul>
 800bee0:	4602      	mov	r2, r0
 800bee2:	460b      	mov	r3, r1
 800bee4:	4630      	mov	r0, r6
 800bee6:	4639      	mov	r1, r7
 800bee8:	f7f4 f9d0 	bl	800028c <__adddf3>
 800beec:	4606      	mov	r6, r0
 800beee:	460f      	mov	r7, r1
 800bef0:	4602      	mov	r2, r0
 800bef2:	460b      	mov	r3, r1
 800bef4:	4640      	mov	r0, r8
 800bef6:	4649      	mov	r1, r9
 800bef8:	f7f4 f9c8 	bl	800028c <__adddf3>
 800befc:	9802      	ldr	r0, [sp, #8]
 800befe:	a33c      	add	r3, pc, #240	; (adr r3, 800bff0 <__ieee754_pow+0x700>)
 800bf00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf04:	4604      	mov	r4, r0
 800bf06:	460d      	mov	r5, r1
 800bf08:	f7f4 fb76 	bl	80005f8 <__aeabi_dmul>
 800bf0c:	4642      	mov	r2, r8
 800bf0e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bf12:	464b      	mov	r3, r9
 800bf14:	4620      	mov	r0, r4
 800bf16:	4629      	mov	r1, r5
 800bf18:	f7f4 f9b6 	bl	8000288 <__aeabi_dsub>
 800bf1c:	4602      	mov	r2, r0
 800bf1e:	460b      	mov	r3, r1
 800bf20:	4630      	mov	r0, r6
 800bf22:	4639      	mov	r1, r7
 800bf24:	f7f4 f9b0 	bl	8000288 <__aeabi_dsub>
 800bf28:	a333      	add	r3, pc, #204	; (adr r3, 800bff8 <__ieee754_pow+0x708>)
 800bf2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf2e:	f7f4 fb63 	bl	80005f8 <__aeabi_dmul>
 800bf32:	a333      	add	r3, pc, #204	; (adr r3, 800c000 <__ieee754_pow+0x710>)
 800bf34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf38:	4606      	mov	r6, r0
 800bf3a:	460f      	mov	r7, r1
 800bf3c:	4620      	mov	r0, r4
 800bf3e:	4629      	mov	r1, r5
 800bf40:	f7f4 fb5a 	bl	80005f8 <__aeabi_dmul>
 800bf44:	4602      	mov	r2, r0
 800bf46:	460b      	mov	r3, r1
 800bf48:	4630      	mov	r0, r6
 800bf4a:	4639      	mov	r1, r7
 800bf4c:	f7f4 f99e 	bl	800028c <__adddf3>
 800bf50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bf52:	4b35      	ldr	r3, [pc, #212]	; (800c028 <__ieee754_pow+0x738>)
 800bf54:	4413      	add	r3, r2
 800bf56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf5a:	f7f4 f997 	bl	800028c <__adddf3>
 800bf5e:	4604      	mov	r4, r0
 800bf60:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf62:	460d      	mov	r5, r1
 800bf64:	f7f4 fade 	bl	8000524 <__aeabi_i2d>
 800bf68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bf6a:	4b30      	ldr	r3, [pc, #192]	; (800c02c <__ieee754_pow+0x73c>)
 800bf6c:	4413      	add	r3, r2
 800bf6e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bf72:	4606      	mov	r6, r0
 800bf74:	460f      	mov	r7, r1
 800bf76:	4622      	mov	r2, r4
 800bf78:	462b      	mov	r3, r5
 800bf7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bf7e:	f7f4 f985 	bl	800028c <__adddf3>
 800bf82:	4642      	mov	r2, r8
 800bf84:	464b      	mov	r3, r9
 800bf86:	f7f4 f981 	bl	800028c <__adddf3>
 800bf8a:	4632      	mov	r2, r6
 800bf8c:	463b      	mov	r3, r7
 800bf8e:	f7f4 f97d 	bl	800028c <__adddf3>
 800bf92:	9802      	ldr	r0, [sp, #8]
 800bf94:	4632      	mov	r2, r6
 800bf96:	463b      	mov	r3, r7
 800bf98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bf9c:	f7f4 f974 	bl	8000288 <__aeabi_dsub>
 800bfa0:	4642      	mov	r2, r8
 800bfa2:	464b      	mov	r3, r9
 800bfa4:	f7f4 f970 	bl	8000288 <__aeabi_dsub>
 800bfa8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bfac:	e607      	b.n	800bbbe <__ieee754_pow+0x2ce>
 800bfae:	f04f 0a01 	mov.w	sl, #1
 800bfb2:	e6a5      	b.n	800bd00 <__ieee754_pow+0x410>
 800bfb4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800c008 <__ieee754_pow+0x718>
 800bfb8:	e613      	b.n	800bbe2 <__ieee754_pow+0x2f2>
 800bfba:	bf00      	nop
 800bfbc:	f3af 8000 	nop.w
 800bfc0:	4a454eef 	.word	0x4a454eef
 800bfc4:	3fca7e28 	.word	0x3fca7e28
 800bfc8:	93c9db65 	.word	0x93c9db65
 800bfcc:	3fcd864a 	.word	0x3fcd864a
 800bfd0:	a91d4101 	.word	0xa91d4101
 800bfd4:	3fd17460 	.word	0x3fd17460
 800bfd8:	518f264d 	.word	0x518f264d
 800bfdc:	3fd55555 	.word	0x3fd55555
 800bfe0:	db6fabff 	.word	0xdb6fabff
 800bfe4:	3fdb6db6 	.word	0x3fdb6db6
 800bfe8:	33333303 	.word	0x33333303
 800bfec:	3fe33333 	.word	0x3fe33333
 800bff0:	e0000000 	.word	0xe0000000
 800bff4:	3feec709 	.word	0x3feec709
 800bff8:	dc3a03fd 	.word	0xdc3a03fd
 800bffc:	3feec709 	.word	0x3feec709
 800c000:	145b01f5 	.word	0x145b01f5
 800c004:	be3e2fe0 	.word	0xbe3e2fe0
 800c008:	00000000 	.word	0x00000000
 800c00c:	3ff00000 	.word	0x3ff00000
 800c010:	43400000 	.word	0x43400000
 800c014:	0003988e 	.word	0x0003988e
 800c018:	000bb679 	.word	0x000bb679
 800c01c:	0800d918 	.word	0x0800d918
 800c020:	3ff00000 	.word	0x3ff00000
 800c024:	40080000 	.word	0x40080000
 800c028:	0800d938 	.word	0x0800d938
 800c02c:	0800d928 	.word	0x0800d928
 800c030:	a3b4      	add	r3, pc, #720	; (adr r3, 800c304 <__ieee754_pow+0xa14>)
 800c032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c036:	4640      	mov	r0, r8
 800c038:	4649      	mov	r1, r9
 800c03a:	f7f4 f927 	bl	800028c <__adddf3>
 800c03e:	4622      	mov	r2, r4
 800c040:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c044:	462b      	mov	r3, r5
 800c046:	4630      	mov	r0, r6
 800c048:	4639      	mov	r1, r7
 800c04a:	f7f4 f91d 	bl	8000288 <__aeabi_dsub>
 800c04e:	4602      	mov	r2, r0
 800c050:	460b      	mov	r3, r1
 800c052:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c056:	f7f4 fd5f 	bl	8000b18 <__aeabi_dcmpgt>
 800c05a:	2800      	cmp	r0, #0
 800c05c:	f47f adfe 	bne.w	800bc5c <__ieee754_pow+0x36c>
 800c060:	4aa3      	ldr	r2, [pc, #652]	; (800c2f0 <__ieee754_pow+0xa00>)
 800c062:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c066:	4293      	cmp	r3, r2
 800c068:	f340 810a 	ble.w	800c280 <__ieee754_pow+0x990>
 800c06c:	151b      	asrs	r3, r3, #20
 800c06e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c072:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c076:	fa4a f303 	asr.w	r3, sl, r3
 800c07a:	445b      	add	r3, fp
 800c07c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c080:	4e9c      	ldr	r6, [pc, #624]	; (800c2f4 <__ieee754_pow+0xa04>)
 800c082:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c086:	4116      	asrs	r6, r2
 800c088:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c08c:	2000      	movs	r0, #0
 800c08e:	ea23 0106 	bic.w	r1, r3, r6
 800c092:	f1c2 0214 	rsb	r2, r2, #20
 800c096:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c09a:	fa4a fa02 	asr.w	sl, sl, r2
 800c09e:	f1bb 0f00 	cmp.w	fp, #0
 800c0a2:	4602      	mov	r2, r0
 800c0a4:	460b      	mov	r3, r1
 800c0a6:	4620      	mov	r0, r4
 800c0a8:	4629      	mov	r1, r5
 800c0aa:	bfb8      	it	lt
 800c0ac:	f1ca 0a00 	rsblt	sl, sl, #0
 800c0b0:	f7f4 f8ea 	bl	8000288 <__aeabi_dsub>
 800c0b4:	e9cd 0100 	strd	r0, r1, [sp]
 800c0b8:	4642      	mov	r2, r8
 800c0ba:	464b      	mov	r3, r9
 800c0bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c0c0:	f7f4 f8e4 	bl	800028c <__adddf3>
 800c0c4:	2000      	movs	r0, #0
 800c0c6:	a378      	add	r3, pc, #480	; (adr r3, 800c2a8 <__ieee754_pow+0x9b8>)
 800c0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0cc:	4604      	mov	r4, r0
 800c0ce:	460d      	mov	r5, r1
 800c0d0:	f7f4 fa92 	bl	80005f8 <__aeabi_dmul>
 800c0d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c0d8:	4606      	mov	r6, r0
 800c0da:	460f      	mov	r7, r1
 800c0dc:	4620      	mov	r0, r4
 800c0de:	4629      	mov	r1, r5
 800c0e0:	f7f4 f8d2 	bl	8000288 <__aeabi_dsub>
 800c0e4:	4602      	mov	r2, r0
 800c0e6:	460b      	mov	r3, r1
 800c0e8:	4640      	mov	r0, r8
 800c0ea:	4649      	mov	r1, r9
 800c0ec:	f7f4 f8cc 	bl	8000288 <__aeabi_dsub>
 800c0f0:	a36f      	add	r3, pc, #444	; (adr r3, 800c2b0 <__ieee754_pow+0x9c0>)
 800c0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f6:	f7f4 fa7f 	bl	80005f8 <__aeabi_dmul>
 800c0fa:	a36f      	add	r3, pc, #444	; (adr r3, 800c2b8 <__ieee754_pow+0x9c8>)
 800c0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c100:	4680      	mov	r8, r0
 800c102:	4689      	mov	r9, r1
 800c104:	4620      	mov	r0, r4
 800c106:	4629      	mov	r1, r5
 800c108:	f7f4 fa76 	bl	80005f8 <__aeabi_dmul>
 800c10c:	4602      	mov	r2, r0
 800c10e:	460b      	mov	r3, r1
 800c110:	4640      	mov	r0, r8
 800c112:	4649      	mov	r1, r9
 800c114:	f7f4 f8ba 	bl	800028c <__adddf3>
 800c118:	4604      	mov	r4, r0
 800c11a:	460d      	mov	r5, r1
 800c11c:	4602      	mov	r2, r0
 800c11e:	460b      	mov	r3, r1
 800c120:	4630      	mov	r0, r6
 800c122:	4639      	mov	r1, r7
 800c124:	f7f4 f8b2 	bl	800028c <__adddf3>
 800c128:	4632      	mov	r2, r6
 800c12a:	463b      	mov	r3, r7
 800c12c:	4680      	mov	r8, r0
 800c12e:	4689      	mov	r9, r1
 800c130:	f7f4 f8aa 	bl	8000288 <__aeabi_dsub>
 800c134:	4602      	mov	r2, r0
 800c136:	460b      	mov	r3, r1
 800c138:	4620      	mov	r0, r4
 800c13a:	4629      	mov	r1, r5
 800c13c:	f7f4 f8a4 	bl	8000288 <__aeabi_dsub>
 800c140:	4642      	mov	r2, r8
 800c142:	4606      	mov	r6, r0
 800c144:	460f      	mov	r7, r1
 800c146:	464b      	mov	r3, r9
 800c148:	4640      	mov	r0, r8
 800c14a:	4649      	mov	r1, r9
 800c14c:	f7f4 fa54 	bl	80005f8 <__aeabi_dmul>
 800c150:	a35b      	add	r3, pc, #364	; (adr r3, 800c2c0 <__ieee754_pow+0x9d0>)
 800c152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c156:	4604      	mov	r4, r0
 800c158:	460d      	mov	r5, r1
 800c15a:	f7f4 fa4d 	bl	80005f8 <__aeabi_dmul>
 800c15e:	a35a      	add	r3, pc, #360	; (adr r3, 800c2c8 <__ieee754_pow+0x9d8>)
 800c160:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c164:	f7f4 f890 	bl	8000288 <__aeabi_dsub>
 800c168:	4622      	mov	r2, r4
 800c16a:	462b      	mov	r3, r5
 800c16c:	f7f4 fa44 	bl	80005f8 <__aeabi_dmul>
 800c170:	a357      	add	r3, pc, #348	; (adr r3, 800c2d0 <__ieee754_pow+0x9e0>)
 800c172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c176:	f7f4 f889 	bl	800028c <__adddf3>
 800c17a:	4622      	mov	r2, r4
 800c17c:	462b      	mov	r3, r5
 800c17e:	f7f4 fa3b 	bl	80005f8 <__aeabi_dmul>
 800c182:	a355      	add	r3, pc, #340	; (adr r3, 800c2d8 <__ieee754_pow+0x9e8>)
 800c184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c188:	f7f4 f87e 	bl	8000288 <__aeabi_dsub>
 800c18c:	4622      	mov	r2, r4
 800c18e:	462b      	mov	r3, r5
 800c190:	f7f4 fa32 	bl	80005f8 <__aeabi_dmul>
 800c194:	a352      	add	r3, pc, #328	; (adr r3, 800c2e0 <__ieee754_pow+0x9f0>)
 800c196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c19a:	f7f4 f877 	bl	800028c <__adddf3>
 800c19e:	4622      	mov	r2, r4
 800c1a0:	462b      	mov	r3, r5
 800c1a2:	f7f4 fa29 	bl	80005f8 <__aeabi_dmul>
 800c1a6:	4602      	mov	r2, r0
 800c1a8:	460b      	mov	r3, r1
 800c1aa:	4640      	mov	r0, r8
 800c1ac:	4649      	mov	r1, r9
 800c1ae:	f7f4 f86b 	bl	8000288 <__aeabi_dsub>
 800c1b2:	4604      	mov	r4, r0
 800c1b4:	460d      	mov	r5, r1
 800c1b6:	4602      	mov	r2, r0
 800c1b8:	460b      	mov	r3, r1
 800c1ba:	4640      	mov	r0, r8
 800c1bc:	4649      	mov	r1, r9
 800c1be:	f7f4 fa1b 	bl	80005f8 <__aeabi_dmul>
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	e9cd 0100 	strd	r0, r1, [sp]
 800c1c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c1cc:	4620      	mov	r0, r4
 800c1ce:	4629      	mov	r1, r5
 800c1d0:	f7f4 f85a 	bl	8000288 <__aeabi_dsub>
 800c1d4:	4602      	mov	r2, r0
 800c1d6:	460b      	mov	r3, r1
 800c1d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c1dc:	f7f4 fb36 	bl	800084c <__aeabi_ddiv>
 800c1e0:	4632      	mov	r2, r6
 800c1e2:	4604      	mov	r4, r0
 800c1e4:	460d      	mov	r5, r1
 800c1e6:	463b      	mov	r3, r7
 800c1e8:	4640      	mov	r0, r8
 800c1ea:	4649      	mov	r1, r9
 800c1ec:	f7f4 fa04 	bl	80005f8 <__aeabi_dmul>
 800c1f0:	4632      	mov	r2, r6
 800c1f2:	463b      	mov	r3, r7
 800c1f4:	f7f4 f84a 	bl	800028c <__adddf3>
 800c1f8:	4602      	mov	r2, r0
 800c1fa:	460b      	mov	r3, r1
 800c1fc:	4620      	mov	r0, r4
 800c1fe:	4629      	mov	r1, r5
 800c200:	f7f4 f842 	bl	8000288 <__aeabi_dsub>
 800c204:	4642      	mov	r2, r8
 800c206:	464b      	mov	r3, r9
 800c208:	f7f4 f83e 	bl	8000288 <__aeabi_dsub>
 800c20c:	4602      	mov	r2, r0
 800c20e:	460b      	mov	r3, r1
 800c210:	2000      	movs	r0, #0
 800c212:	4939      	ldr	r1, [pc, #228]	; (800c2f8 <__ieee754_pow+0xa08>)
 800c214:	f7f4 f838 	bl	8000288 <__aeabi_dsub>
 800c218:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800c21c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800c220:	4602      	mov	r2, r0
 800c222:	460b      	mov	r3, r1
 800c224:	da2f      	bge.n	800c286 <__ieee754_pow+0x996>
 800c226:	4650      	mov	r0, sl
 800c228:	ec43 2b10 	vmov	d0, r2, r3
 800c22c:	f001 f8fc 	bl	800d428 <scalbn>
 800c230:	ec51 0b10 	vmov	r0, r1, d0
 800c234:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c238:	f7ff bbf1 	b.w	800ba1e <__ieee754_pow+0x12e>
 800c23c:	4b2f      	ldr	r3, [pc, #188]	; (800c2fc <__ieee754_pow+0xa0c>)
 800c23e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c242:	429e      	cmp	r6, r3
 800c244:	f77f af0c 	ble.w	800c060 <__ieee754_pow+0x770>
 800c248:	4b2d      	ldr	r3, [pc, #180]	; (800c300 <__ieee754_pow+0xa10>)
 800c24a:	440b      	add	r3, r1
 800c24c:	4303      	orrs	r3, r0
 800c24e:	d00b      	beq.n	800c268 <__ieee754_pow+0x978>
 800c250:	a325      	add	r3, pc, #148	; (adr r3, 800c2e8 <__ieee754_pow+0x9f8>)
 800c252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c256:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c25a:	f7f4 f9cd 	bl	80005f8 <__aeabi_dmul>
 800c25e:	a322      	add	r3, pc, #136	; (adr r3, 800c2e8 <__ieee754_pow+0x9f8>)
 800c260:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c264:	f7ff bbdb 	b.w	800ba1e <__ieee754_pow+0x12e>
 800c268:	4622      	mov	r2, r4
 800c26a:	462b      	mov	r3, r5
 800c26c:	f7f4 f80c 	bl	8000288 <__aeabi_dsub>
 800c270:	4642      	mov	r2, r8
 800c272:	464b      	mov	r3, r9
 800c274:	f7f4 fc46 	bl	8000b04 <__aeabi_dcmpge>
 800c278:	2800      	cmp	r0, #0
 800c27a:	f43f aef1 	beq.w	800c060 <__ieee754_pow+0x770>
 800c27e:	e7e7      	b.n	800c250 <__ieee754_pow+0x960>
 800c280:	f04f 0a00 	mov.w	sl, #0
 800c284:	e718      	b.n	800c0b8 <__ieee754_pow+0x7c8>
 800c286:	4621      	mov	r1, r4
 800c288:	e7d4      	b.n	800c234 <__ieee754_pow+0x944>
 800c28a:	2000      	movs	r0, #0
 800c28c:	491a      	ldr	r1, [pc, #104]	; (800c2f8 <__ieee754_pow+0xa08>)
 800c28e:	f7ff bb8f 	b.w	800b9b0 <__ieee754_pow+0xc0>
 800c292:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c296:	f7ff bb8b 	b.w	800b9b0 <__ieee754_pow+0xc0>
 800c29a:	4630      	mov	r0, r6
 800c29c:	4639      	mov	r1, r7
 800c29e:	f7ff bb87 	b.w	800b9b0 <__ieee754_pow+0xc0>
 800c2a2:	4693      	mov	fp, r2
 800c2a4:	f7ff bb98 	b.w	800b9d8 <__ieee754_pow+0xe8>
 800c2a8:	00000000 	.word	0x00000000
 800c2ac:	3fe62e43 	.word	0x3fe62e43
 800c2b0:	fefa39ef 	.word	0xfefa39ef
 800c2b4:	3fe62e42 	.word	0x3fe62e42
 800c2b8:	0ca86c39 	.word	0x0ca86c39
 800c2bc:	be205c61 	.word	0xbe205c61
 800c2c0:	72bea4d0 	.word	0x72bea4d0
 800c2c4:	3e663769 	.word	0x3e663769
 800c2c8:	c5d26bf1 	.word	0xc5d26bf1
 800c2cc:	3ebbbd41 	.word	0x3ebbbd41
 800c2d0:	af25de2c 	.word	0xaf25de2c
 800c2d4:	3f11566a 	.word	0x3f11566a
 800c2d8:	16bebd93 	.word	0x16bebd93
 800c2dc:	3f66c16c 	.word	0x3f66c16c
 800c2e0:	5555553e 	.word	0x5555553e
 800c2e4:	3fc55555 	.word	0x3fc55555
 800c2e8:	c2f8f359 	.word	0xc2f8f359
 800c2ec:	01a56e1f 	.word	0x01a56e1f
 800c2f0:	3fe00000 	.word	0x3fe00000
 800c2f4:	000fffff 	.word	0x000fffff
 800c2f8:	3ff00000 	.word	0x3ff00000
 800c2fc:	4090cbff 	.word	0x4090cbff
 800c300:	3f6f3400 	.word	0x3f6f3400
 800c304:	652b82fe 	.word	0x652b82fe
 800c308:	3c971547 	.word	0x3c971547
 800c30c:	00000000 	.word	0x00000000

0800c310 <__ieee754_rem_pio2>:
 800c310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c314:	ec57 6b10 	vmov	r6, r7, d0
 800c318:	4bc3      	ldr	r3, [pc, #780]	; (800c628 <__ieee754_rem_pio2+0x318>)
 800c31a:	b08d      	sub	sp, #52	; 0x34
 800c31c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800c320:	4598      	cmp	r8, r3
 800c322:	4604      	mov	r4, r0
 800c324:	9704      	str	r7, [sp, #16]
 800c326:	dc07      	bgt.n	800c338 <__ieee754_rem_pio2+0x28>
 800c328:	2200      	movs	r2, #0
 800c32a:	2300      	movs	r3, #0
 800c32c:	ed84 0b00 	vstr	d0, [r4]
 800c330:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c334:	2500      	movs	r5, #0
 800c336:	e027      	b.n	800c388 <__ieee754_rem_pio2+0x78>
 800c338:	4bbc      	ldr	r3, [pc, #752]	; (800c62c <__ieee754_rem_pio2+0x31c>)
 800c33a:	4598      	cmp	r8, r3
 800c33c:	dc75      	bgt.n	800c42a <__ieee754_rem_pio2+0x11a>
 800c33e:	9b04      	ldr	r3, [sp, #16]
 800c340:	4dbb      	ldr	r5, [pc, #748]	; (800c630 <__ieee754_rem_pio2+0x320>)
 800c342:	2b00      	cmp	r3, #0
 800c344:	ee10 0a10 	vmov	r0, s0
 800c348:	a3a9      	add	r3, pc, #676	; (adr r3, 800c5f0 <__ieee754_rem_pio2+0x2e0>)
 800c34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c34e:	4639      	mov	r1, r7
 800c350:	dd36      	ble.n	800c3c0 <__ieee754_rem_pio2+0xb0>
 800c352:	f7f3 ff99 	bl	8000288 <__aeabi_dsub>
 800c356:	45a8      	cmp	r8, r5
 800c358:	4606      	mov	r6, r0
 800c35a:	460f      	mov	r7, r1
 800c35c:	d018      	beq.n	800c390 <__ieee754_rem_pio2+0x80>
 800c35e:	a3a6      	add	r3, pc, #664	; (adr r3, 800c5f8 <__ieee754_rem_pio2+0x2e8>)
 800c360:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c364:	f7f3 ff90 	bl	8000288 <__aeabi_dsub>
 800c368:	4602      	mov	r2, r0
 800c36a:	460b      	mov	r3, r1
 800c36c:	e9c4 2300 	strd	r2, r3, [r4]
 800c370:	4630      	mov	r0, r6
 800c372:	4639      	mov	r1, r7
 800c374:	f7f3 ff88 	bl	8000288 <__aeabi_dsub>
 800c378:	a39f      	add	r3, pc, #636	; (adr r3, 800c5f8 <__ieee754_rem_pio2+0x2e8>)
 800c37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c37e:	f7f3 ff83 	bl	8000288 <__aeabi_dsub>
 800c382:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c386:	2501      	movs	r5, #1
 800c388:	4628      	mov	r0, r5
 800c38a:	b00d      	add	sp, #52	; 0x34
 800c38c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c390:	a39b      	add	r3, pc, #620	; (adr r3, 800c600 <__ieee754_rem_pio2+0x2f0>)
 800c392:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c396:	f7f3 ff77 	bl	8000288 <__aeabi_dsub>
 800c39a:	a39b      	add	r3, pc, #620	; (adr r3, 800c608 <__ieee754_rem_pio2+0x2f8>)
 800c39c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3a0:	4606      	mov	r6, r0
 800c3a2:	460f      	mov	r7, r1
 800c3a4:	f7f3 ff70 	bl	8000288 <__aeabi_dsub>
 800c3a8:	4602      	mov	r2, r0
 800c3aa:	460b      	mov	r3, r1
 800c3ac:	e9c4 2300 	strd	r2, r3, [r4]
 800c3b0:	4630      	mov	r0, r6
 800c3b2:	4639      	mov	r1, r7
 800c3b4:	f7f3 ff68 	bl	8000288 <__aeabi_dsub>
 800c3b8:	a393      	add	r3, pc, #588	; (adr r3, 800c608 <__ieee754_rem_pio2+0x2f8>)
 800c3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3be:	e7de      	b.n	800c37e <__ieee754_rem_pio2+0x6e>
 800c3c0:	f7f3 ff64 	bl	800028c <__adddf3>
 800c3c4:	45a8      	cmp	r8, r5
 800c3c6:	4606      	mov	r6, r0
 800c3c8:	460f      	mov	r7, r1
 800c3ca:	d016      	beq.n	800c3fa <__ieee754_rem_pio2+0xea>
 800c3cc:	a38a      	add	r3, pc, #552	; (adr r3, 800c5f8 <__ieee754_rem_pio2+0x2e8>)
 800c3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3d2:	f7f3 ff5b 	bl	800028c <__adddf3>
 800c3d6:	4602      	mov	r2, r0
 800c3d8:	460b      	mov	r3, r1
 800c3da:	e9c4 2300 	strd	r2, r3, [r4]
 800c3de:	4630      	mov	r0, r6
 800c3e0:	4639      	mov	r1, r7
 800c3e2:	f7f3 ff51 	bl	8000288 <__aeabi_dsub>
 800c3e6:	a384      	add	r3, pc, #528	; (adr r3, 800c5f8 <__ieee754_rem_pio2+0x2e8>)
 800c3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ec:	f7f3 ff4e 	bl	800028c <__adddf3>
 800c3f0:	f04f 35ff 	mov.w	r5, #4294967295
 800c3f4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c3f8:	e7c6      	b.n	800c388 <__ieee754_rem_pio2+0x78>
 800c3fa:	a381      	add	r3, pc, #516	; (adr r3, 800c600 <__ieee754_rem_pio2+0x2f0>)
 800c3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c400:	f7f3 ff44 	bl	800028c <__adddf3>
 800c404:	a380      	add	r3, pc, #512	; (adr r3, 800c608 <__ieee754_rem_pio2+0x2f8>)
 800c406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c40a:	4606      	mov	r6, r0
 800c40c:	460f      	mov	r7, r1
 800c40e:	f7f3 ff3d 	bl	800028c <__adddf3>
 800c412:	4602      	mov	r2, r0
 800c414:	460b      	mov	r3, r1
 800c416:	e9c4 2300 	strd	r2, r3, [r4]
 800c41a:	4630      	mov	r0, r6
 800c41c:	4639      	mov	r1, r7
 800c41e:	f7f3 ff33 	bl	8000288 <__aeabi_dsub>
 800c422:	a379      	add	r3, pc, #484	; (adr r3, 800c608 <__ieee754_rem_pio2+0x2f8>)
 800c424:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c428:	e7e0      	b.n	800c3ec <__ieee754_rem_pio2+0xdc>
 800c42a:	4b82      	ldr	r3, [pc, #520]	; (800c634 <__ieee754_rem_pio2+0x324>)
 800c42c:	4598      	cmp	r8, r3
 800c42e:	f300 80d0 	bgt.w	800c5d2 <__ieee754_rem_pio2+0x2c2>
 800c432:	f000 fed3 	bl	800d1dc <fabs>
 800c436:	ec57 6b10 	vmov	r6, r7, d0
 800c43a:	ee10 0a10 	vmov	r0, s0
 800c43e:	a374      	add	r3, pc, #464	; (adr r3, 800c610 <__ieee754_rem_pio2+0x300>)
 800c440:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c444:	4639      	mov	r1, r7
 800c446:	f7f4 f8d7 	bl	80005f8 <__aeabi_dmul>
 800c44a:	2200      	movs	r2, #0
 800c44c:	4b7a      	ldr	r3, [pc, #488]	; (800c638 <__ieee754_rem_pio2+0x328>)
 800c44e:	f7f3 ff1d 	bl	800028c <__adddf3>
 800c452:	f7f4 fb81 	bl	8000b58 <__aeabi_d2iz>
 800c456:	4605      	mov	r5, r0
 800c458:	f7f4 f864 	bl	8000524 <__aeabi_i2d>
 800c45c:	a364      	add	r3, pc, #400	; (adr r3, 800c5f0 <__ieee754_rem_pio2+0x2e0>)
 800c45e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c462:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c466:	f7f4 f8c7 	bl	80005f8 <__aeabi_dmul>
 800c46a:	4602      	mov	r2, r0
 800c46c:	460b      	mov	r3, r1
 800c46e:	4630      	mov	r0, r6
 800c470:	4639      	mov	r1, r7
 800c472:	f7f3 ff09 	bl	8000288 <__aeabi_dsub>
 800c476:	a360      	add	r3, pc, #384	; (adr r3, 800c5f8 <__ieee754_rem_pio2+0x2e8>)
 800c478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c47c:	4682      	mov	sl, r0
 800c47e:	468b      	mov	fp, r1
 800c480:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c484:	f7f4 f8b8 	bl	80005f8 <__aeabi_dmul>
 800c488:	2d1f      	cmp	r5, #31
 800c48a:	4606      	mov	r6, r0
 800c48c:	460f      	mov	r7, r1
 800c48e:	dc0c      	bgt.n	800c4aa <__ieee754_rem_pio2+0x19a>
 800c490:	1e6a      	subs	r2, r5, #1
 800c492:	4b6a      	ldr	r3, [pc, #424]	; (800c63c <__ieee754_rem_pio2+0x32c>)
 800c494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c498:	4543      	cmp	r3, r8
 800c49a:	d006      	beq.n	800c4aa <__ieee754_rem_pio2+0x19a>
 800c49c:	4632      	mov	r2, r6
 800c49e:	463b      	mov	r3, r7
 800c4a0:	4650      	mov	r0, sl
 800c4a2:	4659      	mov	r1, fp
 800c4a4:	f7f3 fef0 	bl	8000288 <__aeabi_dsub>
 800c4a8:	e00e      	b.n	800c4c8 <__ieee754_rem_pio2+0x1b8>
 800c4aa:	4632      	mov	r2, r6
 800c4ac:	463b      	mov	r3, r7
 800c4ae:	4650      	mov	r0, sl
 800c4b0:	4659      	mov	r1, fp
 800c4b2:	f7f3 fee9 	bl	8000288 <__aeabi_dsub>
 800c4b6:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c4ba:	9305      	str	r3, [sp, #20]
 800c4bc:	9a05      	ldr	r2, [sp, #20]
 800c4be:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c4c2:	1ad3      	subs	r3, r2, r3
 800c4c4:	2b10      	cmp	r3, #16
 800c4c6:	dc02      	bgt.n	800c4ce <__ieee754_rem_pio2+0x1be>
 800c4c8:	e9c4 0100 	strd	r0, r1, [r4]
 800c4cc:	e039      	b.n	800c542 <__ieee754_rem_pio2+0x232>
 800c4ce:	a34c      	add	r3, pc, #304	; (adr r3, 800c600 <__ieee754_rem_pio2+0x2f0>)
 800c4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c4d8:	f7f4 f88e 	bl	80005f8 <__aeabi_dmul>
 800c4dc:	4606      	mov	r6, r0
 800c4de:	460f      	mov	r7, r1
 800c4e0:	4602      	mov	r2, r0
 800c4e2:	460b      	mov	r3, r1
 800c4e4:	4650      	mov	r0, sl
 800c4e6:	4659      	mov	r1, fp
 800c4e8:	f7f3 fece 	bl	8000288 <__aeabi_dsub>
 800c4ec:	4602      	mov	r2, r0
 800c4ee:	460b      	mov	r3, r1
 800c4f0:	4680      	mov	r8, r0
 800c4f2:	4689      	mov	r9, r1
 800c4f4:	4650      	mov	r0, sl
 800c4f6:	4659      	mov	r1, fp
 800c4f8:	f7f3 fec6 	bl	8000288 <__aeabi_dsub>
 800c4fc:	4632      	mov	r2, r6
 800c4fe:	463b      	mov	r3, r7
 800c500:	f7f3 fec2 	bl	8000288 <__aeabi_dsub>
 800c504:	a340      	add	r3, pc, #256	; (adr r3, 800c608 <__ieee754_rem_pio2+0x2f8>)
 800c506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c50a:	4606      	mov	r6, r0
 800c50c:	460f      	mov	r7, r1
 800c50e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c512:	f7f4 f871 	bl	80005f8 <__aeabi_dmul>
 800c516:	4632      	mov	r2, r6
 800c518:	463b      	mov	r3, r7
 800c51a:	f7f3 feb5 	bl	8000288 <__aeabi_dsub>
 800c51e:	4602      	mov	r2, r0
 800c520:	460b      	mov	r3, r1
 800c522:	4606      	mov	r6, r0
 800c524:	460f      	mov	r7, r1
 800c526:	4640      	mov	r0, r8
 800c528:	4649      	mov	r1, r9
 800c52a:	f7f3 fead 	bl	8000288 <__aeabi_dsub>
 800c52e:	9a05      	ldr	r2, [sp, #20]
 800c530:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c534:	1ad3      	subs	r3, r2, r3
 800c536:	2b31      	cmp	r3, #49	; 0x31
 800c538:	dc20      	bgt.n	800c57c <__ieee754_rem_pio2+0x26c>
 800c53a:	e9c4 0100 	strd	r0, r1, [r4]
 800c53e:	46c2      	mov	sl, r8
 800c540:	46cb      	mov	fp, r9
 800c542:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c546:	4650      	mov	r0, sl
 800c548:	4642      	mov	r2, r8
 800c54a:	464b      	mov	r3, r9
 800c54c:	4659      	mov	r1, fp
 800c54e:	f7f3 fe9b 	bl	8000288 <__aeabi_dsub>
 800c552:	463b      	mov	r3, r7
 800c554:	4632      	mov	r2, r6
 800c556:	f7f3 fe97 	bl	8000288 <__aeabi_dsub>
 800c55a:	9b04      	ldr	r3, [sp, #16]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c562:	f6bf af11 	bge.w	800c388 <__ieee754_rem_pio2+0x78>
 800c566:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c56a:	6063      	str	r3, [r4, #4]
 800c56c:	f8c4 8000 	str.w	r8, [r4]
 800c570:	60a0      	str	r0, [r4, #8]
 800c572:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c576:	60e3      	str	r3, [r4, #12]
 800c578:	426d      	negs	r5, r5
 800c57a:	e705      	b.n	800c388 <__ieee754_rem_pio2+0x78>
 800c57c:	a326      	add	r3, pc, #152	; (adr r3, 800c618 <__ieee754_rem_pio2+0x308>)
 800c57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c582:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c586:	f7f4 f837 	bl	80005f8 <__aeabi_dmul>
 800c58a:	4606      	mov	r6, r0
 800c58c:	460f      	mov	r7, r1
 800c58e:	4602      	mov	r2, r0
 800c590:	460b      	mov	r3, r1
 800c592:	4640      	mov	r0, r8
 800c594:	4649      	mov	r1, r9
 800c596:	f7f3 fe77 	bl	8000288 <__aeabi_dsub>
 800c59a:	4602      	mov	r2, r0
 800c59c:	460b      	mov	r3, r1
 800c59e:	4682      	mov	sl, r0
 800c5a0:	468b      	mov	fp, r1
 800c5a2:	4640      	mov	r0, r8
 800c5a4:	4649      	mov	r1, r9
 800c5a6:	f7f3 fe6f 	bl	8000288 <__aeabi_dsub>
 800c5aa:	4632      	mov	r2, r6
 800c5ac:	463b      	mov	r3, r7
 800c5ae:	f7f3 fe6b 	bl	8000288 <__aeabi_dsub>
 800c5b2:	a31b      	add	r3, pc, #108	; (adr r3, 800c620 <__ieee754_rem_pio2+0x310>)
 800c5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5b8:	4606      	mov	r6, r0
 800c5ba:	460f      	mov	r7, r1
 800c5bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c5c0:	f7f4 f81a 	bl	80005f8 <__aeabi_dmul>
 800c5c4:	4632      	mov	r2, r6
 800c5c6:	463b      	mov	r3, r7
 800c5c8:	f7f3 fe5e 	bl	8000288 <__aeabi_dsub>
 800c5cc:	4606      	mov	r6, r0
 800c5ce:	460f      	mov	r7, r1
 800c5d0:	e764      	b.n	800c49c <__ieee754_rem_pio2+0x18c>
 800c5d2:	4b1b      	ldr	r3, [pc, #108]	; (800c640 <__ieee754_rem_pio2+0x330>)
 800c5d4:	4598      	cmp	r8, r3
 800c5d6:	dd35      	ble.n	800c644 <__ieee754_rem_pio2+0x334>
 800c5d8:	ee10 2a10 	vmov	r2, s0
 800c5dc:	463b      	mov	r3, r7
 800c5de:	4630      	mov	r0, r6
 800c5e0:	4639      	mov	r1, r7
 800c5e2:	f7f3 fe51 	bl	8000288 <__aeabi_dsub>
 800c5e6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c5ea:	e9c4 0100 	strd	r0, r1, [r4]
 800c5ee:	e6a1      	b.n	800c334 <__ieee754_rem_pio2+0x24>
 800c5f0:	54400000 	.word	0x54400000
 800c5f4:	3ff921fb 	.word	0x3ff921fb
 800c5f8:	1a626331 	.word	0x1a626331
 800c5fc:	3dd0b461 	.word	0x3dd0b461
 800c600:	1a600000 	.word	0x1a600000
 800c604:	3dd0b461 	.word	0x3dd0b461
 800c608:	2e037073 	.word	0x2e037073
 800c60c:	3ba3198a 	.word	0x3ba3198a
 800c610:	6dc9c883 	.word	0x6dc9c883
 800c614:	3fe45f30 	.word	0x3fe45f30
 800c618:	2e000000 	.word	0x2e000000
 800c61c:	3ba3198a 	.word	0x3ba3198a
 800c620:	252049c1 	.word	0x252049c1
 800c624:	397b839a 	.word	0x397b839a
 800c628:	3fe921fb 	.word	0x3fe921fb
 800c62c:	4002d97b 	.word	0x4002d97b
 800c630:	3ff921fb 	.word	0x3ff921fb
 800c634:	413921fb 	.word	0x413921fb
 800c638:	3fe00000 	.word	0x3fe00000
 800c63c:	0800d948 	.word	0x0800d948
 800c640:	7fefffff 	.word	0x7fefffff
 800c644:	ea4f 5528 	mov.w	r5, r8, asr #20
 800c648:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800c64c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800c650:	4630      	mov	r0, r6
 800c652:	460f      	mov	r7, r1
 800c654:	f7f4 fa80 	bl	8000b58 <__aeabi_d2iz>
 800c658:	f7f3 ff64 	bl	8000524 <__aeabi_i2d>
 800c65c:	4602      	mov	r2, r0
 800c65e:	460b      	mov	r3, r1
 800c660:	4630      	mov	r0, r6
 800c662:	4639      	mov	r1, r7
 800c664:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c668:	f7f3 fe0e 	bl	8000288 <__aeabi_dsub>
 800c66c:	2200      	movs	r2, #0
 800c66e:	4b1f      	ldr	r3, [pc, #124]	; (800c6ec <__ieee754_rem_pio2+0x3dc>)
 800c670:	f7f3 ffc2 	bl	80005f8 <__aeabi_dmul>
 800c674:	460f      	mov	r7, r1
 800c676:	4606      	mov	r6, r0
 800c678:	f7f4 fa6e 	bl	8000b58 <__aeabi_d2iz>
 800c67c:	f7f3 ff52 	bl	8000524 <__aeabi_i2d>
 800c680:	4602      	mov	r2, r0
 800c682:	460b      	mov	r3, r1
 800c684:	4630      	mov	r0, r6
 800c686:	4639      	mov	r1, r7
 800c688:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c68c:	f7f3 fdfc 	bl	8000288 <__aeabi_dsub>
 800c690:	2200      	movs	r2, #0
 800c692:	4b16      	ldr	r3, [pc, #88]	; (800c6ec <__ieee754_rem_pio2+0x3dc>)
 800c694:	f7f3 ffb0 	bl	80005f8 <__aeabi_dmul>
 800c698:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c69c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800c6a0:	f04f 0803 	mov.w	r8, #3
 800c6a4:	2600      	movs	r6, #0
 800c6a6:	2700      	movs	r7, #0
 800c6a8:	4632      	mov	r2, r6
 800c6aa:	463b      	mov	r3, r7
 800c6ac:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800c6b0:	f108 3aff 	add.w	sl, r8, #4294967295
 800c6b4:	f7f4 fa08 	bl	8000ac8 <__aeabi_dcmpeq>
 800c6b8:	b9b0      	cbnz	r0, 800c6e8 <__ieee754_rem_pio2+0x3d8>
 800c6ba:	4b0d      	ldr	r3, [pc, #52]	; (800c6f0 <__ieee754_rem_pio2+0x3e0>)
 800c6bc:	9301      	str	r3, [sp, #4]
 800c6be:	2302      	movs	r3, #2
 800c6c0:	9300      	str	r3, [sp, #0]
 800c6c2:	462a      	mov	r2, r5
 800c6c4:	4643      	mov	r3, r8
 800c6c6:	4621      	mov	r1, r4
 800c6c8:	a806      	add	r0, sp, #24
 800c6ca:	f000 f98d 	bl	800c9e8 <__kernel_rem_pio2>
 800c6ce:	9b04      	ldr	r3, [sp, #16]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	4605      	mov	r5, r0
 800c6d4:	f6bf ae58 	bge.w	800c388 <__ieee754_rem_pio2+0x78>
 800c6d8:	6863      	ldr	r3, [r4, #4]
 800c6da:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c6de:	6063      	str	r3, [r4, #4]
 800c6e0:	68e3      	ldr	r3, [r4, #12]
 800c6e2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c6e6:	e746      	b.n	800c576 <__ieee754_rem_pio2+0x266>
 800c6e8:	46d0      	mov	r8, sl
 800c6ea:	e7dd      	b.n	800c6a8 <__ieee754_rem_pio2+0x398>
 800c6ec:	41700000 	.word	0x41700000
 800c6f0:	0800d9c8 	.word	0x0800d9c8

0800c6f4 <__ieee754_sqrt>:
 800c6f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6f8:	4955      	ldr	r1, [pc, #340]	; (800c850 <__ieee754_sqrt+0x15c>)
 800c6fa:	ec55 4b10 	vmov	r4, r5, d0
 800c6fe:	43a9      	bics	r1, r5
 800c700:	462b      	mov	r3, r5
 800c702:	462a      	mov	r2, r5
 800c704:	d112      	bne.n	800c72c <__ieee754_sqrt+0x38>
 800c706:	ee10 2a10 	vmov	r2, s0
 800c70a:	ee10 0a10 	vmov	r0, s0
 800c70e:	4629      	mov	r1, r5
 800c710:	f7f3 ff72 	bl	80005f8 <__aeabi_dmul>
 800c714:	4602      	mov	r2, r0
 800c716:	460b      	mov	r3, r1
 800c718:	4620      	mov	r0, r4
 800c71a:	4629      	mov	r1, r5
 800c71c:	f7f3 fdb6 	bl	800028c <__adddf3>
 800c720:	4604      	mov	r4, r0
 800c722:	460d      	mov	r5, r1
 800c724:	ec45 4b10 	vmov	d0, r4, r5
 800c728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c72c:	2d00      	cmp	r5, #0
 800c72e:	ee10 0a10 	vmov	r0, s0
 800c732:	4621      	mov	r1, r4
 800c734:	dc0f      	bgt.n	800c756 <__ieee754_sqrt+0x62>
 800c736:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c73a:	4330      	orrs	r0, r6
 800c73c:	d0f2      	beq.n	800c724 <__ieee754_sqrt+0x30>
 800c73e:	b155      	cbz	r5, 800c756 <__ieee754_sqrt+0x62>
 800c740:	ee10 2a10 	vmov	r2, s0
 800c744:	4620      	mov	r0, r4
 800c746:	4629      	mov	r1, r5
 800c748:	f7f3 fd9e 	bl	8000288 <__aeabi_dsub>
 800c74c:	4602      	mov	r2, r0
 800c74e:	460b      	mov	r3, r1
 800c750:	f7f4 f87c 	bl	800084c <__aeabi_ddiv>
 800c754:	e7e4      	b.n	800c720 <__ieee754_sqrt+0x2c>
 800c756:	151b      	asrs	r3, r3, #20
 800c758:	d073      	beq.n	800c842 <__ieee754_sqrt+0x14e>
 800c75a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c75e:	07dd      	lsls	r5, r3, #31
 800c760:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800c764:	bf48      	it	mi
 800c766:	0fc8      	lsrmi	r0, r1, #31
 800c768:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800c76c:	bf44      	itt	mi
 800c76e:	0049      	lslmi	r1, r1, #1
 800c770:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800c774:	2500      	movs	r5, #0
 800c776:	1058      	asrs	r0, r3, #1
 800c778:	0fcb      	lsrs	r3, r1, #31
 800c77a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800c77e:	0049      	lsls	r1, r1, #1
 800c780:	2316      	movs	r3, #22
 800c782:	462c      	mov	r4, r5
 800c784:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800c788:	19a7      	adds	r7, r4, r6
 800c78a:	4297      	cmp	r7, r2
 800c78c:	bfde      	ittt	le
 800c78e:	19bc      	addle	r4, r7, r6
 800c790:	1bd2      	suble	r2, r2, r7
 800c792:	19ad      	addle	r5, r5, r6
 800c794:	0fcf      	lsrs	r7, r1, #31
 800c796:	3b01      	subs	r3, #1
 800c798:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800c79c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c7a0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c7a4:	d1f0      	bne.n	800c788 <__ieee754_sqrt+0x94>
 800c7a6:	f04f 0c20 	mov.w	ip, #32
 800c7aa:	469e      	mov	lr, r3
 800c7ac:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c7b0:	42a2      	cmp	r2, r4
 800c7b2:	eb06 070e 	add.w	r7, r6, lr
 800c7b6:	dc02      	bgt.n	800c7be <__ieee754_sqrt+0xca>
 800c7b8:	d112      	bne.n	800c7e0 <__ieee754_sqrt+0xec>
 800c7ba:	428f      	cmp	r7, r1
 800c7bc:	d810      	bhi.n	800c7e0 <__ieee754_sqrt+0xec>
 800c7be:	2f00      	cmp	r7, #0
 800c7c0:	eb07 0e06 	add.w	lr, r7, r6
 800c7c4:	da42      	bge.n	800c84c <__ieee754_sqrt+0x158>
 800c7c6:	f1be 0f00 	cmp.w	lr, #0
 800c7ca:	db3f      	blt.n	800c84c <__ieee754_sqrt+0x158>
 800c7cc:	f104 0801 	add.w	r8, r4, #1
 800c7d0:	1b12      	subs	r2, r2, r4
 800c7d2:	428f      	cmp	r7, r1
 800c7d4:	bf88      	it	hi
 800c7d6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800c7da:	1bc9      	subs	r1, r1, r7
 800c7dc:	4433      	add	r3, r6
 800c7de:	4644      	mov	r4, r8
 800c7e0:	0052      	lsls	r2, r2, #1
 800c7e2:	f1bc 0c01 	subs.w	ip, ip, #1
 800c7e6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800c7ea:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c7ee:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c7f2:	d1dd      	bne.n	800c7b0 <__ieee754_sqrt+0xbc>
 800c7f4:	430a      	orrs	r2, r1
 800c7f6:	d006      	beq.n	800c806 <__ieee754_sqrt+0x112>
 800c7f8:	1c5c      	adds	r4, r3, #1
 800c7fa:	bf13      	iteet	ne
 800c7fc:	3301      	addne	r3, #1
 800c7fe:	3501      	addeq	r5, #1
 800c800:	4663      	moveq	r3, ip
 800c802:	f023 0301 	bicne.w	r3, r3, #1
 800c806:	106a      	asrs	r2, r5, #1
 800c808:	085b      	lsrs	r3, r3, #1
 800c80a:	07e9      	lsls	r1, r5, #31
 800c80c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800c810:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800c814:	bf48      	it	mi
 800c816:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800c81a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800c81e:	461c      	mov	r4, r3
 800c820:	e780      	b.n	800c724 <__ieee754_sqrt+0x30>
 800c822:	0aca      	lsrs	r2, r1, #11
 800c824:	3815      	subs	r0, #21
 800c826:	0549      	lsls	r1, r1, #21
 800c828:	2a00      	cmp	r2, #0
 800c82a:	d0fa      	beq.n	800c822 <__ieee754_sqrt+0x12e>
 800c82c:	02d6      	lsls	r6, r2, #11
 800c82e:	d50a      	bpl.n	800c846 <__ieee754_sqrt+0x152>
 800c830:	f1c3 0420 	rsb	r4, r3, #32
 800c834:	fa21 f404 	lsr.w	r4, r1, r4
 800c838:	1e5d      	subs	r5, r3, #1
 800c83a:	4099      	lsls	r1, r3
 800c83c:	4322      	orrs	r2, r4
 800c83e:	1b43      	subs	r3, r0, r5
 800c840:	e78b      	b.n	800c75a <__ieee754_sqrt+0x66>
 800c842:	4618      	mov	r0, r3
 800c844:	e7f0      	b.n	800c828 <__ieee754_sqrt+0x134>
 800c846:	0052      	lsls	r2, r2, #1
 800c848:	3301      	adds	r3, #1
 800c84a:	e7ef      	b.n	800c82c <__ieee754_sqrt+0x138>
 800c84c:	46a0      	mov	r8, r4
 800c84e:	e7bf      	b.n	800c7d0 <__ieee754_sqrt+0xdc>
 800c850:	7ff00000 	.word	0x7ff00000
 800c854:	00000000 	.word	0x00000000

0800c858 <__kernel_cos>:
 800c858:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c85c:	ec59 8b10 	vmov	r8, r9, d0
 800c860:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800c864:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800c868:	ed2d 8b02 	vpush	{d8}
 800c86c:	eeb0 8a41 	vmov.f32	s16, s2
 800c870:	eef0 8a61 	vmov.f32	s17, s3
 800c874:	da07      	bge.n	800c886 <__kernel_cos+0x2e>
 800c876:	ee10 0a10 	vmov	r0, s0
 800c87a:	4649      	mov	r1, r9
 800c87c:	f7f4 f96c 	bl	8000b58 <__aeabi_d2iz>
 800c880:	2800      	cmp	r0, #0
 800c882:	f000 8089 	beq.w	800c998 <__kernel_cos+0x140>
 800c886:	4642      	mov	r2, r8
 800c888:	464b      	mov	r3, r9
 800c88a:	4640      	mov	r0, r8
 800c88c:	4649      	mov	r1, r9
 800c88e:	f7f3 feb3 	bl	80005f8 <__aeabi_dmul>
 800c892:	2200      	movs	r2, #0
 800c894:	4b4e      	ldr	r3, [pc, #312]	; (800c9d0 <__kernel_cos+0x178>)
 800c896:	4604      	mov	r4, r0
 800c898:	460d      	mov	r5, r1
 800c89a:	f7f3 fead 	bl	80005f8 <__aeabi_dmul>
 800c89e:	a340      	add	r3, pc, #256	; (adr r3, 800c9a0 <__kernel_cos+0x148>)
 800c8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8a4:	4682      	mov	sl, r0
 800c8a6:	468b      	mov	fp, r1
 800c8a8:	4620      	mov	r0, r4
 800c8aa:	4629      	mov	r1, r5
 800c8ac:	f7f3 fea4 	bl	80005f8 <__aeabi_dmul>
 800c8b0:	a33d      	add	r3, pc, #244	; (adr r3, 800c9a8 <__kernel_cos+0x150>)
 800c8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8b6:	f7f3 fce9 	bl	800028c <__adddf3>
 800c8ba:	4622      	mov	r2, r4
 800c8bc:	462b      	mov	r3, r5
 800c8be:	f7f3 fe9b 	bl	80005f8 <__aeabi_dmul>
 800c8c2:	a33b      	add	r3, pc, #236	; (adr r3, 800c9b0 <__kernel_cos+0x158>)
 800c8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8c8:	f7f3 fcde 	bl	8000288 <__aeabi_dsub>
 800c8cc:	4622      	mov	r2, r4
 800c8ce:	462b      	mov	r3, r5
 800c8d0:	f7f3 fe92 	bl	80005f8 <__aeabi_dmul>
 800c8d4:	a338      	add	r3, pc, #224	; (adr r3, 800c9b8 <__kernel_cos+0x160>)
 800c8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8da:	f7f3 fcd7 	bl	800028c <__adddf3>
 800c8de:	4622      	mov	r2, r4
 800c8e0:	462b      	mov	r3, r5
 800c8e2:	f7f3 fe89 	bl	80005f8 <__aeabi_dmul>
 800c8e6:	a336      	add	r3, pc, #216	; (adr r3, 800c9c0 <__kernel_cos+0x168>)
 800c8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ec:	f7f3 fccc 	bl	8000288 <__aeabi_dsub>
 800c8f0:	4622      	mov	r2, r4
 800c8f2:	462b      	mov	r3, r5
 800c8f4:	f7f3 fe80 	bl	80005f8 <__aeabi_dmul>
 800c8f8:	a333      	add	r3, pc, #204	; (adr r3, 800c9c8 <__kernel_cos+0x170>)
 800c8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8fe:	f7f3 fcc5 	bl	800028c <__adddf3>
 800c902:	4622      	mov	r2, r4
 800c904:	462b      	mov	r3, r5
 800c906:	f7f3 fe77 	bl	80005f8 <__aeabi_dmul>
 800c90a:	4622      	mov	r2, r4
 800c90c:	462b      	mov	r3, r5
 800c90e:	f7f3 fe73 	bl	80005f8 <__aeabi_dmul>
 800c912:	ec53 2b18 	vmov	r2, r3, d8
 800c916:	4604      	mov	r4, r0
 800c918:	460d      	mov	r5, r1
 800c91a:	4640      	mov	r0, r8
 800c91c:	4649      	mov	r1, r9
 800c91e:	f7f3 fe6b 	bl	80005f8 <__aeabi_dmul>
 800c922:	460b      	mov	r3, r1
 800c924:	4602      	mov	r2, r0
 800c926:	4629      	mov	r1, r5
 800c928:	4620      	mov	r0, r4
 800c92a:	f7f3 fcad 	bl	8000288 <__aeabi_dsub>
 800c92e:	4b29      	ldr	r3, [pc, #164]	; (800c9d4 <__kernel_cos+0x17c>)
 800c930:	429e      	cmp	r6, r3
 800c932:	4680      	mov	r8, r0
 800c934:	4689      	mov	r9, r1
 800c936:	dc11      	bgt.n	800c95c <__kernel_cos+0x104>
 800c938:	4602      	mov	r2, r0
 800c93a:	460b      	mov	r3, r1
 800c93c:	4650      	mov	r0, sl
 800c93e:	4659      	mov	r1, fp
 800c940:	f7f3 fca2 	bl	8000288 <__aeabi_dsub>
 800c944:	460b      	mov	r3, r1
 800c946:	4924      	ldr	r1, [pc, #144]	; (800c9d8 <__kernel_cos+0x180>)
 800c948:	4602      	mov	r2, r0
 800c94a:	2000      	movs	r0, #0
 800c94c:	f7f3 fc9c 	bl	8000288 <__aeabi_dsub>
 800c950:	ecbd 8b02 	vpop	{d8}
 800c954:	ec41 0b10 	vmov	d0, r0, r1
 800c958:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c95c:	4b1f      	ldr	r3, [pc, #124]	; (800c9dc <__kernel_cos+0x184>)
 800c95e:	491e      	ldr	r1, [pc, #120]	; (800c9d8 <__kernel_cos+0x180>)
 800c960:	429e      	cmp	r6, r3
 800c962:	bfcc      	ite	gt
 800c964:	4d1e      	ldrgt	r5, [pc, #120]	; (800c9e0 <__kernel_cos+0x188>)
 800c966:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800c96a:	2400      	movs	r4, #0
 800c96c:	4622      	mov	r2, r4
 800c96e:	462b      	mov	r3, r5
 800c970:	2000      	movs	r0, #0
 800c972:	f7f3 fc89 	bl	8000288 <__aeabi_dsub>
 800c976:	4622      	mov	r2, r4
 800c978:	4606      	mov	r6, r0
 800c97a:	460f      	mov	r7, r1
 800c97c:	462b      	mov	r3, r5
 800c97e:	4650      	mov	r0, sl
 800c980:	4659      	mov	r1, fp
 800c982:	f7f3 fc81 	bl	8000288 <__aeabi_dsub>
 800c986:	4642      	mov	r2, r8
 800c988:	464b      	mov	r3, r9
 800c98a:	f7f3 fc7d 	bl	8000288 <__aeabi_dsub>
 800c98e:	4602      	mov	r2, r0
 800c990:	460b      	mov	r3, r1
 800c992:	4630      	mov	r0, r6
 800c994:	4639      	mov	r1, r7
 800c996:	e7d9      	b.n	800c94c <__kernel_cos+0xf4>
 800c998:	2000      	movs	r0, #0
 800c99a:	490f      	ldr	r1, [pc, #60]	; (800c9d8 <__kernel_cos+0x180>)
 800c99c:	e7d8      	b.n	800c950 <__kernel_cos+0xf8>
 800c99e:	bf00      	nop
 800c9a0:	be8838d4 	.word	0xbe8838d4
 800c9a4:	bda8fae9 	.word	0xbda8fae9
 800c9a8:	bdb4b1c4 	.word	0xbdb4b1c4
 800c9ac:	3e21ee9e 	.word	0x3e21ee9e
 800c9b0:	809c52ad 	.word	0x809c52ad
 800c9b4:	3e927e4f 	.word	0x3e927e4f
 800c9b8:	19cb1590 	.word	0x19cb1590
 800c9bc:	3efa01a0 	.word	0x3efa01a0
 800c9c0:	16c15177 	.word	0x16c15177
 800c9c4:	3f56c16c 	.word	0x3f56c16c
 800c9c8:	5555554c 	.word	0x5555554c
 800c9cc:	3fa55555 	.word	0x3fa55555
 800c9d0:	3fe00000 	.word	0x3fe00000
 800c9d4:	3fd33332 	.word	0x3fd33332
 800c9d8:	3ff00000 	.word	0x3ff00000
 800c9dc:	3fe90000 	.word	0x3fe90000
 800c9e0:	3fd20000 	.word	0x3fd20000
 800c9e4:	00000000 	.word	0x00000000

0800c9e8 <__kernel_rem_pio2>:
 800c9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9ec:	ed2d 8b02 	vpush	{d8}
 800c9f0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800c9f4:	1ed4      	subs	r4, r2, #3
 800c9f6:	9308      	str	r3, [sp, #32]
 800c9f8:	9101      	str	r1, [sp, #4]
 800c9fa:	4bc5      	ldr	r3, [pc, #788]	; (800cd10 <__kernel_rem_pio2+0x328>)
 800c9fc:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800c9fe:	9009      	str	r0, [sp, #36]	; 0x24
 800ca00:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ca04:	9304      	str	r3, [sp, #16]
 800ca06:	9b08      	ldr	r3, [sp, #32]
 800ca08:	3b01      	subs	r3, #1
 800ca0a:	9307      	str	r3, [sp, #28]
 800ca0c:	2318      	movs	r3, #24
 800ca0e:	fb94 f4f3 	sdiv	r4, r4, r3
 800ca12:	f06f 0317 	mvn.w	r3, #23
 800ca16:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800ca1a:	fb04 3303 	mla	r3, r4, r3, r3
 800ca1e:	eb03 0a02 	add.w	sl, r3, r2
 800ca22:	9b04      	ldr	r3, [sp, #16]
 800ca24:	9a07      	ldr	r2, [sp, #28]
 800ca26:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800cd00 <__kernel_rem_pio2+0x318>
 800ca2a:	eb03 0802 	add.w	r8, r3, r2
 800ca2e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800ca30:	1aa7      	subs	r7, r4, r2
 800ca32:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ca36:	ae22      	add	r6, sp, #136	; 0x88
 800ca38:	2500      	movs	r5, #0
 800ca3a:	4545      	cmp	r5, r8
 800ca3c:	dd13      	ble.n	800ca66 <__kernel_rem_pio2+0x7e>
 800ca3e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800cd00 <__kernel_rem_pio2+0x318>
 800ca42:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800ca46:	2600      	movs	r6, #0
 800ca48:	9b04      	ldr	r3, [sp, #16]
 800ca4a:	429e      	cmp	r6, r3
 800ca4c:	dc32      	bgt.n	800cab4 <__kernel_rem_pio2+0xcc>
 800ca4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca50:	9302      	str	r3, [sp, #8]
 800ca52:	9b08      	ldr	r3, [sp, #32]
 800ca54:	199d      	adds	r5, r3, r6
 800ca56:	ab22      	add	r3, sp, #136	; 0x88
 800ca58:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ca5c:	9306      	str	r3, [sp, #24]
 800ca5e:	ec59 8b18 	vmov	r8, r9, d8
 800ca62:	2700      	movs	r7, #0
 800ca64:	e01f      	b.n	800caa6 <__kernel_rem_pio2+0xbe>
 800ca66:	42ef      	cmn	r7, r5
 800ca68:	d407      	bmi.n	800ca7a <__kernel_rem_pio2+0x92>
 800ca6a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ca6e:	f7f3 fd59 	bl	8000524 <__aeabi_i2d>
 800ca72:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ca76:	3501      	adds	r5, #1
 800ca78:	e7df      	b.n	800ca3a <__kernel_rem_pio2+0x52>
 800ca7a:	ec51 0b18 	vmov	r0, r1, d8
 800ca7e:	e7f8      	b.n	800ca72 <__kernel_rem_pio2+0x8a>
 800ca80:	9906      	ldr	r1, [sp, #24]
 800ca82:	9d02      	ldr	r5, [sp, #8]
 800ca84:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800ca88:	9106      	str	r1, [sp, #24]
 800ca8a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800ca8e:	9502      	str	r5, [sp, #8]
 800ca90:	f7f3 fdb2 	bl	80005f8 <__aeabi_dmul>
 800ca94:	4602      	mov	r2, r0
 800ca96:	460b      	mov	r3, r1
 800ca98:	4640      	mov	r0, r8
 800ca9a:	4649      	mov	r1, r9
 800ca9c:	f7f3 fbf6 	bl	800028c <__adddf3>
 800caa0:	3701      	adds	r7, #1
 800caa2:	4680      	mov	r8, r0
 800caa4:	4689      	mov	r9, r1
 800caa6:	9b07      	ldr	r3, [sp, #28]
 800caa8:	429f      	cmp	r7, r3
 800caaa:	dde9      	ble.n	800ca80 <__kernel_rem_pio2+0x98>
 800caac:	e8eb 8902 	strd	r8, r9, [fp], #8
 800cab0:	3601      	adds	r6, #1
 800cab2:	e7c9      	b.n	800ca48 <__kernel_rem_pio2+0x60>
 800cab4:	9b04      	ldr	r3, [sp, #16]
 800cab6:	aa0e      	add	r2, sp, #56	; 0x38
 800cab8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cabc:	930c      	str	r3, [sp, #48]	; 0x30
 800cabe:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800cac0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800cac4:	9c04      	ldr	r4, [sp, #16]
 800cac6:	930b      	str	r3, [sp, #44]	; 0x2c
 800cac8:	ab9a      	add	r3, sp, #616	; 0x268
 800caca:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800cace:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cad2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cad6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800cada:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800cade:	ab9a      	add	r3, sp, #616	; 0x268
 800cae0:	445b      	add	r3, fp
 800cae2:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800cae6:	2500      	movs	r5, #0
 800cae8:	1b63      	subs	r3, r4, r5
 800caea:	2b00      	cmp	r3, #0
 800caec:	dc78      	bgt.n	800cbe0 <__kernel_rem_pio2+0x1f8>
 800caee:	4650      	mov	r0, sl
 800caf0:	ec49 8b10 	vmov	d0, r8, r9
 800caf4:	f000 fc98 	bl	800d428 <scalbn>
 800caf8:	ec57 6b10 	vmov	r6, r7, d0
 800cafc:	2200      	movs	r2, #0
 800cafe:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800cb02:	ee10 0a10 	vmov	r0, s0
 800cb06:	4639      	mov	r1, r7
 800cb08:	f7f3 fd76 	bl	80005f8 <__aeabi_dmul>
 800cb0c:	ec41 0b10 	vmov	d0, r0, r1
 800cb10:	f000 fb76 	bl	800d200 <floor>
 800cb14:	2200      	movs	r2, #0
 800cb16:	ec51 0b10 	vmov	r0, r1, d0
 800cb1a:	4b7e      	ldr	r3, [pc, #504]	; (800cd14 <__kernel_rem_pio2+0x32c>)
 800cb1c:	f7f3 fd6c 	bl	80005f8 <__aeabi_dmul>
 800cb20:	4602      	mov	r2, r0
 800cb22:	460b      	mov	r3, r1
 800cb24:	4630      	mov	r0, r6
 800cb26:	4639      	mov	r1, r7
 800cb28:	f7f3 fbae 	bl	8000288 <__aeabi_dsub>
 800cb2c:	460f      	mov	r7, r1
 800cb2e:	4606      	mov	r6, r0
 800cb30:	f7f4 f812 	bl	8000b58 <__aeabi_d2iz>
 800cb34:	9006      	str	r0, [sp, #24]
 800cb36:	f7f3 fcf5 	bl	8000524 <__aeabi_i2d>
 800cb3a:	4602      	mov	r2, r0
 800cb3c:	460b      	mov	r3, r1
 800cb3e:	4630      	mov	r0, r6
 800cb40:	4639      	mov	r1, r7
 800cb42:	f7f3 fba1 	bl	8000288 <__aeabi_dsub>
 800cb46:	f1ba 0f00 	cmp.w	sl, #0
 800cb4a:	4606      	mov	r6, r0
 800cb4c:	460f      	mov	r7, r1
 800cb4e:	dd6c      	ble.n	800cc2a <__kernel_rem_pio2+0x242>
 800cb50:	1e62      	subs	r2, r4, #1
 800cb52:	ab0e      	add	r3, sp, #56	; 0x38
 800cb54:	f1ca 0118 	rsb	r1, sl, #24
 800cb58:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800cb5c:	9d06      	ldr	r5, [sp, #24]
 800cb5e:	fa40 f301 	asr.w	r3, r0, r1
 800cb62:	441d      	add	r5, r3
 800cb64:	408b      	lsls	r3, r1
 800cb66:	1ac0      	subs	r0, r0, r3
 800cb68:	ab0e      	add	r3, sp, #56	; 0x38
 800cb6a:	9506      	str	r5, [sp, #24]
 800cb6c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800cb70:	f1ca 0317 	rsb	r3, sl, #23
 800cb74:	fa40 f303 	asr.w	r3, r0, r3
 800cb78:	9302      	str	r3, [sp, #8]
 800cb7a:	9b02      	ldr	r3, [sp, #8]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	dd62      	ble.n	800cc46 <__kernel_rem_pio2+0x25e>
 800cb80:	9b06      	ldr	r3, [sp, #24]
 800cb82:	2200      	movs	r2, #0
 800cb84:	3301      	adds	r3, #1
 800cb86:	9306      	str	r3, [sp, #24]
 800cb88:	4615      	mov	r5, r2
 800cb8a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800cb8e:	4294      	cmp	r4, r2
 800cb90:	f300 8095 	bgt.w	800ccbe <__kernel_rem_pio2+0x2d6>
 800cb94:	f1ba 0f00 	cmp.w	sl, #0
 800cb98:	dd07      	ble.n	800cbaa <__kernel_rem_pio2+0x1c2>
 800cb9a:	f1ba 0f01 	cmp.w	sl, #1
 800cb9e:	f000 80a2 	beq.w	800cce6 <__kernel_rem_pio2+0x2fe>
 800cba2:	f1ba 0f02 	cmp.w	sl, #2
 800cba6:	f000 80c1 	beq.w	800cd2c <__kernel_rem_pio2+0x344>
 800cbaa:	9b02      	ldr	r3, [sp, #8]
 800cbac:	2b02      	cmp	r3, #2
 800cbae:	d14a      	bne.n	800cc46 <__kernel_rem_pio2+0x25e>
 800cbb0:	4632      	mov	r2, r6
 800cbb2:	463b      	mov	r3, r7
 800cbb4:	2000      	movs	r0, #0
 800cbb6:	4958      	ldr	r1, [pc, #352]	; (800cd18 <__kernel_rem_pio2+0x330>)
 800cbb8:	f7f3 fb66 	bl	8000288 <__aeabi_dsub>
 800cbbc:	4606      	mov	r6, r0
 800cbbe:	460f      	mov	r7, r1
 800cbc0:	2d00      	cmp	r5, #0
 800cbc2:	d040      	beq.n	800cc46 <__kernel_rem_pio2+0x25e>
 800cbc4:	4650      	mov	r0, sl
 800cbc6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800cd08 <__kernel_rem_pio2+0x320>
 800cbca:	f000 fc2d 	bl	800d428 <scalbn>
 800cbce:	4630      	mov	r0, r6
 800cbd0:	4639      	mov	r1, r7
 800cbd2:	ec53 2b10 	vmov	r2, r3, d0
 800cbd6:	f7f3 fb57 	bl	8000288 <__aeabi_dsub>
 800cbda:	4606      	mov	r6, r0
 800cbdc:	460f      	mov	r7, r1
 800cbde:	e032      	b.n	800cc46 <__kernel_rem_pio2+0x25e>
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	4b4e      	ldr	r3, [pc, #312]	; (800cd1c <__kernel_rem_pio2+0x334>)
 800cbe4:	4640      	mov	r0, r8
 800cbe6:	4649      	mov	r1, r9
 800cbe8:	f7f3 fd06 	bl	80005f8 <__aeabi_dmul>
 800cbec:	f7f3 ffb4 	bl	8000b58 <__aeabi_d2iz>
 800cbf0:	f7f3 fc98 	bl	8000524 <__aeabi_i2d>
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	4b4a      	ldr	r3, [pc, #296]	; (800cd20 <__kernel_rem_pio2+0x338>)
 800cbf8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cbfc:	f7f3 fcfc 	bl	80005f8 <__aeabi_dmul>
 800cc00:	4602      	mov	r2, r0
 800cc02:	460b      	mov	r3, r1
 800cc04:	4640      	mov	r0, r8
 800cc06:	4649      	mov	r1, r9
 800cc08:	f7f3 fb3e 	bl	8000288 <__aeabi_dsub>
 800cc0c:	f7f3 ffa4 	bl	8000b58 <__aeabi_d2iz>
 800cc10:	ab0e      	add	r3, sp, #56	; 0x38
 800cc12:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800cc16:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800cc1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc1e:	f7f3 fb35 	bl	800028c <__adddf3>
 800cc22:	3501      	adds	r5, #1
 800cc24:	4680      	mov	r8, r0
 800cc26:	4689      	mov	r9, r1
 800cc28:	e75e      	b.n	800cae8 <__kernel_rem_pio2+0x100>
 800cc2a:	d105      	bne.n	800cc38 <__kernel_rem_pio2+0x250>
 800cc2c:	1e63      	subs	r3, r4, #1
 800cc2e:	aa0e      	add	r2, sp, #56	; 0x38
 800cc30:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800cc34:	15c3      	asrs	r3, r0, #23
 800cc36:	e79f      	b.n	800cb78 <__kernel_rem_pio2+0x190>
 800cc38:	2200      	movs	r2, #0
 800cc3a:	4b3a      	ldr	r3, [pc, #232]	; (800cd24 <__kernel_rem_pio2+0x33c>)
 800cc3c:	f7f3 ff62 	bl	8000b04 <__aeabi_dcmpge>
 800cc40:	2800      	cmp	r0, #0
 800cc42:	d139      	bne.n	800ccb8 <__kernel_rem_pio2+0x2d0>
 800cc44:	9002      	str	r0, [sp, #8]
 800cc46:	2200      	movs	r2, #0
 800cc48:	2300      	movs	r3, #0
 800cc4a:	4630      	mov	r0, r6
 800cc4c:	4639      	mov	r1, r7
 800cc4e:	f7f3 ff3b 	bl	8000ac8 <__aeabi_dcmpeq>
 800cc52:	2800      	cmp	r0, #0
 800cc54:	f000 80c7 	beq.w	800cde6 <__kernel_rem_pio2+0x3fe>
 800cc58:	1e65      	subs	r5, r4, #1
 800cc5a:	462b      	mov	r3, r5
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	9904      	ldr	r1, [sp, #16]
 800cc60:	428b      	cmp	r3, r1
 800cc62:	da6a      	bge.n	800cd3a <__kernel_rem_pio2+0x352>
 800cc64:	2a00      	cmp	r2, #0
 800cc66:	f000 8088 	beq.w	800cd7a <__kernel_rem_pio2+0x392>
 800cc6a:	ab0e      	add	r3, sp, #56	; 0x38
 800cc6c:	f1aa 0a18 	sub.w	sl, sl, #24
 800cc70:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	f000 80b4 	beq.w	800cde2 <__kernel_rem_pio2+0x3fa>
 800cc7a:	4650      	mov	r0, sl
 800cc7c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800cd08 <__kernel_rem_pio2+0x320>
 800cc80:	f000 fbd2 	bl	800d428 <scalbn>
 800cc84:	00ec      	lsls	r4, r5, #3
 800cc86:	ab72      	add	r3, sp, #456	; 0x1c8
 800cc88:	191e      	adds	r6, r3, r4
 800cc8a:	ec59 8b10 	vmov	r8, r9, d0
 800cc8e:	f106 0a08 	add.w	sl, r6, #8
 800cc92:	462f      	mov	r7, r5
 800cc94:	2f00      	cmp	r7, #0
 800cc96:	f280 80df 	bge.w	800ce58 <__kernel_rem_pio2+0x470>
 800cc9a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800cd00 <__kernel_rem_pio2+0x318>
 800cc9e:	f04f 0a00 	mov.w	sl, #0
 800cca2:	eba5 030a 	sub.w	r3, r5, sl
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	f2c0 810a 	blt.w	800cec0 <__kernel_rem_pio2+0x4d8>
 800ccac:	f8df b078 	ldr.w	fp, [pc, #120]	; 800cd28 <__kernel_rem_pio2+0x340>
 800ccb0:	ec59 8b18 	vmov	r8, r9, d8
 800ccb4:	2700      	movs	r7, #0
 800ccb6:	e0f5      	b.n	800cea4 <__kernel_rem_pio2+0x4bc>
 800ccb8:	2302      	movs	r3, #2
 800ccba:	9302      	str	r3, [sp, #8]
 800ccbc:	e760      	b.n	800cb80 <__kernel_rem_pio2+0x198>
 800ccbe:	ab0e      	add	r3, sp, #56	; 0x38
 800ccc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccc4:	b94d      	cbnz	r5, 800ccda <__kernel_rem_pio2+0x2f2>
 800ccc6:	b12b      	cbz	r3, 800ccd4 <__kernel_rem_pio2+0x2ec>
 800ccc8:	a80e      	add	r0, sp, #56	; 0x38
 800ccca:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800ccce:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800ccd2:	2301      	movs	r3, #1
 800ccd4:	3201      	adds	r2, #1
 800ccd6:	461d      	mov	r5, r3
 800ccd8:	e759      	b.n	800cb8e <__kernel_rem_pio2+0x1a6>
 800ccda:	a80e      	add	r0, sp, #56	; 0x38
 800ccdc:	1acb      	subs	r3, r1, r3
 800ccde:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800cce2:	462b      	mov	r3, r5
 800cce4:	e7f6      	b.n	800ccd4 <__kernel_rem_pio2+0x2ec>
 800cce6:	1e62      	subs	r2, r4, #1
 800cce8:	ab0e      	add	r3, sp, #56	; 0x38
 800ccea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccee:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ccf2:	a90e      	add	r1, sp, #56	; 0x38
 800ccf4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ccf8:	e757      	b.n	800cbaa <__kernel_rem_pio2+0x1c2>
 800ccfa:	bf00      	nop
 800ccfc:	f3af 8000 	nop.w
	...
 800cd0c:	3ff00000 	.word	0x3ff00000
 800cd10:	0800db10 	.word	0x0800db10
 800cd14:	40200000 	.word	0x40200000
 800cd18:	3ff00000 	.word	0x3ff00000
 800cd1c:	3e700000 	.word	0x3e700000
 800cd20:	41700000 	.word	0x41700000
 800cd24:	3fe00000 	.word	0x3fe00000
 800cd28:	0800dad0 	.word	0x0800dad0
 800cd2c:	1e62      	subs	r2, r4, #1
 800cd2e:	ab0e      	add	r3, sp, #56	; 0x38
 800cd30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd34:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800cd38:	e7db      	b.n	800ccf2 <__kernel_rem_pio2+0x30a>
 800cd3a:	a90e      	add	r1, sp, #56	; 0x38
 800cd3c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800cd40:	3b01      	subs	r3, #1
 800cd42:	430a      	orrs	r2, r1
 800cd44:	e78b      	b.n	800cc5e <__kernel_rem_pio2+0x276>
 800cd46:	3301      	adds	r3, #1
 800cd48:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800cd4c:	2900      	cmp	r1, #0
 800cd4e:	d0fa      	beq.n	800cd46 <__kernel_rem_pio2+0x35e>
 800cd50:	9a08      	ldr	r2, [sp, #32]
 800cd52:	4422      	add	r2, r4
 800cd54:	00d2      	lsls	r2, r2, #3
 800cd56:	a922      	add	r1, sp, #136	; 0x88
 800cd58:	18e3      	adds	r3, r4, r3
 800cd5a:	9206      	str	r2, [sp, #24]
 800cd5c:	440a      	add	r2, r1
 800cd5e:	9302      	str	r3, [sp, #8]
 800cd60:	f10b 0108 	add.w	r1, fp, #8
 800cd64:	f102 0308 	add.w	r3, r2, #8
 800cd68:	1c66      	adds	r6, r4, #1
 800cd6a:	910a      	str	r1, [sp, #40]	; 0x28
 800cd6c:	2500      	movs	r5, #0
 800cd6e:	930d      	str	r3, [sp, #52]	; 0x34
 800cd70:	9b02      	ldr	r3, [sp, #8]
 800cd72:	42b3      	cmp	r3, r6
 800cd74:	da04      	bge.n	800cd80 <__kernel_rem_pio2+0x398>
 800cd76:	461c      	mov	r4, r3
 800cd78:	e6a6      	b.n	800cac8 <__kernel_rem_pio2+0xe0>
 800cd7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cd7c:	2301      	movs	r3, #1
 800cd7e:	e7e3      	b.n	800cd48 <__kernel_rem_pio2+0x360>
 800cd80:	9b06      	ldr	r3, [sp, #24]
 800cd82:	18ef      	adds	r7, r5, r3
 800cd84:	ab22      	add	r3, sp, #136	; 0x88
 800cd86:	441f      	add	r7, r3
 800cd88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd8a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800cd8e:	f7f3 fbc9 	bl	8000524 <__aeabi_i2d>
 800cd92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd94:	461c      	mov	r4, r3
 800cd96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cd98:	e9c7 0100 	strd	r0, r1, [r7]
 800cd9c:	eb03 0b05 	add.w	fp, r3, r5
 800cda0:	2700      	movs	r7, #0
 800cda2:	f04f 0800 	mov.w	r8, #0
 800cda6:	f04f 0900 	mov.w	r9, #0
 800cdaa:	9b07      	ldr	r3, [sp, #28]
 800cdac:	429f      	cmp	r7, r3
 800cdae:	dd08      	ble.n	800cdc2 <__kernel_rem_pio2+0x3da>
 800cdb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdb2:	aa72      	add	r2, sp, #456	; 0x1c8
 800cdb4:	18eb      	adds	r3, r5, r3
 800cdb6:	4413      	add	r3, r2
 800cdb8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800cdbc:	3601      	adds	r6, #1
 800cdbe:	3508      	adds	r5, #8
 800cdc0:	e7d6      	b.n	800cd70 <__kernel_rem_pio2+0x388>
 800cdc2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800cdc6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800cdca:	f7f3 fc15 	bl	80005f8 <__aeabi_dmul>
 800cdce:	4602      	mov	r2, r0
 800cdd0:	460b      	mov	r3, r1
 800cdd2:	4640      	mov	r0, r8
 800cdd4:	4649      	mov	r1, r9
 800cdd6:	f7f3 fa59 	bl	800028c <__adddf3>
 800cdda:	3701      	adds	r7, #1
 800cddc:	4680      	mov	r8, r0
 800cdde:	4689      	mov	r9, r1
 800cde0:	e7e3      	b.n	800cdaa <__kernel_rem_pio2+0x3c2>
 800cde2:	3d01      	subs	r5, #1
 800cde4:	e741      	b.n	800cc6a <__kernel_rem_pio2+0x282>
 800cde6:	f1ca 0000 	rsb	r0, sl, #0
 800cdea:	ec47 6b10 	vmov	d0, r6, r7
 800cdee:	f000 fb1b 	bl	800d428 <scalbn>
 800cdf2:	ec57 6b10 	vmov	r6, r7, d0
 800cdf6:	2200      	movs	r2, #0
 800cdf8:	4b99      	ldr	r3, [pc, #612]	; (800d060 <__kernel_rem_pio2+0x678>)
 800cdfa:	ee10 0a10 	vmov	r0, s0
 800cdfe:	4639      	mov	r1, r7
 800ce00:	f7f3 fe80 	bl	8000b04 <__aeabi_dcmpge>
 800ce04:	b1f8      	cbz	r0, 800ce46 <__kernel_rem_pio2+0x45e>
 800ce06:	2200      	movs	r2, #0
 800ce08:	4b96      	ldr	r3, [pc, #600]	; (800d064 <__kernel_rem_pio2+0x67c>)
 800ce0a:	4630      	mov	r0, r6
 800ce0c:	4639      	mov	r1, r7
 800ce0e:	f7f3 fbf3 	bl	80005f8 <__aeabi_dmul>
 800ce12:	f7f3 fea1 	bl	8000b58 <__aeabi_d2iz>
 800ce16:	4680      	mov	r8, r0
 800ce18:	f7f3 fb84 	bl	8000524 <__aeabi_i2d>
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	4b90      	ldr	r3, [pc, #576]	; (800d060 <__kernel_rem_pio2+0x678>)
 800ce20:	f7f3 fbea 	bl	80005f8 <__aeabi_dmul>
 800ce24:	460b      	mov	r3, r1
 800ce26:	4602      	mov	r2, r0
 800ce28:	4639      	mov	r1, r7
 800ce2a:	4630      	mov	r0, r6
 800ce2c:	f7f3 fa2c 	bl	8000288 <__aeabi_dsub>
 800ce30:	f7f3 fe92 	bl	8000b58 <__aeabi_d2iz>
 800ce34:	1c65      	adds	r5, r4, #1
 800ce36:	ab0e      	add	r3, sp, #56	; 0x38
 800ce38:	f10a 0a18 	add.w	sl, sl, #24
 800ce3c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ce40:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800ce44:	e719      	b.n	800cc7a <__kernel_rem_pio2+0x292>
 800ce46:	4630      	mov	r0, r6
 800ce48:	4639      	mov	r1, r7
 800ce4a:	f7f3 fe85 	bl	8000b58 <__aeabi_d2iz>
 800ce4e:	ab0e      	add	r3, sp, #56	; 0x38
 800ce50:	4625      	mov	r5, r4
 800ce52:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ce56:	e710      	b.n	800cc7a <__kernel_rem_pio2+0x292>
 800ce58:	ab0e      	add	r3, sp, #56	; 0x38
 800ce5a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800ce5e:	f7f3 fb61 	bl	8000524 <__aeabi_i2d>
 800ce62:	4642      	mov	r2, r8
 800ce64:	464b      	mov	r3, r9
 800ce66:	f7f3 fbc7 	bl	80005f8 <__aeabi_dmul>
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800ce70:	4b7c      	ldr	r3, [pc, #496]	; (800d064 <__kernel_rem_pio2+0x67c>)
 800ce72:	4640      	mov	r0, r8
 800ce74:	4649      	mov	r1, r9
 800ce76:	f7f3 fbbf 	bl	80005f8 <__aeabi_dmul>
 800ce7a:	3f01      	subs	r7, #1
 800ce7c:	4680      	mov	r8, r0
 800ce7e:	4689      	mov	r9, r1
 800ce80:	e708      	b.n	800cc94 <__kernel_rem_pio2+0x2ac>
 800ce82:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800ce86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce8a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800ce8e:	f7f3 fbb3 	bl	80005f8 <__aeabi_dmul>
 800ce92:	4602      	mov	r2, r0
 800ce94:	460b      	mov	r3, r1
 800ce96:	4640      	mov	r0, r8
 800ce98:	4649      	mov	r1, r9
 800ce9a:	f7f3 f9f7 	bl	800028c <__adddf3>
 800ce9e:	3701      	adds	r7, #1
 800cea0:	4680      	mov	r8, r0
 800cea2:	4689      	mov	r9, r1
 800cea4:	9b04      	ldr	r3, [sp, #16]
 800cea6:	429f      	cmp	r7, r3
 800cea8:	dc01      	bgt.n	800ceae <__kernel_rem_pio2+0x4c6>
 800ceaa:	45ba      	cmp	sl, r7
 800ceac:	dae9      	bge.n	800ce82 <__kernel_rem_pio2+0x49a>
 800ceae:	ab4a      	add	r3, sp, #296	; 0x128
 800ceb0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ceb4:	e9c3 8900 	strd	r8, r9, [r3]
 800ceb8:	f10a 0a01 	add.w	sl, sl, #1
 800cebc:	3e08      	subs	r6, #8
 800cebe:	e6f0      	b.n	800cca2 <__kernel_rem_pio2+0x2ba>
 800cec0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800cec2:	2b03      	cmp	r3, #3
 800cec4:	d85b      	bhi.n	800cf7e <__kernel_rem_pio2+0x596>
 800cec6:	e8df f003 	tbb	[pc, r3]
 800ceca:	264a      	.short	0x264a
 800cecc:	0226      	.short	0x0226
 800cece:	ab9a      	add	r3, sp, #616	; 0x268
 800ced0:	441c      	add	r4, r3
 800ced2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800ced6:	46a2      	mov	sl, r4
 800ced8:	46ab      	mov	fp, r5
 800ceda:	f1bb 0f00 	cmp.w	fp, #0
 800cede:	dc6c      	bgt.n	800cfba <__kernel_rem_pio2+0x5d2>
 800cee0:	46a2      	mov	sl, r4
 800cee2:	46ab      	mov	fp, r5
 800cee4:	f1bb 0f01 	cmp.w	fp, #1
 800cee8:	f300 8086 	bgt.w	800cff8 <__kernel_rem_pio2+0x610>
 800ceec:	2000      	movs	r0, #0
 800ceee:	2100      	movs	r1, #0
 800cef0:	2d01      	cmp	r5, #1
 800cef2:	f300 80a0 	bgt.w	800d036 <__kernel_rem_pio2+0x64e>
 800cef6:	9b02      	ldr	r3, [sp, #8]
 800cef8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800cefc:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	f040 809e 	bne.w	800d042 <__kernel_rem_pio2+0x65a>
 800cf06:	9b01      	ldr	r3, [sp, #4]
 800cf08:	e9c3 7800 	strd	r7, r8, [r3]
 800cf0c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800cf10:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800cf14:	e033      	b.n	800cf7e <__kernel_rem_pio2+0x596>
 800cf16:	3408      	adds	r4, #8
 800cf18:	ab4a      	add	r3, sp, #296	; 0x128
 800cf1a:	441c      	add	r4, r3
 800cf1c:	462e      	mov	r6, r5
 800cf1e:	2000      	movs	r0, #0
 800cf20:	2100      	movs	r1, #0
 800cf22:	2e00      	cmp	r6, #0
 800cf24:	da3a      	bge.n	800cf9c <__kernel_rem_pio2+0x5b4>
 800cf26:	9b02      	ldr	r3, [sp, #8]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d03d      	beq.n	800cfa8 <__kernel_rem_pio2+0x5c0>
 800cf2c:	4602      	mov	r2, r0
 800cf2e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cf32:	9c01      	ldr	r4, [sp, #4]
 800cf34:	e9c4 2300 	strd	r2, r3, [r4]
 800cf38:	4602      	mov	r2, r0
 800cf3a:	460b      	mov	r3, r1
 800cf3c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800cf40:	f7f3 f9a2 	bl	8000288 <__aeabi_dsub>
 800cf44:	ae4c      	add	r6, sp, #304	; 0x130
 800cf46:	2401      	movs	r4, #1
 800cf48:	42a5      	cmp	r5, r4
 800cf4a:	da30      	bge.n	800cfae <__kernel_rem_pio2+0x5c6>
 800cf4c:	9b02      	ldr	r3, [sp, #8]
 800cf4e:	b113      	cbz	r3, 800cf56 <__kernel_rem_pio2+0x56e>
 800cf50:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cf54:	4619      	mov	r1, r3
 800cf56:	9b01      	ldr	r3, [sp, #4]
 800cf58:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800cf5c:	e00f      	b.n	800cf7e <__kernel_rem_pio2+0x596>
 800cf5e:	ab9a      	add	r3, sp, #616	; 0x268
 800cf60:	441c      	add	r4, r3
 800cf62:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800cf66:	2000      	movs	r0, #0
 800cf68:	2100      	movs	r1, #0
 800cf6a:	2d00      	cmp	r5, #0
 800cf6c:	da10      	bge.n	800cf90 <__kernel_rem_pio2+0x5a8>
 800cf6e:	9b02      	ldr	r3, [sp, #8]
 800cf70:	b113      	cbz	r3, 800cf78 <__kernel_rem_pio2+0x590>
 800cf72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cf76:	4619      	mov	r1, r3
 800cf78:	9b01      	ldr	r3, [sp, #4]
 800cf7a:	e9c3 0100 	strd	r0, r1, [r3]
 800cf7e:	9b06      	ldr	r3, [sp, #24]
 800cf80:	f003 0007 	and.w	r0, r3, #7
 800cf84:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800cf88:	ecbd 8b02 	vpop	{d8}
 800cf8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf90:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800cf94:	f7f3 f97a 	bl	800028c <__adddf3>
 800cf98:	3d01      	subs	r5, #1
 800cf9a:	e7e6      	b.n	800cf6a <__kernel_rem_pio2+0x582>
 800cf9c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800cfa0:	f7f3 f974 	bl	800028c <__adddf3>
 800cfa4:	3e01      	subs	r6, #1
 800cfa6:	e7bc      	b.n	800cf22 <__kernel_rem_pio2+0x53a>
 800cfa8:	4602      	mov	r2, r0
 800cfaa:	460b      	mov	r3, r1
 800cfac:	e7c1      	b.n	800cf32 <__kernel_rem_pio2+0x54a>
 800cfae:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800cfb2:	f7f3 f96b 	bl	800028c <__adddf3>
 800cfb6:	3401      	adds	r4, #1
 800cfb8:	e7c6      	b.n	800cf48 <__kernel_rem_pio2+0x560>
 800cfba:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800cfbe:	ed3a 7b02 	vldmdb	sl!, {d7}
 800cfc2:	4640      	mov	r0, r8
 800cfc4:	ec53 2b17 	vmov	r2, r3, d7
 800cfc8:	4649      	mov	r1, r9
 800cfca:	ed8d 7b04 	vstr	d7, [sp, #16]
 800cfce:	f7f3 f95d 	bl	800028c <__adddf3>
 800cfd2:	4602      	mov	r2, r0
 800cfd4:	460b      	mov	r3, r1
 800cfd6:	4606      	mov	r6, r0
 800cfd8:	460f      	mov	r7, r1
 800cfda:	4640      	mov	r0, r8
 800cfdc:	4649      	mov	r1, r9
 800cfde:	f7f3 f953 	bl	8000288 <__aeabi_dsub>
 800cfe2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cfe6:	f7f3 f951 	bl	800028c <__adddf3>
 800cfea:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cfee:	e9ca 0100 	strd	r0, r1, [sl]
 800cff2:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800cff6:	e770      	b.n	800ceda <__kernel_rem_pio2+0x4f2>
 800cff8:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800cffc:	ed3a 7b02 	vldmdb	sl!, {d7}
 800d000:	4630      	mov	r0, r6
 800d002:	ec53 2b17 	vmov	r2, r3, d7
 800d006:	4639      	mov	r1, r7
 800d008:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d00c:	f7f3 f93e 	bl	800028c <__adddf3>
 800d010:	4602      	mov	r2, r0
 800d012:	460b      	mov	r3, r1
 800d014:	4680      	mov	r8, r0
 800d016:	4689      	mov	r9, r1
 800d018:	4630      	mov	r0, r6
 800d01a:	4639      	mov	r1, r7
 800d01c:	f7f3 f934 	bl	8000288 <__aeabi_dsub>
 800d020:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d024:	f7f3 f932 	bl	800028c <__adddf3>
 800d028:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d02c:	e9ca 0100 	strd	r0, r1, [sl]
 800d030:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800d034:	e756      	b.n	800cee4 <__kernel_rem_pio2+0x4fc>
 800d036:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d03a:	f7f3 f927 	bl	800028c <__adddf3>
 800d03e:	3d01      	subs	r5, #1
 800d040:	e756      	b.n	800cef0 <__kernel_rem_pio2+0x508>
 800d042:	9b01      	ldr	r3, [sp, #4]
 800d044:	9a01      	ldr	r2, [sp, #4]
 800d046:	601f      	str	r7, [r3, #0]
 800d048:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800d04c:	605c      	str	r4, [r3, #4]
 800d04e:	609d      	str	r5, [r3, #8]
 800d050:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800d054:	60d3      	str	r3, [r2, #12]
 800d056:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d05a:	6110      	str	r0, [r2, #16]
 800d05c:	6153      	str	r3, [r2, #20]
 800d05e:	e78e      	b.n	800cf7e <__kernel_rem_pio2+0x596>
 800d060:	41700000 	.word	0x41700000
 800d064:	3e700000 	.word	0x3e700000

0800d068 <__kernel_sin>:
 800d068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d06c:	ec55 4b10 	vmov	r4, r5, d0
 800d070:	b085      	sub	sp, #20
 800d072:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d076:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800d07a:	ed8d 1b00 	vstr	d1, [sp]
 800d07e:	9002      	str	r0, [sp, #8]
 800d080:	da06      	bge.n	800d090 <__kernel_sin+0x28>
 800d082:	ee10 0a10 	vmov	r0, s0
 800d086:	4629      	mov	r1, r5
 800d088:	f7f3 fd66 	bl	8000b58 <__aeabi_d2iz>
 800d08c:	2800      	cmp	r0, #0
 800d08e:	d051      	beq.n	800d134 <__kernel_sin+0xcc>
 800d090:	4622      	mov	r2, r4
 800d092:	462b      	mov	r3, r5
 800d094:	4620      	mov	r0, r4
 800d096:	4629      	mov	r1, r5
 800d098:	f7f3 faae 	bl	80005f8 <__aeabi_dmul>
 800d09c:	4682      	mov	sl, r0
 800d09e:	468b      	mov	fp, r1
 800d0a0:	4602      	mov	r2, r0
 800d0a2:	460b      	mov	r3, r1
 800d0a4:	4620      	mov	r0, r4
 800d0a6:	4629      	mov	r1, r5
 800d0a8:	f7f3 faa6 	bl	80005f8 <__aeabi_dmul>
 800d0ac:	a341      	add	r3, pc, #260	; (adr r3, 800d1b4 <__kernel_sin+0x14c>)
 800d0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0b2:	4680      	mov	r8, r0
 800d0b4:	4689      	mov	r9, r1
 800d0b6:	4650      	mov	r0, sl
 800d0b8:	4659      	mov	r1, fp
 800d0ba:	f7f3 fa9d 	bl	80005f8 <__aeabi_dmul>
 800d0be:	a33f      	add	r3, pc, #252	; (adr r3, 800d1bc <__kernel_sin+0x154>)
 800d0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0c4:	f7f3 f8e0 	bl	8000288 <__aeabi_dsub>
 800d0c8:	4652      	mov	r2, sl
 800d0ca:	465b      	mov	r3, fp
 800d0cc:	f7f3 fa94 	bl	80005f8 <__aeabi_dmul>
 800d0d0:	a33c      	add	r3, pc, #240	; (adr r3, 800d1c4 <__kernel_sin+0x15c>)
 800d0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0d6:	f7f3 f8d9 	bl	800028c <__adddf3>
 800d0da:	4652      	mov	r2, sl
 800d0dc:	465b      	mov	r3, fp
 800d0de:	f7f3 fa8b 	bl	80005f8 <__aeabi_dmul>
 800d0e2:	a33a      	add	r3, pc, #232	; (adr r3, 800d1cc <__kernel_sin+0x164>)
 800d0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0e8:	f7f3 f8ce 	bl	8000288 <__aeabi_dsub>
 800d0ec:	4652      	mov	r2, sl
 800d0ee:	465b      	mov	r3, fp
 800d0f0:	f7f3 fa82 	bl	80005f8 <__aeabi_dmul>
 800d0f4:	a337      	add	r3, pc, #220	; (adr r3, 800d1d4 <__kernel_sin+0x16c>)
 800d0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0fa:	f7f3 f8c7 	bl	800028c <__adddf3>
 800d0fe:	9b02      	ldr	r3, [sp, #8]
 800d100:	4606      	mov	r6, r0
 800d102:	460f      	mov	r7, r1
 800d104:	b9db      	cbnz	r3, 800d13e <__kernel_sin+0xd6>
 800d106:	4602      	mov	r2, r0
 800d108:	460b      	mov	r3, r1
 800d10a:	4650      	mov	r0, sl
 800d10c:	4659      	mov	r1, fp
 800d10e:	f7f3 fa73 	bl	80005f8 <__aeabi_dmul>
 800d112:	a325      	add	r3, pc, #148	; (adr r3, 800d1a8 <__kernel_sin+0x140>)
 800d114:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d118:	f7f3 f8b6 	bl	8000288 <__aeabi_dsub>
 800d11c:	4642      	mov	r2, r8
 800d11e:	464b      	mov	r3, r9
 800d120:	f7f3 fa6a 	bl	80005f8 <__aeabi_dmul>
 800d124:	4602      	mov	r2, r0
 800d126:	460b      	mov	r3, r1
 800d128:	4620      	mov	r0, r4
 800d12a:	4629      	mov	r1, r5
 800d12c:	f7f3 f8ae 	bl	800028c <__adddf3>
 800d130:	4604      	mov	r4, r0
 800d132:	460d      	mov	r5, r1
 800d134:	ec45 4b10 	vmov	d0, r4, r5
 800d138:	b005      	add	sp, #20
 800d13a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d13e:	2200      	movs	r2, #0
 800d140:	4b1b      	ldr	r3, [pc, #108]	; (800d1b0 <__kernel_sin+0x148>)
 800d142:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d146:	f7f3 fa57 	bl	80005f8 <__aeabi_dmul>
 800d14a:	4632      	mov	r2, r6
 800d14c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d150:	463b      	mov	r3, r7
 800d152:	4640      	mov	r0, r8
 800d154:	4649      	mov	r1, r9
 800d156:	f7f3 fa4f 	bl	80005f8 <__aeabi_dmul>
 800d15a:	4602      	mov	r2, r0
 800d15c:	460b      	mov	r3, r1
 800d15e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d162:	f7f3 f891 	bl	8000288 <__aeabi_dsub>
 800d166:	4652      	mov	r2, sl
 800d168:	465b      	mov	r3, fp
 800d16a:	f7f3 fa45 	bl	80005f8 <__aeabi_dmul>
 800d16e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d172:	f7f3 f889 	bl	8000288 <__aeabi_dsub>
 800d176:	a30c      	add	r3, pc, #48	; (adr r3, 800d1a8 <__kernel_sin+0x140>)
 800d178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d17c:	4606      	mov	r6, r0
 800d17e:	460f      	mov	r7, r1
 800d180:	4640      	mov	r0, r8
 800d182:	4649      	mov	r1, r9
 800d184:	f7f3 fa38 	bl	80005f8 <__aeabi_dmul>
 800d188:	4602      	mov	r2, r0
 800d18a:	460b      	mov	r3, r1
 800d18c:	4630      	mov	r0, r6
 800d18e:	4639      	mov	r1, r7
 800d190:	f7f3 f87c 	bl	800028c <__adddf3>
 800d194:	4602      	mov	r2, r0
 800d196:	460b      	mov	r3, r1
 800d198:	4620      	mov	r0, r4
 800d19a:	4629      	mov	r1, r5
 800d19c:	f7f3 f874 	bl	8000288 <__aeabi_dsub>
 800d1a0:	e7c6      	b.n	800d130 <__kernel_sin+0xc8>
 800d1a2:	bf00      	nop
 800d1a4:	f3af 8000 	nop.w
 800d1a8:	55555549 	.word	0x55555549
 800d1ac:	3fc55555 	.word	0x3fc55555
 800d1b0:	3fe00000 	.word	0x3fe00000
 800d1b4:	5acfd57c 	.word	0x5acfd57c
 800d1b8:	3de5d93a 	.word	0x3de5d93a
 800d1bc:	8a2b9ceb 	.word	0x8a2b9ceb
 800d1c0:	3e5ae5e6 	.word	0x3e5ae5e6
 800d1c4:	57b1fe7d 	.word	0x57b1fe7d
 800d1c8:	3ec71de3 	.word	0x3ec71de3
 800d1cc:	19c161d5 	.word	0x19c161d5
 800d1d0:	3f2a01a0 	.word	0x3f2a01a0
 800d1d4:	1110f8a6 	.word	0x1110f8a6
 800d1d8:	3f811111 	.word	0x3f811111

0800d1dc <fabs>:
 800d1dc:	ec51 0b10 	vmov	r0, r1, d0
 800d1e0:	ee10 2a10 	vmov	r2, s0
 800d1e4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d1e8:	ec43 2b10 	vmov	d0, r2, r3
 800d1ec:	4770      	bx	lr

0800d1ee <finite>:
 800d1ee:	ee10 3a90 	vmov	r3, s1
 800d1f2:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800d1f6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800d1fa:	0fc0      	lsrs	r0, r0, #31
 800d1fc:	4770      	bx	lr
	...

0800d200 <floor>:
 800d200:	ec51 0b10 	vmov	r0, r1, d0
 800d204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d208:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800d20c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800d210:	2e13      	cmp	r6, #19
 800d212:	460c      	mov	r4, r1
 800d214:	ee10 5a10 	vmov	r5, s0
 800d218:	4680      	mov	r8, r0
 800d21a:	dc34      	bgt.n	800d286 <floor+0x86>
 800d21c:	2e00      	cmp	r6, #0
 800d21e:	da16      	bge.n	800d24e <floor+0x4e>
 800d220:	a335      	add	r3, pc, #212	; (adr r3, 800d2f8 <floor+0xf8>)
 800d222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d226:	f7f3 f831 	bl	800028c <__adddf3>
 800d22a:	2200      	movs	r2, #0
 800d22c:	2300      	movs	r3, #0
 800d22e:	f7f3 fc73 	bl	8000b18 <__aeabi_dcmpgt>
 800d232:	b148      	cbz	r0, 800d248 <floor+0x48>
 800d234:	2c00      	cmp	r4, #0
 800d236:	da59      	bge.n	800d2ec <floor+0xec>
 800d238:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d23c:	4a30      	ldr	r2, [pc, #192]	; (800d300 <floor+0x100>)
 800d23e:	432b      	orrs	r3, r5
 800d240:	2500      	movs	r5, #0
 800d242:	42ab      	cmp	r3, r5
 800d244:	bf18      	it	ne
 800d246:	4614      	movne	r4, r2
 800d248:	4621      	mov	r1, r4
 800d24a:	4628      	mov	r0, r5
 800d24c:	e025      	b.n	800d29a <floor+0x9a>
 800d24e:	4f2d      	ldr	r7, [pc, #180]	; (800d304 <floor+0x104>)
 800d250:	4137      	asrs	r7, r6
 800d252:	ea01 0307 	and.w	r3, r1, r7
 800d256:	4303      	orrs	r3, r0
 800d258:	d01f      	beq.n	800d29a <floor+0x9a>
 800d25a:	a327      	add	r3, pc, #156	; (adr r3, 800d2f8 <floor+0xf8>)
 800d25c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d260:	f7f3 f814 	bl	800028c <__adddf3>
 800d264:	2200      	movs	r2, #0
 800d266:	2300      	movs	r3, #0
 800d268:	f7f3 fc56 	bl	8000b18 <__aeabi_dcmpgt>
 800d26c:	2800      	cmp	r0, #0
 800d26e:	d0eb      	beq.n	800d248 <floor+0x48>
 800d270:	2c00      	cmp	r4, #0
 800d272:	bfbe      	ittt	lt
 800d274:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800d278:	fa43 f606 	asrlt.w	r6, r3, r6
 800d27c:	19a4      	addlt	r4, r4, r6
 800d27e:	ea24 0407 	bic.w	r4, r4, r7
 800d282:	2500      	movs	r5, #0
 800d284:	e7e0      	b.n	800d248 <floor+0x48>
 800d286:	2e33      	cmp	r6, #51	; 0x33
 800d288:	dd0b      	ble.n	800d2a2 <floor+0xa2>
 800d28a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d28e:	d104      	bne.n	800d29a <floor+0x9a>
 800d290:	ee10 2a10 	vmov	r2, s0
 800d294:	460b      	mov	r3, r1
 800d296:	f7f2 fff9 	bl	800028c <__adddf3>
 800d29a:	ec41 0b10 	vmov	d0, r0, r1
 800d29e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2a2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800d2a6:	f04f 33ff 	mov.w	r3, #4294967295
 800d2aa:	fa23 f707 	lsr.w	r7, r3, r7
 800d2ae:	4207      	tst	r7, r0
 800d2b0:	d0f3      	beq.n	800d29a <floor+0x9a>
 800d2b2:	a311      	add	r3, pc, #68	; (adr r3, 800d2f8 <floor+0xf8>)
 800d2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2b8:	f7f2 ffe8 	bl	800028c <__adddf3>
 800d2bc:	2200      	movs	r2, #0
 800d2be:	2300      	movs	r3, #0
 800d2c0:	f7f3 fc2a 	bl	8000b18 <__aeabi_dcmpgt>
 800d2c4:	2800      	cmp	r0, #0
 800d2c6:	d0bf      	beq.n	800d248 <floor+0x48>
 800d2c8:	2c00      	cmp	r4, #0
 800d2ca:	da02      	bge.n	800d2d2 <floor+0xd2>
 800d2cc:	2e14      	cmp	r6, #20
 800d2ce:	d103      	bne.n	800d2d8 <floor+0xd8>
 800d2d0:	3401      	adds	r4, #1
 800d2d2:	ea25 0507 	bic.w	r5, r5, r7
 800d2d6:	e7b7      	b.n	800d248 <floor+0x48>
 800d2d8:	2301      	movs	r3, #1
 800d2da:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800d2de:	fa03 f606 	lsl.w	r6, r3, r6
 800d2e2:	4435      	add	r5, r6
 800d2e4:	4545      	cmp	r5, r8
 800d2e6:	bf38      	it	cc
 800d2e8:	18e4      	addcc	r4, r4, r3
 800d2ea:	e7f2      	b.n	800d2d2 <floor+0xd2>
 800d2ec:	2500      	movs	r5, #0
 800d2ee:	462c      	mov	r4, r5
 800d2f0:	e7aa      	b.n	800d248 <floor+0x48>
 800d2f2:	bf00      	nop
 800d2f4:	f3af 8000 	nop.w
 800d2f8:	8800759c 	.word	0x8800759c
 800d2fc:	7e37e43c 	.word	0x7e37e43c
 800d300:	bff00000 	.word	0xbff00000
 800d304:	000fffff 	.word	0x000fffff

0800d308 <matherr>:
 800d308:	2000      	movs	r0, #0
 800d30a:	4770      	bx	lr
 800d30c:	0000      	movs	r0, r0
	...

0800d310 <nan>:
 800d310:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d318 <nan+0x8>
 800d314:	4770      	bx	lr
 800d316:	bf00      	nop
 800d318:	00000000 	.word	0x00000000
 800d31c:	7ff80000 	.word	0x7ff80000

0800d320 <rint>:
 800d320:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d322:	ec51 0b10 	vmov	r0, r1, d0
 800d326:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d32a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800d32e:	2e13      	cmp	r6, #19
 800d330:	460b      	mov	r3, r1
 800d332:	ee10 4a10 	vmov	r4, s0
 800d336:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800d33a:	dc56      	bgt.n	800d3ea <rint+0xca>
 800d33c:	2e00      	cmp	r6, #0
 800d33e:	da2b      	bge.n	800d398 <rint+0x78>
 800d340:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800d344:	4302      	orrs	r2, r0
 800d346:	d023      	beq.n	800d390 <rint+0x70>
 800d348:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800d34c:	4302      	orrs	r2, r0
 800d34e:	4254      	negs	r4, r2
 800d350:	4314      	orrs	r4, r2
 800d352:	0c4b      	lsrs	r3, r1, #17
 800d354:	0b24      	lsrs	r4, r4, #12
 800d356:	045b      	lsls	r3, r3, #17
 800d358:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800d35c:	ea44 0103 	orr.w	r1, r4, r3
 800d360:	460b      	mov	r3, r1
 800d362:	492f      	ldr	r1, [pc, #188]	; (800d420 <rint+0x100>)
 800d364:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800d368:	e9d1 6700 	ldrd	r6, r7, [r1]
 800d36c:	4602      	mov	r2, r0
 800d36e:	4639      	mov	r1, r7
 800d370:	4630      	mov	r0, r6
 800d372:	f7f2 ff8b 	bl	800028c <__adddf3>
 800d376:	e9cd 0100 	strd	r0, r1, [sp]
 800d37a:	463b      	mov	r3, r7
 800d37c:	4632      	mov	r2, r6
 800d37e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d382:	f7f2 ff81 	bl	8000288 <__aeabi_dsub>
 800d386:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d38a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800d38e:	4639      	mov	r1, r7
 800d390:	ec41 0b10 	vmov	d0, r0, r1
 800d394:	b003      	add	sp, #12
 800d396:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d398:	4a22      	ldr	r2, [pc, #136]	; (800d424 <rint+0x104>)
 800d39a:	4132      	asrs	r2, r6
 800d39c:	ea01 0702 	and.w	r7, r1, r2
 800d3a0:	4307      	orrs	r7, r0
 800d3a2:	d0f5      	beq.n	800d390 <rint+0x70>
 800d3a4:	0852      	lsrs	r2, r2, #1
 800d3a6:	4011      	ands	r1, r2
 800d3a8:	430c      	orrs	r4, r1
 800d3aa:	d00b      	beq.n	800d3c4 <rint+0xa4>
 800d3ac:	ea23 0202 	bic.w	r2, r3, r2
 800d3b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d3b4:	2e13      	cmp	r6, #19
 800d3b6:	fa43 f306 	asr.w	r3, r3, r6
 800d3ba:	bf0c      	ite	eq
 800d3bc:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800d3c0:	2400      	movne	r4, #0
 800d3c2:	4313      	orrs	r3, r2
 800d3c4:	4916      	ldr	r1, [pc, #88]	; (800d420 <rint+0x100>)
 800d3c6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800d3ca:	4622      	mov	r2, r4
 800d3cc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d3d0:	4620      	mov	r0, r4
 800d3d2:	4629      	mov	r1, r5
 800d3d4:	f7f2 ff5a 	bl	800028c <__adddf3>
 800d3d8:	e9cd 0100 	strd	r0, r1, [sp]
 800d3dc:	4622      	mov	r2, r4
 800d3de:	462b      	mov	r3, r5
 800d3e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d3e4:	f7f2 ff50 	bl	8000288 <__aeabi_dsub>
 800d3e8:	e7d2      	b.n	800d390 <rint+0x70>
 800d3ea:	2e33      	cmp	r6, #51	; 0x33
 800d3ec:	dd07      	ble.n	800d3fe <rint+0xde>
 800d3ee:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d3f2:	d1cd      	bne.n	800d390 <rint+0x70>
 800d3f4:	ee10 2a10 	vmov	r2, s0
 800d3f8:	f7f2 ff48 	bl	800028c <__adddf3>
 800d3fc:	e7c8      	b.n	800d390 <rint+0x70>
 800d3fe:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800d402:	f04f 32ff 	mov.w	r2, #4294967295
 800d406:	40f2      	lsrs	r2, r6
 800d408:	4210      	tst	r0, r2
 800d40a:	d0c1      	beq.n	800d390 <rint+0x70>
 800d40c:	0852      	lsrs	r2, r2, #1
 800d40e:	4210      	tst	r0, r2
 800d410:	bf1f      	itttt	ne
 800d412:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800d416:	ea20 0202 	bicne.w	r2, r0, r2
 800d41a:	4134      	asrne	r4, r6
 800d41c:	4314      	orrne	r4, r2
 800d41e:	e7d1      	b.n	800d3c4 <rint+0xa4>
 800d420:	0800db20 	.word	0x0800db20
 800d424:	000fffff 	.word	0x000fffff

0800d428 <scalbn>:
 800d428:	b570      	push	{r4, r5, r6, lr}
 800d42a:	ec55 4b10 	vmov	r4, r5, d0
 800d42e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800d432:	4606      	mov	r6, r0
 800d434:	462b      	mov	r3, r5
 800d436:	b9aa      	cbnz	r2, 800d464 <scalbn+0x3c>
 800d438:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d43c:	4323      	orrs	r3, r4
 800d43e:	d03b      	beq.n	800d4b8 <scalbn+0x90>
 800d440:	4b31      	ldr	r3, [pc, #196]	; (800d508 <scalbn+0xe0>)
 800d442:	4629      	mov	r1, r5
 800d444:	2200      	movs	r2, #0
 800d446:	ee10 0a10 	vmov	r0, s0
 800d44a:	f7f3 f8d5 	bl	80005f8 <__aeabi_dmul>
 800d44e:	4b2f      	ldr	r3, [pc, #188]	; (800d50c <scalbn+0xe4>)
 800d450:	429e      	cmp	r6, r3
 800d452:	4604      	mov	r4, r0
 800d454:	460d      	mov	r5, r1
 800d456:	da12      	bge.n	800d47e <scalbn+0x56>
 800d458:	a327      	add	r3, pc, #156	; (adr r3, 800d4f8 <scalbn+0xd0>)
 800d45a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d45e:	f7f3 f8cb 	bl	80005f8 <__aeabi_dmul>
 800d462:	e009      	b.n	800d478 <scalbn+0x50>
 800d464:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800d468:	428a      	cmp	r2, r1
 800d46a:	d10c      	bne.n	800d486 <scalbn+0x5e>
 800d46c:	ee10 2a10 	vmov	r2, s0
 800d470:	4620      	mov	r0, r4
 800d472:	4629      	mov	r1, r5
 800d474:	f7f2 ff0a 	bl	800028c <__adddf3>
 800d478:	4604      	mov	r4, r0
 800d47a:	460d      	mov	r5, r1
 800d47c:	e01c      	b.n	800d4b8 <scalbn+0x90>
 800d47e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d482:	460b      	mov	r3, r1
 800d484:	3a36      	subs	r2, #54	; 0x36
 800d486:	4432      	add	r2, r6
 800d488:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d48c:	428a      	cmp	r2, r1
 800d48e:	dd0b      	ble.n	800d4a8 <scalbn+0x80>
 800d490:	ec45 4b11 	vmov	d1, r4, r5
 800d494:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800d500 <scalbn+0xd8>
 800d498:	f000 f83c 	bl	800d514 <copysign>
 800d49c:	a318      	add	r3, pc, #96	; (adr r3, 800d500 <scalbn+0xd8>)
 800d49e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4a2:	ec51 0b10 	vmov	r0, r1, d0
 800d4a6:	e7da      	b.n	800d45e <scalbn+0x36>
 800d4a8:	2a00      	cmp	r2, #0
 800d4aa:	dd08      	ble.n	800d4be <scalbn+0x96>
 800d4ac:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d4b0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d4b4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d4b8:	ec45 4b10 	vmov	d0, r4, r5
 800d4bc:	bd70      	pop	{r4, r5, r6, pc}
 800d4be:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d4c2:	da0d      	bge.n	800d4e0 <scalbn+0xb8>
 800d4c4:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d4c8:	429e      	cmp	r6, r3
 800d4ca:	ec45 4b11 	vmov	d1, r4, r5
 800d4ce:	dce1      	bgt.n	800d494 <scalbn+0x6c>
 800d4d0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800d4f8 <scalbn+0xd0>
 800d4d4:	f000 f81e 	bl	800d514 <copysign>
 800d4d8:	a307      	add	r3, pc, #28	; (adr r3, 800d4f8 <scalbn+0xd0>)
 800d4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4de:	e7e0      	b.n	800d4a2 <scalbn+0x7a>
 800d4e0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d4e4:	3236      	adds	r2, #54	; 0x36
 800d4e6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d4ea:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d4ee:	4620      	mov	r0, r4
 800d4f0:	4629      	mov	r1, r5
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	4b06      	ldr	r3, [pc, #24]	; (800d510 <scalbn+0xe8>)
 800d4f6:	e7b2      	b.n	800d45e <scalbn+0x36>
 800d4f8:	c2f8f359 	.word	0xc2f8f359
 800d4fc:	01a56e1f 	.word	0x01a56e1f
 800d500:	8800759c 	.word	0x8800759c
 800d504:	7e37e43c 	.word	0x7e37e43c
 800d508:	43500000 	.word	0x43500000
 800d50c:	ffff3cb0 	.word	0xffff3cb0
 800d510:	3c900000 	.word	0x3c900000

0800d514 <copysign>:
 800d514:	ec51 0b10 	vmov	r0, r1, d0
 800d518:	ee11 0a90 	vmov	r0, s3
 800d51c:	ee10 2a10 	vmov	r2, s0
 800d520:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d524:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800d528:	ea41 0300 	orr.w	r3, r1, r0
 800d52c:	ec43 2b10 	vmov	d0, r2, r3
 800d530:	4770      	bx	lr
	...

0800d534 <_init>:
 800d534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d536:	bf00      	nop
 800d538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d53a:	bc08      	pop	{r3}
 800d53c:	469e      	mov	lr, r3
 800d53e:	4770      	bx	lr

0800d540 <_fini>:
 800d540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d542:	bf00      	nop
 800d544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d546:	bc08      	pop	{r3}
 800d548:	469e      	mov	lr, r3
 800d54a:	4770      	bx	lr
