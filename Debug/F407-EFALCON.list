
F407-EFALCON.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd54  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  0800bee8  0800bee8  0001bee8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c2b0  0800c2b0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c2b0  0800c2b0  0001c2b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c2b8  0800c2b8  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c2b8  0800c2b8  0001c2b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c2bc  0800c2bc  0001c2bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800c2c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009d4  200001e0  0800c4a0  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000bb4  0800c4a0  00020bb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000113c1  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000021ea  00000000  00000000  000315d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001008  00000000  00000000  000337c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f20  00000000  00000000  000347c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003679  00000000  00000000  000356e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bc13  00000000  00000000  00038d61  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cdf31  00000000  00000000  00044974  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001128a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050c4  00000000  00000000  00112920  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800becc 	.word	0x0800becc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800becc 	.word	0x0800becc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca6:	f000 b9bd 	b.w	8001024 <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f84d 	bl	8000d58 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f840 	bl	8000d58 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f82f 	bl	8000d58 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f821 	bl	8000d58 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295
 8000d3c:	f000 b972 	b.w	8001024 <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f806 	bl	8000d58 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__udivmoddi4>:
 8000d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d5c:	9e08      	ldr	r6, [sp, #32]
 8000d5e:	4604      	mov	r4, r0
 8000d60:	4688      	mov	r8, r1
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d14b      	bne.n	8000dfe <__udivmoddi4+0xa6>
 8000d66:	428a      	cmp	r2, r1
 8000d68:	4615      	mov	r5, r2
 8000d6a:	d967      	bls.n	8000e3c <__udivmoddi4+0xe4>
 8000d6c:	fab2 f282 	clz	r2, r2
 8000d70:	b14a      	cbz	r2, 8000d86 <__udivmoddi4+0x2e>
 8000d72:	f1c2 0720 	rsb	r7, r2, #32
 8000d76:	fa01 f302 	lsl.w	r3, r1, r2
 8000d7a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d7e:	4095      	lsls	r5, r2
 8000d80:	ea47 0803 	orr.w	r8, r7, r3
 8000d84:	4094      	lsls	r4, r2
 8000d86:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d8a:	0c23      	lsrs	r3, r4, #16
 8000d8c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d90:	fa1f fc85 	uxth.w	ip, r5
 8000d94:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d98:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d9c:	fb07 f10c 	mul.w	r1, r7, ip
 8000da0:	4299      	cmp	r1, r3
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x60>
 8000da4:	18eb      	adds	r3, r5, r3
 8000da6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000daa:	f080 811b 	bcs.w	8000fe4 <__udivmoddi4+0x28c>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 8118 	bls.w	8000fe4 <__udivmoddi4+0x28c>
 8000db4:	3f02      	subs	r7, #2
 8000db6:	442b      	add	r3, r5
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dc0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dcc:	45a4      	cmp	ip, r4
 8000dce:	d909      	bls.n	8000de4 <__udivmoddi4+0x8c>
 8000dd0:	192c      	adds	r4, r5, r4
 8000dd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd6:	f080 8107 	bcs.w	8000fe8 <__udivmoddi4+0x290>
 8000dda:	45a4      	cmp	ip, r4
 8000ddc:	f240 8104 	bls.w	8000fe8 <__udivmoddi4+0x290>
 8000de0:	3802      	subs	r0, #2
 8000de2:	442c      	add	r4, r5
 8000de4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000de8:	eba4 040c 	sub.w	r4, r4, ip
 8000dec:	2700      	movs	r7, #0
 8000dee:	b11e      	cbz	r6, 8000df8 <__udivmoddi4+0xa0>
 8000df0:	40d4      	lsrs	r4, r2
 8000df2:	2300      	movs	r3, #0
 8000df4:	e9c6 4300 	strd	r4, r3, [r6]
 8000df8:	4639      	mov	r1, r7
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d909      	bls.n	8000e16 <__udivmoddi4+0xbe>
 8000e02:	2e00      	cmp	r6, #0
 8000e04:	f000 80eb 	beq.w	8000fde <__udivmoddi4+0x286>
 8000e08:	2700      	movs	r7, #0
 8000e0a:	e9c6 0100 	strd	r0, r1, [r6]
 8000e0e:	4638      	mov	r0, r7
 8000e10:	4639      	mov	r1, r7
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	fab3 f783 	clz	r7, r3
 8000e1a:	2f00      	cmp	r7, #0
 8000e1c:	d147      	bne.n	8000eae <__udivmoddi4+0x156>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d302      	bcc.n	8000e28 <__udivmoddi4+0xd0>
 8000e22:	4282      	cmp	r2, r0
 8000e24:	f200 80fa 	bhi.w	800101c <__udivmoddi4+0x2c4>
 8000e28:	1a84      	subs	r4, r0, r2
 8000e2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e2e:	2001      	movs	r0, #1
 8000e30:	4698      	mov	r8, r3
 8000e32:	2e00      	cmp	r6, #0
 8000e34:	d0e0      	beq.n	8000df8 <__udivmoddi4+0xa0>
 8000e36:	e9c6 4800 	strd	r4, r8, [r6]
 8000e3a:	e7dd      	b.n	8000df8 <__udivmoddi4+0xa0>
 8000e3c:	b902      	cbnz	r2, 8000e40 <__udivmoddi4+0xe8>
 8000e3e:	deff      	udf	#255	; 0xff
 8000e40:	fab2 f282 	clz	r2, r2
 8000e44:	2a00      	cmp	r2, #0
 8000e46:	f040 808f 	bne.w	8000f68 <__udivmoddi4+0x210>
 8000e4a:	1b49      	subs	r1, r1, r5
 8000e4c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e50:	fa1f f885 	uxth.w	r8, r5
 8000e54:	2701      	movs	r7, #1
 8000e56:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e5a:	0c23      	lsrs	r3, r4, #16
 8000e5c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e64:	fb08 f10c 	mul.w	r1, r8, ip
 8000e68:	4299      	cmp	r1, r3
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x124>
 8000e6c:	18eb      	adds	r3, r5, r3
 8000e6e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x122>
 8000e74:	4299      	cmp	r1, r3
 8000e76:	f200 80cd 	bhi.w	8001014 <__udivmoddi4+0x2bc>
 8000e7a:	4684      	mov	ip, r0
 8000e7c:	1a59      	subs	r1, r3, r1
 8000e7e:	b2a3      	uxth	r3, r4
 8000e80:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e84:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e88:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e8c:	fb08 f800 	mul.w	r8, r8, r0
 8000e90:	45a0      	cmp	r8, r4
 8000e92:	d907      	bls.n	8000ea4 <__udivmoddi4+0x14c>
 8000e94:	192c      	adds	r4, r5, r4
 8000e96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e9a:	d202      	bcs.n	8000ea2 <__udivmoddi4+0x14a>
 8000e9c:	45a0      	cmp	r8, r4
 8000e9e:	f200 80b6 	bhi.w	800100e <__udivmoddi4+0x2b6>
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	eba4 0408 	sub.w	r4, r4, r8
 8000ea8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000eac:	e79f      	b.n	8000dee <__udivmoddi4+0x96>
 8000eae:	f1c7 0c20 	rsb	ip, r7, #32
 8000eb2:	40bb      	lsls	r3, r7
 8000eb4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000eb8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ebc:	fa01 f407 	lsl.w	r4, r1, r7
 8000ec0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ec4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ec8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ecc:	4325      	orrs	r5, r4
 8000ece:	fbb3 f9f8 	udiv	r9, r3, r8
 8000ed2:	0c2c      	lsrs	r4, r5, #16
 8000ed4:	fb08 3319 	mls	r3, r8, r9, r3
 8000ed8:	fa1f fa8e 	uxth.w	sl, lr
 8000edc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ee0:	fb09 f40a 	mul.w	r4, r9, sl
 8000ee4:	429c      	cmp	r4, r3
 8000ee6:	fa02 f207 	lsl.w	r2, r2, r7
 8000eea:	fa00 f107 	lsl.w	r1, r0, r7
 8000eee:	d90b      	bls.n	8000f08 <__udivmoddi4+0x1b0>
 8000ef0:	eb1e 0303 	adds.w	r3, lr, r3
 8000ef4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ef8:	f080 8087 	bcs.w	800100a <__udivmoddi4+0x2b2>
 8000efc:	429c      	cmp	r4, r3
 8000efe:	f240 8084 	bls.w	800100a <__udivmoddi4+0x2b2>
 8000f02:	f1a9 0902 	sub.w	r9, r9, #2
 8000f06:	4473      	add	r3, lr
 8000f08:	1b1b      	subs	r3, r3, r4
 8000f0a:	b2ad      	uxth	r5, r5
 8000f0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f10:	fb08 3310 	mls	r3, r8, r0, r3
 8000f14:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000f18:	fb00 fa0a 	mul.w	sl, r0, sl
 8000f1c:	45a2      	cmp	sl, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x1da>
 8000f20:	eb1e 0404 	adds.w	r4, lr, r4
 8000f24:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f28:	d26b      	bcs.n	8001002 <__udivmoddi4+0x2aa>
 8000f2a:	45a2      	cmp	sl, r4
 8000f2c:	d969      	bls.n	8001002 <__udivmoddi4+0x2aa>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	4474      	add	r4, lr
 8000f32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f36:	fba0 8902 	umull	r8, r9, r0, r2
 8000f3a:	eba4 040a 	sub.w	r4, r4, sl
 8000f3e:	454c      	cmp	r4, r9
 8000f40:	46c2      	mov	sl, r8
 8000f42:	464b      	mov	r3, r9
 8000f44:	d354      	bcc.n	8000ff0 <__udivmoddi4+0x298>
 8000f46:	d051      	beq.n	8000fec <__udivmoddi4+0x294>
 8000f48:	2e00      	cmp	r6, #0
 8000f4a:	d069      	beq.n	8001020 <__udivmoddi4+0x2c8>
 8000f4c:	ebb1 050a 	subs.w	r5, r1, sl
 8000f50:	eb64 0403 	sbc.w	r4, r4, r3
 8000f54:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f58:	40fd      	lsrs	r5, r7
 8000f5a:	40fc      	lsrs	r4, r7
 8000f5c:	ea4c 0505 	orr.w	r5, ip, r5
 8000f60:	e9c6 5400 	strd	r5, r4, [r6]
 8000f64:	2700      	movs	r7, #0
 8000f66:	e747      	b.n	8000df8 <__udivmoddi4+0xa0>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f70:	4095      	lsls	r5, r2
 8000f72:	fa01 f002 	lsl.w	r0, r1, r2
 8000f76:	fa21 f303 	lsr.w	r3, r1, r3
 8000f7a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f7e:	4338      	orrs	r0, r7
 8000f80:	0c01      	lsrs	r1, r0, #16
 8000f82:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f86:	fa1f f885 	uxth.w	r8, r5
 8000f8a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f92:	fb07 f308 	mul.w	r3, r7, r8
 8000f96:	428b      	cmp	r3, r1
 8000f98:	fa04 f402 	lsl.w	r4, r4, r2
 8000f9c:	d907      	bls.n	8000fae <__udivmoddi4+0x256>
 8000f9e:	1869      	adds	r1, r5, r1
 8000fa0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000fa4:	d22f      	bcs.n	8001006 <__udivmoddi4+0x2ae>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d92d      	bls.n	8001006 <__udivmoddi4+0x2ae>
 8000faa:	3f02      	subs	r7, #2
 8000fac:	4429      	add	r1, r5
 8000fae:	1acb      	subs	r3, r1, r3
 8000fb0:	b281      	uxth	r1, r0
 8000fb2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fb6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fbe:	fb00 f308 	mul.w	r3, r0, r8
 8000fc2:	428b      	cmp	r3, r1
 8000fc4:	d907      	bls.n	8000fd6 <__udivmoddi4+0x27e>
 8000fc6:	1869      	adds	r1, r5, r1
 8000fc8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000fcc:	d217      	bcs.n	8000ffe <__udivmoddi4+0x2a6>
 8000fce:	428b      	cmp	r3, r1
 8000fd0:	d915      	bls.n	8000ffe <__udivmoddi4+0x2a6>
 8000fd2:	3802      	subs	r0, #2
 8000fd4:	4429      	add	r1, r5
 8000fd6:	1ac9      	subs	r1, r1, r3
 8000fd8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000fdc:	e73b      	b.n	8000e56 <__udivmoddi4+0xfe>
 8000fde:	4637      	mov	r7, r6
 8000fe0:	4630      	mov	r0, r6
 8000fe2:	e709      	b.n	8000df8 <__udivmoddi4+0xa0>
 8000fe4:	4607      	mov	r7, r0
 8000fe6:	e6e7      	b.n	8000db8 <__udivmoddi4+0x60>
 8000fe8:	4618      	mov	r0, r3
 8000fea:	e6fb      	b.n	8000de4 <__udivmoddi4+0x8c>
 8000fec:	4541      	cmp	r1, r8
 8000fee:	d2ab      	bcs.n	8000f48 <__udivmoddi4+0x1f0>
 8000ff0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ff4:	eb69 020e 	sbc.w	r2, r9, lr
 8000ff8:	3801      	subs	r0, #1
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	e7a4      	b.n	8000f48 <__udivmoddi4+0x1f0>
 8000ffe:	4660      	mov	r0, ip
 8001000:	e7e9      	b.n	8000fd6 <__udivmoddi4+0x27e>
 8001002:	4618      	mov	r0, r3
 8001004:	e795      	b.n	8000f32 <__udivmoddi4+0x1da>
 8001006:	4667      	mov	r7, ip
 8001008:	e7d1      	b.n	8000fae <__udivmoddi4+0x256>
 800100a:	4681      	mov	r9, r0
 800100c:	e77c      	b.n	8000f08 <__udivmoddi4+0x1b0>
 800100e:	3802      	subs	r0, #2
 8001010:	442c      	add	r4, r5
 8001012:	e747      	b.n	8000ea4 <__udivmoddi4+0x14c>
 8001014:	f1ac 0c02 	sub.w	ip, ip, #2
 8001018:	442b      	add	r3, r5
 800101a:	e72f      	b.n	8000e7c <__udivmoddi4+0x124>
 800101c:	4638      	mov	r0, r7
 800101e:	e708      	b.n	8000e32 <__udivmoddi4+0xda>
 8001020:	4637      	mov	r7, r6
 8001022:	e6e9      	b.n	8000df8 <__udivmoddi4+0xa0>

08001024 <__aeabi_idiv0>:
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <kalman_init>:
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	ed87 0a02 	vstr	s0, [r7, #8]
 8001034:	edc7 0a01 	vstr	s1, [r7, #4]
 8001038:	ed87 1a00 	vstr	s2, [r7]
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	68ba      	ldr	r2, [r7, #8]
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	605a      	str	r2, [r3, #4]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	683a      	ldr	r2, [r7, #0]
 800104c:	609a      	str	r2, [r3, #8]
 800104e:	bf00      	nop
 8001050:	3714      	adds	r7, #20
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
	...

0800105c <kalman_updateEstimate>:
 800105c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
 8001066:	ed87 0a00 	vstr	s0, [r7]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	ed93 7a01 	vldr	s14, [r3, #4]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	edd3 7a00 	vldr	s15, [r3]
 800107c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001080:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	edc3 7a05 	vstr	s15, [r3, #20]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	ed93 7a04 	vldr	s14, [r3, #16]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	edd3 6a05 	vldr	s13, [r3, #20]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	edd3 7a04 	vldr	s15, [r3, #16]
 800109c:	ed97 6a00 	vldr	s12, [r7]
 80010a0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80010a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	edc3 7a03 	vstr	s15, [r3, #12]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	695b      	ldr	r3, [r3, #20]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff fa46 	bl	8000548 <__aeabi_f2d>
 80010bc:	4603      	mov	r3, r0
 80010be:	460c      	mov	r4, r1
 80010c0:	461a      	mov	r2, r3
 80010c2:	4623      	mov	r3, r4
 80010c4:	f04f 0000 	mov.w	r0, #0
 80010c8:	4926      	ldr	r1, [pc, #152]	; (8001164 <kalman_updateEstimate+0x108>)
 80010ca:	f7ff f8dd 	bl	8000288 <__aeabi_dsub>
 80010ce:	4603      	mov	r3, r0
 80010d0:	460c      	mov	r4, r1
 80010d2:	4625      	mov	r5, r4
 80010d4:	461c      	mov	r4, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff fa34 	bl	8000548 <__aeabi_f2d>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	4620      	mov	r0, r4
 80010e6:	4629      	mov	r1, r5
 80010e8:	f7ff fa86 	bl	80005f8 <__aeabi_dmul>
 80010ec:	4603      	mov	r3, r0
 80010ee:	460c      	mov	r4, r1
 80010f0:	4625      	mov	r5, r4
 80010f2:	461c      	mov	r4, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	ed93 7a04 	vldr	s14, [r3, #16]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	edd3 7a03 	vldr	s15, [r3, #12]
 8001100:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001104:	eef0 7ae7 	vabs.f32	s15, s15
 8001108:	ee17 0a90 	vmov	r0, s15
 800110c:	f7ff fa1c 	bl	8000548 <__aeabi_f2d>
 8001110:	4680      	mov	r8, r0
 8001112:	4689      	mov	r9, r1
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff fa15 	bl	8000548 <__aeabi_f2d>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	4640      	mov	r0, r8
 8001124:	4649      	mov	r1, r9
 8001126:	f7ff fa67 	bl	80005f8 <__aeabi_dmul>
 800112a:	4602      	mov	r2, r0
 800112c:	460b      	mov	r3, r1
 800112e:	4620      	mov	r0, r4
 8001130:	4629      	mov	r1, r5
 8001132:	f7ff f8ab 	bl	800028c <__adddf3>
 8001136:	4603      	mov	r3, r0
 8001138:	460c      	mov	r4, r1
 800113a:	4618      	mov	r0, r3
 800113c:	4621      	mov	r1, r4
 800113e:	f7ff fd53 	bl	8000be8 <__aeabi_d2f>
 8001142:	4602      	mov	r2, r0
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	68da      	ldr	r2, [r3, #12]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	611a      	str	r2, [r3, #16]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	ee07 3a90 	vmov	s15, r3
 8001158:	eeb0 0a67 	vmov.f32	s0, s15
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001164:	3ff00000 	.word	0x3ff00000

08001168 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2203      	movs	r2, #3
 8001174:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_2;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2201      	movs	r2, #1
 800117a:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_HIGH_RES;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2204      	movs	r2, #4
 8001180:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_ULTRA_LOW_POWER;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2201      	movs	r2, #1
 8001186:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_SKIPPED;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2200      	movs	r2, #0
 800118c:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_05;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2200      	movs	r2, #0
 8001192:	715a      	strb	r2, [r3, #5]
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08a      	sub	sp, #40	; 0x28
 80011a4:	af04      	add	r7, sp, #16
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	460b      	mov	r3, r1
 80011aa:	607a      	str	r2, [r7, #4]
 80011ac:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80011ba:	7afb      	ldrb	r3, [r7, #11]
 80011bc:	b29a      	uxth	r2, r3
 80011be:	8af9      	ldrh	r1, [r7, #22]
 80011c0:	f241 3388 	movw	r3, #5000	; 0x1388
 80011c4:	9302      	str	r3, [sp, #8]
 80011c6:	2302      	movs	r3, #2
 80011c8:	9301      	str	r3, [sp, #4]
 80011ca:	f107 0314 	add.w	r3, r7, #20
 80011ce:	9300      	str	r3, [sp, #0]
 80011d0:	2301      	movs	r3, #1
 80011d2:	f004 f98d 	bl	80054f0 <HAL_I2C_Mem_Read>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d10b      	bne.n	80011f4 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 80011dc:	7d7b      	ldrb	r3, [r7, #21]
 80011de:	021b      	lsls	r3, r3, #8
 80011e0:	b21a      	sxth	r2, r3
 80011e2:	7d3b      	ldrb	r3, [r7, #20]
 80011e4:	b21b      	sxth	r3, r3
 80011e6:	4313      	orrs	r3, r2
 80011e8:	b21b      	sxth	r3, r3
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	801a      	strh	r2, [r3, #0]
		return true;
 80011f0:	2301      	movs	r3, #1
 80011f2:	e000      	b.n	80011f6 <read_register16+0x56>
	} else
		return false;
 80011f4:	2300      	movs	r3, #0

}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3718      	adds	r7, #24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 80011fe:	b590      	push	{r4, r7, lr}
 8001200:	b08b      	sub	sp, #44	; 0x2c
 8001202:	af04      	add	r7, sp, #16
 8001204:	60f8      	str	r0, [r7, #12]
 8001206:	607a      	str	r2, [r7, #4]
 8001208:	461a      	mov	r2, r3
 800120a:	460b      	mov	r3, r1
 800120c:	72fb      	strb	r3, [r7, #11]
 800120e:	4613      	mov	r3, r2
 8001210:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800121e:	7afb      	ldrb	r3, [r7, #11]
 8001220:	b29c      	uxth	r4, r3
 8001222:	7abb      	ldrb	r3, [r7, #10]
 8001224:	b29b      	uxth	r3, r3
 8001226:	8af9      	ldrh	r1, [r7, #22]
 8001228:	f241 3288 	movw	r2, #5000	; 0x1388
 800122c:	9202      	str	r2, [sp, #8]
 800122e:	9301      	str	r3, [sp, #4]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	2301      	movs	r3, #1
 8001236:	4622      	mov	r2, r4
 8001238:	f004 f95a 	bl	80054f0 <HAL_I2C_Mem_Read>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d101      	bne.n	8001246 <read_data+0x48>
		return 0;
 8001242:	2300      	movs	r3, #0
 8001244:	e000      	b.n	8001248 <read_data+0x4a>
	else
		return 1;
 8001246:	2301      	movs	r3, #1

}
 8001248:	4618      	mov	r0, r3
 800124a:	371c      	adds	r7, #28
 800124c:	46bd      	mov	sp, r7
 800124e:	bd90      	pop	{r4, r7, pc}

08001250 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	461a      	mov	r2, r3
 800125c:	2188      	movs	r1, #136	; 0x88
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff ff9e 	bl	80011a0 <read_register16>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d06f      	beq.n	800134a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	3302      	adds	r3, #2
 800126e:	461a      	mov	r2, r3
 8001270:	218a      	movs	r1, #138	; 0x8a
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7ff ff94 	bl	80011a0 <read_register16>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d065      	beq.n	800134a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	3304      	adds	r3, #4
 8001282:	461a      	mov	r2, r3
 8001284:	218c      	movs	r1, #140	; 0x8c
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff ff8a 	bl	80011a0 <read_register16>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d05b      	beq.n	800134a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	3306      	adds	r3, #6
 8001296:	461a      	mov	r2, r3
 8001298:	218e      	movs	r1, #142	; 0x8e
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f7ff ff80 	bl	80011a0 <read_register16>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d051      	beq.n	800134a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	3308      	adds	r3, #8
 80012aa:	461a      	mov	r2, r3
 80012ac:	2190      	movs	r1, #144	; 0x90
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f7ff ff76 	bl	80011a0 <read_register16>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d047      	beq.n	800134a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	330a      	adds	r3, #10
 80012be:	461a      	mov	r2, r3
 80012c0:	2192      	movs	r1, #146	; 0x92
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff ff6c 	bl	80011a0 <read_register16>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d03d      	beq.n	800134a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	330c      	adds	r3, #12
 80012d2:	461a      	mov	r2, r3
 80012d4:	2194      	movs	r1, #148	; 0x94
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff ff62 	bl	80011a0 <read_register16>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d033      	beq.n	800134a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	330e      	adds	r3, #14
 80012e6:	461a      	mov	r2, r3
 80012e8:	2196      	movs	r1, #150	; 0x96
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f7ff ff58 	bl	80011a0 <read_register16>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d029      	beq.n	800134a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	3310      	adds	r3, #16
 80012fa:	461a      	mov	r2, r3
 80012fc:	2198      	movs	r1, #152	; 0x98
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7ff ff4e 	bl	80011a0 <read_register16>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d01f      	beq.n	800134a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	3312      	adds	r3, #18
 800130e:	461a      	mov	r2, r3
 8001310:	219a      	movs	r1, #154	; 0x9a
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f7ff ff44 	bl	80011a0 <read_register16>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d015      	beq.n	800134a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	3314      	adds	r3, #20
 8001322:	461a      	mov	r2, r3
 8001324:	219c      	movs	r1, #156	; 0x9c
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7ff ff3a 	bl	80011a0 <read_register16>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d00b      	beq.n	800134a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 8001336:	461a      	mov	r2, r3
 8001338:	219e      	movs	r1, #158	; 0x9e
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f7ff ff30 	bl	80011a0 <read_register16>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <read_calibration_data+0xfa>

		return true;
 8001346:	2301      	movs	r3, #1
 8001348:	e000      	b.n	800134c <read_calibration_data+0xfc>
	}

	return false;
 800134a:	2300      	movs	r3, #0
}
 800134c:	4618      	mov	r0, r3
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f103 0218 	add.w	r2, r3, #24
 8001362:	2301      	movs	r3, #1
 8001364:	21a1      	movs	r1, #161	; 0xa1
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f7ff ff49 	bl	80011fe <read_data>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d14b      	bne.n	800140a <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	331a      	adds	r3, #26
 8001376:	461a      	mov	r2, r3
 8001378:	21e1      	movs	r1, #225	; 0xe1
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff ff10 	bl	80011a0 <read_register16>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d041      	beq.n	800140a <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f103 021c 	add.w	r2, r3, #28
 800138c:	2301      	movs	r3, #1
 800138e:	21e3      	movs	r1, #227	; 0xe3
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f7ff ff34 	bl	80011fe <read_data>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d136      	bne.n	800140a <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 800139c:	f107 030e 	add.w	r3, r7, #14
 80013a0:	461a      	mov	r2, r3
 80013a2:	21e4      	movs	r1, #228	; 0xe4
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f7ff fefb 	bl	80011a0 <read_register16>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d02c      	beq.n	800140a <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 80013b0:	f107 030c 	add.w	r3, r7, #12
 80013b4:	461a      	mov	r2, r3
 80013b6:	21e5      	movs	r1, #229	; 0xe5
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f7ff fef1 	bl	80011a0 <read_register16>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d022      	beq.n	800140a <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f103 0222 	add.w	r2, r3, #34	; 0x22
 80013ca:	2301      	movs	r3, #1
 80013cc:	21e7      	movs	r1, #231	; 0xe7
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f7ff ff15 	bl	80011fe <read_data>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d117      	bne.n	800140a <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 80013da:	89fb      	ldrh	r3, [r7, #14]
 80013dc:	011b      	lsls	r3, r3, #4
 80013de:	b21b      	sxth	r3, r3
 80013e0:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 80013e4:	b21a      	sxth	r2, r3
 80013e6:	89fb      	ldrh	r3, [r7, #14]
 80013e8:	121b      	asrs	r3, r3, #8
 80013ea:	b21b      	sxth	r3, r3
 80013ec:	f003 030f 	and.w	r3, r3, #15
 80013f0:	b21b      	sxth	r3, r3
 80013f2:	4313      	orrs	r3, r2
 80013f4:	b21a      	sxth	r2, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 80013fa:	89bb      	ldrh	r3, [r7, #12]
 80013fc:	091b      	lsrs	r3, r3, #4
 80013fe:	b29b      	uxth	r3, r3
 8001400:	b21a      	sxth	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	841a      	strh	r2, [r3, #32]

		return true;
 8001406:	2301      	movs	r3, #1
 8001408:	e000      	b.n	800140c <read_hum_calibration_data+0xb8>
	}

	return false;
 800140a:	2300      	movs	r3, #0
}
 800140c:	4618      	mov	r0, r3
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8001414:	b580      	push	{r7, lr}
 8001416:	b088      	sub	sp, #32
 8001418:	af04      	add	r7, sp, #16
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	460b      	mov	r3, r1
 800141e:	70fb      	strb	r3, [r7, #3]
 8001420:	4613      	mov	r3, r2
 8001422:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001430:	78fb      	ldrb	r3, [r7, #3]
 8001432:	b29a      	uxth	r2, r3
 8001434:	89f9      	ldrh	r1, [r7, #14]
 8001436:	f242 7310 	movw	r3, #10000	; 0x2710
 800143a:	9302      	str	r3, [sp, #8]
 800143c:	2301      	movs	r3, #1
 800143e:	9301      	str	r3, [sp, #4]
 8001440:	1cbb      	adds	r3, r7, #2
 8001442:	9300      	str	r3, [sp, #0]
 8001444:	2301      	movs	r3, #1
 8001446:	f003 ff59 	bl	80052fc <HAL_I2C_Mem_Write>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d101      	bne.n	8001454 <write_register8+0x40>
		return false;
 8001450:	2300      	movs	r3, #0
 8001452:	e000      	b.n	8001456 <write_register8+0x42>
	else
		return true;
 8001454:	2301      	movs	r3, #1
}
 8001456:	4618      	mov	r0, r3
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 800145e:	b580      	push	{r7, lr}
 8001460:	b084      	sub	sp, #16
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
 8001466:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800146c:	2b76      	cmp	r3, #118	; 0x76
 800146e:	d005      	beq.n	800147c <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001474:	2b77      	cmp	r3, #119	; 0x77
 8001476:	d001      	beq.n	800147c <bmp280_init+0x1e>

		return false;
 8001478:	2300      	movs	r3, #0
 800147a:	e099      	b.n	80015b0 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001482:	2301      	movs	r3, #1
 8001484:	21d0      	movs	r1, #208	; 0xd0
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f7ff feb9 	bl	80011fe <read_data>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <bmp280_init+0x38>
		return false;
 8001492:	2300      	movs	r3, #0
 8001494:	e08c      	b.n	80015b0 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800149c:	2b58      	cmp	r3, #88	; 0x58
 800149e:	d006      	beq.n	80014ae <bmp280_init+0x50>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80014a6:	2b60      	cmp	r3, #96	; 0x60
 80014a8:	d001      	beq.n	80014ae <bmp280_init+0x50>

		return false;
 80014aa:	2300      	movs	r3, #0
 80014ac:	e080      	b.n	80015b0 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 80014ae:	22b6      	movs	r2, #182	; 0xb6
 80014b0:	21e0      	movs	r1, #224	; 0xe0
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff ffae 	bl	8001414 <write_register8>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <bmp280_init+0x64>
		return false;
 80014be:	2300      	movs	r3, #0
 80014c0:	e076      	b.n	80015b0 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 80014c2:	f107 020c 	add.w	r2, r7, #12
 80014c6:	2301      	movs	r3, #1
 80014c8:	21f3      	movs	r1, #243	; 0xf3
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7ff fe97 	bl	80011fe <read_data>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1f5      	bne.n	80014c2 <bmp280_init+0x64>
				&& (status & 1) == 0)
 80014d6:	7b3b      	ldrb	r3, [r7, #12]
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1f0      	bne.n	80014c2 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f7ff feb5 	bl	8001250 <read_calibration_data>
 80014e6:	4603      	mov	r3, r0
 80014e8:	f083 0301 	eor.w	r3, r3, #1
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d100      	bne.n	80014f4 <bmp280_init+0x96>
 80014f2:	e001      	b.n	80014f8 <bmp280_init+0x9a>
		return false;
 80014f4:	2300      	movs	r3, #0
 80014f6:	e05b      	b.n	80015b0 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80014fe:	2b60      	cmp	r3, #96	; 0x60
 8001500:	d10a      	bne.n	8001518 <bmp280_init+0xba>
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f7ff ff26 	bl	8001354 <read_hum_calibration_data>
 8001508:	4603      	mov	r3, r0
 800150a:	f083 0301 	eor.w	r3, r3, #1
 800150e:	b2db      	uxtb	r3, r3
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <bmp280_init+0xba>
		return false;
 8001514:	2300      	movs	r3, #0
 8001516:	e04b      	b.n	80015b0 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	795b      	ldrb	r3, [r3, #5]
 800151c:	015b      	lsls	r3, r3, #5
 800151e:	b25a      	sxtb	r2, r3
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	785b      	ldrb	r3, [r3, #1]
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	b25b      	sxtb	r3, r3
 8001528:	4313      	orrs	r3, r2
 800152a:	b25b      	sxtb	r3, r3
 800152c:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 800152e:	7bfb      	ldrb	r3, [r7, #15]
 8001530:	461a      	mov	r2, r3
 8001532:	21f5      	movs	r1, #245	; 0xf5
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f7ff ff6d 	bl	8001414 <write_register8>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <bmp280_init+0xe6>
		return false;
 8001540:	2300      	movs	r3, #0
 8001542:	e035      	b.n	80015b0 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d102      	bne.n	8001552 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	2200      	movs	r2, #0
 8001550:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	78db      	ldrb	r3, [r3, #3]
 8001556:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8001558:	b25a      	sxtb	r2, r3
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	789b      	ldrb	r3, [r3, #2]
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	b25b      	sxtb	r3, r3
 8001562:	4313      	orrs	r3, r2
 8001564:	b25a      	sxtb	r2, r3
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	b25b      	sxtb	r3, r3
 800156c:	4313      	orrs	r3, r2
 800156e:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001570:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001578:	2b60      	cmp	r3, #96	; 0x60
 800157a:	d10d      	bne.n	8001598 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	791b      	ldrb	r3, [r3, #4]
 8001580:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8001582:	7b7b      	ldrb	r3, [r7, #13]
 8001584:	461a      	mov	r2, r3
 8001586:	21f2      	movs	r1, #242	; 0xf2
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f7ff ff43 	bl	8001414 <write_register8>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <bmp280_init+0x13a>
			return false;
 8001594:	2300      	movs	r3, #0
 8001596:	e00b      	b.n	80015b0 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8001598:	7bbb      	ldrb	r3, [r7, #14]
 800159a:	461a      	mov	r2, r3
 800159c:	21f4      	movs	r1, #244	; 0xf4
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f7ff ff38 	bl	8001414 <write_register8>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <bmp280_init+0x150>
		return false;
 80015aa:	2300      	movs	r3, #0
 80015ac:	e000      	b.n	80015b0 <bmp280_init+0x152>
	}

	return true;
 80015ae:	2301      	movs	r3, #1
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3710      	adds	r7, #16
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <bmp280_is_measuring>:
		return false;
	}
	return true;
}

bool bmp280_is_measuring(BMP280_HandleTypedef *dev) {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
	uint8_t status;
	if (read_data(dev, BMP280_REG_STATUS, &status, 1))
 80015c0:	f107 020f 	add.w	r2, r7, #15
 80015c4:	2301      	movs	r3, #1
 80015c6:	21f3      	movs	r1, #243	; 0xf3
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f7ff fe18 	bl	80011fe <read_data>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <bmp280_is_measuring+0x20>
		return false;
 80015d4:	2300      	movs	r3, #0
 80015d6:	e007      	b.n	80015e8 <bmp280_is_measuring+0x30>
	if (status & (1 << 3)) {
 80015d8:	7bfb      	ldrb	r3, [r7, #15]
 80015da:	f003 0308 	and.w	r3, r3, #8
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <bmp280_is_measuring+0x2e>
		return true;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e000      	b.n	80015e8 <bmp280_is_measuring+0x30>
	}
	return false;
 80015e6:	2300      	movs	r3, #0
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3710      	adds	r7, #16
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 80015f0:	b480      	push	{r7}
 80015f2:	b087      	sub	sp, #28
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	10da      	asrs	r2, r3, #3
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	881b      	ldrh	r3, [r3, #0]
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8001608:	68fa      	ldr	r2, [r7, #12]
 800160a:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800160e:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001612:	12db      	asrs	r3, r3, #11
 8001614:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	111b      	asrs	r3, r3, #4
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	8812      	ldrh	r2, [r2, #0]
 800161e:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8001620:	68ba      	ldr	r2, [r7, #8]
 8001622:	1112      	asrs	r2, r2, #4
 8001624:	68f9      	ldr	r1, [r7, #12]
 8001626:	8809      	ldrh	r1, [r1, #0]
 8001628:	1a52      	subs	r2, r2, r1
 800162a:	fb02 f303 	mul.w	r3, r2, r3
 800162e:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8001630:	68fa      	ldr	r2, [r7, #12]
 8001632:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001636:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 800163a:	139b      	asrs	r3, r3, #14
 800163c:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 800163e:	697a      	ldr	r2, [r7, #20]
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	441a      	add	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	4613      	mov	r3, r2
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	4413      	add	r3, r2
 8001652:	3380      	adds	r3, #128	; 0x80
 8001654:	121b      	asrs	r3, r3, #8
}
 8001656:	4618      	mov	r0, r3
 8001658:	371c      	adds	r7, #28
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8001662:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8001666:	b08a      	sub	sp, #40	; 0x28
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4619      	mov	r1, r3
 8001674:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001678:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 800167c:	f142 34ff 	adc.w	r4, r2, #4294967295
 8001680:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8001684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001686:	6a3a      	ldr	r2, [r7, #32]
 8001688:	fb02 f203 	mul.w	r2, r2, r3
 800168c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168e:	6a39      	ldr	r1, [r7, #32]
 8001690:	fb01 f303 	mul.w	r3, r1, r3
 8001694:	441a      	add	r2, r3
 8001696:	6a39      	ldr	r1, [r7, #32]
 8001698:	6a3b      	ldr	r3, [r7, #32]
 800169a:	fba1 3403 	umull	r3, r4, r1, r3
 800169e:	4422      	add	r2, r4
 80016a0:	4614      	mov	r4, r2
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 80016a8:	b211      	sxth	r1, r2
 80016aa:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80016ae:	fb01 f504 	mul.w	r5, r1, r4
 80016b2:	fb03 f002 	mul.w	r0, r3, r2
 80016b6:	4428      	add	r0, r5
 80016b8:	fba3 3401 	umull	r3, r4, r3, r1
 80016bc:	1902      	adds	r2, r0, r4
 80016be:	4614      	mov	r4, r2
 80016c0:	e9c7 3406 	strd	r3, r4, [r7, #24]
 80016c4:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80016ce:	b21b      	sxth	r3, r3
 80016d0:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80016d4:	6a3a      	ldr	r2, [r7, #32]
 80016d6:	fb04 f102 	mul.w	r1, r4, r2
 80016da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016dc:	fb03 f202 	mul.w	r2, r3, r2
 80016e0:	1888      	adds	r0, r1, r2
 80016e2:	6a3a      	ldr	r2, [r7, #32]
 80016e4:	fba2 1203 	umull	r1, r2, r2, r3
 80016e8:	1883      	adds	r3, r0, r2
 80016ea:	461a      	mov	r2, r3
 80016ec:	f04f 0500 	mov.w	r5, #0
 80016f0:	f04f 0600 	mov.w	r6, #0
 80016f4:	0456      	lsls	r6, r2, #17
 80016f6:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 80016fa:	044d      	lsls	r5, r1, #17
 80016fc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001700:	186b      	adds	r3, r5, r1
 8001702:	eb46 0402 	adc.w	r4, r6, r2
 8001706:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001710:	b219      	sxth	r1, r3
 8001712:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001716:	f04f 0500 	mov.w	r5, #0
 800171a:	f04f 0600 	mov.w	r6, #0
 800171e:	00ce      	lsls	r6, r1, #3
 8001720:	2500      	movs	r5, #0
 8001722:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001726:	186b      	adds	r3, r5, r1
 8001728:	eb46 0402 	adc.w	r4, r6, r2
 800172c:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001732:	6a3a      	ldr	r2, [r7, #32]
 8001734:	fb02 f203 	mul.w	r2, r2, r3
 8001738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173a:	6a39      	ldr	r1, [r7, #32]
 800173c:	fb01 f303 	mul.w	r3, r1, r3
 8001740:	441a      	add	r2, r3
 8001742:	6a39      	ldr	r1, [r7, #32]
 8001744:	6a3b      	ldr	r3, [r7, #32]
 8001746:	fba1 3403 	umull	r3, r4, r1, r3
 800174a:	4422      	add	r2, r4
 800174c:	4614      	mov	r4, r2
 800174e:	68fa      	ldr	r2, [r7, #12]
 8001750:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8001754:	b211      	sxth	r1, r2
 8001756:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800175a:	fb01 f504 	mul.w	r5, r1, r4
 800175e:	fb03 f002 	mul.w	r0, r3, r2
 8001762:	4428      	add	r0, r5
 8001764:	fba3 3401 	umull	r3, r4, r3, r1
 8001768:	1902      	adds	r2, r0, r4
 800176a:	4614      	mov	r4, r2
 800176c:	f04f 0100 	mov.w	r1, #0
 8001770:	f04f 0200 	mov.w	r2, #0
 8001774:	0a19      	lsrs	r1, r3, #8
 8001776:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 800177a:	1222      	asrs	r2, r4, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001782:	b21b      	sxth	r3, r3
 8001784:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001788:	6a38      	ldr	r0, [r7, #32]
 800178a:	fb04 f500 	mul.w	r5, r4, r0
 800178e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001790:	fb03 f000 	mul.w	r0, r3, r0
 8001794:	4428      	add	r0, r5
 8001796:	6a3d      	ldr	r5, [r7, #32]
 8001798:	fba5 5603 	umull	r5, r6, r5, r3
 800179c:	1983      	adds	r3, r0, r6
 800179e:	461e      	mov	r6, r3
 80017a0:	f04f 0b00 	mov.w	fp, #0
 80017a4:	f04f 0c00 	mov.w	ip, #0
 80017a8:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 80017ac:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 80017b0:	ea4f 3b05 	mov.w	fp, r5, lsl #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80017b4:	eb1b 0301 	adds.w	r3, fp, r1
 80017b8:	eb4c 0402 	adc.w	r4, ip, r2
 80017bc:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 80017c0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80017c4:	1c19      	adds	r1, r3, #0
 80017c6:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	88db      	ldrh	r3, [r3, #6]
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	f04f 0400 	mov.w	r4, #0
 80017d4:	fb03 f502 	mul.w	r5, r3, r2
 80017d8:	fb01 f004 	mul.w	r0, r1, r4
 80017dc:	4428      	add	r0, r5
 80017de:	fba1 3403 	umull	r3, r4, r1, r3
 80017e2:	1902      	adds	r2, r0, r4
 80017e4:	4614      	mov	r4, r2
 80017e6:	f04f 0100 	mov.w	r1, #0
 80017ea:	f04f 0200 	mov.w	r2, #0
 80017ee:	1061      	asrs	r1, r4, #1
 80017f0:	17e2      	asrs	r2, r4, #31
 80017f2:	e9c7 1208 	strd	r1, r2, [r7, #32]

	if (var1 == 0) {
 80017f6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80017fa:	4323      	orrs	r3, r4
 80017fc:	d101      	bne.n	8001802 <compensate_pressure+0x1a0>
		return 0;  // avoid exception caused by division by zero
 80017fe:	2300      	movs	r3, #0
 8001800:	e0d4      	b.n	80019ac <compensate_pressure+0x34a>
	}

	p = 1048576 - adc_press;
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001808:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800180c:	e9c7 3404 	strd	r3, r4, [r7, #16]
	p = (((p << 31) - var2) * 3125) / var1;
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	ea4f 0963 	mov.w	r9, r3, asr #1
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	ea4f 78c3 	mov.w	r8, r3, lsl #31
 800181c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001820:	4645      	mov	r5, r8
 8001822:	464e      	mov	r6, r9
 8001824:	1aed      	subs	r5, r5, r3
 8001826:	eb66 0604 	sbc.w	r6, r6, r4
 800182a:	46a8      	mov	r8, r5
 800182c:	46b1      	mov	r9, r6
 800182e:	eb18 0308 	adds.w	r3, r8, r8
 8001832:	eb49 0409 	adc.w	r4, r9, r9
 8001836:	4698      	mov	r8, r3
 8001838:	46a1      	mov	r9, r4
 800183a:	eb18 0805 	adds.w	r8, r8, r5
 800183e:	eb49 0906 	adc.w	r9, r9, r6
 8001842:	f04f 0100 	mov.w	r1, #0
 8001846:	f04f 0200 	mov.w	r2, #0
 800184a:	ea4f 1289 	mov.w	r2, r9, lsl #6
 800184e:	ea42 6298 	orr.w	r2, r2, r8, lsr #26
 8001852:	ea4f 1188 	mov.w	r1, r8, lsl #6
 8001856:	eb18 0801 	adds.w	r8, r8, r1
 800185a:	eb49 0902 	adc.w	r9, r9, r2
 800185e:	f04f 0100 	mov.w	r1, #0
 8001862:	f04f 0200 	mov.w	r2, #0
 8001866:	ea4f 0289 	mov.w	r2, r9, lsl #2
 800186a:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 800186e:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8001872:	4688      	mov	r8, r1
 8001874:	4691      	mov	r9, r2
 8001876:	eb18 0805 	adds.w	r8, r8, r5
 800187a:	eb49 0906 	adc.w	r9, r9, r6
 800187e:	f04f 0100 	mov.w	r1, #0
 8001882:	f04f 0200 	mov.w	r2, #0
 8001886:	ea4f 0289 	mov.w	r2, r9, lsl #2
 800188a:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 800188e:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8001892:	4688      	mov	r8, r1
 8001894:	4691      	mov	r9, r2
 8001896:	eb18 0005 	adds.w	r0, r8, r5
 800189a:	eb49 0106 	adc.w	r1, r9, r6
 800189e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80018a2:	f7ff f9f1 	bl	8000c88 <__aeabi_ldivmod>
 80018a6:	4603      	mov	r3, r0
 80018a8:	460c      	mov	r4, r1
 80018aa:	e9c7 3404 	strd	r3, r4, [r7, #16]
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80018b4:	b219      	sxth	r1, r3
 80018b6:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80018ba:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 80018be:	f04f 0300 	mov.w	r3, #0
 80018c2:	f04f 0400 	mov.w	r4, #0
 80018c6:	0b6b      	lsrs	r3, r5, #13
 80018c8:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 80018cc:	1374      	asrs	r4, r6, #13
 80018ce:	fb03 f502 	mul.w	r5, r3, r2
 80018d2:	fb01 f004 	mul.w	r0, r1, r4
 80018d6:	4428      	add	r0, r5
 80018d8:	fba1 1203 	umull	r1, r2, r1, r3
 80018dc:	1883      	adds	r3, r0, r2
 80018de:	461a      	mov	r2, r3
 80018e0:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 80018e4:	f04f 0300 	mov.w	r3, #0
 80018e8:	f04f 0400 	mov.w	r4, #0
 80018ec:	0b6b      	lsrs	r3, r5, #13
 80018ee:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 80018f2:	1374      	asrs	r4, r6, #13
 80018f4:	fb03 f502 	mul.w	r5, r3, r2
 80018f8:	fb01 f004 	mul.w	r0, r1, r4
 80018fc:	4428      	add	r0, r5
 80018fe:	fba1 1203 	umull	r1, r2, r1, r3
 8001902:	1883      	adds	r3, r0, r2
 8001904:	461a      	mov	r2, r3
 8001906:	f04f 0300 	mov.w	r3, #0
 800190a:	f04f 0400 	mov.w	r4, #0
 800190e:	0e4b      	lsrs	r3, r1, #25
 8001910:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8001914:	1654      	asrs	r4, r2, #25
 8001916:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001920:	b21b      	sxth	r3, r3
 8001922:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	fb04 f102 	mul.w	r1, r4, r2
 800192c:	697a      	ldr	r2, [r7, #20]
 800192e:	fb03 f202 	mul.w	r2, r3, r2
 8001932:	1888      	adds	r0, r1, r2
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	fba2 1203 	umull	r1, r2, r2, r3
 800193a:	1883      	adds	r3, r0, r2
 800193c:	461a      	mov	r2, r3
 800193e:	f04f 0300 	mov.w	r3, #0
 8001942:	f04f 0400 	mov.w	r4, #0
 8001946:	0ccb      	lsrs	r3, r1, #19
 8001948:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 800194c:	14d4      	asrs	r4, r2, #19
 800194e:	e9c7 3406 	strd	r3, r4, [r7, #24]

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8001952:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001956:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800195a:	eb11 0803 	adds.w	r8, r1, r3
 800195e:	eb42 0904 	adc.w	r9, r2, r4
 8001962:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001966:	eb13 0508 	adds.w	r5, r3, r8
 800196a:	eb44 0609 	adc.w	r6, r4, r9
 800196e:	f04f 0100 	mov.w	r1, #0
 8001972:	f04f 0200 	mov.w	r2, #0
 8001976:	0a29      	lsrs	r1, r5, #8
 8001978:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 800197c:	1232      	asrs	r2, r6, #8
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001984:	b21d      	sxth	r5, r3
 8001986:	ea4f 76e5 	mov.w	r6, r5, asr #31
 800198a:	f04f 0800 	mov.w	r8, #0
 800198e:	f04f 0900 	mov.w	r9, #0
 8001992:	ea4f 1906 	mov.w	r9, r6, lsl #4
 8001996:	ea49 7915 	orr.w	r9, r9, r5, lsr #28
 800199a:	ea4f 1805 	mov.w	r8, r5, lsl #4
 800199e:	eb18 0301 	adds.w	r3, r8, r1
 80019a2:	eb49 0402 	adc.w	r4, r9, r2
 80019a6:	e9c7 3404 	strd	r3, r4, [r7, #16]
	return p;
 80019aa:	693b      	ldr	r3, [r7, #16]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3728      	adds	r7, #40	; 0x28
 80019b0:	46bd      	mov	sp, r7
 80019b2:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}

080019b6 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 80019b6:	b480      	push	{r7}
 80019b8:	b087      	sub	sp, #28
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	60f8      	str	r0, [r7, #12]
 80019be:	60b9      	str	r1, [r7, #8]
 80019c0:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 80019c8:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	039a      	lsls	r2, r3, #14
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80019d4:	051b      	lsls	r3, r3, #20
 80019d6:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80019de:	4619      	mov	r1, r3
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	fb03 f301 	mul.w	r3, r3, r1
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80019ec:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 80019ee:	68fa      	ldr	r2, [r7, #12]
 80019f0:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 80019f4:	4611      	mov	r1, r2
 80019f6:	697a      	ldr	r2, [r7, #20]
 80019f8:	fb02 f201 	mul.w	r2, r2, r1
 80019fc:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 80019fe:	68f9      	ldr	r1, [r7, #12]
 8001a00:	7f09      	ldrb	r1, [r1, #28]
 8001a02:	4608      	mov	r0, r1
 8001a04:	6979      	ldr	r1, [r7, #20]
 8001a06:	fb01 f100 	mul.w	r1, r1, r0
 8001a0a:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001a0c:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001a10:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001a14:	1292      	asrs	r2, r2, #10
 8001a16:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001a1a:	68f9      	ldr	r1, [r7, #12]
 8001a1c:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001a20:	fb01 f202 	mul.w	r2, r1, r2
 8001a24:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001a28:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001a2a:	fb02 f303 	mul.w	r3, r2, r3
 8001a2e:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	13db      	asrs	r3, r3, #15
 8001a34:	697a      	ldr	r2, [r7, #20]
 8001a36:	13d2      	asrs	r2, r2, #15
 8001a38:	fb02 f303 	mul.w	r3, r2, r3
 8001a3c:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8001a3e:	68fa      	ldr	r2, [r7, #12]
 8001a40:	7e12      	ldrb	r2, [r2, #24]
 8001a42:	fb02 f303 	mul.w	r3, r2, r3
 8001a46:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8001a48:	697a      	ldr	r2, [r7, #20]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001a54:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001a5c:	bfa8      	it	ge
 8001a5e:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001a62:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	131b      	asrs	r3, r3, #12
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	371c      	adds	r7, #28
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b08c      	sub	sp, #48	; 0x30
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
 8001a80:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001a88:	2b60      	cmp	r3, #96	; 0x60
 8001a8a:	d007      	beq.n	8001a9c <bmp280_read_fixed+0x28>
		if (humidity)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d002      	beq.n	8001a98 <bmp280_read_fixed+0x24>
			*humidity = 0;
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <bmp280_read_fixed+0x32>
 8001aa2:	2308      	movs	r3, #8
 8001aa4:	e000      	b.n	8001aa8 <bmp280_read_fixed+0x34>
 8001aa6:	2306      	movs	r3, #6
 8001aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8001aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	f107 0218 	add.w	r2, r7, #24
 8001ab2:	21f7      	movs	r1, #247	; 0xf7
 8001ab4:	68f8      	ldr	r0, [r7, #12]
 8001ab6:	f7ff fba2 	bl	80011fe <read_data>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <bmp280_read_fixed+0x50>
		return false;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	e038      	b.n	8001b36 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001ac4:	7e3b      	ldrb	r3, [r7, #24]
 8001ac6:	031a      	lsls	r2, r3, #12
 8001ac8:	7e7b      	ldrb	r3, [r7, #25]
 8001aca:	011b      	lsls	r3, r3, #4
 8001acc:	4313      	orrs	r3, r2
 8001ace:	7eba      	ldrb	r2, [r7, #26]
 8001ad0:	0912      	lsrs	r2, r2, #4
 8001ad2:	b2d2      	uxtb	r2, r2
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001ad8:	7efb      	ldrb	r3, [r7, #27]
 8001ada:	031a      	lsls	r2, r3, #12
 8001adc:	7f3b      	ldrb	r3, [r7, #28]
 8001ade:	011b      	lsls	r3, r3, #4
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	7f7a      	ldrb	r2, [r7, #29]
 8001ae4:	0912      	lsrs	r2, r2, #4
 8001ae6:	b2d2      	uxtb	r2, r2
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8001aec:	f107 0314 	add.w	r3, r7, #20
 8001af0:	461a      	mov	r2, r3
 8001af2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001af4:	68f8      	ldr	r0, [r7, #12]
 8001af6:	f7ff fd7b 	bl	80015f0 <compensate_temperature>
 8001afa:	4602      	mov	r2, r0
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	461a      	mov	r2, r3
 8001b04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b06:	68f8      	ldr	r0, [r7, #12]
 8001b08:	f7ff fdab 	bl	8001662 <compensate_pressure>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d00d      	beq.n	8001b34 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001b18:	7fbb      	ldrb	r3, [r7, #30]
 8001b1a:	021b      	lsls	r3, r3, #8
 8001b1c:	7ffa      	ldrb	r2, [r7, #31]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	461a      	mov	r2, r3
 8001b26:	6a39      	ldr	r1, [r7, #32]
 8001b28:	68f8      	ldr	r0, [r7, #12]
 8001b2a:	f7ff ff44 	bl	80019b6 <compensate_humidity>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001b34:	2301      	movs	r3, #1
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3730      	adds	r7, #48	; 0x30
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
	...

08001b40 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b088      	sub	sp, #32
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
 8001b4c:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d002      	beq.n	8001b5a <bmp280_read_float+0x1a>
 8001b54:	f107 0314 	add.w	r3, r7, #20
 8001b58:	e000      	b.n	8001b5c <bmp280_read_float+0x1c>
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	f107 0218 	add.w	r2, r7, #24
 8001b60:	f107 011c 	add.w	r1, r7, #28
 8001b64:	68f8      	ldr	r0, [r7, #12]
 8001b66:	f7ff ff85 	bl	8001a74 <bmp280_read_fixed>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d028      	beq.n	8001bc2 <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	ee07 3a90 	vmov	s15, r3
 8001b76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b7a:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001bcc <bmp280_read_float+0x8c>
 8001b7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	ee07 3a90 	vmov	s15, r3
 8001b8e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b92:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001bd0 <bmp280_read_float+0x90>
 8001b96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d00b      	beq.n	8001bbe <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	ee07 3a90 	vmov	s15, r3
 8001bac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001bb0:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001bd4 <bmp280_read_float+0x94>
 8001bb4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e000      	b.n	8001bc4 <bmp280_read_float+0x84>
	}

	return false;
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3720      	adds	r7, #32
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	42c80000 	.word	0x42c80000
 8001bd0:	43800000 	.word	0x43800000
 8001bd4:	44800000 	.word	0x44800000

08001bd8 <bmp280_read_altitude>:

float bmp280_read_altitude(float pressurehPa, float seaLevelPressurehPa){
 8001bd8:	b590      	push	{r4, r7, lr}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	ed87 0a01 	vstr	s0, [r7, #4]
 8001be2:	edc7 0a00 	vstr	s1, [r7]
	float altitude = 44330 * (1.0 - pow(pressurehPa / seaLevelPressurehPa, 0.1903));
 8001be6:	ed97 7a01 	vldr	s14, [r7, #4]
 8001bea:	edd7 7a00 	vldr	s15, [r7]
 8001bee:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001bf2:	ee16 0a90 	vmov	r0, s13
 8001bf6:	f7fe fca7 	bl	8000548 <__aeabi_f2d>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	460c      	mov	r4, r1
 8001bfe:	ed9f 1b14 	vldr	d1, [pc, #80]	; 8001c50 <bmp280_read_altitude+0x78>
 8001c02:	ec44 3b10 	vmov	d0, r3, r4
 8001c06:	f009 f90b 	bl	800ae20 <pow>
 8001c0a:	ec54 3b10 	vmov	r3, r4, d0
 8001c0e:	461a      	mov	r2, r3
 8001c10:	4623      	mov	r3, r4
 8001c12:	f04f 0000 	mov.w	r0, #0
 8001c16:	4912      	ldr	r1, [pc, #72]	; (8001c60 <bmp280_read_altitude+0x88>)
 8001c18:	f7fe fb36 	bl	8000288 <__aeabi_dsub>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	460c      	mov	r4, r1
 8001c20:	4618      	mov	r0, r3
 8001c22:	4621      	mov	r1, r4
 8001c24:	a30c      	add	r3, pc, #48	; (adr r3, 8001c58 <bmp280_read_altitude+0x80>)
 8001c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c2a:	f7fe fce5 	bl	80005f8 <__aeabi_dmul>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	460c      	mov	r4, r1
 8001c32:	4618      	mov	r0, r3
 8001c34:	4621      	mov	r1, r4
 8001c36:	f7fe ffd7 	bl	8000be8 <__aeabi_d2f>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	60fb      	str	r3, [r7, #12]
	return altitude;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	ee07 3a90 	vmov	s15, r3
}
 8001c44:	eeb0 0a67 	vmov.f32	s0, s15
 8001c48:	3714      	adds	r7, #20
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd90      	pop	{r4, r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	1a36e2eb 	.word	0x1a36e2eb
 8001c54:	3fc85bc0 	.word	0x3fc85bc0
 8001c58:	00000000 	.word	0x00000000
 8001c5c:	40e5a540 	.word	0x40e5a540
 8001c60:	3ff00000 	.word	0x3ff00000

08001c64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c64:	b590      	push	{r4, r7, lr}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c6a:	f002 facf 	bl	800420c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c6e:	f000 f95f 	bl	8001f30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c72:	f000 fde9 	bl	8002848 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c76:	f000 fdbf 	bl	80027f8 <MX_DMA_Init>
  MX_I2C1_Init();
 8001c7a:	f000 f9b5 	bl	8001fe8 <MX_I2C1_Init>
  MX_UART4_Init();
 8001c7e:	f000 fd13 	bl	80026a8 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8001c82:	f000 fd3b 	bl	80026fc <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001c86:	f000 fd8d 	bl	80027a4 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8001c8a:	f000 fd61 	bl	8002750 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001c8e:	f000 fb11 	bl	80022b4 <MX_TIM3_Init>
  MX_I2C3_Init();
 8001c92:	f000 f9d7 	bl	8002044 <MX_I2C3_Init>
  MX_TIM1_Init();
 8001c96:	f000 fa03 	bl	80020a0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001c9a:	f000 fa75 	bl	8002188 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001c9e:	f000 fb85 	bl	80023ac <MX_TIM4_Init>
  MX_TIM5_Init();
 8001ca2:	f000 fbff 	bl	80024a4 <MX_TIM5_Init>
  MX_TIM9_Init();
 8001ca6:	f000 fca3 	bl	80025f0 <MX_TIM9_Init>
  MX_TIM6_Init();
 8001caa:	f000 fc6b 	bl	8002584 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  //Kalibrasi Tilt

  initPWM_DATA(&RC_CH1, &htim3, TIM_CHANNEL_2);
 8001cae:	2204      	movs	r2, #4
 8001cb0:	497f      	ldr	r1, [pc, #508]	; (8001eb0 <main+0x24c>)
 8001cb2:	4880      	ldr	r0, [pc, #512]	; (8001eb4 <main+0x250>)
 8001cb4:	f001 f9a0 	bl	8002ff8 <initPWM_DATA>
  initPWM_DATA(&RC_CH2, &htim9, TIM_CHANNEL_2);
 8001cb8:	2204      	movs	r2, #4
 8001cba:	497f      	ldr	r1, [pc, #508]	; (8001eb8 <main+0x254>)
 8001cbc:	487f      	ldr	r0, [pc, #508]	; (8001ebc <main+0x258>)
 8001cbe:	f001 f99b 	bl	8002ff8 <initPWM_DATA>
  initPWM_DATA(&RC_CH3, &htim5, TIM_CHANNEL_1);
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	497e      	ldr	r1, [pc, #504]	; (8001ec0 <main+0x25c>)
 8001cc6:	487f      	ldr	r0, [pc, #508]	; (8001ec4 <main+0x260>)
 8001cc8:	f001 f996 	bl	8002ff8 <initPWM_DATA>
  initPWM_DATA(&RC_CH4, &htim3, TIM_CHANNEL_1);
 8001ccc:	2200      	movs	r2, #0
 8001cce:	4978      	ldr	r1, [pc, #480]	; (8001eb0 <main+0x24c>)
 8001cd0:	487d      	ldr	r0, [pc, #500]	; (8001ec8 <main+0x264>)
 8001cd2:	f001 f991 	bl	8002ff8 <initPWM_DATA>
  initPWM_DATA(&RC_CH5, &htim4, TIM_CHANNEL_1);
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	497c      	ldr	r1, [pc, #496]	; (8001ecc <main+0x268>)
 8001cda:	487d      	ldr	r0, [pc, #500]	; (8001ed0 <main+0x26c>)
 8001cdc:	f001 f98c 	bl	8002ff8 <initPWM_DATA>
  //initTimer_READ_DATA(&RC_CH6, &htim3, TIM_CHANNEL_2);

  IMUInit();
 8001ce0:	f001 faf0 	bl	80032c4 <IMUInit>
  __HAL_UART_ENABLE_IT(&huart4, UART_IT_IDLE);
 8001ce4:	4b7b      	ldr	r3, [pc, #492]	; (8001ed4 <main+0x270>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	68da      	ldr	r2, [r3, #12]
 8001cea:	4b7a      	ldr	r3, [pc, #488]	; (8001ed4 <main+0x270>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f042 0210 	orr.w	r2, r2, #16
 8001cf2:	60da      	str	r2, [r3, #12]
  huart4Status = HAL_UART_Receive_DMA(&huart4, GPSBuffer, 800);
 8001cf4:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001cf8:	4977      	ldr	r1, [pc, #476]	; (8001ed8 <main+0x274>)
 8001cfa:	4876      	ldr	r0, [pc, #472]	; (8001ed4 <main+0x270>)
 8001cfc:	f006 f89e 	bl	8007e3c <HAL_UART_Receive_DMA>
 8001d00:	4603      	mov	r3, r0
 8001d02:	461a      	mov	r2, r3
 8001d04:	4b75      	ldr	r3, [pc, #468]	; (8001edc <main+0x278>)
 8001d06:	701a      	strb	r2, [r3, #0]

  kalman_init(&kalman_altitude, 0.1, 0.1, 0.03);
 8001d08:	ed9f 1a75 	vldr	s2, [pc, #468]	; 8001ee0 <main+0x27c>
 8001d0c:	eddf 0a75 	vldr	s1, [pc, #468]	; 8001ee4 <main+0x280>
 8001d10:	ed9f 0a74 	vldr	s0, [pc, #464]	; 8001ee4 <main+0x280>
 8001d14:	4874      	ldr	r0, [pc, #464]	; (8001ee8 <main+0x284>)
 8001d16:	f7ff f987 	bl	8001028 <kalman_init>
  BMPInit();
 8001d1a:	f001 f9f3 	bl	8003104 <BMPInit>
  //HMC5883LInit();
  //HAL_UART_Receive_IT(&huart4, GPSBuffer, 10);
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001d1e:	2108      	movs	r1, #8
 8001d20:	4872      	ldr	r0, [pc, #456]	; (8001eec <main+0x288>)
 8001d22:	f004 fe23 	bl	800696c <HAL_TIM_PWM_Start>
  CalibrateESC();
 8001d26:	f001 f9af 	bl	8003088 <CalibrateESC>
  //HAL_TIM_Base_Start_IT(&htim6);
  HAL_TIM_IC_Start_IT(RC_CH1.htim, RC_CH1.channel);
 8001d2a:	4b62      	ldr	r3, [pc, #392]	; (8001eb4 <main+0x250>)
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	4b61      	ldr	r3, [pc, #388]	; (8001eb4 <main+0x250>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	4619      	mov	r1, r3
 8001d34:	4610      	mov	r0, r2
 8001d36:	f004 fee5 	bl	8006b04 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(RC_CH2.htim, RC_CH2.channel);
 8001d3a:	4b60      	ldr	r3, [pc, #384]	; (8001ebc <main+0x258>)
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	4b5f      	ldr	r3, [pc, #380]	; (8001ebc <main+0x258>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	4619      	mov	r1, r3
 8001d44:	4610      	mov	r0, r2
 8001d46:	f004 fedd 	bl	8006b04 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(RC_CH3.htim, RC_CH3.channel);
 8001d4a:	4b5e      	ldr	r3, [pc, #376]	; (8001ec4 <main+0x260>)
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	4b5d      	ldr	r3, [pc, #372]	; (8001ec4 <main+0x260>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	4619      	mov	r1, r3
 8001d54:	4610      	mov	r0, r2
 8001d56:	f004 fed5 	bl	8006b04 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(RC_CH4.htim, RC_CH4.channel);
 8001d5a:	4b5b      	ldr	r3, [pc, #364]	; (8001ec8 <main+0x264>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	4b5a      	ldr	r3, [pc, #360]	; (8001ec8 <main+0x264>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	4619      	mov	r1, r3
 8001d64:	4610      	mov	r0, r2
 8001d66:	f004 fecd 	bl	8006b04 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(RC_CH5.htim, RC_CH5.channel);
 8001d6a:	4b59      	ldr	r3, [pc, #356]	; (8001ed0 <main+0x26c>)
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	4b58      	ldr	r3, [pc, #352]	; (8001ed0 <main+0x26c>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	4619      	mov	r1, r3
 8001d74:	4610      	mov	r0, r2
 8001d76:	f004 fec5 	bl	8006b04 <HAL_TIM_IC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  kinematic(w_output, RC_CH1.DutyCycleVal, RC_CH2.DutyCycleVal, RC_CH3.DutyCycleVal, RC_CH4.DutyCycleVal);
 8001d7a:	4b4e      	ldr	r3, [pc, #312]	; (8001eb4 <main+0x250>)
 8001d7c:	6919      	ldr	r1, [r3, #16]
 8001d7e:	4b4f      	ldr	r3, [pc, #316]	; (8001ebc <main+0x258>)
 8001d80:	691a      	ldr	r2, [r3, #16]
 8001d82:	4b50      	ldr	r3, [pc, #320]	; (8001ec4 <main+0x260>)
 8001d84:	6918      	ldr	r0, [r3, #16]
 8001d86:	4b50      	ldr	r3, [pc, #320]	; (8001ec8 <main+0x264>)
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	9300      	str	r3, [sp, #0]
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	4858      	ldr	r0, [pc, #352]	; (8001ef0 <main+0x28c>)
 8001d90:	f000 fdba 	bl	8002908 <kinematic>

	  strSize = sprintf((char*)buffer, "ESC1: %lu\r\n", w_output[0]);
 8001d94:	4b56      	ldr	r3, [pc, #344]	; (8001ef0 <main+0x28c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4956      	ldr	r1, [pc, #344]	; (8001ef4 <main+0x290>)
 8001d9c:	4856      	ldr	r0, [pc, #344]	; (8001ef8 <main+0x294>)
 8001d9e:	f007 fc5f 	bl	8009660 <siprintf>
 8001da2:	4603      	mov	r3, r0
 8001da4:	b29a      	uxth	r2, r3
 8001da6:	4b55      	ldr	r3, [pc, #340]	; (8001efc <main+0x298>)
 8001da8:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1, buffer, strSize, 100);
 8001daa:	4b54      	ldr	r3, [pc, #336]	; (8001efc <main+0x298>)
 8001dac:	881a      	ldrh	r2, [r3, #0]
 8001dae:	2364      	movs	r3, #100	; 0x64
 8001db0:	4951      	ldr	r1, [pc, #324]	; (8001ef8 <main+0x294>)
 8001db2:	4853      	ldr	r0, [pc, #332]	; (8001f00 <main+0x29c>)
 8001db4:	f005 ffa9 	bl	8007d0a <HAL_UART_Transmit>

	  strSize = sprintf((char*)buffer, "ESC2: %lu\r\n", w_output[1]);
 8001db8:	4b4d      	ldr	r3, [pc, #308]	; (8001ef0 <main+0x28c>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	4951      	ldr	r1, [pc, #324]	; (8001f04 <main+0x2a0>)
 8001dc0:	484d      	ldr	r0, [pc, #308]	; (8001ef8 <main+0x294>)
 8001dc2:	f007 fc4d 	bl	8009660 <siprintf>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	b29a      	uxth	r2, r3
 8001dca:	4b4c      	ldr	r3, [pc, #304]	; (8001efc <main+0x298>)
 8001dcc:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1, buffer, strSize, 100);
 8001dce:	4b4b      	ldr	r3, [pc, #300]	; (8001efc <main+0x298>)
 8001dd0:	881a      	ldrh	r2, [r3, #0]
 8001dd2:	2364      	movs	r3, #100	; 0x64
 8001dd4:	4948      	ldr	r1, [pc, #288]	; (8001ef8 <main+0x294>)
 8001dd6:	484a      	ldr	r0, [pc, #296]	; (8001f00 <main+0x29c>)
 8001dd8:	f005 ff97 	bl	8007d0a <HAL_UART_Transmit>

	  strSize = sprintf((char*)buffer, "ESC3: %lu\r\n", w_output[2]);
 8001ddc:	4b44      	ldr	r3, [pc, #272]	; (8001ef0 <main+0x28c>)
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	461a      	mov	r2, r3
 8001de2:	4949      	ldr	r1, [pc, #292]	; (8001f08 <main+0x2a4>)
 8001de4:	4844      	ldr	r0, [pc, #272]	; (8001ef8 <main+0x294>)
 8001de6:	f007 fc3b 	bl	8009660 <siprintf>
 8001dea:	4603      	mov	r3, r0
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	4b43      	ldr	r3, [pc, #268]	; (8001efc <main+0x298>)
 8001df0:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1, buffer, strSize, 100);
 8001df2:	4b42      	ldr	r3, [pc, #264]	; (8001efc <main+0x298>)
 8001df4:	881a      	ldrh	r2, [r3, #0]
 8001df6:	2364      	movs	r3, #100	; 0x64
 8001df8:	493f      	ldr	r1, [pc, #252]	; (8001ef8 <main+0x294>)
 8001dfa:	4841      	ldr	r0, [pc, #260]	; (8001f00 <main+0x29c>)
 8001dfc:	f005 ff85 	bl	8007d0a <HAL_UART_Transmit>

	  strSize = sprintf((char*)buffer, "ESC4: %lu\r\n", w_output[3]);
 8001e00:	4b3b      	ldr	r3, [pc, #236]	; (8001ef0 <main+0x28c>)
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	461a      	mov	r2, r3
 8001e06:	4941      	ldr	r1, [pc, #260]	; (8001f0c <main+0x2a8>)
 8001e08:	483b      	ldr	r0, [pc, #236]	; (8001ef8 <main+0x294>)
 8001e0a:	f007 fc29 	bl	8009660 <siprintf>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	b29a      	uxth	r2, r3
 8001e12:	4b3a      	ldr	r3, [pc, #232]	; (8001efc <main+0x298>)
 8001e14:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1, buffer, strSize, 100);
 8001e16:	4b39      	ldr	r3, [pc, #228]	; (8001efc <main+0x298>)
 8001e18:	881a      	ldrh	r2, [r3, #0]
 8001e1a:	2364      	movs	r3, #100	; 0x64
 8001e1c:	4936      	ldr	r1, [pc, #216]	; (8001ef8 <main+0x294>)
 8001e1e:	4838      	ldr	r0, [pc, #224]	; (8001f00 <main+0x29c>)
 8001e20:	f005 ff73 	bl	8007d0a <HAL_UART_Transmit>

	  HAL_UART_Transmit(&huart1, "\r\n", 2, 5);
 8001e24:	2305      	movs	r3, #5
 8001e26:	2202      	movs	r2, #2
 8001e28:	4939      	ldr	r1, [pc, #228]	; (8001f10 <main+0x2ac>)
 8001e2a:	4835      	ldr	r0, [pc, #212]	; (8001f00 <main+0x29c>)
 8001e2c:	f005 ff6d 	bl	8007d0a <HAL_UART_Transmit>

	  HAL_Delay(200);
 8001e30:	20c8      	movs	r0, #200	; 0xc8
 8001e32:	f002 fa5d 	bl	80042f0 <HAL_Delay>

	  if(!bmp280_is_measuring(&bmp280)){
 8001e36:	4837      	ldr	r0, [pc, #220]	; (8001f14 <main+0x2b0>)
 8001e38:	f7ff fbbe 	bl	80015b8 <bmp280_is_measuring>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	f083 0301 	eor.w	r3, r3, #1
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d098      	beq.n	8001d7a <main+0x116>
		  bmp280_read_float(&bmp280, &temperature, &pressure, &humidity);
 8001e48:	4b33      	ldr	r3, [pc, #204]	; (8001f18 <main+0x2b4>)
 8001e4a:	4a34      	ldr	r2, [pc, #208]	; (8001f1c <main+0x2b8>)
 8001e4c:	4934      	ldr	r1, [pc, #208]	; (8001f20 <main+0x2bc>)
 8001e4e:	4831      	ldr	r0, [pc, #196]	; (8001f14 <main+0x2b0>)
 8001e50:	f7ff fe76 	bl	8001b40 <bmp280_read_float>
		  altitude = bmp280_read_altitude(pressure/100, pressureRef/100);
 8001e54:	4b31      	ldr	r3, [pc, #196]	; (8001f1c <main+0x2b8>)
 8001e56:	edd3 7a00 	vldr	s15, [r3]
 8001e5a:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001f24 <main+0x2c0>
 8001e5e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001e62:	4b31      	ldr	r3, [pc, #196]	; (8001f28 <main+0x2c4>)
 8001e64:	edd3 7a00 	vldr	s15, [r3]
 8001e68:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001f24 <main+0x2c0>
 8001e6c:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8001e70:	eef0 0a46 	vmov.f32	s1, s12
 8001e74:	eeb0 0a66 	vmov.f32	s0, s13
 8001e78:	f7ff feae 	bl	8001bd8 <bmp280_read_altitude>
 8001e7c:	ed87 0a01 	vstr	s0, [r7, #4]
		  float estimated_altitude = kalman_updateEstimate(&kalman_altitude, altitude);
 8001e80:	ed97 0a01 	vldr	s0, [r7, #4]
 8001e84:	4818      	ldr	r0, [pc, #96]	; (8001ee8 <main+0x284>)
 8001e86:	f7ff f8e9 	bl	800105c <kalman_updateEstimate>
 8001e8a:	ed87 0a00 	vstr	s0, [r7]
		  strSize = sprintf((char*)buffer, "%f\r\n", estimated_altitude);
 8001e8e:	6838      	ldr	r0, [r7, #0]
 8001e90:	f7fe fb5a 	bl	8000548 <__aeabi_f2d>
 8001e94:	4603      	mov	r3, r0
 8001e96:	460c      	mov	r4, r1
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4623      	mov	r3, r4
 8001e9c:	4923      	ldr	r1, [pc, #140]	; (8001f2c <main+0x2c8>)
 8001e9e:	4816      	ldr	r0, [pc, #88]	; (8001ef8 <main+0x294>)
 8001ea0:	f007 fbde 	bl	8009660 <siprintf>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	4b14      	ldr	r3, [pc, #80]	; (8001efc <main+0x298>)
 8001eaa:	801a      	strh	r2, [r3, #0]
	  kinematic(w_output, RC_CH1.DutyCycleVal, RC_CH2.DutyCycleVal, RC_CH3.DutyCycleVal, RC_CH4.DutyCycleVal);
 8001eac:	e765      	b.n	8001d7a <main+0x116>
 8001eae:	bf00      	nop
 8001eb0:	20000800 	.word	0x20000800
 8001eb4:	200007e0 	.word	0x200007e0
 8001eb8:	200009fc 	.word	0x200009fc
 8001ebc:	20000b90 	.word	0x20000b90
 8001ec0:	200007a0 	.word	0x200007a0
 8001ec4:	20000ac0 	.word	0x20000ac0
 8001ec8:	200003d0 	.word	0x200003d0
 8001ecc:	20000348 	.word	0x20000348
 8001ed0:	20000b70 	.word	0x20000b70
 8001ed4:	20000a40 	.word	0x20000a40
 8001ed8:	20000450 	.word	0x20000450
 8001edc:	20000a3c 	.word	0x20000a3c
 8001ee0:	3cf5c28f 	.word	0x3cf5c28f
 8001ee4:	3dcccccd 	.word	0x3dcccccd
 8001ee8:	20000770 	.word	0x20000770
 8001eec:	20000a80 	.word	0x20000a80
 8001ef0:	20000440 	.word	0x20000440
 8001ef4:	0800bee8 	.word	0x0800bee8
 8001ef8:	2000088c 	.word	0x2000088c
 8001efc:	20000b8c 	.word	0x20000b8c
 8001f00:	2000084c 	.word	0x2000084c
 8001f04:	0800bef4 	.word	0x0800bef4
 8001f08:	0800bf00 	.word	0x0800bf00
 8001f0c:	0800bf0c 	.word	0x0800bf0c
 8001f10:	0800bf18 	.word	0x0800bf18
 8001f14:	20000aec 	.word	0x20000aec
 8001f18:	20000848 	.word	0x20000848
 8001f1c:	20000844 	.word	0x20000844
 8001f20:	2000078c 	.word	0x2000078c
 8001f24:	42c80000 	.word	0x42c80000
 8001f28:	20000200 	.word	0x20000200
 8001f2c:	0800bf1c 	.word	0x0800bf1c

08001f30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b094      	sub	sp, #80	; 0x50
 8001f34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f36:	f107 0320 	add.w	r3, r7, #32
 8001f3a:	2230      	movs	r2, #48	; 0x30
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f006 ff2a 	bl	8008d98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f44:	f107 030c 	add.w	r3, r7, #12
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	605a      	str	r2, [r3, #4]
 8001f4e:	609a      	str	r2, [r3, #8]
 8001f50:	60da      	str	r2, [r3, #12]
 8001f52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f54:	2300      	movs	r3, #0
 8001f56:	60bb      	str	r3, [r7, #8]
 8001f58:	4b21      	ldr	r3, [pc, #132]	; (8001fe0 <SystemClock_Config+0xb0>)
 8001f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5c:	4a20      	ldr	r2, [pc, #128]	; (8001fe0 <SystemClock_Config+0xb0>)
 8001f5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f62:	6413      	str	r3, [r2, #64]	; 0x40
 8001f64:	4b1e      	ldr	r3, [pc, #120]	; (8001fe0 <SystemClock_Config+0xb0>)
 8001f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6c:	60bb      	str	r3, [r7, #8]
 8001f6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f70:	2300      	movs	r3, #0
 8001f72:	607b      	str	r3, [r7, #4]
 8001f74:	4b1b      	ldr	r3, [pc, #108]	; (8001fe4 <SystemClock_Config+0xb4>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a1a      	ldr	r2, [pc, #104]	; (8001fe4 <SystemClock_Config+0xb4>)
 8001f7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f7e:	6013      	str	r3, [r2, #0]
 8001f80:	4b18      	ldr	r3, [pc, #96]	; (8001fe4 <SystemClock_Config+0xb4>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f88:	607b      	str	r3, [r7, #4]
 8001f8a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f94:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001f96:	2300      	movs	r3, #0
 8001f98:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f9a:	f107 0320 	add.w	r3, r7, #32
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f004 f824 	bl	8005fec <HAL_RCC_OscConfig>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001faa:	f001 fc19 	bl	80037e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fae:	230f      	movs	r3, #15
 8001fb0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001fc2:	f107 030c 	add.w	r3, r7, #12
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f004 fa7f 	bl	80064cc <HAL_RCC_ClockConfig>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001fd4:	f001 fc04 	bl	80037e0 <Error_Handler>
  }
}
 8001fd8:	bf00      	nop
 8001fda:	3750      	adds	r7, #80	; 0x50
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40023800 	.word	0x40023800
 8001fe4:	40007000 	.word	0x40007000

08001fe8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001fec:	4b12      	ldr	r3, [pc, #72]	; (8002038 <MX_I2C1_Init+0x50>)
 8001fee:	4a13      	ldr	r2, [pc, #76]	; (800203c <MX_I2C1_Init+0x54>)
 8001ff0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001ff2:	4b11      	ldr	r3, [pc, #68]	; (8002038 <MX_I2C1_Init+0x50>)
 8001ff4:	4a12      	ldr	r2, [pc, #72]	; (8002040 <MX_I2C1_Init+0x58>)
 8001ff6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ff8:	4b0f      	ldr	r3, [pc, #60]	; (8002038 <MX_I2C1_Init+0x50>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ffe:	4b0e      	ldr	r3, [pc, #56]	; (8002038 <MX_I2C1_Init+0x50>)
 8002000:	2200      	movs	r2, #0
 8002002:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002004:	4b0c      	ldr	r3, [pc, #48]	; (8002038 <MX_I2C1_Init+0x50>)
 8002006:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800200a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800200c:	4b0a      	ldr	r3, [pc, #40]	; (8002038 <MX_I2C1_Init+0x50>)
 800200e:	2200      	movs	r2, #0
 8002010:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002012:	4b09      	ldr	r3, [pc, #36]	; (8002038 <MX_I2C1_Init+0x50>)
 8002014:	2200      	movs	r2, #0
 8002016:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002018:	4b07      	ldr	r3, [pc, #28]	; (8002038 <MX_I2C1_Init+0x50>)
 800201a:	2200      	movs	r2, #0
 800201c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800201e:	4b06      	ldr	r3, [pc, #24]	; (8002038 <MX_I2C1_Init+0x50>)
 8002020:	2200      	movs	r2, #0
 8002022:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002024:	4804      	ldr	r0, [pc, #16]	; (8002038 <MX_I2C1_Init+0x50>)
 8002026:	f003 f831 	bl	800508c <HAL_I2C_Init>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002030:	f001 fbd6 	bl	80037e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002034:	bf00      	nop
 8002036:	bd80      	pop	{r7, pc}
 8002038:	200003ec 	.word	0x200003ec
 800203c:	40005400 	.word	0x40005400
 8002040:	000186a0 	.word	0x000186a0

08002044 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002048:	4b12      	ldr	r3, [pc, #72]	; (8002094 <MX_I2C3_Init+0x50>)
 800204a:	4a13      	ldr	r2, [pc, #76]	; (8002098 <MX_I2C3_Init+0x54>)
 800204c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800204e:	4b11      	ldr	r3, [pc, #68]	; (8002094 <MX_I2C3_Init+0x50>)
 8002050:	4a12      	ldr	r2, [pc, #72]	; (800209c <MX_I2C3_Init+0x58>)
 8002052:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002054:	4b0f      	ldr	r3, [pc, #60]	; (8002094 <MX_I2C3_Init+0x50>)
 8002056:	2200      	movs	r2, #0
 8002058:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800205a:	4b0e      	ldr	r3, [pc, #56]	; (8002094 <MX_I2C3_Init+0x50>)
 800205c:	2200      	movs	r2, #0
 800205e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002060:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <MX_I2C3_Init+0x50>)
 8002062:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002066:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002068:	4b0a      	ldr	r3, [pc, #40]	; (8002094 <MX_I2C3_Init+0x50>)
 800206a:	2200      	movs	r2, #0
 800206c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800206e:	4b09      	ldr	r3, [pc, #36]	; (8002094 <MX_I2C3_Init+0x50>)
 8002070:	2200      	movs	r2, #0
 8002072:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002074:	4b07      	ldr	r3, [pc, #28]	; (8002094 <MX_I2C3_Init+0x50>)
 8002076:	2200      	movs	r2, #0
 8002078:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800207a:	4b06      	ldr	r3, [pc, #24]	; (8002094 <MX_I2C3_Init+0x50>)
 800207c:	2200      	movs	r2, #0
 800207e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002080:	4804      	ldr	r0, [pc, #16]	; (8002094 <MX_I2C3_Init+0x50>)
 8002082:	f003 f803 	bl	800508c <HAL_I2C_Init>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800208c:	f001 fba8 	bl	80037e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002090:	bf00      	nop
 8002092:	bd80      	pop	{r7, pc}
 8002094:	200002f4 	.word	0x200002f4
 8002098:	40005c00 	.word	0x40005c00
 800209c:	000186a0 	.word	0x000186a0

080020a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b08a      	sub	sp, #40	; 0x28
 80020a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020a6:	f107 0318 	add.w	r3, r7, #24
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	605a      	str	r2, [r3, #4]
 80020b0:	609a      	str	r2, [r3, #8]
 80020b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020b4:	f107 0310 	add.w	r3, r7, #16
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80020be:	463b      	mov	r3, r7
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	605a      	str	r2, [r3, #4]
 80020c6:	609a      	str	r2, [r3, #8]
 80020c8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80020ca:	4b2d      	ldr	r3, [pc, #180]	; (8002180 <MX_TIM1_Init+0xe0>)
 80020cc:	4a2d      	ldr	r2, [pc, #180]	; (8002184 <MX_TIM1_Init+0xe4>)
 80020ce:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16 - 1;
 80020d0:	4b2b      	ldr	r3, [pc, #172]	; (8002180 <MX_TIM1_Init+0xe0>)
 80020d2:	220f      	movs	r2, #15
 80020d4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020d6:	4b2a      	ldr	r3, [pc, #168]	; (8002180 <MX_TIM1_Init+0xe0>)
 80020d8:	2200      	movs	r2, #0
 80020da:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFFFF - 1;
 80020dc:	4b28      	ldr	r3, [pc, #160]	; (8002180 <MX_TIM1_Init+0xe0>)
 80020de:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80020e2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020e4:	4b26      	ldr	r3, [pc, #152]	; (8002180 <MX_TIM1_Init+0xe0>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80020ea:	4b25      	ldr	r3, [pc, #148]	; (8002180 <MX_TIM1_Init+0xe0>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020f0:	4b23      	ldr	r3, [pc, #140]	; (8002180 <MX_TIM1_Init+0xe0>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80020f6:	4822      	ldr	r0, [pc, #136]	; (8002180 <MX_TIM1_Init+0xe0>)
 80020f8:	f004 fbd8 	bl	80068ac <HAL_TIM_Base_Init>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8002102:	f001 fb6d 	bl	80037e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002106:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800210a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800210c:	f107 0318 	add.w	r3, r7, #24
 8002110:	4619      	mov	r1, r3
 8002112:	481b      	ldr	r0, [pc, #108]	; (8002180 <MX_TIM1_Init+0xe0>)
 8002114:	f004 ffc8 	bl	80070a8 <HAL_TIM_ConfigClockSource>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800211e:	f001 fb5f 	bl	80037e0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8002122:	4817      	ldr	r0, [pc, #92]	; (8002180 <MX_TIM1_Init+0xe0>)
 8002124:	f004 fcb8 	bl	8006a98 <HAL_TIM_IC_Init>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800212e:	f001 fb57 	bl	80037e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002132:	2300      	movs	r3, #0
 8002134:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002136:	2300      	movs	r3, #0
 8002138:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800213a:	f107 0310 	add.w	r3, r7, #16
 800213e:	4619      	mov	r1, r3
 8002140:	480f      	ldr	r0, [pc, #60]	; (8002180 <MX_TIM1_Init+0xe0>)
 8002142:	f005 fd05 	bl	8007b50 <HAL_TIMEx_MasterConfigSynchronization>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 800214c:	f001 fb48 	bl	80037e0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002150:	2300      	movs	r3, #0
 8002152:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002154:	2301      	movs	r3, #1
 8002156:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002158:	2300      	movs	r3, #0
 800215a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800215c:	2300      	movs	r3, #0
 800215e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002160:	463b      	mov	r3, r7
 8002162:	2200      	movs	r2, #0
 8002164:	4619      	mov	r1, r3
 8002166:	4806      	ldr	r0, [pc, #24]	; (8002180 <MX_TIM1_Init+0xe0>)
 8002168:	f004 fe3c 	bl	8006de4 <HAL_TIM_IC_ConfigChannel>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8002172:	f001 fb35 	bl	80037e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002176:	bf00      	nop
 8002178:	3728      	adds	r7, #40	; 0x28
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	200009bc 	.word	0x200009bc
 8002184:	40010000 	.word	0x40010000

08002188 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b08e      	sub	sp, #56	; 0x38
 800218c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800218e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	605a      	str	r2, [r3, #4]
 8002198:	609a      	str	r2, [r3, #8]
 800219a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800219c:	f107 0320 	add.w	r3, r7, #32
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021a6:	1d3b      	adds	r3, r7, #4
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	605a      	str	r2, [r3, #4]
 80021ae:	609a      	str	r2, [r3, #8]
 80021b0:	60da      	str	r2, [r3, #12]
 80021b2:	611a      	str	r2, [r3, #16]
 80021b4:	615a      	str	r2, [r3, #20]
 80021b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021b8:	4b3d      	ldr	r3, [pc, #244]	; (80022b0 <MX_TIM2_Init+0x128>)
 80021ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16 - 1;
 80021c0:	4b3b      	ldr	r3, [pc, #236]	; (80022b0 <MX_TIM2_Init+0x128>)
 80021c2:	220f      	movs	r2, #15
 80021c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021c6:	4b3a      	ldr	r3, [pc, #232]	; (80022b0 <MX_TIM2_Init+0x128>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000 - 1;
 80021cc:	4b38      	ldr	r3, [pc, #224]	; (80022b0 <MX_TIM2_Init+0x128>)
 80021ce:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80021d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021d4:	4b36      	ldr	r3, [pc, #216]	; (80022b0 <MX_TIM2_Init+0x128>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021da:	4b35      	ldr	r3, [pc, #212]	; (80022b0 <MX_TIM2_Init+0x128>)
 80021dc:	2200      	movs	r2, #0
 80021de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021e0:	4833      	ldr	r0, [pc, #204]	; (80022b0 <MX_TIM2_Init+0x128>)
 80021e2:	f004 fb63 	bl	80068ac <HAL_TIM_Base_Init>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80021ec:	f001 faf8 	bl	80037e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021f4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021fa:	4619      	mov	r1, r3
 80021fc:	482c      	ldr	r0, [pc, #176]	; (80022b0 <MX_TIM2_Init+0x128>)
 80021fe:	f004 ff53 	bl	80070a8 <HAL_TIM_ConfigClockSource>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002208:	f001 faea 	bl	80037e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800220c:	4828      	ldr	r0, [pc, #160]	; (80022b0 <MX_TIM2_Init+0x128>)
 800220e:	f004 fb78 	bl	8006902 <HAL_TIM_PWM_Init>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002218:	f001 fae2 	bl	80037e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800221c:	2300      	movs	r3, #0
 800221e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002220:	2300      	movs	r3, #0
 8002222:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002224:	f107 0320 	add.w	r3, r7, #32
 8002228:	4619      	mov	r1, r3
 800222a:	4821      	ldr	r0, [pc, #132]	; (80022b0 <MX_TIM2_Init+0x128>)
 800222c:	f005 fc90 	bl	8007b50 <HAL_TIMEx_MasterConfigSynchronization>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002236:	f001 fad3 	bl	80037e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800223a:	2360      	movs	r3, #96	; 0x60
 800223c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800223e:	2300      	movs	r3, #0
 8002240:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002242:	2300      	movs	r3, #0
 8002244:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002246:	2300      	movs	r3, #0
 8002248:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800224a:	1d3b      	adds	r3, r7, #4
 800224c:	2200      	movs	r2, #0
 800224e:	4619      	mov	r1, r3
 8002250:	4817      	ldr	r0, [pc, #92]	; (80022b0 <MX_TIM2_Init+0x128>)
 8002252:	f004 fe63 	bl	8006f1c <HAL_TIM_PWM_ConfigChannel>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800225c:	f001 fac0 	bl	80037e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002260:	1d3b      	adds	r3, r7, #4
 8002262:	2204      	movs	r2, #4
 8002264:	4619      	mov	r1, r3
 8002266:	4812      	ldr	r0, [pc, #72]	; (80022b0 <MX_TIM2_Init+0x128>)
 8002268:	f004 fe58 	bl	8006f1c <HAL_TIM_PWM_ConfigChannel>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8002272:	f001 fab5 	bl	80037e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002276:	1d3b      	adds	r3, r7, #4
 8002278:	2208      	movs	r2, #8
 800227a:	4619      	mov	r1, r3
 800227c:	480c      	ldr	r0, [pc, #48]	; (80022b0 <MX_TIM2_Init+0x128>)
 800227e:	f004 fe4d 	bl	8006f1c <HAL_TIM_PWM_ConfigChannel>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8002288:	f001 faaa 	bl	80037e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800228c:	1d3b      	adds	r3, r7, #4
 800228e:	220c      	movs	r2, #12
 8002290:	4619      	mov	r1, r3
 8002292:	4807      	ldr	r0, [pc, #28]	; (80022b0 <MX_TIM2_Init+0x128>)
 8002294:	f004 fe42 	bl	8006f1c <HAL_TIM_PWM_ConfigChannel>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 800229e:	f001 fa9f 	bl	80037e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80022a2:	4803      	ldr	r0, [pc, #12]	; (80022b0 <MX_TIM2_Init+0x128>)
 80022a4:	f001 fd10 	bl	8003cc8 <HAL_TIM_MspPostInit>

}
 80022a8:	bf00      	nop
 80022aa:	3738      	adds	r7, #56	; 0x38
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	20000a80 	.word	0x20000a80

080022b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b08a      	sub	sp, #40	; 0x28
 80022b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022ba:	f107 0318 	add.w	r3, r7, #24
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	605a      	str	r2, [r3, #4]
 80022c4:	609a      	str	r2, [r3, #8]
 80022c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022c8:	f107 0310 	add.w	r3, r7, #16
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80022d2:	463b      	mov	r3, r7
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	605a      	str	r2, [r3, #4]
 80022da:	609a      	str	r2, [r3, #8]
 80022dc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80022de:	4b31      	ldr	r3, [pc, #196]	; (80023a4 <MX_TIM3_Init+0xf0>)
 80022e0:	4a31      	ldr	r2, [pc, #196]	; (80023a8 <MX_TIM3_Init+0xf4>)
 80022e2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16 - 1;
 80022e4:	4b2f      	ldr	r3, [pc, #188]	; (80023a4 <MX_TIM3_Init+0xf0>)
 80022e6:	220f      	movs	r2, #15
 80022e8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ea:	4b2e      	ldr	r3, [pc, #184]	; (80023a4 <MX_TIM3_Init+0xf0>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF - 1;
 80022f0:	4b2c      	ldr	r3, [pc, #176]	; (80023a4 <MX_TIM3_Init+0xf0>)
 80022f2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80022f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022f8:	4b2a      	ldr	r3, [pc, #168]	; (80023a4 <MX_TIM3_Init+0xf0>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022fe:	4b29      	ldr	r3, [pc, #164]	; (80023a4 <MX_TIM3_Init+0xf0>)
 8002300:	2200      	movs	r2, #0
 8002302:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002304:	4827      	ldr	r0, [pc, #156]	; (80023a4 <MX_TIM3_Init+0xf0>)
 8002306:	f004 fad1 	bl	80068ac <HAL_TIM_Base_Init>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8002310:	f001 fa66 	bl	80037e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002314:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002318:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800231a:	f107 0318 	add.w	r3, r7, #24
 800231e:	4619      	mov	r1, r3
 8002320:	4820      	ldr	r0, [pc, #128]	; (80023a4 <MX_TIM3_Init+0xf0>)
 8002322:	f004 fec1 	bl	80070a8 <HAL_TIM_ConfigClockSource>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800232c:	f001 fa58 	bl	80037e0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002330:	481c      	ldr	r0, [pc, #112]	; (80023a4 <MX_TIM3_Init+0xf0>)
 8002332:	f004 fbb1 	bl	8006a98 <HAL_TIM_IC_Init>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800233c:	f001 fa50 	bl	80037e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002340:	2300      	movs	r3, #0
 8002342:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002344:	2300      	movs	r3, #0
 8002346:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002348:	f107 0310 	add.w	r3, r7, #16
 800234c:	4619      	mov	r1, r3
 800234e:	4815      	ldr	r0, [pc, #84]	; (80023a4 <MX_TIM3_Init+0xf0>)
 8002350:	f005 fbfe 	bl	8007b50 <HAL_TIMEx_MasterConfigSynchronization>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 800235a:	f001 fa41 	bl	80037e0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800235e:	2300      	movs	r3, #0
 8002360:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002362:	2301      	movs	r3, #1
 8002364:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002366:	2300      	movs	r3, #0
 8002368:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800236a:	2300      	movs	r3, #0
 800236c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800236e:	463b      	mov	r3, r7
 8002370:	2200      	movs	r2, #0
 8002372:	4619      	mov	r1, r3
 8002374:	480b      	ldr	r0, [pc, #44]	; (80023a4 <MX_TIM3_Init+0xf0>)
 8002376:	f004 fd35 	bl	8006de4 <HAL_TIM_IC_ConfigChannel>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8002380:	f001 fa2e 	bl	80037e0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002384:	463b      	mov	r3, r7
 8002386:	2204      	movs	r2, #4
 8002388:	4619      	mov	r1, r3
 800238a:	4806      	ldr	r0, [pc, #24]	; (80023a4 <MX_TIM3_Init+0xf0>)
 800238c:	f004 fd2a 	bl	8006de4 <HAL_TIM_IC_ConfigChannel>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8002396:	f001 fa23 	bl	80037e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800239a:	bf00      	nop
 800239c:	3728      	adds	r7, #40	; 0x28
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	20000800 	.word	0x20000800
 80023a8:	40000400 	.word	0x40000400

080023ac <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b08a      	sub	sp, #40	; 0x28
 80023b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023b2:	f107 0318 	add.w	r3, r7, #24
 80023b6:	2200      	movs	r2, #0
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	605a      	str	r2, [r3, #4]
 80023bc:	609a      	str	r2, [r3, #8]
 80023be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023c0:	f107 0310 	add.w	r3, r7, #16
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80023ca:	463b      	mov	r3, r7
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	605a      	str	r2, [r3, #4]
 80023d2:	609a      	str	r2, [r3, #8]
 80023d4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80023d6:	4b31      	ldr	r3, [pc, #196]	; (800249c <MX_TIM4_Init+0xf0>)
 80023d8:	4a31      	ldr	r2, [pc, #196]	; (80024a0 <MX_TIM4_Init+0xf4>)
 80023da:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16 - 1;
 80023dc:	4b2f      	ldr	r3, [pc, #188]	; (800249c <MX_TIM4_Init+0xf0>)
 80023de:	220f      	movs	r2, #15
 80023e0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023e2:	4b2e      	ldr	r3, [pc, #184]	; (800249c <MX_TIM4_Init+0xf0>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xFFFF - 1;
 80023e8:	4b2c      	ldr	r3, [pc, #176]	; (800249c <MX_TIM4_Init+0xf0>)
 80023ea:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80023ee:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023f0:	4b2a      	ldr	r3, [pc, #168]	; (800249c <MX_TIM4_Init+0xf0>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023f6:	4b29      	ldr	r3, [pc, #164]	; (800249c <MX_TIM4_Init+0xf0>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80023fc:	4827      	ldr	r0, [pc, #156]	; (800249c <MX_TIM4_Init+0xf0>)
 80023fe:	f004 fa55 	bl	80068ac <HAL_TIM_Base_Init>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8002408:	f001 f9ea 	bl	80037e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800240c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002410:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002412:	f107 0318 	add.w	r3, r7, #24
 8002416:	4619      	mov	r1, r3
 8002418:	4820      	ldr	r0, [pc, #128]	; (800249c <MX_TIM4_Init+0xf0>)
 800241a:	f004 fe45 	bl	80070a8 <HAL_TIM_ConfigClockSource>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002424:	f001 f9dc 	bl	80037e0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002428:	481c      	ldr	r0, [pc, #112]	; (800249c <MX_TIM4_Init+0xf0>)
 800242a:	f004 fb35 	bl	8006a98 <HAL_TIM_IC_Init>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002434:	f001 f9d4 	bl	80037e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002438:	2300      	movs	r3, #0
 800243a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800243c:	2300      	movs	r3, #0
 800243e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002440:	f107 0310 	add.w	r3, r7, #16
 8002444:	4619      	mov	r1, r3
 8002446:	4815      	ldr	r0, [pc, #84]	; (800249c <MX_TIM4_Init+0xf0>)
 8002448:	f005 fb82 	bl	8007b50 <HAL_TIMEx_MasterConfigSynchronization>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8002452:	f001 f9c5 	bl	80037e0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002456:	2300      	movs	r3, #0
 8002458:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800245a:	2301      	movs	r3, #1
 800245c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800245e:	2300      	movs	r3, #0
 8002460:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002462:	2300      	movs	r3, #0
 8002464:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002466:	463b      	mov	r3, r7
 8002468:	2200      	movs	r2, #0
 800246a:	4619      	mov	r1, r3
 800246c:	480b      	ldr	r0, [pc, #44]	; (800249c <MX_TIM4_Init+0xf0>)
 800246e:	f004 fcb9 	bl	8006de4 <HAL_TIM_IC_ConfigChannel>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8002478:	f001 f9b2 	bl	80037e0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800247c:	463b      	mov	r3, r7
 800247e:	2204      	movs	r2, #4
 8002480:	4619      	mov	r1, r3
 8002482:	4806      	ldr	r0, [pc, #24]	; (800249c <MX_TIM4_Init+0xf0>)
 8002484:	f004 fcae 	bl	8006de4 <HAL_TIM_IC_ConfigChannel>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <MX_TIM4_Init+0xe6>
  {
    Error_Handler();
 800248e:	f001 f9a7 	bl	80037e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002492:	bf00      	nop
 8002494:	3728      	adds	r7, #40	; 0x28
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	20000348 	.word	0x20000348
 80024a0:	40000800 	.word	0x40000800

080024a4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b08a      	sub	sp, #40	; 0x28
 80024a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024aa:	f107 0318 	add.w	r3, r7, #24
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	605a      	str	r2, [r3, #4]
 80024b4:	609a      	str	r2, [r3, #8]
 80024b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024b8:	f107 0310 	add.w	r3, r7, #16
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80024c2:	463b      	mov	r3, r7
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	605a      	str	r2, [r3, #4]
 80024ca:	609a      	str	r2, [r3, #8]
 80024cc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80024ce:	4b2b      	ldr	r3, [pc, #172]	; (800257c <MX_TIM5_Init+0xd8>)
 80024d0:	4a2b      	ldr	r2, [pc, #172]	; (8002580 <MX_TIM5_Init+0xdc>)
 80024d2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 16 - 1;
 80024d4:	4b29      	ldr	r3, [pc, #164]	; (800257c <MX_TIM5_Init+0xd8>)
 80024d6:	220f      	movs	r2, #15
 80024d8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024da:	4b28      	ldr	r3, [pc, #160]	; (800257c <MX_TIM5_Init+0xd8>)
 80024dc:	2200      	movs	r2, #0
 80024de:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xFFFF - 1;
 80024e0:	4b26      	ldr	r3, [pc, #152]	; (800257c <MX_TIM5_Init+0xd8>)
 80024e2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80024e6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024e8:	4b24      	ldr	r3, [pc, #144]	; (800257c <MX_TIM5_Init+0xd8>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024ee:	4b23      	ldr	r3, [pc, #140]	; (800257c <MX_TIM5_Init+0xd8>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80024f4:	4821      	ldr	r0, [pc, #132]	; (800257c <MX_TIM5_Init+0xd8>)
 80024f6:	f004 f9d9 	bl	80068ac <HAL_TIM_Base_Init>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <MX_TIM5_Init+0x60>
  {
    Error_Handler();
 8002500:	f001 f96e 	bl	80037e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002504:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002508:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800250a:	f107 0318 	add.w	r3, r7, #24
 800250e:	4619      	mov	r1, r3
 8002510:	481a      	ldr	r0, [pc, #104]	; (800257c <MX_TIM5_Init+0xd8>)
 8002512:	f004 fdc9 	bl	80070a8 <HAL_TIM_ConfigClockSource>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 800251c:	f001 f960 	bl	80037e0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8002520:	4816      	ldr	r0, [pc, #88]	; (800257c <MX_TIM5_Init+0xd8>)
 8002522:	f004 fab9 	bl	8006a98 <HAL_TIM_IC_Init>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800252c:	f001 f958 	bl	80037e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002530:	2300      	movs	r3, #0
 8002532:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002534:	2300      	movs	r3, #0
 8002536:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002538:	f107 0310 	add.w	r3, r7, #16
 800253c:	4619      	mov	r1, r3
 800253e:	480f      	ldr	r0, [pc, #60]	; (800257c <MX_TIM5_Init+0xd8>)
 8002540:	f005 fb06 	bl	8007b50 <HAL_TIMEx_MasterConfigSynchronization>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <MX_TIM5_Init+0xaa>
  {
    Error_Handler();
 800254a:	f001 f949 	bl	80037e0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800254e:	2300      	movs	r3, #0
 8002550:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002552:	2301      	movs	r3, #1
 8002554:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002556:	2300      	movs	r3, #0
 8002558:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800255a:	2300      	movs	r3, #0
 800255c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800255e:	463b      	mov	r3, r7
 8002560:	2200      	movs	r2, #0
 8002562:	4619      	mov	r1, r3
 8002564:	4805      	ldr	r0, [pc, #20]	; (800257c <MX_TIM5_Init+0xd8>)
 8002566:	f004 fc3d 	bl	8006de4 <HAL_TIM_IC_ConfigChannel>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <MX_TIM5_Init+0xd0>
  {
    Error_Handler();
 8002570:	f001 f936 	bl	80037e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002574:	bf00      	nop
 8002576:	3728      	adds	r7, #40	; 0x28
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	200007a0 	.word	0x200007a0
 8002580:	40000c00 	.word	0x40000c00

08002584 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800258a:	463b      	mov	r3, r7
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002592:	4b15      	ldr	r3, [pc, #84]	; (80025e8 <MX_TIM6_Init+0x64>)
 8002594:	4a15      	ldr	r2, [pc, #84]	; (80025ec <MX_TIM6_Init+0x68>)
 8002596:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16 - 1;
 8002598:	4b13      	ldr	r3, [pc, #76]	; (80025e8 <MX_TIM6_Init+0x64>)
 800259a:	220f      	movs	r2, #15
 800259c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800259e:	4b12      	ldr	r3, [pc, #72]	; (80025e8 <MX_TIM6_Init+0x64>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000 - 1;
 80025a4:	4b10      	ldr	r3, [pc, #64]	; (80025e8 <MX_TIM6_Init+0x64>)
 80025a6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80025aa:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025ac:	4b0e      	ldr	r3, [pc, #56]	; (80025e8 <MX_TIM6_Init+0x64>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80025b2:	480d      	ldr	r0, [pc, #52]	; (80025e8 <MX_TIM6_Init+0x64>)
 80025b4:	f004 f97a 	bl	80068ac <HAL_TIM_Base_Init>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80025be:	f001 f90f 	bl	80037e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025c2:	2300      	movs	r3, #0
 80025c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025c6:	2300      	movs	r3, #0
 80025c8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80025ca:	463b      	mov	r3, r7
 80025cc:	4619      	mov	r1, r3
 80025ce:	4806      	ldr	r0, [pc, #24]	; (80025e8 <MX_TIM6_Init+0x64>)
 80025d0:	f005 fabe 	bl	8007b50 <HAL_TIMEx_MasterConfigSynchronization>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80025da:	f001 f901 	bl	80037e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80025de:	bf00      	nop
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	20000960 	.word	0x20000960
 80025ec:	40001000 	.word	0x40001000

080025f0 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b088      	sub	sp, #32
 80025f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025f6:	f107 0310 	add.w	r3, r7, #16
 80025fa:	2200      	movs	r2, #0
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	605a      	str	r2, [r3, #4]
 8002600:	609a      	str	r2, [r3, #8]
 8002602:	60da      	str	r2, [r3, #12]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002604:	463b      	mov	r3, r7
 8002606:	2200      	movs	r2, #0
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	605a      	str	r2, [r3, #4]
 800260c:	609a      	str	r2, [r3, #8]
 800260e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002610:	4b23      	ldr	r3, [pc, #140]	; (80026a0 <MX_TIM9_Init+0xb0>)
 8002612:	4a24      	ldr	r2, [pc, #144]	; (80026a4 <MX_TIM9_Init+0xb4>)
 8002614:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 16 - 1;
 8002616:	4b22      	ldr	r3, [pc, #136]	; (80026a0 <MX_TIM9_Init+0xb0>)
 8002618:	220f      	movs	r2, #15
 800261a:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800261c:	4b20      	ldr	r3, [pc, #128]	; (80026a0 <MX_TIM9_Init+0xb0>)
 800261e:	2200      	movs	r2, #0
 8002620:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 0xFFFF;
 8002622:	4b1f      	ldr	r3, [pc, #124]	; (80026a0 <MX_TIM9_Init+0xb0>)
 8002624:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002628:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800262a:	4b1d      	ldr	r3, [pc, #116]	; (80026a0 <MX_TIM9_Init+0xb0>)
 800262c:	2200      	movs	r2, #0
 800262e:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002630:	4b1b      	ldr	r3, [pc, #108]	; (80026a0 <MX_TIM9_Init+0xb0>)
 8002632:	2200      	movs	r2, #0
 8002634:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002636:	481a      	ldr	r0, [pc, #104]	; (80026a0 <MX_TIM9_Init+0xb0>)
 8002638:	f004 f938 	bl	80068ac <HAL_TIM_Base_Init>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <MX_TIM9_Init+0x56>
  {
    Error_Handler();
 8002642:	f001 f8cd 	bl	80037e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002646:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800264a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800264c:	f107 0310 	add.w	r3, r7, #16
 8002650:	4619      	mov	r1, r3
 8002652:	4813      	ldr	r0, [pc, #76]	; (80026a0 <MX_TIM9_Init+0xb0>)
 8002654:	f004 fd28 	bl	80070a8 <HAL_TIM_ConfigClockSource>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <MX_TIM9_Init+0x72>
  {
    Error_Handler();
 800265e:	f001 f8bf 	bl	80037e0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim9) != HAL_OK)
 8002662:	480f      	ldr	r0, [pc, #60]	; (80026a0 <MX_TIM9_Init+0xb0>)
 8002664:	f004 fa18 	bl	8006a98 <HAL_TIM_IC_Init>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <MX_TIM9_Init+0x82>
  {
    Error_Handler();
 800266e:	f001 f8b7 	bl	80037e0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002672:	2300      	movs	r3, #0
 8002674:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002676:	2301      	movs	r3, #1
 8002678:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800267a:	2300      	movs	r3, #0
 800267c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800267e:	2300      	movs	r3, #0
 8002680:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002682:	463b      	mov	r3, r7
 8002684:	2204      	movs	r2, #4
 8002686:	4619      	mov	r1, r3
 8002688:	4805      	ldr	r0, [pc, #20]	; (80026a0 <MX_TIM9_Init+0xb0>)
 800268a:	f004 fbab 	bl	8006de4 <HAL_TIM_IC_ConfigChannel>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <MX_TIM9_Init+0xa8>
  {
    Error_Handler();
 8002694:	f001 f8a4 	bl	80037e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8002698:	bf00      	nop
 800269a:	3720      	adds	r7, #32
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	200009fc 	.word	0x200009fc
 80026a4:	40014000 	.word	0x40014000

080026a8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80026ac:	4b11      	ldr	r3, [pc, #68]	; (80026f4 <MX_UART4_Init+0x4c>)
 80026ae:	4a12      	ldr	r2, [pc, #72]	; (80026f8 <MX_UART4_Init+0x50>)
 80026b0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80026b2:	4b10      	ldr	r3, [pc, #64]	; (80026f4 <MX_UART4_Init+0x4c>)
 80026b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026b8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80026ba:	4b0e      	ldr	r3, [pc, #56]	; (80026f4 <MX_UART4_Init+0x4c>)
 80026bc:	2200      	movs	r2, #0
 80026be:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80026c0:	4b0c      	ldr	r3, [pc, #48]	; (80026f4 <MX_UART4_Init+0x4c>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80026c6:	4b0b      	ldr	r3, [pc, #44]	; (80026f4 <MX_UART4_Init+0x4c>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80026cc:	4b09      	ldr	r3, [pc, #36]	; (80026f4 <MX_UART4_Init+0x4c>)
 80026ce:	220c      	movs	r2, #12
 80026d0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026d2:	4b08      	ldr	r3, [pc, #32]	; (80026f4 <MX_UART4_Init+0x4c>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80026d8:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <MX_UART4_Init+0x4c>)
 80026da:	2200      	movs	r2, #0
 80026dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80026de:	4805      	ldr	r0, [pc, #20]	; (80026f4 <MX_UART4_Init+0x4c>)
 80026e0:	f005 fac6 	bl	8007c70 <HAL_UART_Init>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80026ea:	f001 f879 	bl	80037e0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80026ee:	bf00      	nop
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	20000a40 	.word	0x20000a40
 80026f8:	40004c00 	.word	0x40004c00

080026fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002700:	4b11      	ldr	r3, [pc, #68]	; (8002748 <MX_USART1_UART_Init+0x4c>)
 8002702:	4a12      	ldr	r2, [pc, #72]	; (800274c <MX_USART1_UART_Init+0x50>)
 8002704:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002706:	4b10      	ldr	r3, [pc, #64]	; (8002748 <MX_USART1_UART_Init+0x4c>)
 8002708:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800270c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800270e:	4b0e      	ldr	r3, [pc, #56]	; (8002748 <MX_USART1_UART_Init+0x4c>)
 8002710:	2200      	movs	r2, #0
 8002712:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002714:	4b0c      	ldr	r3, [pc, #48]	; (8002748 <MX_USART1_UART_Init+0x4c>)
 8002716:	2200      	movs	r2, #0
 8002718:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800271a:	4b0b      	ldr	r3, [pc, #44]	; (8002748 <MX_USART1_UART_Init+0x4c>)
 800271c:	2200      	movs	r2, #0
 800271e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002720:	4b09      	ldr	r3, [pc, #36]	; (8002748 <MX_USART1_UART_Init+0x4c>)
 8002722:	220c      	movs	r2, #12
 8002724:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002726:	4b08      	ldr	r3, [pc, #32]	; (8002748 <MX_USART1_UART_Init+0x4c>)
 8002728:	2200      	movs	r2, #0
 800272a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800272c:	4b06      	ldr	r3, [pc, #24]	; (8002748 <MX_USART1_UART_Init+0x4c>)
 800272e:	2200      	movs	r2, #0
 8002730:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002732:	4805      	ldr	r0, [pc, #20]	; (8002748 <MX_USART1_UART_Init+0x4c>)
 8002734:	f005 fa9c 	bl	8007c70 <HAL_UART_Init>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800273e:	f001 f84f 	bl	80037e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002742:	bf00      	nop
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	2000084c 	.word	0x2000084c
 800274c:	40011000 	.word	0x40011000

08002750 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002754:	4b11      	ldr	r3, [pc, #68]	; (800279c <MX_USART2_UART_Init+0x4c>)
 8002756:	4a12      	ldr	r2, [pc, #72]	; (80027a0 <MX_USART2_UART_Init+0x50>)
 8002758:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800275a:	4b10      	ldr	r3, [pc, #64]	; (800279c <MX_USART2_UART_Init+0x4c>)
 800275c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002760:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002762:	4b0e      	ldr	r3, [pc, #56]	; (800279c <MX_USART2_UART_Init+0x4c>)
 8002764:	2200      	movs	r2, #0
 8002766:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002768:	4b0c      	ldr	r3, [pc, #48]	; (800279c <MX_USART2_UART_Init+0x4c>)
 800276a:	2200      	movs	r2, #0
 800276c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800276e:	4b0b      	ldr	r3, [pc, #44]	; (800279c <MX_USART2_UART_Init+0x4c>)
 8002770:	2200      	movs	r2, #0
 8002772:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002774:	4b09      	ldr	r3, [pc, #36]	; (800279c <MX_USART2_UART_Init+0x4c>)
 8002776:	220c      	movs	r2, #12
 8002778:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800277a:	4b08      	ldr	r3, [pc, #32]	; (800279c <MX_USART2_UART_Init+0x4c>)
 800277c:	2200      	movs	r2, #0
 800277e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002780:	4b06      	ldr	r3, [pc, #24]	; (800279c <MX_USART2_UART_Init+0x4c>)
 8002782:	2200      	movs	r2, #0
 8002784:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002786:	4805      	ldr	r0, [pc, #20]	; (800279c <MX_USART2_UART_Init+0x4c>)
 8002788:	f005 fa72 	bl	8007c70 <HAL_UART_Init>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002792:	f001 f825 	bl	80037e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002796:	bf00      	nop
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	20000b20 	.word	0x20000b20
 80027a0:	40004400 	.word	0x40004400

080027a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80027a8:	4b11      	ldr	r3, [pc, #68]	; (80027f0 <MX_USART3_UART_Init+0x4c>)
 80027aa:	4a12      	ldr	r2, [pc, #72]	; (80027f4 <MX_USART3_UART_Init+0x50>)
 80027ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80027ae:	4b10      	ldr	r3, [pc, #64]	; (80027f0 <MX_USART3_UART_Init+0x4c>)
 80027b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80027b6:	4b0e      	ldr	r3, [pc, #56]	; (80027f0 <MX_USART3_UART_Init+0x4c>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80027bc:	4b0c      	ldr	r3, [pc, #48]	; (80027f0 <MX_USART3_UART_Init+0x4c>)
 80027be:	2200      	movs	r2, #0
 80027c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80027c2:	4b0b      	ldr	r3, [pc, #44]	; (80027f0 <MX_USART3_UART_Init+0x4c>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80027c8:	4b09      	ldr	r3, [pc, #36]	; (80027f0 <MX_USART3_UART_Init+0x4c>)
 80027ca:	220c      	movs	r2, #12
 80027cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027ce:	4b08      	ldr	r3, [pc, #32]	; (80027f0 <MX_USART3_UART_Init+0x4c>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80027d4:	4b06      	ldr	r3, [pc, #24]	; (80027f0 <MX_USART3_UART_Init+0x4c>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80027da:	4805      	ldr	r0, [pc, #20]	; (80027f0 <MX_USART3_UART_Init+0x4c>)
 80027dc:	f005 fa48 	bl	8007c70 <HAL_UART_Init>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80027e6:	f000 fffb 	bl	80037e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80027ea:	bf00      	nop
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	2000038c 	.word	0x2000038c
 80027f4:	40004800 	.word	0x40004800

080027f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80027fe:	2300      	movs	r3, #0
 8002800:	607b      	str	r3, [r7, #4]
 8002802:	4b10      	ldr	r3, [pc, #64]	; (8002844 <MX_DMA_Init+0x4c>)
 8002804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002806:	4a0f      	ldr	r2, [pc, #60]	; (8002844 <MX_DMA_Init+0x4c>)
 8002808:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800280c:	6313      	str	r3, [r2, #48]	; 0x30
 800280e:	4b0d      	ldr	r3, [pc, #52]	; (8002844 <MX_DMA_Init+0x4c>)
 8002810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002812:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002816:	607b      	str	r3, [r7, #4]
 8002818:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800281a:	2200      	movs	r2, #0
 800281c:	2100      	movs	r1, #0
 800281e:	200d      	movs	r0, #13
 8002820:	f001 fe63 	bl	80044ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002824:	200d      	movs	r0, #13
 8002826:	f001 fe7c 	bl	8004522 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800282a:	2200      	movs	r2, #0
 800282c:	2100      	movs	r1, #0
 800282e:	2010      	movs	r0, #16
 8002830:	f001 fe5b 	bl	80044ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002834:	2010      	movs	r0, #16
 8002836:	f001 fe74 	bl	8004522 <HAL_NVIC_EnableIRQ>

}
 800283a:	bf00      	nop
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	40023800 	.word	0x40023800

08002848 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002848:	b480      	push	{r7}
 800284a:	b087      	sub	sp, #28
 800284c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800284e:	2300      	movs	r3, #0
 8002850:	617b      	str	r3, [r7, #20]
 8002852:	4b2c      	ldr	r3, [pc, #176]	; (8002904 <MX_GPIO_Init+0xbc>)
 8002854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002856:	4a2b      	ldr	r2, [pc, #172]	; (8002904 <MX_GPIO_Init+0xbc>)
 8002858:	f043 0310 	orr.w	r3, r3, #16
 800285c:	6313      	str	r3, [r2, #48]	; 0x30
 800285e:	4b29      	ldr	r3, [pc, #164]	; (8002904 <MX_GPIO_Init+0xbc>)
 8002860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002862:	f003 0310 	and.w	r3, r3, #16
 8002866:	617b      	str	r3, [r7, #20]
 8002868:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800286a:	2300      	movs	r3, #0
 800286c:	613b      	str	r3, [r7, #16]
 800286e:	4b25      	ldr	r3, [pc, #148]	; (8002904 <MX_GPIO_Init+0xbc>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	4a24      	ldr	r2, [pc, #144]	; (8002904 <MX_GPIO_Init+0xbc>)
 8002874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002878:	6313      	str	r3, [r2, #48]	; 0x30
 800287a:	4b22      	ldr	r3, [pc, #136]	; (8002904 <MX_GPIO_Init+0xbc>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002882:	613b      	str	r3, [r7, #16]
 8002884:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002886:	2300      	movs	r3, #0
 8002888:	60fb      	str	r3, [r7, #12]
 800288a:	4b1e      	ldr	r3, [pc, #120]	; (8002904 <MX_GPIO_Init+0xbc>)
 800288c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288e:	4a1d      	ldr	r2, [pc, #116]	; (8002904 <MX_GPIO_Init+0xbc>)
 8002890:	f043 0301 	orr.w	r3, r3, #1
 8002894:	6313      	str	r3, [r2, #48]	; 0x30
 8002896:	4b1b      	ldr	r3, [pc, #108]	; (8002904 <MX_GPIO_Init+0xbc>)
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	60fb      	str	r3, [r7, #12]
 80028a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028a2:	2300      	movs	r3, #0
 80028a4:	60bb      	str	r3, [r7, #8]
 80028a6:	4b17      	ldr	r3, [pc, #92]	; (8002904 <MX_GPIO_Init+0xbc>)
 80028a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028aa:	4a16      	ldr	r2, [pc, #88]	; (8002904 <MX_GPIO_Init+0xbc>)
 80028ac:	f043 0302 	orr.w	r3, r3, #2
 80028b0:	6313      	str	r3, [r2, #48]	; 0x30
 80028b2:	4b14      	ldr	r3, [pc, #80]	; (8002904 <MX_GPIO_Init+0xbc>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	60bb      	str	r3, [r7, #8]
 80028bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028be:	2300      	movs	r3, #0
 80028c0:	607b      	str	r3, [r7, #4]
 80028c2:	4b10      	ldr	r3, [pc, #64]	; (8002904 <MX_GPIO_Init+0xbc>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c6:	4a0f      	ldr	r2, [pc, #60]	; (8002904 <MX_GPIO_Init+0xbc>)
 80028c8:	f043 0308 	orr.w	r3, r3, #8
 80028cc:	6313      	str	r3, [r2, #48]	; 0x30
 80028ce:	4b0d      	ldr	r3, [pc, #52]	; (8002904 <MX_GPIO_Init+0xbc>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d2:	f003 0308 	and.w	r3, r3, #8
 80028d6:	607b      	str	r3, [r7, #4]
 80028d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028da:	2300      	movs	r3, #0
 80028dc:	603b      	str	r3, [r7, #0]
 80028de:	4b09      	ldr	r3, [pc, #36]	; (8002904 <MX_GPIO_Init+0xbc>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e2:	4a08      	ldr	r2, [pc, #32]	; (8002904 <MX_GPIO_Init+0xbc>)
 80028e4:	f043 0304 	orr.w	r3, r3, #4
 80028e8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ea:	4b06      	ldr	r3, [pc, #24]	; (8002904 <MX_GPIO_Init+0xbc>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ee:	f003 0304 	and.w	r3, r3, #4
 80028f2:	603b      	str	r3, [r7, #0]
 80028f4:	683b      	ldr	r3, [r7, #0]

}
 80028f6:	bf00      	nop
 80028f8:	371c      	adds	r7, #28
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	40023800 	.word	0x40023800

08002908 <kinematic>:

/* USER CODE BEGIN 4 */

void kinematic(uint32_t *output, uint32_t input1, uint32_t input2, uint32_t input3, uint32_t input4){
 8002908:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800290c:	b092      	sub	sp, #72	; 0x48
 800290e:	af00      	add	r7, sp, #0
 8002910:	60f8      	str	r0, [r7, #12]
 8002912:	60b9      	str	r1, [r7, #8]
 8002914:	607a      	str	r2, [r7, #4]
 8002916:	603b      	str	r3, [r7, #0]
	static double Tr, Tp, Tz, Ty;
	const double KT=1, KQ=1, L=0.23;
 8002918:	f04f 0300 	mov.w	r3, #0
 800291c:	4c7a      	ldr	r4, [pc, #488]	; (8002b08 <kinematic+0x200>)
 800291e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
 8002922:	f04f 0300 	mov.w	r3, #0
 8002926:	4c78      	ldr	r4, [pc, #480]	; (8002b08 <kinematic+0x200>)
 8002928:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
 800292c:	a474      	add	r4, pc, #464	; (adr r4, 8002b00 <kinematic+0x1f8>)
 800292e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002932:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

	double w1, w2, w3, w4;

	Tr = map((double)input1, 1000, 2000, -10, 10);
 8002936:	68b8      	ldr	r0, [r7, #8]
 8002938:	f7fd fde4 	bl	8000504 <__aeabi_ui2d>
 800293c:	f04f 0200 	mov.w	r2, #0
 8002940:	4b72      	ldr	r3, [pc, #456]	; (8002b0c <kinematic+0x204>)
 8002942:	f7fd fca1 	bl	8000288 <__aeabi_dsub>
 8002946:	4603      	mov	r3, r0
 8002948:	460c      	mov	r4, r1
 800294a:	4618      	mov	r0, r3
 800294c:	4621      	mov	r1, r4
 800294e:	f04f 0200 	mov.w	r2, #0
 8002952:	4b6f      	ldr	r3, [pc, #444]	; (8002b10 <kinematic+0x208>)
 8002954:	f7fd fe50 	bl	80005f8 <__aeabi_dmul>
 8002958:	4603      	mov	r3, r0
 800295a:	460c      	mov	r4, r1
 800295c:	4618      	mov	r0, r3
 800295e:	4621      	mov	r1, r4
 8002960:	f04f 0200 	mov.w	r2, #0
 8002964:	4b69      	ldr	r3, [pc, #420]	; (8002b0c <kinematic+0x204>)
 8002966:	f7fd ff71 	bl	800084c <__aeabi_ddiv>
 800296a:	4603      	mov	r3, r0
 800296c:	460c      	mov	r4, r1
 800296e:	4618      	mov	r0, r3
 8002970:	4621      	mov	r1, r4
 8002972:	f04f 0200 	mov.w	r2, #0
 8002976:	4b67      	ldr	r3, [pc, #412]	; (8002b14 <kinematic+0x20c>)
 8002978:	f7fd fc86 	bl	8000288 <__aeabi_dsub>
 800297c:	4603      	mov	r3, r0
 800297e:	460c      	mov	r4, r1
 8002980:	4a65      	ldr	r2, [pc, #404]	; (8002b18 <kinematic+0x210>)
 8002982:	e9c2 3400 	strd	r3, r4, [r2]
	Tp = map((double)input2, 1000, 2000, 10, -10);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f7fd fdbc 	bl	8000504 <__aeabi_ui2d>
 800298c:	f04f 0200 	mov.w	r2, #0
 8002990:	4b5e      	ldr	r3, [pc, #376]	; (8002b0c <kinematic+0x204>)
 8002992:	f7fd fc79 	bl	8000288 <__aeabi_dsub>
 8002996:	4603      	mov	r3, r0
 8002998:	460c      	mov	r4, r1
 800299a:	4618      	mov	r0, r3
 800299c:	4621      	mov	r1, r4
 800299e:	f04f 0200 	mov.w	r2, #0
 80029a2:	4b5e      	ldr	r3, [pc, #376]	; (8002b1c <kinematic+0x214>)
 80029a4:	f7fd fe28 	bl	80005f8 <__aeabi_dmul>
 80029a8:	4603      	mov	r3, r0
 80029aa:	460c      	mov	r4, r1
 80029ac:	4618      	mov	r0, r3
 80029ae:	4621      	mov	r1, r4
 80029b0:	f04f 0200 	mov.w	r2, #0
 80029b4:	4b55      	ldr	r3, [pc, #340]	; (8002b0c <kinematic+0x204>)
 80029b6:	f7fd ff49 	bl	800084c <__aeabi_ddiv>
 80029ba:	4603      	mov	r3, r0
 80029bc:	460c      	mov	r4, r1
 80029be:	4618      	mov	r0, r3
 80029c0:	4621      	mov	r1, r4
 80029c2:	f04f 0200 	mov.w	r2, #0
 80029c6:	4b53      	ldr	r3, [pc, #332]	; (8002b14 <kinematic+0x20c>)
 80029c8:	f7fd fc60 	bl	800028c <__adddf3>
 80029cc:	4603      	mov	r3, r0
 80029ce:	460c      	mov	r4, r1
 80029d0:	4a53      	ldr	r2, [pc, #332]	; (8002b20 <kinematic+0x218>)
 80029d2:	e9c2 3400 	strd	r3, r4, [r2]
	Tz = map((double)input3, 1000, 2000, 1000, 2000);
 80029d6:	6838      	ldr	r0, [r7, #0]
 80029d8:	f7fd fd94 	bl	8000504 <__aeabi_ui2d>
 80029dc:	f04f 0200 	mov.w	r2, #0
 80029e0:	4b4a      	ldr	r3, [pc, #296]	; (8002b0c <kinematic+0x204>)
 80029e2:	f7fd fc51 	bl	8000288 <__aeabi_dsub>
 80029e6:	4603      	mov	r3, r0
 80029e8:	460c      	mov	r4, r1
 80029ea:	4618      	mov	r0, r3
 80029ec:	4621      	mov	r1, r4
 80029ee:	f04f 0200 	mov.w	r2, #0
 80029f2:	4b46      	ldr	r3, [pc, #280]	; (8002b0c <kinematic+0x204>)
 80029f4:	f7fd fe00 	bl	80005f8 <__aeabi_dmul>
 80029f8:	4603      	mov	r3, r0
 80029fa:	460c      	mov	r4, r1
 80029fc:	4618      	mov	r0, r3
 80029fe:	4621      	mov	r1, r4
 8002a00:	f04f 0200 	mov.w	r2, #0
 8002a04:	4b41      	ldr	r3, [pc, #260]	; (8002b0c <kinematic+0x204>)
 8002a06:	f7fd ff21 	bl	800084c <__aeabi_ddiv>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	460c      	mov	r4, r1
 8002a0e:	4618      	mov	r0, r3
 8002a10:	4621      	mov	r1, r4
 8002a12:	f04f 0200 	mov.w	r2, #0
 8002a16:	4b3d      	ldr	r3, [pc, #244]	; (8002b0c <kinematic+0x204>)
 8002a18:	f7fd fc38 	bl	800028c <__adddf3>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	460c      	mov	r4, r1
 8002a20:	4a40      	ldr	r2, [pc, #256]	; (8002b24 <kinematic+0x21c>)
 8002a22:	e9c2 3400 	strd	r3, r4, [r2]
	Ty = map((double)input4, 1000, 2000, -5, 5);
 8002a26:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002a28:	f7fd fd6c 	bl	8000504 <__aeabi_ui2d>
 8002a2c:	f04f 0200 	mov.w	r2, #0
 8002a30:	4b36      	ldr	r3, [pc, #216]	; (8002b0c <kinematic+0x204>)
 8002a32:	f7fd fc29 	bl	8000288 <__aeabi_dsub>
 8002a36:	4603      	mov	r3, r0
 8002a38:	460c      	mov	r4, r1
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	4621      	mov	r1, r4
 8002a3e:	f04f 0200 	mov.w	r2, #0
 8002a42:	4b34      	ldr	r3, [pc, #208]	; (8002b14 <kinematic+0x20c>)
 8002a44:	f7fd fdd8 	bl	80005f8 <__aeabi_dmul>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	460c      	mov	r4, r1
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	4621      	mov	r1, r4
 8002a50:	f04f 0200 	mov.w	r2, #0
 8002a54:	4b2d      	ldr	r3, [pc, #180]	; (8002b0c <kinematic+0x204>)
 8002a56:	f7fd fef9 	bl	800084c <__aeabi_ddiv>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	460c      	mov	r4, r1
 8002a5e:	4618      	mov	r0, r3
 8002a60:	4621      	mov	r1, r4
 8002a62:	f04f 0200 	mov.w	r2, #0
 8002a66:	4b30      	ldr	r3, [pc, #192]	; (8002b28 <kinematic+0x220>)
 8002a68:	f7fd fc0e 	bl	8000288 <__aeabi_dsub>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	460c      	mov	r4, r1
 8002a70:	4a2e      	ldr	r2, [pc, #184]	; (8002b2c <kinematic+0x224>)
 8002a72:	e9c2 3400 	strd	r3, r4, [r2]


	  if (Tz == 1000.0f && Tr == 0.0f && Tp == 0.0f && Ty == 0.0f) {
 8002a76:	4b2b      	ldr	r3, [pc, #172]	; (8002b24 <kinematic+0x21c>)
 8002a78:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a7c:	f04f 0200 	mov.w	r2, #0
 8002a80:	4b22      	ldr	r3, [pc, #136]	; (8002b0c <kinematic+0x204>)
 8002a82:	f7fe f821 	bl	8000ac8 <__aeabi_dcmpeq>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d051      	beq.n	8002b30 <kinematic+0x228>
 8002a8c:	4b22      	ldr	r3, [pc, #136]	; (8002b18 <kinematic+0x210>)
 8002a8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a92:	f04f 0200 	mov.w	r2, #0
 8002a96:	f04f 0300 	mov.w	r3, #0
 8002a9a:	f7fe f815 	bl	8000ac8 <__aeabi_dcmpeq>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d045      	beq.n	8002b30 <kinematic+0x228>
 8002aa4:	4b1e      	ldr	r3, [pc, #120]	; (8002b20 <kinematic+0x218>)
 8002aa6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002aaa:	f04f 0200 	mov.w	r2, #0
 8002aae:	f04f 0300 	mov.w	r3, #0
 8002ab2:	f7fe f809 	bl	8000ac8 <__aeabi_dcmpeq>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d039      	beq.n	8002b30 <kinematic+0x228>
 8002abc:	4b1b      	ldr	r3, [pc, #108]	; (8002b2c <kinematic+0x224>)
 8002abe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ac2:	f04f 0200 	mov.w	r2, #0
 8002ac6:	f04f 0300 	mov.w	r3, #0
 8002aca:	f7fd fffd 	bl	8000ac8 <__aeabi_dcmpeq>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d02d      	beq.n	8002b30 <kinematic+0x228>
			output[0] = 1000;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ada:	601a      	str	r2, [r3, #0]
			output[1] = 1000;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	3304      	adds	r3, #4
 8002ae0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ae4:	601a      	str	r2, [r3, #0]
			output[2] = 1000;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	3308      	adds	r3, #8
 8002aea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002aee:	601a      	str	r2, [r3, #0]
			output[3] = 1000;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	330c      	adds	r3, #12
 8002af4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002af8:	601a      	str	r2, [r3, #0]
 8002afa:	e274      	b.n	8002fe6 <kinematic+0x6de>
 8002afc:	f3af 8000 	nop.w
 8002b00:	d70a3d71 	.word	0xd70a3d71
 8002b04:	3fcd70a3 	.word	0x3fcd70a3
 8002b08:	3ff00000 	.word	0x3ff00000
 8002b0c:	408f4000 	.word	0x408f4000
 8002b10:	40340000 	.word	0x40340000
 8002b14:	40240000 	.word	0x40240000
 8002b18:	20000208 	.word	0x20000208
 8002b1c:	c0340000 	.word	0xc0340000
 8002b20:	20000210 	.word	0x20000210
 8002b24:	20000218 	.word	0x20000218
 8002b28:	40140000 	.word	0x40140000
 8002b2c:	20000220 	.word	0x20000220
	  }
	  else {
			//QUADCOPTER
			w1 = Tz/(4*KT) + Tr/(2*KT*L) + Ty/(2*KQ);
 8002b30:	4bcd      	ldr	r3, [pc, #820]	; (8002e68 <kinematic+0x560>)
 8002b32:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002b36:	f04f 0200 	mov.w	r2, #0
 8002b3a:	4bcc      	ldr	r3, [pc, #816]	; (8002e6c <kinematic+0x564>)
 8002b3c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002b40:	f7fd fd5a 	bl	80005f8 <__aeabi_dmul>
 8002b44:	4602      	mov	r2, r0
 8002b46:	460b      	mov	r3, r1
 8002b48:	4620      	mov	r0, r4
 8002b4a:	4629      	mov	r1, r5
 8002b4c:	f7fd fe7e 	bl	800084c <__aeabi_ddiv>
 8002b50:	4603      	mov	r3, r0
 8002b52:	460c      	mov	r4, r1
 8002b54:	4698      	mov	r8, r3
 8002b56:	46a1      	mov	r9, r4
 8002b58:	4bc5      	ldr	r3, [pc, #788]	; (8002e70 <kinematic+0x568>)
 8002b5a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002b5e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002b62:	4602      	mov	r2, r0
 8002b64:	460b      	mov	r3, r1
 8002b66:	f7fd fb91 	bl	800028c <__adddf3>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	4610      	mov	r0, r2
 8002b70:	4619      	mov	r1, r3
 8002b72:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002b76:	f7fd fd3f 	bl	80005f8 <__aeabi_dmul>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	4620      	mov	r0, r4
 8002b80:	4629      	mov	r1, r5
 8002b82:	f7fd fe63 	bl	800084c <__aeabi_ddiv>
 8002b86:	4603      	mov	r3, r0
 8002b88:	460c      	mov	r4, r1
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	4623      	mov	r3, r4
 8002b8e:	4640      	mov	r0, r8
 8002b90:	4649      	mov	r1, r9
 8002b92:	f7fd fb7b 	bl	800028c <__adddf3>
 8002b96:	4603      	mov	r3, r0
 8002b98:	460c      	mov	r4, r1
 8002b9a:	4698      	mov	r8, r3
 8002b9c:	46a1      	mov	r9, r4
 8002b9e:	4bb5      	ldr	r3, [pc, #724]	; (8002e74 <kinematic+0x56c>)
 8002ba0:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002ba4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002ba8:	4602      	mov	r2, r0
 8002baa:	460b      	mov	r3, r1
 8002bac:	f7fd fb6e 	bl	800028c <__adddf3>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	4620      	mov	r0, r4
 8002bb6:	4629      	mov	r1, r5
 8002bb8:	f7fd fe48 	bl	800084c <__aeabi_ddiv>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	460c      	mov	r4, r1
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	4623      	mov	r3, r4
 8002bc4:	4640      	mov	r0, r8
 8002bc6:	4649      	mov	r1, r9
 8002bc8:	f7fd fb60 	bl	800028c <__adddf3>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	460c      	mov	r4, r1
 8002bd0:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			w2 = Tz/(4*KT) + Tp/(2*KT*L) - Ty/(2*KQ);
 8002bd4:	4ba4      	ldr	r3, [pc, #656]	; (8002e68 <kinematic+0x560>)
 8002bd6:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002bda:	f04f 0200 	mov.w	r2, #0
 8002bde:	4ba3      	ldr	r3, [pc, #652]	; (8002e6c <kinematic+0x564>)
 8002be0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002be4:	f7fd fd08 	bl	80005f8 <__aeabi_dmul>
 8002be8:	4602      	mov	r2, r0
 8002bea:	460b      	mov	r3, r1
 8002bec:	4620      	mov	r0, r4
 8002bee:	4629      	mov	r1, r5
 8002bf0:	f7fd fe2c 	bl	800084c <__aeabi_ddiv>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	460c      	mov	r4, r1
 8002bf8:	4698      	mov	r8, r3
 8002bfa:	46a1      	mov	r9, r4
 8002bfc:	4b9e      	ldr	r3, [pc, #632]	; (8002e78 <kinematic+0x570>)
 8002bfe:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002c02:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002c06:	4602      	mov	r2, r0
 8002c08:	460b      	mov	r3, r1
 8002c0a:	f7fd fb3f 	bl	800028c <__adddf3>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	460b      	mov	r3, r1
 8002c12:	4610      	mov	r0, r2
 8002c14:	4619      	mov	r1, r3
 8002c16:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002c1a:	f7fd fced 	bl	80005f8 <__aeabi_dmul>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	460b      	mov	r3, r1
 8002c22:	4620      	mov	r0, r4
 8002c24:	4629      	mov	r1, r5
 8002c26:	f7fd fe11 	bl	800084c <__aeabi_ddiv>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	460c      	mov	r4, r1
 8002c2e:	461a      	mov	r2, r3
 8002c30:	4623      	mov	r3, r4
 8002c32:	4640      	mov	r0, r8
 8002c34:	4649      	mov	r1, r9
 8002c36:	f7fd fb29 	bl	800028c <__adddf3>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	460c      	mov	r4, r1
 8002c3e:	4698      	mov	r8, r3
 8002c40:	46a1      	mov	r9, r4
 8002c42:	4b8c      	ldr	r3, [pc, #560]	; (8002e74 <kinematic+0x56c>)
 8002c44:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002c48:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	460b      	mov	r3, r1
 8002c50:	f7fd fb1c 	bl	800028c <__adddf3>
 8002c54:	4602      	mov	r2, r0
 8002c56:	460b      	mov	r3, r1
 8002c58:	4620      	mov	r0, r4
 8002c5a:	4629      	mov	r1, r5
 8002c5c:	f7fd fdf6 	bl	800084c <__aeabi_ddiv>
 8002c60:	4603      	mov	r3, r0
 8002c62:	460c      	mov	r4, r1
 8002c64:	461a      	mov	r2, r3
 8002c66:	4623      	mov	r3, r4
 8002c68:	4640      	mov	r0, r8
 8002c6a:	4649      	mov	r1, r9
 8002c6c:	f7fd fb0c 	bl	8000288 <__aeabi_dsub>
 8002c70:	4603      	mov	r3, r0
 8002c72:	460c      	mov	r4, r1
 8002c74:	e9c7 3408 	strd	r3, r4, [r7, #32]
			w3 = Tz/(4*KT) - Tp/(2*KT*L) - Ty/(2*KQ);
 8002c78:	4b7b      	ldr	r3, [pc, #492]	; (8002e68 <kinematic+0x560>)
 8002c7a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002c7e:	f04f 0200 	mov.w	r2, #0
 8002c82:	4b7a      	ldr	r3, [pc, #488]	; (8002e6c <kinematic+0x564>)
 8002c84:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002c88:	f7fd fcb6 	bl	80005f8 <__aeabi_dmul>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	460b      	mov	r3, r1
 8002c90:	4620      	mov	r0, r4
 8002c92:	4629      	mov	r1, r5
 8002c94:	f7fd fdda 	bl	800084c <__aeabi_ddiv>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	460c      	mov	r4, r1
 8002c9c:	4698      	mov	r8, r3
 8002c9e:	46a1      	mov	r9, r4
 8002ca0:	4b75      	ldr	r3, [pc, #468]	; (8002e78 <kinematic+0x570>)
 8002ca2:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002ca6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002caa:	4602      	mov	r2, r0
 8002cac:	460b      	mov	r3, r1
 8002cae:	f7fd faed 	bl	800028c <__adddf3>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	4610      	mov	r0, r2
 8002cb8:	4619      	mov	r1, r3
 8002cba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002cbe:	f7fd fc9b 	bl	80005f8 <__aeabi_dmul>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	4620      	mov	r0, r4
 8002cc8:	4629      	mov	r1, r5
 8002cca:	f7fd fdbf 	bl	800084c <__aeabi_ddiv>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	460c      	mov	r4, r1
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	4623      	mov	r3, r4
 8002cd6:	4640      	mov	r0, r8
 8002cd8:	4649      	mov	r1, r9
 8002cda:	f7fd fad5 	bl	8000288 <__aeabi_dsub>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	460c      	mov	r4, r1
 8002ce2:	4698      	mov	r8, r3
 8002ce4:	46a1      	mov	r9, r4
 8002ce6:	4b63      	ldr	r3, [pc, #396]	; (8002e74 <kinematic+0x56c>)
 8002ce8:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002cec:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	460b      	mov	r3, r1
 8002cf4:	f7fd faca 	bl	800028c <__adddf3>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	4620      	mov	r0, r4
 8002cfe:	4629      	mov	r1, r5
 8002d00:	f7fd fda4 	bl	800084c <__aeabi_ddiv>
 8002d04:	4603      	mov	r3, r0
 8002d06:	460c      	mov	r4, r1
 8002d08:	461a      	mov	r2, r3
 8002d0a:	4623      	mov	r3, r4
 8002d0c:	4640      	mov	r0, r8
 8002d0e:	4649      	mov	r1, r9
 8002d10:	f7fd faba 	bl	8000288 <__aeabi_dsub>
 8002d14:	4603      	mov	r3, r0
 8002d16:	460c      	mov	r4, r1
 8002d18:	e9c7 3406 	strd	r3, r4, [r7, #24]
			w4 = Tz/(4*KT) - Tr/(2*KT*L) + Ty/(2*KQ);
 8002d1c:	4b52      	ldr	r3, [pc, #328]	; (8002e68 <kinematic+0x560>)
 8002d1e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002d22:	f04f 0200 	mov.w	r2, #0
 8002d26:	4b51      	ldr	r3, [pc, #324]	; (8002e6c <kinematic+0x564>)
 8002d28:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002d2c:	f7fd fc64 	bl	80005f8 <__aeabi_dmul>
 8002d30:	4602      	mov	r2, r0
 8002d32:	460b      	mov	r3, r1
 8002d34:	4620      	mov	r0, r4
 8002d36:	4629      	mov	r1, r5
 8002d38:	f7fd fd88 	bl	800084c <__aeabi_ddiv>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	460c      	mov	r4, r1
 8002d40:	4698      	mov	r8, r3
 8002d42:	46a1      	mov	r9, r4
 8002d44:	4b4a      	ldr	r3, [pc, #296]	; (8002e70 <kinematic+0x568>)
 8002d46:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002d4a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002d4e:	4602      	mov	r2, r0
 8002d50:	460b      	mov	r3, r1
 8002d52:	f7fd fa9b 	bl	800028c <__adddf3>
 8002d56:	4602      	mov	r2, r0
 8002d58:	460b      	mov	r3, r1
 8002d5a:	4610      	mov	r0, r2
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002d62:	f7fd fc49 	bl	80005f8 <__aeabi_dmul>
 8002d66:	4602      	mov	r2, r0
 8002d68:	460b      	mov	r3, r1
 8002d6a:	4620      	mov	r0, r4
 8002d6c:	4629      	mov	r1, r5
 8002d6e:	f7fd fd6d 	bl	800084c <__aeabi_ddiv>
 8002d72:	4603      	mov	r3, r0
 8002d74:	460c      	mov	r4, r1
 8002d76:	461a      	mov	r2, r3
 8002d78:	4623      	mov	r3, r4
 8002d7a:	4640      	mov	r0, r8
 8002d7c:	4649      	mov	r1, r9
 8002d7e:	f7fd fa83 	bl	8000288 <__aeabi_dsub>
 8002d82:	4603      	mov	r3, r0
 8002d84:	460c      	mov	r4, r1
 8002d86:	4698      	mov	r8, r3
 8002d88:	46a1      	mov	r9, r4
 8002d8a:	4b3a      	ldr	r3, [pc, #232]	; (8002e74 <kinematic+0x56c>)
 8002d8c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002d90:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002d94:	4602      	mov	r2, r0
 8002d96:	460b      	mov	r3, r1
 8002d98:	f7fd fa78 	bl	800028c <__adddf3>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	460b      	mov	r3, r1
 8002da0:	4620      	mov	r0, r4
 8002da2:	4629      	mov	r1, r5
 8002da4:	f7fd fd52 	bl	800084c <__aeabi_ddiv>
 8002da8:	4603      	mov	r3, r0
 8002daa:	460c      	mov	r4, r1
 8002dac:	461a      	mov	r2, r3
 8002dae:	4623      	mov	r3, r4
 8002db0:	4640      	mov	r0, r8
 8002db2:	4649      	mov	r1, r9
 8002db4:	f7fd fa6a 	bl	800028c <__adddf3>
 8002db8:	4603      	mov	r3, r0
 8002dba:	460c      	mov	r4, r1
 8002dbc:	e9c7 3404 	strd	r3, r4, [r7, #16]

			output[0] = (uint32_t)map(w1, 250, 500, 1000, 2000);
 8002dc0:	f04f 0200 	mov.w	r2, #0
 8002dc4:	4b2d      	ldr	r3, [pc, #180]	; (8002e7c <kinematic+0x574>)
 8002dc6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002dca:	f7fd fa5d 	bl	8000288 <__aeabi_dsub>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	460c      	mov	r4, r1
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	4621      	mov	r1, r4
 8002dd6:	f04f 0200 	mov.w	r2, #0
 8002dda:	4b29      	ldr	r3, [pc, #164]	; (8002e80 <kinematic+0x578>)
 8002ddc:	f7fd fc0c 	bl	80005f8 <__aeabi_dmul>
 8002de0:	4603      	mov	r3, r0
 8002de2:	460c      	mov	r4, r1
 8002de4:	4618      	mov	r0, r3
 8002de6:	4621      	mov	r1, r4
 8002de8:	f04f 0200 	mov.w	r2, #0
 8002dec:	4b23      	ldr	r3, [pc, #140]	; (8002e7c <kinematic+0x574>)
 8002dee:	f7fd fd2d 	bl	800084c <__aeabi_ddiv>
 8002df2:	4603      	mov	r3, r0
 8002df4:	460c      	mov	r4, r1
 8002df6:	4618      	mov	r0, r3
 8002df8:	4621      	mov	r1, r4
 8002dfa:	f04f 0200 	mov.w	r2, #0
 8002dfe:	4b20      	ldr	r3, [pc, #128]	; (8002e80 <kinematic+0x578>)
 8002e00:	f7fd fa44 	bl	800028c <__adddf3>
 8002e04:	4603      	mov	r3, r0
 8002e06:	460c      	mov	r4, r1
 8002e08:	4618      	mov	r0, r3
 8002e0a:	4621      	mov	r1, r4
 8002e0c:	f7fd fecc 	bl	8000ba8 <__aeabi_d2uiz>
 8002e10:	4602      	mov	r2, r0
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	601a      	str	r2, [r3, #0]

			output[1] = (uint32_t)map(w2, 250, 500, 1000, 2000);
 8002e16:	f04f 0200 	mov.w	r2, #0
 8002e1a:	4b18      	ldr	r3, [pc, #96]	; (8002e7c <kinematic+0x574>)
 8002e1c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002e20:	f7fd fa32 	bl	8000288 <__aeabi_dsub>
 8002e24:	4603      	mov	r3, r0
 8002e26:	460c      	mov	r4, r1
 8002e28:	4618      	mov	r0, r3
 8002e2a:	4621      	mov	r1, r4
 8002e2c:	f04f 0200 	mov.w	r2, #0
 8002e30:	4b13      	ldr	r3, [pc, #76]	; (8002e80 <kinematic+0x578>)
 8002e32:	f7fd fbe1 	bl	80005f8 <__aeabi_dmul>
 8002e36:	4603      	mov	r3, r0
 8002e38:	460c      	mov	r4, r1
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	4621      	mov	r1, r4
 8002e3e:	f04f 0200 	mov.w	r2, #0
 8002e42:	4b0e      	ldr	r3, [pc, #56]	; (8002e7c <kinematic+0x574>)
 8002e44:	f7fd fd02 	bl	800084c <__aeabi_ddiv>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	460c      	mov	r4, r1
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	4621      	mov	r1, r4
 8002e50:	f04f 0200 	mov.w	r2, #0
 8002e54:	4b0a      	ldr	r3, [pc, #40]	; (8002e80 <kinematic+0x578>)
 8002e56:	f7fd fa19 	bl	800028c <__adddf3>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	460c      	mov	r4, r1
 8002e5e:	4619      	mov	r1, r3
 8002e60:	4622      	mov	r2, r4
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	1d1c      	adds	r4, r3, #4
 8002e66:	e00d      	b.n	8002e84 <kinematic+0x57c>
 8002e68:	20000218 	.word	0x20000218
 8002e6c:	40100000 	.word	0x40100000
 8002e70:	20000208 	.word	0x20000208
 8002e74:	20000220 	.word	0x20000220
 8002e78:	20000210 	.word	0x20000210
 8002e7c:	406f4000 	.word	0x406f4000
 8002e80:	408f4000 	.word	0x408f4000
 8002e84:	4608      	mov	r0, r1
 8002e86:	4611      	mov	r1, r2
 8002e88:	f7fd fe8e 	bl	8000ba8 <__aeabi_d2uiz>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	6023      	str	r3, [r4, #0]
			output[2] = (uint32_t)map(w3, 250, 500, 1000, 2000);
 8002e90:	f04f 0200 	mov.w	r2, #0
 8002e94:	4b56      	ldr	r3, [pc, #344]	; (8002ff0 <kinematic+0x6e8>)
 8002e96:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002e9a:	f7fd f9f5 	bl	8000288 <__aeabi_dsub>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	460c      	mov	r4, r1
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	4621      	mov	r1, r4
 8002ea6:	f04f 0200 	mov.w	r2, #0
 8002eaa:	4b52      	ldr	r3, [pc, #328]	; (8002ff4 <kinematic+0x6ec>)
 8002eac:	f7fd fba4 	bl	80005f8 <__aeabi_dmul>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	460c      	mov	r4, r1
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	4621      	mov	r1, r4
 8002eb8:	f04f 0200 	mov.w	r2, #0
 8002ebc:	4b4c      	ldr	r3, [pc, #304]	; (8002ff0 <kinematic+0x6e8>)
 8002ebe:	f7fd fcc5 	bl	800084c <__aeabi_ddiv>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	460c      	mov	r4, r1
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	4621      	mov	r1, r4
 8002eca:	f04f 0200 	mov.w	r2, #0
 8002ece:	4b49      	ldr	r3, [pc, #292]	; (8002ff4 <kinematic+0x6ec>)
 8002ed0:	f7fd f9dc 	bl	800028c <__adddf3>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	460c      	mov	r4, r1
 8002ed8:	4619      	mov	r1, r3
 8002eda:	4622      	mov	r2, r4
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f103 0408 	add.w	r4, r3, #8
 8002ee2:	4608      	mov	r0, r1
 8002ee4:	4611      	mov	r1, r2
 8002ee6:	f7fd fe5f 	bl	8000ba8 <__aeabi_d2uiz>
 8002eea:	4603      	mov	r3, r0
 8002eec:	6023      	str	r3, [r4, #0]
			output[3] = (uint32_t)map(w4, 250, 500, 1000, 2000);
 8002eee:	f04f 0200 	mov.w	r2, #0
 8002ef2:	4b3f      	ldr	r3, [pc, #252]	; (8002ff0 <kinematic+0x6e8>)
 8002ef4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002ef8:	f7fd f9c6 	bl	8000288 <__aeabi_dsub>
 8002efc:	4603      	mov	r3, r0
 8002efe:	460c      	mov	r4, r1
 8002f00:	4618      	mov	r0, r3
 8002f02:	4621      	mov	r1, r4
 8002f04:	f04f 0200 	mov.w	r2, #0
 8002f08:	4b3a      	ldr	r3, [pc, #232]	; (8002ff4 <kinematic+0x6ec>)
 8002f0a:	f7fd fb75 	bl	80005f8 <__aeabi_dmul>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	460c      	mov	r4, r1
 8002f12:	4618      	mov	r0, r3
 8002f14:	4621      	mov	r1, r4
 8002f16:	f04f 0200 	mov.w	r2, #0
 8002f1a:	4b35      	ldr	r3, [pc, #212]	; (8002ff0 <kinematic+0x6e8>)
 8002f1c:	f7fd fc96 	bl	800084c <__aeabi_ddiv>
 8002f20:	4603      	mov	r3, r0
 8002f22:	460c      	mov	r4, r1
 8002f24:	4618      	mov	r0, r3
 8002f26:	4621      	mov	r1, r4
 8002f28:	f04f 0200 	mov.w	r2, #0
 8002f2c:	4b31      	ldr	r3, [pc, #196]	; (8002ff4 <kinematic+0x6ec>)
 8002f2e:	f7fd f9ad 	bl	800028c <__adddf3>
 8002f32:	4603      	mov	r3, r0
 8002f34:	460c      	mov	r4, r1
 8002f36:	4619      	mov	r1, r3
 8002f38:	4622      	mov	r2, r4
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f103 040c 	add.w	r4, r3, #12
 8002f40:	4608      	mov	r0, r1
 8002f42:	4611      	mov	r1, r2
 8002f44:	f7fd fe30 	bl	8000ba8 <__aeabi_d2uiz>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	6023      	str	r3, [r4, #0]

			output[0] = constrain(output[0], 1000, 2000);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f54:	d307      	bcc.n	8002f66 <kinematic+0x65e>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002f5e:	bf28      	it	cs
 8002f60:	f44f 63fa 	movcs.w	r3, #2000	; 0x7d0
 8002f64:	e001      	b.n	8002f6a <kinematic+0x662>
 8002f66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	6013      	str	r3, [r2, #0]
			output[1] = constrain(output[1], 1000, 2000);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	3304      	adds	r3, #4
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f78:	d308      	bcc.n	8002f8c <kinematic+0x684>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	3304      	adds	r3, #4
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002f84:	bf28      	it	cs
 8002f86:	f44f 63fa 	movcs.w	r3, #2000	; 0x7d0
 8002f8a:	e001      	b.n	8002f90 <kinematic+0x688>
 8002f8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	3204      	adds	r2, #4
 8002f94:	6013      	str	r3, [r2, #0]
			output[2] = constrain(output[2], 1000, 2000);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	3308      	adds	r3, #8
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fa0:	d308      	bcc.n	8002fb4 <kinematic+0x6ac>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	3308      	adds	r3, #8
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002fac:	bf28      	it	cs
 8002fae:	f44f 63fa 	movcs.w	r3, #2000	; 0x7d0
 8002fb2:	e001      	b.n	8002fb8 <kinematic+0x6b0>
 8002fb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	3208      	adds	r2, #8
 8002fbc:	6013      	str	r3, [r2, #0]
			output[3] = constrain(output[3], 1000, 2000);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	330c      	adds	r3, #12
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fc8:	d308      	bcc.n	8002fdc <kinematic+0x6d4>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	330c      	adds	r3, #12
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002fd4:	bf28      	it	cs
 8002fd6:	f44f 63fa 	movcs.w	r3, #2000	; 0x7d0
 8002fda:	e001      	b.n	8002fe0 <kinematic+0x6d8>
 8002fdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fe0:	68fa      	ldr	r2, [r7, #12]
 8002fe2:	320c      	adds	r2, #12
 8002fe4:	6013      	str	r3, [r2, #0]
	  }
}
 8002fe6:	bf00      	nop
 8002fe8:	3748      	adds	r7, #72	; 0x48
 8002fea:	46bd      	mov	sp, r7
 8002fec:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002ff0:	406f4000 	.word	0x406f4000
 8002ff4:	408f4000 	.word	0x408f4000

08002ff8 <initPWM_DATA>:

void initPWM_DATA(struct PWM_DATA* pwm_data, TIM_HandleTypeDef *htim, uint32_t channel){
 8002ff8:	b480      	push	{r7}
 8002ffa:	b085      	sub	sp, #20
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
	pwm_data->onFallingEdge = false;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	765a      	strb	r2, [r3, #25]
	pwm_data->onRisingEdge = true;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2201      	movs	r2, #1
 800300e:	761a      	strb	r2, [r3, #24]
	pwm_data->channel = channel;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	605a      	str	r2, [r3, #4]
	pwm_data->htim = htim;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	68ba      	ldr	r2, [r7, #8]
 800301a:	601a      	str	r2, [r3, #0]
}
 800301c:	bf00      	nop
 800301e:	3714      	adds	r7, #20
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <setPWM>:
	  }
	  //strSize = sprintf(buffer, "YAW: %f, PITCH: %f, ROLL: %f\r\n", IMU_Data.YAW, IMU_Data.PITCH, IMU_Data.ROLL);
	  //HAL_UART_Transmit(&huart3, buffer, strSize, 100);
}

void setPWM(TIM_HandleTypeDef htim, uint32_t channel, uint32_t dutyCycle){
 8003028:	b084      	sub	sp, #16
 800302a:	b580      	push	{r7, lr}
 800302c:	b088      	sub	sp, #32
 800302e:	af00      	add	r7, sp, #0
 8003030:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8003034:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_TIM_PWM_Stop(&htim, channel);
 8003038:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800303a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800303e:	f003 fcd3 	bl	80069e8 <HAL_TIM_PWM_Stop>
	TIM_OC_InitTypeDef sConfigOC;
	htim.Init.Period = 20000 - 1;
 8003042:	f644 631f 	movw	r3, #19999	; 0x4e1f
 8003046:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_TIM_PWM_Init(&htim);
 8003048:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800304c:	f003 fc59 	bl	8006902 <HAL_TIM_PWM_Init>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003050:	2360      	movs	r3, #96	; 0x60
 8003052:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = dutyCycle;
 8003054:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003056:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003058:	2300      	movs	r3, #0
 800305a:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800305c:	2300      	movs	r3, #0
 800305e:	617b      	str	r3, [r7, #20]
	HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, channel);
 8003060:	1d3b      	adds	r3, r7, #4
 8003062:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003064:	4619      	mov	r1, r3
 8003066:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800306a:	f003 ff57 	bl	8006f1c <HAL_TIM_PWM_ConfigChannel>

	HAL_TIM_PWM_Start(&htim, channel);
 800306e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003070:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8003074:	f003 fc7a 	bl	800696c <HAL_TIM_PWM_Start>

}
 8003078:	bf00      	nop
 800307a:	3720      	adds	r7, #32
 800307c:	46bd      	mov	sp, r7
 800307e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003082:	b004      	add	sp, #16
 8003084:	4770      	bx	lr
	...

08003088 <CalibrateESC>:

void CalibrateESC(){
 8003088:	b5f0      	push	{r4, r5, r6, r7, lr}
 800308a:	b08f      	sub	sp, #60	; 0x3c
 800308c:	af0e      	add	r7, sp, #56	; 0x38
	setPWM(htim2, TIM_CHANNEL_4, ESC_PWM_MAX);
 800308e:	4e1b      	ldr	r6, [pc, #108]	; (80030fc <CalibrateESC+0x74>)
 8003090:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003094:	930d      	str	r3, [sp, #52]	; 0x34
 8003096:	230c      	movs	r3, #12
 8003098:	930c      	str	r3, [sp, #48]	; 0x30
 800309a:	466d      	mov	r5, sp
 800309c:	f106 0410 	add.w	r4, r6, #16
 80030a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030a8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80030ac:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80030b0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80030b4:	f7ff ffb8 	bl	8003028 <setPWM>
	HAL_Delay(2000);
 80030b8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80030bc:	f001 f918 	bl	80042f0 <HAL_Delay>
	setPWM(htim3, TIM_CHANNEL_4, ESC_PWM_MIN);
 80030c0:	4e0f      	ldr	r6, [pc, #60]	; (8003100 <CalibrateESC+0x78>)
 80030c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030c6:	930d      	str	r3, [sp, #52]	; 0x34
 80030c8:	230c      	movs	r3, #12
 80030ca:	930c      	str	r3, [sp, #48]	; 0x30
 80030cc:	466d      	mov	r5, sp
 80030ce:	f106 0410 	add.w	r4, r6, #16
 80030d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030da:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80030de:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80030e2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80030e6:	f7ff ff9f 	bl	8003028 <setPWM>
	HAL_Delay(2000);
 80030ea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80030ee:	f001 f8ff 	bl	80042f0 <HAL_Delay>
}
 80030f2:	bf00      	nop
 80030f4:	3704      	adds	r7, #4
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030fa:	bf00      	nop
 80030fc:	20000a80 	.word	0x20000a80
 8003100:	20000800 	.word	0x20000800

08003104 <BMPInit>:

	strSize = sprintf((char*)buffer, "Koneksi HMC5883L Sukses!\r\n");
	HAL_UART_Transmit(&huart1, buffer, strSize, 20);
}

void BMPInit(){
 8003104:	b5b0      	push	{r4, r5, r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
	bmp280_init_default_params(&bmp280.params);
 800310a:	485b      	ldr	r0, [pc, #364]	; (8003278 <BMPInit+0x174>)
 800310c:	f7fe f82c 	bl	8001168 <bmp280_init_default_params>
	bmp280.addr = BMP280_I2C_ADDRESS_0;
 8003110:	4b5a      	ldr	r3, [pc, #360]	; (800327c <BMPInit+0x178>)
 8003112:	2276      	movs	r2, #118	; 0x76
 8003114:	849a      	strh	r2, [r3, #36]	; 0x24
	bmp280.i2c = &hi2c1;
 8003116:	4b59      	ldr	r3, [pc, #356]	; (800327c <BMPInit+0x178>)
 8003118:	4a59      	ldr	r2, [pc, #356]	; (8003280 <BMPInit+0x17c>)
 800311a:	629a      	str	r2, [r3, #40]	; 0x28

	while(!bmp280_init(&bmp280, &bmp280.params)){
 800311c:	e01d      	b.n	800315a <BMPInit+0x56>
		strSize = sprintf((char*)buffer, "BMP280 initialization failed\r\n");
 800311e:	4a59      	ldr	r2, [pc, #356]	; (8003284 <BMPInit+0x180>)
 8003120:	4b59      	ldr	r3, [pc, #356]	; (8003288 <BMPInit+0x184>)
 8003122:	4615      	mov	r5, r2
 8003124:	461c      	mov	r4, r3
 8003126:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003128:	6028      	str	r0, [r5, #0]
 800312a:	6069      	str	r1, [r5, #4]
 800312c:	60aa      	str	r2, [r5, #8]
 800312e:	60eb      	str	r3, [r5, #12]
 8003130:	cc07      	ldmia	r4!, {r0, r1, r2}
 8003132:	6128      	str	r0, [r5, #16]
 8003134:	6169      	str	r1, [r5, #20]
 8003136:	61aa      	str	r2, [r5, #24]
 8003138:	8823      	ldrh	r3, [r4, #0]
 800313a:	78a2      	ldrb	r2, [r4, #2]
 800313c:	83ab      	strh	r3, [r5, #28]
 800313e:	4613      	mov	r3, r2
 8003140:	77ab      	strb	r3, [r5, #30]
 8003142:	231e      	movs	r3, #30
 8003144:	b29a      	uxth	r2, r3
 8003146:	4b51      	ldr	r3, [pc, #324]	; (800328c <BMPInit+0x188>)
 8003148:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, buffer, strSize, 1000);
 800314a:	4b50      	ldr	r3, [pc, #320]	; (800328c <BMPInit+0x188>)
 800314c:	881a      	ldrh	r2, [r3, #0]
 800314e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003152:	494c      	ldr	r1, [pc, #304]	; (8003284 <BMPInit+0x180>)
 8003154:	484e      	ldr	r0, [pc, #312]	; (8003290 <BMPInit+0x18c>)
 8003156:	f004 fdd8 	bl	8007d0a <HAL_UART_Transmit>
	while(!bmp280_init(&bmp280, &bmp280.params)){
 800315a:	4947      	ldr	r1, [pc, #284]	; (8003278 <BMPInit+0x174>)
 800315c:	4847      	ldr	r0, [pc, #284]	; (800327c <BMPInit+0x178>)
 800315e:	f7fe f97e 	bl	800145e <bmp280_init>
 8003162:	4603      	mov	r3, r0
 8003164:	f083 0301 	eor.w	r3, r3, #1
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1d7      	bne.n	800311e <BMPInit+0x1a>
	}
	HAL_Delay(1000);
 800316e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003172:	f001 f8bd 	bl	80042f0 <HAL_Delay>
	bme280p = bmp280.id == BME280_CHIP_ID;
 8003176:	4b41      	ldr	r3, [pc, #260]	; (800327c <BMPInit+0x178>)
 8003178:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800317c:	2b60      	cmp	r3, #96	; 0x60
 800317e:	bf0c      	ite	eq
 8003180:	2301      	moveq	r3, #1
 8003182:	2300      	movne	r3, #0
 8003184:	b2da      	uxtb	r2, r3
 8003186:	4b43      	ldr	r3, [pc, #268]	; (8003294 <BMPInit+0x190>)
 8003188:	701a      	strb	r2, [r3, #0]
	strSize = sprintf((char*)buffer, "BMP280: found %s\r\n", bme280p ? "BME280" : "BMP280");
 800318a:	4b42      	ldr	r3, [pc, #264]	; (8003294 <BMPInit+0x190>)
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <BMPInit+0x92>
 8003192:	4b41      	ldr	r3, [pc, #260]	; (8003298 <BMPInit+0x194>)
 8003194:	e000      	b.n	8003198 <BMPInit+0x94>
 8003196:	4b41      	ldr	r3, [pc, #260]	; (800329c <BMPInit+0x198>)
 8003198:	461a      	mov	r2, r3
 800319a:	4941      	ldr	r1, [pc, #260]	; (80032a0 <BMPInit+0x19c>)
 800319c:	4839      	ldr	r0, [pc, #228]	; (8003284 <BMPInit+0x180>)
 800319e:	f006 fa5f 	bl	8009660 <siprintf>
 80031a2:	4603      	mov	r3, r0
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	4b39      	ldr	r3, [pc, #228]	; (800328c <BMPInit+0x188>)
 80031a8:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, buffer, strSize, 1000);
 80031aa:	4b38      	ldr	r3, [pc, #224]	; (800328c <BMPInit+0x188>)
 80031ac:	881a      	ldrh	r2, [r3, #0]
 80031ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031b2:	4934      	ldr	r1, [pc, #208]	; (8003284 <BMPInit+0x180>)
 80031b4:	4836      	ldr	r0, [pc, #216]	; (8003290 <BMPInit+0x18c>)
 80031b6:	f004 fda8 	bl	8007d0a <HAL_UART_Transmit>

	strSize = sprintf((char*)buffer, "Calibrating.\r\n");
 80031ba:	4a32      	ldr	r2, [pc, #200]	; (8003284 <BMPInit+0x180>)
 80031bc:	4b39      	ldr	r3, [pc, #228]	; (80032a4 <BMPInit+0x1a0>)
 80031be:	4614      	mov	r4, r2
 80031c0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80031c2:	6020      	str	r0, [r4, #0]
 80031c4:	6061      	str	r1, [r4, #4]
 80031c6:	60a2      	str	r2, [r4, #8]
 80031c8:	881a      	ldrh	r2, [r3, #0]
 80031ca:	789b      	ldrb	r3, [r3, #2]
 80031cc:	81a2      	strh	r2, [r4, #12]
 80031ce:	73a3      	strb	r3, [r4, #14]
 80031d0:	230e      	movs	r3, #14
 80031d2:	b29a      	uxth	r2, r3
 80031d4:	4b2d      	ldr	r3, [pc, #180]	; (800328c <BMPInit+0x188>)
 80031d6:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, buffer, strSize, 10);
 80031d8:	4b2c      	ldr	r3, [pc, #176]	; (800328c <BMPInit+0x188>)
 80031da:	881a      	ldrh	r2, [r3, #0]
 80031dc:	230a      	movs	r3, #10
 80031de:	4929      	ldr	r1, [pc, #164]	; (8003284 <BMPInit+0x180>)
 80031e0:	482b      	ldr	r0, [pc, #172]	; (8003290 <BMPInit+0x18c>)
 80031e2:	f004 fd92 	bl	8007d0a <HAL_UART_Transmit>

	float pres_total = 0;
 80031e6:	f04f 0300 	mov.w	r3, #0
 80031ea:	607b      	str	r3, [r7, #4]

	for(int i = 0; i < 100; ++i){
 80031ec:	2300      	movs	r3, #0
 80031ee:	603b      	str	r3, [r7, #0]
 80031f0:	e01e      	b.n	8003230 <BMPInit+0x12c>
		while(bmp280_is_measuring(&bmp280)){
			continue;
 80031f2:	bf00      	nop
		while(bmp280_is_measuring(&bmp280)){
 80031f4:	4821      	ldr	r0, [pc, #132]	; (800327c <BMPInit+0x178>)
 80031f6:	f7fe f9df 	bl	80015b8 <bmp280_is_measuring>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d1f8      	bne.n	80031f2 <BMPInit+0xee>
		}
		bmp280_read_float(&bmp280, &temperature, &pressure, &humidity);
 8003200:	4b29      	ldr	r3, [pc, #164]	; (80032a8 <BMPInit+0x1a4>)
 8003202:	4a2a      	ldr	r2, [pc, #168]	; (80032ac <BMPInit+0x1a8>)
 8003204:	492a      	ldr	r1, [pc, #168]	; (80032b0 <BMPInit+0x1ac>)
 8003206:	481d      	ldr	r0, [pc, #116]	; (800327c <BMPInit+0x178>)
 8003208:	f7fe fc9a 	bl	8001b40 <bmp280_read_float>
		HAL_UART_Transmit(&huart1, ".", 1, 10);
 800320c:	230a      	movs	r3, #10
 800320e:	2201      	movs	r2, #1
 8003210:	4928      	ldr	r1, [pc, #160]	; (80032b4 <BMPInit+0x1b0>)
 8003212:	481f      	ldr	r0, [pc, #124]	; (8003290 <BMPInit+0x18c>)
 8003214:	f004 fd79 	bl	8007d0a <HAL_UART_Transmit>
		pres_total = pres_total + pressure;
 8003218:	4b24      	ldr	r3, [pc, #144]	; (80032ac <BMPInit+0x1a8>)
 800321a:	edd3 7a00 	vldr	s15, [r3]
 800321e:	ed97 7a01 	vldr	s14, [r7, #4]
 8003222:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003226:	edc7 7a01 	vstr	s15, [r7, #4]
	for(int i = 0; i < 100; ++i){
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	3301      	adds	r3, #1
 800322e:	603b      	str	r3, [r7, #0]
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	2b63      	cmp	r3, #99	; 0x63
 8003234:	ddde      	ble.n	80031f4 <BMPInit+0xf0>
	}

	pressureRef = pres_total / 100;
 8003236:	ed97 7a01 	vldr	s14, [r7, #4]
 800323a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80032b8 <BMPInit+0x1b4>
 800323e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003242:	4b1e      	ldr	r3, [pc, #120]	; (80032bc <BMPInit+0x1b8>)
 8003244:	edc3 7a00 	vstr	s15, [r3]
	strSize = sprintf((char*)buffer,"Done!\r\n");
 8003248:	4a0e      	ldr	r2, [pc, #56]	; (8003284 <BMPInit+0x180>)
 800324a:	4b1d      	ldr	r3, [pc, #116]	; (80032c0 <BMPInit+0x1bc>)
 800324c:	cb03      	ldmia	r3!, {r0, r1}
 800324e:	6010      	str	r0, [r2, #0]
 8003250:	6051      	str	r1, [r2, #4]
 8003252:	2307      	movs	r3, #7
 8003254:	b29a      	uxth	r2, r3
 8003256:	4b0d      	ldr	r3, [pc, #52]	; (800328c <BMPInit+0x188>)
 8003258:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, buffer, strSize, 10);
 800325a:	4b0c      	ldr	r3, [pc, #48]	; (800328c <BMPInit+0x188>)
 800325c:	881a      	ldrh	r2, [r3, #0]
 800325e:	230a      	movs	r3, #10
 8003260:	4908      	ldr	r1, [pc, #32]	; (8003284 <BMPInit+0x180>)
 8003262:	480b      	ldr	r0, [pc, #44]	; (8003290 <BMPInit+0x18c>)
 8003264:	f004 fd51 	bl	8007d0a <HAL_UART_Transmit>
	HAL_Delay(2000);
 8003268:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800326c:	f001 f840 	bl	80042f0 <HAL_Delay>
}
 8003270:	bf00      	nop
 8003272:	3708      	adds	r7, #8
 8003274:	46bd      	mov	sp, r7
 8003276:	bdb0      	pop	{r4, r5, r7, pc}
 8003278:	20000b18 	.word	0x20000b18
 800327c:	20000aec 	.word	0x20000aec
 8003280:	200003ec 	.word	0x200003ec
 8003284:	2000088c 	.word	0x2000088c
 8003288:	0800bf54 	.word	0x0800bf54
 800328c:	20000b8c 	.word	0x20000b8c
 8003290:	2000084c 	.word	0x2000084c
 8003294:	20000840 	.word	0x20000840
 8003298:	0800bf74 	.word	0x0800bf74
 800329c:	0800bf7c 	.word	0x0800bf7c
 80032a0:	0800bf84 	.word	0x0800bf84
 80032a4:	0800bf98 	.word	0x0800bf98
 80032a8:	20000848 	.word	0x20000848
 80032ac:	20000844 	.word	0x20000844
 80032b0:	2000078c 	.word	0x2000078c
 80032b4:	0800bfa8 	.word	0x0800bfa8
 80032b8:	42c80000 	.word	0x42c80000
 80032bc:	20000200 	.word	0x20000200
 80032c0:	0800bfac 	.word	0x0800bfac

080032c4 <IMUInit>:

void IMUInit(){
 80032c4:	b5b0      	push	{r4, r5, r7, lr}
 80032c6:	af00      	add	r7, sp, #0
	  HAL_Delay(1000);
 80032c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80032cc:	f001 f810 	bl	80042f0 <HAL_Delay>
	  huart2Status = HAL_UART_Transmit(&huart2, (u_char*)0xA5, 1, 10);
 80032d0:	230a      	movs	r3, #10
 80032d2:	2201      	movs	r2, #1
 80032d4:	21a5      	movs	r1, #165	; 0xa5
 80032d6:	4844      	ldr	r0, [pc, #272]	; (80033e8 <IMUInit+0x124>)
 80032d8:	f004 fd17 	bl	8007d0a <HAL_UART_Transmit>
 80032dc:	4603      	mov	r3, r0
 80032de:	461a      	mov	r2, r3
 80032e0:	4b42      	ldr	r3, [pc, #264]	; (80033ec <IMUInit+0x128>)
 80032e2:	701a      	strb	r2, [r3, #0]
	  huart2Status = HAL_UART_Transmit(&huart2, (u_char*)0x54, 1, 10);
 80032e4:	230a      	movs	r3, #10
 80032e6:	2201      	movs	r2, #1
 80032e8:	2154      	movs	r1, #84	; 0x54
 80032ea:	483f      	ldr	r0, [pc, #252]	; (80033e8 <IMUInit+0x124>)
 80032ec:	f004 fd0d 	bl	8007d0a <HAL_UART_Transmit>
 80032f0:	4603      	mov	r3, r0
 80032f2:	461a      	mov	r2, r3
 80032f4:	4b3d      	ldr	r3, [pc, #244]	; (80033ec <IMUInit+0x128>)
 80032f6:	701a      	strb	r2, [r3, #0]

	  HAL_Delay(3000);
 80032f8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80032fc:	f000 fff8 	bl	80042f0 <HAL_Delay>
	  strSize = sprintf((char*)buffer,"Kalibrasi tilt done\r\n");
 8003300:	4a3b      	ldr	r2, [pc, #236]	; (80033f0 <IMUInit+0x12c>)
 8003302:	4b3c      	ldr	r3, [pc, #240]	; (80033f4 <IMUInit+0x130>)
 8003304:	4615      	mov	r5, r2
 8003306:	461c      	mov	r4, r3
 8003308:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800330a:	6028      	str	r0, [r5, #0]
 800330c:	6069      	str	r1, [r5, #4]
 800330e:	60aa      	str	r2, [r5, #8]
 8003310:	60eb      	str	r3, [r5, #12]
 8003312:	6820      	ldr	r0, [r4, #0]
 8003314:	6128      	str	r0, [r5, #16]
 8003316:	88a3      	ldrh	r3, [r4, #4]
 8003318:	82ab      	strh	r3, [r5, #20]
 800331a:	2315      	movs	r3, #21
 800331c:	b29a      	uxth	r2, r3
 800331e:	4b36      	ldr	r3, [pc, #216]	; (80033f8 <IMUInit+0x134>)
 8003320:	801a      	strh	r2, [r3, #0]
	  huart3Status = HAL_UART_Transmit(&huart1, buffer, strSize, 100);
 8003322:	4b35      	ldr	r3, [pc, #212]	; (80033f8 <IMUInit+0x134>)
 8003324:	881a      	ldrh	r2, [r3, #0]
 8003326:	2364      	movs	r3, #100	; 0x64
 8003328:	4931      	ldr	r1, [pc, #196]	; (80033f0 <IMUInit+0x12c>)
 800332a:	4834      	ldr	r0, [pc, #208]	; (80033fc <IMUInit+0x138>)
 800332c:	f004 fced 	bl	8007d0a <HAL_UART_Transmit>
 8003330:	4603      	mov	r3, r0
 8003332:	461a      	mov	r2, r3
 8003334:	4b32      	ldr	r3, [pc, #200]	; (8003400 <IMUInit+0x13c>)
 8003336:	701a      	strb	r2, [r3, #0]

	  //Kalibrasi heading
	  HAL_Delay(1000);
 8003338:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800333c:	f000 ffd8 	bl	80042f0 <HAL_Delay>
	  huart2Status = HAL_UART_Transmit(&huart2, (u_char*)0xA5, 1, 10);
 8003340:	230a      	movs	r3, #10
 8003342:	2201      	movs	r2, #1
 8003344:	21a5      	movs	r1, #165	; 0xa5
 8003346:	4828      	ldr	r0, [pc, #160]	; (80033e8 <IMUInit+0x124>)
 8003348:	f004 fcdf 	bl	8007d0a <HAL_UART_Transmit>
 800334c:	4603      	mov	r3, r0
 800334e:	461a      	mov	r2, r3
 8003350:	4b26      	ldr	r3, [pc, #152]	; (80033ec <IMUInit+0x128>)
 8003352:	701a      	strb	r2, [r3, #0]
	  huart2Status = HAL_UART_Transmit(&huart2, (u_char*)0x55, 1, 10);
 8003354:	230a      	movs	r3, #10
 8003356:	2201      	movs	r2, #1
 8003358:	2155      	movs	r1, #85	; 0x55
 800335a:	4823      	ldr	r0, [pc, #140]	; (80033e8 <IMUInit+0x124>)
 800335c:	f004 fcd5 	bl	8007d0a <HAL_UART_Transmit>
 8003360:	4603      	mov	r3, r0
 8003362:	461a      	mov	r2, r3
 8003364:	4b21      	ldr	r3, [pc, #132]	; (80033ec <IMUInit+0x128>)
 8003366:	701a      	strb	r2, [r3, #0]

	  strSize = sprintf((char*)buffer,"Kalibrasi heading done\r\n");
 8003368:	4a21      	ldr	r2, [pc, #132]	; (80033f0 <IMUInit+0x12c>)
 800336a:	4b26      	ldr	r3, [pc, #152]	; (8003404 <IMUInit+0x140>)
 800336c:	4615      	mov	r5, r2
 800336e:	461c      	mov	r4, r3
 8003370:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003372:	6028      	str	r0, [r5, #0]
 8003374:	6069      	str	r1, [r5, #4]
 8003376:	60aa      	str	r2, [r5, #8]
 8003378:	60eb      	str	r3, [r5, #12]
 800337a:	cc03      	ldmia	r4!, {r0, r1}
 800337c:	6128      	str	r0, [r5, #16]
 800337e:	6169      	str	r1, [r5, #20]
 8003380:	7823      	ldrb	r3, [r4, #0]
 8003382:	762b      	strb	r3, [r5, #24]
 8003384:	2318      	movs	r3, #24
 8003386:	b29a      	uxth	r2, r3
 8003388:	4b1b      	ldr	r3, [pc, #108]	; (80033f8 <IMUInit+0x134>)
 800338a:	801a      	strh	r2, [r3, #0]
	  huart3Status = HAL_UART_Transmit(&huart1, buffer, strSize, 100);
 800338c:	4b1a      	ldr	r3, [pc, #104]	; (80033f8 <IMUInit+0x134>)
 800338e:	881a      	ldrh	r2, [r3, #0]
 8003390:	2364      	movs	r3, #100	; 0x64
 8003392:	4917      	ldr	r1, [pc, #92]	; (80033f0 <IMUInit+0x12c>)
 8003394:	4819      	ldr	r0, [pc, #100]	; (80033fc <IMUInit+0x138>)
 8003396:	f004 fcb8 	bl	8007d0a <HAL_UART_Transmit>
 800339a:	4603      	mov	r3, r0
 800339c:	461a      	mov	r2, r3
 800339e:	4b18      	ldr	r3, [pc, #96]	; (8003400 <IMUInit+0x13c>)
 80033a0:	701a      	strb	r2, [r3, #0]

	  //Konfigurasi Output ASCII
	  HAL_Delay(100);
 80033a2:	2064      	movs	r0, #100	; 0x64
 80033a4:	f000 ffa4 	bl	80042f0 <HAL_Delay>
	  huart2Status = HAL_UART_Transmit(&huart2, (u_char*)0xA5, 1, 10);
 80033a8:	230a      	movs	r3, #10
 80033aa:	2201      	movs	r2, #1
 80033ac:	21a5      	movs	r1, #165	; 0xa5
 80033ae:	480e      	ldr	r0, [pc, #56]	; (80033e8 <IMUInit+0x124>)
 80033b0:	f004 fcab 	bl	8007d0a <HAL_UART_Transmit>
 80033b4:	4603      	mov	r3, r0
 80033b6:	461a      	mov	r2, r3
 80033b8:	4b0c      	ldr	r3, [pc, #48]	; (80033ec <IMUInit+0x128>)
 80033ba:	701a      	strb	r2, [r3, #0]
	  huart2Status = HAL_UART_Transmit(&huart2, (u_char*)0x52, 1, 10);
 80033bc:	230a      	movs	r3, #10
 80033be:	2201      	movs	r2, #1
 80033c0:	2152      	movs	r1, #82	; 0x52
 80033c2:	4809      	ldr	r0, [pc, #36]	; (80033e8 <IMUInit+0x124>)
 80033c4:	f004 fca1 	bl	8007d0a <HAL_UART_Transmit>
 80033c8:	4603      	mov	r3, r0
 80033ca:	461a      	mov	r2, r3
 80033cc:	4b07      	ldr	r3, [pc, #28]	; (80033ec <IMUInit+0x128>)
 80033ce:	701a      	strb	r2, [r3, #0]

	  huart2Status = HAL_UART_Receive_DMA(&huart2, IMUBuffer, 16);
 80033d0:	2210      	movs	r2, #16
 80033d2:	490d      	ldr	r1, [pc, #52]	; (8003408 <IMUInit+0x144>)
 80033d4:	4804      	ldr	r0, [pc, #16]	; (80033e8 <IMUInit+0x124>)
 80033d6:	f004 fd31 	bl	8007e3c <HAL_UART_Receive_DMA>
 80033da:	4603      	mov	r3, r0
 80033dc:	461a      	mov	r2, r3
 80033de:	4b03      	ldr	r3, [pc, #12]	; (80033ec <IMUInit+0x128>)
 80033e0:	701a      	strb	r2, [r3, #0]
}
 80033e2:	bf00      	nop
 80033e4:	bdb0      	pop	{r4, r5, r7, pc}
 80033e6:	bf00      	nop
 80033e8:	20000b20 	.word	0x20000b20
 80033ec:	20000388 	.word	0x20000388
 80033f0:	2000088c 	.word	0x2000088c
 80033f4:	0800bfb4 	.word	0x0800bfb4
 80033f8:	20000b8c 	.word	0x20000b8c
 80033fc:	2000084c 	.word	0x2000084c
 8003400:	200003cc 	.word	0x200003cc
 8003404:	0800bfcc 	.word	0x0800bfcc
 8003408:	20000adc 	.word	0x20000adc

0800340c <setPWM_DATA>:

void setPWM_DATA(struct PWM_DATA* pwm_data){
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
	if(pwm_data->onRisingEdge && !pwm_data->onFallingEdge){
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	7e1b      	ldrb	r3, [r3, #24]
 8003418:	2b00      	cmp	r3, #0
 800341a:	f000 8087 	beq.w	800352c <setPWM_DATA+0x120>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	7e5b      	ldrb	r3, [r3, #25]
 8003422:	f083 0301 	eor.w	r3, r3, #1
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2b00      	cmp	r3, #0
 800342a:	d07f      	beq.n	800352c <setPWM_DATA+0x120>
		pwm_data->onRisingEdge = false;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	761a      	strb	r2, [r3, #24]
		pwm_data->onFallingEdge = true;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2201      	movs	r2, #1
 8003436:	765a      	strb	r2, [r3, #25]
		pwm_data->RisingEdgeVal = HAL_TIM_ReadCapturedValue(pwm_data->htim, pwm_data->channel);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	4619      	mov	r1, r3
 8003442:	4610      	mov	r0, r2
 8003444:	f003 fee8 	bl	8007218 <HAL_TIM_ReadCapturedValue>
 8003448:	4602      	mov	r2, r0
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	609a      	str	r2, [r3, #8]
		__HAL_TIM_SET_CAPTUREPOLARITY(pwm_data->htim, pwm_data->channel, TIM_INPUTCHANNELPOLARITY_FALLING);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10a      	bne.n	800346c <setPWM_DATA+0x60>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6a1a      	ldr	r2, [r3, #32]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f022 020a 	bic.w	r2, r2, #10
 8003468:	621a      	str	r2, [r3, #32]
 800346a:	e027      	b.n	80034bc <setPWM_DATA+0xb0>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	2b04      	cmp	r3, #4
 8003472:	d10a      	bne.n	800348a <setPWM_DATA+0x7e>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	6a1a      	ldr	r2, [r3, #32]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003486:	621a      	str	r2, [r3, #32]
 8003488:	e018      	b.n	80034bc <setPWM_DATA+0xb0>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	2b08      	cmp	r3, #8
 8003490:	d10a      	bne.n	80034a8 <setPWM_DATA+0x9c>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	6a1a      	ldr	r2, [r3, #32]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 80034a4:	621a      	str	r2, [r3, #32]
 80034a6:	e009      	b.n	80034bc <setPWM_DATA+0xb0>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	6a1a      	ldr	r2, [r3, #32]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 80034ba:	621a      	str	r2, [r3, #32]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d10a      	bne.n	80034da <setPWM_DATA+0xce>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6a1a      	ldr	r2, [r3, #32]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f042 0202 	orr.w	r2, r2, #2
 80034d6:	621a      	str	r2, [r3, #32]
 80034d8:	e0aa      	b.n	8003630 <setPWM_DATA+0x224>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	2b04      	cmp	r3, #4
 80034e0:	d10a      	bne.n	80034f8 <setPWM_DATA+0xec>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	6a1a      	ldr	r2, [r3, #32]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f042 0220 	orr.w	r2, r2, #32
 80034f4:	621a      	str	r2, [r3, #32]
 80034f6:	e09b      	b.n	8003630 <setPWM_DATA+0x224>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	2b08      	cmp	r3, #8
 80034fe:	d10a      	bne.n	8003516 <setPWM_DATA+0x10a>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	6a1a      	ldr	r2, [r3, #32]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003512:	621a      	str	r2, [r3, #32]
 8003514:	e08c      	b.n	8003630 <setPWM_DATA+0x224>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6a1a      	ldr	r2, [r3, #32]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003528:	621a      	str	r2, [r3, #32]
 800352a:	e081      	b.n	8003630 <setPWM_DATA+0x224>

	} else if(pwm_data->onFallingEdge && !pwm_data->onRisingEdge) {
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	7e5b      	ldrb	r3, [r3, #25]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d07d      	beq.n	8003630 <setPWM_DATA+0x224>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	7e1b      	ldrb	r3, [r3, #24]
 8003538:	f083 0301 	eor.w	r3, r3, #1
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d076      	beq.n	8003630 <setPWM_DATA+0x224>
		pwm_data->onFallingEdge = false;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	765a      	strb	r2, [r3, #25]
		pwm_data->onRisingEdge =  true;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	761a      	strb	r2, [r3, #24]
		pwm_data->FallingEdgeVal = HAL_TIM_ReadCapturedValue(pwm_data->htim, pwm_data->channel);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	4619      	mov	r1, r3
 8003558:	4610      	mov	r0, r2
 800355a:	f003 fe5d 	bl	8007218 <HAL_TIM_ReadCapturedValue>
 800355e:	4602      	mov	r2, r0
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_CAPTUREPOLARITY(pwm_data->htim, pwm_data->channel, TIM_INPUTCHANNELPOLARITY_RISING);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d10a      	bne.n	8003582 <setPWM_DATA+0x176>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6a1a      	ldr	r2, [r3, #32]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f022 020a 	bic.w	r2, r2, #10
 800357e:	621a      	str	r2, [r3, #32]
 8003580:	e027      	b.n	80035d2 <setPWM_DATA+0x1c6>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	2b04      	cmp	r3, #4
 8003588:	d10a      	bne.n	80035a0 <setPWM_DATA+0x194>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	6a1a      	ldr	r2, [r3, #32]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800359c:	621a      	str	r2, [r3, #32]
 800359e:	e018      	b.n	80035d2 <setPWM_DATA+0x1c6>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	2b08      	cmp	r3, #8
 80035a6:	d10a      	bne.n	80035be <setPWM_DATA+0x1b2>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6a1a      	ldr	r2, [r3, #32]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 80035ba:	621a      	str	r2, [r3, #32]
 80035bc:	e009      	b.n	80035d2 <setPWM_DATA+0x1c6>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6a1a      	ldr	r2, [r3, #32]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 80035d0:	621a      	str	r2, [r3, #32]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d108      	bne.n	80035ec <setPWM_DATA+0x1e0>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	6a12      	ldr	r2, [r2, #32]
 80035e8:	621a      	str	r2, [r3, #32]
 80035ea:	e021      	b.n	8003630 <setPWM_DATA+0x224>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	2b04      	cmp	r3, #4
 80035f2:	d108      	bne.n	8003606 <setPWM_DATA+0x1fa>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	6a12      	ldr	r2, [r2, #32]
 8003602:	621a      	str	r2, [r3, #32]
 8003604:	e014      	b.n	8003630 <setPWM_DATA+0x224>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	2b08      	cmp	r3, #8
 800360c:	d108      	bne.n	8003620 <setPWM_DATA+0x214>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	6a12      	ldr	r2, [r2, #32]
 800361c:	621a      	str	r2, [r3, #32]
 800361e:	e007      	b.n	8003630 <setPWM_DATA+0x224>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6a12      	ldr	r2, [r2, #32]
 800362e:	621a      	str	r2, [r3, #32]
	}
	if(pwm_data->FallingEdgeVal > pwm_data->RisingEdgeVal){
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	68da      	ldr	r2, [r3, #12]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	429a      	cmp	r2, r3
 800363a:	d90c      	bls.n	8003656 <setPWM_DATA+0x24a>
		pwm_data->DutyCycleVal = pwm_data->FallingEdgeVal - pwm_data->RisingEdgeVal;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	68da      	ldr	r2, [r3, #12]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	1ad2      	subs	r2, r2, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	611a      	str	r2, [r3, #16]
		pwm_data->FallingEdgeVal = 0;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	60da      	str	r2, [r3, #12]
		pwm_data->RisingEdgeVal = 0;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	609a      	str	r2, [r3, #8]
	}
}
 8003656:	bf00      	nop
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
	...

08003660 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
  //HAL_UART_Transmit(&huart3, RxBuffer, 8, 100);
  if(huart->Instance == USART2 && IMUDataStatus == 0)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a16      	ldr	r2, [pc, #88]	; (80036c8 <HAL_UART_RxCpltCallback+0x68>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d107      	bne.n	8003682 <HAL_UART_RxCpltCallback+0x22>
 8003672:	4b16      	ldr	r3, [pc, #88]	; (80036cc <HAL_UART_RxCpltCallback+0x6c>)
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d103      	bne.n	8003682 <HAL_UART_RxCpltCallback+0x22>
	  IMUDataStatus = 1;
 800367a:	4b14      	ldr	r3, [pc, #80]	; (80036cc <HAL_UART_RxCpltCallback+0x6c>)
 800367c:	2201      	movs	r2, #1
 800367e:	701a      	strb	r2, [r3, #0]
			  GPSBufferLength = 1000 - __HAL_DMA_GET_COUNTER(&hdma_uart4_rx);
		  	  GPSDataStatus = 1;
			  HAL_UART_DMAStop(&huart4);
	  }
  }
}
 8003680:	e01d      	b.n	80036be <HAL_UART_RxCpltCallback+0x5e>
  else if(huart->Instance == UART4 && GPSDataStatus == 0){
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a12      	ldr	r2, [pc, #72]	; (80036d0 <HAL_UART_RxCpltCallback+0x70>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d118      	bne.n	80036be <HAL_UART_RxCpltCallback+0x5e>
 800368c:	4b11      	ldr	r3, [pc, #68]	; (80036d4 <HAL_UART_RxCpltCallback+0x74>)
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d114      	bne.n	80036be <HAL_UART_RxCpltCallback+0x5e>
	  if(__HAL_UART_GET_FLAG (&huart4, UART_FLAG_IDLE)){
 8003694:	4b10      	ldr	r3, [pc, #64]	; (80036d8 <HAL_UART_RxCpltCallback+0x78>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0310 	and.w	r3, r3, #16
 800369e:	2b10      	cmp	r3, #16
 80036a0:	d10d      	bne.n	80036be <HAL_UART_RxCpltCallback+0x5e>
			  GPSBufferLength = 1000 - __HAL_DMA_GET_COUNTER(&hdma_uart4_rx);
 80036a2:	4b0e      	ldr	r3, [pc, #56]	; (80036dc <HAL_UART_RxCpltCallback+0x7c>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 80036ac:	461a      	mov	r2, r3
 80036ae:	4b0c      	ldr	r3, [pc, #48]	; (80036e0 <HAL_UART_RxCpltCallback+0x80>)
 80036b0:	601a      	str	r2, [r3, #0]
		  	  GPSDataStatus = 1;
 80036b2:	4b08      	ldr	r3, [pc, #32]	; (80036d4 <HAL_UART_RxCpltCallback+0x74>)
 80036b4:	2201      	movs	r2, #1
 80036b6:	701a      	strb	r2, [r3, #0]
			  HAL_UART_DMAStop(&huart4);
 80036b8:	4807      	ldr	r0, [pc, #28]	; (80036d8 <HAL_UART_RxCpltCallback+0x78>)
 80036ba:	f004 fc3f 	bl	8007f3c <HAL_UART_DMAStop>
}
 80036be:	bf00      	nop
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	40004400 	.word	0x40004400
 80036cc:	200001fd 	.word	0x200001fd
 80036d0:	40004c00 	.word	0x40004c00
 80036d4:	200001fc 	.word	0x200001fc
 80036d8:	20000a40 	.word	0x20000a40
 80036dc:	20000234 	.word	0x20000234
 80036e0:	200007fc 	.word	0x200007fc

080036e4 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
	if(htim == RC_CH1.htim){
 80036ec:	4b1d      	ldr	r3, [pc, #116]	; (8003764 <HAL_TIM_IC_CaptureCallback+0x80>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d10f      	bne.n	8003716 <HAL_TIM_IC_CaptureCallback+0x32>
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2){
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	7f1b      	ldrb	r3, [r3, #28]
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d103      	bne.n	8003706 <HAL_TIM_IC_CaptureCallback+0x22>
			setPWM_DATA(&RC_CH1);
 80036fe:	4819      	ldr	r0, [pc, #100]	; (8003764 <HAL_TIM_IC_CaptureCallback+0x80>)
 8003700:	f7ff fe84 	bl	800340c <setPWM_DATA>
		setPWM_DATA(&RC_CH4);
	}
	else if(htim == RC_CH5.htim) {
		setPWM_DATA(&RC_CH5);
	}
}
 8003704:	e02a      	b.n	800375c <HAL_TIM_IC_CaptureCallback+0x78>
		} else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	7f1b      	ldrb	r3, [r3, #28]
 800370a:	2b01      	cmp	r3, #1
 800370c:	d126      	bne.n	800375c <HAL_TIM_IC_CaptureCallback+0x78>
			setPWM_DATA(&RC_CH4);
 800370e:	4816      	ldr	r0, [pc, #88]	; (8003768 <HAL_TIM_IC_CaptureCallback+0x84>)
 8003710:	f7ff fe7c 	bl	800340c <setPWM_DATA>
}
 8003714:	e022      	b.n	800375c <HAL_TIM_IC_CaptureCallback+0x78>
	else if(htim == RC_CH2.htim){
 8003716:	4b15      	ldr	r3, [pc, #84]	; (800376c <HAL_TIM_IC_CaptureCallback+0x88>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	429a      	cmp	r2, r3
 800371e:	d103      	bne.n	8003728 <HAL_TIM_IC_CaptureCallback+0x44>
		setPWM_DATA(&RC_CH2);
 8003720:	4812      	ldr	r0, [pc, #72]	; (800376c <HAL_TIM_IC_CaptureCallback+0x88>)
 8003722:	f7ff fe73 	bl	800340c <setPWM_DATA>
}
 8003726:	e019      	b.n	800375c <HAL_TIM_IC_CaptureCallback+0x78>
	else if(htim == RC_CH3.htim) {
 8003728:	4b11      	ldr	r3, [pc, #68]	; (8003770 <HAL_TIM_IC_CaptureCallback+0x8c>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	429a      	cmp	r2, r3
 8003730:	d103      	bne.n	800373a <HAL_TIM_IC_CaptureCallback+0x56>
		setPWM_DATA(&RC_CH3);
 8003732:	480f      	ldr	r0, [pc, #60]	; (8003770 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8003734:	f7ff fe6a 	bl	800340c <setPWM_DATA>
}
 8003738:	e010      	b.n	800375c <HAL_TIM_IC_CaptureCallback+0x78>
	else if(htim == RC_CH4.htim) {
 800373a:	4b0b      	ldr	r3, [pc, #44]	; (8003768 <HAL_TIM_IC_CaptureCallback+0x84>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	429a      	cmp	r2, r3
 8003742:	d103      	bne.n	800374c <HAL_TIM_IC_CaptureCallback+0x68>
		setPWM_DATA(&RC_CH4);
 8003744:	4808      	ldr	r0, [pc, #32]	; (8003768 <HAL_TIM_IC_CaptureCallback+0x84>)
 8003746:	f7ff fe61 	bl	800340c <setPWM_DATA>
}
 800374a:	e007      	b.n	800375c <HAL_TIM_IC_CaptureCallback+0x78>
	else if(htim == RC_CH5.htim) {
 800374c:	4b09      	ldr	r3, [pc, #36]	; (8003774 <HAL_TIM_IC_CaptureCallback+0x90>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	429a      	cmp	r2, r3
 8003754:	d102      	bne.n	800375c <HAL_TIM_IC_CaptureCallback+0x78>
		setPWM_DATA(&RC_CH5);
 8003756:	4807      	ldr	r0, [pc, #28]	; (8003774 <HAL_TIM_IC_CaptureCallback+0x90>)
 8003758:	f7ff fe58 	bl	800340c <setPWM_DATA>
}
 800375c:	bf00      	nop
 800375e:	3708      	adds	r7, #8
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	200007e0 	.word	0x200007e0
 8003768:	200003d0 	.word	0x200003d0
 800376c:	20000b90 	.word	0x20000b90
 8003770:	20000ac0 	.word	0x20000ac0
 8003774:	20000b70 	.word	0x20000b70

08003778 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003778:	b590      	push	{r4, r7, lr}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a0e      	ldr	r2, [pc, #56]	; (80037c0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d116      	bne.n	80037b8 <HAL_TIM_PeriodElapsedCallback+0x40>
				  HAL_UART_Transmit(&huart3, buffer, strSize, 100);
			  } else {
				  strSize = sprintf((char *)buffer, "\r\n");
				  HAL_UART_Transmit(&huart3, buffer, strSize, 100);
			  }*/
		bmp280_read_float(&bmp280, &temperature, &pressure, &humidity);
 800378a:	4b0e      	ldr	r3, [pc, #56]	; (80037c4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800378c:	4a0e      	ldr	r2, [pc, #56]	; (80037c8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800378e:	490f      	ldr	r1, [pc, #60]	; (80037cc <HAL_TIM_PeriodElapsedCallback+0x54>)
 8003790:	480f      	ldr	r0, [pc, #60]	; (80037d0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8003792:	f7fe f9d5 	bl	8001b40 <bmp280_read_float>
		strSize = sprintf((char*)buffer, "%f\r\n", pressure);
 8003796:	4b0c      	ldr	r3, [pc, #48]	; (80037c8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4618      	mov	r0, r3
 800379c:	f7fc fed4 	bl	8000548 <__aeabi_f2d>
 80037a0:	4603      	mov	r3, r0
 80037a2:	460c      	mov	r4, r1
 80037a4:	461a      	mov	r2, r3
 80037a6:	4623      	mov	r3, r4
 80037a8:	490a      	ldr	r1, [pc, #40]	; (80037d4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80037aa:	480b      	ldr	r0, [pc, #44]	; (80037d8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80037ac:	f005 ff58 	bl	8009660 <siprintf>
 80037b0:	4603      	mov	r3, r0
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	4b09      	ldr	r3, [pc, #36]	; (80037dc <HAL_TIM_PeriodElapsedCallback+0x64>)
 80037b6:	801a      	strh	r2, [r3, #0]
		//HAL_UART_Transmit(&huart3, buffer, strSize, 1);
	}
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd90      	pop	{r4, r7, pc}
 80037c0:	40001000 	.word	0x40001000
 80037c4:	20000848 	.word	0x20000848
 80037c8:	20000844 	.word	0x20000844
 80037cc:	2000078c 	.word	0x2000078c
 80037d0:	20000aec 	.word	0x20000aec
 80037d4:	0800bf1c 	.word	0x0800bf1c
 80037d8:	2000088c 	.word	0x2000088c
 80037dc:	20000b8c 	.word	0x20000b8c

080037e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037e0:	b480      	push	{r7}
 80037e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80037e4:	bf00      	nop
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
	...

080037f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037f6:	2300      	movs	r3, #0
 80037f8:	607b      	str	r3, [r7, #4]
 80037fa:	4b10      	ldr	r3, [pc, #64]	; (800383c <HAL_MspInit+0x4c>)
 80037fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fe:	4a0f      	ldr	r2, [pc, #60]	; (800383c <HAL_MspInit+0x4c>)
 8003800:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003804:	6453      	str	r3, [r2, #68]	; 0x44
 8003806:	4b0d      	ldr	r3, [pc, #52]	; (800383c <HAL_MspInit+0x4c>)
 8003808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800380e:	607b      	str	r3, [r7, #4]
 8003810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003812:	2300      	movs	r3, #0
 8003814:	603b      	str	r3, [r7, #0]
 8003816:	4b09      	ldr	r3, [pc, #36]	; (800383c <HAL_MspInit+0x4c>)
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	4a08      	ldr	r2, [pc, #32]	; (800383c <HAL_MspInit+0x4c>)
 800381c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003820:	6413      	str	r3, [r2, #64]	; 0x40
 8003822:	4b06      	ldr	r3, [pc, #24]	; (800383c <HAL_MspInit+0x4c>)
 8003824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800382a:	603b      	str	r3, [r7, #0]
 800382c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800382e:	bf00      	nop
 8003830:	370c      	adds	r7, #12
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	40023800 	.word	0x40023800

08003840 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b08c      	sub	sp, #48	; 0x30
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003848:	f107 031c 	add.w	r3, r7, #28
 800384c:	2200      	movs	r2, #0
 800384e:	601a      	str	r2, [r3, #0]
 8003850:	605a      	str	r2, [r3, #4]
 8003852:	609a      	str	r2, [r3, #8]
 8003854:	60da      	str	r2, [r3, #12]
 8003856:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a42      	ldr	r2, [pc, #264]	; (8003968 <HAL_I2C_MspInit+0x128>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d12d      	bne.n	80038be <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003862:	2300      	movs	r3, #0
 8003864:	61bb      	str	r3, [r7, #24]
 8003866:	4b41      	ldr	r3, [pc, #260]	; (800396c <HAL_I2C_MspInit+0x12c>)
 8003868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386a:	4a40      	ldr	r2, [pc, #256]	; (800396c <HAL_I2C_MspInit+0x12c>)
 800386c:	f043 0302 	orr.w	r3, r3, #2
 8003870:	6313      	str	r3, [r2, #48]	; 0x30
 8003872:	4b3e      	ldr	r3, [pc, #248]	; (800396c <HAL_I2C_MspInit+0x12c>)
 8003874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	61bb      	str	r3, [r7, #24]
 800387c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800387e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003882:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003884:	2312      	movs	r3, #18
 8003886:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003888:	2301      	movs	r3, #1
 800388a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800388c:	2303      	movs	r3, #3
 800388e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003890:	2304      	movs	r3, #4
 8003892:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003894:	f107 031c 	add.w	r3, r7, #28
 8003898:	4619      	mov	r1, r3
 800389a:	4835      	ldr	r0, [pc, #212]	; (8003970 <HAL_I2C_MspInit+0x130>)
 800389c:	f001 fa5c 	bl	8004d58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80038a0:	2300      	movs	r3, #0
 80038a2:	617b      	str	r3, [r7, #20]
 80038a4:	4b31      	ldr	r3, [pc, #196]	; (800396c <HAL_I2C_MspInit+0x12c>)
 80038a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a8:	4a30      	ldr	r2, [pc, #192]	; (800396c <HAL_I2C_MspInit+0x12c>)
 80038aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80038ae:	6413      	str	r3, [r2, #64]	; 0x40
 80038b0:	4b2e      	ldr	r3, [pc, #184]	; (800396c <HAL_I2C_MspInit+0x12c>)
 80038b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038b8:	617b      	str	r3, [r7, #20]
 80038ba:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80038bc:	e050      	b.n	8003960 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a2c      	ldr	r2, [pc, #176]	; (8003974 <HAL_I2C_MspInit+0x134>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d14b      	bne.n	8003960 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038c8:	2300      	movs	r3, #0
 80038ca:	613b      	str	r3, [r7, #16]
 80038cc:	4b27      	ldr	r3, [pc, #156]	; (800396c <HAL_I2C_MspInit+0x12c>)
 80038ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d0:	4a26      	ldr	r2, [pc, #152]	; (800396c <HAL_I2C_MspInit+0x12c>)
 80038d2:	f043 0304 	orr.w	r3, r3, #4
 80038d6:	6313      	str	r3, [r2, #48]	; 0x30
 80038d8:	4b24      	ldr	r3, [pc, #144]	; (800396c <HAL_I2C_MspInit+0x12c>)
 80038da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038dc:	f003 0304 	and.w	r3, r3, #4
 80038e0:	613b      	str	r3, [r7, #16]
 80038e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038e4:	2300      	movs	r3, #0
 80038e6:	60fb      	str	r3, [r7, #12]
 80038e8:	4b20      	ldr	r3, [pc, #128]	; (800396c <HAL_I2C_MspInit+0x12c>)
 80038ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ec:	4a1f      	ldr	r2, [pc, #124]	; (800396c <HAL_I2C_MspInit+0x12c>)
 80038ee:	f043 0301 	orr.w	r3, r3, #1
 80038f2:	6313      	str	r3, [r2, #48]	; 0x30
 80038f4:	4b1d      	ldr	r3, [pc, #116]	; (800396c <HAL_I2C_MspInit+0x12c>)
 80038f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	60fb      	str	r3, [r7, #12]
 80038fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003900:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003904:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003906:	2312      	movs	r3, #18
 8003908:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800390a:	2301      	movs	r3, #1
 800390c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800390e:	2303      	movs	r3, #3
 8003910:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003912:	2304      	movs	r3, #4
 8003914:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003916:	f107 031c 	add.w	r3, r7, #28
 800391a:	4619      	mov	r1, r3
 800391c:	4816      	ldr	r0, [pc, #88]	; (8003978 <HAL_I2C_MspInit+0x138>)
 800391e:	f001 fa1b 	bl	8004d58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003922:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003926:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003928:	2312      	movs	r3, #18
 800392a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800392c:	2301      	movs	r3, #1
 800392e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003930:	2303      	movs	r3, #3
 8003932:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003934:	2304      	movs	r3, #4
 8003936:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003938:	f107 031c 	add.w	r3, r7, #28
 800393c:	4619      	mov	r1, r3
 800393e:	480f      	ldr	r0, [pc, #60]	; (800397c <HAL_I2C_MspInit+0x13c>)
 8003940:	f001 fa0a 	bl	8004d58 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003944:	2300      	movs	r3, #0
 8003946:	60bb      	str	r3, [r7, #8]
 8003948:	4b08      	ldr	r3, [pc, #32]	; (800396c <HAL_I2C_MspInit+0x12c>)
 800394a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394c:	4a07      	ldr	r2, [pc, #28]	; (800396c <HAL_I2C_MspInit+0x12c>)
 800394e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003952:	6413      	str	r3, [r2, #64]	; 0x40
 8003954:	4b05      	ldr	r3, [pc, #20]	; (800396c <HAL_I2C_MspInit+0x12c>)
 8003956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003958:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800395c:	60bb      	str	r3, [r7, #8]
 800395e:	68bb      	ldr	r3, [r7, #8]
}
 8003960:	bf00      	nop
 8003962:	3730      	adds	r7, #48	; 0x30
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	40005400 	.word	0x40005400
 800396c:	40023800 	.word	0x40023800
 8003970:	40020400 	.word	0x40020400
 8003974:	40005c00 	.word	0x40005c00
 8003978:	40020800 	.word	0x40020800
 800397c:	40020000 	.word	0x40020000

08003980 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b094      	sub	sp, #80	; 0x50
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003988:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800398c:	2200      	movs	r2, #0
 800398e:	601a      	str	r2, [r3, #0]
 8003990:	605a      	str	r2, [r3, #4]
 8003992:	609a      	str	r2, [r3, #8]
 8003994:	60da      	str	r2, [r3, #12]
 8003996:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a9e      	ldr	r2, [pc, #632]	; (8003c18 <HAL_TIM_Base_MspInit+0x298>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d135      	bne.n	8003a0e <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80039a2:	2300      	movs	r3, #0
 80039a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80039a6:	4b9d      	ldr	r3, [pc, #628]	; (8003c1c <HAL_TIM_Base_MspInit+0x29c>)
 80039a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039aa:	4a9c      	ldr	r2, [pc, #624]	; (8003c1c <HAL_TIM_Base_MspInit+0x29c>)
 80039ac:	f043 0301 	orr.w	r3, r3, #1
 80039b0:	6453      	str	r3, [r2, #68]	; 0x44
 80039b2:	4b9a      	ldr	r3, [pc, #616]	; (8003c1c <HAL_TIM_Base_MspInit+0x29c>)
 80039b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80039bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80039be:	2300      	movs	r3, #0
 80039c0:	637b      	str	r3, [r7, #52]	; 0x34
 80039c2:	4b96      	ldr	r3, [pc, #600]	; (8003c1c <HAL_TIM_Base_MspInit+0x29c>)
 80039c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c6:	4a95      	ldr	r2, [pc, #596]	; (8003c1c <HAL_TIM_Base_MspInit+0x29c>)
 80039c8:	f043 0310 	orr.w	r3, r3, #16
 80039cc:	6313      	str	r3, [r2, #48]	; 0x30
 80039ce:	4b93      	ldr	r3, [pc, #588]	; (8003c1c <HAL_TIM_Base_MspInit+0x29c>)
 80039d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d2:	f003 0310 	and.w	r3, r3, #16
 80039d6:	637b      	str	r3, [r7, #52]	; 0x34
 80039d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80039da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039de:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039e0:	2302      	movs	r3, #2
 80039e2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e4:	2300      	movs	r3, #0
 80039e6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039e8:	2300      	movs	r3, #0
 80039ea:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80039ec:	2301      	movs	r3, #1
 80039ee:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80039f0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80039f4:	4619      	mov	r1, r3
 80039f6:	488a      	ldr	r0, [pc, #552]	; (8003c20 <HAL_TIM_Base_MspInit+0x2a0>)
 80039f8:	f001 f9ae 	bl	8004d58 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80039fc:	2200      	movs	r2, #0
 80039fe:	2100      	movs	r1, #0
 8003a00:	2018      	movs	r0, #24
 8003a02:	f000 fd72 	bl	80044ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003a06:	2018      	movs	r0, #24
 8003a08:	f000 fd8b 	bl	8004522 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8003a0c:	e151      	b.n	8003cb2 <HAL_TIM_Base_MspInit+0x332>
  else if(htim_base->Instance==TIM2)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a16:	d116      	bne.n	8003a46 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003a18:	2300      	movs	r3, #0
 8003a1a:	633b      	str	r3, [r7, #48]	; 0x30
 8003a1c:	4b7f      	ldr	r3, [pc, #508]	; (8003c1c <HAL_TIM_Base_MspInit+0x29c>)
 8003a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a20:	4a7e      	ldr	r2, [pc, #504]	; (8003c1c <HAL_TIM_Base_MspInit+0x29c>)
 8003a22:	f043 0301 	orr.w	r3, r3, #1
 8003a26:	6413      	str	r3, [r2, #64]	; 0x40
 8003a28:	4b7c      	ldr	r3, [pc, #496]	; (8003c1c <HAL_TIM_Base_MspInit+0x29c>)
 8003a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2c:	f003 0301 	and.w	r3, r3, #1
 8003a30:	633b      	str	r3, [r7, #48]	; 0x30
 8003a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003a34:	2200      	movs	r2, #0
 8003a36:	2100      	movs	r1, #0
 8003a38:	201c      	movs	r0, #28
 8003a3a:	f000 fd56 	bl	80044ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003a3e:	201c      	movs	r0, #28
 8003a40:	f000 fd6f 	bl	8004522 <HAL_NVIC_EnableIRQ>
}
 8003a44:	e135      	b.n	8003cb2 <HAL_TIM_Base_MspInit+0x332>
  else if(htim_base->Instance==TIM3)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a76      	ldr	r2, [pc, #472]	; (8003c24 <HAL_TIM_Base_MspInit+0x2a4>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d134      	bne.n	8003aba <HAL_TIM_Base_MspInit+0x13a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003a50:	2300      	movs	r3, #0
 8003a52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a54:	4b71      	ldr	r3, [pc, #452]	; (8003c1c <HAL_TIM_Base_MspInit+0x29c>)
 8003a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a58:	4a70      	ldr	r2, [pc, #448]	; (8003c1c <HAL_TIM_Base_MspInit+0x29c>)
 8003a5a:	f043 0302 	orr.w	r3, r3, #2
 8003a5e:	6413      	str	r3, [r2, #64]	; 0x40
 8003a60:	4b6e      	ldr	r3, [pc, #440]	; (8003c1c <HAL_TIM_Base_MspInit+0x29c>)
 8003a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a64:	f003 0302 	and.w	r3, r3, #2
 8003a68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a70:	4b6a      	ldr	r3, [pc, #424]	; (8003c1c <HAL_TIM_Base_MspInit+0x29c>)
 8003a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a74:	4a69      	ldr	r2, [pc, #420]	; (8003c1c <HAL_TIM_Base_MspInit+0x29c>)
 8003a76:	f043 0302 	orr.w	r3, r3, #2
 8003a7a:	6313      	str	r3, [r2, #48]	; 0x30
 8003a7c:	4b67      	ldr	r3, [pc, #412]	; (8003c1c <HAL_TIM_Base_MspInit+0x29c>)
 8003a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003a88:	2330      	movs	r3, #48	; 0x30
 8003a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a90:	2300      	movs	r3, #0
 8003a92:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a94:	2300      	movs	r3, #0
 8003a96:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003a98:	2302      	movs	r3, #2
 8003a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a9c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	4861      	ldr	r0, [pc, #388]	; (8003c28 <HAL_TIM_Base_MspInit+0x2a8>)
 8003aa4:	f001 f958 	bl	8004d58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	2100      	movs	r1, #0
 8003aac:	201d      	movs	r0, #29
 8003aae:	f000 fd1c 	bl	80044ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003ab2:	201d      	movs	r0, #29
 8003ab4:	f000 fd35 	bl	8004522 <HAL_NVIC_EnableIRQ>
}
 8003ab8:	e0fb      	b.n	8003cb2 <HAL_TIM_Base_MspInit+0x332>
  else if(htim_base->Instance==TIM4)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a5b      	ldr	r2, [pc, #364]	; (8003c2c <HAL_TIM_Base_MspInit+0x2ac>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d153      	bne.n	8003b6c <HAL_TIM_Base_MspInit+0x1ec>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ac8:	4b54      	ldr	r3, [pc, #336]	; (8003c1c <HAL_TIM_Base_MspInit+0x29c>)
 8003aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003acc:	4a53      	ldr	r2, [pc, #332]	; (8003c1c <HAL_TIM_Base_MspInit+0x29c>)
 8003ace:	f043 0304 	orr.w	r3, r3, #4
 8003ad2:	6413      	str	r3, [r2, #64]	; 0x40
 8003ad4:	4b51      	ldr	r3, [pc, #324]	; (8003c1c <HAL_TIM_Base_MspInit+0x29c>)
 8003ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad8:	f003 0304 	and.w	r3, r3, #4
 8003adc:	627b      	str	r3, [r7, #36]	; 0x24
 8003ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	623b      	str	r3, [r7, #32]
 8003ae4:	4b4d      	ldr	r3, [pc, #308]	; (8003c1c <HAL_TIM_Base_MspInit+0x29c>)
 8003ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae8:	4a4c      	ldr	r2, [pc, #304]	; (8003c1c <HAL_TIM_Base_MspInit+0x29c>)
 8003aea:	f043 0308 	orr.w	r3, r3, #8
 8003aee:	6313      	str	r3, [r2, #48]	; 0x30
 8003af0:	4b4a      	ldr	r3, [pc, #296]	; (8003c1c <HAL_TIM_Base_MspInit+0x29c>)
 8003af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af4:	f003 0308 	and.w	r3, r3, #8
 8003af8:	623b      	str	r3, [r7, #32]
 8003afa:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003afc:	2300      	movs	r3, #0
 8003afe:	61fb      	str	r3, [r7, #28]
 8003b00:	4b46      	ldr	r3, [pc, #280]	; (8003c1c <HAL_TIM_Base_MspInit+0x29c>)
 8003b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b04:	4a45      	ldr	r2, [pc, #276]	; (8003c1c <HAL_TIM_Base_MspInit+0x29c>)
 8003b06:	f043 0302 	orr.w	r3, r3, #2
 8003b0a:	6313      	str	r3, [r2, #48]	; 0x30
 8003b0c:	4b43      	ldr	r3, [pc, #268]	; (8003c1c <HAL_TIM_Base_MspInit+0x29c>)
 8003b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b10:	f003 0302 	and.w	r3, r3, #2
 8003b14:	61fb      	str	r3, [r7, #28]
 8003b16:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003b18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b1e:	2302      	movs	r3, #2
 8003b20:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b22:	2300      	movs	r3, #0
 8003b24:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b26:	2300      	movs	r3, #0
 8003b28:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b2e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003b32:	4619      	mov	r1, r3
 8003b34:	483e      	ldr	r0, [pc, #248]	; (8003c30 <HAL_TIM_Base_MspInit+0x2b0>)
 8003b36:	f001 f90f 	bl	8004d58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003b3a:	2380      	movs	r3, #128	; 0x80
 8003b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b3e:	2302      	movs	r3, #2
 8003b40:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b42:	2300      	movs	r3, #0
 8003b44:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b46:	2300      	movs	r3, #0
 8003b48:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003b4a:	2302      	movs	r3, #2
 8003b4c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b4e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003b52:	4619      	mov	r1, r3
 8003b54:	4834      	ldr	r0, [pc, #208]	; (8003c28 <HAL_TIM_Base_MspInit+0x2a8>)
 8003b56:	f001 f8ff 	bl	8004d58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	201e      	movs	r0, #30
 8003b60:	f000 fcc3 	bl	80044ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003b64:	201e      	movs	r0, #30
 8003b66:	f000 fcdc 	bl	8004522 <HAL_NVIC_EnableIRQ>
}
 8003b6a:	e0a2      	b.n	8003cb2 <HAL_TIM_Base_MspInit+0x332>
  else if(htim_base->Instance==TIM5)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a30      	ldr	r2, [pc, #192]	; (8003c34 <HAL_TIM_Base_MspInit+0x2b4>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d134      	bne.n	8003be0 <HAL_TIM_Base_MspInit+0x260>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003b76:	2300      	movs	r3, #0
 8003b78:	61bb      	str	r3, [r7, #24]
 8003b7a:	4b28      	ldr	r3, [pc, #160]	; (8003c1c <HAL_TIM_Base_MspInit+0x29c>)
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	4a27      	ldr	r2, [pc, #156]	; (8003c1c <HAL_TIM_Base_MspInit+0x29c>)
 8003b80:	f043 0308 	orr.w	r3, r3, #8
 8003b84:	6413      	str	r3, [r2, #64]	; 0x40
 8003b86:	4b25      	ldr	r3, [pc, #148]	; (8003c1c <HAL_TIM_Base_MspInit+0x29c>)
 8003b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8a:	f003 0308 	and.w	r3, r3, #8
 8003b8e:	61bb      	str	r3, [r7, #24]
 8003b90:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b92:	2300      	movs	r3, #0
 8003b94:	617b      	str	r3, [r7, #20]
 8003b96:	4b21      	ldr	r3, [pc, #132]	; (8003c1c <HAL_TIM_Base_MspInit+0x29c>)
 8003b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9a:	4a20      	ldr	r2, [pc, #128]	; (8003c1c <HAL_TIM_Base_MspInit+0x29c>)
 8003b9c:	f043 0301 	orr.w	r3, r3, #1
 8003ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ba2:	4b1e      	ldr	r3, [pc, #120]	; (8003c1c <HAL_TIM_Base_MspInit+0x29c>)
 8003ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	617b      	str	r3, [r7, #20]
 8003bac:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bc2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	481b      	ldr	r0, [pc, #108]	; (8003c38 <HAL_TIM_Base_MspInit+0x2b8>)
 8003bca:	f001 f8c5 	bl	8004d58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003bce:	2200      	movs	r2, #0
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	2032      	movs	r0, #50	; 0x32
 8003bd4:	f000 fc89 	bl	80044ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003bd8:	2032      	movs	r0, #50	; 0x32
 8003bda:	f000 fca2 	bl	8004522 <HAL_NVIC_EnableIRQ>
}
 8003bde:	e068      	b.n	8003cb2 <HAL_TIM_Base_MspInit+0x332>
  else if(htim_base->Instance==TIM6)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a15      	ldr	r2, [pc, #84]	; (8003c3c <HAL_TIM_Base_MspInit+0x2bc>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d12a      	bne.n	8003c40 <HAL_TIM_Base_MspInit+0x2c0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003bea:	2300      	movs	r3, #0
 8003bec:	613b      	str	r3, [r7, #16]
 8003bee:	4b0b      	ldr	r3, [pc, #44]	; (8003c1c <HAL_TIM_Base_MspInit+0x29c>)
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf2:	4a0a      	ldr	r2, [pc, #40]	; (8003c1c <HAL_TIM_Base_MspInit+0x29c>)
 8003bf4:	f043 0310 	orr.w	r3, r3, #16
 8003bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8003bfa:	4b08      	ldr	r3, [pc, #32]	; (8003c1c <HAL_TIM_Base_MspInit+0x29c>)
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfe:	f003 0310 	and.w	r3, r3, #16
 8003c02:	613b      	str	r3, [r7, #16]
 8003c04:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003c06:	2200      	movs	r2, #0
 8003c08:	2100      	movs	r1, #0
 8003c0a:	2036      	movs	r0, #54	; 0x36
 8003c0c:	f000 fc6d 	bl	80044ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003c10:	2036      	movs	r0, #54	; 0x36
 8003c12:	f000 fc86 	bl	8004522 <HAL_NVIC_EnableIRQ>
}
 8003c16:	e04c      	b.n	8003cb2 <HAL_TIM_Base_MspInit+0x332>
 8003c18:	40010000 	.word	0x40010000
 8003c1c:	40023800 	.word	0x40023800
 8003c20:	40021000 	.word	0x40021000
 8003c24:	40000400 	.word	0x40000400
 8003c28:	40020400 	.word	0x40020400
 8003c2c:	40000800 	.word	0x40000800
 8003c30:	40020c00 	.word	0x40020c00
 8003c34:	40000c00 	.word	0x40000c00
 8003c38:	40020000 	.word	0x40020000
 8003c3c:	40001000 	.word	0x40001000
  else if(htim_base->Instance==TIM9)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a1d      	ldr	r2, [pc, #116]	; (8003cbc <HAL_TIM_Base_MspInit+0x33c>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d133      	bne.n	8003cb2 <HAL_TIM_Base_MspInit+0x332>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	60fb      	str	r3, [r7, #12]
 8003c4e:	4b1c      	ldr	r3, [pc, #112]	; (8003cc0 <HAL_TIM_Base_MspInit+0x340>)
 8003c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c52:	4a1b      	ldr	r2, [pc, #108]	; (8003cc0 <HAL_TIM_Base_MspInit+0x340>)
 8003c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c58:	6453      	str	r3, [r2, #68]	; 0x44
 8003c5a:	4b19      	ldr	r3, [pc, #100]	; (8003cc0 <HAL_TIM_Base_MspInit+0x340>)
 8003c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c62:	60fb      	str	r3, [r7, #12]
 8003c64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c66:	2300      	movs	r3, #0
 8003c68:	60bb      	str	r3, [r7, #8]
 8003c6a:	4b15      	ldr	r3, [pc, #84]	; (8003cc0 <HAL_TIM_Base_MspInit+0x340>)
 8003c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6e:	4a14      	ldr	r2, [pc, #80]	; (8003cc0 <HAL_TIM_Base_MspInit+0x340>)
 8003c70:	f043 0310 	orr.w	r3, r3, #16
 8003c74:	6313      	str	r3, [r2, #48]	; 0x30
 8003c76:	4b12      	ldr	r3, [pc, #72]	; (8003cc0 <HAL_TIM_Base_MspInit+0x340>)
 8003c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7a:	f003 0310 	and.w	r3, r3, #16
 8003c7e:	60bb      	str	r3, [r7, #8]
 8003c80:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003c82:	2340      	movs	r3, #64	; 0x40
 8003c84:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c86:	2302      	movs	r3, #2
 8003c88:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8003c92:	2303      	movs	r3, #3
 8003c94:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003c96:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	4809      	ldr	r0, [pc, #36]	; (8003cc4 <HAL_TIM_Base_MspInit+0x344>)
 8003c9e:	f001 f85b 	bl	8004d58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	2018      	movs	r0, #24
 8003ca8:	f000 fc1f 	bl	80044ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003cac:	2018      	movs	r0, #24
 8003cae:	f000 fc38 	bl	8004522 <HAL_NVIC_EnableIRQ>
}
 8003cb2:	bf00      	nop
 8003cb4:	3750      	adds	r7, #80	; 0x50
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	40014000 	.word	0x40014000
 8003cc0:	40023800 	.word	0x40023800
 8003cc4:	40021000 	.word	0x40021000

08003cc8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b088      	sub	sp, #32
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cd0:	f107 030c 	add.w	r3, r7, #12
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	601a      	str	r2, [r3, #0]
 8003cd8:	605a      	str	r2, [r3, #4]
 8003cda:	609a      	str	r2, [r3, #8]
 8003cdc:	60da      	str	r2, [r3, #12]
 8003cde:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ce8:	d11e      	bne.n	8003d28 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cea:	2300      	movs	r3, #0
 8003cec:	60bb      	str	r3, [r7, #8]
 8003cee:	4b10      	ldr	r3, [pc, #64]	; (8003d30 <HAL_TIM_MspPostInit+0x68>)
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf2:	4a0f      	ldr	r2, [pc, #60]	; (8003d30 <HAL_TIM_MspPostInit+0x68>)
 8003cf4:	f043 0301 	orr.w	r3, r3, #1
 8003cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8003cfa:	4b0d      	ldr	r3, [pc, #52]	; (8003d30 <HAL_TIM_MspPostInit+0x68>)
 8003cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	60bb      	str	r3, [r7, #8]
 8003d04:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 8003d06:	f248 030e 	movw	r3, #32782	; 0x800e
 8003d0a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d10:	2300      	movs	r3, #0
 8003d12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d14:	2300      	movs	r3, #0
 8003d16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d1c:	f107 030c 	add.w	r3, r7, #12
 8003d20:	4619      	mov	r1, r3
 8003d22:	4804      	ldr	r0, [pc, #16]	; (8003d34 <HAL_TIM_MspPostInit+0x6c>)
 8003d24:	f001 f818 	bl	8004d58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003d28:	bf00      	nop
 8003d2a:	3720      	adds	r7, #32
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	40023800 	.word	0x40023800
 8003d34:	40020000 	.word	0x40020000

08003d38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b090      	sub	sp, #64	; 0x40
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d44:	2200      	movs	r2, #0
 8003d46:	601a      	str	r2, [r3, #0]
 8003d48:	605a      	str	r2, [r3, #4]
 8003d4a:	609a      	str	r2, [r3, #8]
 8003d4c:	60da      	str	r2, [r3, #12]
 8003d4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a98      	ldr	r2, [pc, #608]	; (8003fb8 <HAL_UART_MspInit+0x280>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d164      	bne.n	8003e24 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d5e:	4b97      	ldr	r3, [pc, #604]	; (8003fbc <HAL_UART_MspInit+0x284>)
 8003d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d62:	4a96      	ldr	r2, [pc, #600]	; (8003fbc <HAL_UART_MspInit+0x284>)
 8003d64:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d68:	6413      	str	r3, [r2, #64]	; 0x40
 8003d6a:	4b94      	ldr	r3, [pc, #592]	; (8003fbc <HAL_UART_MspInit+0x284>)
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d72:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d74:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d76:	2300      	movs	r3, #0
 8003d78:	627b      	str	r3, [r7, #36]	; 0x24
 8003d7a:	4b90      	ldr	r3, [pc, #576]	; (8003fbc <HAL_UART_MspInit+0x284>)
 8003d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7e:	4a8f      	ldr	r2, [pc, #572]	; (8003fbc <HAL_UART_MspInit+0x284>)
 8003d80:	f043 0304 	orr.w	r3, r3, #4
 8003d84:	6313      	str	r3, [r2, #48]	; 0x30
 8003d86:	4b8d      	ldr	r3, [pc, #564]	; (8003fbc <HAL_UART_MspInit+0x284>)
 8003d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8a:	f003 0304 	and.w	r3, r3, #4
 8003d8e:	627b      	str	r3, [r7, #36]	; 0x24
 8003d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003d92:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003d96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d98:	2302      	movs	r3, #2
 8003d9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003da0:	2303      	movs	r3, #3
 8003da2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003da4:	2308      	movs	r3, #8
 8003da6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003da8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003dac:	4619      	mov	r1, r3
 8003dae:	4884      	ldr	r0, [pc, #528]	; (8003fc0 <HAL_UART_MspInit+0x288>)
 8003db0:	f000 ffd2 	bl	8004d58 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8003db4:	4b83      	ldr	r3, [pc, #524]	; (8003fc4 <HAL_UART_MspInit+0x28c>)
 8003db6:	4a84      	ldr	r2, [pc, #528]	; (8003fc8 <HAL_UART_MspInit+0x290>)
 8003db8:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8003dba:	4b82      	ldr	r3, [pc, #520]	; (8003fc4 <HAL_UART_MspInit+0x28c>)
 8003dbc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003dc0:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003dc2:	4b80      	ldr	r3, [pc, #512]	; (8003fc4 <HAL_UART_MspInit+0x28c>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003dc8:	4b7e      	ldr	r3, [pc, #504]	; (8003fc4 <HAL_UART_MspInit+0x28c>)
 8003dca:	2200      	movs	r2, #0
 8003dcc:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003dce:	4b7d      	ldr	r3, [pc, #500]	; (8003fc4 <HAL_UART_MspInit+0x28c>)
 8003dd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003dd4:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003dd6:	4b7b      	ldr	r3, [pc, #492]	; (8003fc4 <HAL_UART_MspInit+0x28c>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ddc:	4b79      	ldr	r3, [pc, #484]	; (8003fc4 <HAL_UART_MspInit+0x28c>)
 8003dde:	2200      	movs	r2, #0
 8003de0:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8003de2:	4b78      	ldr	r3, [pc, #480]	; (8003fc4 <HAL_UART_MspInit+0x28c>)
 8003de4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003de8:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003dea:	4b76      	ldr	r3, [pc, #472]	; (8003fc4 <HAL_UART_MspInit+0x28c>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003df0:	4b74      	ldr	r3, [pc, #464]	; (8003fc4 <HAL_UART_MspInit+0x28c>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8003df6:	4873      	ldr	r0, [pc, #460]	; (8003fc4 <HAL_UART_MspInit+0x28c>)
 8003df8:	f000 fbae 	bl	8004558 <HAL_DMA_Init>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8003e02:	f7ff fced 	bl	80037e0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a6e      	ldr	r2, [pc, #440]	; (8003fc4 <HAL_UART_MspInit+0x28c>)
 8003e0a:	635a      	str	r2, [r3, #52]	; 0x34
 8003e0c:	4a6d      	ldr	r2, [pc, #436]	; (8003fc4 <HAL_UART_MspInit+0x28c>)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003e12:	2200      	movs	r2, #0
 8003e14:	2100      	movs	r1, #0
 8003e16:	2034      	movs	r0, #52	; 0x34
 8003e18:	f000 fb67 	bl	80044ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003e1c:	2034      	movs	r0, #52	; 0x34
 8003e1e:	f000 fb80 	bl	8004522 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003e22:	e0c5      	b.n	8003fb0 <HAL_UART_MspInit+0x278>
  else if(huart->Instance==USART1)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a68      	ldr	r2, [pc, #416]	; (8003fcc <HAL_UART_MspInit+0x294>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d12d      	bne.n	8003e8a <HAL_UART_MspInit+0x152>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003e2e:	2300      	movs	r3, #0
 8003e30:	623b      	str	r3, [r7, #32]
 8003e32:	4b62      	ldr	r3, [pc, #392]	; (8003fbc <HAL_UART_MspInit+0x284>)
 8003e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e36:	4a61      	ldr	r2, [pc, #388]	; (8003fbc <HAL_UART_MspInit+0x284>)
 8003e38:	f043 0310 	orr.w	r3, r3, #16
 8003e3c:	6453      	str	r3, [r2, #68]	; 0x44
 8003e3e:	4b5f      	ldr	r3, [pc, #380]	; (8003fbc <HAL_UART_MspInit+0x284>)
 8003e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e42:	f003 0310 	and.w	r3, r3, #16
 8003e46:	623b      	str	r3, [r7, #32]
 8003e48:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	61fb      	str	r3, [r7, #28]
 8003e4e:	4b5b      	ldr	r3, [pc, #364]	; (8003fbc <HAL_UART_MspInit+0x284>)
 8003e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e52:	4a5a      	ldr	r2, [pc, #360]	; (8003fbc <HAL_UART_MspInit+0x284>)
 8003e54:	f043 0301 	orr.w	r3, r3, #1
 8003e58:	6313      	str	r3, [r2, #48]	; 0x30
 8003e5a:	4b58      	ldr	r3, [pc, #352]	; (8003fbc <HAL_UART_MspInit+0x284>)
 8003e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	61fb      	str	r3, [r7, #28]
 8003e64:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003e66:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e6c:	2302      	movs	r3, #2
 8003e6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e70:	2300      	movs	r3, #0
 8003e72:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e74:	2303      	movs	r3, #3
 8003e76:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003e78:	2307      	movs	r3, #7
 8003e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e80:	4619      	mov	r1, r3
 8003e82:	4853      	ldr	r0, [pc, #332]	; (8003fd0 <HAL_UART_MspInit+0x298>)
 8003e84:	f000 ff68 	bl	8004d58 <HAL_GPIO_Init>
}
 8003e88:	e092      	b.n	8003fb0 <HAL_UART_MspInit+0x278>
  else if(huart->Instance==USART2)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a51      	ldr	r2, [pc, #324]	; (8003fd4 <HAL_UART_MspInit+0x29c>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d15b      	bne.n	8003f4c <HAL_UART_MspInit+0x214>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003e94:	2300      	movs	r3, #0
 8003e96:	61bb      	str	r3, [r7, #24]
 8003e98:	4b48      	ldr	r3, [pc, #288]	; (8003fbc <HAL_UART_MspInit+0x284>)
 8003e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9c:	4a47      	ldr	r2, [pc, #284]	; (8003fbc <HAL_UART_MspInit+0x284>)
 8003e9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ea2:	6413      	str	r3, [r2, #64]	; 0x40
 8003ea4:	4b45      	ldr	r3, [pc, #276]	; (8003fbc <HAL_UART_MspInit+0x284>)
 8003ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eac:	61bb      	str	r3, [r7, #24]
 8003eae:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	617b      	str	r3, [r7, #20]
 8003eb4:	4b41      	ldr	r3, [pc, #260]	; (8003fbc <HAL_UART_MspInit+0x284>)
 8003eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb8:	4a40      	ldr	r2, [pc, #256]	; (8003fbc <HAL_UART_MspInit+0x284>)
 8003eba:	f043 0308 	orr.w	r3, r3, #8
 8003ebe:	6313      	str	r3, [r2, #48]	; 0x30
 8003ec0:	4b3e      	ldr	r3, [pc, #248]	; (8003fbc <HAL_UART_MspInit+0x284>)
 8003ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec4:	f003 0308 	and.w	r3, r3, #8
 8003ec8:	617b      	str	r3, [r7, #20]
 8003eca:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003ecc:	2360      	movs	r3, #96	; 0x60
 8003ece:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ed0:	2302      	movs	r3, #2
 8003ed2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003edc:	2307      	movs	r3, #7
 8003ede:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ee0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	483c      	ldr	r0, [pc, #240]	; (8003fd8 <HAL_UART_MspInit+0x2a0>)
 8003ee8:	f000 ff36 	bl	8004d58 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003eec:	4b3b      	ldr	r3, [pc, #236]	; (8003fdc <HAL_UART_MspInit+0x2a4>)
 8003eee:	4a3c      	ldr	r2, [pc, #240]	; (8003fe0 <HAL_UART_MspInit+0x2a8>)
 8003ef0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003ef2:	4b3a      	ldr	r3, [pc, #232]	; (8003fdc <HAL_UART_MspInit+0x2a4>)
 8003ef4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003ef8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003efa:	4b38      	ldr	r3, [pc, #224]	; (8003fdc <HAL_UART_MspInit+0x2a4>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f00:	4b36      	ldr	r3, [pc, #216]	; (8003fdc <HAL_UART_MspInit+0x2a4>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003f06:	4b35      	ldr	r3, [pc, #212]	; (8003fdc <HAL_UART_MspInit+0x2a4>)
 8003f08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f0c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f0e:	4b33      	ldr	r3, [pc, #204]	; (8003fdc <HAL_UART_MspInit+0x2a4>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f14:	4b31      	ldr	r3, [pc, #196]	; (8003fdc <HAL_UART_MspInit+0x2a4>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003f1a:	4b30      	ldr	r3, [pc, #192]	; (8003fdc <HAL_UART_MspInit+0x2a4>)
 8003f1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f20:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003f22:	4b2e      	ldr	r3, [pc, #184]	; (8003fdc <HAL_UART_MspInit+0x2a4>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f28:	4b2c      	ldr	r3, [pc, #176]	; (8003fdc <HAL_UART_MspInit+0x2a4>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003f2e:	482b      	ldr	r0, [pc, #172]	; (8003fdc <HAL_UART_MspInit+0x2a4>)
 8003f30:	f000 fb12 	bl	8004558 <HAL_DMA_Init>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d001      	beq.n	8003f3e <HAL_UART_MspInit+0x206>
      Error_Handler();
 8003f3a:	f7ff fc51 	bl	80037e0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a26      	ldr	r2, [pc, #152]	; (8003fdc <HAL_UART_MspInit+0x2a4>)
 8003f42:	635a      	str	r2, [r3, #52]	; 0x34
 8003f44:	4a25      	ldr	r2, [pc, #148]	; (8003fdc <HAL_UART_MspInit+0x2a4>)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003f4a:	e031      	b.n	8003fb0 <HAL_UART_MspInit+0x278>
  else if(huart->Instance==USART3)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a24      	ldr	r2, [pc, #144]	; (8003fe4 <HAL_UART_MspInit+0x2ac>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d12c      	bne.n	8003fb0 <HAL_UART_MspInit+0x278>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003f56:	2300      	movs	r3, #0
 8003f58:	613b      	str	r3, [r7, #16]
 8003f5a:	4b18      	ldr	r3, [pc, #96]	; (8003fbc <HAL_UART_MspInit+0x284>)
 8003f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5e:	4a17      	ldr	r2, [pc, #92]	; (8003fbc <HAL_UART_MspInit+0x284>)
 8003f60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f64:	6413      	str	r3, [r2, #64]	; 0x40
 8003f66:	4b15      	ldr	r3, [pc, #84]	; (8003fbc <HAL_UART_MspInit+0x284>)
 8003f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f6e:	613b      	str	r3, [r7, #16]
 8003f70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f72:	2300      	movs	r3, #0
 8003f74:	60fb      	str	r3, [r7, #12]
 8003f76:	4b11      	ldr	r3, [pc, #68]	; (8003fbc <HAL_UART_MspInit+0x284>)
 8003f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7a:	4a10      	ldr	r2, [pc, #64]	; (8003fbc <HAL_UART_MspInit+0x284>)
 8003f7c:	f043 0302 	orr.w	r3, r3, #2
 8003f80:	6313      	str	r3, [r2, #48]	; 0x30
 8003f82:	4b0e      	ldr	r3, [pc, #56]	; (8003fbc <HAL_UART_MspInit+0x284>)
 8003f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	60fb      	str	r3, [r7, #12]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003f8e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003f92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f94:	2302      	movs	r3, #2
 8003f96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003fa0:	2307      	movs	r3, #7
 8003fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fa4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003fa8:	4619      	mov	r1, r3
 8003faa:	480f      	ldr	r0, [pc, #60]	; (8003fe8 <HAL_UART_MspInit+0x2b0>)
 8003fac:	f000 fed4 	bl	8004d58 <HAL_GPIO_Init>
}
 8003fb0:	bf00      	nop
 8003fb2:	3740      	adds	r7, #64	; 0x40
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	40004c00 	.word	0x40004c00
 8003fbc:	40023800 	.word	0x40023800
 8003fc0:	40020800 	.word	0x40020800
 8003fc4:	20000234 	.word	0x20000234
 8003fc8:	40026040 	.word	0x40026040
 8003fcc:	40011000 	.word	0x40011000
 8003fd0:	40020000 	.word	0x40020000
 8003fd4:	40004400 	.word	0x40004400
 8003fd8:	40020c00 	.word	0x40020c00
 8003fdc:	20000294 	.word	0x20000294
 8003fe0:	40026088 	.word	0x40026088
 8003fe4:	40004800 	.word	0x40004800
 8003fe8:	40020400 	.word	0x40020400

08003fec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003fec:	b480      	push	{r7}
 8003fee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003ff0:	bf00      	nop
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ffe:	e7fe      	b.n	8003ffe <HardFault_Handler+0x4>

08004000 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004000:	b480      	push	{r7}
 8004002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004004:	e7fe      	b.n	8004004 <MemManage_Handler+0x4>

08004006 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004006:	b480      	push	{r7}
 8004008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800400a:	e7fe      	b.n	800400a <BusFault_Handler+0x4>

0800400c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800400c:	b480      	push	{r7}
 800400e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004010:	e7fe      	b.n	8004010 <UsageFault_Handler+0x4>

08004012 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004012:	b480      	push	{r7}
 8004014:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004016:	bf00      	nop
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004020:	b480      	push	{r7}
 8004022:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004024:	bf00      	nop
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr

0800402e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800402e:	b480      	push	{r7}
 8004030:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004032:	bf00      	nop
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	HAL_IncTick();
 8004040:	f000 f936 	bl	80042b0 <HAL_IncTick>
  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004044:	bf00      	nop
 8004046:	bd80      	pop	{r7, pc}

08004048 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800404c:	4802      	ldr	r0, [pc, #8]	; (8004058 <DMA1_Stream2_IRQHandler+0x10>)
 800404e:	f000 fc1b 	bl	8004888 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8004052:	bf00      	nop
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	20000234 	.word	0x20000234

0800405c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004060:	4802      	ldr	r0, [pc, #8]	; (800406c <DMA1_Stream5_IRQHandler+0x10>)
 8004062:	f000 fc11 	bl	8004888 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004066:	bf00      	nop
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	20000294 	.word	0x20000294

08004070 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004074:	4803      	ldr	r0, [pc, #12]	; (8004084 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8004076:	f002 fdad 	bl	8006bd4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 800407a:	4803      	ldr	r0, [pc, #12]	; (8004088 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 800407c:	f002 fdaa 	bl	8006bd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8004080:	bf00      	nop
 8004082:	bd80      	pop	{r7, pc}
 8004084:	200009bc 	.word	0x200009bc
 8004088:	200009fc 	.word	0x200009fc

0800408c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004090:	4802      	ldr	r0, [pc, #8]	; (800409c <TIM2_IRQHandler+0x10>)
 8004092:	f002 fd9f 	bl	8006bd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004096:	bf00      	nop
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	20000a80 	.word	0x20000a80

080040a0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80040a4:	4802      	ldr	r0, [pc, #8]	; (80040b0 <TIM3_IRQHandler+0x10>)
 80040a6:	f002 fd95 	bl	8006bd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80040aa:	bf00      	nop
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	20000800 	.word	0x20000800

080040b4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80040b8:	4802      	ldr	r0, [pc, #8]	; (80040c4 <TIM4_IRQHandler+0x10>)
 80040ba:	f002 fd8b 	bl	8006bd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80040be:	bf00      	nop
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	20000348 	.word	0x20000348

080040c8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80040cc:	4802      	ldr	r0, [pc, #8]	; (80040d8 <TIM5_IRQHandler+0x10>)
 80040ce:	f002 fd81 	bl	8006bd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80040d2:	bf00      	nop
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	200007a0 	.word	0x200007a0

080040dc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80040e2:	480e      	ldr	r0, [pc, #56]	; (800411c <UART4_IRQHandler+0x40>)
 80040e4:	f003 ff86 	bl	8007ff4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */
  if(__HAL_UART_GET_FLAG(&huart4, UART_FLAG_IDLE)){
 80040e8:	4b0c      	ldr	r3, [pc, #48]	; (800411c <UART4_IRQHandler+0x40>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0310 	and.w	r3, r3, #16
 80040f2:	2b10      	cmp	r3, #16
 80040f4:	d10d      	bne.n	8004112 <UART4_IRQHandler+0x36>
	  HAL_UART_RxCpltCallback(&huart4);
 80040f6:	4809      	ldr	r0, [pc, #36]	; (800411c <UART4_IRQHandler+0x40>)
 80040f8:	f7ff fab2 	bl	8003660 <HAL_UART_RxCpltCallback>
	  __HAL_UART_CLEAR_IDLEFLAG(&huart4);
 80040fc:	2300      	movs	r3, #0
 80040fe:	607b      	str	r3, [r7, #4]
 8004100:	4b06      	ldr	r3, [pc, #24]	; (800411c <UART4_IRQHandler+0x40>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	607b      	str	r3, [r7, #4]
 8004108:	4b04      	ldr	r3, [pc, #16]	; (800411c <UART4_IRQHandler+0x40>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	607b      	str	r3, [r7, #4]
 8004110:	687b      	ldr	r3, [r7, #4]
  }
  /* USER CODE END UART4_IRQn 1 */
}
 8004112:	bf00      	nop
 8004114:	3708      	adds	r7, #8
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	20000a40 	.word	0x20000a40

08004120 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004124:	4802      	ldr	r0, [pc, #8]	; (8004130 <TIM6_DAC_IRQHandler+0x10>)
 8004126:	f002 fd55 	bl	8006bd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800412a:	bf00      	nop
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	20000960 	.word	0x20000960

08004134 <_sbrk>:
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	4b11      	ldr	r3, [pc, #68]	; (8004184 <_sbrk+0x50>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d102      	bne.n	800414a <_sbrk+0x16>
 8004144:	4b0f      	ldr	r3, [pc, #60]	; (8004184 <_sbrk+0x50>)
 8004146:	4a10      	ldr	r2, [pc, #64]	; (8004188 <_sbrk+0x54>)
 8004148:	601a      	str	r2, [r3, #0]
 800414a:	4b0e      	ldr	r3, [pc, #56]	; (8004184 <_sbrk+0x50>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	60fb      	str	r3, [r7, #12]
 8004150:	4b0c      	ldr	r3, [pc, #48]	; (8004184 <_sbrk+0x50>)
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4413      	add	r3, r2
 8004158:	466a      	mov	r2, sp
 800415a:	4293      	cmp	r3, r2
 800415c:	d907      	bls.n	800416e <_sbrk+0x3a>
 800415e:	f004 fdf1 	bl	8008d44 <__errno>
 8004162:	4602      	mov	r2, r0
 8004164:	230c      	movs	r3, #12
 8004166:	6013      	str	r3, [r2, #0]
 8004168:	f04f 33ff 	mov.w	r3, #4294967295
 800416c:	e006      	b.n	800417c <_sbrk+0x48>
 800416e:	4b05      	ldr	r3, [pc, #20]	; (8004184 <_sbrk+0x50>)
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4413      	add	r3, r2
 8004176:	4a03      	ldr	r2, [pc, #12]	; (8004184 <_sbrk+0x50>)
 8004178:	6013      	str	r3, [r2, #0]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	4618      	mov	r0, r3
 800417e:	3710      	adds	r7, #16
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	20000228 	.word	0x20000228
 8004188:	20000bb8 	.word	0x20000bb8

0800418c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004190:	4b08      	ldr	r3, [pc, #32]	; (80041b4 <SystemInit+0x28>)
 8004192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004196:	4a07      	ldr	r2, [pc, #28]	; (80041b4 <SystemInit+0x28>)
 8004198:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800419c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80041a0:	4b04      	ldr	r3, [pc, #16]	; (80041b4 <SystemInit+0x28>)
 80041a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80041a6:	609a      	str	r2, [r3, #8]
#endif
}
 80041a8:	bf00      	nop
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	e000ed00 	.word	0xe000ed00

080041b8 <Reset_Handler>:
 80041b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80041f0 <LoopFillZerobss+0x14>
 80041bc:	2100      	movs	r1, #0
 80041be:	e003      	b.n	80041c8 <LoopCopyDataInit>

080041c0 <CopyDataInit>:
 80041c0:	4b0c      	ldr	r3, [pc, #48]	; (80041f4 <LoopFillZerobss+0x18>)
 80041c2:	585b      	ldr	r3, [r3, r1]
 80041c4:	5043      	str	r3, [r0, r1]
 80041c6:	3104      	adds	r1, #4

080041c8 <LoopCopyDataInit>:
 80041c8:	480b      	ldr	r0, [pc, #44]	; (80041f8 <LoopFillZerobss+0x1c>)
 80041ca:	4b0c      	ldr	r3, [pc, #48]	; (80041fc <LoopFillZerobss+0x20>)
 80041cc:	1842      	adds	r2, r0, r1
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d3f6      	bcc.n	80041c0 <CopyDataInit>
 80041d2:	4a0b      	ldr	r2, [pc, #44]	; (8004200 <LoopFillZerobss+0x24>)
 80041d4:	e002      	b.n	80041dc <LoopFillZerobss>

080041d6 <FillZerobss>:
 80041d6:	2300      	movs	r3, #0
 80041d8:	f842 3b04 	str.w	r3, [r2], #4

080041dc <LoopFillZerobss>:
 80041dc:	4b09      	ldr	r3, [pc, #36]	; (8004204 <LoopFillZerobss+0x28>)
 80041de:	429a      	cmp	r2, r3
 80041e0:	d3f9      	bcc.n	80041d6 <FillZerobss>
 80041e2:	f7ff ffd3 	bl	800418c <SystemInit>
 80041e6:	f004 fdb3 	bl	8008d50 <__libc_init_array>
 80041ea:	f7fd fd3b 	bl	8001c64 <main>
 80041ee:	4770      	bx	lr
 80041f0:	20020000 	.word	0x20020000
 80041f4:	0800c2c0 	.word	0x0800c2c0
 80041f8:	20000000 	.word	0x20000000
 80041fc:	200001e0 	.word	0x200001e0
 8004200:	200001e0 	.word	0x200001e0
 8004204:	20000bb4 	.word	0x20000bb4

08004208 <ADC_IRQHandler>:
 8004208:	e7fe      	b.n	8004208 <ADC_IRQHandler>
	...

0800420c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004210:	4b0e      	ldr	r3, [pc, #56]	; (800424c <HAL_Init+0x40>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a0d      	ldr	r2, [pc, #52]	; (800424c <HAL_Init+0x40>)
 8004216:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800421a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800421c:	4b0b      	ldr	r3, [pc, #44]	; (800424c <HAL_Init+0x40>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a0a      	ldr	r2, [pc, #40]	; (800424c <HAL_Init+0x40>)
 8004222:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004226:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004228:	4b08      	ldr	r3, [pc, #32]	; (800424c <HAL_Init+0x40>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a07      	ldr	r2, [pc, #28]	; (800424c <HAL_Init+0x40>)
 800422e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004232:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004234:	2003      	movs	r0, #3
 8004236:	f000 f94d 	bl	80044d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800423a:	2000      	movs	r0, #0
 800423c:	f000 f808 	bl	8004250 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004240:	f7ff fad6 	bl	80037f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	40023c00 	.word	0x40023c00

08004250 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004258:	4b12      	ldr	r3, [pc, #72]	; (80042a4 <HAL_InitTick+0x54>)
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	4b12      	ldr	r3, [pc, #72]	; (80042a8 <HAL_InitTick+0x58>)
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	4619      	mov	r1, r3
 8004262:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004266:	fbb3 f3f1 	udiv	r3, r3, r1
 800426a:	fbb2 f3f3 	udiv	r3, r2, r3
 800426e:	4618      	mov	r0, r3
 8004270:	f000 f965 	bl	800453e <HAL_SYSTICK_Config>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e00e      	b.n	800429c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2b0f      	cmp	r3, #15
 8004282:	d80a      	bhi.n	800429a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004284:	2200      	movs	r2, #0
 8004286:	6879      	ldr	r1, [r7, #4]
 8004288:	f04f 30ff 	mov.w	r0, #4294967295
 800428c:	f000 f92d 	bl	80044ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004290:	4a06      	ldr	r2, [pc, #24]	; (80042ac <HAL_InitTick+0x5c>)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004296:	2300      	movs	r3, #0
 8004298:	e000      	b.n	800429c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
}
 800429c:	4618      	mov	r0, r3
 800429e:	3708      	adds	r7, #8
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	20000000 	.word	0x20000000
 80042a8:	20000008 	.word	0x20000008
 80042ac:	20000004 	.word	0x20000004

080042b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80042b0:	b480      	push	{r7}
 80042b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80042b4:	4b06      	ldr	r3, [pc, #24]	; (80042d0 <HAL_IncTick+0x20>)
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	461a      	mov	r2, r3
 80042ba:	4b06      	ldr	r3, [pc, #24]	; (80042d4 <HAL_IncTick+0x24>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4413      	add	r3, r2
 80042c0:	4a04      	ldr	r2, [pc, #16]	; (80042d4 <HAL_IncTick+0x24>)
 80042c2:	6013      	str	r3, [r2, #0]
}
 80042c4:	bf00      	nop
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	20000008 	.word	0x20000008
 80042d4:	20000bac 	.word	0x20000bac

080042d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042d8:	b480      	push	{r7}
 80042da:	af00      	add	r7, sp, #0
  return uwTick;
 80042dc:	4b03      	ldr	r3, [pc, #12]	; (80042ec <HAL_GetTick+0x14>)
 80042de:	681b      	ldr	r3, [r3, #0]
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	20000bac 	.word	0x20000bac

080042f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80042f8:	f7ff ffee 	bl	80042d8 <HAL_GetTick>
 80042fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004308:	d005      	beq.n	8004316 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800430a:	4b09      	ldr	r3, [pc, #36]	; (8004330 <HAL_Delay+0x40>)
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	461a      	mov	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	4413      	add	r3, r2
 8004314:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004316:	bf00      	nop
 8004318:	f7ff ffde 	bl	80042d8 <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	429a      	cmp	r2, r3
 8004326:	d8f7      	bhi.n	8004318 <HAL_Delay+0x28>
  {
  }
}
 8004328:	bf00      	nop
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	20000008 	.word	0x20000008

08004334 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f003 0307 	and.w	r3, r3, #7
 8004342:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004344:	4b0c      	ldr	r3, [pc, #48]	; (8004378 <__NVIC_SetPriorityGrouping+0x44>)
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800434a:	68ba      	ldr	r2, [r7, #8]
 800434c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004350:	4013      	ands	r3, r2
 8004352:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800435c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004364:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004366:	4a04      	ldr	r2, [pc, #16]	; (8004378 <__NVIC_SetPriorityGrouping+0x44>)
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	60d3      	str	r3, [r2, #12]
}
 800436c:	bf00      	nop
 800436e:	3714      	adds	r7, #20
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr
 8004378:	e000ed00 	.word	0xe000ed00

0800437c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800437c:	b480      	push	{r7}
 800437e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004380:	4b04      	ldr	r3, [pc, #16]	; (8004394 <__NVIC_GetPriorityGrouping+0x18>)
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	0a1b      	lsrs	r3, r3, #8
 8004386:	f003 0307 	and.w	r3, r3, #7
}
 800438a:	4618      	mov	r0, r3
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr
 8004394:	e000ed00 	.word	0xe000ed00

08004398 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	4603      	mov	r3, r0
 80043a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	db0b      	blt.n	80043c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043aa:	79fb      	ldrb	r3, [r7, #7]
 80043ac:	f003 021f 	and.w	r2, r3, #31
 80043b0:	4907      	ldr	r1, [pc, #28]	; (80043d0 <__NVIC_EnableIRQ+0x38>)
 80043b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043b6:	095b      	lsrs	r3, r3, #5
 80043b8:	2001      	movs	r0, #1
 80043ba:	fa00 f202 	lsl.w	r2, r0, r2
 80043be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80043c2:	bf00      	nop
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	e000e100 	.word	0xe000e100

080043d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	4603      	mov	r3, r0
 80043dc:	6039      	str	r1, [r7, #0]
 80043de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	db0a      	blt.n	80043fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	b2da      	uxtb	r2, r3
 80043ec:	490c      	ldr	r1, [pc, #48]	; (8004420 <__NVIC_SetPriority+0x4c>)
 80043ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043f2:	0112      	lsls	r2, r2, #4
 80043f4:	b2d2      	uxtb	r2, r2
 80043f6:	440b      	add	r3, r1
 80043f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043fc:	e00a      	b.n	8004414 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	b2da      	uxtb	r2, r3
 8004402:	4908      	ldr	r1, [pc, #32]	; (8004424 <__NVIC_SetPriority+0x50>)
 8004404:	79fb      	ldrb	r3, [r7, #7]
 8004406:	f003 030f 	and.w	r3, r3, #15
 800440a:	3b04      	subs	r3, #4
 800440c:	0112      	lsls	r2, r2, #4
 800440e:	b2d2      	uxtb	r2, r2
 8004410:	440b      	add	r3, r1
 8004412:	761a      	strb	r2, [r3, #24]
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr
 8004420:	e000e100 	.word	0xe000e100
 8004424:	e000ed00 	.word	0xe000ed00

08004428 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004428:	b480      	push	{r7}
 800442a:	b089      	sub	sp, #36	; 0x24
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f003 0307 	and.w	r3, r3, #7
 800443a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	f1c3 0307 	rsb	r3, r3, #7
 8004442:	2b04      	cmp	r3, #4
 8004444:	bf28      	it	cs
 8004446:	2304      	movcs	r3, #4
 8004448:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	3304      	adds	r3, #4
 800444e:	2b06      	cmp	r3, #6
 8004450:	d902      	bls.n	8004458 <NVIC_EncodePriority+0x30>
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	3b03      	subs	r3, #3
 8004456:	e000      	b.n	800445a <NVIC_EncodePriority+0x32>
 8004458:	2300      	movs	r3, #0
 800445a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800445c:	f04f 32ff 	mov.w	r2, #4294967295
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	fa02 f303 	lsl.w	r3, r2, r3
 8004466:	43da      	mvns	r2, r3
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	401a      	ands	r2, r3
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004470:	f04f 31ff 	mov.w	r1, #4294967295
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	fa01 f303 	lsl.w	r3, r1, r3
 800447a:	43d9      	mvns	r1, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004480:	4313      	orrs	r3, r2
         );
}
 8004482:	4618      	mov	r0, r3
 8004484:	3724      	adds	r7, #36	; 0x24
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
	...

08004490 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	3b01      	subs	r3, #1
 800449c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80044a0:	d301      	bcc.n	80044a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80044a2:	2301      	movs	r3, #1
 80044a4:	e00f      	b.n	80044c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044a6:	4a0a      	ldr	r2, [pc, #40]	; (80044d0 <SysTick_Config+0x40>)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	3b01      	subs	r3, #1
 80044ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044ae:	210f      	movs	r1, #15
 80044b0:	f04f 30ff 	mov.w	r0, #4294967295
 80044b4:	f7ff ff8e 	bl	80043d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044b8:	4b05      	ldr	r3, [pc, #20]	; (80044d0 <SysTick_Config+0x40>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044be:	4b04      	ldr	r3, [pc, #16]	; (80044d0 <SysTick_Config+0x40>)
 80044c0:	2207      	movs	r2, #7
 80044c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3708      	adds	r7, #8
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	e000e010 	.word	0xe000e010

080044d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f7ff ff29 	bl	8004334 <__NVIC_SetPriorityGrouping>
}
 80044e2:	bf00      	nop
 80044e4:	3708      	adds	r7, #8
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}

080044ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b086      	sub	sp, #24
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	4603      	mov	r3, r0
 80044f2:	60b9      	str	r1, [r7, #8]
 80044f4:	607a      	str	r2, [r7, #4]
 80044f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80044f8:	2300      	movs	r3, #0
 80044fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80044fc:	f7ff ff3e 	bl	800437c <__NVIC_GetPriorityGrouping>
 8004500:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	68b9      	ldr	r1, [r7, #8]
 8004506:	6978      	ldr	r0, [r7, #20]
 8004508:	f7ff ff8e 	bl	8004428 <NVIC_EncodePriority>
 800450c:	4602      	mov	r2, r0
 800450e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004512:	4611      	mov	r1, r2
 8004514:	4618      	mov	r0, r3
 8004516:	f7ff ff5d 	bl	80043d4 <__NVIC_SetPriority>
}
 800451a:	bf00      	nop
 800451c:	3718      	adds	r7, #24
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b082      	sub	sp, #8
 8004526:	af00      	add	r7, sp, #0
 8004528:	4603      	mov	r3, r0
 800452a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800452c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004530:	4618      	mov	r0, r3
 8004532:	f7ff ff31 	bl	8004398 <__NVIC_EnableIRQ>
}
 8004536:	bf00      	nop
 8004538:	3708      	adds	r7, #8
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}

0800453e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800453e:	b580      	push	{r7, lr}
 8004540:	b082      	sub	sp, #8
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f7ff ffa2 	bl	8004490 <SysTick_Config>
 800454c:	4603      	mov	r3, r0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3708      	adds	r7, #8
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
	...

08004558 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b086      	sub	sp, #24
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004560:	2300      	movs	r3, #0
 8004562:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004564:	f7ff feb8 	bl	80042d8 <HAL_GetTick>
 8004568:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d101      	bne.n	8004574 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e099      	b.n	80046a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2202      	movs	r2, #2
 8004580:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f022 0201 	bic.w	r2, r2, #1
 8004592:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004594:	e00f      	b.n	80045b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004596:	f7ff fe9f 	bl	80042d8 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	2b05      	cmp	r3, #5
 80045a2:	d908      	bls.n	80045b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2220      	movs	r2, #32
 80045a8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2203      	movs	r2, #3
 80045ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e078      	b.n	80046a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0301 	and.w	r3, r3, #1
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1e8      	bne.n	8004596 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80045cc:	697a      	ldr	r2, [r7, #20]
 80045ce:	4b38      	ldr	r3, [pc, #224]	; (80046b0 <HAL_DMA_Init+0x158>)
 80045d0:	4013      	ands	r3, r2
 80045d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685a      	ldr	r2, [r3, #4]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a1b      	ldr	r3, [r3, #32]
 8004600:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004602:	697a      	ldr	r2, [r7, #20]
 8004604:	4313      	orrs	r3, r2
 8004606:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460c:	2b04      	cmp	r3, #4
 800460e:	d107      	bne.n	8004620 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004618:	4313      	orrs	r3, r2
 800461a:	697a      	ldr	r2, [r7, #20]
 800461c:	4313      	orrs	r3, r2
 800461e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	697a      	ldr	r2, [r7, #20]
 8004626:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	f023 0307 	bic.w	r3, r3, #7
 8004636:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463c:	697a      	ldr	r2, [r7, #20]
 800463e:	4313      	orrs	r3, r2
 8004640:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004646:	2b04      	cmp	r3, #4
 8004648:	d117      	bne.n	800467a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	4313      	orrs	r3, r2
 8004652:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00e      	beq.n	800467a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 fb01 	bl	8004c64 <DMA_CheckFifoParam>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d008      	beq.n	800467a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2240      	movs	r2, #64	; 0x40
 800466c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004676:	2301      	movs	r3, #1
 8004678:	e016      	b.n	80046a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	697a      	ldr	r2, [r7, #20]
 8004680:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 fab8 	bl	8004bf8 <DMA_CalcBaseAndBitshift>
 8004688:	4603      	mov	r3, r0
 800468a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004690:	223f      	movs	r2, #63	; 0x3f
 8004692:	409a      	lsls	r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3718      	adds	r7, #24
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	f010803f 	.word	0xf010803f

080046b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b086      	sub	sp, #24
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	607a      	str	r2, [r7, #4]
 80046c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046c2:	2300      	movs	r3, #0
 80046c4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d101      	bne.n	80046da <HAL_DMA_Start_IT+0x26>
 80046d6:	2302      	movs	r3, #2
 80046d8:	e040      	b.n	800475c <HAL_DMA_Start_IT+0xa8>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2201      	movs	r2, #1
 80046de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d12f      	bne.n	800474e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2202      	movs	r2, #2
 80046f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	68b9      	ldr	r1, [r7, #8]
 8004702:	68f8      	ldr	r0, [r7, #12]
 8004704:	f000 fa4a 	bl	8004b9c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800470c:	223f      	movs	r2, #63	; 0x3f
 800470e:	409a      	lsls	r2, r3
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f042 0216 	orr.w	r2, r2, #22
 8004722:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004728:	2b00      	cmp	r3, #0
 800472a:	d007      	beq.n	800473c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f042 0208 	orr.w	r2, r2, #8
 800473a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f042 0201 	orr.w	r2, r2, #1
 800474a:	601a      	str	r2, [r3, #0]
 800474c:	e005      	b.n	800475a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004756:	2302      	movs	r3, #2
 8004758:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800475a:	7dfb      	ldrb	r3, [r7, #23]
}
 800475c:	4618      	mov	r0, r3
 800475e:	3718      	adds	r7, #24
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004770:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004772:	f7ff fdb1 	bl	80042d8 <HAL_GetTick>
 8004776:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800477e:	b2db      	uxtb	r3, r3
 8004780:	2b02      	cmp	r3, #2
 8004782:	d008      	beq.n	8004796 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2280      	movs	r2, #128	; 0x80
 8004788:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e052      	b.n	800483c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f022 0216 	bic.w	r2, r2, #22
 80047a4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	695a      	ldr	r2, [r3, #20]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047b4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d103      	bne.n	80047c6 <HAL_DMA_Abort+0x62>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d007      	beq.n	80047d6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f022 0208 	bic.w	r2, r2, #8
 80047d4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f022 0201 	bic.w	r2, r2, #1
 80047e4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047e6:	e013      	b.n	8004810 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80047e8:	f7ff fd76 	bl	80042d8 <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	2b05      	cmp	r3, #5
 80047f4:	d90c      	bls.n	8004810 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2220      	movs	r2, #32
 80047fa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2203      	movs	r2, #3
 8004808:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	e015      	b.n	800483c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0301 	and.w	r3, r3, #1
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1e4      	bne.n	80047e8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004822:	223f      	movs	r2, #63	; 0x3f
 8004824:	409a      	lsls	r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2201      	movs	r2, #1
 8004836:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800483a:	2300      	movs	r3, #0
}
 800483c:	4618      	mov	r0, r3
 800483e:	3710      	adds	r7, #16
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004852:	b2db      	uxtb	r3, r3
 8004854:	2b02      	cmp	r3, #2
 8004856:	d004      	beq.n	8004862 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2280      	movs	r2, #128	; 0x80
 800485c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e00c      	b.n	800487c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2205      	movs	r2, #5
 8004866:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f022 0201 	bic.w	r2, r2, #1
 8004878:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b086      	sub	sp, #24
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004890:	2300      	movs	r3, #0
 8004892:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004894:	4b92      	ldr	r3, [pc, #584]	; (8004ae0 <HAL_DMA_IRQHandler+0x258>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a92      	ldr	r2, [pc, #584]	; (8004ae4 <HAL_DMA_IRQHandler+0x25c>)
 800489a:	fba2 2303 	umull	r2, r3, r2, r3
 800489e:	0a9b      	lsrs	r3, r3, #10
 80048a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048b2:	2208      	movs	r2, #8
 80048b4:	409a      	lsls	r2, r3
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	4013      	ands	r3, r2
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d01a      	beq.n	80048f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0304 	and.w	r3, r3, #4
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d013      	beq.n	80048f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f022 0204 	bic.w	r2, r2, #4
 80048da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048e0:	2208      	movs	r2, #8
 80048e2:	409a      	lsls	r2, r3
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ec:	f043 0201 	orr.w	r2, r3, #1
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048f8:	2201      	movs	r2, #1
 80048fa:	409a      	lsls	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	4013      	ands	r3, r2
 8004900:	2b00      	cmp	r3, #0
 8004902:	d012      	beq.n	800492a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00b      	beq.n	800492a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004916:	2201      	movs	r2, #1
 8004918:	409a      	lsls	r2, r3
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004922:	f043 0202 	orr.w	r2, r3, #2
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800492e:	2204      	movs	r2, #4
 8004930:	409a      	lsls	r2, r3
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	4013      	ands	r3, r2
 8004936:	2b00      	cmp	r3, #0
 8004938:	d012      	beq.n	8004960 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0302 	and.w	r3, r3, #2
 8004944:	2b00      	cmp	r3, #0
 8004946:	d00b      	beq.n	8004960 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800494c:	2204      	movs	r2, #4
 800494e:	409a      	lsls	r2, r3
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004958:	f043 0204 	orr.w	r2, r3, #4
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004964:	2210      	movs	r2, #16
 8004966:	409a      	lsls	r2, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	4013      	ands	r3, r2
 800496c:	2b00      	cmp	r3, #0
 800496e:	d043      	beq.n	80049f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0308 	and.w	r3, r3, #8
 800497a:	2b00      	cmp	r3, #0
 800497c:	d03c      	beq.n	80049f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004982:	2210      	movs	r2, #16
 8004984:	409a      	lsls	r2, r3
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d018      	beq.n	80049ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d108      	bne.n	80049b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d024      	beq.n	80049f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	4798      	blx	r3
 80049b6:	e01f      	b.n	80049f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d01b      	beq.n	80049f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	4798      	blx	r3
 80049c8:	e016      	b.n	80049f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d107      	bne.n	80049e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f022 0208 	bic.w	r2, r2, #8
 80049e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d003      	beq.n	80049f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049fc:	2220      	movs	r2, #32
 80049fe:	409a      	lsls	r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	4013      	ands	r3, r2
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f000 808e 	beq.w	8004b26 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0310 	and.w	r3, r3, #16
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	f000 8086 	beq.w	8004b26 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a1e:	2220      	movs	r2, #32
 8004a20:	409a      	lsls	r2, r3
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b05      	cmp	r3, #5
 8004a30:	d136      	bne.n	8004aa0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f022 0216 	bic.w	r2, r2, #22
 8004a40:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	695a      	ldr	r2, [r3, #20]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a50:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d103      	bne.n	8004a62 <HAL_DMA_IRQHandler+0x1da>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d007      	beq.n	8004a72 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f022 0208 	bic.w	r2, r2, #8
 8004a70:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a76:	223f      	movs	r2, #63	; 0x3f
 8004a78:	409a      	lsls	r2, r3
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d07d      	beq.n	8004b92 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	4798      	blx	r3
        }
        return;
 8004a9e:	e078      	b.n	8004b92 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d01c      	beq.n	8004ae8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d108      	bne.n	8004ace <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d030      	beq.n	8004b26 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	4798      	blx	r3
 8004acc:	e02b      	b.n	8004b26 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d027      	beq.n	8004b26 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	4798      	blx	r3
 8004ade:	e022      	b.n	8004b26 <HAL_DMA_IRQHandler+0x29e>
 8004ae0:	20000000 	.word	0x20000000
 8004ae4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10f      	bne.n	8004b16 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f022 0210 	bic.w	r2, r2, #16
 8004b04:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2201      	movs	r2, #1
 8004b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d003      	beq.n	8004b26 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d032      	beq.n	8004b94 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b32:	f003 0301 	and.w	r3, r3, #1
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d022      	beq.n	8004b80 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2205      	movs	r2, #5
 8004b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f022 0201 	bic.w	r2, r2, #1
 8004b50:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	3301      	adds	r3, #1
 8004b56:	60bb      	str	r3, [r7, #8]
 8004b58:	697a      	ldr	r2, [r7, #20]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d307      	bcc.n	8004b6e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0301 	and.w	r3, r3, #1
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1f2      	bne.n	8004b52 <HAL_DMA_IRQHandler+0x2ca>
 8004b6c:	e000      	b.n	8004b70 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004b6e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d005      	beq.n	8004b94 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	4798      	blx	r3
 8004b90:	e000      	b.n	8004b94 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004b92:	bf00      	nop
    }
  }
}
 8004b94:	3718      	adds	r7, #24
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop

08004b9c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
 8004ba8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004bb8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	683a      	ldr	r2, [r7, #0]
 8004bc0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	2b40      	cmp	r3, #64	; 0x40
 8004bc8:	d108      	bne.n	8004bdc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68ba      	ldr	r2, [r7, #8]
 8004bd8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004bda:	e007      	b.n	8004bec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68ba      	ldr	r2, [r7, #8]
 8004be2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	60da      	str	r2, [r3, #12]
}
 8004bec:	bf00      	nop
 8004bee:	3714      	adds	r7, #20
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b085      	sub	sp, #20
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	3b10      	subs	r3, #16
 8004c08:	4a14      	ldr	r2, [pc, #80]	; (8004c5c <DMA_CalcBaseAndBitshift+0x64>)
 8004c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c0e:	091b      	lsrs	r3, r3, #4
 8004c10:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004c12:	4a13      	ldr	r2, [pc, #76]	; (8004c60 <DMA_CalcBaseAndBitshift+0x68>)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	4413      	add	r3, r2
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2b03      	cmp	r3, #3
 8004c24:	d909      	bls.n	8004c3a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004c2e:	f023 0303 	bic.w	r3, r3, #3
 8004c32:	1d1a      	adds	r2, r3, #4
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	659a      	str	r2, [r3, #88]	; 0x58
 8004c38:	e007      	b.n	8004c4a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004c42:	f023 0303 	bic.w	r3, r3, #3
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3714      	adds	r7, #20
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	aaaaaaab 	.word	0xaaaaaaab
 8004c60:	0800c000 	.word	0x0800c000

08004c64 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c74:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	699b      	ldr	r3, [r3, #24]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d11f      	bne.n	8004cbe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	2b03      	cmp	r3, #3
 8004c82:	d855      	bhi.n	8004d30 <DMA_CheckFifoParam+0xcc>
 8004c84:	a201      	add	r2, pc, #4	; (adr r2, 8004c8c <DMA_CheckFifoParam+0x28>)
 8004c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c8a:	bf00      	nop
 8004c8c:	08004c9d 	.word	0x08004c9d
 8004c90:	08004caf 	.word	0x08004caf
 8004c94:	08004c9d 	.word	0x08004c9d
 8004c98:	08004d31 	.word	0x08004d31
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d045      	beq.n	8004d34 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cac:	e042      	b.n	8004d34 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004cb6:	d13f      	bne.n	8004d38 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cbc:	e03c      	b.n	8004d38 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	699b      	ldr	r3, [r3, #24]
 8004cc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cc6:	d121      	bne.n	8004d0c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	2b03      	cmp	r3, #3
 8004ccc:	d836      	bhi.n	8004d3c <DMA_CheckFifoParam+0xd8>
 8004cce:	a201      	add	r2, pc, #4	; (adr r2, 8004cd4 <DMA_CheckFifoParam+0x70>)
 8004cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cd4:	08004ce5 	.word	0x08004ce5
 8004cd8:	08004ceb 	.word	0x08004ceb
 8004cdc:	08004ce5 	.word	0x08004ce5
 8004ce0:	08004cfd 	.word	0x08004cfd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ce8:	e02f      	b.n	8004d4a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d024      	beq.n	8004d40 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cfa:	e021      	b.n	8004d40 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d00:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d04:	d11e      	bne.n	8004d44 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004d0a:	e01b      	b.n	8004d44 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d902      	bls.n	8004d18 <DMA_CheckFifoParam+0xb4>
 8004d12:	2b03      	cmp	r3, #3
 8004d14:	d003      	beq.n	8004d1e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004d16:	e018      	b.n	8004d4a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d1c:	e015      	b.n	8004d4a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00e      	beq.n	8004d48 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	73fb      	strb	r3, [r7, #15]
      break;
 8004d2e:	e00b      	b.n	8004d48 <DMA_CheckFifoParam+0xe4>
      break;
 8004d30:	bf00      	nop
 8004d32:	e00a      	b.n	8004d4a <DMA_CheckFifoParam+0xe6>
      break;
 8004d34:	bf00      	nop
 8004d36:	e008      	b.n	8004d4a <DMA_CheckFifoParam+0xe6>
      break;
 8004d38:	bf00      	nop
 8004d3a:	e006      	b.n	8004d4a <DMA_CheckFifoParam+0xe6>
      break;
 8004d3c:	bf00      	nop
 8004d3e:	e004      	b.n	8004d4a <DMA_CheckFifoParam+0xe6>
      break;
 8004d40:	bf00      	nop
 8004d42:	e002      	b.n	8004d4a <DMA_CheckFifoParam+0xe6>
      break;   
 8004d44:	bf00      	nop
 8004d46:	e000      	b.n	8004d4a <DMA_CheckFifoParam+0xe6>
      break;
 8004d48:	bf00      	nop
    }
  } 
  
  return status; 
 8004d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3714      	adds	r7, #20
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b089      	sub	sp, #36	; 0x24
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004d62:	2300      	movs	r3, #0
 8004d64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004d66:	2300      	movs	r3, #0
 8004d68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d6e:	2300      	movs	r3, #0
 8004d70:	61fb      	str	r3, [r7, #28]
 8004d72:	e16b      	b.n	800504c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d74:	2201      	movs	r2, #1
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	697a      	ldr	r2, [r7, #20]
 8004d84:	4013      	ands	r3, r2
 8004d86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d88:	693a      	ldr	r2, [r7, #16]
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	f040 815a 	bne.w	8005046 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d00b      	beq.n	8004db2 <HAL_GPIO_Init+0x5a>
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d007      	beq.n	8004db2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004da6:	2b11      	cmp	r3, #17
 8004da8:	d003      	beq.n	8004db2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	2b12      	cmp	r3, #18
 8004db0:	d130      	bne.n	8004e14 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	005b      	lsls	r3, r3, #1
 8004dbc:	2203      	movs	r2, #3
 8004dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc2:	43db      	mvns	r3, r3
 8004dc4:	69ba      	ldr	r2, [r7, #24]
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	68da      	ldr	r2, [r3, #12]
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	005b      	lsls	r3, r3, #1
 8004dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd6:	69ba      	ldr	r2, [r7, #24]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	69ba      	ldr	r2, [r7, #24]
 8004de0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004de8:	2201      	movs	r2, #1
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	fa02 f303 	lsl.w	r3, r2, r3
 8004df0:	43db      	mvns	r3, r3
 8004df2:	69ba      	ldr	r2, [r7, #24]
 8004df4:	4013      	ands	r3, r2
 8004df6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	091b      	lsrs	r3, r3, #4
 8004dfe:	f003 0201 	and.w	r2, r3, #1
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	fa02 f303 	lsl.w	r3, r2, r3
 8004e08:	69ba      	ldr	r2, [r7, #24]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	69ba      	ldr	r2, [r7, #24]
 8004e12:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	005b      	lsls	r3, r3, #1
 8004e1e:	2203      	movs	r2, #3
 8004e20:	fa02 f303 	lsl.w	r3, r2, r3
 8004e24:	43db      	mvns	r3, r3
 8004e26:	69ba      	ldr	r2, [r7, #24]
 8004e28:	4013      	ands	r3, r2
 8004e2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	689a      	ldr	r2, [r3, #8]
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	005b      	lsls	r3, r3, #1
 8004e34:	fa02 f303 	lsl.w	r3, r2, r3
 8004e38:	69ba      	ldr	r2, [r7, #24]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	69ba      	ldr	r2, [r7, #24]
 8004e42:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d003      	beq.n	8004e54 <HAL_GPIO_Init+0xfc>
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	2b12      	cmp	r3, #18
 8004e52:	d123      	bne.n	8004e9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	08da      	lsrs	r2, r3, #3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	3208      	adds	r2, #8
 8004e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	f003 0307 	and.w	r3, r3, #7
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	220f      	movs	r2, #15
 8004e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e70:	43db      	mvns	r3, r3
 8004e72:	69ba      	ldr	r2, [r7, #24]
 8004e74:	4013      	ands	r3, r2
 8004e76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	691a      	ldr	r2, [r3, #16]
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	f003 0307 	and.w	r3, r3, #7
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	fa02 f303 	lsl.w	r3, r2, r3
 8004e88:	69ba      	ldr	r2, [r7, #24]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	08da      	lsrs	r2, r3, #3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	3208      	adds	r2, #8
 8004e96:	69b9      	ldr	r1, [r7, #24]
 8004e98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	005b      	lsls	r3, r3, #1
 8004ea6:	2203      	movs	r2, #3
 8004ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8004eac:	43db      	mvns	r3, r3
 8004eae:	69ba      	ldr	r2, [r7, #24]
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f003 0203 	and.w	r2, r3, #3
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	005b      	lsls	r3, r3, #1
 8004ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec4:	69ba      	ldr	r2, [r7, #24]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	f000 80b4 	beq.w	8005046 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ede:	2300      	movs	r3, #0
 8004ee0:	60fb      	str	r3, [r7, #12]
 8004ee2:	4b5f      	ldr	r3, [pc, #380]	; (8005060 <HAL_GPIO_Init+0x308>)
 8004ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ee6:	4a5e      	ldr	r2, [pc, #376]	; (8005060 <HAL_GPIO_Init+0x308>)
 8004ee8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004eec:	6453      	str	r3, [r2, #68]	; 0x44
 8004eee:	4b5c      	ldr	r3, [pc, #368]	; (8005060 <HAL_GPIO_Init+0x308>)
 8004ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ef2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ef6:	60fb      	str	r3, [r7, #12]
 8004ef8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004efa:	4a5a      	ldr	r2, [pc, #360]	; (8005064 <HAL_GPIO_Init+0x30c>)
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	089b      	lsrs	r3, r3, #2
 8004f00:	3302      	adds	r3, #2
 8004f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	f003 0303 	and.w	r3, r3, #3
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	220f      	movs	r2, #15
 8004f12:	fa02 f303 	lsl.w	r3, r2, r3
 8004f16:	43db      	mvns	r3, r3
 8004f18:	69ba      	ldr	r2, [r7, #24]
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a51      	ldr	r2, [pc, #324]	; (8005068 <HAL_GPIO_Init+0x310>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d02b      	beq.n	8004f7e <HAL_GPIO_Init+0x226>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a50      	ldr	r2, [pc, #320]	; (800506c <HAL_GPIO_Init+0x314>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d025      	beq.n	8004f7a <HAL_GPIO_Init+0x222>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a4f      	ldr	r2, [pc, #316]	; (8005070 <HAL_GPIO_Init+0x318>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d01f      	beq.n	8004f76 <HAL_GPIO_Init+0x21e>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a4e      	ldr	r2, [pc, #312]	; (8005074 <HAL_GPIO_Init+0x31c>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d019      	beq.n	8004f72 <HAL_GPIO_Init+0x21a>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a4d      	ldr	r2, [pc, #308]	; (8005078 <HAL_GPIO_Init+0x320>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d013      	beq.n	8004f6e <HAL_GPIO_Init+0x216>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a4c      	ldr	r2, [pc, #304]	; (800507c <HAL_GPIO_Init+0x324>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d00d      	beq.n	8004f6a <HAL_GPIO_Init+0x212>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a4b      	ldr	r2, [pc, #300]	; (8005080 <HAL_GPIO_Init+0x328>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d007      	beq.n	8004f66 <HAL_GPIO_Init+0x20e>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a4a      	ldr	r2, [pc, #296]	; (8005084 <HAL_GPIO_Init+0x32c>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d101      	bne.n	8004f62 <HAL_GPIO_Init+0x20a>
 8004f5e:	2307      	movs	r3, #7
 8004f60:	e00e      	b.n	8004f80 <HAL_GPIO_Init+0x228>
 8004f62:	2308      	movs	r3, #8
 8004f64:	e00c      	b.n	8004f80 <HAL_GPIO_Init+0x228>
 8004f66:	2306      	movs	r3, #6
 8004f68:	e00a      	b.n	8004f80 <HAL_GPIO_Init+0x228>
 8004f6a:	2305      	movs	r3, #5
 8004f6c:	e008      	b.n	8004f80 <HAL_GPIO_Init+0x228>
 8004f6e:	2304      	movs	r3, #4
 8004f70:	e006      	b.n	8004f80 <HAL_GPIO_Init+0x228>
 8004f72:	2303      	movs	r3, #3
 8004f74:	e004      	b.n	8004f80 <HAL_GPIO_Init+0x228>
 8004f76:	2302      	movs	r3, #2
 8004f78:	e002      	b.n	8004f80 <HAL_GPIO_Init+0x228>
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e000      	b.n	8004f80 <HAL_GPIO_Init+0x228>
 8004f7e:	2300      	movs	r3, #0
 8004f80:	69fa      	ldr	r2, [r7, #28]
 8004f82:	f002 0203 	and.w	r2, r2, #3
 8004f86:	0092      	lsls	r2, r2, #2
 8004f88:	4093      	lsls	r3, r2
 8004f8a:	69ba      	ldr	r2, [r7, #24]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f90:	4934      	ldr	r1, [pc, #208]	; (8005064 <HAL_GPIO_Init+0x30c>)
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	089b      	lsrs	r3, r3, #2
 8004f96:	3302      	adds	r3, #2
 8004f98:	69ba      	ldr	r2, [r7, #24]
 8004f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f9e:	4b3a      	ldr	r3, [pc, #232]	; (8005088 <HAL_GPIO_Init+0x330>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	43db      	mvns	r3, r3
 8004fa8:	69ba      	ldr	r2, [r7, #24]
 8004faa:	4013      	ands	r3, r2
 8004fac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d003      	beq.n	8004fc2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004fba:	69ba      	ldr	r2, [r7, #24]
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004fc2:	4a31      	ldr	r2, [pc, #196]	; (8005088 <HAL_GPIO_Init+0x330>)
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004fc8:	4b2f      	ldr	r3, [pc, #188]	; (8005088 <HAL_GPIO_Init+0x330>)
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	43db      	mvns	r3, r3
 8004fd2:	69ba      	ldr	r2, [r7, #24]
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d003      	beq.n	8004fec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004fe4:	69ba      	ldr	r2, [r7, #24]
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004fec:	4a26      	ldr	r2, [pc, #152]	; (8005088 <HAL_GPIO_Init+0x330>)
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004ff2:	4b25      	ldr	r3, [pc, #148]	; (8005088 <HAL_GPIO_Init+0x330>)
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	43db      	mvns	r3, r3
 8004ffc:	69ba      	ldr	r2, [r7, #24]
 8004ffe:	4013      	ands	r3, r2
 8005000:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d003      	beq.n	8005016 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800500e:	69ba      	ldr	r2, [r7, #24]
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	4313      	orrs	r3, r2
 8005014:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005016:	4a1c      	ldr	r2, [pc, #112]	; (8005088 <HAL_GPIO_Init+0x330>)
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800501c:	4b1a      	ldr	r3, [pc, #104]	; (8005088 <HAL_GPIO_Init+0x330>)
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	43db      	mvns	r3, r3
 8005026:	69ba      	ldr	r2, [r7, #24]
 8005028:	4013      	ands	r3, r2
 800502a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d003      	beq.n	8005040 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005038:	69ba      	ldr	r2, [r7, #24]
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	4313      	orrs	r3, r2
 800503e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005040:	4a11      	ldr	r2, [pc, #68]	; (8005088 <HAL_GPIO_Init+0x330>)
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	3301      	adds	r3, #1
 800504a:	61fb      	str	r3, [r7, #28]
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	2b0f      	cmp	r3, #15
 8005050:	f67f ae90 	bls.w	8004d74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005054:	bf00      	nop
 8005056:	3724      	adds	r7, #36	; 0x24
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr
 8005060:	40023800 	.word	0x40023800
 8005064:	40013800 	.word	0x40013800
 8005068:	40020000 	.word	0x40020000
 800506c:	40020400 	.word	0x40020400
 8005070:	40020800 	.word	0x40020800
 8005074:	40020c00 	.word	0x40020c00
 8005078:	40021000 	.word	0x40021000
 800507c:	40021400 	.word	0x40021400
 8005080:	40021800 	.word	0x40021800
 8005084:	40021c00 	.word	0x40021c00
 8005088:	40013c00 	.word	0x40013c00

0800508c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d101      	bne.n	800509e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e11f      	b.n	80052de <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d106      	bne.n	80050b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f7fe fbc4 	bl	8003840 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2224      	movs	r2, #36	; 0x24
 80050bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f022 0201 	bic.w	r2, r2, #1
 80050ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80050ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80050f0:	f001 fbb4 	bl	800685c <HAL_RCC_GetPCLK1Freq>
 80050f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	4a7b      	ldr	r2, [pc, #492]	; (80052e8 <HAL_I2C_Init+0x25c>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d807      	bhi.n	8005110 <HAL_I2C_Init+0x84>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	4a7a      	ldr	r2, [pc, #488]	; (80052ec <HAL_I2C_Init+0x260>)
 8005104:	4293      	cmp	r3, r2
 8005106:	bf94      	ite	ls
 8005108:	2301      	movls	r3, #1
 800510a:	2300      	movhi	r3, #0
 800510c:	b2db      	uxtb	r3, r3
 800510e:	e006      	b.n	800511e <HAL_I2C_Init+0x92>
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	4a77      	ldr	r2, [pc, #476]	; (80052f0 <HAL_I2C_Init+0x264>)
 8005114:	4293      	cmp	r3, r2
 8005116:	bf94      	ite	ls
 8005118:	2301      	movls	r3, #1
 800511a:	2300      	movhi	r3, #0
 800511c:	b2db      	uxtb	r3, r3
 800511e:	2b00      	cmp	r3, #0
 8005120:	d001      	beq.n	8005126 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e0db      	b.n	80052de <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	4a72      	ldr	r2, [pc, #456]	; (80052f4 <HAL_I2C_Init+0x268>)
 800512a:	fba2 2303 	umull	r2, r3, r2, r3
 800512e:	0c9b      	lsrs	r3, r3, #18
 8005130:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	68ba      	ldr	r2, [r7, #8]
 8005142:	430a      	orrs	r2, r1
 8005144:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	6a1b      	ldr	r3, [r3, #32]
 800514c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	4a64      	ldr	r2, [pc, #400]	; (80052e8 <HAL_I2C_Init+0x25c>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d802      	bhi.n	8005160 <HAL_I2C_Init+0xd4>
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	3301      	adds	r3, #1
 800515e:	e009      	b.n	8005174 <HAL_I2C_Init+0xe8>
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005166:	fb02 f303 	mul.w	r3, r2, r3
 800516a:	4a63      	ldr	r2, [pc, #396]	; (80052f8 <HAL_I2C_Init+0x26c>)
 800516c:	fba2 2303 	umull	r2, r3, r2, r3
 8005170:	099b      	lsrs	r3, r3, #6
 8005172:	3301      	adds	r3, #1
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	6812      	ldr	r2, [r2, #0]
 8005178:	430b      	orrs	r3, r1
 800517a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	69db      	ldr	r3, [r3, #28]
 8005182:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005186:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	4956      	ldr	r1, [pc, #344]	; (80052e8 <HAL_I2C_Init+0x25c>)
 8005190:	428b      	cmp	r3, r1
 8005192:	d80d      	bhi.n	80051b0 <HAL_I2C_Init+0x124>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	1e59      	subs	r1, r3, #1
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	005b      	lsls	r3, r3, #1
 800519e:	fbb1 f3f3 	udiv	r3, r1, r3
 80051a2:	3301      	adds	r3, #1
 80051a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051a8:	2b04      	cmp	r3, #4
 80051aa:	bf38      	it	cc
 80051ac:	2304      	movcc	r3, #4
 80051ae:	e04f      	b.n	8005250 <HAL_I2C_Init+0x1c4>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d111      	bne.n	80051dc <HAL_I2C_Init+0x150>
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	1e58      	subs	r0, r3, #1
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6859      	ldr	r1, [r3, #4]
 80051c0:	460b      	mov	r3, r1
 80051c2:	005b      	lsls	r3, r3, #1
 80051c4:	440b      	add	r3, r1
 80051c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80051ca:	3301      	adds	r3, #1
 80051cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	bf0c      	ite	eq
 80051d4:	2301      	moveq	r3, #1
 80051d6:	2300      	movne	r3, #0
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	e012      	b.n	8005202 <HAL_I2C_Init+0x176>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	1e58      	subs	r0, r3, #1
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6859      	ldr	r1, [r3, #4]
 80051e4:	460b      	mov	r3, r1
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	440b      	add	r3, r1
 80051ea:	0099      	lsls	r1, r3, #2
 80051ec:	440b      	add	r3, r1
 80051ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80051f2:	3301      	adds	r3, #1
 80051f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	bf0c      	ite	eq
 80051fc:	2301      	moveq	r3, #1
 80051fe:	2300      	movne	r3, #0
 8005200:	b2db      	uxtb	r3, r3
 8005202:	2b00      	cmp	r3, #0
 8005204:	d001      	beq.n	800520a <HAL_I2C_Init+0x17e>
 8005206:	2301      	movs	r3, #1
 8005208:	e022      	b.n	8005250 <HAL_I2C_Init+0x1c4>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d10e      	bne.n	8005230 <HAL_I2C_Init+0x1a4>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	1e58      	subs	r0, r3, #1
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6859      	ldr	r1, [r3, #4]
 800521a:	460b      	mov	r3, r1
 800521c:	005b      	lsls	r3, r3, #1
 800521e:	440b      	add	r3, r1
 8005220:	fbb0 f3f3 	udiv	r3, r0, r3
 8005224:	3301      	adds	r3, #1
 8005226:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800522a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800522e:	e00f      	b.n	8005250 <HAL_I2C_Init+0x1c4>
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	1e58      	subs	r0, r3, #1
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6859      	ldr	r1, [r3, #4]
 8005238:	460b      	mov	r3, r1
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	440b      	add	r3, r1
 800523e:	0099      	lsls	r1, r3, #2
 8005240:	440b      	add	r3, r1
 8005242:	fbb0 f3f3 	udiv	r3, r0, r3
 8005246:	3301      	adds	r3, #1
 8005248:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800524c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005250:	6879      	ldr	r1, [r7, #4]
 8005252:	6809      	ldr	r1, [r1, #0]
 8005254:	4313      	orrs	r3, r2
 8005256:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	69da      	ldr	r2, [r3, #28]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a1b      	ldr	r3, [r3, #32]
 800526a:	431a      	orrs	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	430a      	orrs	r2, r1
 8005272:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800527e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	6911      	ldr	r1, [r2, #16]
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	68d2      	ldr	r2, [r2, #12]
 800528a:	4311      	orrs	r1, r2
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	6812      	ldr	r2, [r2, #0]
 8005290:	430b      	orrs	r3, r1
 8005292:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	695a      	ldr	r2, [r3, #20]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	431a      	orrs	r2, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	430a      	orrs	r2, r1
 80052ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f042 0201 	orr.w	r2, r2, #1
 80052be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2220      	movs	r2, #32
 80052ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3710      	adds	r7, #16
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	000186a0 	.word	0x000186a0
 80052ec:	001e847f 	.word	0x001e847f
 80052f0:	003d08ff 	.word	0x003d08ff
 80052f4:	431bde83 	.word	0x431bde83
 80052f8:	10624dd3 	.word	0x10624dd3

080052fc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b088      	sub	sp, #32
 8005300:	af02      	add	r7, sp, #8
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	4608      	mov	r0, r1
 8005306:	4611      	mov	r1, r2
 8005308:	461a      	mov	r2, r3
 800530a:	4603      	mov	r3, r0
 800530c:	817b      	strh	r3, [r7, #10]
 800530e:	460b      	mov	r3, r1
 8005310:	813b      	strh	r3, [r7, #8]
 8005312:	4613      	mov	r3, r2
 8005314:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005316:	f7fe ffdf 	bl	80042d8 <HAL_GetTick>
 800531a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005322:	b2db      	uxtb	r3, r3
 8005324:	2b20      	cmp	r3, #32
 8005326:	f040 80d9 	bne.w	80054dc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	9300      	str	r3, [sp, #0]
 800532e:	2319      	movs	r3, #25
 8005330:	2201      	movs	r2, #1
 8005332:	496d      	ldr	r1, [pc, #436]	; (80054e8 <HAL_I2C_Mem_Write+0x1ec>)
 8005334:	68f8      	ldr	r0, [r7, #12]
 8005336:	f000 fc7b 	bl	8005c30 <I2C_WaitOnFlagUntilTimeout>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d001      	beq.n	8005344 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005340:	2302      	movs	r3, #2
 8005342:	e0cc      	b.n	80054de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800534a:	2b01      	cmp	r3, #1
 800534c:	d101      	bne.n	8005352 <HAL_I2C_Mem_Write+0x56>
 800534e:	2302      	movs	r3, #2
 8005350:	e0c5      	b.n	80054de <HAL_I2C_Mem_Write+0x1e2>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2201      	movs	r2, #1
 8005356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 0301 	and.w	r3, r3, #1
 8005364:	2b01      	cmp	r3, #1
 8005366:	d007      	beq.n	8005378 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f042 0201 	orr.w	r2, r2, #1
 8005376:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005386:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2221      	movs	r2, #33	; 0x21
 800538c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2240      	movs	r2, #64	; 0x40
 8005394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6a3a      	ldr	r2, [r7, #32]
 80053a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80053a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	4a4d      	ldr	r2, [pc, #308]	; (80054ec <HAL_I2C_Mem_Write+0x1f0>)
 80053b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80053ba:	88f8      	ldrh	r0, [r7, #6]
 80053bc:	893a      	ldrh	r2, [r7, #8]
 80053be:	8979      	ldrh	r1, [r7, #10]
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	9301      	str	r3, [sp, #4]
 80053c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c6:	9300      	str	r3, [sp, #0]
 80053c8:	4603      	mov	r3, r0
 80053ca:	68f8      	ldr	r0, [r7, #12]
 80053cc:	f000 fab6 	bl	800593c <I2C_RequestMemoryWrite>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d052      	beq.n	800547c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e081      	b.n	80054de <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053da:	697a      	ldr	r2, [r7, #20]
 80053dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053de:	68f8      	ldr	r0, [r7, #12]
 80053e0:	f000 fcfc 	bl	8005ddc <I2C_WaitOnTXEFlagUntilTimeout>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d00d      	beq.n	8005406 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ee:	2b04      	cmp	r3, #4
 80053f0:	d107      	bne.n	8005402 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005400:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e06b      	b.n	80054de <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540a:	781a      	ldrb	r2, [r3, #0]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005416:	1c5a      	adds	r2, r3, #1
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005420:	3b01      	subs	r3, #1
 8005422:	b29a      	uxth	r2, r3
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800542c:	b29b      	uxth	r3, r3
 800542e:	3b01      	subs	r3, #1
 8005430:	b29a      	uxth	r2, r3
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	695b      	ldr	r3, [r3, #20]
 800543c:	f003 0304 	and.w	r3, r3, #4
 8005440:	2b04      	cmp	r3, #4
 8005442:	d11b      	bne.n	800547c <HAL_I2C_Mem_Write+0x180>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005448:	2b00      	cmp	r3, #0
 800544a:	d017      	beq.n	800547c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005450:	781a      	ldrb	r2, [r3, #0]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545c:	1c5a      	adds	r2, r3, #1
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005466:	3b01      	subs	r3, #1
 8005468:	b29a      	uxth	r2, r3
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005472:	b29b      	uxth	r3, r3
 8005474:	3b01      	subs	r3, #1
 8005476:	b29a      	uxth	r2, r3
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005480:	2b00      	cmp	r3, #0
 8005482:	d1aa      	bne.n	80053da <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005484:	697a      	ldr	r2, [r7, #20]
 8005486:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005488:	68f8      	ldr	r0, [r7, #12]
 800548a:	f000 fce8 	bl	8005e5e <I2C_WaitOnBTFFlagUntilTimeout>
 800548e:	4603      	mov	r3, r0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d00d      	beq.n	80054b0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005498:	2b04      	cmp	r3, #4
 800549a:	d107      	bne.n	80054ac <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054aa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e016      	b.n	80054de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2220      	movs	r2, #32
 80054c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80054d8:	2300      	movs	r3, #0
 80054da:	e000      	b.n	80054de <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80054dc:	2302      	movs	r3, #2
  }
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3718      	adds	r7, #24
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	00100002 	.word	0x00100002
 80054ec:	ffff0000 	.word	0xffff0000

080054f0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b08c      	sub	sp, #48	; 0x30
 80054f4:	af02      	add	r7, sp, #8
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	4608      	mov	r0, r1
 80054fa:	4611      	mov	r1, r2
 80054fc:	461a      	mov	r2, r3
 80054fe:	4603      	mov	r3, r0
 8005500:	817b      	strh	r3, [r7, #10]
 8005502:	460b      	mov	r3, r1
 8005504:	813b      	strh	r3, [r7, #8]
 8005506:	4613      	mov	r3, r2
 8005508:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800550a:	f7fe fee5 	bl	80042d8 <HAL_GetTick>
 800550e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005516:	b2db      	uxtb	r3, r3
 8005518:	2b20      	cmp	r3, #32
 800551a:	f040 8208 	bne.w	800592e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800551e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005520:	9300      	str	r3, [sp, #0]
 8005522:	2319      	movs	r3, #25
 8005524:	2201      	movs	r2, #1
 8005526:	497b      	ldr	r1, [pc, #492]	; (8005714 <HAL_I2C_Mem_Read+0x224>)
 8005528:	68f8      	ldr	r0, [r7, #12]
 800552a:	f000 fb81 	bl	8005c30 <I2C_WaitOnFlagUntilTimeout>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d001      	beq.n	8005538 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005534:	2302      	movs	r3, #2
 8005536:	e1fb      	b.n	8005930 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800553e:	2b01      	cmp	r3, #1
 8005540:	d101      	bne.n	8005546 <HAL_I2C_Mem_Read+0x56>
 8005542:	2302      	movs	r3, #2
 8005544:	e1f4      	b.n	8005930 <HAL_I2C_Mem_Read+0x440>
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2201      	movs	r2, #1
 800554a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0301 	and.w	r3, r3, #1
 8005558:	2b01      	cmp	r3, #1
 800555a:	d007      	beq.n	800556c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f042 0201 	orr.w	r2, r2, #1
 800556a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800557a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2222      	movs	r2, #34	; 0x22
 8005580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2240      	movs	r2, #64	; 0x40
 8005588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2200      	movs	r2, #0
 8005590:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005596:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800559c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055a2:	b29a      	uxth	r2, r3
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	4a5b      	ldr	r2, [pc, #364]	; (8005718 <HAL_I2C_Mem_Read+0x228>)
 80055ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80055ae:	88f8      	ldrh	r0, [r7, #6]
 80055b0:	893a      	ldrh	r2, [r7, #8]
 80055b2:	8979      	ldrh	r1, [r7, #10]
 80055b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b6:	9301      	str	r3, [sp, #4]
 80055b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ba:	9300      	str	r3, [sp, #0]
 80055bc:	4603      	mov	r3, r0
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f000 fa50 	bl	8005a64 <I2C_RequestMemoryRead>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d001      	beq.n	80055ce <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e1b0      	b.n	8005930 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d113      	bne.n	80055fe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055d6:	2300      	movs	r3, #0
 80055d8:	623b      	str	r3, [r7, #32]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	695b      	ldr	r3, [r3, #20]
 80055e0:	623b      	str	r3, [r7, #32]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	699b      	ldr	r3, [r3, #24]
 80055e8:	623b      	str	r3, [r7, #32]
 80055ea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055fa:	601a      	str	r2, [r3, #0]
 80055fc:	e184      	b.n	8005908 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005602:	2b01      	cmp	r3, #1
 8005604:	d11b      	bne.n	800563e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005614:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005616:	2300      	movs	r3, #0
 8005618:	61fb      	str	r3, [r7, #28]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	695b      	ldr	r3, [r3, #20]
 8005620:	61fb      	str	r3, [r7, #28]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	699b      	ldr	r3, [r3, #24]
 8005628:	61fb      	str	r3, [r7, #28]
 800562a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800563a:	601a      	str	r2, [r3, #0]
 800563c:	e164      	b.n	8005908 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005642:	2b02      	cmp	r3, #2
 8005644:	d11b      	bne.n	800567e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005654:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005664:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005666:	2300      	movs	r3, #0
 8005668:	61bb      	str	r3, [r7, #24]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	695b      	ldr	r3, [r3, #20]
 8005670:	61bb      	str	r3, [r7, #24]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	699b      	ldr	r3, [r3, #24]
 8005678:	61bb      	str	r3, [r7, #24]
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	e144      	b.n	8005908 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800567e:	2300      	movs	r3, #0
 8005680:	617b      	str	r3, [r7, #20]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	695b      	ldr	r3, [r3, #20]
 8005688:	617b      	str	r3, [r7, #20]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	617b      	str	r3, [r7, #20]
 8005692:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005694:	e138      	b.n	8005908 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800569a:	2b03      	cmp	r3, #3
 800569c:	f200 80f1 	bhi.w	8005882 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d123      	bne.n	80056f0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80056ac:	68f8      	ldr	r0, [r7, #12]
 80056ae:	f000 fc17 	bl	8005ee0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d001      	beq.n	80056bc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e139      	b.n	8005930 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	691a      	ldr	r2, [r3, #16]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c6:	b2d2      	uxtb	r2, r2
 80056c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ce:	1c5a      	adds	r2, r3, #1
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056d8:	3b01      	subs	r3, #1
 80056da:	b29a      	uxth	r2, r3
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	3b01      	subs	r3, #1
 80056e8:	b29a      	uxth	r2, r3
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 80056ee:	e10b      	b.n	8005908 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d14e      	bne.n	8005796 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80056f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fa:	9300      	str	r3, [sp, #0]
 80056fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056fe:	2200      	movs	r2, #0
 8005700:	4906      	ldr	r1, [pc, #24]	; (800571c <HAL_I2C_Mem_Read+0x22c>)
 8005702:	68f8      	ldr	r0, [r7, #12]
 8005704:	f000 fa94 	bl	8005c30 <I2C_WaitOnFlagUntilTimeout>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d008      	beq.n	8005720 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e10e      	b.n	8005930 <HAL_I2C_Mem_Read+0x440>
 8005712:	bf00      	nop
 8005714:	00100002 	.word	0x00100002
 8005718:	ffff0000 	.word	0xffff0000
 800571c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800572e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	691a      	ldr	r2, [r3, #16]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573a:	b2d2      	uxtb	r2, r2
 800573c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005742:	1c5a      	adds	r2, r3, #1
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800574c:	3b01      	subs	r3, #1
 800574e:	b29a      	uxth	r2, r3
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005758:	b29b      	uxth	r3, r3
 800575a:	3b01      	subs	r3, #1
 800575c:	b29a      	uxth	r2, r3
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	691a      	ldr	r2, [r3, #16]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576c:	b2d2      	uxtb	r2, r2
 800576e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005774:	1c5a      	adds	r2, r3, #1
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800577e:	3b01      	subs	r3, #1
 8005780:	b29a      	uxth	r2, r3
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800578a:	b29b      	uxth	r3, r3
 800578c:	3b01      	subs	r3, #1
 800578e:	b29a      	uxth	r2, r3
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005794:	e0b8      	b.n	8005908 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005798:	9300      	str	r3, [sp, #0]
 800579a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800579c:	2200      	movs	r2, #0
 800579e:	4966      	ldr	r1, [pc, #408]	; (8005938 <HAL_I2C_Mem_Read+0x448>)
 80057a0:	68f8      	ldr	r0, [r7, #12]
 80057a2:	f000 fa45 	bl	8005c30 <I2C_WaitOnFlagUntilTimeout>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d001      	beq.n	80057b0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e0bf      	b.n	8005930 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	691a      	ldr	r2, [r3, #16]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ca:	b2d2      	uxtb	r2, r2
 80057cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d2:	1c5a      	adds	r2, r3, #1
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057dc:	3b01      	subs	r3, #1
 80057de:	b29a      	uxth	r2, r3
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	3b01      	subs	r3, #1
 80057ec:	b29a      	uxth	r2, r3
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80057f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f4:	9300      	str	r3, [sp, #0]
 80057f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f8:	2200      	movs	r2, #0
 80057fa:	494f      	ldr	r1, [pc, #316]	; (8005938 <HAL_I2C_Mem_Read+0x448>)
 80057fc:	68f8      	ldr	r0, [r7, #12]
 80057fe:	f000 fa17 	bl	8005c30 <I2C_WaitOnFlagUntilTimeout>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d001      	beq.n	800580c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e091      	b.n	8005930 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800581a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	691a      	ldr	r2, [r3, #16]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005826:	b2d2      	uxtb	r2, r2
 8005828:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582e:	1c5a      	adds	r2, r3, #1
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005838:	3b01      	subs	r3, #1
 800583a:	b29a      	uxth	r2, r3
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005844:	b29b      	uxth	r3, r3
 8005846:	3b01      	subs	r3, #1
 8005848:	b29a      	uxth	r2, r3
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	691a      	ldr	r2, [r3, #16]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005858:	b2d2      	uxtb	r2, r2
 800585a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005860:	1c5a      	adds	r2, r3, #1
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800586a:	3b01      	subs	r3, #1
 800586c:	b29a      	uxth	r2, r3
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005876:	b29b      	uxth	r3, r3
 8005878:	3b01      	subs	r3, #1
 800587a:	b29a      	uxth	r2, r3
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005880:	e042      	b.n	8005908 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005884:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005886:	68f8      	ldr	r0, [r7, #12]
 8005888:	f000 fb2a 	bl	8005ee0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d001      	beq.n	8005896 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e04c      	b.n	8005930 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	691a      	ldr	r2, [r3, #16]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a0:	b2d2      	uxtb	r2, r2
 80058a2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a8:	1c5a      	adds	r2, r3, #1
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058b2:	3b01      	subs	r3, #1
 80058b4:	b29a      	uxth	r2, r3
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058be:	b29b      	uxth	r3, r3
 80058c0:	3b01      	subs	r3, #1
 80058c2:	b29a      	uxth	r2, r3
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	f003 0304 	and.w	r3, r3, #4
 80058d2:	2b04      	cmp	r3, #4
 80058d4:	d118      	bne.n	8005908 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	691a      	ldr	r2, [r3, #16]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e0:	b2d2      	uxtb	r2, r2
 80058e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e8:	1c5a      	adds	r2, r3, #1
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058f2:	3b01      	subs	r3, #1
 80058f4:	b29a      	uxth	r2, r3
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058fe:	b29b      	uxth	r3, r3
 8005900:	3b01      	subs	r3, #1
 8005902:	b29a      	uxth	r2, r3
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800590c:	2b00      	cmp	r3, #0
 800590e:	f47f aec2 	bne.w	8005696 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2220      	movs	r2, #32
 8005916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800592a:	2300      	movs	r3, #0
 800592c:	e000      	b.n	8005930 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800592e:	2302      	movs	r3, #2
  }
}
 8005930:	4618      	mov	r0, r3
 8005932:	3728      	adds	r7, #40	; 0x28
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	00010004 	.word	0x00010004

0800593c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b088      	sub	sp, #32
 8005940:	af02      	add	r7, sp, #8
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	4608      	mov	r0, r1
 8005946:	4611      	mov	r1, r2
 8005948:	461a      	mov	r2, r3
 800594a:	4603      	mov	r3, r0
 800594c:	817b      	strh	r3, [r7, #10]
 800594e:	460b      	mov	r3, r1
 8005950:	813b      	strh	r3, [r7, #8]
 8005952:	4613      	mov	r3, r2
 8005954:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005964:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005968:	9300      	str	r3, [sp, #0]
 800596a:	6a3b      	ldr	r3, [r7, #32]
 800596c:	2200      	movs	r2, #0
 800596e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005972:	68f8      	ldr	r0, [r7, #12]
 8005974:	f000 f95c 	bl	8005c30 <I2C_WaitOnFlagUntilTimeout>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d00c      	beq.n	8005998 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005988:	2b00      	cmp	r3, #0
 800598a:	d003      	beq.n	8005994 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005992:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005994:	2303      	movs	r3, #3
 8005996:	e05f      	b.n	8005a58 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005998:	897b      	ldrh	r3, [r7, #10]
 800599a:	b2db      	uxtb	r3, r3
 800599c:	461a      	mov	r2, r3
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80059a6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80059a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059aa:	6a3a      	ldr	r2, [r7, #32]
 80059ac:	492c      	ldr	r1, [pc, #176]	; (8005a60 <I2C_RequestMemoryWrite+0x124>)
 80059ae:	68f8      	ldr	r0, [r7, #12]
 80059b0:	f000 f995 	bl	8005cde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d001      	beq.n	80059be <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e04c      	b.n	8005a58 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059be:	2300      	movs	r3, #0
 80059c0:	617b      	str	r3, [r7, #20]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	695b      	ldr	r3, [r3, #20]
 80059c8:	617b      	str	r3, [r7, #20]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	699b      	ldr	r3, [r3, #24]
 80059d0:	617b      	str	r3, [r7, #20]
 80059d2:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059d6:	6a39      	ldr	r1, [r7, #32]
 80059d8:	68f8      	ldr	r0, [r7, #12]
 80059da:	f000 f9ff 	bl	8005ddc <I2C_WaitOnTXEFlagUntilTimeout>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d00d      	beq.n	8005a00 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e8:	2b04      	cmp	r3, #4
 80059ea:	d107      	bne.n	80059fc <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059fa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e02b      	b.n	8005a58 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005a00:	88fb      	ldrh	r3, [r7, #6]
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d105      	bne.n	8005a12 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a06:	893b      	ldrh	r3, [r7, #8]
 8005a08:	b2da      	uxtb	r2, r3
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	611a      	str	r2, [r3, #16]
 8005a10:	e021      	b.n	8005a56 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005a12:	893b      	ldrh	r3, [r7, #8]
 8005a14:	0a1b      	lsrs	r3, r3, #8
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	b2da      	uxtb	r2, r3
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a22:	6a39      	ldr	r1, [r7, #32]
 8005a24:	68f8      	ldr	r0, [r7, #12]
 8005a26:	f000 f9d9 	bl	8005ddc <I2C_WaitOnTXEFlagUntilTimeout>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00d      	beq.n	8005a4c <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a34:	2b04      	cmp	r3, #4
 8005a36:	d107      	bne.n	8005a48 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a46:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e005      	b.n	8005a58 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a4c:	893b      	ldrh	r3, [r7, #8]
 8005a4e:	b2da      	uxtb	r2, r3
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3718      	adds	r7, #24
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	00010002 	.word	0x00010002

08005a64 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b088      	sub	sp, #32
 8005a68:	af02      	add	r7, sp, #8
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	4608      	mov	r0, r1
 8005a6e:	4611      	mov	r1, r2
 8005a70:	461a      	mov	r2, r3
 8005a72:	4603      	mov	r3, r0
 8005a74:	817b      	strh	r3, [r7, #10]
 8005a76:	460b      	mov	r3, r1
 8005a78:	813b      	strh	r3, [r7, #8]
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a8c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a9c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa0:	9300      	str	r3, [sp, #0]
 8005aa2:	6a3b      	ldr	r3, [r7, #32]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005aaa:	68f8      	ldr	r0, [r7, #12]
 8005aac:	f000 f8c0 	bl	8005c30 <I2C_WaitOnFlagUntilTimeout>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00c      	beq.n	8005ad0 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d003      	beq.n	8005acc <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005aca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005acc:	2303      	movs	r3, #3
 8005ace:	e0a9      	b.n	8005c24 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005ad0:	897b      	ldrh	r3, [r7, #10]
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005ade:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae2:	6a3a      	ldr	r2, [r7, #32]
 8005ae4:	4951      	ldr	r1, [pc, #324]	; (8005c2c <I2C_RequestMemoryRead+0x1c8>)
 8005ae6:	68f8      	ldr	r0, [r7, #12]
 8005ae8:	f000 f8f9 	bl	8005cde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d001      	beq.n	8005af6 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e096      	b.n	8005c24 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005af6:	2300      	movs	r3, #0
 8005af8:	617b      	str	r3, [r7, #20]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	695b      	ldr	r3, [r3, #20]
 8005b00:	617b      	str	r3, [r7, #20]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	699b      	ldr	r3, [r3, #24]
 8005b08:	617b      	str	r3, [r7, #20]
 8005b0a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b0e:	6a39      	ldr	r1, [r7, #32]
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	f000 f963 	bl	8005ddc <I2C_WaitOnTXEFlagUntilTimeout>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d00d      	beq.n	8005b38 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b20:	2b04      	cmp	r3, #4
 8005b22:	d107      	bne.n	8005b34 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b32:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	e075      	b.n	8005c24 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b38:	88fb      	ldrh	r3, [r7, #6]
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d105      	bne.n	8005b4a <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b3e:	893b      	ldrh	r3, [r7, #8]
 8005b40:	b2da      	uxtb	r2, r3
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	611a      	str	r2, [r3, #16]
 8005b48:	e021      	b.n	8005b8e <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005b4a:	893b      	ldrh	r3, [r7, #8]
 8005b4c:	0a1b      	lsrs	r3, r3, #8
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	b2da      	uxtb	r2, r3
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b5a:	6a39      	ldr	r1, [r7, #32]
 8005b5c:	68f8      	ldr	r0, [r7, #12]
 8005b5e:	f000 f93d 	bl	8005ddc <I2C_WaitOnTXEFlagUntilTimeout>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d00d      	beq.n	8005b84 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6c:	2b04      	cmp	r3, #4
 8005b6e:	d107      	bne.n	8005b80 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b7e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e04f      	b.n	8005c24 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b84:	893b      	ldrh	r3, [r7, #8]
 8005b86:	b2da      	uxtb	r2, r3
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b90:	6a39      	ldr	r1, [r7, #32]
 8005b92:	68f8      	ldr	r0, [r7, #12]
 8005b94:	f000 f922 	bl	8005ddc <I2C_WaitOnTXEFlagUntilTimeout>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00d      	beq.n	8005bba <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba2:	2b04      	cmp	r3, #4
 8005ba4:	d107      	bne.n	8005bb6 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bb4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e034      	b.n	8005c24 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bc8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bcc:	9300      	str	r3, [sp, #0]
 8005bce:	6a3b      	ldr	r3, [r7, #32]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005bd6:	68f8      	ldr	r0, [r7, #12]
 8005bd8:	f000 f82a 	bl	8005c30 <I2C_WaitOnFlagUntilTimeout>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d00c      	beq.n	8005bfc <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d003      	beq.n	8005bf8 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bf6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	e013      	b.n	8005c24 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005bfc:	897b      	ldrh	r3, [r7, #10]
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	f043 0301 	orr.w	r3, r3, #1
 8005c04:	b2da      	uxtb	r2, r3
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0e:	6a3a      	ldr	r2, [r7, #32]
 8005c10:	4906      	ldr	r1, [pc, #24]	; (8005c2c <I2C_RequestMemoryRead+0x1c8>)
 8005c12:	68f8      	ldr	r0, [r7, #12]
 8005c14:	f000 f863 	bl	8005cde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d001      	beq.n	8005c22 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e000      	b.n	8005c24 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3718      	adds	r7, #24
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}
 8005c2c:	00010002 	.word	0x00010002

08005c30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	603b      	str	r3, [r7, #0]
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c40:	e025      	b.n	8005c8e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c48:	d021      	beq.n	8005c8e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c4a:	f7fe fb45 	bl	80042d8 <HAL_GetTick>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	1ad3      	subs	r3, r2, r3
 8005c54:	683a      	ldr	r2, [r7, #0]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d302      	bcc.n	8005c60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d116      	bne.n	8005c8e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2200      	movs	r2, #0
 8005c64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2220      	movs	r2, #32
 8005c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7a:	f043 0220 	orr.w	r2, r3, #32
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e023      	b.n	8005cd6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	0c1b      	lsrs	r3, r3, #16
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d10d      	bne.n	8005cb4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	695b      	ldr	r3, [r3, #20]
 8005c9e:	43da      	mvns	r2, r3
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	bf0c      	ite	eq
 8005caa:	2301      	moveq	r3, #1
 8005cac:	2300      	movne	r3, #0
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	e00c      	b.n	8005cce <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	699b      	ldr	r3, [r3, #24]
 8005cba:	43da      	mvns	r2, r3
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	bf0c      	ite	eq
 8005cc6:	2301      	moveq	r3, #1
 8005cc8:	2300      	movne	r3, #0
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	461a      	mov	r2, r3
 8005cce:	79fb      	ldrb	r3, [r7, #7]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d0b6      	beq.n	8005c42 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3710      	adds	r7, #16
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}

08005cde <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005cde:	b580      	push	{r7, lr}
 8005ce0:	b084      	sub	sp, #16
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	60f8      	str	r0, [r7, #12]
 8005ce6:	60b9      	str	r1, [r7, #8]
 8005ce8:	607a      	str	r2, [r7, #4]
 8005cea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005cec:	e051      	b.n	8005d92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	695b      	ldr	r3, [r3, #20]
 8005cf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cfc:	d123      	bne.n	8005d46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d0c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d16:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2220      	movs	r2, #32
 8005d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d32:	f043 0204 	orr.w	r2, r3, #4
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e046      	b.n	8005dd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d4c:	d021      	beq.n	8005d92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d4e:	f7fe fac3 	bl	80042d8 <HAL_GetTick>
 8005d52:	4602      	mov	r2, r0
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	1ad3      	subs	r3, r2, r3
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d302      	bcc.n	8005d64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d116      	bne.n	8005d92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2200      	movs	r2, #0
 8005d68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2220      	movs	r2, #32
 8005d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7e:	f043 0220 	orr.w	r2, r3, #32
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e020      	b.n	8005dd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	0c1b      	lsrs	r3, r3, #16
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d10c      	bne.n	8005db6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	695b      	ldr	r3, [r3, #20]
 8005da2:	43da      	mvns	r2, r3
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	4013      	ands	r3, r2
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	bf14      	ite	ne
 8005dae:	2301      	movne	r3, #1
 8005db0:	2300      	moveq	r3, #0
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	e00b      	b.n	8005dce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	699b      	ldr	r3, [r3, #24]
 8005dbc:	43da      	mvns	r2, r3
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	bf14      	ite	ne
 8005dc8:	2301      	movne	r3, #1
 8005dca:	2300      	moveq	r3, #0
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d18d      	bne.n	8005cee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005dd2:	2300      	movs	r3, #0
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3710      	adds	r7, #16
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005de8:	e02d      	b.n	8005e46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005dea:	68f8      	ldr	r0, [r7, #12]
 8005dec:	f000 f8ce 	bl	8005f8c <I2C_IsAcknowledgeFailed>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d001      	beq.n	8005dfa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e02d      	b.n	8005e56 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e00:	d021      	beq.n	8005e46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e02:	f7fe fa69 	bl	80042d8 <HAL_GetTick>
 8005e06:	4602      	mov	r2, r0
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	68ba      	ldr	r2, [r7, #8]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d302      	bcc.n	8005e18 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d116      	bne.n	8005e46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2220      	movs	r2, #32
 8005e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e32:	f043 0220 	orr.w	r2, r3, #32
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e007      	b.n	8005e56 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	695b      	ldr	r3, [r3, #20]
 8005e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e50:	2b80      	cmp	r3, #128	; 0x80
 8005e52:	d1ca      	bne.n	8005dea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3710      	adds	r7, #16
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b084      	sub	sp, #16
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	60f8      	str	r0, [r7, #12]
 8005e66:	60b9      	str	r1, [r7, #8]
 8005e68:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e6a:	e02d      	b.n	8005ec8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005e6c:	68f8      	ldr	r0, [r7, #12]
 8005e6e:	f000 f88d 	bl	8005f8c <I2C_IsAcknowledgeFailed>
 8005e72:	4603      	mov	r3, r0
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d001      	beq.n	8005e7c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e02d      	b.n	8005ed8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e82:	d021      	beq.n	8005ec8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e84:	f7fe fa28 	bl	80042d8 <HAL_GetTick>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	1ad3      	subs	r3, r2, r3
 8005e8e:	68ba      	ldr	r2, [r7, #8]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d302      	bcc.n	8005e9a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d116      	bne.n	8005ec8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2220      	movs	r2, #32
 8005ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb4:	f043 0220 	orr.w	r2, r3, #32
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e007      	b.n	8005ed8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	695b      	ldr	r3, [r3, #20]
 8005ece:	f003 0304 	and.w	r3, r3, #4
 8005ed2:	2b04      	cmp	r3, #4
 8005ed4:	d1ca      	bne.n	8005e6c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ed6:	2300      	movs	r3, #0
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3710      	adds	r7, #16
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005eec:	e042      	b.n	8005f74 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	695b      	ldr	r3, [r3, #20]
 8005ef4:	f003 0310 	and.w	r3, r3, #16
 8005ef8:	2b10      	cmp	r3, #16
 8005efa:	d119      	bne.n	8005f30 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f06f 0210 	mvn.w	r2, #16
 8005f04:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2220      	movs	r2, #32
 8005f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e029      	b.n	8005f84 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f30:	f7fe f9d2 	bl	80042d8 <HAL_GetTick>
 8005f34:	4602      	mov	r2, r0
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	1ad3      	subs	r3, r2, r3
 8005f3a:	68ba      	ldr	r2, [r7, #8]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d302      	bcc.n	8005f46 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d116      	bne.n	8005f74 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2220      	movs	r2, #32
 8005f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f60:	f043 0220 	orr.w	r2, r3, #32
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	e007      	b.n	8005f84 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	695b      	ldr	r3, [r3, #20]
 8005f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f7e:	2b40      	cmp	r3, #64	; 0x40
 8005f80:	d1b5      	bne.n	8005eee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3710      	adds	r7, #16
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	695b      	ldr	r3, [r3, #20]
 8005f9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fa2:	d11b      	bne.n	8005fdc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005fac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2220      	movs	r2, #32
 8005fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc8:	f043 0204 	orr.w	r2, r3, #4
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e000      	b.n	8005fde <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	370c      	adds	r7, #12
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr
	...

08005fec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b086      	sub	sp, #24
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d101      	bne.n	8005ffe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e25b      	b.n	80064b6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 0301 	and.w	r3, r3, #1
 8006006:	2b00      	cmp	r3, #0
 8006008:	d075      	beq.n	80060f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800600a:	4ba3      	ldr	r3, [pc, #652]	; (8006298 <HAL_RCC_OscConfig+0x2ac>)
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	f003 030c 	and.w	r3, r3, #12
 8006012:	2b04      	cmp	r3, #4
 8006014:	d00c      	beq.n	8006030 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006016:	4ba0      	ldr	r3, [pc, #640]	; (8006298 <HAL_RCC_OscConfig+0x2ac>)
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800601e:	2b08      	cmp	r3, #8
 8006020:	d112      	bne.n	8006048 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006022:	4b9d      	ldr	r3, [pc, #628]	; (8006298 <HAL_RCC_OscConfig+0x2ac>)
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800602a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800602e:	d10b      	bne.n	8006048 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006030:	4b99      	ldr	r3, [pc, #612]	; (8006298 <HAL_RCC_OscConfig+0x2ac>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006038:	2b00      	cmp	r3, #0
 800603a:	d05b      	beq.n	80060f4 <HAL_RCC_OscConfig+0x108>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d157      	bne.n	80060f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	e236      	b.n	80064b6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006050:	d106      	bne.n	8006060 <HAL_RCC_OscConfig+0x74>
 8006052:	4b91      	ldr	r3, [pc, #580]	; (8006298 <HAL_RCC_OscConfig+0x2ac>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a90      	ldr	r2, [pc, #576]	; (8006298 <HAL_RCC_OscConfig+0x2ac>)
 8006058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800605c:	6013      	str	r3, [r2, #0]
 800605e:	e01d      	b.n	800609c <HAL_RCC_OscConfig+0xb0>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006068:	d10c      	bne.n	8006084 <HAL_RCC_OscConfig+0x98>
 800606a:	4b8b      	ldr	r3, [pc, #556]	; (8006298 <HAL_RCC_OscConfig+0x2ac>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a8a      	ldr	r2, [pc, #552]	; (8006298 <HAL_RCC_OscConfig+0x2ac>)
 8006070:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006074:	6013      	str	r3, [r2, #0]
 8006076:	4b88      	ldr	r3, [pc, #544]	; (8006298 <HAL_RCC_OscConfig+0x2ac>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a87      	ldr	r2, [pc, #540]	; (8006298 <HAL_RCC_OscConfig+0x2ac>)
 800607c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006080:	6013      	str	r3, [r2, #0]
 8006082:	e00b      	b.n	800609c <HAL_RCC_OscConfig+0xb0>
 8006084:	4b84      	ldr	r3, [pc, #528]	; (8006298 <HAL_RCC_OscConfig+0x2ac>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a83      	ldr	r2, [pc, #524]	; (8006298 <HAL_RCC_OscConfig+0x2ac>)
 800608a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800608e:	6013      	str	r3, [r2, #0]
 8006090:	4b81      	ldr	r3, [pc, #516]	; (8006298 <HAL_RCC_OscConfig+0x2ac>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a80      	ldr	r2, [pc, #512]	; (8006298 <HAL_RCC_OscConfig+0x2ac>)
 8006096:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800609a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d013      	beq.n	80060cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060a4:	f7fe f918 	bl	80042d8 <HAL_GetTick>
 80060a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060aa:	e008      	b.n	80060be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060ac:	f7fe f914 	bl	80042d8 <HAL_GetTick>
 80060b0:	4602      	mov	r2, r0
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	2b64      	cmp	r3, #100	; 0x64
 80060b8:	d901      	bls.n	80060be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80060ba:	2303      	movs	r3, #3
 80060bc:	e1fb      	b.n	80064b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060be:	4b76      	ldr	r3, [pc, #472]	; (8006298 <HAL_RCC_OscConfig+0x2ac>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d0f0      	beq.n	80060ac <HAL_RCC_OscConfig+0xc0>
 80060ca:	e014      	b.n	80060f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060cc:	f7fe f904 	bl	80042d8 <HAL_GetTick>
 80060d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060d2:	e008      	b.n	80060e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060d4:	f7fe f900 	bl	80042d8 <HAL_GetTick>
 80060d8:	4602      	mov	r2, r0
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	1ad3      	subs	r3, r2, r3
 80060de:	2b64      	cmp	r3, #100	; 0x64
 80060e0:	d901      	bls.n	80060e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80060e2:	2303      	movs	r3, #3
 80060e4:	e1e7      	b.n	80064b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060e6:	4b6c      	ldr	r3, [pc, #432]	; (8006298 <HAL_RCC_OscConfig+0x2ac>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d1f0      	bne.n	80060d4 <HAL_RCC_OscConfig+0xe8>
 80060f2:	e000      	b.n	80060f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 0302 	and.w	r3, r3, #2
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d063      	beq.n	80061ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006102:	4b65      	ldr	r3, [pc, #404]	; (8006298 <HAL_RCC_OscConfig+0x2ac>)
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	f003 030c 	and.w	r3, r3, #12
 800610a:	2b00      	cmp	r3, #0
 800610c:	d00b      	beq.n	8006126 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800610e:	4b62      	ldr	r3, [pc, #392]	; (8006298 <HAL_RCC_OscConfig+0x2ac>)
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006116:	2b08      	cmp	r3, #8
 8006118:	d11c      	bne.n	8006154 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800611a:	4b5f      	ldr	r3, [pc, #380]	; (8006298 <HAL_RCC_OscConfig+0x2ac>)
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006122:	2b00      	cmp	r3, #0
 8006124:	d116      	bne.n	8006154 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006126:	4b5c      	ldr	r3, [pc, #368]	; (8006298 <HAL_RCC_OscConfig+0x2ac>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f003 0302 	and.w	r3, r3, #2
 800612e:	2b00      	cmp	r3, #0
 8006130:	d005      	beq.n	800613e <HAL_RCC_OscConfig+0x152>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	2b01      	cmp	r3, #1
 8006138:	d001      	beq.n	800613e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e1bb      	b.n	80064b6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800613e:	4b56      	ldr	r3, [pc, #344]	; (8006298 <HAL_RCC_OscConfig+0x2ac>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	00db      	lsls	r3, r3, #3
 800614c:	4952      	ldr	r1, [pc, #328]	; (8006298 <HAL_RCC_OscConfig+0x2ac>)
 800614e:	4313      	orrs	r3, r2
 8006150:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006152:	e03a      	b.n	80061ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d020      	beq.n	800619e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800615c:	4b4f      	ldr	r3, [pc, #316]	; (800629c <HAL_RCC_OscConfig+0x2b0>)
 800615e:	2201      	movs	r2, #1
 8006160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006162:	f7fe f8b9 	bl	80042d8 <HAL_GetTick>
 8006166:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006168:	e008      	b.n	800617c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800616a:	f7fe f8b5 	bl	80042d8 <HAL_GetTick>
 800616e:	4602      	mov	r2, r0
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	1ad3      	subs	r3, r2, r3
 8006174:	2b02      	cmp	r3, #2
 8006176:	d901      	bls.n	800617c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006178:	2303      	movs	r3, #3
 800617a:	e19c      	b.n	80064b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800617c:	4b46      	ldr	r3, [pc, #280]	; (8006298 <HAL_RCC_OscConfig+0x2ac>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 0302 	and.w	r3, r3, #2
 8006184:	2b00      	cmp	r3, #0
 8006186:	d0f0      	beq.n	800616a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006188:	4b43      	ldr	r3, [pc, #268]	; (8006298 <HAL_RCC_OscConfig+0x2ac>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	00db      	lsls	r3, r3, #3
 8006196:	4940      	ldr	r1, [pc, #256]	; (8006298 <HAL_RCC_OscConfig+0x2ac>)
 8006198:	4313      	orrs	r3, r2
 800619a:	600b      	str	r3, [r1, #0]
 800619c:	e015      	b.n	80061ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800619e:	4b3f      	ldr	r3, [pc, #252]	; (800629c <HAL_RCC_OscConfig+0x2b0>)
 80061a0:	2200      	movs	r2, #0
 80061a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061a4:	f7fe f898 	bl	80042d8 <HAL_GetTick>
 80061a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061aa:	e008      	b.n	80061be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061ac:	f7fe f894 	bl	80042d8 <HAL_GetTick>
 80061b0:	4602      	mov	r2, r0
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	d901      	bls.n	80061be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80061ba:	2303      	movs	r3, #3
 80061bc:	e17b      	b.n	80064b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061be:	4b36      	ldr	r3, [pc, #216]	; (8006298 <HAL_RCC_OscConfig+0x2ac>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 0302 	and.w	r3, r3, #2
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1f0      	bne.n	80061ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 0308 	and.w	r3, r3, #8
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d030      	beq.n	8006238 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	695b      	ldr	r3, [r3, #20]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d016      	beq.n	800620c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061de:	4b30      	ldr	r3, [pc, #192]	; (80062a0 <HAL_RCC_OscConfig+0x2b4>)
 80061e0:	2201      	movs	r2, #1
 80061e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061e4:	f7fe f878 	bl	80042d8 <HAL_GetTick>
 80061e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061ea:	e008      	b.n	80061fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061ec:	f7fe f874 	bl	80042d8 <HAL_GetTick>
 80061f0:	4602      	mov	r2, r0
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	1ad3      	subs	r3, r2, r3
 80061f6:	2b02      	cmp	r3, #2
 80061f8:	d901      	bls.n	80061fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80061fa:	2303      	movs	r3, #3
 80061fc:	e15b      	b.n	80064b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061fe:	4b26      	ldr	r3, [pc, #152]	; (8006298 <HAL_RCC_OscConfig+0x2ac>)
 8006200:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006202:	f003 0302 	and.w	r3, r3, #2
 8006206:	2b00      	cmp	r3, #0
 8006208:	d0f0      	beq.n	80061ec <HAL_RCC_OscConfig+0x200>
 800620a:	e015      	b.n	8006238 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800620c:	4b24      	ldr	r3, [pc, #144]	; (80062a0 <HAL_RCC_OscConfig+0x2b4>)
 800620e:	2200      	movs	r2, #0
 8006210:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006212:	f7fe f861 	bl	80042d8 <HAL_GetTick>
 8006216:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006218:	e008      	b.n	800622c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800621a:	f7fe f85d 	bl	80042d8 <HAL_GetTick>
 800621e:	4602      	mov	r2, r0
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	1ad3      	subs	r3, r2, r3
 8006224:	2b02      	cmp	r3, #2
 8006226:	d901      	bls.n	800622c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006228:	2303      	movs	r3, #3
 800622a:	e144      	b.n	80064b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800622c:	4b1a      	ldr	r3, [pc, #104]	; (8006298 <HAL_RCC_OscConfig+0x2ac>)
 800622e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006230:	f003 0302 	and.w	r3, r3, #2
 8006234:	2b00      	cmp	r3, #0
 8006236:	d1f0      	bne.n	800621a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 0304 	and.w	r3, r3, #4
 8006240:	2b00      	cmp	r3, #0
 8006242:	f000 80a0 	beq.w	8006386 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006246:	2300      	movs	r3, #0
 8006248:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800624a:	4b13      	ldr	r3, [pc, #76]	; (8006298 <HAL_RCC_OscConfig+0x2ac>)
 800624c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800624e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006252:	2b00      	cmp	r3, #0
 8006254:	d10f      	bne.n	8006276 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006256:	2300      	movs	r3, #0
 8006258:	60bb      	str	r3, [r7, #8]
 800625a:	4b0f      	ldr	r3, [pc, #60]	; (8006298 <HAL_RCC_OscConfig+0x2ac>)
 800625c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625e:	4a0e      	ldr	r2, [pc, #56]	; (8006298 <HAL_RCC_OscConfig+0x2ac>)
 8006260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006264:	6413      	str	r3, [r2, #64]	; 0x40
 8006266:	4b0c      	ldr	r3, [pc, #48]	; (8006298 <HAL_RCC_OscConfig+0x2ac>)
 8006268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800626e:	60bb      	str	r3, [r7, #8]
 8006270:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006272:	2301      	movs	r3, #1
 8006274:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006276:	4b0b      	ldr	r3, [pc, #44]	; (80062a4 <HAL_RCC_OscConfig+0x2b8>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800627e:	2b00      	cmp	r3, #0
 8006280:	d121      	bne.n	80062c6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006282:	4b08      	ldr	r3, [pc, #32]	; (80062a4 <HAL_RCC_OscConfig+0x2b8>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a07      	ldr	r2, [pc, #28]	; (80062a4 <HAL_RCC_OscConfig+0x2b8>)
 8006288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800628c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800628e:	f7fe f823 	bl	80042d8 <HAL_GetTick>
 8006292:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006294:	e011      	b.n	80062ba <HAL_RCC_OscConfig+0x2ce>
 8006296:	bf00      	nop
 8006298:	40023800 	.word	0x40023800
 800629c:	42470000 	.word	0x42470000
 80062a0:	42470e80 	.word	0x42470e80
 80062a4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062a8:	f7fe f816 	bl	80042d8 <HAL_GetTick>
 80062ac:	4602      	mov	r2, r0
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	2b02      	cmp	r3, #2
 80062b4:	d901      	bls.n	80062ba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	e0fd      	b.n	80064b6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062ba:	4b81      	ldr	r3, [pc, #516]	; (80064c0 <HAL_RCC_OscConfig+0x4d4>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d0f0      	beq.n	80062a8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d106      	bne.n	80062dc <HAL_RCC_OscConfig+0x2f0>
 80062ce:	4b7d      	ldr	r3, [pc, #500]	; (80064c4 <HAL_RCC_OscConfig+0x4d8>)
 80062d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062d2:	4a7c      	ldr	r2, [pc, #496]	; (80064c4 <HAL_RCC_OscConfig+0x4d8>)
 80062d4:	f043 0301 	orr.w	r3, r3, #1
 80062d8:	6713      	str	r3, [r2, #112]	; 0x70
 80062da:	e01c      	b.n	8006316 <HAL_RCC_OscConfig+0x32a>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	2b05      	cmp	r3, #5
 80062e2:	d10c      	bne.n	80062fe <HAL_RCC_OscConfig+0x312>
 80062e4:	4b77      	ldr	r3, [pc, #476]	; (80064c4 <HAL_RCC_OscConfig+0x4d8>)
 80062e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062e8:	4a76      	ldr	r2, [pc, #472]	; (80064c4 <HAL_RCC_OscConfig+0x4d8>)
 80062ea:	f043 0304 	orr.w	r3, r3, #4
 80062ee:	6713      	str	r3, [r2, #112]	; 0x70
 80062f0:	4b74      	ldr	r3, [pc, #464]	; (80064c4 <HAL_RCC_OscConfig+0x4d8>)
 80062f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062f4:	4a73      	ldr	r2, [pc, #460]	; (80064c4 <HAL_RCC_OscConfig+0x4d8>)
 80062f6:	f043 0301 	orr.w	r3, r3, #1
 80062fa:	6713      	str	r3, [r2, #112]	; 0x70
 80062fc:	e00b      	b.n	8006316 <HAL_RCC_OscConfig+0x32a>
 80062fe:	4b71      	ldr	r3, [pc, #452]	; (80064c4 <HAL_RCC_OscConfig+0x4d8>)
 8006300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006302:	4a70      	ldr	r2, [pc, #448]	; (80064c4 <HAL_RCC_OscConfig+0x4d8>)
 8006304:	f023 0301 	bic.w	r3, r3, #1
 8006308:	6713      	str	r3, [r2, #112]	; 0x70
 800630a:	4b6e      	ldr	r3, [pc, #440]	; (80064c4 <HAL_RCC_OscConfig+0x4d8>)
 800630c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800630e:	4a6d      	ldr	r2, [pc, #436]	; (80064c4 <HAL_RCC_OscConfig+0x4d8>)
 8006310:	f023 0304 	bic.w	r3, r3, #4
 8006314:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d015      	beq.n	800634a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800631e:	f7fd ffdb 	bl	80042d8 <HAL_GetTick>
 8006322:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006324:	e00a      	b.n	800633c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006326:	f7fd ffd7 	bl	80042d8 <HAL_GetTick>
 800632a:	4602      	mov	r2, r0
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	1ad3      	subs	r3, r2, r3
 8006330:	f241 3288 	movw	r2, #5000	; 0x1388
 8006334:	4293      	cmp	r3, r2
 8006336:	d901      	bls.n	800633c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006338:	2303      	movs	r3, #3
 800633a:	e0bc      	b.n	80064b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800633c:	4b61      	ldr	r3, [pc, #388]	; (80064c4 <HAL_RCC_OscConfig+0x4d8>)
 800633e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006340:	f003 0302 	and.w	r3, r3, #2
 8006344:	2b00      	cmp	r3, #0
 8006346:	d0ee      	beq.n	8006326 <HAL_RCC_OscConfig+0x33a>
 8006348:	e014      	b.n	8006374 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800634a:	f7fd ffc5 	bl	80042d8 <HAL_GetTick>
 800634e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006350:	e00a      	b.n	8006368 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006352:	f7fd ffc1 	bl	80042d8 <HAL_GetTick>
 8006356:	4602      	mov	r2, r0
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	1ad3      	subs	r3, r2, r3
 800635c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006360:	4293      	cmp	r3, r2
 8006362:	d901      	bls.n	8006368 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006364:	2303      	movs	r3, #3
 8006366:	e0a6      	b.n	80064b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006368:	4b56      	ldr	r3, [pc, #344]	; (80064c4 <HAL_RCC_OscConfig+0x4d8>)
 800636a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800636c:	f003 0302 	and.w	r3, r3, #2
 8006370:	2b00      	cmp	r3, #0
 8006372:	d1ee      	bne.n	8006352 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006374:	7dfb      	ldrb	r3, [r7, #23]
 8006376:	2b01      	cmp	r3, #1
 8006378:	d105      	bne.n	8006386 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800637a:	4b52      	ldr	r3, [pc, #328]	; (80064c4 <HAL_RCC_OscConfig+0x4d8>)
 800637c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637e:	4a51      	ldr	r2, [pc, #324]	; (80064c4 <HAL_RCC_OscConfig+0x4d8>)
 8006380:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006384:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	699b      	ldr	r3, [r3, #24]
 800638a:	2b00      	cmp	r3, #0
 800638c:	f000 8092 	beq.w	80064b4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006390:	4b4c      	ldr	r3, [pc, #304]	; (80064c4 <HAL_RCC_OscConfig+0x4d8>)
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	f003 030c 	and.w	r3, r3, #12
 8006398:	2b08      	cmp	r3, #8
 800639a:	d05c      	beq.n	8006456 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	699b      	ldr	r3, [r3, #24]
 80063a0:	2b02      	cmp	r3, #2
 80063a2:	d141      	bne.n	8006428 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063a4:	4b48      	ldr	r3, [pc, #288]	; (80064c8 <HAL_RCC_OscConfig+0x4dc>)
 80063a6:	2200      	movs	r2, #0
 80063a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063aa:	f7fd ff95 	bl	80042d8 <HAL_GetTick>
 80063ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063b0:	e008      	b.n	80063c4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063b2:	f7fd ff91 	bl	80042d8 <HAL_GetTick>
 80063b6:	4602      	mov	r2, r0
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	1ad3      	subs	r3, r2, r3
 80063bc:	2b02      	cmp	r3, #2
 80063be:	d901      	bls.n	80063c4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80063c0:	2303      	movs	r3, #3
 80063c2:	e078      	b.n	80064b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063c4:	4b3f      	ldr	r3, [pc, #252]	; (80064c4 <HAL_RCC_OscConfig+0x4d8>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d1f0      	bne.n	80063b2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	69da      	ldr	r2, [r3, #28]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6a1b      	ldr	r3, [r3, #32]
 80063d8:	431a      	orrs	r2, r3
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063de:	019b      	lsls	r3, r3, #6
 80063e0:	431a      	orrs	r2, r3
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063e6:	085b      	lsrs	r3, r3, #1
 80063e8:	3b01      	subs	r3, #1
 80063ea:	041b      	lsls	r3, r3, #16
 80063ec:	431a      	orrs	r2, r3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f2:	061b      	lsls	r3, r3, #24
 80063f4:	4933      	ldr	r1, [pc, #204]	; (80064c4 <HAL_RCC_OscConfig+0x4d8>)
 80063f6:	4313      	orrs	r3, r2
 80063f8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063fa:	4b33      	ldr	r3, [pc, #204]	; (80064c8 <HAL_RCC_OscConfig+0x4dc>)
 80063fc:	2201      	movs	r2, #1
 80063fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006400:	f7fd ff6a 	bl	80042d8 <HAL_GetTick>
 8006404:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006406:	e008      	b.n	800641a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006408:	f7fd ff66 	bl	80042d8 <HAL_GetTick>
 800640c:	4602      	mov	r2, r0
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	1ad3      	subs	r3, r2, r3
 8006412:	2b02      	cmp	r3, #2
 8006414:	d901      	bls.n	800641a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006416:	2303      	movs	r3, #3
 8006418:	e04d      	b.n	80064b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800641a:	4b2a      	ldr	r3, [pc, #168]	; (80064c4 <HAL_RCC_OscConfig+0x4d8>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006422:	2b00      	cmp	r3, #0
 8006424:	d0f0      	beq.n	8006408 <HAL_RCC_OscConfig+0x41c>
 8006426:	e045      	b.n	80064b4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006428:	4b27      	ldr	r3, [pc, #156]	; (80064c8 <HAL_RCC_OscConfig+0x4dc>)
 800642a:	2200      	movs	r2, #0
 800642c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800642e:	f7fd ff53 	bl	80042d8 <HAL_GetTick>
 8006432:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006434:	e008      	b.n	8006448 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006436:	f7fd ff4f 	bl	80042d8 <HAL_GetTick>
 800643a:	4602      	mov	r2, r0
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	1ad3      	subs	r3, r2, r3
 8006440:	2b02      	cmp	r3, #2
 8006442:	d901      	bls.n	8006448 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006444:	2303      	movs	r3, #3
 8006446:	e036      	b.n	80064b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006448:	4b1e      	ldr	r3, [pc, #120]	; (80064c4 <HAL_RCC_OscConfig+0x4d8>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006450:	2b00      	cmp	r3, #0
 8006452:	d1f0      	bne.n	8006436 <HAL_RCC_OscConfig+0x44a>
 8006454:	e02e      	b.n	80064b4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	699b      	ldr	r3, [r3, #24]
 800645a:	2b01      	cmp	r3, #1
 800645c:	d101      	bne.n	8006462 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e029      	b.n	80064b6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006462:	4b18      	ldr	r3, [pc, #96]	; (80064c4 <HAL_RCC_OscConfig+0x4d8>)
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	69db      	ldr	r3, [r3, #28]
 8006472:	429a      	cmp	r2, r3
 8006474:	d11c      	bne.n	80064b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006480:	429a      	cmp	r2, r3
 8006482:	d115      	bne.n	80064b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006484:	68fa      	ldr	r2, [r7, #12]
 8006486:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800648a:	4013      	ands	r3, r2
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006490:	4293      	cmp	r3, r2
 8006492:	d10d      	bne.n	80064b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800649e:	429a      	cmp	r2, r3
 80064a0:	d106      	bne.n	80064b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d001      	beq.n	80064b4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	e000      	b.n	80064b6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3718      	adds	r7, #24
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	40007000 	.word	0x40007000
 80064c4:	40023800 	.word	0x40023800
 80064c8:	42470060 	.word	0x42470060

080064cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b084      	sub	sp, #16
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d101      	bne.n	80064e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	e0cc      	b.n	800667a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80064e0:	4b68      	ldr	r3, [pc, #416]	; (8006684 <HAL_RCC_ClockConfig+0x1b8>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 030f 	and.w	r3, r3, #15
 80064e8:	683a      	ldr	r2, [r7, #0]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d90c      	bls.n	8006508 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064ee:	4b65      	ldr	r3, [pc, #404]	; (8006684 <HAL_RCC_ClockConfig+0x1b8>)
 80064f0:	683a      	ldr	r2, [r7, #0]
 80064f2:	b2d2      	uxtb	r2, r2
 80064f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064f6:	4b63      	ldr	r3, [pc, #396]	; (8006684 <HAL_RCC_ClockConfig+0x1b8>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f003 030f 	and.w	r3, r3, #15
 80064fe:	683a      	ldr	r2, [r7, #0]
 8006500:	429a      	cmp	r2, r3
 8006502:	d001      	beq.n	8006508 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	e0b8      	b.n	800667a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f003 0302 	and.w	r3, r3, #2
 8006510:	2b00      	cmp	r3, #0
 8006512:	d020      	beq.n	8006556 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 0304 	and.w	r3, r3, #4
 800651c:	2b00      	cmp	r3, #0
 800651e:	d005      	beq.n	800652c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006520:	4b59      	ldr	r3, [pc, #356]	; (8006688 <HAL_RCC_ClockConfig+0x1bc>)
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	4a58      	ldr	r2, [pc, #352]	; (8006688 <HAL_RCC_ClockConfig+0x1bc>)
 8006526:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800652a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 0308 	and.w	r3, r3, #8
 8006534:	2b00      	cmp	r3, #0
 8006536:	d005      	beq.n	8006544 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006538:	4b53      	ldr	r3, [pc, #332]	; (8006688 <HAL_RCC_ClockConfig+0x1bc>)
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	4a52      	ldr	r2, [pc, #328]	; (8006688 <HAL_RCC_ClockConfig+0x1bc>)
 800653e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006542:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006544:	4b50      	ldr	r3, [pc, #320]	; (8006688 <HAL_RCC_ClockConfig+0x1bc>)
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	494d      	ldr	r1, [pc, #308]	; (8006688 <HAL_RCC_ClockConfig+0x1bc>)
 8006552:	4313      	orrs	r3, r2
 8006554:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 0301 	and.w	r3, r3, #1
 800655e:	2b00      	cmp	r3, #0
 8006560:	d044      	beq.n	80065ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	2b01      	cmp	r3, #1
 8006568:	d107      	bne.n	800657a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800656a:	4b47      	ldr	r3, [pc, #284]	; (8006688 <HAL_RCC_ClockConfig+0x1bc>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006572:	2b00      	cmp	r3, #0
 8006574:	d119      	bne.n	80065aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e07f      	b.n	800667a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	2b02      	cmp	r3, #2
 8006580:	d003      	beq.n	800658a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006586:	2b03      	cmp	r3, #3
 8006588:	d107      	bne.n	800659a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800658a:	4b3f      	ldr	r3, [pc, #252]	; (8006688 <HAL_RCC_ClockConfig+0x1bc>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006592:	2b00      	cmp	r3, #0
 8006594:	d109      	bne.n	80065aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	e06f      	b.n	800667a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800659a:	4b3b      	ldr	r3, [pc, #236]	; (8006688 <HAL_RCC_ClockConfig+0x1bc>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f003 0302 	and.w	r3, r3, #2
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d101      	bne.n	80065aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e067      	b.n	800667a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80065aa:	4b37      	ldr	r3, [pc, #220]	; (8006688 <HAL_RCC_ClockConfig+0x1bc>)
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	f023 0203 	bic.w	r2, r3, #3
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	4934      	ldr	r1, [pc, #208]	; (8006688 <HAL_RCC_ClockConfig+0x1bc>)
 80065b8:	4313      	orrs	r3, r2
 80065ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80065bc:	f7fd fe8c 	bl	80042d8 <HAL_GetTick>
 80065c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065c2:	e00a      	b.n	80065da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065c4:	f7fd fe88 	bl	80042d8 <HAL_GetTick>
 80065c8:	4602      	mov	r2, r0
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d901      	bls.n	80065da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80065d6:	2303      	movs	r3, #3
 80065d8:	e04f      	b.n	800667a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065da:	4b2b      	ldr	r3, [pc, #172]	; (8006688 <HAL_RCC_ClockConfig+0x1bc>)
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	f003 020c 	and.w	r2, r3, #12
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d1eb      	bne.n	80065c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80065ec:	4b25      	ldr	r3, [pc, #148]	; (8006684 <HAL_RCC_ClockConfig+0x1b8>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 030f 	and.w	r3, r3, #15
 80065f4:	683a      	ldr	r2, [r7, #0]
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d20c      	bcs.n	8006614 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065fa:	4b22      	ldr	r3, [pc, #136]	; (8006684 <HAL_RCC_ClockConfig+0x1b8>)
 80065fc:	683a      	ldr	r2, [r7, #0]
 80065fe:	b2d2      	uxtb	r2, r2
 8006600:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006602:	4b20      	ldr	r3, [pc, #128]	; (8006684 <HAL_RCC_ClockConfig+0x1b8>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 030f 	and.w	r3, r3, #15
 800660a:	683a      	ldr	r2, [r7, #0]
 800660c:	429a      	cmp	r2, r3
 800660e:	d001      	beq.n	8006614 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	e032      	b.n	800667a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 0304 	and.w	r3, r3, #4
 800661c:	2b00      	cmp	r3, #0
 800661e:	d008      	beq.n	8006632 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006620:	4b19      	ldr	r3, [pc, #100]	; (8006688 <HAL_RCC_ClockConfig+0x1bc>)
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	4916      	ldr	r1, [pc, #88]	; (8006688 <HAL_RCC_ClockConfig+0x1bc>)
 800662e:	4313      	orrs	r3, r2
 8006630:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f003 0308 	and.w	r3, r3, #8
 800663a:	2b00      	cmp	r3, #0
 800663c:	d009      	beq.n	8006652 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800663e:	4b12      	ldr	r3, [pc, #72]	; (8006688 <HAL_RCC_ClockConfig+0x1bc>)
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	00db      	lsls	r3, r3, #3
 800664c:	490e      	ldr	r1, [pc, #56]	; (8006688 <HAL_RCC_ClockConfig+0x1bc>)
 800664e:	4313      	orrs	r3, r2
 8006650:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006652:	f000 f821 	bl	8006698 <HAL_RCC_GetSysClockFreq>
 8006656:	4601      	mov	r1, r0
 8006658:	4b0b      	ldr	r3, [pc, #44]	; (8006688 <HAL_RCC_ClockConfig+0x1bc>)
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	091b      	lsrs	r3, r3, #4
 800665e:	f003 030f 	and.w	r3, r3, #15
 8006662:	4a0a      	ldr	r2, [pc, #40]	; (800668c <HAL_RCC_ClockConfig+0x1c0>)
 8006664:	5cd3      	ldrb	r3, [r2, r3]
 8006666:	fa21 f303 	lsr.w	r3, r1, r3
 800666a:	4a09      	ldr	r2, [pc, #36]	; (8006690 <HAL_RCC_ClockConfig+0x1c4>)
 800666c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800666e:	4b09      	ldr	r3, [pc, #36]	; (8006694 <HAL_RCC_ClockConfig+0x1c8>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4618      	mov	r0, r3
 8006674:	f7fd fdec 	bl	8004250 <HAL_InitTick>

  return HAL_OK;
 8006678:	2300      	movs	r3, #0
}
 800667a:	4618      	mov	r0, r3
 800667c:	3710      	adds	r7, #16
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
 8006682:	bf00      	nop
 8006684:	40023c00 	.word	0x40023c00
 8006688:	40023800 	.word	0x40023800
 800668c:	0800bfe8 	.word	0x0800bfe8
 8006690:	20000000 	.word	0x20000000
 8006694:	20000004 	.word	0x20000004

08006698 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800669a:	b085      	sub	sp, #20
 800669c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800669e:	2300      	movs	r3, #0
 80066a0:	607b      	str	r3, [r7, #4]
 80066a2:	2300      	movs	r3, #0
 80066a4:	60fb      	str	r3, [r7, #12]
 80066a6:	2300      	movs	r3, #0
 80066a8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80066aa:	2300      	movs	r3, #0
 80066ac:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80066ae:	4b63      	ldr	r3, [pc, #396]	; (800683c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	f003 030c 	and.w	r3, r3, #12
 80066b6:	2b04      	cmp	r3, #4
 80066b8:	d007      	beq.n	80066ca <HAL_RCC_GetSysClockFreq+0x32>
 80066ba:	2b08      	cmp	r3, #8
 80066bc:	d008      	beq.n	80066d0 <HAL_RCC_GetSysClockFreq+0x38>
 80066be:	2b00      	cmp	r3, #0
 80066c0:	f040 80b4 	bne.w	800682c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80066c4:	4b5e      	ldr	r3, [pc, #376]	; (8006840 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80066c6:	60bb      	str	r3, [r7, #8]
       break;
 80066c8:	e0b3      	b.n	8006832 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80066ca:	4b5d      	ldr	r3, [pc, #372]	; (8006840 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80066cc:	60bb      	str	r3, [r7, #8]
      break;
 80066ce:	e0b0      	b.n	8006832 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80066d0:	4b5a      	ldr	r3, [pc, #360]	; (800683c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80066d8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80066da:	4b58      	ldr	r3, [pc, #352]	; (800683c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d04a      	beq.n	800677c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066e6:	4b55      	ldr	r3, [pc, #340]	; (800683c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	099b      	lsrs	r3, r3, #6
 80066ec:	f04f 0400 	mov.w	r4, #0
 80066f0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80066f4:	f04f 0200 	mov.w	r2, #0
 80066f8:	ea03 0501 	and.w	r5, r3, r1
 80066fc:	ea04 0602 	and.w	r6, r4, r2
 8006700:	4629      	mov	r1, r5
 8006702:	4632      	mov	r2, r6
 8006704:	f04f 0300 	mov.w	r3, #0
 8006708:	f04f 0400 	mov.w	r4, #0
 800670c:	0154      	lsls	r4, r2, #5
 800670e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006712:	014b      	lsls	r3, r1, #5
 8006714:	4619      	mov	r1, r3
 8006716:	4622      	mov	r2, r4
 8006718:	1b49      	subs	r1, r1, r5
 800671a:	eb62 0206 	sbc.w	r2, r2, r6
 800671e:	f04f 0300 	mov.w	r3, #0
 8006722:	f04f 0400 	mov.w	r4, #0
 8006726:	0194      	lsls	r4, r2, #6
 8006728:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800672c:	018b      	lsls	r3, r1, #6
 800672e:	1a5b      	subs	r3, r3, r1
 8006730:	eb64 0402 	sbc.w	r4, r4, r2
 8006734:	f04f 0100 	mov.w	r1, #0
 8006738:	f04f 0200 	mov.w	r2, #0
 800673c:	00e2      	lsls	r2, r4, #3
 800673e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006742:	00d9      	lsls	r1, r3, #3
 8006744:	460b      	mov	r3, r1
 8006746:	4614      	mov	r4, r2
 8006748:	195b      	adds	r3, r3, r5
 800674a:	eb44 0406 	adc.w	r4, r4, r6
 800674e:	f04f 0100 	mov.w	r1, #0
 8006752:	f04f 0200 	mov.w	r2, #0
 8006756:	02a2      	lsls	r2, r4, #10
 8006758:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800675c:	0299      	lsls	r1, r3, #10
 800675e:	460b      	mov	r3, r1
 8006760:	4614      	mov	r4, r2
 8006762:	4618      	mov	r0, r3
 8006764:	4621      	mov	r1, r4
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f04f 0400 	mov.w	r4, #0
 800676c:	461a      	mov	r2, r3
 800676e:	4623      	mov	r3, r4
 8006770:	f7fa fada 	bl	8000d28 <__aeabi_uldivmod>
 8006774:	4603      	mov	r3, r0
 8006776:	460c      	mov	r4, r1
 8006778:	60fb      	str	r3, [r7, #12]
 800677a:	e049      	b.n	8006810 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800677c:	4b2f      	ldr	r3, [pc, #188]	; (800683c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	099b      	lsrs	r3, r3, #6
 8006782:	f04f 0400 	mov.w	r4, #0
 8006786:	f240 11ff 	movw	r1, #511	; 0x1ff
 800678a:	f04f 0200 	mov.w	r2, #0
 800678e:	ea03 0501 	and.w	r5, r3, r1
 8006792:	ea04 0602 	and.w	r6, r4, r2
 8006796:	4629      	mov	r1, r5
 8006798:	4632      	mov	r2, r6
 800679a:	f04f 0300 	mov.w	r3, #0
 800679e:	f04f 0400 	mov.w	r4, #0
 80067a2:	0154      	lsls	r4, r2, #5
 80067a4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80067a8:	014b      	lsls	r3, r1, #5
 80067aa:	4619      	mov	r1, r3
 80067ac:	4622      	mov	r2, r4
 80067ae:	1b49      	subs	r1, r1, r5
 80067b0:	eb62 0206 	sbc.w	r2, r2, r6
 80067b4:	f04f 0300 	mov.w	r3, #0
 80067b8:	f04f 0400 	mov.w	r4, #0
 80067bc:	0194      	lsls	r4, r2, #6
 80067be:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80067c2:	018b      	lsls	r3, r1, #6
 80067c4:	1a5b      	subs	r3, r3, r1
 80067c6:	eb64 0402 	sbc.w	r4, r4, r2
 80067ca:	f04f 0100 	mov.w	r1, #0
 80067ce:	f04f 0200 	mov.w	r2, #0
 80067d2:	00e2      	lsls	r2, r4, #3
 80067d4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80067d8:	00d9      	lsls	r1, r3, #3
 80067da:	460b      	mov	r3, r1
 80067dc:	4614      	mov	r4, r2
 80067de:	195b      	adds	r3, r3, r5
 80067e0:	eb44 0406 	adc.w	r4, r4, r6
 80067e4:	f04f 0100 	mov.w	r1, #0
 80067e8:	f04f 0200 	mov.w	r2, #0
 80067ec:	02a2      	lsls	r2, r4, #10
 80067ee:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80067f2:	0299      	lsls	r1, r3, #10
 80067f4:	460b      	mov	r3, r1
 80067f6:	4614      	mov	r4, r2
 80067f8:	4618      	mov	r0, r3
 80067fa:	4621      	mov	r1, r4
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f04f 0400 	mov.w	r4, #0
 8006802:	461a      	mov	r2, r3
 8006804:	4623      	mov	r3, r4
 8006806:	f7fa fa8f 	bl	8000d28 <__aeabi_uldivmod>
 800680a:	4603      	mov	r3, r0
 800680c:	460c      	mov	r4, r1
 800680e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006810:	4b0a      	ldr	r3, [pc, #40]	; (800683c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	0c1b      	lsrs	r3, r3, #16
 8006816:	f003 0303 	and.w	r3, r3, #3
 800681a:	3301      	adds	r3, #1
 800681c:	005b      	lsls	r3, r3, #1
 800681e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	fbb2 f3f3 	udiv	r3, r2, r3
 8006828:	60bb      	str	r3, [r7, #8]
      break;
 800682a:	e002      	b.n	8006832 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800682c:	4b04      	ldr	r3, [pc, #16]	; (8006840 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800682e:	60bb      	str	r3, [r7, #8]
      break;
 8006830:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006832:	68bb      	ldr	r3, [r7, #8]
}
 8006834:	4618      	mov	r0, r3
 8006836:	3714      	adds	r7, #20
 8006838:	46bd      	mov	sp, r7
 800683a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800683c:	40023800 	.word	0x40023800
 8006840:	00f42400 	.word	0x00f42400

08006844 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006844:	b480      	push	{r7}
 8006846:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006848:	4b03      	ldr	r3, [pc, #12]	; (8006858 <HAL_RCC_GetHCLKFreq+0x14>)
 800684a:	681b      	ldr	r3, [r3, #0]
}
 800684c:	4618      	mov	r0, r3
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	20000000 	.word	0x20000000

0800685c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006860:	f7ff fff0 	bl	8006844 <HAL_RCC_GetHCLKFreq>
 8006864:	4601      	mov	r1, r0
 8006866:	4b05      	ldr	r3, [pc, #20]	; (800687c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	0a9b      	lsrs	r3, r3, #10
 800686c:	f003 0307 	and.w	r3, r3, #7
 8006870:	4a03      	ldr	r2, [pc, #12]	; (8006880 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006872:	5cd3      	ldrb	r3, [r2, r3]
 8006874:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006878:	4618      	mov	r0, r3
 800687a:	bd80      	pop	{r7, pc}
 800687c:	40023800 	.word	0x40023800
 8006880:	0800bff8 	.word	0x0800bff8

08006884 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006888:	f7ff ffdc 	bl	8006844 <HAL_RCC_GetHCLKFreq>
 800688c:	4601      	mov	r1, r0
 800688e:	4b05      	ldr	r3, [pc, #20]	; (80068a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	0b5b      	lsrs	r3, r3, #13
 8006894:	f003 0307 	and.w	r3, r3, #7
 8006898:	4a03      	ldr	r2, [pc, #12]	; (80068a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800689a:	5cd3      	ldrb	r3, [r2, r3]
 800689c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	bd80      	pop	{r7, pc}
 80068a4:	40023800 	.word	0x40023800
 80068a8:	0800bff8 	.word	0x0800bff8

080068ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d101      	bne.n	80068be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	e01d      	b.n	80068fa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d106      	bne.n	80068d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f7fd f854 	bl	8003980 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2202      	movs	r2, #2
 80068dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	3304      	adds	r3, #4
 80068e8:	4619      	mov	r1, r3
 80068ea:	4610      	mov	r0, r2
 80068ec:	f000 fcf6 	bl	80072dc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068f8:	2300      	movs	r3, #0
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3708      	adds	r7, #8
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}

08006902 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006902:	b580      	push	{r7, lr}
 8006904:	b082      	sub	sp, #8
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d101      	bne.n	8006914 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	e01d      	b.n	8006950 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800691a:	b2db      	uxtb	r3, r3
 800691c:	2b00      	cmp	r3, #0
 800691e:	d106      	bne.n	800692e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f000 f815 	bl	8006958 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2202      	movs	r2, #2
 8006932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	3304      	adds	r3, #4
 800693e:	4619      	mov	r1, r3
 8006940:	4610      	mov	r0, r2
 8006942:	f000 fccb 	bl	80072dc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2201      	movs	r2, #1
 800694a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800694e:	2300      	movs	r3, #0
}
 8006950:	4618      	mov	r0, r3
 8006952:	3708      	adds	r7, #8
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006960:	bf00      	nop
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	2201      	movs	r2, #1
 800697c:	6839      	ldr	r1, [r7, #0]
 800697e:	4618      	mov	r0, r3
 8006980:	f001 f8c0 	bl	8007b04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a15      	ldr	r2, [pc, #84]	; (80069e0 <HAL_TIM_PWM_Start+0x74>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d004      	beq.n	8006998 <HAL_TIM_PWM_Start+0x2c>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a14      	ldr	r2, [pc, #80]	; (80069e4 <HAL_TIM_PWM_Start+0x78>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d101      	bne.n	800699c <HAL_TIM_PWM_Start+0x30>
 8006998:	2301      	movs	r3, #1
 800699a:	e000      	b.n	800699e <HAL_TIM_PWM_Start+0x32>
 800699c:	2300      	movs	r3, #0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d007      	beq.n	80069b2 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80069b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	f003 0307 	and.w	r3, r3, #7
 80069bc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2b06      	cmp	r3, #6
 80069c2:	d007      	beq.n	80069d4 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f042 0201 	orr.w	r2, r2, #1
 80069d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3710      	adds	r7, #16
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop
 80069e0:	40010000 	.word	0x40010000
 80069e4:	40010400 	.word	0x40010400

080069e8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	2200      	movs	r2, #0
 80069f8:	6839      	ldr	r1, [r7, #0]
 80069fa:	4618      	mov	r0, r3
 80069fc:	f001 f882 	bl	8007b04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a22      	ldr	r2, [pc, #136]	; (8006a90 <HAL_TIM_PWM_Stop+0xa8>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d004      	beq.n	8006a14 <HAL_TIM_PWM_Stop+0x2c>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a21      	ldr	r2, [pc, #132]	; (8006a94 <HAL_TIM_PWM_Stop+0xac>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d101      	bne.n	8006a18 <HAL_TIM_PWM_Stop+0x30>
 8006a14:	2301      	movs	r3, #1
 8006a16:	e000      	b.n	8006a1a <HAL_TIM_PWM_Stop+0x32>
 8006a18:	2300      	movs	r3, #0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d017      	beq.n	8006a4e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	6a1a      	ldr	r2, [r3, #32]
 8006a24:	f241 1311 	movw	r3, #4369	; 0x1111
 8006a28:	4013      	ands	r3, r2
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d10f      	bne.n	8006a4e <HAL_TIM_PWM_Stop+0x66>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	6a1a      	ldr	r2, [r3, #32]
 8006a34:	f240 4344 	movw	r3, #1092	; 0x444
 8006a38:	4013      	ands	r3, r2
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d107      	bne.n	8006a4e <HAL_TIM_PWM_Stop+0x66>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006a4c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	6a1a      	ldr	r2, [r3, #32]
 8006a54:	f241 1311 	movw	r3, #4369	; 0x1111
 8006a58:	4013      	ands	r3, r2
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d10f      	bne.n	8006a7e <HAL_TIM_PWM_Stop+0x96>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	6a1a      	ldr	r2, [r3, #32]
 8006a64:	f240 4344 	movw	r3, #1092	; 0x444
 8006a68:	4013      	ands	r3, r2
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d107      	bne.n	8006a7e <HAL_TIM_PWM_Stop+0x96>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f022 0201 	bic.w	r2, r2, #1
 8006a7c:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2201      	movs	r2, #1
 8006a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3708      	adds	r7, #8
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}
 8006a90:	40010000 	.word	0x40010000
 8006a94:	40010400 	.word	0x40010400

08006a98 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d101      	bne.n	8006aaa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e01d      	b.n	8006ae6 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d106      	bne.n	8006ac4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 f815 	bl	8006aee <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2202      	movs	r2, #2
 8006ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	3304      	adds	r3, #4
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	4610      	mov	r0, r2
 8006ad8:	f000 fc00 	bl	80072dc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ae4:	2300      	movs	r3, #0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3708      	adds	r7, #8
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}

08006aee <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006aee:	b480      	push	{r7}
 8006af0:	b083      	sub	sp, #12
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006af6:	bf00      	nop
 8006af8:	370c      	adds	r7, #12
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr
	...

08006b04 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	2b0c      	cmp	r3, #12
 8006b12:	d841      	bhi.n	8006b98 <HAL_TIM_IC_Start_IT+0x94>
 8006b14:	a201      	add	r2, pc, #4	; (adr r2, 8006b1c <HAL_TIM_IC_Start_IT+0x18>)
 8006b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b1a:	bf00      	nop
 8006b1c:	08006b51 	.word	0x08006b51
 8006b20:	08006b99 	.word	0x08006b99
 8006b24:	08006b99 	.word	0x08006b99
 8006b28:	08006b99 	.word	0x08006b99
 8006b2c:	08006b63 	.word	0x08006b63
 8006b30:	08006b99 	.word	0x08006b99
 8006b34:	08006b99 	.word	0x08006b99
 8006b38:	08006b99 	.word	0x08006b99
 8006b3c:	08006b75 	.word	0x08006b75
 8006b40:	08006b99 	.word	0x08006b99
 8006b44:	08006b99 	.word	0x08006b99
 8006b48:	08006b99 	.word	0x08006b99
 8006b4c:	08006b87 	.word	0x08006b87
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	68da      	ldr	r2, [r3, #12]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f042 0202 	orr.w	r2, r2, #2
 8006b5e:	60da      	str	r2, [r3, #12]
      break;
 8006b60:	e01b      	b.n	8006b9a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	68da      	ldr	r2, [r3, #12]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f042 0204 	orr.w	r2, r2, #4
 8006b70:	60da      	str	r2, [r3, #12]
      break;
 8006b72:	e012      	b.n	8006b9a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	68da      	ldr	r2, [r3, #12]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f042 0208 	orr.w	r2, r2, #8
 8006b82:	60da      	str	r2, [r3, #12]
      break;
 8006b84:	e009      	b.n	8006b9a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	68da      	ldr	r2, [r3, #12]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f042 0210 	orr.w	r2, r2, #16
 8006b94:	60da      	str	r2, [r3, #12]
      break;
 8006b96:	e000      	b.n	8006b9a <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8006b98:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	6839      	ldr	r1, [r7, #0]
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f000 ffae 	bl	8007b04 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	f003 0307 	and.w	r3, r3, #7
 8006bb2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2b06      	cmp	r3, #6
 8006bb8:	d007      	beq.n	8006bca <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f042 0201 	orr.w	r2, r2, #1
 8006bc8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006bca:	2300      	movs	r3, #0
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3710      	adds	r7, #16
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b082      	sub	sp, #8
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	691b      	ldr	r3, [r3, #16]
 8006be2:	f003 0302 	and.w	r3, r3, #2
 8006be6:	2b02      	cmp	r3, #2
 8006be8:	d122      	bne.n	8006c30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	f003 0302 	and.w	r3, r3, #2
 8006bf4:	2b02      	cmp	r3, #2
 8006bf6:	d11b      	bne.n	8006c30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f06f 0202 	mvn.w	r2, #2
 8006c00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2201      	movs	r2, #1
 8006c06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	699b      	ldr	r3, [r3, #24]
 8006c0e:	f003 0303 	and.w	r3, r3, #3
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d003      	beq.n	8006c1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f7fc fd64 	bl	80036e4 <HAL_TIM_IC_CaptureCallback>
 8006c1c:	e005      	b.n	8006c2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 fb3e 	bl	80072a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 fb45 	bl	80072b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	691b      	ldr	r3, [r3, #16]
 8006c36:	f003 0304 	and.w	r3, r3, #4
 8006c3a:	2b04      	cmp	r3, #4
 8006c3c:	d122      	bne.n	8006c84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	68db      	ldr	r3, [r3, #12]
 8006c44:	f003 0304 	and.w	r3, r3, #4
 8006c48:	2b04      	cmp	r3, #4
 8006c4a:	d11b      	bne.n	8006c84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f06f 0204 	mvn.w	r2, #4
 8006c54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2202      	movs	r2, #2
 8006c5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	699b      	ldr	r3, [r3, #24]
 8006c62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d003      	beq.n	8006c72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f7fc fd3a 	bl	80036e4 <HAL_TIM_IC_CaptureCallback>
 8006c70:	e005      	b.n	8006c7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 fb14 	bl	80072a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 fb1b 	bl	80072b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	f003 0308 	and.w	r3, r3, #8
 8006c8e:	2b08      	cmp	r3, #8
 8006c90:	d122      	bne.n	8006cd8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	f003 0308 	and.w	r3, r3, #8
 8006c9c:	2b08      	cmp	r3, #8
 8006c9e:	d11b      	bne.n	8006cd8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f06f 0208 	mvn.w	r2, #8
 8006ca8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2204      	movs	r2, #4
 8006cae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	69db      	ldr	r3, [r3, #28]
 8006cb6:	f003 0303 	and.w	r3, r3, #3
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d003      	beq.n	8006cc6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f7fc fd10 	bl	80036e4 <HAL_TIM_IC_CaptureCallback>
 8006cc4:	e005      	b.n	8006cd2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 faea 	bl	80072a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f000 faf1 	bl	80072b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	691b      	ldr	r3, [r3, #16]
 8006cde:	f003 0310 	and.w	r3, r3, #16
 8006ce2:	2b10      	cmp	r3, #16
 8006ce4:	d122      	bne.n	8006d2c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	f003 0310 	and.w	r3, r3, #16
 8006cf0:	2b10      	cmp	r3, #16
 8006cf2:	d11b      	bne.n	8006d2c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f06f 0210 	mvn.w	r2, #16
 8006cfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2208      	movs	r2, #8
 8006d02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	69db      	ldr	r3, [r3, #28]
 8006d0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d003      	beq.n	8006d1a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f7fc fce6 	bl	80036e4 <HAL_TIM_IC_CaptureCallback>
 8006d18:	e005      	b.n	8006d26 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 fac0 	bl	80072a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 fac7 	bl	80072b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	691b      	ldr	r3, [r3, #16]
 8006d32:	f003 0301 	and.w	r3, r3, #1
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d10e      	bne.n	8006d58 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	f003 0301 	and.w	r3, r3, #1
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d107      	bne.n	8006d58 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f06f 0201 	mvn.w	r2, #1
 8006d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f7fc fd10 	bl	8003778 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	691b      	ldr	r3, [r3, #16]
 8006d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d62:	2b80      	cmp	r3, #128	; 0x80
 8006d64:	d10e      	bne.n	8006d84 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d70:	2b80      	cmp	r3, #128	; 0x80
 8006d72:	d107      	bne.n	8006d84 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 ff6c 	bl	8007c5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d8e:	2b40      	cmp	r3, #64	; 0x40
 8006d90:	d10e      	bne.n	8006db0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d9c:	2b40      	cmp	r3, #64	; 0x40
 8006d9e:	d107      	bne.n	8006db0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 fa8c 	bl	80072c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	f003 0320 	and.w	r3, r3, #32
 8006dba:	2b20      	cmp	r3, #32
 8006dbc:	d10e      	bne.n	8006ddc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	f003 0320 	and.w	r3, r3, #32
 8006dc8:	2b20      	cmp	r3, #32
 8006dca:	d107      	bne.n	8006ddc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f06f 0220 	mvn.w	r2, #32
 8006dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 ff36 	bl	8007c48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ddc:	bf00      	nop
 8006dde:	3708      	adds	r7, #8
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d101      	bne.n	8006dfe <HAL_TIM_IC_ConfigChannel+0x1a>
 8006dfa:	2302      	movs	r3, #2
 8006dfc:	e08a      	b.n	8006f14 <HAL_TIM_IC_ConfigChannel+0x130>
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2201      	movs	r2, #1
 8006e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2202      	movs	r2, #2
 8006e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d11b      	bne.n	8006e4c <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6818      	ldr	r0, [r3, #0]
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	6819      	ldr	r1, [r3, #0]
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	685a      	ldr	r2, [r3, #4]
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	f000 fcaa 	bl	800777c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	699a      	ldr	r2, [r3, #24]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f022 020c 	bic.w	r2, r2, #12
 8006e36:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	6999      	ldr	r1, [r3, #24]
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	689a      	ldr	r2, [r3, #8]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	430a      	orrs	r2, r1
 8006e48:	619a      	str	r2, [r3, #24]
 8006e4a:	e05a      	b.n	8006f02 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2b04      	cmp	r3, #4
 8006e50:	d11c      	bne.n	8006e8c <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6818      	ldr	r0, [r3, #0]
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	6819      	ldr	r1, [r3, #0]
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	685a      	ldr	r2, [r3, #4]
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	f000 fd2e 	bl	80078c2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	699a      	ldr	r2, [r3, #24]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006e74:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	6999      	ldr	r1, [r3, #24]
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	021a      	lsls	r2, r3, #8
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	430a      	orrs	r2, r1
 8006e88:	619a      	str	r2, [r3, #24]
 8006e8a:	e03a      	b.n	8006f02 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2b08      	cmp	r3, #8
 8006e90:	d11b      	bne.n	8006eca <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6818      	ldr	r0, [r3, #0]
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	6819      	ldr	r1, [r3, #0]
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	685a      	ldr	r2, [r3, #4]
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	f000 fd7b 	bl	800799c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	69da      	ldr	r2, [r3, #28]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f022 020c 	bic.w	r2, r2, #12
 8006eb4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	69d9      	ldr	r1, [r3, #28]
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	689a      	ldr	r2, [r3, #8]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	430a      	orrs	r2, r1
 8006ec6:	61da      	str	r2, [r3, #28]
 8006ec8:	e01b      	b.n	8006f02 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	6818      	ldr	r0, [r3, #0]
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	6819      	ldr	r1, [r3, #0]
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	685a      	ldr	r2, [r3, #4]
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	f000 fd9b 	bl	8007a14 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	69da      	ldr	r2, [r3, #28]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006eec:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	69d9      	ldr	r1, [r3, #28]
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	021a      	lsls	r2, r3, #8
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	430a      	orrs	r2, r1
 8006f00:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2201      	movs	r2, #1
 8006f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f12:	2300      	movs	r3, #0
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3710      	adds	r7, #16
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d101      	bne.n	8006f36 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006f32:	2302      	movs	r3, #2
 8006f34:	e0b4      	b.n	80070a0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2201      	movs	r2, #1
 8006f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2202      	movs	r2, #2
 8006f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2b0c      	cmp	r3, #12
 8006f4a:	f200 809f 	bhi.w	800708c <HAL_TIM_PWM_ConfigChannel+0x170>
 8006f4e:	a201      	add	r2, pc, #4	; (adr r2, 8006f54 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f54:	08006f89 	.word	0x08006f89
 8006f58:	0800708d 	.word	0x0800708d
 8006f5c:	0800708d 	.word	0x0800708d
 8006f60:	0800708d 	.word	0x0800708d
 8006f64:	08006fc9 	.word	0x08006fc9
 8006f68:	0800708d 	.word	0x0800708d
 8006f6c:	0800708d 	.word	0x0800708d
 8006f70:	0800708d 	.word	0x0800708d
 8006f74:	0800700b 	.word	0x0800700b
 8006f78:	0800708d 	.word	0x0800708d
 8006f7c:	0800708d 	.word	0x0800708d
 8006f80:	0800708d 	.word	0x0800708d
 8006f84:	0800704b 	.word	0x0800704b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	68b9      	ldr	r1, [r7, #8]
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f000 fa44 	bl	800741c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	699a      	ldr	r2, [r3, #24]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f042 0208 	orr.w	r2, r2, #8
 8006fa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	699a      	ldr	r2, [r3, #24]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f022 0204 	bic.w	r2, r2, #4
 8006fb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	6999      	ldr	r1, [r3, #24]
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	691a      	ldr	r2, [r3, #16]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	430a      	orrs	r2, r1
 8006fc4:	619a      	str	r2, [r3, #24]
      break;
 8006fc6:	e062      	b.n	800708e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	68b9      	ldr	r1, [r7, #8]
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f000 fa94 	bl	80074fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	699a      	ldr	r2, [r3, #24]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006fe2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	699a      	ldr	r2, [r3, #24]
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ff2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	6999      	ldr	r1, [r3, #24]
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	691b      	ldr	r3, [r3, #16]
 8006ffe:	021a      	lsls	r2, r3, #8
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	430a      	orrs	r2, r1
 8007006:	619a      	str	r2, [r3, #24]
      break;
 8007008:	e041      	b.n	800708e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	68b9      	ldr	r1, [r7, #8]
 8007010:	4618      	mov	r0, r3
 8007012:	f000 fae9 	bl	80075e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	69da      	ldr	r2, [r3, #28]
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f042 0208 	orr.w	r2, r2, #8
 8007024:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	69da      	ldr	r2, [r3, #28]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f022 0204 	bic.w	r2, r2, #4
 8007034:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	69d9      	ldr	r1, [r3, #28]
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	691a      	ldr	r2, [r3, #16]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	430a      	orrs	r2, r1
 8007046:	61da      	str	r2, [r3, #28]
      break;
 8007048:	e021      	b.n	800708e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	68b9      	ldr	r1, [r7, #8]
 8007050:	4618      	mov	r0, r3
 8007052:	f000 fb3d 	bl	80076d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	69da      	ldr	r2, [r3, #28]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007064:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	69da      	ldr	r2, [r3, #28]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007074:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	69d9      	ldr	r1, [r3, #28]
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	691b      	ldr	r3, [r3, #16]
 8007080:	021a      	lsls	r2, r3, #8
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	430a      	orrs	r2, r1
 8007088:	61da      	str	r2, [r3, #28]
      break;
 800708a:	e000      	b.n	800708e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800708c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2201      	movs	r2, #1
 8007092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2200      	movs	r2, #0
 800709a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800709e:	2300      	movs	r3, #0
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3710      	adds	r7, #16
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b084      	sub	sp, #16
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d101      	bne.n	80070c0 <HAL_TIM_ConfigClockSource+0x18>
 80070bc:	2302      	movs	r3, #2
 80070be:	e0a6      	b.n	800720e <HAL_TIM_ConfigClockSource+0x166>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2201      	movs	r2, #1
 80070c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2202      	movs	r2, #2
 80070cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80070de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80070e6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	68fa      	ldr	r2, [r7, #12]
 80070ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	2b40      	cmp	r3, #64	; 0x40
 80070f6:	d067      	beq.n	80071c8 <HAL_TIM_ConfigClockSource+0x120>
 80070f8:	2b40      	cmp	r3, #64	; 0x40
 80070fa:	d80b      	bhi.n	8007114 <HAL_TIM_ConfigClockSource+0x6c>
 80070fc:	2b10      	cmp	r3, #16
 80070fe:	d073      	beq.n	80071e8 <HAL_TIM_ConfigClockSource+0x140>
 8007100:	2b10      	cmp	r3, #16
 8007102:	d802      	bhi.n	800710a <HAL_TIM_ConfigClockSource+0x62>
 8007104:	2b00      	cmp	r3, #0
 8007106:	d06f      	beq.n	80071e8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007108:	e078      	b.n	80071fc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800710a:	2b20      	cmp	r3, #32
 800710c:	d06c      	beq.n	80071e8 <HAL_TIM_ConfigClockSource+0x140>
 800710e:	2b30      	cmp	r3, #48	; 0x30
 8007110:	d06a      	beq.n	80071e8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007112:	e073      	b.n	80071fc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007114:	2b70      	cmp	r3, #112	; 0x70
 8007116:	d00d      	beq.n	8007134 <HAL_TIM_ConfigClockSource+0x8c>
 8007118:	2b70      	cmp	r3, #112	; 0x70
 800711a:	d804      	bhi.n	8007126 <HAL_TIM_ConfigClockSource+0x7e>
 800711c:	2b50      	cmp	r3, #80	; 0x50
 800711e:	d033      	beq.n	8007188 <HAL_TIM_ConfigClockSource+0xe0>
 8007120:	2b60      	cmp	r3, #96	; 0x60
 8007122:	d041      	beq.n	80071a8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007124:	e06a      	b.n	80071fc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800712a:	d066      	beq.n	80071fa <HAL_TIM_ConfigClockSource+0x152>
 800712c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007130:	d017      	beq.n	8007162 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007132:	e063      	b.n	80071fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6818      	ldr	r0, [r3, #0]
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	6899      	ldr	r1, [r3, #8]
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	685a      	ldr	r2, [r3, #4]
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	68db      	ldr	r3, [r3, #12]
 8007144:	f000 fcbe 	bl	8007ac4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007156:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	68fa      	ldr	r2, [r7, #12]
 800715e:	609a      	str	r2, [r3, #8]
      break;
 8007160:	e04c      	b.n	80071fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6818      	ldr	r0, [r3, #0]
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	6899      	ldr	r1, [r3, #8]
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	685a      	ldr	r2, [r3, #4]
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	f000 fca7 	bl	8007ac4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	689a      	ldr	r2, [r3, #8]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007184:	609a      	str	r2, [r3, #8]
      break;
 8007186:	e039      	b.n	80071fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6818      	ldr	r0, [r3, #0]
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	6859      	ldr	r1, [r3, #4]
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	68db      	ldr	r3, [r3, #12]
 8007194:	461a      	mov	r2, r3
 8007196:	f000 fb65 	bl	8007864 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	2150      	movs	r1, #80	; 0x50
 80071a0:	4618      	mov	r0, r3
 80071a2:	f000 fc74 	bl	8007a8e <TIM_ITRx_SetConfig>
      break;
 80071a6:	e029      	b.n	80071fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6818      	ldr	r0, [r3, #0]
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	6859      	ldr	r1, [r3, #4]
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	68db      	ldr	r3, [r3, #12]
 80071b4:	461a      	mov	r2, r3
 80071b6:	f000 fbc1 	bl	800793c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2160      	movs	r1, #96	; 0x60
 80071c0:	4618      	mov	r0, r3
 80071c2:	f000 fc64 	bl	8007a8e <TIM_ITRx_SetConfig>
      break;
 80071c6:	e019      	b.n	80071fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6818      	ldr	r0, [r3, #0]
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	6859      	ldr	r1, [r3, #4]
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	461a      	mov	r2, r3
 80071d6:	f000 fb45 	bl	8007864 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	2140      	movs	r1, #64	; 0x40
 80071e0:	4618      	mov	r0, r3
 80071e2:	f000 fc54 	bl	8007a8e <TIM_ITRx_SetConfig>
      break;
 80071e6:	e009      	b.n	80071fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4619      	mov	r1, r3
 80071f2:	4610      	mov	r0, r2
 80071f4:	f000 fc4b 	bl	8007a8e <TIM_ITRx_SetConfig>
      break;
 80071f8:	e000      	b.n	80071fc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80071fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2201      	movs	r2, #1
 8007200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800720c:	2300      	movs	r3, #0
}
 800720e:	4618      	mov	r0, r3
 8007210:	3710      	adds	r7, #16
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
	...

08007218 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007218:	b480      	push	{r7}
 800721a:	b085      	sub	sp, #20
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007222:	2300      	movs	r3, #0
 8007224:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	2b0c      	cmp	r3, #12
 800722a:	d831      	bhi.n	8007290 <HAL_TIM_ReadCapturedValue+0x78>
 800722c:	a201      	add	r2, pc, #4	; (adr r2, 8007234 <HAL_TIM_ReadCapturedValue+0x1c>)
 800722e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007232:	bf00      	nop
 8007234:	08007269 	.word	0x08007269
 8007238:	08007291 	.word	0x08007291
 800723c:	08007291 	.word	0x08007291
 8007240:	08007291 	.word	0x08007291
 8007244:	08007273 	.word	0x08007273
 8007248:	08007291 	.word	0x08007291
 800724c:	08007291 	.word	0x08007291
 8007250:	08007291 	.word	0x08007291
 8007254:	0800727d 	.word	0x0800727d
 8007258:	08007291 	.word	0x08007291
 800725c:	08007291 	.word	0x08007291
 8007260:	08007291 	.word	0x08007291
 8007264:	08007287 	.word	0x08007287
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800726e:	60fb      	str	r3, [r7, #12]

      break;
 8007270:	e00f      	b.n	8007292 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007278:	60fb      	str	r3, [r7, #12]

      break;
 800727a:	e00a      	b.n	8007292 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007282:	60fb      	str	r3, [r7, #12]

      break;
 8007284:	e005      	b.n	8007292 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800728c:	60fb      	str	r3, [r7, #12]

      break;
 800728e:	e000      	b.n	8007292 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007290:	bf00      	nop
  }

  return tmpreg;
 8007292:	68fb      	ldr	r3, [r7, #12]
}
 8007294:	4618      	mov	r0, r3
 8007296:	3714      	adds	r7, #20
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr

080072a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b083      	sub	sp, #12
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80072a8:	bf00      	nop
 80072aa:	370c      	adds	r7, #12
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr

080072b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b083      	sub	sp, #12
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80072bc:	bf00      	nop
 80072be:	370c      	adds	r7, #12
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr

080072c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b083      	sub	sp, #12
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80072d0:	bf00      	nop
 80072d2:	370c      	adds	r7, #12
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr

080072dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80072dc:	b480      	push	{r7}
 80072de:	b085      	sub	sp, #20
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	4a40      	ldr	r2, [pc, #256]	; (80073f0 <TIM_Base_SetConfig+0x114>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d013      	beq.n	800731c <TIM_Base_SetConfig+0x40>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072fa:	d00f      	beq.n	800731c <TIM_Base_SetConfig+0x40>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	4a3d      	ldr	r2, [pc, #244]	; (80073f4 <TIM_Base_SetConfig+0x118>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d00b      	beq.n	800731c <TIM_Base_SetConfig+0x40>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	4a3c      	ldr	r2, [pc, #240]	; (80073f8 <TIM_Base_SetConfig+0x11c>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d007      	beq.n	800731c <TIM_Base_SetConfig+0x40>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	4a3b      	ldr	r2, [pc, #236]	; (80073fc <TIM_Base_SetConfig+0x120>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d003      	beq.n	800731c <TIM_Base_SetConfig+0x40>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	4a3a      	ldr	r2, [pc, #232]	; (8007400 <TIM_Base_SetConfig+0x124>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d108      	bne.n	800732e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007322:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	68fa      	ldr	r2, [r7, #12]
 800732a:	4313      	orrs	r3, r2
 800732c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	4a2f      	ldr	r2, [pc, #188]	; (80073f0 <TIM_Base_SetConfig+0x114>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d02b      	beq.n	800738e <TIM_Base_SetConfig+0xb2>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800733c:	d027      	beq.n	800738e <TIM_Base_SetConfig+0xb2>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	4a2c      	ldr	r2, [pc, #176]	; (80073f4 <TIM_Base_SetConfig+0x118>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d023      	beq.n	800738e <TIM_Base_SetConfig+0xb2>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	4a2b      	ldr	r2, [pc, #172]	; (80073f8 <TIM_Base_SetConfig+0x11c>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d01f      	beq.n	800738e <TIM_Base_SetConfig+0xb2>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	4a2a      	ldr	r2, [pc, #168]	; (80073fc <TIM_Base_SetConfig+0x120>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d01b      	beq.n	800738e <TIM_Base_SetConfig+0xb2>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	4a29      	ldr	r2, [pc, #164]	; (8007400 <TIM_Base_SetConfig+0x124>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d017      	beq.n	800738e <TIM_Base_SetConfig+0xb2>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	4a28      	ldr	r2, [pc, #160]	; (8007404 <TIM_Base_SetConfig+0x128>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d013      	beq.n	800738e <TIM_Base_SetConfig+0xb2>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	4a27      	ldr	r2, [pc, #156]	; (8007408 <TIM_Base_SetConfig+0x12c>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d00f      	beq.n	800738e <TIM_Base_SetConfig+0xb2>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	4a26      	ldr	r2, [pc, #152]	; (800740c <TIM_Base_SetConfig+0x130>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d00b      	beq.n	800738e <TIM_Base_SetConfig+0xb2>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	4a25      	ldr	r2, [pc, #148]	; (8007410 <TIM_Base_SetConfig+0x134>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d007      	beq.n	800738e <TIM_Base_SetConfig+0xb2>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	4a24      	ldr	r2, [pc, #144]	; (8007414 <TIM_Base_SetConfig+0x138>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d003      	beq.n	800738e <TIM_Base_SetConfig+0xb2>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	4a23      	ldr	r2, [pc, #140]	; (8007418 <TIM_Base_SetConfig+0x13c>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d108      	bne.n	80073a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007394:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	68db      	ldr	r3, [r3, #12]
 800739a:	68fa      	ldr	r2, [r7, #12]
 800739c:	4313      	orrs	r3, r2
 800739e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	695b      	ldr	r3, [r3, #20]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	68fa      	ldr	r2, [r7, #12]
 80073b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	689a      	ldr	r2, [r3, #8]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	4a0a      	ldr	r2, [pc, #40]	; (80073f0 <TIM_Base_SetConfig+0x114>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d003      	beq.n	80073d4 <TIM_Base_SetConfig+0xf8>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	4a0c      	ldr	r2, [pc, #48]	; (8007400 <TIM_Base_SetConfig+0x124>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d103      	bne.n	80073dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	691a      	ldr	r2, [r3, #16]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2201      	movs	r2, #1
 80073e0:	615a      	str	r2, [r3, #20]
}
 80073e2:	bf00      	nop
 80073e4:	3714      	adds	r7, #20
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr
 80073ee:	bf00      	nop
 80073f0:	40010000 	.word	0x40010000
 80073f4:	40000400 	.word	0x40000400
 80073f8:	40000800 	.word	0x40000800
 80073fc:	40000c00 	.word	0x40000c00
 8007400:	40010400 	.word	0x40010400
 8007404:	40014000 	.word	0x40014000
 8007408:	40014400 	.word	0x40014400
 800740c:	40014800 	.word	0x40014800
 8007410:	40001800 	.word	0x40001800
 8007414:	40001c00 	.word	0x40001c00
 8007418:	40002000 	.word	0x40002000

0800741c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800741c:	b480      	push	{r7}
 800741e:	b087      	sub	sp, #28
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6a1b      	ldr	r3, [r3, #32]
 800742a:	f023 0201 	bic.w	r2, r3, #1
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6a1b      	ldr	r3, [r3, #32]
 8007436:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	699b      	ldr	r3, [r3, #24]
 8007442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800744a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f023 0303 	bic.w	r3, r3, #3
 8007452:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	68fa      	ldr	r2, [r7, #12]
 800745a:	4313      	orrs	r3, r2
 800745c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	f023 0302 	bic.w	r3, r3, #2
 8007464:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	697a      	ldr	r2, [r7, #20]
 800746c:	4313      	orrs	r3, r2
 800746e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	4a20      	ldr	r2, [pc, #128]	; (80074f4 <TIM_OC1_SetConfig+0xd8>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d003      	beq.n	8007480 <TIM_OC1_SetConfig+0x64>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	4a1f      	ldr	r2, [pc, #124]	; (80074f8 <TIM_OC1_SetConfig+0xdc>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d10c      	bne.n	800749a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	f023 0308 	bic.w	r3, r3, #8
 8007486:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	68db      	ldr	r3, [r3, #12]
 800748c:	697a      	ldr	r2, [r7, #20]
 800748e:	4313      	orrs	r3, r2
 8007490:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	f023 0304 	bic.w	r3, r3, #4
 8007498:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	4a15      	ldr	r2, [pc, #84]	; (80074f4 <TIM_OC1_SetConfig+0xd8>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d003      	beq.n	80074aa <TIM_OC1_SetConfig+0x8e>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	4a14      	ldr	r2, [pc, #80]	; (80074f8 <TIM_OC1_SetConfig+0xdc>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d111      	bne.n	80074ce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80074b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	695b      	ldr	r3, [r3, #20]
 80074be:	693a      	ldr	r2, [r7, #16]
 80074c0:	4313      	orrs	r3, r2
 80074c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	699b      	ldr	r3, [r3, #24]
 80074c8:	693a      	ldr	r2, [r7, #16]
 80074ca:	4313      	orrs	r3, r2
 80074cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	693a      	ldr	r2, [r7, #16]
 80074d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	68fa      	ldr	r2, [r7, #12]
 80074d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	685a      	ldr	r2, [r3, #4]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	697a      	ldr	r2, [r7, #20]
 80074e6:	621a      	str	r2, [r3, #32]
}
 80074e8:	bf00      	nop
 80074ea:	371c      	adds	r7, #28
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr
 80074f4:	40010000 	.word	0x40010000
 80074f8:	40010400 	.word	0x40010400

080074fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b087      	sub	sp, #28
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6a1b      	ldr	r3, [r3, #32]
 800750a:	f023 0210 	bic.w	r2, r3, #16
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6a1b      	ldr	r3, [r3, #32]
 8007516:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	699b      	ldr	r3, [r3, #24]
 8007522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800752a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007532:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	021b      	lsls	r3, r3, #8
 800753a:	68fa      	ldr	r2, [r7, #12]
 800753c:	4313      	orrs	r3, r2
 800753e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	f023 0320 	bic.w	r3, r3, #32
 8007546:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	011b      	lsls	r3, r3, #4
 800754e:	697a      	ldr	r2, [r7, #20]
 8007550:	4313      	orrs	r3, r2
 8007552:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	4a22      	ldr	r2, [pc, #136]	; (80075e0 <TIM_OC2_SetConfig+0xe4>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d003      	beq.n	8007564 <TIM_OC2_SetConfig+0x68>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	4a21      	ldr	r2, [pc, #132]	; (80075e4 <TIM_OC2_SetConfig+0xe8>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d10d      	bne.n	8007580 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800756a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	011b      	lsls	r3, r3, #4
 8007572:	697a      	ldr	r2, [r7, #20]
 8007574:	4313      	orrs	r3, r2
 8007576:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800757e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	4a17      	ldr	r2, [pc, #92]	; (80075e0 <TIM_OC2_SetConfig+0xe4>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d003      	beq.n	8007590 <TIM_OC2_SetConfig+0x94>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	4a16      	ldr	r2, [pc, #88]	; (80075e4 <TIM_OC2_SetConfig+0xe8>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d113      	bne.n	80075b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007596:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800759e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	695b      	ldr	r3, [r3, #20]
 80075a4:	009b      	lsls	r3, r3, #2
 80075a6:	693a      	ldr	r2, [r7, #16]
 80075a8:	4313      	orrs	r3, r2
 80075aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	699b      	ldr	r3, [r3, #24]
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	693a      	ldr	r2, [r7, #16]
 80075b4:	4313      	orrs	r3, r2
 80075b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	693a      	ldr	r2, [r7, #16]
 80075bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	68fa      	ldr	r2, [r7, #12]
 80075c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	685a      	ldr	r2, [r3, #4]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	697a      	ldr	r2, [r7, #20]
 80075d0:	621a      	str	r2, [r3, #32]
}
 80075d2:	bf00      	nop
 80075d4:	371c      	adds	r7, #28
 80075d6:	46bd      	mov	sp, r7
 80075d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075dc:	4770      	bx	lr
 80075de:	bf00      	nop
 80075e0:	40010000 	.word	0x40010000
 80075e4:	40010400 	.word	0x40010400

080075e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b087      	sub	sp, #28
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a1b      	ldr	r3, [r3, #32]
 80075f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6a1b      	ldr	r3, [r3, #32]
 8007602:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	69db      	ldr	r3, [r3, #28]
 800760e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007616:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f023 0303 	bic.w	r3, r3, #3
 800761e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	68fa      	ldr	r2, [r7, #12]
 8007626:	4313      	orrs	r3, r2
 8007628:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007630:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	689b      	ldr	r3, [r3, #8]
 8007636:	021b      	lsls	r3, r3, #8
 8007638:	697a      	ldr	r2, [r7, #20]
 800763a:	4313      	orrs	r3, r2
 800763c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	4a21      	ldr	r2, [pc, #132]	; (80076c8 <TIM_OC3_SetConfig+0xe0>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d003      	beq.n	800764e <TIM_OC3_SetConfig+0x66>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	4a20      	ldr	r2, [pc, #128]	; (80076cc <TIM_OC3_SetConfig+0xe4>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d10d      	bne.n	800766a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007654:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	68db      	ldr	r3, [r3, #12]
 800765a:	021b      	lsls	r3, r3, #8
 800765c:	697a      	ldr	r2, [r7, #20]
 800765e:	4313      	orrs	r3, r2
 8007660:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007668:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	4a16      	ldr	r2, [pc, #88]	; (80076c8 <TIM_OC3_SetConfig+0xe0>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d003      	beq.n	800767a <TIM_OC3_SetConfig+0x92>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	4a15      	ldr	r2, [pc, #84]	; (80076cc <TIM_OC3_SetConfig+0xe4>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d113      	bne.n	80076a2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007680:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007688:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	695b      	ldr	r3, [r3, #20]
 800768e:	011b      	lsls	r3, r3, #4
 8007690:	693a      	ldr	r2, [r7, #16]
 8007692:	4313      	orrs	r3, r2
 8007694:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	699b      	ldr	r3, [r3, #24]
 800769a:	011b      	lsls	r3, r3, #4
 800769c:	693a      	ldr	r2, [r7, #16]
 800769e:	4313      	orrs	r3, r2
 80076a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	693a      	ldr	r2, [r7, #16]
 80076a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	68fa      	ldr	r2, [r7, #12]
 80076ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	685a      	ldr	r2, [r3, #4]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	697a      	ldr	r2, [r7, #20]
 80076ba:	621a      	str	r2, [r3, #32]
}
 80076bc:	bf00      	nop
 80076be:	371c      	adds	r7, #28
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr
 80076c8:	40010000 	.word	0x40010000
 80076cc:	40010400 	.word	0x40010400

080076d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b087      	sub	sp, #28
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6a1b      	ldr	r3, [r3, #32]
 80076de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6a1b      	ldr	r3, [r3, #32]
 80076ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	69db      	ldr	r3, [r3, #28]
 80076f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007706:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	021b      	lsls	r3, r3, #8
 800770e:	68fa      	ldr	r2, [r7, #12]
 8007710:	4313      	orrs	r3, r2
 8007712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800771a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	031b      	lsls	r3, r3, #12
 8007722:	693a      	ldr	r2, [r7, #16]
 8007724:	4313      	orrs	r3, r2
 8007726:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	4a12      	ldr	r2, [pc, #72]	; (8007774 <TIM_OC4_SetConfig+0xa4>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d003      	beq.n	8007738 <TIM_OC4_SetConfig+0x68>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	4a11      	ldr	r2, [pc, #68]	; (8007778 <TIM_OC4_SetConfig+0xa8>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d109      	bne.n	800774c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800773e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	695b      	ldr	r3, [r3, #20]
 8007744:	019b      	lsls	r3, r3, #6
 8007746:	697a      	ldr	r2, [r7, #20]
 8007748:	4313      	orrs	r3, r2
 800774a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	697a      	ldr	r2, [r7, #20]
 8007750:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	68fa      	ldr	r2, [r7, #12]
 8007756:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	685a      	ldr	r2, [r3, #4]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	693a      	ldr	r2, [r7, #16]
 8007764:	621a      	str	r2, [r3, #32]
}
 8007766:	bf00      	nop
 8007768:	371c      	adds	r7, #28
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr
 8007772:	bf00      	nop
 8007774:	40010000 	.word	0x40010000
 8007778:	40010400 	.word	0x40010400

0800777c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800777c:	b480      	push	{r7}
 800777e:	b087      	sub	sp, #28
 8007780:	af00      	add	r7, sp, #0
 8007782:	60f8      	str	r0, [r7, #12]
 8007784:	60b9      	str	r1, [r7, #8]
 8007786:	607a      	str	r2, [r7, #4]
 8007788:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	6a1b      	ldr	r3, [r3, #32]
 800778e:	f023 0201 	bic.w	r2, r3, #1
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	699b      	ldr	r3, [r3, #24]
 800779a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	6a1b      	ldr	r3, [r3, #32]
 80077a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	4a28      	ldr	r2, [pc, #160]	; (8007848 <TIM_TI1_SetConfig+0xcc>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d01b      	beq.n	80077e2 <TIM_TI1_SetConfig+0x66>
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077b0:	d017      	beq.n	80077e2 <TIM_TI1_SetConfig+0x66>
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	4a25      	ldr	r2, [pc, #148]	; (800784c <TIM_TI1_SetConfig+0xd0>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d013      	beq.n	80077e2 <TIM_TI1_SetConfig+0x66>
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	4a24      	ldr	r2, [pc, #144]	; (8007850 <TIM_TI1_SetConfig+0xd4>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d00f      	beq.n	80077e2 <TIM_TI1_SetConfig+0x66>
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	4a23      	ldr	r2, [pc, #140]	; (8007854 <TIM_TI1_SetConfig+0xd8>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d00b      	beq.n	80077e2 <TIM_TI1_SetConfig+0x66>
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	4a22      	ldr	r2, [pc, #136]	; (8007858 <TIM_TI1_SetConfig+0xdc>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d007      	beq.n	80077e2 <TIM_TI1_SetConfig+0x66>
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	4a21      	ldr	r2, [pc, #132]	; (800785c <TIM_TI1_SetConfig+0xe0>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d003      	beq.n	80077e2 <TIM_TI1_SetConfig+0x66>
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	4a20      	ldr	r2, [pc, #128]	; (8007860 <TIM_TI1_SetConfig+0xe4>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d101      	bne.n	80077e6 <TIM_TI1_SetConfig+0x6a>
 80077e2:	2301      	movs	r3, #1
 80077e4:	e000      	b.n	80077e8 <TIM_TI1_SetConfig+0x6c>
 80077e6:	2300      	movs	r3, #0
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d008      	beq.n	80077fe <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	f023 0303 	bic.w	r3, r3, #3
 80077f2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80077f4:	697a      	ldr	r2, [r7, #20]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	4313      	orrs	r3, r2
 80077fa:	617b      	str	r3, [r7, #20]
 80077fc:	e003      	b.n	8007806 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	f043 0301 	orr.w	r3, r3, #1
 8007804:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800780c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	011b      	lsls	r3, r3, #4
 8007812:	b2db      	uxtb	r3, r3
 8007814:	697a      	ldr	r2, [r7, #20]
 8007816:	4313      	orrs	r3, r2
 8007818:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	f023 030a 	bic.w	r3, r3, #10
 8007820:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	f003 030a 	and.w	r3, r3, #10
 8007828:	693a      	ldr	r2, [r7, #16]
 800782a:	4313      	orrs	r3, r2
 800782c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	697a      	ldr	r2, [r7, #20]
 8007832:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	693a      	ldr	r2, [r7, #16]
 8007838:	621a      	str	r2, [r3, #32]
}
 800783a:	bf00      	nop
 800783c:	371c      	adds	r7, #28
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr
 8007846:	bf00      	nop
 8007848:	40010000 	.word	0x40010000
 800784c:	40000400 	.word	0x40000400
 8007850:	40000800 	.word	0x40000800
 8007854:	40000c00 	.word	0x40000c00
 8007858:	40010400 	.word	0x40010400
 800785c:	40014000 	.word	0x40014000
 8007860:	40001800 	.word	0x40001800

08007864 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007864:	b480      	push	{r7}
 8007866:	b087      	sub	sp, #28
 8007868:	af00      	add	r7, sp, #0
 800786a:	60f8      	str	r0, [r7, #12]
 800786c:	60b9      	str	r1, [r7, #8]
 800786e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	6a1b      	ldr	r3, [r3, #32]
 8007874:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	6a1b      	ldr	r3, [r3, #32]
 800787a:	f023 0201 	bic.w	r2, r3, #1
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	699b      	ldr	r3, [r3, #24]
 8007886:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800788e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	011b      	lsls	r3, r3, #4
 8007894:	693a      	ldr	r2, [r7, #16]
 8007896:	4313      	orrs	r3, r2
 8007898:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	f023 030a 	bic.w	r3, r3, #10
 80078a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80078a2:	697a      	ldr	r2, [r7, #20]
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	4313      	orrs	r3, r2
 80078a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	693a      	ldr	r2, [r7, #16]
 80078ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	697a      	ldr	r2, [r7, #20]
 80078b4:	621a      	str	r2, [r3, #32]
}
 80078b6:	bf00      	nop
 80078b8:	371c      	adds	r7, #28
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr

080078c2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80078c2:	b480      	push	{r7}
 80078c4:	b087      	sub	sp, #28
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	60f8      	str	r0, [r7, #12]
 80078ca:	60b9      	str	r1, [r7, #8]
 80078cc:	607a      	str	r2, [r7, #4]
 80078ce:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	6a1b      	ldr	r3, [r3, #32]
 80078d4:	f023 0210 	bic.w	r2, r3, #16
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	699b      	ldr	r3, [r3, #24]
 80078e0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	6a1b      	ldr	r3, [r3, #32]
 80078e6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	021b      	lsls	r3, r3, #8
 80078f4:	697a      	ldr	r2, [r7, #20]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007900:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	031b      	lsls	r3, r3, #12
 8007906:	b29b      	uxth	r3, r3
 8007908:	697a      	ldr	r2, [r7, #20]
 800790a:	4313      	orrs	r3, r2
 800790c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007914:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	011b      	lsls	r3, r3, #4
 800791a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800791e:	693a      	ldr	r2, [r7, #16]
 8007920:	4313      	orrs	r3, r2
 8007922:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	697a      	ldr	r2, [r7, #20]
 8007928:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	693a      	ldr	r2, [r7, #16]
 800792e:	621a      	str	r2, [r3, #32]
}
 8007930:	bf00      	nop
 8007932:	371c      	adds	r7, #28
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr

0800793c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800793c:	b480      	push	{r7}
 800793e:	b087      	sub	sp, #28
 8007940:	af00      	add	r7, sp, #0
 8007942:	60f8      	str	r0, [r7, #12]
 8007944:	60b9      	str	r1, [r7, #8]
 8007946:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	6a1b      	ldr	r3, [r3, #32]
 800794c:	f023 0210 	bic.w	r2, r3, #16
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	699b      	ldr	r3, [r3, #24]
 8007958:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	6a1b      	ldr	r3, [r3, #32]
 800795e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007966:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	031b      	lsls	r3, r3, #12
 800796c:	697a      	ldr	r2, [r7, #20]
 800796e:	4313      	orrs	r3, r2
 8007970:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007978:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	011b      	lsls	r3, r3, #4
 800797e:	693a      	ldr	r2, [r7, #16]
 8007980:	4313      	orrs	r3, r2
 8007982:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	697a      	ldr	r2, [r7, #20]
 8007988:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	693a      	ldr	r2, [r7, #16]
 800798e:	621a      	str	r2, [r3, #32]
}
 8007990:	bf00      	nop
 8007992:	371c      	adds	r7, #28
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr

0800799c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800799c:	b480      	push	{r7}
 800799e:	b087      	sub	sp, #28
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	60f8      	str	r0, [r7, #12]
 80079a4:	60b9      	str	r1, [r7, #8]
 80079a6:	607a      	str	r2, [r7, #4]
 80079a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	6a1b      	ldr	r3, [r3, #32]
 80079ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	69db      	ldr	r3, [r3, #28]
 80079ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6a1b      	ldr	r3, [r3, #32]
 80079c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	f023 0303 	bic.w	r3, r3, #3
 80079c8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80079ca:	697a      	ldr	r2, [r7, #20]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	4313      	orrs	r3, r2
 80079d0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80079d8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	011b      	lsls	r3, r3, #4
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	697a      	ldr	r2, [r7, #20]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80079ec:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	021b      	lsls	r3, r3, #8
 80079f2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80079f6:	693a      	ldr	r2, [r7, #16]
 80079f8:	4313      	orrs	r3, r2
 80079fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	697a      	ldr	r2, [r7, #20]
 8007a00:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	693a      	ldr	r2, [r7, #16]
 8007a06:	621a      	str	r2, [r3, #32]
}
 8007a08:	bf00      	nop
 8007a0a:	371c      	adds	r7, #28
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr

08007a14 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b087      	sub	sp, #28
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	60f8      	str	r0, [r7, #12]
 8007a1c:	60b9      	str	r1, [r7, #8]
 8007a1e:	607a      	str	r2, [r7, #4]
 8007a20:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	6a1b      	ldr	r3, [r3, #32]
 8007a26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	69db      	ldr	r3, [r3, #28]
 8007a32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	6a1b      	ldr	r3, [r3, #32]
 8007a38:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a40:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	021b      	lsls	r3, r3, #8
 8007a46:	697a      	ldr	r2, [r7, #20]
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a52:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	031b      	lsls	r3, r3, #12
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	697a      	ldr	r2, [r7, #20]
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007a66:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	031b      	lsls	r3, r3, #12
 8007a6c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007a70:	693a      	ldr	r2, [r7, #16]
 8007a72:	4313      	orrs	r3, r2
 8007a74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	697a      	ldr	r2, [r7, #20]
 8007a7a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	693a      	ldr	r2, [r7, #16]
 8007a80:	621a      	str	r2, [r3, #32]
}
 8007a82:	bf00      	nop
 8007a84:	371c      	adds	r7, #28
 8007a86:	46bd      	mov	sp, r7
 8007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8c:	4770      	bx	lr

08007a8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007a8e:	b480      	push	{r7}
 8007a90:	b085      	sub	sp, #20
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	6078      	str	r0, [r7, #4]
 8007a96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aa4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007aa6:	683a      	ldr	r2, [r7, #0]
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	f043 0307 	orr.w	r3, r3, #7
 8007ab0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	68fa      	ldr	r2, [r7, #12]
 8007ab6:	609a      	str	r2, [r3, #8]
}
 8007ab8:	bf00      	nop
 8007aba:	3714      	adds	r7, #20
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr

08007ac4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b087      	sub	sp, #28
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	60f8      	str	r0, [r7, #12]
 8007acc:	60b9      	str	r1, [r7, #8]
 8007ace:	607a      	str	r2, [r7, #4]
 8007ad0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ade:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	021a      	lsls	r2, r3, #8
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	431a      	orrs	r2, r3
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	4313      	orrs	r3, r2
 8007aec:	697a      	ldr	r2, [r7, #20]
 8007aee:	4313      	orrs	r3, r2
 8007af0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	697a      	ldr	r2, [r7, #20]
 8007af6:	609a      	str	r2, [r3, #8]
}
 8007af8:	bf00      	nop
 8007afa:	371c      	adds	r7, #28
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr

08007b04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b087      	sub	sp, #28
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	60f8      	str	r0, [r7, #12]
 8007b0c:	60b9      	str	r1, [r7, #8]
 8007b0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	f003 031f 	and.w	r3, r3, #31
 8007b16:	2201      	movs	r2, #1
 8007b18:	fa02 f303 	lsl.w	r3, r2, r3
 8007b1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6a1a      	ldr	r2, [r3, #32]
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	43db      	mvns	r3, r3
 8007b26:	401a      	ands	r2, r3
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	6a1a      	ldr	r2, [r3, #32]
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	f003 031f 	and.w	r3, r3, #31
 8007b36:	6879      	ldr	r1, [r7, #4]
 8007b38:	fa01 f303 	lsl.w	r3, r1, r3
 8007b3c:	431a      	orrs	r2, r3
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	621a      	str	r2, [r3, #32]
}
 8007b42:	bf00      	nop
 8007b44:	371c      	adds	r7, #28
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr
	...

08007b50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b085      	sub	sp, #20
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d101      	bne.n	8007b68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b64:	2302      	movs	r3, #2
 8007b66:	e05a      	b.n	8007c1e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2202      	movs	r2, #2
 8007b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	68fa      	ldr	r2, [r7, #12]
 8007b96:	4313      	orrs	r3, r2
 8007b98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	68fa      	ldr	r2, [r7, #12]
 8007ba0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a21      	ldr	r2, [pc, #132]	; (8007c2c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d022      	beq.n	8007bf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bb4:	d01d      	beq.n	8007bf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a1d      	ldr	r2, [pc, #116]	; (8007c30 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d018      	beq.n	8007bf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a1b      	ldr	r2, [pc, #108]	; (8007c34 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d013      	beq.n	8007bf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a1a      	ldr	r2, [pc, #104]	; (8007c38 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d00e      	beq.n	8007bf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a18      	ldr	r2, [pc, #96]	; (8007c3c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d009      	beq.n	8007bf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a17      	ldr	r2, [pc, #92]	; (8007c40 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d004      	beq.n	8007bf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a15      	ldr	r2, [pc, #84]	; (8007c44 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d10c      	bne.n	8007c0c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bf8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	68ba      	ldr	r2, [r7, #8]
 8007c00:	4313      	orrs	r3, r2
 8007c02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	68ba      	ldr	r2, [r7, #8]
 8007c0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2201      	movs	r2, #1
 8007c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2200      	movs	r2, #0
 8007c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c1c:	2300      	movs	r3, #0
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3714      	adds	r7, #20
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr
 8007c2a:	bf00      	nop
 8007c2c:	40010000 	.word	0x40010000
 8007c30:	40000400 	.word	0x40000400
 8007c34:	40000800 	.word	0x40000800
 8007c38:	40000c00 	.word	0x40000c00
 8007c3c:	40010400 	.word	0x40010400
 8007c40:	40014000 	.word	0x40014000
 8007c44:	40001800 	.word	0x40001800

08007c48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b083      	sub	sp, #12
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c50:	bf00      	nop
 8007c52:	370c      	adds	r7, #12
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr

08007c5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c64:	bf00      	nop
 8007c66:	370c      	adds	r7, #12
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr

08007c70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b082      	sub	sp, #8
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d101      	bne.n	8007c82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e03f      	b.n	8007d02 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d106      	bne.n	8007c9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2200      	movs	r2, #0
 8007c92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f7fc f84e 	bl	8003d38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2224      	movs	r2, #36	; 0x24
 8007ca0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	68da      	ldr	r2, [r3, #12]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007cb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f000 fcc9 	bl	800864c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	691a      	ldr	r2, [r3, #16]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007cc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	695a      	ldr	r2, [r3, #20]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007cd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	68da      	ldr	r2, [r3, #12]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007ce8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2200      	movs	r2, #0
 8007cee:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2220      	movs	r2, #32
 8007cf4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2220      	movs	r2, #32
 8007cfc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007d00:	2300      	movs	r3, #0
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3708      	adds	r7, #8
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}

08007d0a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d0a:	b580      	push	{r7, lr}
 8007d0c:	b088      	sub	sp, #32
 8007d0e:	af02      	add	r7, sp, #8
 8007d10:	60f8      	str	r0, [r7, #12]
 8007d12:	60b9      	str	r1, [r7, #8]
 8007d14:	603b      	str	r3, [r7, #0]
 8007d16:	4613      	mov	r3, r2
 8007d18:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	2b20      	cmp	r3, #32
 8007d28:	f040 8083 	bne.w	8007e32 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d002      	beq.n	8007d38 <HAL_UART_Transmit+0x2e>
 8007d32:	88fb      	ldrh	r3, [r7, #6]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d101      	bne.n	8007d3c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	e07b      	b.n	8007e34 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	d101      	bne.n	8007d4a <HAL_UART_Transmit+0x40>
 8007d46:	2302      	movs	r3, #2
 8007d48:	e074      	b.n	8007e34 <HAL_UART_Transmit+0x12a>
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2200      	movs	r2, #0
 8007d56:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2221      	movs	r2, #33	; 0x21
 8007d5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007d60:	f7fc faba 	bl	80042d8 <HAL_GetTick>
 8007d64:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	88fa      	ldrh	r2, [r7, #6]
 8007d6a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	88fa      	ldrh	r2, [r7, #6]
 8007d70:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2200      	movs	r2, #0
 8007d76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8007d7a:	e042      	b.n	8007e02 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	3b01      	subs	r3, #1
 8007d84:	b29a      	uxth	r2, r3
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d92:	d122      	bne.n	8007dda <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	9300      	str	r3, [sp, #0]
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	2180      	movs	r1, #128	; 0x80
 8007d9e:	68f8      	ldr	r0, [r7, #12]
 8007da0:	f000 fad2 	bl	8008348 <UART_WaitOnFlagUntilTimeout>
 8007da4:	4603      	mov	r3, r0
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d001      	beq.n	8007dae <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8007daa:	2303      	movs	r3, #3
 8007dac:	e042      	b.n	8007e34 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	881b      	ldrh	r3, [r3, #0]
 8007db6:	461a      	mov	r2, r3
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007dc0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	691b      	ldr	r3, [r3, #16]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d103      	bne.n	8007dd2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	3302      	adds	r3, #2
 8007dce:	60bb      	str	r3, [r7, #8]
 8007dd0:	e017      	b.n	8007e02 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	60bb      	str	r3, [r7, #8]
 8007dd8:	e013      	b.n	8007e02 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	9300      	str	r3, [sp, #0]
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	2200      	movs	r2, #0
 8007de2:	2180      	movs	r1, #128	; 0x80
 8007de4:	68f8      	ldr	r0, [r7, #12]
 8007de6:	f000 faaf 	bl	8008348 <UART_WaitOnFlagUntilTimeout>
 8007dea:	4603      	mov	r3, r0
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d001      	beq.n	8007df4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8007df0:	2303      	movs	r3, #3
 8007df2:	e01f      	b.n	8007e34 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	1c5a      	adds	r2, r3, #1
 8007df8:	60ba      	str	r2, [r7, #8]
 8007dfa:	781a      	ldrb	r2, [r3, #0]
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007e06:	b29b      	uxth	r3, r3
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d1b7      	bne.n	8007d7c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	9300      	str	r3, [sp, #0]
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	2200      	movs	r2, #0
 8007e14:	2140      	movs	r1, #64	; 0x40
 8007e16:	68f8      	ldr	r0, [r7, #12]
 8007e18:	f000 fa96 	bl	8008348 <UART_WaitOnFlagUntilTimeout>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d001      	beq.n	8007e26 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8007e22:	2303      	movs	r3, #3
 8007e24:	e006      	b.n	8007e34 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2220      	movs	r2, #32
 8007e2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	e000      	b.n	8007e34 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8007e32:	2302      	movs	r3, #2
  }
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3718      	adds	r7, #24
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b086      	sub	sp, #24
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	60f8      	str	r0, [r7, #12]
 8007e44:	60b9      	str	r1, [r7, #8]
 8007e46:	4613      	mov	r3, r2
 8007e48:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007e50:	b2db      	uxtb	r3, r3
 8007e52:	2b20      	cmp	r3, #32
 8007e54:	d166      	bne.n	8007f24 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d002      	beq.n	8007e62 <HAL_UART_Receive_DMA+0x26>
 8007e5c:	88fb      	ldrh	r3, [r7, #6]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d101      	bne.n	8007e66 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007e62:	2301      	movs	r3, #1
 8007e64:	e05f      	b.n	8007f26 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d101      	bne.n	8007e74 <HAL_UART_Receive_DMA+0x38>
 8007e70:	2302      	movs	r3, #2
 8007e72:	e058      	b.n	8007f26 <HAL_UART_Receive_DMA+0xea>
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2201      	movs	r2, #1
 8007e78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8007e7c:	68ba      	ldr	r2, [r7, #8]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	88fa      	ldrh	r2, [r7, #6]
 8007e86:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2222      	movs	r2, #34	; 0x22
 8007e92:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e9a:	4a25      	ldr	r2, [pc, #148]	; (8007f30 <HAL_UART_Receive_DMA+0xf4>)
 8007e9c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ea2:	4a24      	ldr	r2, [pc, #144]	; (8007f34 <HAL_UART_Receive_DMA+0xf8>)
 8007ea4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eaa:	4a23      	ldr	r2, [pc, #140]	; (8007f38 <HAL_UART_Receive_DMA+0xfc>)
 8007eac:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8007eb6:	f107 0308 	add.w	r3, r7, #8
 8007eba:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	3304      	adds	r3, #4
 8007ec6:	4619      	mov	r1, r3
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	88fb      	ldrh	r3, [r7, #6]
 8007ece:	f7fc fbf1 	bl	80046b4 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	613b      	str	r3, [r7, #16]
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	613b      	str	r3, [r7, #16]
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	613b      	str	r3, [r7, #16]
 8007ee6:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2200      	movs	r2, #0
 8007eec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	68da      	ldr	r2, [r3, #12]
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007efe:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	695a      	ldr	r2, [r3, #20]
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f042 0201 	orr.w	r2, r2, #1
 8007f0e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	695a      	ldr	r2, [r3, #20]
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f1e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8007f20:	2300      	movs	r3, #0
 8007f22:	e000      	b.n	8007f26 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007f24:	2302      	movs	r3, #2
  }
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3718      	adds	r7, #24
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
 8007f2e:	bf00      	nop
 8007f30:	08008231 	.word	0x08008231
 8007f34:	08008299 	.word	0x08008299
 8007f38:	080082b5 	.word	0x080082b5

08007f3c <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b084      	sub	sp, #16
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007f44:	2300      	movs	r3, #0
 8007f46:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	695b      	ldr	r3, [r3, #20]
 8007f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f52:	2b80      	cmp	r3, #128	; 0x80
 8007f54:	bf0c      	ite	eq
 8007f56:	2301      	moveq	r3, #1
 8007f58:	2300      	movne	r3, #0
 8007f5a:	b2db      	uxtb	r3, r3
 8007f5c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007f64:	b2db      	uxtb	r3, r3
 8007f66:	2b21      	cmp	r3, #33	; 0x21
 8007f68:	d116      	bne.n	8007f98 <HAL_UART_DMAStop+0x5c>
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d013      	beq.n	8007f98 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	695a      	ldr	r2, [r3, #20]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f7e:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d004      	beq.n	8007f92 <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f7fc fbe9 	bl	8004764 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 fa22 	bl	80083dc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	695b      	ldr	r3, [r3, #20]
 8007f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fa2:	2b40      	cmp	r3, #64	; 0x40
 8007fa4:	bf0c      	ite	eq
 8007fa6:	2301      	moveq	r3, #1
 8007fa8:	2300      	movne	r3, #0
 8007faa:	b2db      	uxtb	r3, r3
 8007fac:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007fb4:	b2db      	uxtb	r3, r3
 8007fb6:	2b22      	cmp	r3, #34	; 0x22
 8007fb8:	d116      	bne.n	8007fe8 <HAL_UART_DMAStop+0xac>
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d013      	beq.n	8007fe8 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	695a      	ldr	r2, [r3, #20]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fce:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d004      	beq.n	8007fe2 <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f7fc fbc1 	bl	8004764 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 fa10 	bl	8008408 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8007fe8:	2300      	movs	r3, #0
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3710      	adds	r7, #16
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
	...

08007ff4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b088      	sub	sp, #32
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	68db      	ldr	r3, [r3, #12]
 800800a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	695b      	ldr	r3, [r3, #20]
 8008012:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8008014:	2300      	movs	r3, #0
 8008016:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8008018:	2300      	movs	r3, #0
 800801a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800801c:	69fb      	ldr	r3, [r7, #28]
 800801e:	f003 030f 	and.w	r3, r3, #15
 8008022:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d10d      	bne.n	8008046 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800802a:	69fb      	ldr	r3, [r7, #28]
 800802c:	f003 0320 	and.w	r3, r3, #32
 8008030:	2b00      	cmp	r3, #0
 8008032:	d008      	beq.n	8008046 <HAL_UART_IRQHandler+0x52>
 8008034:	69bb      	ldr	r3, [r7, #24]
 8008036:	f003 0320 	and.w	r3, r3, #32
 800803a:	2b00      	cmp	r3, #0
 800803c:	d003      	beq.n	8008046 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 fa82 	bl	8008548 <UART_Receive_IT>
      return;
 8008044:	e0d1      	b.n	80081ea <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	2b00      	cmp	r3, #0
 800804a:	f000 80b0 	beq.w	80081ae <HAL_UART_IRQHandler+0x1ba>
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	f003 0301 	and.w	r3, r3, #1
 8008054:	2b00      	cmp	r3, #0
 8008056:	d105      	bne.n	8008064 <HAL_UART_IRQHandler+0x70>
 8008058:	69bb      	ldr	r3, [r7, #24]
 800805a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800805e:	2b00      	cmp	r3, #0
 8008060:	f000 80a5 	beq.w	80081ae <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008064:	69fb      	ldr	r3, [r7, #28]
 8008066:	f003 0301 	and.w	r3, r3, #1
 800806a:	2b00      	cmp	r3, #0
 800806c:	d00a      	beq.n	8008084 <HAL_UART_IRQHandler+0x90>
 800806e:	69bb      	ldr	r3, [r7, #24]
 8008070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008074:	2b00      	cmp	r3, #0
 8008076:	d005      	beq.n	8008084 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800807c:	f043 0201 	orr.w	r2, r3, #1
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008084:	69fb      	ldr	r3, [r7, #28]
 8008086:	f003 0304 	and.w	r3, r3, #4
 800808a:	2b00      	cmp	r3, #0
 800808c:	d00a      	beq.n	80080a4 <HAL_UART_IRQHandler+0xb0>
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	f003 0301 	and.w	r3, r3, #1
 8008094:	2b00      	cmp	r3, #0
 8008096:	d005      	beq.n	80080a4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800809c:	f043 0202 	orr.w	r2, r3, #2
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	f003 0302 	and.w	r3, r3, #2
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d00a      	beq.n	80080c4 <HAL_UART_IRQHandler+0xd0>
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	f003 0301 	and.w	r3, r3, #1
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d005      	beq.n	80080c4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080bc:	f043 0204 	orr.w	r2, r3, #4
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80080c4:	69fb      	ldr	r3, [r7, #28]
 80080c6:	f003 0308 	and.w	r3, r3, #8
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d00f      	beq.n	80080ee <HAL_UART_IRQHandler+0xfa>
 80080ce:	69bb      	ldr	r3, [r7, #24]
 80080d0:	f003 0320 	and.w	r3, r3, #32
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d104      	bne.n	80080e2 <HAL_UART_IRQHandler+0xee>
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	f003 0301 	and.w	r3, r3, #1
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d005      	beq.n	80080ee <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080e6:	f043 0208 	orr.w	r2, r3, #8
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d078      	beq.n	80081e8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80080f6:	69fb      	ldr	r3, [r7, #28]
 80080f8:	f003 0320 	and.w	r3, r3, #32
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d007      	beq.n	8008110 <HAL_UART_IRQHandler+0x11c>
 8008100:	69bb      	ldr	r3, [r7, #24]
 8008102:	f003 0320 	and.w	r3, r3, #32
 8008106:	2b00      	cmp	r3, #0
 8008108:	d002      	beq.n	8008110 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f000 fa1c 	bl	8008548 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	695b      	ldr	r3, [r3, #20]
 8008116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800811a:	2b40      	cmp	r3, #64	; 0x40
 800811c:	bf0c      	ite	eq
 800811e:	2301      	moveq	r3, #1
 8008120:	2300      	movne	r3, #0
 8008122:	b2db      	uxtb	r3, r3
 8008124:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800812a:	f003 0308 	and.w	r3, r3, #8
 800812e:	2b00      	cmp	r3, #0
 8008130:	d102      	bne.n	8008138 <HAL_UART_IRQHandler+0x144>
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d031      	beq.n	800819c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 f965 	bl	8008408 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	695b      	ldr	r3, [r3, #20]
 8008144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008148:	2b40      	cmp	r3, #64	; 0x40
 800814a:	d123      	bne.n	8008194 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	695a      	ldr	r2, [r3, #20]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800815a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008160:	2b00      	cmp	r3, #0
 8008162:	d013      	beq.n	800818c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008168:	4a21      	ldr	r2, [pc, #132]	; (80081f0 <HAL_UART_IRQHandler+0x1fc>)
 800816a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008170:	4618      	mov	r0, r3
 8008172:	f7fc fb67 	bl	8004844 <HAL_DMA_Abort_IT>
 8008176:	4603      	mov	r3, r0
 8008178:	2b00      	cmp	r3, #0
 800817a:	d016      	beq.n	80081aa <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008182:	687a      	ldr	r2, [r7, #4]
 8008184:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008186:	4610      	mov	r0, r2
 8008188:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800818a:	e00e      	b.n	80081aa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f000 f845 	bl	800821c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008192:	e00a      	b.n	80081aa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 f841 	bl	800821c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800819a:	e006      	b.n	80081aa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 f83d 	bl	800821c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2200      	movs	r2, #0
 80081a6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80081a8:	e01e      	b.n	80081e8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081aa:	bf00      	nop
    return;
 80081ac:	e01c      	b.n	80081e8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80081ae:	69fb      	ldr	r3, [r7, #28]
 80081b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d008      	beq.n	80081ca <HAL_UART_IRQHandler+0x1d6>
 80081b8:	69bb      	ldr	r3, [r7, #24]
 80081ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d003      	beq.n	80081ca <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 f952 	bl	800846c <UART_Transmit_IT>
    return;
 80081c8:	e00f      	b.n	80081ea <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80081ca:	69fb      	ldr	r3, [r7, #28]
 80081cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d00a      	beq.n	80081ea <HAL_UART_IRQHandler+0x1f6>
 80081d4:	69bb      	ldr	r3, [r7, #24]
 80081d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d005      	beq.n	80081ea <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 f99a 	bl	8008518 <UART_EndTransmit_IT>
    return;
 80081e4:	bf00      	nop
 80081e6:	e000      	b.n	80081ea <HAL_UART_IRQHandler+0x1f6>
    return;
 80081e8:	bf00      	nop
  }
}
 80081ea:	3720      	adds	r7, #32
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}
 80081f0:	08008445 	.word	0x08008445

080081f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b083      	sub	sp, #12
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80081fc:	bf00      	nop
 80081fe:	370c      	adds	r7, #12
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr

08008208 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008208:	b480      	push	{r7}
 800820a:	b083      	sub	sp, #12
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008210:	bf00      	nop
 8008212:	370c      	adds	r7, #12
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr

0800821c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800821c:	b480      	push	{r7}
 800821e:	b083      	sub	sp, #12
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008224:	bf00      	nop
 8008226:	370c      	adds	r7, #12
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr

08008230 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b084      	sub	sp, #16
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800823c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008248:	2b00      	cmp	r3, #0
 800824a:	d11e      	bne.n	800828a <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2200      	movs	r2, #0
 8008250:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	68da      	ldr	r2, [r3, #12]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008260:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	695a      	ldr	r2, [r3, #20]
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f022 0201 	bic.w	r2, r2, #1
 8008270:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	695a      	ldr	r2, [r3, #20]
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008280:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2220      	movs	r2, #32
 8008286:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800828a:	68f8      	ldr	r0, [r7, #12]
 800828c:	f7fb f9e8 	bl	8003660 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008290:	bf00      	nop
 8008292:	3710      	adds	r7, #16
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b084      	sub	sp, #16
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082a4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80082a6:	68f8      	ldr	r0, [r7, #12]
 80082a8:	f7ff ffae 	bl	8008208 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082ac:	bf00      	nop
 80082ae:	3710      	adds	r7, #16
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}

080082b4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b084      	sub	sp, #16
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80082bc:	2300      	movs	r3, #0
 80082be:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082c4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	695b      	ldr	r3, [r3, #20]
 80082cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082d0:	2b80      	cmp	r3, #128	; 0x80
 80082d2:	bf0c      	ite	eq
 80082d4:	2301      	moveq	r3, #1
 80082d6:	2300      	movne	r3, #0
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	2b21      	cmp	r3, #33	; 0x21
 80082e6:	d108      	bne.n	80082fa <UART_DMAError+0x46>
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d005      	beq.n	80082fa <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	2200      	movs	r2, #0
 80082f2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80082f4:	68b8      	ldr	r0, [r7, #8]
 80082f6:	f000 f871 	bl	80083dc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	695b      	ldr	r3, [r3, #20]
 8008300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008304:	2b40      	cmp	r3, #64	; 0x40
 8008306:	bf0c      	ite	eq
 8008308:	2301      	moveq	r3, #1
 800830a:	2300      	movne	r3, #0
 800830c:	b2db      	uxtb	r3, r3
 800830e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008316:	b2db      	uxtb	r3, r3
 8008318:	2b22      	cmp	r3, #34	; 0x22
 800831a:	d108      	bne.n	800832e <UART_DMAError+0x7a>
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d005      	beq.n	800832e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	2200      	movs	r2, #0
 8008326:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008328:	68b8      	ldr	r0, [r7, #8]
 800832a:	f000 f86d 	bl	8008408 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008332:	f043 0210 	orr.w	r2, r3, #16
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800833a:	68b8      	ldr	r0, [r7, #8]
 800833c:	f7ff ff6e 	bl	800821c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008340:	bf00      	nop
 8008342:	3710      	adds	r7, #16
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b084      	sub	sp, #16
 800834c:	af00      	add	r7, sp, #0
 800834e:	60f8      	str	r0, [r7, #12]
 8008350:	60b9      	str	r1, [r7, #8]
 8008352:	603b      	str	r3, [r7, #0]
 8008354:	4613      	mov	r3, r2
 8008356:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008358:	e02c      	b.n	80083b4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800835a:	69bb      	ldr	r3, [r7, #24]
 800835c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008360:	d028      	beq.n	80083b4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008362:	69bb      	ldr	r3, [r7, #24]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d007      	beq.n	8008378 <UART_WaitOnFlagUntilTimeout+0x30>
 8008368:	f7fb ffb6 	bl	80042d8 <HAL_GetTick>
 800836c:	4602      	mov	r2, r0
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	1ad3      	subs	r3, r2, r3
 8008372:	69ba      	ldr	r2, [r7, #24]
 8008374:	429a      	cmp	r2, r3
 8008376:	d21d      	bcs.n	80083b4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	68da      	ldr	r2, [r3, #12]
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008386:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	695a      	ldr	r2, [r3, #20]
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f022 0201 	bic.w	r2, r2, #1
 8008396:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2220      	movs	r2, #32
 800839c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2220      	movs	r2, #32
 80083a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	2200      	movs	r2, #0
 80083ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80083b0:	2303      	movs	r3, #3
 80083b2:	e00f      	b.n	80083d4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	4013      	ands	r3, r2
 80083be:	68ba      	ldr	r2, [r7, #8]
 80083c0:	429a      	cmp	r2, r3
 80083c2:	bf0c      	ite	eq
 80083c4:	2301      	moveq	r3, #1
 80083c6:	2300      	movne	r3, #0
 80083c8:	b2db      	uxtb	r3, r3
 80083ca:	461a      	mov	r2, r3
 80083cc:	79fb      	ldrb	r3, [r7, #7]
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d0c3      	beq.n	800835a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80083d2:	2300      	movs	r3, #0
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3710      	adds	r7, #16
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80083dc:	b480      	push	{r7}
 80083de:	b083      	sub	sp, #12
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	68da      	ldr	r2, [r3, #12]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80083f2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2220      	movs	r2, #32
 80083f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80083fc:	bf00      	nop
 80083fe:	370c      	adds	r7, #12
 8008400:	46bd      	mov	sp, r7
 8008402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008406:	4770      	bx	lr

08008408 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008408:	b480      	push	{r7}
 800840a:	b083      	sub	sp, #12
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	68da      	ldr	r2, [r3, #12]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800841e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	695a      	ldr	r2, [r3, #20]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f022 0201 	bic.w	r2, r2, #1
 800842e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2220      	movs	r2, #32
 8008434:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8008438:	bf00      	nop
 800843a:	370c      	adds	r7, #12
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr

08008444 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b084      	sub	sp, #16
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008450:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2200      	movs	r2, #0
 8008456:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2200      	movs	r2, #0
 800845c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800845e:	68f8      	ldr	r0, [r7, #12]
 8008460:	f7ff fedc 	bl	800821c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008464:	bf00      	nop
 8008466:	3710      	adds	r7, #16
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}

0800846c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800846c:	b480      	push	{r7}
 800846e:	b085      	sub	sp, #20
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800847a:	b2db      	uxtb	r3, r3
 800847c:	2b21      	cmp	r3, #33	; 0x21
 800847e:	d144      	bne.n	800850a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	689b      	ldr	r3, [r3, #8]
 8008484:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008488:	d11a      	bne.n	80084c0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6a1b      	ldr	r3, [r3, #32]
 800848e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	881b      	ldrh	r3, [r3, #0]
 8008494:	461a      	mov	r2, r3
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800849e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	691b      	ldr	r3, [r3, #16]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d105      	bne.n	80084b4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6a1b      	ldr	r3, [r3, #32]
 80084ac:	1c9a      	adds	r2, r3, #2
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	621a      	str	r2, [r3, #32]
 80084b2:	e00e      	b.n	80084d2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6a1b      	ldr	r3, [r3, #32]
 80084b8:	1c5a      	adds	r2, r3, #1
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	621a      	str	r2, [r3, #32]
 80084be:	e008      	b.n	80084d2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6a1b      	ldr	r3, [r3, #32]
 80084c4:	1c59      	adds	r1, r3, #1
 80084c6:	687a      	ldr	r2, [r7, #4]
 80084c8:	6211      	str	r1, [r2, #32]
 80084ca:	781a      	ldrb	r2, [r3, #0]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	3b01      	subs	r3, #1
 80084da:	b29b      	uxth	r3, r3
 80084dc:	687a      	ldr	r2, [r7, #4]
 80084de:	4619      	mov	r1, r3
 80084e0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d10f      	bne.n	8008506 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	68da      	ldr	r2, [r3, #12]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80084f4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	68da      	ldr	r2, [r3, #12]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008504:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008506:	2300      	movs	r3, #0
 8008508:	e000      	b.n	800850c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800850a:	2302      	movs	r3, #2
  }
}
 800850c:	4618      	mov	r0, r3
 800850e:	3714      	adds	r7, #20
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr

08008518 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b082      	sub	sp, #8
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	68da      	ldr	r2, [r3, #12]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800852e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2220      	movs	r2, #32
 8008534:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f7ff fe5b 	bl	80081f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800853e:	2300      	movs	r3, #0
}
 8008540:	4618      	mov	r0, r3
 8008542:	3708      	adds	r7, #8
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b084      	sub	sp, #16
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008556:	b2db      	uxtb	r3, r3
 8008558:	2b22      	cmp	r3, #34	; 0x22
 800855a:	d171      	bne.n	8008640 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	689b      	ldr	r3, [r3, #8]
 8008560:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008564:	d123      	bne.n	80085ae <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800856a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	691b      	ldr	r3, [r3, #16]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d10e      	bne.n	8008592 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	b29b      	uxth	r3, r3
 800857c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008580:	b29a      	uxth	r2, r3
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800858a:	1c9a      	adds	r2, r3, #2
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	629a      	str	r2, [r3, #40]	; 0x28
 8008590:	e029      	b.n	80085e6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	b29b      	uxth	r3, r3
 800859a:	b2db      	uxtb	r3, r3
 800859c:	b29a      	uxth	r2, r3
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085a6:	1c5a      	adds	r2, r3, #1
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	629a      	str	r2, [r3, #40]	; 0x28
 80085ac:	e01b      	b.n	80085e6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	691b      	ldr	r3, [r3, #16]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d10a      	bne.n	80085cc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	6858      	ldr	r0, [r3, #4]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085c0:	1c59      	adds	r1, r3, #1
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	6291      	str	r1, [r2, #40]	; 0x28
 80085c6:	b2c2      	uxtb	r2, r0
 80085c8:	701a      	strb	r2, [r3, #0]
 80085ca:	e00c      	b.n	80085e6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	b2da      	uxtb	r2, r3
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085d8:	1c58      	adds	r0, r3, #1
 80085da:	6879      	ldr	r1, [r7, #4]
 80085dc:	6288      	str	r0, [r1, #40]	; 0x28
 80085de:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80085e2:	b2d2      	uxtb	r2, r2
 80085e4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80085ea:	b29b      	uxth	r3, r3
 80085ec:	3b01      	subs	r3, #1
 80085ee:	b29b      	uxth	r3, r3
 80085f0:	687a      	ldr	r2, [r7, #4]
 80085f2:	4619      	mov	r1, r3
 80085f4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d120      	bne.n	800863c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	68da      	ldr	r2, [r3, #12]
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f022 0220 	bic.w	r2, r2, #32
 8008608:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	68da      	ldr	r2, [r3, #12]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008618:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	695a      	ldr	r2, [r3, #20]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f022 0201 	bic.w	r2, r2, #1
 8008628:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2220      	movs	r2, #32
 800862e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f7fb f814 	bl	8003660 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8008638:	2300      	movs	r3, #0
 800863a:	e002      	b.n	8008642 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800863c:	2300      	movs	r3, #0
 800863e:	e000      	b.n	8008642 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8008640:	2302      	movs	r3, #2
  }
}
 8008642:	4618      	mov	r0, r3
 8008644:	3710      	adds	r7, #16
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
	...

0800864c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800864c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008650:	b085      	sub	sp, #20
 8008652:	af00      	add	r7, sp, #0
 8008654:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	691b      	ldr	r3, [r3, #16]
 800865c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	68da      	ldr	r2, [r3, #12]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	430a      	orrs	r2, r1
 800866a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	689a      	ldr	r2, [r3, #8]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	691b      	ldr	r3, [r3, #16]
 8008674:	431a      	orrs	r2, r3
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	695b      	ldr	r3, [r3, #20]
 800867a:	431a      	orrs	r2, r3
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	69db      	ldr	r3, [r3, #28]
 8008680:	4313      	orrs	r3, r2
 8008682:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	68db      	ldr	r3, [r3, #12]
 800868a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800868e:	f023 030c 	bic.w	r3, r3, #12
 8008692:	687a      	ldr	r2, [r7, #4]
 8008694:	6812      	ldr	r2, [r2, #0]
 8008696:	68f9      	ldr	r1, [r7, #12]
 8008698:	430b      	orrs	r3, r1
 800869a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	695b      	ldr	r3, [r3, #20]
 80086a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	699a      	ldr	r2, [r3, #24]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	430a      	orrs	r2, r1
 80086b0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	69db      	ldr	r3, [r3, #28]
 80086b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086ba:	f040 818b 	bne.w	80089d4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4ac1      	ldr	r2, [pc, #772]	; (80089c8 <UART_SetConfig+0x37c>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d005      	beq.n	80086d4 <UART_SetConfig+0x88>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4abf      	ldr	r2, [pc, #764]	; (80089cc <UART_SetConfig+0x380>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	f040 80bd 	bne.w	800884e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80086d4:	f7fe f8d6 	bl	8006884 <HAL_RCC_GetPCLK2Freq>
 80086d8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	461d      	mov	r5, r3
 80086de:	f04f 0600 	mov.w	r6, #0
 80086e2:	46a8      	mov	r8, r5
 80086e4:	46b1      	mov	r9, r6
 80086e6:	eb18 0308 	adds.w	r3, r8, r8
 80086ea:	eb49 0409 	adc.w	r4, r9, r9
 80086ee:	4698      	mov	r8, r3
 80086f0:	46a1      	mov	r9, r4
 80086f2:	eb18 0805 	adds.w	r8, r8, r5
 80086f6:	eb49 0906 	adc.w	r9, r9, r6
 80086fa:	f04f 0100 	mov.w	r1, #0
 80086fe:	f04f 0200 	mov.w	r2, #0
 8008702:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008706:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800870a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800870e:	4688      	mov	r8, r1
 8008710:	4691      	mov	r9, r2
 8008712:	eb18 0005 	adds.w	r0, r8, r5
 8008716:	eb49 0106 	adc.w	r1, r9, r6
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	461d      	mov	r5, r3
 8008720:	f04f 0600 	mov.w	r6, #0
 8008724:	196b      	adds	r3, r5, r5
 8008726:	eb46 0406 	adc.w	r4, r6, r6
 800872a:	461a      	mov	r2, r3
 800872c:	4623      	mov	r3, r4
 800872e:	f7f8 fafb 	bl	8000d28 <__aeabi_uldivmod>
 8008732:	4603      	mov	r3, r0
 8008734:	460c      	mov	r4, r1
 8008736:	461a      	mov	r2, r3
 8008738:	4ba5      	ldr	r3, [pc, #660]	; (80089d0 <UART_SetConfig+0x384>)
 800873a:	fba3 2302 	umull	r2, r3, r3, r2
 800873e:	095b      	lsrs	r3, r3, #5
 8008740:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	461d      	mov	r5, r3
 8008748:	f04f 0600 	mov.w	r6, #0
 800874c:	46a9      	mov	r9, r5
 800874e:	46b2      	mov	sl, r6
 8008750:	eb19 0309 	adds.w	r3, r9, r9
 8008754:	eb4a 040a 	adc.w	r4, sl, sl
 8008758:	4699      	mov	r9, r3
 800875a:	46a2      	mov	sl, r4
 800875c:	eb19 0905 	adds.w	r9, r9, r5
 8008760:	eb4a 0a06 	adc.w	sl, sl, r6
 8008764:	f04f 0100 	mov.w	r1, #0
 8008768:	f04f 0200 	mov.w	r2, #0
 800876c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008770:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008774:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008778:	4689      	mov	r9, r1
 800877a:	4692      	mov	sl, r2
 800877c:	eb19 0005 	adds.w	r0, r9, r5
 8008780:	eb4a 0106 	adc.w	r1, sl, r6
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	461d      	mov	r5, r3
 800878a:	f04f 0600 	mov.w	r6, #0
 800878e:	196b      	adds	r3, r5, r5
 8008790:	eb46 0406 	adc.w	r4, r6, r6
 8008794:	461a      	mov	r2, r3
 8008796:	4623      	mov	r3, r4
 8008798:	f7f8 fac6 	bl	8000d28 <__aeabi_uldivmod>
 800879c:	4603      	mov	r3, r0
 800879e:	460c      	mov	r4, r1
 80087a0:	461a      	mov	r2, r3
 80087a2:	4b8b      	ldr	r3, [pc, #556]	; (80089d0 <UART_SetConfig+0x384>)
 80087a4:	fba3 1302 	umull	r1, r3, r3, r2
 80087a8:	095b      	lsrs	r3, r3, #5
 80087aa:	2164      	movs	r1, #100	; 0x64
 80087ac:	fb01 f303 	mul.w	r3, r1, r3
 80087b0:	1ad3      	subs	r3, r2, r3
 80087b2:	00db      	lsls	r3, r3, #3
 80087b4:	3332      	adds	r3, #50	; 0x32
 80087b6:	4a86      	ldr	r2, [pc, #536]	; (80089d0 <UART_SetConfig+0x384>)
 80087b8:	fba2 2303 	umull	r2, r3, r2, r3
 80087bc:	095b      	lsrs	r3, r3, #5
 80087be:	005b      	lsls	r3, r3, #1
 80087c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80087c4:	4498      	add	r8, r3
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	461d      	mov	r5, r3
 80087ca:	f04f 0600 	mov.w	r6, #0
 80087ce:	46a9      	mov	r9, r5
 80087d0:	46b2      	mov	sl, r6
 80087d2:	eb19 0309 	adds.w	r3, r9, r9
 80087d6:	eb4a 040a 	adc.w	r4, sl, sl
 80087da:	4699      	mov	r9, r3
 80087dc:	46a2      	mov	sl, r4
 80087de:	eb19 0905 	adds.w	r9, r9, r5
 80087e2:	eb4a 0a06 	adc.w	sl, sl, r6
 80087e6:	f04f 0100 	mov.w	r1, #0
 80087ea:	f04f 0200 	mov.w	r2, #0
 80087ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80087f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80087f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80087fa:	4689      	mov	r9, r1
 80087fc:	4692      	mov	sl, r2
 80087fe:	eb19 0005 	adds.w	r0, r9, r5
 8008802:	eb4a 0106 	adc.w	r1, sl, r6
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	685b      	ldr	r3, [r3, #4]
 800880a:	461d      	mov	r5, r3
 800880c:	f04f 0600 	mov.w	r6, #0
 8008810:	196b      	adds	r3, r5, r5
 8008812:	eb46 0406 	adc.w	r4, r6, r6
 8008816:	461a      	mov	r2, r3
 8008818:	4623      	mov	r3, r4
 800881a:	f7f8 fa85 	bl	8000d28 <__aeabi_uldivmod>
 800881e:	4603      	mov	r3, r0
 8008820:	460c      	mov	r4, r1
 8008822:	461a      	mov	r2, r3
 8008824:	4b6a      	ldr	r3, [pc, #424]	; (80089d0 <UART_SetConfig+0x384>)
 8008826:	fba3 1302 	umull	r1, r3, r3, r2
 800882a:	095b      	lsrs	r3, r3, #5
 800882c:	2164      	movs	r1, #100	; 0x64
 800882e:	fb01 f303 	mul.w	r3, r1, r3
 8008832:	1ad3      	subs	r3, r2, r3
 8008834:	00db      	lsls	r3, r3, #3
 8008836:	3332      	adds	r3, #50	; 0x32
 8008838:	4a65      	ldr	r2, [pc, #404]	; (80089d0 <UART_SetConfig+0x384>)
 800883a:	fba2 2303 	umull	r2, r3, r2, r3
 800883e:	095b      	lsrs	r3, r3, #5
 8008840:	f003 0207 	and.w	r2, r3, #7
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4442      	add	r2, r8
 800884a:	609a      	str	r2, [r3, #8]
 800884c:	e26f      	b.n	8008d2e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800884e:	f7fe f805 	bl	800685c <HAL_RCC_GetPCLK1Freq>
 8008852:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	461d      	mov	r5, r3
 8008858:	f04f 0600 	mov.w	r6, #0
 800885c:	46a8      	mov	r8, r5
 800885e:	46b1      	mov	r9, r6
 8008860:	eb18 0308 	adds.w	r3, r8, r8
 8008864:	eb49 0409 	adc.w	r4, r9, r9
 8008868:	4698      	mov	r8, r3
 800886a:	46a1      	mov	r9, r4
 800886c:	eb18 0805 	adds.w	r8, r8, r5
 8008870:	eb49 0906 	adc.w	r9, r9, r6
 8008874:	f04f 0100 	mov.w	r1, #0
 8008878:	f04f 0200 	mov.w	r2, #0
 800887c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008880:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008884:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008888:	4688      	mov	r8, r1
 800888a:	4691      	mov	r9, r2
 800888c:	eb18 0005 	adds.w	r0, r8, r5
 8008890:	eb49 0106 	adc.w	r1, r9, r6
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	461d      	mov	r5, r3
 800889a:	f04f 0600 	mov.w	r6, #0
 800889e:	196b      	adds	r3, r5, r5
 80088a0:	eb46 0406 	adc.w	r4, r6, r6
 80088a4:	461a      	mov	r2, r3
 80088a6:	4623      	mov	r3, r4
 80088a8:	f7f8 fa3e 	bl	8000d28 <__aeabi_uldivmod>
 80088ac:	4603      	mov	r3, r0
 80088ae:	460c      	mov	r4, r1
 80088b0:	461a      	mov	r2, r3
 80088b2:	4b47      	ldr	r3, [pc, #284]	; (80089d0 <UART_SetConfig+0x384>)
 80088b4:	fba3 2302 	umull	r2, r3, r3, r2
 80088b8:	095b      	lsrs	r3, r3, #5
 80088ba:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	461d      	mov	r5, r3
 80088c2:	f04f 0600 	mov.w	r6, #0
 80088c6:	46a9      	mov	r9, r5
 80088c8:	46b2      	mov	sl, r6
 80088ca:	eb19 0309 	adds.w	r3, r9, r9
 80088ce:	eb4a 040a 	adc.w	r4, sl, sl
 80088d2:	4699      	mov	r9, r3
 80088d4:	46a2      	mov	sl, r4
 80088d6:	eb19 0905 	adds.w	r9, r9, r5
 80088da:	eb4a 0a06 	adc.w	sl, sl, r6
 80088de:	f04f 0100 	mov.w	r1, #0
 80088e2:	f04f 0200 	mov.w	r2, #0
 80088e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80088ea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80088ee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80088f2:	4689      	mov	r9, r1
 80088f4:	4692      	mov	sl, r2
 80088f6:	eb19 0005 	adds.w	r0, r9, r5
 80088fa:	eb4a 0106 	adc.w	r1, sl, r6
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	461d      	mov	r5, r3
 8008904:	f04f 0600 	mov.w	r6, #0
 8008908:	196b      	adds	r3, r5, r5
 800890a:	eb46 0406 	adc.w	r4, r6, r6
 800890e:	461a      	mov	r2, r3
 8008910:	4623      	mov	r3, r4
 8008912:	f7f8 fa09 	bl	8000d28 <__aeabi_uldivmod>
 8008916:	4603      	mov	r3, r0
 8008918:	460c      	mov	r4, r1
 800891a:	461a      	mov	r2, r3
 800891c:	4b2c      	ldr	r3, [pc, #176]	; (80089d0 <UART_SetConfig+0x384>)
 800891e:	fba3 1302 	umull	r1, r3, r3, r2
 8008922:	095b      	lsrs	r3, r3, #5
 8008924:	2164      	movs	r1, #100	; 0x64
 8008926:	fb01 f303 	mul.w	r3, r1, r3
 800892a:	1ad3      	subs	r3, r2, r3
 800892c:	00db      	lsls	r3, r3, #3
 800892e:	3332      	adds	r3, #50	; 0x32
 8008930:	4a27      	ldr	r2, [pc, #156]	; (80089d0 <UART_SetConfig+0x384>)
 8008932:	fba2 2303 	umull	r2, r3, r2, r3
 8008936:	095b      	lsrs	r3, r3, #5
 8008938:	005b      	lsls	r3, r3, #1
 800893a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800893e:	4498      	add	r8, r3
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	461d      	mov	r5, r3
 8008944:	f04f 0600 	mov.w	r6, #0
 8008948:	46a9      	mov	r9, r5
 800894a:	46b2      	mov	sl, r6
 800894c:	eb19 0309 	adds.w	r3, r9, r9
 8008950:	eb4a 040a 	adc.w	r4, sl, sl
 8008954:	4699      	mov	r9, r3
 8008956:	46a2      	mov	sl, r4
 8008958:	eb19 0905 	adds.w	r9, r9, r5
 800895c:	eb4a 0a06 	adc.w	sl, sl, r6
 8008960:	f04f 0100 	mov.w	r1, #0
 8008964:	f04f 0200 	mov.w	r2, #0
 8008968:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800896c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008970:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008974:	4689      	mov	r9, r1
 8008976:	4692      	mov	sl, r2
 8008978:	eb19 0005 	adds.w	r0, r9, r5
 800897c:	eb4a 0106 	adc.w	r1, sl, r6
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	685b      	ldr	r3, [r3, #4]
 8008984:	461d      	mov	r5, r3
 8008986:	f04f 0600 	mov.w	r6, #0
 800898a:	196b      	adds	r3, r5, r5
 800898c:	eb46 0406 	adc.w	r4, r6, r6
 8008990:	461a      	mov	r2, r3
 8008992:	4623      	mov	r3, r4
 8008994:	f7f8 f9c8 	bl	8000d28 <__aeabi_uldivmod>
 8008998:	4603      	mov	r3, r0
 800899a:	460c      	mov	r4, r1
 800899c:	461a      	mov	r2, r3
 800899e:	4b0c      	ldr	r3, [pc, #48]	; (80089d0 <UART_SetConfig+0x384>)
 80089a0:	fba3 1302 	umull	r1, r3, r3, r2
 80089a4:	095b      	lsrs	r3, r3, #5
 80089a6:	2164      	movs	r1, #100	; 0x64
 80089a8:	fb01 f303 	mul.w	r3, r1, r3
 80089ac:	1ad3      	subs	r3, r2, r3
 80089ae:	00db      	lsls	r3, r3, #3
 80089b0:	3332      	adds	r3, #50	; 0x32
 80089b2:	4a07      	ldr	r2, [pc, #28]	; (80089d0 <UART_SetConfig+0x384>)
 80089b4:	fba2 2303 	umull	r2, r3, r2, r3
 80089b8:	095b      	lsrs	r3, r3, #5
 80089ba:	f003 0207 	and.w	r2, r3, #7
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4442      	add	r2, r8
 80089c4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80089c6:	e1b2      	b.n	8008d2e <UART_SetConfig+0x6e2>
 80089c8:	40011000 	.word	0x40011000
 80089cc:	40011400 	.word	0x40011400
 80089d0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4ad7      	ldr	r2, [pc, #860]	; (8008d38 <UART_SetConfig+0x6ec>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d005      	beq.n	80089ea <UART_SetConfig+0x39e>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4ad6      	ldr	r2, [pc, #856]	; (8008d3c <UART_SetConfig+0x6f0>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	f040 80d1 	bne.w	8008b8c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80089ea:	f7fd ff4b 	bl	8006884 <HAL_RCC_GetPCLK2Freq>
 80089ee:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	469a      	mov	sl, r3
 80089f4:	f04f 0b00 	mov.w	fp, #0
 80089f8:	46d0      	mov	r8, sl
 80089fa:	46d9      	mov	r9, fp
 80089fc:	eb18 0308 	adds.w	r3, r8, r8
 8008a00:	eb49 0409 	adc.w	r4, r9, r9
 8008a04:	4698      	mov	r8, r3
 8008a06:	46a1      	mov	r9, r4
 8008a08:	eb18 080a 	adds.w	r8, r8, sl
 8008a0c:	eb49 090b 	adc.w	r9, r9, fp
 8008a10:	f04f 0100 	mov.w	r1, #0
 8008a14:	f04f 0200 	mov.w	r2, #0
 8008a18:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008a1c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008a20:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008a24:	4688      	mov	r8, r1
 8008a26:	4691      	mov	r9, r2
 8008a28:	eb1a 0508 	adds.w	r5, sl, r8
 8008a2c:	eb4b 0609 	adc.w	r6, fp, r9
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	4619      	mov	r1, r3
 8008a36:	f04f 0200 	mov.w	r2, #0
 8008a3a:	f04f 0300 	mov.w	r3, #0
 8008a3e:	f04f 0400 	mov.w	r4, #0
 8008a42:	0094      	lsls	r4, r2, #2
 8008a44:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008a48:	008b      	lsls	r3, r1, #2
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	4623      	mov	r3, r4
 8008a4e:	4628      	mov	r0, r5
 8008a50:	4631      	mov	r1, r6
 8008a52:	f7f8 f969 	bl	8000d28 <__aeabi_uldivmod>
 8008a56:	4603      	mov	r3, r0
 8008a58:	460c      	mov	r4, r1
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	4bb8      	ldr	r3, [pc, #736]	; (8008d40 <UART_SetConfig+0x6f4>)
 8008a5e:	fba3 2302 	umull	r2, r3, r3, r2
 8008a62:	095b      	lsrs	r3, r3, #5
 8008a64:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	469b      	mov	fp, r3
 8008a6c:	f04f 0c00 	mov.w	ip, #0
 8008a70:	46d9      	mov	r9, fp
 8008a72:	46e2      	mov	sl, ip
 8008a74:	eb19 0309 	adds.w	r3, r9, r9
 8008a78:	eb4a 040a 	adc.w	r4, sl, sl
 8008a7c:	4699      	mov	r9, r3
 8008a7e:	46a2      	mov	sl, r4
 8008a80:	eb19 090b 	adds.w	r9, r9, fp
 8008a84:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008a88:	f04f 0100 	mov.w	r1, #0
 8008a8c:	f04f 0200 	mov.w	r2, #0
 8008a90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008a94:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008a98:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008a9c:	4689      	mov	r9, r1
 8008a9e:	4692      	mov	sl, r2
 8008aa0:	eb1b 0509 	adds.w	r5, fp, r9
 8008aa4:	eb4c 060a 	adc.w	r6, ip, sl
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	4619      	mov	r1, r3
 8008aae:	f04f 0200 	mov.w	r2, #0
 8008ab2:	f04f 0300 	mov.w	r3, #0
 8008ab6:	f04f 0400 	mov.w	r4, #0
 8008aba:	0094      	lsls	r4, r2, #2
 8008abc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008ac0:	008b      	lsls	r3, r1, #2
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	4623      	mov	r3, r4
 8008ac6:	4628      	mov	r0, r5
 8008ac8:	4631      	mov	r1, r6
 8008aca:	f7f8 f92d 	bl	8000d28 <__aeabi_uldivmod>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	460c      	mov	r4, r1
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	4b9a      	ldr	r3, [pc, #616]	; (8008d40 <UART_SetConfig+0x6f4>)
 8008ad6:	fba3 1302 	umull	r1, r3, r3, r2
 8008ada:	095b      	lsrs	r3, r3, #5
 8008adc:	2164      	movs	r1, #100	; 0x64
 8008ade:	fb01 f303 	mul.w	r3, r1, r3
 8008ae2:	1ad3      	subs	r3, r2, r3
 8008ae4:	011b      	lsls	r3, r3, #4
 8008ae6:	3332      	adds	r3, #50	; 0x32
 8008ae8:	4a95      	ldr	r2, [pc, #596]	; (8008d40 <UART_SetConfig+0x6f4>)
 8008aea:	fba2 2303 	umull	r2, r3, r2, r3
 8008aee:	095b      	lsrs	r3, r3, #5
 8008af0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008af4:	4498      	add	r8, r3
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	469b      	mov	fp, r3
 8008afa:	f04f 0c00 	mov.w	ip, #0
 8008afe:	46d9      	mov	r9, fp
 8008b00:	46e2      	mov	sl, ip
 8008b02:	eb19 0309 	adds.w	r3, r9, r9
 8008b06:	eb4a 040a 	adc.w	r4, sl, sl
 8008b0a:	4699      	mov	r9, r3
 8008b0c:	46a2      	mov	sl, r4
 8008b0e:	eb19 090b 	adds.w	r9, r9, fp
 8008b12:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008b16:	f04f 0100 	mov.w	r1, #0
 8008b1a:	f04f 0200 	mov.w	r2, #0
 8008b1e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008b22:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008b26:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008b2a:	4689      	mov	r9, r1
 8008b2c:	4692      	mov	sl, r2
 8008b2e:	eb1b 0509 	adds.w	r5, fp, r9
 8008b32:	eb4c 060a 	adc.w	r6, ip, sl
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	4619      	mov	r1, r3
 8008b3c:	f04f 0200 	mov.w	r2, #0
 8008b40:	f04f 0300 	mov.w	r3, #0
 8008b44:	f04f 0400 	mov.w	r4, #0
 8008b48:	0094      	lsls	r4, r2, #2
 8008b4a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008b4e:	008b      	lsls	r3, r1, #2
 8008b50:	461a      	mov	r2, r3
 8008b52:	4623      	mov	r3, r4
 8008b54:	4628      	mov	r0, r5
 8008b56:	4631      	mov	r1, r6
 8008b58:	f7f8 f8e6 	bl	8000d28 <__aeabi_uldivmod>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	460c      	mov	r4, r1
 8008b60:	461a      	mov	r2, r3
 8008b62:	4b77      	ldr	r3, [pc, #476]	; (8008d40 <UART_SetConfig+0x6f4>)
 8008b64:	fba3 1302 	umull	r1, r3, r3, r2
 8008b68:	095b      	lsrs	r3, r3, #5
 8008b6a:	2164      	movs	r1, #100	; 0x64
 8008b6c:	fb01 f303 	mul.w	r3, r1, r3
 8008b70:	1ad3      	subs	r3, r2, r3
 8008b72:	011b      	lsls	r3, r3, #4
 8008b74:	3332      	adds	r3, #50	; 0x32
 8008b76:	4a72      	ldr	r2, [pc, #456]	; (8008d40 <UART_SetConfig+0x6f4>)
 8008b78:	fba2 2303 	umull	r2, r3, r2, r3
 8008b7c:	095b      	lsrs	r3, r3, #5
 8008b7e:	f003 020f 	and.w	r2, r3, #15
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4442      	add	r2, r8
 8008b88:	609a      	str	r2, [r3, #8]
 8008b8a:	e0d0      	b.n	8008d2e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008b8c:	f7fd fe66 	bl	800685c <HAL_RCC_GetPCLK1Freq>
 8008b90:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	469a      	mov	sl, r3
 8008b96:	f04f 0b00 	mov.w	fp, #0
 8008b9a:	46d0      	mov	r8, sl
 8008b9c:	46d9      	mov	r9, fp
 8008b9e:	eb18 0308 	adds.w	r3, r8, r8
 8008ba2:	eb49 0409 	adc.w	r4, r9, r9
 8008ba6:	4698      	mov	r8, r3
 8008ba8:	46a1      	mov	r9, r4
 8008baa:	eb18 080a 	adds.w	r8, r8, sl
 8008bae:	eb49 090b 	adc.w	r9, r9, fp
 8008bb2:	f04f 0100 	mov.w	r1, #0
 8008bb6:	f04f 0200 	mov.w	r2, #0
 8008bba:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008bbe:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008bc2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008bc6:	4688      	mov	r8, r1
 8008bc8:	4691      	mov	r9, r2
 8008bca:	eb1a 0508 	adds.w	r5, sl, r8
 8008bce:	eb4b 0609 	adc.w	r6, fp, r9
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	4619      	mov	r1, r3
 8008bd8:	f04f 0200 	mov.w	r2, #0
 8008bdc:	f04f 0300 	mov.w	r3, #0
 8008be0:	f04f 0400 	mov.w	r4, #0
 8008be4:	0094      	lsls	r4, r2, #2
 8008be6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008bea:	008b      	lsls	r3, r1, #2
 8008bec:	461a      	mov	r2, r3
 8008bee:	4623      	mov	r3, r4
 8008bf0:	4628      	mov	r0, r5
 8008bf2:	4631      	mov	r1, r6
 8008bf4:	f7f8 f898 	bl	8000d28 <__aeabi_uldivmod>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	460c      	mov	r4, r1
 8008bfc:	461a      	mov	r2, r3
 8008bfe:	4b50      	ldr	r3, [pc, #320]	; (8008d40 <UART_SetConfig+0x6f4>)
 8008c00:	fba3 2302 	umull	r2, r3, r3, r2
 8008c04:	095b      	lsrs	r3, r3, #5
 8008c06:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	469b      	mov	fp, r3
 8008c0e:	f04f 0c00 	mov.w	ip, #0
 8008c12:	46d9      	mov	r9, fp
 8008c14:	46e2      	mov	sl, ip
 8008c16:	eb19 0309 	adds.w	r3, r9, r9
 8008c1a:	eb4a 040a 	adc.w	r4, sl, sl
 8008c1e:	4699      	mov	r9, r3
 8008c20:	46a2      	mov	sl, r4
 8008c22:	eb19 090b 	adds.w	r9, r9, fp
 8008c26:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008c2a:	f04f 0100 	mov.w	r1, #0
 8008c2e:	f04f 0200 	mov.w	r2, #0
 8008c32:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008c36:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008c3a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008c3e:	4689      	mov	r9, r1
 8008c40:	4692      	mov	sl, r2
 8008c42:	eb1b 0509 	adds.w	r5, fp, r9
 8008c46:	eb4c 060a 	adc.w	r6, ip, sl
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	4619      	mov	r1, r3
 8008c50:	f04f 0200 	mov.w	r2, #0
 8008c54:	f04f 0300 	mov.w	r3, #0
 8008c58:	f04f 0400 	mov.w	r4, #0
 8008c5c:	0094      	lsls	r4, r2, #2
 8008c5e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008c62:	008b      	lsls	r3, r1, #2
 8008c64:	461a      	mov	r2, r3
 8008c66:	4623      	mov	r3, r4
 8008c68:	4628      	mov	r0, r5
 8008c6a:	4631      	mov	r1, r6
 8008c6c:	f7f8 f85c 	bl	8000d28 <__aeabi_uldivmod>
 8008c70:	4603      	mov	r3, r0
 8008c72:	460c      	mov	r4, r1
 8008c74:	461a      	mov	r2, r3
 8008c76:	4b32      	ldr	r3, [pc, #200]	; (8008d40 <UART_SetConfig+0x6f4>)
 8008c78:	fba3 1302 	umull	r1, r3, r3, r2
 8008c7c:	095b      	lsrs	r3, r3, #5
 8008c7e:	2164      	movs	r1, #100	; 0x64
 8008c80:	fb01 f303 	mul.w	r3, r1, r3
 8008c84:	1ad3      	subs	r3, r2, r3
 8008c86:	011b      	lsls	r3, r3, #4
 8008c88:	3332      	adds	r3, #50	; 0x32
 8008c8a:	4a2d      	ldr	r2, [pc, #180]	; (8008d40 <UART_SetConfig+0x6f4>)
 8008c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8008c90:	095b      	lsrs	r3, r3, #5
 8008c92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008c96:	4498      	add	r8, r3
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	469b      	mov	fp, r3
 8008c9c:	f04f 0c00 	mov.w	ip, #0
 8008ca0:	46d9      	mov	r9, fp
 8008ca2:	46e2      	mov	sl, ip
 8008ca4:	eb19 0309 	adds.w	r3, r9, r9
 8008ca8:	eb4a 040a 	adc.w	r4, sl, sl
 8008cac:	4699      	mov	r9, r3
 8008cae:	46a2      	mov	sl, r4
 8008cb0:	eb19 090b 	adds.w	r9, r9, fp
 8008cb4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008cb8:	f04f 0100 	mov.w	r1, #0
 8008cbc:	f04f 0200 	mov.w	r2, #0
 8008cc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008cc4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008cc8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008ccc:	4689      	mov	r9, r1
 8008cce:	4692      	mov	sl, r2
 8008cd0:	eb1b 0509 	adds.w	r5, fp, r9
 8008cd4:	eb4c 060a 	adc.w	r6, ip, sl
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	4619      	mov	r1, r3
 8008cde:	f04f 0200 	mov.w	r2, #0
 8008ce2:	f04f 0300 	mov.w	r3, #0
 8008ce6:	f04f 0400 	mov.w	r4, #0
 8008cea:	0094      	lsls	r4, r2, #2
 8008cec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008cf0:	008b      	lsls	r3, r1, #2
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	4623      	mov	r3, r4
 8008cf6:	4628      	mov	r0, r5
 8008cf8:	4631      	mov	r1, r6
 8008cfa:	f7f8 f815 	bl	8000d28 <__aeabi_uldivmod>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	460c      	mov	r4, r1
 8008d02:	461a      	mov	r2, r3
 8008d04:	4b0e      	ldr	r3, [pc, #56]	; (8008d40 <UART_SetConfig+0x6f4>)
 8008d06:	fba3 1302 	umull	r1, r3, r3, r2
 8008d0a:	095b      	lsrs	r3, r3, #5
 8008d0c:	2164      	movs	r1, #100	; 0x64
 8008d0e:	fb01 f303 	mul.w	r3, r1, r3
 8008d12:	1ad3      	subs	r3, r2, r3
 8008d14:	011b      	lsls	r3, r3, #4
 8008d16:	3332      	adds	r3, #50	; 0x32
 8008d18:	4a09      	ldr	r2, [pc, #36]	; (8008d40 <UART_SetConfig+0x6f4>)
 8008d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8008d1e:	095b      	lsrs	r3, r3, #5
 8008d20:	f003 020f 	and.w	r2, r3, #15
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4442      	add	r2, r8
 8008d2a:	609a      	str	r2, [r3, #8]
}
 8008d2c:	e7ff      	b.n	8008d2e <UART_SetConfig+0x6e2>
 8008d2e:	bf00      	nop
 8008d30:	3714      	adds	r7, #20
 8008d32:	46bd      	mov	sp, r7
 8008d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d38:	40011000 	.word	0x40011000
 8008d3c:	40011400 	.word	0x40011400
 8008d40:	51eb851f 	.word	0x51eb851f

08008d44 <__errno>:
 8008d44:	4b01      	ldr	r3, [pc, #4]	; (8008d4c <__errno+0x8>)
 8008d46:	6818      	ldr	r0, [r3, #0]
 8008d48:	4770      	bx	lr
 8008d4a:	bf00      	nop
 8008d4c:	2000000c 	.word	0x2000000c

08008d50 <__libc_init_array>:
 8008d50:	b570      	push	{r4, r5, r6, lr}
 8008d52:	4e0d      	ldr	r6, [pc, #52]	; (8008d88 <__libc_init_array+0x38>)
 8008d54:	4c0d      	ldr	r4, [pc, #52]	; (8008d8c <__libc_init_array+0x3c>)
 8008d56:	1ba4      	subs	r4, r4, r6
 8008d58:	10a4      	asrs	r4, r4, #2
 8008d5a:	2500      	movs	r5, #0
 8008d5c:	42a5      	cmp	r5, r4
 8008d5e:	d109      	bne.n	8008d74 <__libc_init_array+0x24>
 8008d60:	4e0b      	ldr	r6, [pc, #44]	; (8008d90 <__libc_init_array+0x40>)
 8008d62:	4c0c      	ldr	r4, [pc, #48]	; (8008d94 <__libc_init_array+0x44>)
 8008d64:	f003 f8b2 	bl	800becc <_init>
 8008d68:	1ba4      	subs	r4, r4, r6
 8008d6a:	10a4      	asrs	r4, r4, #2
 8008d6c:	2500      	movs	r5, #0
 8008d6e:	42a5      	cmp	r5, r4
 8008d70:	d105      	bne.n	8008d7e <__libc_init_array+0x2e>
 8008d72:	bd70      	pop	{r4, r5, r6, pc}
 8008d74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008d78:	4798      	blx	r3
 8008d7a:	3501      	adds	r5, #1
 8008d7c:	e7ee      	b.n	8008d5c <__libc_init_array+0xc>
 8008d7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008d82:	4798      	blx	r3
 8008d84:	3501      	adds	r5, #1
 8008d86:	e7f2      	b.n	8008d6e <__libc_init_array+0x1e>
 8008d88:	0800c2b8 	.word	0x0800c2b8
 8008d8c:	0800c2b8 	.word	0x0800c2b8
 8008d90:	0800c2b8 	.word	0x0800c2b8
 8008d94:	0800c2bc 	.word	0x0800c2bc

08008d98 <memset>:
 8008d98:	4402      	add	r2, r0
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d100      	bne.n	8008da2 <memset+0xa>
 8008da0:	4770      	bx	lr
 8008da2:	f803 1b01 	strb.w	r1, [r3], #1
 8008da6:	e7f9      	b.n	8008d9c <memset+0x4>

08008da8 <__cvt>:
 8008da8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008dac:	ec55 4b10 	vmov	r4, r5, d0
 8008db0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8008db2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008db6:	2d00      	cmp	r5, #0
 8008db8:	460e      	mov	r6, r1
 8008dba:	4691      	mov	r9, r2
 8008dbc:	4619      	mov	r1, r3
 8008dbe:	bfb8      	it	lt
 8008dc0:	4622      	movlt	r2, r4
 8008dc2:	462b      	mov	r3, r5
 8008dc4:	f027 0720 	bic.w	r7, r7, #32
 8008dc8:	bfbb      	ittet	lt
 8008dca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008dce:	461d      	movlt	r5, r3
 8008dd0:	2300      	movge	r3, #0
 8008dd2:	232d      	movlt	r3, #45	; 0x2d
 8008dd4:	bfb8      	it	lt
 8008dd6:	4614      	movlt	r4, r2
 8008dd8:	2f46      	cmp	r7, #70	; 0x46
 8008dda:	700b      	strb	r3, [r1, #0]
 8008ddc:	d004      	beq.n	8008de8 <__cvt+0x40>
 8008dde:	2f45      	cmp	r7, #69	; 0x45
 8008de0:	d100      	bne.n	8008de4 <__cvt+0x3c>
 8008de2:	3601      	adds	r6, #1
 8008de4:	2102      	movs	r1, #2
 8008de6:	e000      	b.n	8008dea <__cvt+0x42>
 8008de8:	2103      	movs	r1, #3
 8008dea:	ab03      	add	r3, sp, #12
 8008dec:	9301      	str	r3, [sp, #4]
 8008dee:	ab02      	add	r3, sp, #8
 8008df0:	9300      	str	r3, [sp, #0]
 8008df2:	4632      	mov	r2, r6
 8008df4:	4653      	mov	r3, sl
 8008df6:	ec45 4b10 	vmov	d0, r4, r5
 8008dfa:	f000 fcdd 	bl	80097b8 <_dtoa_r>
 8008dfe:	2f47      	cmp	r7, #71	; 0x47
 8008e00:	4680      	mov	r8, r0
 8008e02:	d102      	bne.n	8008e0a <__cvt+0x62>
 8008e04:	f019 0f01 	tst.w	r9, #1
 8008e08:	d026      	beq.n	8008e58 <__cvt+0xb0>
 8008e0a:	2f46      	cmp	r7, #70	; 0x46
 8008e0c:	eb08 0906 	add.w	r9, r8, r6
 8008e10:	d111      	bne.n	8008e36 <__cvt+0x8e>
 8008e12:	f898 3000 	ldrb.w	r3, [r8]
 8008e16:	2b30      	cmp	r3, #48	; 0x30
 8008e18:	d10a      	bne.n	8008e30 <__cvt+0x88>
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	4620      	mov	r0, r4
 8008e20:	4629      	mov	r1, r5
 8008e22:	f7f7 fe51 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e26:	b918      	cbnz	r0, 8008e30 <__cvt+0x88>
 8008e28:	f1c6 0601 	rsb	r6, r6, #1
 8008e2c:	f8ca 6000 	str.w	r6, [sl]
 8008e30:	f8da 3000 	ldr.w	r3, [sl]
 8008e34:	4499      	add	r9, r3
 8008e36:	2200      	movs	r2, #0
 8008e38:	2300      	movs	r3, #0
 8008e3a:	4620      	mov	r0, r4
 8008e3c:	4629      	mov	r1, r5
 8008e3e:	f7f7 fe43 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e42:	b938      	cbnz	r0, 8008e54 <__cvt+0xac>
 8008e44:	2230      	movs	r2, #48	; 0x30
 8008e46:	9b03      	ldr	r3, [sp, #12]
 8008e48:	454b      	cmp	r3, r9
 8008e4a:	d205      	bcs.n	8008e58 <__cvt+0xb0>
 8008e4c:	1c59      	adds	r1, r3, #1
 8008e4e:	9103      	str	r1, [sp, #12]
 8008e50:	701a      	strb	r2, [r3, #0]
 8008e52:	e7f8      	b.n	8008e46 <__cvt+0x9e>
 8008e54:	f8cd 900c 	str.w	r9, [sp, #12]
 8008e58:	9b03      	ldr	r3, [sp, #12]
 8008e5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008e5c:	eba3 0308 	sub.w	r3, r3, r8
 8008e60:	4640      	mov	r0, r8
 8008e62:	6013      	str	r3, [r2, #0]
 8008e64:	b004      	add	sp, #16
 8008e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008e6a <__exponent>:
 8008e6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e6c:	2900      	cmp	r1, #0
 8008e6e:	4604      	mov	r4, r0
 8008e70:	bfba      	itte	lt
 8008e72:	4249      	neglt	r1, r1
 8008e74:	232d      	movlt	r3, #45	; 0x2d
 8008e76:	232b      	movge	r3, #43	; 0x2b
 8008e78:	2909      	cmp	r1, #9
 8008e7a:	f804 2b02 	strb.w	r2, [r4], #2
 8008e7e:	7043      	strb	r3, [r0, #1]
 8008e80:	dd20      	ble.n	8008ec4 <__exponent+0x5a>
 8008e82:	f10d 0307 	add.w	r3, sp, #7
 8008e86:	461f      	mov	r7, r3
 8008e88:	260a      	movs	r6, #10
 8008e8a:	fb91 f5f6 	sdiv	r5, r1, r6
 8008e8e:	fb06 1115 	mls	r1, r6, r5, r1
 8008e92:	3130      	adds	r1, #48	; 0x30
 8008e94:	2d09      	cmp	r5, #9
 8008e96:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008e9a:	f103 32ff 	add.w	r2, r3, #4294967295
 8008e9e:	4629      	mov	r1, r5
 8008ea0:	dc09      	bgt.n	8008eb6 <__exponent+0x4c>
 8008ea2:	3130      	adds	r1, #48	; 0x30
 8008ea4:	3b02      	subs	r3, #2
 8008ea6:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008eaa:	42bb      	cmp	r3, r7
 8008eac:	4622      	mov	r2, r4
 8008eae:	d304      	bcc.n	8008eba <__exponent+0x50>
 8008eb0:	1a10      	subs	r0, r2, r0
 8008eb2:	b003      	add	sp, #12
 8008eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008eb6:	4613      	mov	r3, r2
 8008eb8:	e7e7      	b.n	8008e8a <__exponent+0x20>
 8008eba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ebe:	f804 2b01 	strb.w	r2, [r4], #1
 8008ec2:	e7f2      	b.n	8008eaa <__exponent+0x40>
 8008ec4:	2330      	movs	r3, #48	; 0x30
 8008ec6:	4419      	add	r1, r3
 8008ec8:	7083      	strb	r3, [r0, #2]
 8008eca:	1d02      	adds	r2, r0, #4
 8008ecc:	70c1      	strb	r1, [r0, #3]
 8008ece:	e7ef      	b.n	8008eb0 <__exponent+0x46>

08008ed0 <_printf_float>:
 8008ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ed4:	b08d      	sub	sp, #52	; 0x34
 8008ed6:	460c      	mov	r4, r1
 8008ed8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8008edc:	4616      	mov	r6, r2
 8008ede:	461f      	mov	r7, r3
 8008ee0:	4605      	mov	r5, r0
 8008ee2:	f001 fa21 	bl	800a328 <_localeconv_r>
 8008ee6:	6803      	ldr	r3, [r0, #0]
 8008ee8:	9304      	str	r3, [sp, #16]
 8008eea:	4618      	mov	r0, r3
 8008eec:	f7f7 f9c0 	bl	8000270 <strlen>
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	930a      	str	r3, [sp, #40]	; 0x28
 8008ef4:	f8d8 3000 	ldr.w	r3, [r8]
 8008ef8:	9005      	str	r0, [sp, #20]
 8008efa:	3307      	adds	r3, #7
 8008efc:	f023 0307 	bic.w	r3, r3, #7
 8008f00:	f103 0208 	add.w	r2, r3, #8
 8008f04:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008f08:	f8d4 b000 	ldr.w	fp, [r4]
 8008f0c:	f8c8 2000 	str.w	r2, [r8]
 8008f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f14:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008f18:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008f1c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008f20:	9307      	str	r3, [sp, #28]
 8008f22:	f8cd 8018 	str.w	r8, [sp, #24]
 8008f26:	f04f 32ff 	mov.w	r2, #4294967295
 8008f2a:	4ba7      	ldr	r3, [pc, #668]	; (80091c8 <_printf_float+0x2f8>)
 8008f2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f30:	f7f7 fdfc 	bl	8000b2c <__aeabi_dcmpun>
 8008f34:	bb70      	cbnz	r0, 8008f94 <_printf_float+0xc4>
 8008f36:	f04f 32ff 	mov.w	r2, #4294967295
 8008f3a:	4ba3      	ldr	r3, [pc, #652]	; (80091c8 <_printf_float+0x2f8>)
 8008f3c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f40:	f7f7 fdd6 	bl	8000af0 <__aeabi_dcmple>
 8008f44:	bb30      	cbnz	r0, 8008f94 <_printf_float+0xc4>
 8008f46:	2200      	movs	r2, #0
 8008f48:	2300      	movs	r3, #0
 8008f4a:	4640      	mov	r0, r8
 8008f4c:	4649      	mov	r1, r9
 8008f4e:	f7f7 fdc5 	bl	8000adc <__aeabi_dcmplt>
 8008f52:	b110      	cbz	r0, 8008f5a <_printf_float+0x8a>
 8008f54:	232d      	movs	r3, #45	; 0x2d
 8008f56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f5a:	4a9c      	ldr	r2, [pc, #624]	; (80091cc <_printf_float+0x2fc>)
 8008f5c:	4b9c      	ldr	r3, [pc, #624]	; (80091d0 <_printf_float+0x300>)
 8008f5e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008f62:	bf8c      	ite	hi
 8008f64:	4690      	movhi	r8, r2
 8008f66:	4698      	movls	r8, r3
 8008f68:	2303      	movs	r3, #3
 8008f6a:	f02b 0204 	bic.w	r2, fp, #4
 8008f6e:	6123      	str	r3, [r4, #16]
 8008f70:	6022      	str	r2, [r4, #0]
 8008f72:	f04f 0900 	mov.w	r9, #0
 8008f76:	9700      	str	r7, [sp, #0]
 8008f78:	4633      	mov	r3, r6
 8008f7a:	aa0b      	add	r2, sp, #44	; 0x2c
 8008f7c:	4621      	mov	r1, r4
 8008f7e:	4628      	mov	r0, r5
 8008f80:	f000 f9e6 	bl	8009350 <_printf_common>
 8008f84:	3001      	adds	r0, #1
 8008f86:	f040 808d 	bne.w	80090a4 <_printf_float+0x1d4>
 8008f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8008f8e:	b00d      	add	sp, #52	; 0x34
 8008f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f94:	4642      	mov	r2, r8
 8008f96:	464b      	mov	r3, r9
 8008f98:	4640      	mov	r0, r8
 8008f9a:	4649      	mov	r1, r9
 8008f9c:	f7f7 fdc6 	bl	8000b2c <__aeabi_dcmpun>
 8008fa0:	b110      	cbz	r0, 8008fa8 <_printf_float+0xd8>
 8008fa2:	4a8c      	ldr	r2, [pc, #560]	; (80091d4 <_printf_float+0x304>)
 8008fa4:	4b8c      	ldr	r3, [pc, #560]	; (80091d8 <_printf_float+0x308>)
 8008fa6:	e7da      	b.n	8008f5e <_printf_float+0x8e>
 8008fa8:	6861      	ldr	r1, [r4, #4]
 8008faa:	1c4b      	adds	r3, r1, #1
 8008fac:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8008fb0:	a80a      	add	r0, sp, #40	; 0x28
 8008fb2:	d13e      	bne.n	8009032 <_printf_float+0x162>
 8008fb4:	2306      	movs	r3, #6
 8008fb6:	6063      	str	r3, [r4, #4]
 8008fb8:	2300      	movs	r3, #0
 8008fba:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008fbe:	ab09      	add	r3, sp, #36	; 0x24
 8008fc0:	9300      	str	r3, [sp, #0]
 8008fc2:	ec49 8b10 	vmov	d0, r8, r9
 8008fc6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008fca:	6022      	str	r2, [r4, #0]
 8008fcc:	f8cd a004 	str.w	sl, [sp, #4]
 8008fd0:	6861      	ldr	r1, [r4, #4]
 8008fd2:	4628      	mov	r0, r5
 8008fd4:	f7ff fee8 	bl	8008da8 <__cvt>
 8008fd8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8008fdc:	2b47      	cmp	r3, #71	; 0x47
 8008fde:	4680      	mov	r8, r0
 8008fe0:	d109      	bne.n	8008ff6 <_printf_float+0x126>
 8008fe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fe4:	1cd8      	adds	r0, r3, #3
 8008fe6:	db02      	blt.n	8008fee <_printf_float+0x11e>
 8008fe8:	6862      	ldr	r2, [r4, #4]
 8008fea:	4293      	cmp	r3, r2
 8008fec:	dd47      	ble.n	800907e <_printf_float+0x1ae>
 8008fee:	f1aa 0a02 	sub.w	sl, sl, #2
 8008ff2:	fa5f fa8a 	uxtb.w	sl, sl
 8008ff6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008ffa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ffc:	d824      	bhi.n	8009048 <_printf_float+0x178>
 8008ffe:	3901      	subs	r1, #1
 8009000:	4652      	mov	r2, sl
 8009002:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009006:	9109      	str	r1, [sp, #36]	; 0x24
 8009008:	f7ff ff2f 	bl	8008e6a <__exponent>
 800900c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800900e:	1813      	adds	r3, r2, r0
 8009010:	2a01      	cmp	r2, #1
 8009012:	4681      	mov	r9, r0
 8009014:	6123      	str	r3, [r4, #16]
 8009016:	dc02      	bgt.n	800901e <_printf_float+0x14e>
 8009018:	6822      	ldr	r2, [r4, #0]
 800901a:	07d1      	lsls	r1, r2, #31
 800901c:	d501      	bpl.n	8009022 <_printf_float+0x152>
 800901e:	3301      	adds	r3, #1
 8009020:	6123      	str	r3, [r4, #16]
 8009022:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009026:	2b00      	cmp	r3, #0
 8009028:	d0a5      	beq.n	8008f76 <_printf_float+0xa6>
 800902a:	232d      	movs	r3, #45	; 0x2d
 800902c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009030:	e7a1      	b.n	8008f76 <_printf_float+0xa6>
 8009032:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8009036:	f000 8177 	beq.w	8009328 <_printf_float+0x458>
 800903a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800903e:	d1bb      	bne.n	8008fb8 <_printf_float+0xe8>
 8009040:	2900      	cmp	r1, #0
 8009042:	d1b9      	bne.n	8008fb8 <_printf_float+0xe8>
 8009044:	2301      	movs	r3, #1
 8009046:	e7b6      	b.n	8008fb6 <_printf_float+0xe6>
 8009048:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800904c:	d119      	bne.n	8009082 <_printf_float+0x1b2>
 800904e:	2900      	cmp	r1, #0
 8009050:	6863      	ldr	r3, [r4, #4]
 8009052:	dd0c      	ble.n	800906e <_printf_float+0x19e>
 8009054:	6121      	str	r1, [r4, #16]
 8009056:	b913      	cbnz	r3, 800905e <_printf_float+0x18e>
 8009058:	6822      	ldr	r2, [r4, #0]
 800905a:	07d2      	lsls	r2, r2, #31
 800905c:	d502      	bpl.n	8009064 <_printf_float+0x194>
 800905e:	3301      	adds	r3, #1
 8009060:	440b      	add	r3, r1
 8009062:	6123      	str	r3, [r4, #16]
 8009064:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009066:	65a3      	str	r3, [r4, #88]	; 0x58
 8009068:	f04f 0900 	mov.w	r9, #0
 800906c:	e7d9      	b.n	8009022 <_printf_float+0x152>
 800906e:	b913      	cbnz	r3, 8009076 <_printf_float+0x1a6>
 8009070:	6822      	ldr	r2, [r4, #0]
 8009072:	07d0      	lsls	r0, r2, #31
 8009074:	d501      	bpl.n	800907a <_printf_float+0x1aa>
 8009076:	3302      	adds	r3, #2
 8009078:	e7f3      	b.n	8009062 <_printf_float+0x192>
 800907a:	2301      	movs	r3, #1
 800907c:	e7f1      	b.n	8009062 <_printf_float+0x192>
 800907e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8009082:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009086:	4293      	cmp	r3, r2
 8009088:	db05      	blt.n	8009096 <_printf_float+0x1c6>
 800908a:	6822      	ldr	r2, [r4, #0]
 800908c:	6123      	str	r3, [r4, #16]
 800908e:	07d1      	lsls	r1, r2, #31
 8009090:	d5e8      	bpl.n	8009064 <_printf_float+0x194>
 8009092:	3301      	adds	r3, #1
 8009094:	e7e5      	b.n	8009062 <_printf_float+0x192>
 8009096:	2b00      	cmp	r3, #0
 8009098:	bfd4      	ite	le
 800909a:	f1c3 0302 	rsble	r3, r3, #2
 800909e:	2301      	movgt	r3, #1
 80090a0:	4413      	add	r3, r2
 80090a2:	e7de      	b.n	8009062 <_printf_float+0x192>
 80090a4:	6823      	ldr	r3, [r4, #0]
 80090a6:	055a      	lsls	r2, r3, #21
 80090a8:	d407      	bmi.n	80090ba <_printf_float+0x1ea>
 80090aa:	6923      	ldr	r3, [r4, #16]
 80090ac:	4642      	mov	r2, r8
 80090ae:	4631      	mov	r1, r6
 80090b0:	4628      	mov	r0, r5
 80090b2:	47b8      	blx	r7
 80090b4:	3001      	adds	r0, #1
 80090b6:	d12b      	bne.n	8009110 <_printf_float+0x240>
 80090b8:	e767      	b.n	8008f8a <_printf_float+0xba>
 80090ba:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80090be:	f240 80dc 	bls.w	800927a <_printf_float+0x3aa>
 80090c2:	2200      	movs	r2, #0
 80090c4:	2300      	movs	r3, #0
 80090c6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80090ca:	f7f7 fcfd 	bl	8000ac8 <__aeabi_dcmpeq>
 80090ce:	2800      	cmp	r0, #0
 80090d0:	d033      	beq.n	800913a <_printf_float+0x26a>
 80090d2:	2301      	movs	r3, #1
 80090d4:	4a41      	ldr	r2, [pc, #260]	; (80091dc <_printf_float+0x30c>)
 80090d6:	4631      	mov	r1, r6
 80090d8:	4628      	mov	r0, r5
 80090da:	47b8      	blx	r7
 80090dc:	3001      	adds	r0, #1
 80090de:	f43f af54 	beq.w	8008f8a <_printf_float+0xba>
 80090e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80090e6:	429a      	cmp	r2, r3
 80090e8:	db02      	blt.n	80090f0 <_printf_float+0x220>
 80090ea:	6823      	ldr	r3, [r4, #0]
 80090ec:	07d8      	lsls	r0, r3, #31
 80090ee:	d50f      	bpl.n	8009110 <_printf_float+0x240>
 80090f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80090f4:	4631      	mov	r1, r6
 80090f6:	4628      	mov	r0, r5
 80090f8:	47b8      	blx	r7
 80090fa:	3001      	adds	r0, #1
 80090fc:	f43f af45 	beq.w	8008f8a <_printf_float+0xba>
 8009100:	f04f 0800 	mov.w	r8, #0
 8009104:	f104 091a 	add.w	r9, r4, #26
 8009108:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800910a:	3b01      	subs	r3, #1
 800910c:	4543      	cmp	r3, r8
 800910e:	dc09      	bgt.n	8009124 <_printf_float+0x254>
 8009110:	6823      	ldr	r3, [r4, #0]
 8009112:	079b      	lsls	r3, r3, #30
 8009114:	f100 8103 	bmi.w	800931e <_printf_float+0x44e>
 8009118:	68e0      	ldr	r0, [r4, #12]
 800911a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800911c:	4298      	cmp	r0, r3
 800911e:	bfb8      	it	lt
 8009120:	4618      	movlt	r0, r3
 8009122:	e734      	b.n	8008f8e <_printf_float+0xbe>
 8009124:	2301      	movs	r3, #1
 8009126:	464a      	mov	r2, r9
 8009128:	4631      	mov	r1, r6
 800912a:	4628      	mov	r0, r5
 800912c:	47b8      	blx	r7
 800912e:	3001      	adds	r0, #1
 8009130:	f43f af2b 	beq.w	8008f8a <_printf_float+0xba>
 8009134:	f108 0801 	add.w	r8, r8, #1
 8009138:	e7e6      	b.n	8009108 <_printf_float+0x238>
 800913a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800913c:	2b00      	cmp	r3, #0
 800913e:	dc2b      	bgt.n	8009198 <_printf_float+0x2c8>
 8009140:	2301      	movs	r3, #1
 8009142:	4a26      	ldr	r2, [pc, #152]	; (80091dc <_printf_float+0x30c>)
 8009144:	4631      	mov	r1, r6
 8009146:	4628      	mov	r0, r5
 8009148:	47b8      	blx	r7
 800914a:	3001      	adds	r0, #1
 800914c:	f43f af1d 	beq.w	8008f8a <_printf_float+0xba>
 8009150:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009152:	b923      	cbnz	r3, 800915e <_printf_float+0x28e>
 8009154:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009156:	b913      	cbnz	r3, 800915e <_printf_float+0x28e>
 8009158:	6823      	ldr	r3, [r4, #0]
 800915a:	07d9      	lsls	r1, r3, #31
 800915c:	d5d8      	bpl.n	8009110 <_printf_float+0x240>
 800915e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009162:	4631      	mov	r1, r6
 8009164:	4628      	mov	r0, r5
 8009166:	47b8      	blx	r7
 8009168:	3001      	adds	r0, #1
 800916a:	f43f af0e 	beq.w	8008f8a <_printf_float+0xba>
 800916e:	f04f 0900 	mov.w	r9, #0
 8009172:	f104 0a1a 	add.w	sl, r4, #26
 8009176:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009178:	425b      	negs	r3, r3
 800917a:	454b      	cmp	r3, r9
 800917c:	dc01      	bgt.n	8009182 <_printf_float+0x2b2>
 800917e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009180:	e794      	b.n	80090ac <_printf_float+0x1dc>
 8009182:	2301      	movs	r3, #1
 8009184:	4652      	mov	r2, sl
 8009186:	4631      	mov	r1, r6
 8009188:	4628      	mov	r0, r5
 800918a:	47b8      	blx	r7
 800918c:	3001      	adds	r0, #1
 800918e:	f43f aefc 	beq.w	8008f8a <_printf_float+0xba>
 8009192:	f109 0901 	add.w	r9, r9, #1
 8009196:	e7ee      	b.n	8009176 <_printf_float+0x2a6>
 8009198:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800919a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800919c:	429a      	cmp	r2, r3
 800919e:	bfa8      	it	ge
 80091a0:	461a      	movge	r2, r3
 80091a2:	2a00      	cmp	r2, #0
 80091a4:	4691      	mov	r9, r2
 80091a6:	dd07      	ble.n	80091b8 <_printf_float+0x2e8>
 80091a8:	4613      	mov	r3, r2
 80091aa:	4631      	mov	r1, r6
 80091ac:	4642      	mov	r2, r8
 80091ae:	4628      	mov	r0, r5
 80091b0:	47b8      	blx	r7
 80091b2:	3001      	adds	r0, #1
 80091b4:	f43f aee9 	beq.w	8008f8a <_printf_float+0xba>
 80091b8:	f104 031a 	add.w	r3, r4, #26
 80091bc:	f04f 0b00 	mov.w	fp, #0
 80091c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80091c4:	9306      	str	r3, [sp, #24]
 80091c6:	e015      	b.n	80091f4 <_printf_float+0x324>
 80091c8:	7fefffff 	.word	0x7fefffff
 80091cc:	0800c00c 	.word	0x0800c00c
 80091d0:	0800c008 	.word	0x0800c008
 80091d4:	0800c014 	.word	0x0800c014
 80091d8:	0800c010 	.word	0x0800c010
 80091dc:	0800c018 	.word	0x0800c018
 80091e0:	2301      	movs	r3, #1
 80091e2:	9a06      	ldr	r2, [sp, #24]
 80091e4:	4631      	mov	r1, r6
 80091e6:	4628      	mov	r0, r5
 80091e8:	47b8      	blx	r7
 80091ea:	3001      	adds	r0, #1
 80091ec:	f43f aecd 	beq.w	8008f8a <_printf_float+0xba>
 80091f0:	f10b 0b01 	add.w	fp, fp, #1
 80091f4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80091f8:	ebaa 0309 	sub.w	r3, sl, r9
 80091fc:	455b      	cmp	r3, fp
 80091fe:	dcef      	bgt.n	80091e0 <_printf_float+0x310>
 8009200:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009204:	429a      	cmp	r2, r3
 8009206:	44d0      	add	r8, sl
 8009208:	db15      	blt.n	8009236 <_printf_float+0x366>
 800920a:	6823      	ldr	r3, [r4, #0]
 800920c:	07da      	lsls	r2, r3, #31
 800920e:	d412      	bmi.n	8009236 <_printf_float+0x366>
 8009210:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009212:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009214:	eba3 020a 	sub.w	r2, r3, sl
 8009218:	eba3 0a01 	sub.w	sl, r3, r1
 800921c:	4592      	cmp	sl, r2
 800921e:	bfa8      	it	ge
 8009220:	4692      	movge	sl, r2
 8009222:	f1ba 0f00 	cmp.w	sl, #0
 8009226:	dc0e      	bgt.n	8009246 <_printf_float+0x376>
 8009228:	f04f 0800 	mov.w	r8, #0
 800922c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009230:	f104 091a 	add.w	r9, r4, #26
 8009234:	e019      	b.n	800926a <_printf_float+0x39a>
 8009236:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800923a:	4631      	mov	r1, r6
 800923c:	4628      	mov	r0, r5
 800923e:	47b8      	blx	r7
 8009240:	3001      	adds	r0, #1
 8009242:	d1e5      	bne.n	8009210 <_printf_float+0x340>
 8009244:	e6a1      	b.n	8008f8a <_printf_float+0xba>
 8009246:	4653      	mov	r3, sl
 8009248:	4642      	mov	r2, r8
 800924a:	4631      	mov	r1, r6
 800924c:	4628      	mov	r0, r5
 800924e:	47b8      	blx	r7
 8009250:	3001      	adds	r0, #1
 8009252:	d1e9      	bne.n	8009228 <_printf_float+0x358>
 8009254:	e699      	b.n	8008f8a <_printf_float+0xba>
 8009256:	2301      	movs	r3, #1
 8009258:	464a      	mov	r2, r9
 800925a:	4631      	mov	r1, r6
 800925c:	4628      	mov	r0, r5
 800925e:	47b8      	blx	r7
 8009260:	3001      	adds	r0, #1
 8009262:	f43f ae92 	beq.w	8008f8a <_printf_float+0xba>
 8009266:	f108 0801 	add.w	r8, r8, #1
 800926a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800926e:	1a9b      	subs	r3, r3, r2
 8009270:	eba3 030a 	sub.w	r3, r3, sl
 8009274:	4543      	cmp	r3, r8
 8009276:	dcee      	bgt.n	8009256 <_printf_float+0x386>
 8009278:	e74a      	b.n	8009110 <_printf_float+0x240>
 800927a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800927c:	2a01      	cmp	r2, #1
 800927e:	dc01      	bgt.n	8009284 <_printf_float+0x3b4>
 8009280:	07db      	lsls	r3, r3, #31
 8009282:	d53a      	bpl.n	80092fa <_printf_float+0x42a>
 8009284:	2301      	movs	r3, #1
 8009286:	4642      	mov	r2, r8
 8009288:	4631      	mov	r1, r6
 800928a:	4628      	mov	r0, r5
 800928c:	47b8      	blx	r7
 800928e:	3001      	adds	r0, #1
 8009290:	f43f ae7b 	beq.w	8008f8a <_printf_float+0xba>
 8009294:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009298:	4631      	mov	r1, r6
 800929a:	4628      	mov	r0, r5
 800929c:	47b8      	blx	r7
 800929e:	3001      	adds	r0, #1
 80092a0:	f108 0801 	add.w	r8, r8, #1
 80092a4:	f43f ae71 	beq.w	8008f8a <_printf_float+0xba>
 80092a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092aa:	2200      	movs	r2, #0
 80092ac:	f103 3aff 	add.w	sl, r3, #4294967295
 80092b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80092b4:	2300      	movs	r3, #0
 80092b6:	f7f7 fc07 	bl	8000ac8 <__aeabi_dcmpeq>
 80092ba:	b9c8      	cbnz	r0, 80092f0 <_printf_float+0x420>
 80092bc:	4653      	mov	r3, sl
 80092be:	4642      	mov	r2, r8
 80092c0:	4631      	mov	r1, r6
 80092c2:	4628      	mov	r0, r5
 80092c4:	47b8      	blx	r7
 80092c6:	3001      	adds	r0, #1
 80092c8:	d10e      	bne.n	80092e8 <_printf_float+0x418>
 80092ca:	e65e      	b.n	8008f8a <_printf_float+0xba>
 80092cc:	2301      	movs	r3, #1
 80092ce:	4652      	mov	r2, sl
 80092d0:	4631      	mov	r1, r6
 80092d2:	4628      	mov	r0, r5
 80092d4:	47b8      	blx	r7
 80092d6:	3001      	adds	r0, #1
 80092d8:	f43f ae57 	beq.w	8008f8a <_printf_float+0xba>
 80092dc:	f108 0801 	add.w	r8, r8, #1
 80092e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092e2:	3b01      	subs	r3, #1
 80092e4:	4543      	cmp	r3, r8
 80092e6:	dcf1      	bgt.n	80092cc <_printf_float+0x3fc>
 80092e8:	464b      	mov	r3, r9
 80092ea:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80092ee:	e6de      	b.n	80090ae <_printf_float+0x1de>
 80092f0:	f04f 0800 	mov.w	r8, #0
 80092f4:	f104 0a1a 	add.w	sl, r4, #26
 80092f8:	e7f2      	b.n	80092e0 <_printf_float+0x410>
 80092fa:	2301      	movs	r3, #1
 80092fc:	e7df      	b.n	80092be <_printf_float+0x3ee>
 80092fe:	2301      	movs	r3, #1
 8009300:	464a      	mov	r2, r9
 8009302:	4631      	mov	r1, r6
 8009304:	4628      	mov	r0, r5
 8009306:	47b8      	blx	r7
 8009308:	3001      	adds	r0, #1
 800930a:	f43f ae3e 	beq.w	8008f8a <_printf_float+0xba>
 800930e:	f108 0801 	add.w	r8, r8, #1
 8009312:	68e3      	ldr	r3, [r4, #12]
 8009314:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009316:	1a9b      	subs	r3, r3, r2
 8009318:	4543      	cmp	r3, r8
 800931a:	dcf0      	bgt.n	80092fe <_printf_float+0x42e>
 800931c:	e6fc      	b.n	8009118 <_printf_float+0x248>
 800931e:	f04f 0800 	mov.w	r8, #0
 8009322:	f104 0919 	add.w	r9, r4, #25
 8009326:	e7f4      	b.n	8009312 <_printf_float+0x442>
 8009328:	2900      	cmp	r1, #0
 800932a:	f43f ae8b 	beq.w	8009044 <_printf_float+0x174>
 800932e:	2300      	movs	r3, #0
 8009330:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009334:	ab09      	add	r3, sp, #36	; 0x24
 8009336:	9300      	str	r3, [sp, #0]
 8009338:	ec49 8b10 	vmov	d0, r8, r9
 800933c:	6022      	str	r2, [r4, #0]
 800933e:	f8cd a004 	str.w	sl, [sp, #4]
 8009342:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009346:	4628      	mov	r0, r5
 8009348:	f7ff fd2e 	bl	8008da8 <__cvt>
 800934c:	4680      	mov	r8, r0
 800934e:	e648      	b.n	8008fe2 <_printf_float+0x112>

08009350 <_printf_common>:
 8009350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009354:	4691      	mov	r9, r2
 8009356:	461f      	mov	r7, r3
 8009358:	688a      	ldr	r2, [r1, #8]
 800935a:	690b      	ldr	r3, [r1, #16]
 800935c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009360:	4293      	cmp	r3, r2
 8009362:	bfb8      	it	lt
 8009364:	4613      	movlt	r3, r2
 8009366:	f8c9 3000 	str.w	r3, [r9]
 800936a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800936e:	4606      	mov	r6, r0
 8009370:	460c      	mov	r4, r1
 8009372:	b112      	cbz	r2, 800937a <_printf_common+0x2a>
 8009374:	3301      	adds	r3, #1
 8009376:	f8c9 3000 	str.w	r3, [r9]
 800937a:	6823      	ldr	r3, [r4, #0]
 800937c:	0699      	lsls	r1, r3, #26
 800937e:	bf42      	ittt	mi
 8009380:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009384:	3302      	addmi	r3, #2
 8009386:	f8c9 3000 	strmi.w	r3, [r9]
 800938a:	6825      	ldr	r5, [r4, #0]
 800938c:	f015 0506 	ands.w	r5, r5, #6
 8009390:	d107      	bne.n	80093a2 <_printf_common+0x52>
 8009392:	f104 0a19 	add.w	sl, r4, #25
 8009396:	68e3      	ldr	r3, [r4, #12]
 8009398:	f8d9 2000 	ldr.w	r2, [r9]
 800939c:	1a9b      	subs	r3, r3, r2
 800939e:	42ab      	cmp	r3, r5
 80093a0:	dc28      	bgt.n	80093f4 <_printf_common+0xa4>
 80093a2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80093a6:	6822      	ldr	r2, [r4, #0]
 80093a8:	3300      	adds	r3, #0
 80093aa:	bf18      	it	ne
 80093ac:	2301      	movne	r3, #1
 80093ae:	0692      	lsls	r2, r2, #26
 80093b0:	d42d      	bmi.n	800940e <_printf_common+0xbe>
 80093b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80093b6:	4639      	mov	r1, r7
 80093b8:	4630      	mov	r0, r6
 80093ba:	47c0      	blx	r8
 80093bc:	3001      	adds	r0, #1
 80093be:	d020      	beq.n	8009402 <_printf_common+0xb2>
 80093c0:	6823      	ldr	r3, [r4, #0]
 80093c2:	68e5      	ldr	r5, [r4, #12]
 80093c4:	f8d9 2000 	ldr.w	r2, [r9]
 80093c8:	f003 0306 	and.w	r3, r3, #6
 80093cc:	2b04      	cmp	r3, #4
 80093ce:	bf08      	it	eq
 80093d0:	1aad      	subeq	r5, r5, r2
 80093d2:	68a3      	ldr	r3, [r4, #8]
 80093d4:	6922      	ldr	r2, [r4, #16]
 80093d6:	bf0c      	ite	eq
 80093d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80093dc:	2500      	movne	r5, #0
 80093de:	4293      	cmp	r3, r2
 80093e0:	bfc4      	itt	gt
 80093e2:	1a9b      	subgt	r3, r3, r2
 80093e4:	18ed      	addgt	r5, r5, r3
 80093e6:	f04f 0900 	mov.w	r9, #0
 80093ea:	341a      	adds	r4, #26
 80093ec:	454d      	cmp	r5, r9
 80093ee:	d11a      	bne.n	8009426 <_printf_common+0xd6>
 80093f0:	2000      	movs	r0, #0
 80093f2:	e008      	b.n	8009406 <_printf_common+0xb6>
 80093f4:	2301      	movs	r3, #1
 80093f6:	4652      	mov	r2, sl
 80093f8:	4639      	mov	r1, r7
 80093fa:	4630      	mov	r0, r6
 80093fc:	47c0      	blx	r8
 80093fe:	3001      	adds	r0, #1
 8009400:	d103      	bne.n	800940a <_printf_common+0xba>
 8009402:	f04f 30ff 	mov.w	r0, #4294967295
 8009406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800940a:	3501      	adds	r5, #1
 800940c:	e7c3      	b.n	8009396 <_printf_common+0x46>
 800940e:	18e1      	adds	r1, r4, r3
 8009410:	1c5a      	adds	r2, r3, #1
 8009412:	2030      	movs	r0, #48	; 0x30
 8009414:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009418:	4422      	add	r2, r4
 800941a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800941e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009422:	3302      	adds	r3, #2
 8009424:	e7c5      	b.n	80093b2 <_printf_common+0x62>
 8009426:	2301      	movs	r3, #1
 8009428:	4622      	mov	r2, r4
 800942a:	4639      	mov	r1, r7
 800942c:	4630      	mov	r0, r6
 800942e:	47c0      	blx	r8
 8009430:	3001      	adds	r0, #1
 8009432:	d0e6      	beq.n	8009402 <_printf_common+0xb2>
 8009434:	f109 0901 	add.w	r9, r9, #1
 8009438:	e7d8      	b.n	80093ec <_printf_common+0x9c>
	...

0800943c <_printf_i>:
 800943c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009440:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009444:	460c      	mov	r4, r1
 8009446:	7e09      	ldrb	r1, [r1, #24]
 8009448:	b085      	sub	sp, #20
 800944a:	296e      	cmp	r1, #110	; 0x6e
 800944c:	4617      	mov	r7, r2
 800944e:	4606      	mov	r6, r0
 8009450:	4698      	mov	r8, r3
 8009452:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009454:	f000 80b3 	beq.w	80095be <_printf_i+0x182>
 8009458:	d822      	bhi.n	80094a0 <_printf_i+0x64>
 800945a:	2963      	cmp	r1, #99	; 0x63
 800945c:	d036      	beq.n	80094cc <_printf_i+0x90>
 800945e:	d80a      	bhi.n	8009476 <_printf_i+0x3a>
 8009460:	2900      	cmp	r1, #0
 8009462:	f000 80b9 	beq.w	80095d8 <_printf_i+0x19c>
 8009466:	2958      	cmp	r1, #88	; 0x58
 8009468:	f000 8083 	beq.w	8009572 <_printf_i+0x136>
 800946c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009470:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009474:	e032      	b.n	80094dc <_printf_i+0xa0>
 8009476:	2964      	cmp	r1, #100	; 0x64
 8009478:	d001      	beq.n	800947e <_printf_i+0x42>
 800947a:	2969      	cmp	r1, #105	; 0x69
 800947c:	d1f6      	bne.n	800946c <_printf_i+0x30>
 800947e:	6820      	ldr	r0, [r4, #0]
 8009480:	6813      	ldr	r3, [r2, #0]
 8009482:	0605      	lsls	r5, r0, #24
 8009484:	f103 0104 	add.w	r1, r3, #4
 8009488:	d52a      	bpl.n	80094e0 <_printf_i+0xa4>
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	6011      	str	r1, [r2, #0]
 800948e:	2b00      	cmp	r3, #0
 8009490:	da03      	bge.n	800949a <_printf_i+0x5e>
 8009492:	222d      	movs	r2, #45	; 0x2d
 8009494:	425b      	negs	r3, r3
 8009496:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800949a:	486f      	ldr	r0, [pc, #444]	; (8009658 <_printf_i+0x21c>)
 800949c:	220a      	movs	r2, #10
 800949e:	e039      	b.n	8009514 <_printf_i+0xd8>
 80094a0:	2973      	cmp	r1, #115	; 0x73
 80094a2:	f000 809d 	beq.w	80095e0 <_printf_i+0x1a4>
 80094a6:	d808      	bhi.n	80094ba <_printf_i+0x7e>
 80094a8:	296f      	cmp	r1, #111	; 0x6f
 80094aa:	d020      	beq.n	80094ee <_printf_i+0xb2>
 80094ac:	2970      	cmp	r1, #112	; 0x70
 80094ae:	d1dd      	bne.n	800946c <_printf_i+0x30>
 80094b0:	6823      	ldr	r3, [r4, #0]
 80094b2:	f043 0320 	orr.w	r3, r3, #32
 80094b6:	6023      	str	r3, [r4, #0]
 80094b8:	e003      	b.n	80094c2 <_printf_i+0x86>
 80094ba:	2975      	cmp	r1, #117	; 0x75
 80094bc:	d017      	beq.n	80094ee <_printf_i+0xb2>
 80094be:	2978      	cmp	r1, #120	; 0x78
 80094c0:	d1d4      	bne.n	800946c <_printf_i+0x30>
 80094c2:	2378      	movs	r3, #120	; 0x78
 80094c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80094c8:	4864      	ldr	r0, [pc, #400]	; (800965c <_printf_i+0x220>)
 80094ca:	e055      	b.n	8009578 <_printf_i+0x13c>
 80094cc:	6813      	ldr	r3, [r2, #0]
 80094ce:	1d19      	adds	r1, r3, #4
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	6011      	str	r1, [r2, #0]
 80094d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80094d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80094dc:	2301      	movs	r3, #1
 80094de:	e08c      	b.n	80095fa <_printf_i+0x1be>
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	6011      	str	r1, [r2, #0]
 80094e4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80094e8:	bf18      	it	ne
 80094ea:	b21b      	sxthne	r3, r3
 80094ec:	e7cf      	b.n	800948e <_printf_i+0x52>
 80094ee:	6813      	ldr	r3, [r2, #0]
 80094f0:	6825      	ldr	r5, [r4, #0]
 80094f2:	1d18      	adds	r0, r3, #4
 80094f4:	6010      	str	r0, [r2, #0]
 80094f6:	0628      	lsls	r0, r5, #24
 80094f8:	d501      	bpl.n	80094fe <_printf_i+0xc2>
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	e002      	b.n	8009504 <_printf_i+0xc8>
 80094fe:	0668      	lsls	r0, r5, #25
 8009500:	d5fb      	bpl.n	80094fa <_printf_i+0xbe>
 8009502:	881b      	ldrh	r3, [r3, #0]
 8009504:	4854      	ldr	r0, [pc, #336]	; (8009658 <_printf_i+0x21c>)
 8009506:	296f      	cmp	r1, #111	; 0x6f
 8009508:	bf14      	ite	ne
 800950a:	220a      	movne	r2, #10
 800950c:	2208      	moveq	r2, #8
 800950e:	2100      	movs	r1, #0
 8009510:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009514:	6865      	ldr	r5, [r4, #4]
 8009516:	60a5      	str	r5, [r4, #8]
 8009518:	2d00      	cmp	r5, #0
 800951a:	f2c0 8095 	blt.w	8009648 <_printf_i+0x20c>
 800951e:	6821      	ldr	r1, [r4, #0]
 8009520:	f021 0104 	bic.w	r1, r1, #4
 8009524:	6021      	str	r1, [r4, #0]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d13d      	bne.n	80095a6 <_printf_i+0x16a>
 800952a:	2d00      	cmp	r5, #0
 800952c:	f040 808e 	bne.w	800964c <_printf_i+0x210>
 8009530:	4665      	mov	r5, ip
 8009532:	2a08      	cmp	r2, #8
 8009534:	d10b      	bne.n	800954e <_printf_i+0x112>
 8009536:	6823      	ldr	r3, [r4, #0]
 8009538:	07db      	lsls	r3, r3, #31
 800953a:	d508      	bpl.n	800954e <_printf_i+0x112>
 800953c:	6923      	ldr	r3, [r4, #16]
 800953e:	6862      	ldr	r2, [r4, #4]
 8009540:	429a      	cmp	r2, r3
 8009542:	bfde      	ittt	le
 8009544:	2330      	movle	r3, #48	; 0x30
 8009546:	f805 3c01 	strble.w	r3, [r5, #-1]
 800954a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800954e:	ebac 0305 	sub.w	r3, ip, r5
 8009552:	6123      	str	r3, [r4, #16]
 8009554:	f8cd 8000 	str.w	r8, [sp]
 8009558:	463b      	mov	r3, r7
 800955a:	aa03      	add	r2, sp, #12
 800955c:	4621      	mov	r1, r4
 800955e:	4630      	mov	r0, r6
 8009560:	f7ff fef6 	bl	8009350 <_printf_common>
 8009564:	3001      	adds	r0, #1
 8009566:	d14d      	bne.n	8009604 <_printf_i+0x1c8>
 8009568:	f04f 30ff 	mov.w	r0, #4294967295
 800956c:	b005      	add	sp, #20
 800956e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009572:	4839      	ldr	r0, [pc, #228]	; (8009658 <_printf_i+0x21c>)
 8009574:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009578:	6813      	ldr	r3, [r2, #0]
 800957a:	6821      	ldr	r1, [r4, #0]
 800957c:	1d1d      	adds	r5, r3, #4
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	6015      	str	r5, [r2, #0]
 8009582:	060a      	lsls	r2, r1, #24
 8009584:	d50b      	bpl.n	800959e <_printf_i+0x162>
 8009586:	07ca      	lsls	r2, r1, #31
 8009588:	bf44      	itt	mi
 800958a:	f041 0120 	orrmi.w	r1, r1, #32
 800958e:	6021      	strmi	r1, [r4, #0]
 8009590:	b91b      	cbnz	r3, 800959a <_printf_i+0x15e>
 8009592:	6822      	ldr	r2, [r4, #0]
 8009594:	f022 0220 	bic.w	r2, r2, #32
 8009598:	6022      	str	r2, [r4, #0]
 800959a:	2210      	movs	r2, #16
 800959c:	e7b7      	b.n	800950e <_printf_i+0xd2>
 800959e:	064d      	lsls	r5, r1, #25
 80095a0:	bf48      	it	mi
 80095a2:	b29b      	uxthmi	r3, r3
 80095a4:	e7ef      	b.n	8009586 <_printf_i+0x14a>
 80095a6:	4665      	mov	r5, ip
 80095a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80095ac:	fb02 3311 	mls	r3, r2, r1, r3
 80095b0:	5cc3      	ldrb	r3, [r0, r3]
 80095b2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80095b6:	460b      	mov	r3, r1
 80095b8:	2900      	cmp	r1, #0
 80095ba:	d1f5      	bne.n	80095a8 <_printf_i+0x16c>
 80095bc:	e7b9      	b.n	8009532 <_printf_i+0xf6>
 80095be:	6813      	ldr	r3, [r2, #0]
 80095c0:	6825      	ldr	r5, [r4, #0]
 80095c2:	6961      	ldr	r1, [r4, #20]
 80095c4:	1d18      	adds	r0, r3, #4
 80095c6:	6010      	str	r0, [r2, #0]
 80095c8:	0628      	lsls	r0, r5, #24
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	d501      	bpl.n	80095d2 <_printf_i+0x196>
 80095ce:	6019      	str	r1, [r3, #0]
 80095d0:	e002      	b.n	80095d8 <_printf_i+0x19c>
 80095d2:	066a      	lsls	r2, r5, #25
 80095d4:	d5fb      	bpl.n	80095ce <_printf_i+0x192>
 80095d6:	8019      	strh	r1, [r3, #0]
 80095d8:	2300      	movs	r3, #0
 80095da:	6123      	str	r3, [r4, #16]
 80095dc:	4665      	mov	r5, ip
 80095de:	e7b9      	b.n	8009554 <_printf_i+0x118>
 80095e0:	6813      	ldr	r3, [r2, #0]
 80095e2:	1d19      	adds	r1, r3, #4
 80095e4:	6011      	str	r1, [r2, #0]
 80095e6:	681d      	ldr	r5, [r3, #0]
 80095e8:	6862      	ldr	r2, [r4, #4]
 80095ea:	2100      	movs	r1, #0
 80095ec:	4628      	mov	r0, r5
 80095ee:	f7f6 fdef 	bl	80001d0 <memchr>
 80095f2:	b108      	cbz	r0, 80095f8 <_printf_i+0x1bc>
 80095f4:	1b40      	subs	r0, r0, r5
 80095f6:	6060      	str	r0, [r4, #4]
 80095f8:	6863      	ldr	r3, [r4, #4]
 80095fa:	6123      	str	r3, [r4, #16]
 80095fc:	2300      	movs	r3, #0
 80095fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009602:	e7a7      	b.n	8009554 <_printf_i+0x118>
 8009604:	6923      	ldr	r3, [r4, #16]
 8009606:	462a      	mov	r2, r5
 8009608:	4639      	mov	r1, r7
 800960a:	4630      	mov	r0, r6
 800960c:	47c0      	blx	r8
 800960e:	3001      	adds	r0, #1
 8009610:	d0aa      	beq.n	8009568 <_printf_i+0x12c>
 8009612:	6823      	ldr	r3, [r4, #0]
 8009614:	079b      	lsls	r3, r3, #30
 8009616:	d413      	bmi.n	8009640 <_printf_i+0x204>
 8009618:	68e0      	ldr	r0, [r4, #12]
 800961a:	9b03      	ldr	r3, [sp, #12]
 800961c:	4298      	cmp	r0, r3
 800961e:	bfb8      	it	lt
 8009620:	4618      	movlt	r0, r3
 8009622:	e7a3      	b.n	800956c <_printf_i+0x130>
 8009624:	2301      	movs	r3, #1
 8009626:	464a      	mov	r2, r9
 8009628:	4639      	mov	r1, r7
 800962a:	4630      	mov	r0, r6
 800962c:	47c0      	blx	r8
 800962e:	3001      	adds	r0, #1
 8009630:	d09a      	beq.n	8009568 <_printf_i+0x12c>
 8009632:	3501      	adds	r5, #1
 8009634:	68e3      	ldr	r3, [r4, #12]
 8009636:	9a03      	ldr	r2, [sp, #12]
 8009638:	1a9b      	subs	r3, r3, r2
 800963a:	42ab      	cmp	r3, r5
 800963c:	dcf2      	bgt.n	8009624 <_printf_i+0x1e8>
 800963e:	e7eb      	b.n	8009618 <_printf_i+0x1dc>
 8009640:	2500      	movs	r5, #0
 8009642:	f104 0919 	add.w	r9, r4, #25
 8009646:	e7f5      	b.n	8009634 <_printf_i+0x1f8>
 8009648:	2b00      	cmp	r3, #0
 800964a:	d1ac      	bne.n	80095a6 <_printf_i+0x16a>
 800964c:	7803      	ldrb	r3, [r0, #0]
 800964e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009652:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009656:	e76c      	b.n	8009532 <_printf_i+0xf6>
 8009658:	0800c01a 	.word	0x0800c01a
 800965c:	0800c02b 	.word	0x0800c02b

08009660 <siprintf>:
 8009660:	b40e      	push	{r1, r2, r3}
 8009662:	b500      	push	{lr}
 8009664:	b09c      	sub	sp, #112	; 0x70
 8009666:	ab1d      	add	r3, sp, #116	; 0x74
 8009668:	9002      	str	r0, [sp, #8]
 800966a:	9006      	str	r0, [sp, #24]
 800966c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009670:	4809      	ldr	r0, [pc, #36]	; (8009698 <siprintf+0x38>)
 8009672:	9107      	str	r1, [sp, #28]
 8009674:	9104      	str	r1, [sp, #16]
 8009676:	4909      	ldr	r1, [pc, #36]	; (800969c <siprintf+0x3c>)
 8009678:	f853 2b04 	ldr.w	r2, [r3], #4
 800967c:	9105      	str	r1, [sp, #20]
 800967e:	6800      	ldr	r0, [r0, #0]
 8009680:	9301      	str	r3, [sp, #4]
 8009682:	a902      	add	r1, sp, #8
 8009684:	f001 fa5c 	bl	800ab40 <_svfiprintf_r>
 8009688:	9b02      	ldr	r3, [sp, #8]
 800968a:	2200      	movs	r2, #0
 800968c:	701a      	strb	r2, [r3, #0]
 800968e:	b01c      	add	sp, #112	; 0x70
 8009690:	f85d eb04 	ldr.w	lr, [sp], #4
 8009694:	b003      	add	sp, #12
 8009696:	4770      	bx	lr
 8009698:	2000000c 	.word	0x2000000c
 800969c:	ffff0208 	.word	0xffff0208

080096a0 <quorem>:
 80096a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096a4:	6903      	ldr	r3, [r0, #16]
 80096a6:	690c      	ldr	r4, [r1, #16]
 80096a8:	42a3      	cmp	r3, r4
 80096aa:	4680      	mov	r8, r0
 80096ac:	f2c0 8082 	blt.w	80097b4 <quorem+0x114>
 80096b0:	3c01      	subs	r4, #1
 80096b2:	f101 0714 	add.w	r7, r1, #20
 80096b6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80096ba:	f100 0614 	add.w	r6, r0, #20
 80096be:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80096c2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80096c6:	eb06 030c 	add.w	r3, r6, ip
 80096ca:	3501      	adds	r5, #1
 80096cc:	eb07 090c 	add.w	r9, r7, ip
 80096d0:	9301      	str	r3, [sp, #4]
 80096d2:	fbb0 f5f5 	udiv	r5, r0, r5
 80096d6:	b395      	cbz	r5, 800973e <quorem+0x9e>
 80096d8:	f04f 0a00 	mov.w	sl, #0
 80096dc:	4638      	mov	r0, r7
 80096de:	46b6      	mov	lr, r6
 80096e0:	46d3      	mov	fp, sl
 80096e2:	f850 2b04 	ldr.w	r2, [r0], #4
 80096e6:	b293      	uxth	r3, r2
 80096e8:	fb05 a303 	mla	r3, r5, r3, sl
 80096ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80096f0:	b29b      	uxth	r3, r3
 80096f2:	ebab 0303 	sub.w	r3, fp, r3
 80096f6:	0c12      	lsrs	r2, r2, #16
 80096f8:	f8de b000 	ldr.w	fp, [lr]
 80096fc:	fb05 a202 	mla	r2, r5, r2, sl
 8009700:	fa13 f38b 	uxtah	r3, r3, fp
 8009704:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009708:	fa1f fb82 	uxth.w	fp, r2
 800970c:	f8de 2000 	ldr.w	r2, [lr]
 8009710:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009714:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009718:	b29b      	uxth	r3, r3
 800971a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800971e:	4581      	cmp	r9, r0
 8009720:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009724:	f84e 3b04 	str.w	r3, [lr], #4
 8009728:	d2db      	bcs.n	80096e2 <quorem+0x42>
 800972a:	f856 300c 	ldr.w	r3, [r6, ip]
 800972e:	b933      	cbnz	r3, 800973e <quorem+0x9e>
 8009730:	9b01      	ldr	r3, [sp, #4]
 8009732:	3b04      	subs	r3, #4
 8009734:	429e      	cmp	r6, r3
 8009736:	461a      	mov	r2, r3
 8009738:	d330      	bcc.n	800979c <quorem+0xfc>
 800973a:	f8c8 4010 	str.w	r4, [r8, #16]
 800973e:	4640      	mov	r0, r8
 8009740:	f001 f828 	bl	800a794 <__mcmp>
 8009744:	2800      	cmp	r0, #0
 8009746:	db25      	blt.n	8009794 <quorem+0xf4>
 8009748:	3501      	adds	r5, #1
 800974a:	4630      	mov	r0, r6
 800974c:	f04f 0c00 	mov.w	ip, #0
 8009750:	f857 2b04 	ldr.w	r2, [r7], #4
 8009754:	f8d0 e000 	ldr.w	lr, [r0]
 8009758:	b293      	uxth	r3, r2
 800975a:	ebac 0303 	sub.w	r3, ip, r3
 800975e:	0c12      	lsrs	r2, r2, #16
 8009760:	fa13 f38e 	uxtah	r3, r3, lr
 8009764:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009768:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800976c:	b29b      	uxth	r3, r3
 800976e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009772:	45b9      	cmp	r9, r7
 8009774:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009778:	f840 3b04 	str.w	r3, [r0], #4
 800977c:	d2e8      	bcs.n	8009750 <quorem+0xb0>
 800977e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8009782:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8009786:	b92a      	cbnz	r2, 8009794 <quorem+0xf4>
 8009788:	3b04      	subs	r3, #4
 800978a:	429e      	cmp	r6, r3
 800978c:	461a      	mov	r2, r3
 800978e:	d30b      	bcc.n	80097a8 <quorem+0x108>
 8009790:	f8c8 4010 	str.w	r4, [r8, #16]
 8009794:	4628      	mov	r0, r5
 8009796:	b003      	add	sp, #12
 8009798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800979c:	6812      	ldr	r2, [r2, #0]
 800979e:	3b04      	subs	r3, #4
 80097a0:	2a00      	cmp	r2, #0
 80097a2:	d1ca      	bne.n	800973a <quorem+0x9a>
 80097a4:	3c01      	subs	r4, #1
 80097a6:	e7c5      	b.n	8009734 <quorem+0x94>
 80097a8:	6812      	ldr	r2, [r2, #0]
 80097aa:	3b04      	subs	r3, #4
 80097ac:	2a00      	cmp	r2, #0
 80097ae:	d1ef      	bne.n	8009790 <quorem+0xf0>
 80097b0:	3c01      	subs	r4, #1
 80097b2:	e7ea      	b.n	800978a <quorem+0xea>
 80097b4:	2000      	movs	r0, #0
 80097b6:	e7ee      	b.n	8009796 <quorem+0xf6>

080097b8 <_dtoa_r>:
 80097b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097bc:	ec57 6b10 	vmov	r6, r7, d0
 80097c0:	b097      	sub	sp, #92	; 0x5c
 80097c2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80097c4:	9106      	str	r1, [sp, #24]
 80097c6:	4604      	mov	r4, r0
 80097c8:	920b      	str	r2, [sp, #44]	; 0x2c
 80097ca:	9312      	str	r3, [sp, #72]	; 0x48
 80097cc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80097d0:	e9cd 6700 	strd	r6, r7, [sp]
 80097d4:	b93d      	cbnz	r5, 80097e6 <_dtoa_r+0x2e>
 80097d6:	2010      	movs	r0, #16
 80097d8:	f000 fdb4 	bl	800a344 <malloc>
 80097dc:	6260      	str	r0, [r4, #36]	; 0x24
 80097de:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80097e2:	6005      	str	r5, [r0, #0]
 80097e4:	60c5      	str	r5, [r0, #12]
 80097e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097e8:	6819      	ldr	r1, [r3, #0]
 80097ea:	b151      	cbz	r1, 8009802 <_dtoa_r+0x4a>
 80097ec:	685a      	ldr	r2, [r3, #4]
 80097ee:	604a      	str	r2, [r1, #4]
 80097f0:	2301      	movs	r3, #1
 80097f2:	4093      	lsls	r3, r2
 80097f4:	608b      	str	r3, [r1, #8]
 80097f6:	4620      	mov	r0, r4
 80097f8:	f000 fdeb 	bl	800a3d2 <_Bfree>
 80097fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097fe:	2200      	movs	r2, #0
 8009800:	601a      	str	r2, [r3, #0]
 8009802:	1e3b      	subs	r3, r7, #0
 8009804:	bfbb      	ittet	lt
 8009806:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800980a:	9301      	strlt	r3, [sp, #4]
 800980c:	2300      	movge	r3, #0
 800980e:	2201      	movlt	r2, #1
 8009810:	bfac      	ite	ge
 8009812:	f8c8 3000 	strge.w	r3, [r8]
 8009816:	f8c8 2000 	strlt.w	r2, [r8]
 800981a:	4baf      	ldr	r3, [pc, #700]	; (8009ad8 <_dtoa_r+0x320>)
 800981c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009820:	ea33 0308 	bics.w	r3, r3, r8
 8009824:	d114      	bne.n	8009850 <_dtoa_r+0x98>
 8009826:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009828:	f242 730f 	movw	r3, #9999	; 0x270f
 800982c:	6013      	str	r3, [r2, #0]
 800982e:	9b00      	ldr	r3, [sp, #0]
 8009830:	b923      	cbnz	r3, 800983c <_dtoa_r+0x84>
 8009832:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8009836:	2800      	cmp	r0, #0
 8009838:	f000 8542 	beq.w	800a2c0 <_dtoa_r+0xb08>
 800983c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800983e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8009aec <_dtoa_r+0x334>
 8009842:	2b00      	cmp	r3, #0
 8009844:	f000 8544 	beq.w	800a2d0 <_dtoa_r+0xb18>
 8009848:	f10b 0303 	add.w	r3, fp, #3
 800984c:	f000 bd3e 	b.w	800a2cc <_dtoa_r+0xb14>
 8009850:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009854:	2200      	movs	r2, #0
 8009856:	2300      	movs	r3, #0
 8009858:	4630      	mov	r0, r6
 800985a:	4639      	mov	r1, r7
 800985c:	f7f7 f934 	bl	8000ac8 <__aeabi_dcmpeq>
 8009860:	4681      	mov	r9, r0
 8009862:	b168      	cbz	r0, 8009880 <_dtoa_r+0xc8>
 8009864:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009866:	2301      	movs	r3, #1
 8009868:	6013      	str	r3, [r2, #0]
 800986a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800986c:	2b00      	cmp	r3, #0
 800986e:	f000 8524 	beq.w	800a2ba <_dtoa_r+0xb02>
 8009872:	4b9a      	ldr	r3, [pc, #616]	; (8009adc <_dtoa_r+0x324>)
 8009874:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009876:	f103 3bff 	add.w	fp, r3, #4294967295
 800987a:	6013      	str	r3, [r2, #0]
 800987c:	f000 bd28 	b.w	800a2d0 <_dtoa_r+0xb18>
 8009880:	aa14      	add	r2, sp, #80	; 0x50
 8009882:	a915      	add	r1, sp, #84	; 0x54
 8009884:	ec47 6b10 	vmov	d0, r6, r7
 8009888:	4620      	mov	r0, r4
 800988a:	f000 fffa 	bl	800a882 <__d2b>
 800988e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009892:	9004      	str	r0, [sp, #16]
 8009894:	2d00      	cmp	r5, #0
 8009896:	d07c      	beq.n	8009992 <_dtoa_r+0x1da>
 8009898:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800989c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80098a0:	46b2      	mov	sl, r6
 80098a2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80098a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80098aa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80098ae:	2200      	movs	r2, #0
 80098b0:	4b8b      	ldr	r3, [pc, #556]	; (8009ae0 <_dtoa_r+0x328>)
 80098b2:	4650      	mov	r0, sl
 80098b4:	4659      	mov	r1, fp
 80098b6:	f7f6 fce7 	bl	8000288 <__aeabi_dsub>
 80098ba:	a381      	add	r3, pc, #516	; (adr r3, 8009ac0 <_dtoa_r+0x308>)
 80098bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c0:	f7f6 fe9a 	bl	80005f8 <__aeabi_dmul>
 80098c4:	a380      	add	r3, pc, #512	; (adr r3, 8009ac8 <_dtoa_r+0x310>)
 80098c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ca:	f7f6 fcdf 	bl	800028c <__adddf3>
 80098ce:	4606      	mov	r6, r0
 80098d0:	4628      	mov	r0, r5
 80098d2:	460f      	mov	r7, r1
 80098d4:	f7f6 fe26 	bl	8000524 <__aeabi_i2d>
 80098d8:	a37d      	add	r3, pc, #500	; (adr r3, 8009ad0 <_dtoa_r+0x318>)
 80098da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098de:	f7f6 fe8b 	bl	80005f8 <__aeabi_dmul>
 80098e2:	4602      	mov	r2, r0
 80098e4:	460b      	mov	r3, r1
 80098e6:	4630      	mov	r0, r6
 80098e8:	4639      	mov	r1, r7
 80098ea:	f7f6 fccf 	bl	800028c <__adddf3>
 80098ee:	4606      	mov	r6, r0
 80098f0:	460f      	mov	r7, r1
 80098f2:	f7f7 f931 	bl	8000b58 <__aeabi_d2iz>
 80098f6:	2200      	movs	r2, #0
 80098f8:	4682      	mov	sl, r0
 80098fa:	2300      	movs	r3, #0
 80098fc:	4630      	mov	r0, r6
 80098fe:	4639      	mov	r1, r7
 8009900:	f7f7 f8ec 	bl	8000adc <__aeabi_dcmplt>
 8009904:	b148      	cbz	r0, 800991a <_dtoa_r+0x162>
 8009906:	4650      	mov	r0, sl
 8009908:	f7f6 fe0c 	bl	8000524 <__aeabi_i2d>
 800990c:	4632      	mov	r2, r6
 800990e:	463b      	mov	r3, r7
 8009910:	f7f7 f8da 	bl	8000ac8 <__aeabi_dcmpeq>
 8009914:	b908      	cbnz	r0, 800991a <_dtoa_r+0x162>
 8009916:	f10a 3aff 	add.w	sl, sl, #4294967295
 800991a:	f1ba 0f16 	cmp.w	sl, #22
 800991e:	d859      	bhi.n	80099d4 <_dtoa_r+0x21c>
 8009920:	4970      	ldr	r1, [pc, #448]	; (8009ae4 <_dtoa_r+0x32c>)
 8009922:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009926:	e9dd 2300 	ldrd	r2, r3, [sp]
 800992a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800992e:	f7f7 f8f3 	bl	8000b18 <__aeabi_dcmpgt>
 8009932:	2800      	cmp	r0, #0
 8009934:	d050      	beq.n	80099d8 <_dtoa_r+0x220>
 8009936:	f10a 3aff 	add.w	sl, sl, #4294967295
 800993a:	2300      	movs	r3, #0
 800993c:	930f      	str	r3, [sp, #60]	; 0x3c
 800993e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009940:	1b5d      	subs	r5, r3, r5
 8009942:	f1b5 0801 	subs.w	r8, r5, #1
 8009946:	bf49      	itett	mi
 8009948:	f1c5 0301 	rsbmi	r3, r5, #1
 800994c:	2300      	movpl	r3, #0
 800994e:	9305      	strmi	r3, [sp, #20]
 8009950:	f04f 0800 	movmi.w	r8, #0
 8009954:	bf58      	it	pl
 8009956:	9305      	strpl	r3, [sp, #20]
 8009958:	f1ba 0f00 	cmp.w	sl, #0
 800995c:	db3e      	blt.n	80099dc <_dtoa_r+0x224>
 800995e:	2300      	movs	r3, #0
 8009960:	44d0      	add	r8, sl
 8009962:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009966:	9307      	str	r3, [sp, #28]
 8009968:	9b06      	ldr	r3, [sp, #24]
 800996a:	2b09      	cmp	r3, #9
 800996c:	f200 8090 	bhi.w	8009a90 <_dtoa_r+0x2d8>
 8009970:	2b05      	cmp	r3, #5
 8009972:	bfc4      	itt	gt
 8009974:	3b04      	subgt	r3, #4
 8009976:	9306      	strgt	r3, [sp, #24]
 8009978:	9b06      	ldr	r3, [sp, #24]
 800997a:	f1a3 0302 	sub.w	r3, r3, #2
 800997e:	bfcc      	ite	gt
 8009980:	2500      	movgt	r5, #0
 8009982:	2501      	movle	r5, #1
 8009984:	2b03      	cmp	r3, #3
 8009986:	f200 808f 	bhi.w	8009aa8 <_dtoa_r+0x2f0>
 800998a:	e8df f003 	tbb	[pc, r3]
 800998e:	7f7d      	.short	0x7f7d
 8009990:	7131      	.short	0x7131
 8009992:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8009996:	441d      	add	r5, r3
 8009998:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800999c:	2820      	cmp	r0, #32
 800999e:	dd13      	ble.n	80099c8 <_dtoa_r+0x210>
 80099a0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80099a4:	9b00      	ldr	r3, [sp, #0]
 80099a6:	fa08 f800 	lsl.w	r8, r8, r0
 80099aa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80099ae:	fa23 f000 	lsr.w	r0, r3, r0
 80099b2:	ea48 0000 	orr.w	r0, r8, r0
 80099b6:	f7f6 fda5 	bl	8000504 <__aeabi_ui2d>
 80099ba:	2301      	movs	r3, #1
 80099bc:	4682      	mov	sl, r0
 80099be:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80099c2:	3d01      	subs	r5, #1
 80099c4:	9313      	str	r3, [sp, #76]	; 0x4c
 80099c6:	e772      	b.n	80098ae <_dtoa_r+0xf6>
 80099c8:	9b00      	ldr	r3, [sp, #0]
 80099ca:	f1c0 0020 	rsb	r0, r0, #32
 80099ce:	fa03 f000 	lsl.w	r0, r3, r0
 80099d2:	e7f0      	b.n	80099b6 <_dtoa_r+0x1fe>
 80099d4:	2301      	movs	r3, #1
 80099d6:	e7b1      	b.n	800993c <_dtoa_r+0x184>
 80099d8:	900f      	str	r0, [sp, #60]	; 0x3c
 80099da:	e7b0      	b.n	800993e <_dtoa_r+0x186>
 80099dc:	9b05      	ldr	r3, [sp, #20]
 80099de:	eba3 030a 	sub.w	r3, r3, sl
 80099e2:	9305      	str	r3, [sp, #20]
 80099e4:	f1ca 0300 	rsb	r3, sl, #0
 80099e8:	9307      	str	r3, [sp, #28]
 80099ea:	2300      	movs	r3, #0
 80099ec:	930e      	str	r3, [sp, #56]	; 0x38
 80099ee:	e7bb      	b.n	8009968 <_dtoa_r+0x1b0>
 80099f0:	2301      	movs	r3, #1
 80099f2:	930a      	str	r3, [sp, #40]	; 0x28
 80099f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	dd59      	ble.n	8009aae <_dtoa_r+0x2f6>
 80099fa:	9302      	str	r3, [sp, #8]
 80099fc:	4699      	mov	r9, r3
 80099fe:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009a00:	2200      	movs	r2, #0
 8009a02:	6072      	str	r2, [r6, #4]
 8009a04:	2204      	movs	r2, #4
 8009a06:	f102 0014 	add.w	r0, r2, #20
 8009a0a:	4298      	cmp	r0, r3
 8009a0c:	6871      	ldr	r1, [r6, #4]
 8009a0e:	d953      	bls.n	8009ab8 <_dtoa_r+0x300>
 8009a10:	4620      	mov	r0, r4
 8009a12:	f000 fcaa 	bl	800a36a <_Balloc>
 8009a16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a18:	6030      	str	r0, [r6, #0]
 8009a1a:	f1b9 0f0e 	cmp.w	r9, #14
 8009a1e:	f8d3 b000 	ldr.w	fp, [r3]
 8009a22:	f200 80e6 	bhi.w	8009bf2 <_dtoa_r+0x43a>
 8009a26:	2d00      	cmp	r5, #0
 8009a28:	f000 80e3 	beq.w	8009bf2 <_dtoa_r+0x43a>
 8009a2c:	ed9d 7b00 	vldr	d7, [sp]
 8009a30:	f1ba 0f00 	cmp.w	sl, #0
 8009a34:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8009a38:	dd74      	ble.n	8009b24 <_dtoa_r+0x36c>
 8009a3a:	4a2a      	ldr	r2, [pc, #168]	; (8009ae4 <_dtoa_r+0x32c>)
 8009a3c:	f00a 030f 	and.w	r3, sl, #15
 8009a40:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009a44:	ed93 7b00 	vldr	d7, [r3]
 8009a48:	ea4f 162a 	mov.w	r6, sl, asr #4
 8009a4c:	06f0      	lsls	r0, r6, #27
 8009a4e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8009a52:	d565      	bpl.n	8009b20 <_dtoa_r+0x368>
 8009a54:	4b24      	ldr	r3, [pc, #144]	; (8009ae8 <_dtoa_r+0x330>)
 8009a56:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009a5a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009a5e:	f7f6 fef5 	bl	800084c <__aeabi_ddiv>
 8009a62:	e9cd 0100 	strd	r0, r1, [sp]
 8009a66:	f006 060f 	and.w	r6, r6, #15
 8009a6a:	2503      	movs	r5, #3
 8009a6c:	4f1e      	ldr	r7, [pc, #120]	; (8009ae8 <_dtoa_r+0x330>)
 8009a6e:	e04c      	b.n	8009b0a <_dtoa_r+0x352>
 8009a70:	2301      	movs	r3, #1
 8009a72:	930a      	str	r3, [sp, #40]	; 0x28
 8009a74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a76:	4453      	add	r3, sl
 8009a78:	f103 0901 	add.w	r9, r3, #1
 8009a7c:	9302      	str	r3, [sp, #8]
 8009a7e:	464b      	mov	r3, r9
 8009a80:	2b01      	cmp	r3, #1
 8009a82:	bfb8      	it	lt
 8009a84:	2301      	movlt	r3, #1
 8009a86:	e7ba      	b.n	80099fe <_dtoa_r+0x246>
 8009a88:	2300      	movs	r3, #0
 8009a8a:	e7b2      	b.n	80099f2 <_dtoa_r+0x23a>
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	e7f0      	b.n	8009a72 <_dtoa_r+0x2ba>
 8009a90:	2501      	movs	r5, #1
 8009a92:	2300      	movs	r3, #0
 8009a94:	9306      	str	r3, [sp, #24]
 8009a96:	950a      	str	r5, [sp, #40]	; 0x28
 8009a98:	f04f 33ff 	mov.w	r3, #4294967295
 8009a9c:	9302      	str	r3, [sp, #8]
 8009a9e:	4699      	mov	r9, r3
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	2312      	movs	r3, #18
 8009aa4:	920b      	str	r2, [sp, #44]	; 0x2c
 8009aa6:	e7aa      	b.n	80099fe <_dtoa_r+0x246>
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	930a      	str	r3, [sp, #40]	; 0x28
 8009aac:	e7f4      	b.n	8009a98 <_dtoa_r+0x2e0>
 8009aae:	2301      	movs	r3, #1
 8009ab0:	9302      	str	r3, [sp, #8]
 8009ab2:	4699      	mov	r9, r3
 8009ab4:	461a      	mov	r2, r3
 8009ab6:	e7f5      	b.n	8009aa4 <_dtoa_r+0x2ec>
 8009ab8:	3101      	adds	r1, #1
 8009aba:	6071      	str	r1, [r6, #4]
 8009abc:	0052      	lsls	r2, r2, #1
 8009abe:	e7a2      	b.n	8009a06 <_dtoa_r+0x24e>
 8009ac0:	636f4361 	.word	0x636f4361
 8009ac4:	3fd287a7 	.word	0x3fd287a7
 8009ac8:	8b60c8b3 	.word	0x8b60c8b3
 8009acc:	3fc68a28 	.word	0x3fc68a28
 8009ad0:	509f79fb 	.word	0x509f79fb
 8009ad4:	3fd34413 	.word	0x3fd34413
 8009ad8:	7ff00000 	.word	0x7ff00000
 8009adc:	0800c019 	.word	0x0800c019
 8009ae0:	3ff80000 	.word	0x3ff80000
 8009ae4:	0800c078 	.word	0x0800c078
 8009ae8:	0800c050 	.word	0x0800c050
 8009aec:	0800c045 	.word	0x0800c045
 8009af0:	07f1      	lsls	r1, r6, #31
 8009af2:	d508      	bpl.n	8009b06 <_dtoa_r+0x34e>
 8009af4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009af8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009afc:	f7f6 fd7c 	bl	80005f8 <__aeabi_dmul>
 8009b00:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009b04:	3501      	adds	r5, #1
 8009b06:	1076      	asrs	r6, r6, #1
 8009b08:	3708      	adds	r7, #8
 8009b0a:	2e00      	cmp	r6, #0
 8009b0c:	d1f0      	bne.n	8009af0 <_dtoa_r+0x338>
 8009b0e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009b12:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b16:	f7f6 fe99 	bl	800084c <__aeabi_ddiv>
 8009b1a:	e9cd 0100 	strd	r0, r1, [sp]
 8009b1e:	e01a      	b.n	8009b56 <_dtoa_r+0x39e>
 8009b20:	2502      	movs	r5, #2
 8009b22:	e7a3      	b.n	8009a6c <_dtoa_r+0x2b4>
 8009b24:	f000 80a0 	beq.w	8009c68 <_dtoa_r+0x4b0>
 8009b28:	f1ca 0600 	rsb	r6, sl, #0
 8009b2c:	4b9f      	ldr	r3, [pc, #636]	; (8009dac <_dtoa_r+0x5f4>)
 8009b2e:	4fa0      	ldr	r7, [pc, #640]	; (8009db0 <_dtoa_r+0x5f8>)
 8009b30:	f006 020f 	and.w	r2, r6, #15
 8009b34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b3c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009b40:	f7f6 fd5a 	bl	80005f8 <__aeabi_dmul>
 8009b44:	e9cd 0100 	strd	r0, r1, [sp]
 8009b48:	1136      	asrs	r6, r6, #4
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	2502      	movs	r5, #2
 8009b4e:	2e00      	cmp	r6, #0
 8009b50:	d17f      	bne.n	8009c52 <_dtoa_r+0x49a>
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d1e1      	bne.n	8009b1a <_dtoa_r+0x362>
 8009b56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	f000 8087 	beq.w	8009c6c <_dtoa_r+0x4b4>
 8009b5e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009b62:	2200      	movs	r2, #0
 8009b64:	4b93      	ldr	r3, [pc, #588]	; (8009db4 <_dtoa_r+0x5fc>)
 8009b66:	4630      	mov	r0, r6
 8009b68:	4639      	mov	r1, r7
 8009b6a:	f7f6 ffb7 	bl	8000adc <__aeabi_dcmplt>
 8009b6e:	2800      	cmp	r0, #0
 8009b70:	d07c      	beq.n	8009c6c <_dtoa_r+0x4b4>
 8009b72:	f1b9 0f00 	cmp.w	r9, #0
 8009b76:	d079      	beq.n	8009c6c <_dtoa_r+0x4b4>
 8009b78:	9b02      	ldr	r3, [sp, #8]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	dd35      	ble.n	8009bea <_dtoa_r+0x432>
 8009b7e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009b82:	9308      	str	r3, [sp, #32]
 8009b84:	4639      	mov	r1, r7
 8009b86:	2200      	movs	r2, #0
 8009b88:	4b8b      	ldr	r3, [pc, #556]	; (8009db8 <_dtoa_r+0x600>)
 8009b8a:	4630      	mov	r0, r6
 8009b8c:	f7f6 fd34 	bl	80005f8 <__aeabi_dmul>
 8009b90:	e9cd 0100 	strd	r0, r1, [sp]
 8009b94:	9f02      	ldr	r7, [sp, #8]
 8009b96:	3501      	adds	r5, #1
 8009b98:	4628      	mov	r0, r5
 8009b9a:	f7f6 fcc3 	bl	8000524 <__aeabi_i2d>
 8009b9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ba2:	f7f6 fd29 	bl	80005f8 <__aeabi_dmul>
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	4b84      	ldr	r3, [pc, #528]	; (8009dbc <_dtoa_r+0x604>)
 8009baa:	f7f6 fb6f 	bl	800028c <__adddf3>
 8009bae:	4605      	mov	r5, r0
 8009bb0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009bb4:	2f00      	cmp	r7, #0
 8009bb6:	d15d      	bne.n	8009c74 <_dtoa_r+0x4bc>
 8009bb8:	2200      	movs	r2, #0
 8009bba:	4b81      	ldr	r3, [pc, #516]	; (8009dc0 <_dtoa_r+0x608>)
 8009bbc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009bc0:	f7f6 fb62 	bl	8000288 <__aeabi_dsub>
 8009bc4:	462a      	mov	r2, r5
 8009bc6:	4633      	mov	r3, r6
 8009bc8:	e9cd 0100 	strd	r0, r1, [sp]
 8009bcc:	f7f6 ffa4 	bl	8000b18 <__aeabi_dcmpgt>
 8009bd0:	2800      	cmp	r0, #0
 8009bd2:	f040 8288 	bne.w	800a0e6 <_dtoa_r+0x92e>
 8009bd6:	462a      	mov	r2, r5
 8009bd8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009bdc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009be0:	f7f6 ff7c 	bl	8000adc <__aeabi_dcmplt>
 8009be4:	2800      	cmp	r0, #0
 8009be6:	f040 827c 	bne.w	800a0e2 <_dtoa_r+0x92a>
 8009bea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009bee:	e9cd 2300 	strd	r2, r3, [sp]
 8009bf2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	f2c0 8150 	blt.w	8009e9a <_dtoa_r+0x6e2>
 8009bfa:	f1ba 0f0e 	cmp.w	sl, #14
 8009bfe:	f300 814c 	bgt.w	8009e9a <_dtoa_r+0x6e2>
 8009c02:	4b6a      	ldr	r3, [pc, #424]	; (8009dac <_dtoa_r+0x5f4>)
 8009c04:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009c08:	ed93 7b00 	vldr	d7, [r3]
 8009c0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009c14:	f280 80d8 	bge.w	8009dc8 <_dtoa_r+0x610>
 8009c18:	f1b9 0f00 	cmp.w	r9, #0
 8009c1c:	f300 80d4 	bgt.w	8009dc8 <_dtoa_r+0x610>
 8009c20:	f040 825e 	bne.w	800a0e0 <_dtoa_r+0x928>
 8009c24:	2200      	movs	r2, #0
 8009c26:	4b66      	ldr	r3, [pc, #408]	; (8009dc0 <_dtoa_r+0x608>)
 8009c28:	ec51 0b17 	vmov	r0, r1, d7
 8009c2c:	f7f6 fce4 	bl	80005f8 <__aeabi_dmul>
 8009c30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c34:	f7f6 ff66 	bl	8000b04 <__aeabi_dcmpge>
 8009c38:	464f      	mov	r7, r9
 8009c3a:	464e      	mov	r6, r9
 8009c3c:	2800      	cmp	r0, #0
 8009c3e:	f040 8234 	bne.w	800a0aa <_dtoa_r+0x8f2>
 8009c42:	2331      	movs	r3, #49	; 0x31
 8009c44:	f10b 0501 	add.w	r5, fp, #1
 8009c48:	f88b 3000 	strb.w	r3, [fp]
 8009c4c:	f10a 0a01 	add.w	sl, sl, #1
 8009c50:	e22f      	b.n	800a0b2 <_dtoa_r+0x8fa>
 8009c52:	07f2      	lsls	r2, r6, #31
 8009c54:	d505      	bpl.n	8009c62 <_dtoa_r+0x4aa>
 8009c56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c5a:	f7f6 fccd 	bl	80005f8 <__aeabi_dmul>
 8009c5e:	3501      	adds	r5, #1
 8009c60:	2301      	movs	r3, #1
 8009c62:	1076      	asrs	r6, r6, #1
 8009c64:	3708      	adds	r7, #8
 8009c66:	e772      	b.n	8009b4e <_dtoa_r+0x396>
 8009c68:	2502      	movs	r5, #2
 8009c6a:	e774      	b.n	8009b56 <_dtoa_r+0x39e>
 8009c6c:	f8cd a020 	str.w	sl, [sp, #32]
 8009c70:	464f      	mov	r7, r9
 8009c72:	e791      	b.n	8009b98 <_dtoa_r+0x3e0>
 8009c74:	4b4d      	ldr	r3, [pc, #308]	; (8009dac <_dtoa_r+0x5f4>)
 8009c76:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009c7a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8009c7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d047      	beq.n	8009d14 <_dtoa_r+0x55c>
 8009c84:	4602      	mov	r2, r0
 8009c86:	460b      	mov	r3, r1
 8009c88:	2000      	movs	r0, #0
 8009c8a:	494e      	ldr	r1, [pc, #312]	; (8009dc4 <_dtoa_r+0x60c>)
 8009c8c:	f7f6 fdde 	bl	800084c <__aeabi_ddiv>
 8009c90:	462a      	mov	r2, r5
 8009c92:	4633      	mov	r3, r6
 8009c94:	f7f6 faf8 	bl	8000288 <__aeabi_dsub>
 8009c98:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009c9c:	465d      	mov	r5, fp
 8009c9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ca2:	f7f6 ff59 	bl	8000b58 <__aeabi_d2iz>
 8009ca6:	4606      	mov	r6, r0
 8009ca8:	f7f6 fc3c 	bl	8000524 <__aeabi_i2d>
 8009cac:	4602      	mov	r2, r0
 8009cae:	460b      	mov	r3, r1
 8009cb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009cb4:	f7f6 fae8 	bl	8000288 <__aeabi_dsub>
 8009cb8:	3630      	adds	r6, #48	; 0x30
 8009cba:	f805 6b01 	strb.w	r6, [r5], #1
 8009cbe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009cc2:	e9cd 0100 	strd	r0, r1, [sp]
 8009cc6:	f7f6 ff09 	bl	8000adc <__aeabi_dcmplt>
 8009cca:	2800      	cmp	r0, #0
 8009ccc:	d163      	bne.n	8009d96 <_dtoa_r+0x5de>
 8009cce:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009cd2:	2000      	movs	r0, #0
 8009cd4:	4937      	ldr	r1, [pc, #220]	; (8009db4 <_dtoa_r+0x5fc>)
 8009cd6:	f7f6 fad7 	bl	8000288 <__aeabi_dsub>
 8009cda:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009cde:	f7f6 fefd 	bl	8000adc <__aeabi_dcmplt>
 8009ce2:	2800      	cmp	r0, #0
 8009ce4:	f040 80b7 	bne.w	8009e56 <_dtoa_r+0x69e>
 8009ce8:	eba5 030b 	sub.w	r3, r5, fp
 8009cec:	429f      	cmp	r7, r3
 8009cee:	f77f af7c 	ble.w	8009bea <_dtoa_r+0x432>
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	4b30      	ldr	r3, [pc, #192]	; (8009db8 <_dtoa_r+0x600>)
 8009cf6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009cfa:	f7f6 fc7d 	bl	80005f8 <__aeabi_dmul>
 8009cfe:	2200      	movs	r2, #0
 8009d00:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009d04:	4b2c      	ldr	r3, [pc, #176]	; (8009db8 <_dtoa_r+0x600>)
 8009d06:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d0a:	f7f6 fc75 	bl	80005f8 <__aeabi_dmul>
 8009d0e:	e9cd 0100 	strd	r0, r1, [sp]
 8009d12:	e7c4      	b.n	8009c9e <_dtoa_r+0x4e6>
 8009d14:	462a      	mov	r2, r5
 8009d16:	4633      	mov	r3, r6
 8009d18:	f7f6 fc6e 	bl	80005f8 <__aeabi_dmul>
 8009d1c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009d20:	eb0b 0507 	add.w	r5, fp, r7
 8009d24:	465e      	mov	r6, fp
 8009d26:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d2a:	f7f6 ff15 	bl	8000b58 <__aeabi_d2iz>
 8009d2e:	4607      	mov	r7, r0
 8009d30:	f7f6 fbf8 	bl	8000524 <__aeabi_i2d>
 8009d34:	3730      	adds	r7, #48	; 0x30
 8009d36:	4602      	mov	r2, r0
 8009d38:	460b      	mov	r3, r1
 8009d3a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d3e:	f7f6 faa3 	bl	8000288 <__aeabi_dsub>
 8009d42:	f806 7b01 	strb.w	r7, [r6], #1
 8009d46:	42ae      	cmp	r6, r5
 8009d48:	e9cd 0100 	strd	r0, r1, [sp]
 8009d4c:	f04f 0200 	mov.w	r2, #0
 8009d50:	d126      	bne.n	8009da0 <_dtoa_r+0x5e8>
 8009d52:	4b1c      	ldr	r3, [pc, #112]	; (8009dc4 <_dtoa_r+0x60c>)
 8009d54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009d58:	f7f6 fa98 	bl	800028c <__adddf3>
 8009d5c:	4602      	mov	r2, r0
 8009d5e:	460b      	mov	r3, r1
 8009d60:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d64:	f7f6 fed8 	bl	8000b18 <__aeabi_dcmpgt>
 8009d68:	2800      	cmp	r0, #0
 8009d6a:	d174      	bne.n	8009e56 <_dtoa_r+0x69e>
 8009d6c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009d70:	2000      	movs	r0, #0
 8009d72:	4914      	ldr	r1, [pc, #80]	; (8009dc4 <_dtoa_r+0x60c>)
 8009d74:	f7f6 fa88 	bl	8000288 <__aeabi_dsub>
 8009d78:	4602      	mov	r2, r0
 8009d7a:	460b      	mov	r3, r1
 8009d7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d80:	f7f6 feac 	bl	8000adc <__aeabi_dcmplt>
 8009d84:	2800      	cmp	r0, #0
 8009d86:	f43f af30 	beq.w	8009bea <_dtoa_r+0x432>
 8009d8a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009d8e:	2b30      	cmp	r3, #48	; 0x30
 8009d90:	f105 32ff 	add.w	r2, r5, #4294967295
 8009d94:	d002      	beq.n	8009d9c <_dtoa_r+0x5e4>
 8009d96:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009d9a:	e04a      	b.n	8009e32 <_dtoa_r+0x67a>
 8009d9c:	4615      	mov	r5, r2
 8009d9e:	e7f4      	b.n	8009d8a <_dtoa_r+0x5d2>
 8009da0:	4b05      	ldr	r3, [pc, #20]	; (8009db8 <_dtoa_r+0x600>)
 8009da2:	f7f6 fc29 	bl	80005f8 <__aeabi_dmul>
 8009da6:	e9cd 0100 	strd	r0, r1, [sp]
 8009daa:	e7bc      	b.n	8009d26 <_dtoa_r+0x56e>
 8009dac:	0800c078 	.word	0x0800c078
 8009db0:	0800c050 	.word	0x0800c050
 8009db4:	3ff00000 	.word	0x3ff00000
 8009db8:	40240000 	.word	0x40240000
 8009dbc:	401c0000 	.word	0x401c0000
 8009dc0:	40140000 	.word	0x40140000
 8009dc4:	3fe00000 	.word	0x3fe00000
 8009dc8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009dcc:	465d      	mov	r5, fp
 8009dce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009dd2:	4630      	mov	r0, r6
 8009dd4:	4639      	mov	r1, r7
 8009dd6:	f7f6 fd39 	bl	800084c <__aeabi_ddiv>
 8009dda:	f7f6 febd 	bl	8000b58 <__aeabi_d2iz>
 8009dde:	4680      	mov	r8, r0
 8009de0:	f7f6 fba0 	bl	8000524 <__aeabi_i2d>
 8009de4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009de8:	f7f6 fc06 	bl	80005f8 <__aeabi_dmul>
 8009dec:	4602      	mov	r2, r0
 8009dee:	460b      	mov	r3, r1
 8009df0:	4630      	mov	r0, r6
 8009df2:	4639      	mov	r1, r7
 8009df4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8009df8:	f7f6 fa46 	bl	8000288 <__aeabi_dsub>
 8009dfc:	f805 6b01 	strb.w	r6, [r5], #1
 8009e00:	eba5 060b 	sub.w	r6, r5, fp
 8009e04:	45b1      	cmp	r9, r6
 8009e06:	4602      	mov	r2, r0
 8009e08:	460b      	mov	r3, r1
 8009e0a:	d139      	bne.n	8009e80 <_dtoa_r+0x6c8>
 8009e0c:	f7f6 fa3e 	bl	800028c <__adddf3>
 8009e10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e14:	4606      	mov	r6, r0
 8009e16:	460f      	mov	r7, r1
 8009e18:	f7f6 fe7e 	bl	8000b18 <__aeabi_dcmpgt>
 8009e1c:	b9c8      	cbnz	r0, 8009e52 <_dtoa_r+0x69a>
 8009e1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e22:	4630      	mov	r0, r6
 8009e24:	4639      	mov	r1, r7
 8009e26:	f7f6 fe4f 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e2a:	b110      	cbz	r0, 8009e32 <_dtoa_r+0x67a>
 8009e2c:	f018 0f01 	tst.w	r8, #1
 8009e30:	d10f      	bne.n	8009e52 <_dtoa_r+0x69a>
 8009e32:	9904      	ldr	r1, [sp, #16]
 8009e34:	4620      	mov	r0, r4
 8009e36:	f000 facc 	bl	800a3d2 <_Bfree>
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009e3e:	702b      	strb	r3, [r5, #0]
 8009e40:	f10a 0301 	add.w	r3, sl, #1
 8009e44:	6013      	str	r3, [r2, #0]
 8009e46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	f000 8241 	beq.w	800a2d0 <_dtoa_r+0xb18>
 8009e4e:	601d      	str	r5, [r3, #0]
 8009e50:	e23e      	b.n	800a2d0 <_dtoa_r+0xb18>
 8009e52:	f8cd a020 	str.w	sl, [sp, #32]
 8009e56:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009e5a:	2a39      	cmp	r2, #57	; 0x39
 8009e5c:	f105 33ff 	add.w	r3, r5, #4294967295
 8009e60:	d108      	bne.n	8009e74 <_dtoa_r+0x6bc>
 8009e62:	459b      	cmp	fp, r3
 8009e64:	d10a      	bne.n	8009e7c <_dtoa_r+0x6c4>
 8009e66:	9b08      	ldr	r3, [sp, #32]
 8009e68:	3301      	adds	r3, #1
 8009e6a:	9308      	str	r3, [sp, #32]
 8009e6c:	2330      	movs	r3, #48	; 0x30
 8009e6e:	f88b 3000 	strb.w	r3, [fp]
 8009e72:	465b      	mov	r3, fp
 8009e74:	781a      	ldrb	r2, [r3, #0]
 8009e76:	3201      	adds	r2, #1
 8009e78:	701a      	strb	r2, [r3, #0]
 8009e7a:	e78c      	b.n	8009d96 <_dtoa_r+0x5de>
 8009e7c:	461d      	mov	r5, r3
 8009e7e:	e7ea      	b.n	8009e56 <_dtoa_r+0x69e>
 8009e80:	2200      	movs	r2, #0
 8009e82:	4b9b      	ldr	r3, [pc, #620]	; (800a0f0 <_dtoa_r+0x938>)
 8009e84:	f7f6 fbb8 	bl	80005f8 <__aeabi_dmul>
 8009e88:	2200      	movs	r2, #0
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	4606      	mov	r6, r0
 8009e8e:	460f      	mov	r7, r1
 8009e90:	f7f6 fe1a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e94:	2800      	cmp	r0, #0
 8009e96:	d09a      	beq.n	8009dce <_dtoa_r+0x616>
 8009e98:	e7cb      	b.n	8009e32 <_dtoa_r+0x67a>
 8009e9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e9c:	2a00      	cmp	r2, #0
 8009e9e:	f000 808b 	beq.w	8009fb8 <_dtoa_r+0x800>
 8009ea2:	9a06      	ldr	r2, [sp, #24]
 8009ea4:	2a01      	cmp	r2, #1
 8009ea6:	dc6e      	bgt.n	8009f86 <_dtoa_r+0x7ce>
 8009ea8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009eaa:	2a00      	cmp	r2, #0
 8009eac:	d067      	beq.n	8009f7e <_dtoa_r+0x7c6>
 8009eae:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009eb2:	9f07      	ldr	r7, [sp, #28]
 8009eb4:	9d05      	ldr	r5, [sp, #20]
 8009eb6:	9a05      	ldr	r2, [sp, #20]
 8009eb8:	2101      	movs	r1, #1
 8009eba:	441a      	add	r2, r3
 8009ebc:	4620      	mov	r0, r4
 8009ebe:	9205      	str	r2, [sp, #20]
 8009ec0:	4498      	add	r8, r3
 8009ec2:	f000 fb26 	bl	800a512 <__i2b>
 8009ec6:	4606      	mov	r6, r0
 8009ec8:	2d00      	cmp	r5, #0
 8009eca:	dd0c      	ble.n	8009ee6 <_dtoa_r+0x72e>
 8009ecc:	f1b8 0f00 	cmp.w	r8, #0
 8009ed0:	dd09      	ble.n	8009ee6 <_dtoa_r+0x72e>
 8009ed2:	4545      	cmp	r5, r8
 8009ed4:	9a05      	ldr	r2, [sp, #20]
 8009ed6:	462b      	mov	r3, r5
 8009ed8:	bfa8      	it	ge
 8009eda:	4643      	movge	r3, r8
 8009edc:	1ad2      	subs	r2, r2, r3
 8009ede:	9205      	str	r2, [sp, #20]
 8009ee0:	1aed      	subs	r5, r5, r3
 8009ee2:	eba8 0803 	sub.w	r8, r8, r3
 8009ee6:	9b07      	ldr	r3, [sp, #28]
 8009ee8:	b1eb      	cbz	r3, 8009f26 <_dtoa_r+0x76e>
 8009eea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d067      	beq.n	8009fc0 <_dtoa_r+0x808>
 8009ef0:	b18f      	cbz	r7, 8009f16 <_dtoa_r+0x75e>
 8009ef2:	4631      	mov	r1, r6
 8009ef4:	463a      	mov	r2, r7
 8009ef6:	4620      	mov	r0, r4
 8009ef8:	f000 fbaa 	bl	800a650 <__pow5mult>
 8009efc:	9a04      	ldr	r2, [sp, #16]
 8009efe:	4601      	mov	r1, r0
 8009f00:	4606      	mov	r6, r0
 8009f02:	4620      	mov	r0, r4
 8009f04:	f000 fb0e 	bl	800a524 <__multiply>
 8009f08:	9904      	ldr	r1, [sp, #16]
 8009f0a:	9008      	str	r0, [sp, #32]
 8009f0c:	4620      	mov	r0, r4
 8009f0e:	f000 fa60 	bl	800a3d2 <_Bfree>
 8009f12:	9b08      	ldr	r3, [sp, #32]
 8009f14:	9304      	str	r3, [sp, #16]
 8009f16:	9b07      	ldr	r3, [sp, #28]
 8009f18:	1bda      	subs	r2, r3, r7
 8009f1a:	d004      	beq.n	8009f26 <_dtoa_r+0x76e>
 8009f1c:	9904      	ldr	r1, [sp, #16]
 8009f1e:	4620      	mov	r0, r4
 8009f20:	f000 fb96 	bl	800a650 <__pow5mult>
 8009f24:	9004      	str	r0, [sp, #16]
 8009f26:	2101      	movs	r1, #1
 8009f28:	4620      	mov	r0, r4
 8009f2a:	f000 faf2 	bl	800a512 <__i2b>
 8009f2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f30:	4607      	mov	r7, r0
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	f000 81d0 	beq.w	800a2d8 <_dtoa_r+0xb20>
 8009f38:	461a      	mov	r2, r3
 8009f3a:	4601      	mov	r1, r0
 8009f3c:	4620      	mov	r0, r4
 8009f3e:	f000 fb87 	bl	800a650 <__pow5mult>
 8009f42:	9b06      	ldr	r3, [sp, #24]
 8009f44:	2b01      	cmp	r3, #1
 8009f46:	4607      	mov	r7, r0
 8009f48:	dc40      	bgt.n	8009fcc <_dtoa_r+0x814>
 8009f4a:	9b00      	ldr	r3, [sp, #0]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d139      	bne.n	8009fc4 <_dtoa_r+0x80c>
 8009f50:	9b01      	ldr	r3, [sp, #4]
 8009f52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d136      	bne.n	8009fc8 <_dtoa_r+0x810>
 8009f5a:	9b01      	ldr	r3, [sp, #4]
 8009f5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009f60:	0d1b      	lsrs	r3, r3, #20
 8009f62:	051b      	lsls	r3, r3, #20
 8009f64:	b12b      	cbz	r3, 8009f72 <_dtoa_r+0x7ba>
 8009f66:	9b05      	ldr	r3, [sp, #20]
 8009f68:	3301      	adds	r3, #1
 8009f6a:	9305      	str	r3, [sp, #20]
 8009f6c:	f108 0801 	add.w	r8, r8, #1
 8009f70:	2301      	movs	r3, #1
 8009f72:	9307      	str	r3, [sp, #28]
 8009f74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d12a      	bne.n	8009fd0 <_dtoa_r+0x818>
 8009f7a:	2001      	movs	r0, #1
 8009f7c:	e030      	b.n	8009fe0 <_dtoa_r+0x828>
 8009f7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009f80:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009f84:	e795      	b.n	8009eb2 <_dtoa_r+0x6fa>
 8009f86:	9b07      	ldr	r3, [sp, #28]
 8009f88:	f109 37ff 	add.w	r7, r9, #4294967295
 8009f8c:	42bb      	cmp	r3, r7
 8009f8e:	bfbf      	itttt	lt
 8009f90:	9b07      	ldrlt	r3, [sp, #28]
 8009f92:	9707      	strlt	r7, [sp, #28]
 8009f94:	1afa      	sublt	r2, r7, r3
 8009f96:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009f98:	bfbb      	ittet	lt
 8009f9a:	189b      	addlt	r3, r3, r2
 8009f9c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009f9e:	1bdf      	subge	r7, r3, r7
 8009fa0:	2700      	movlt	r7, #0
 8009fa2:	f1b9 0f00 	cmp.w	r9, #0
 8009fa6:	bfb5      	itete	lt
 8009fa8:	9b05      	ldrlt	r3, [sp, #20]
 8009faa:	9d05      	ldrge	r5, [sp, #20]
 8009fac:	eba3 0509 	sublt.w	r5, r3, r9
 8009fb0:	464b      	movge	r3, r9
 8009fb2:	bfb8      	it	lt
 8009fb4:	2300      	movlt	r3, #0
 8009fb6:	e77e      	b.n	8009eb6 <_dtoa_r+0x6fe>
 8009fb8:	9f07      	ldr	r7, [sp, #28]
 8009fba:	9d05      	ldr	r5, [sp, #20]
 8009fbc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009fbe:	e783      	b.n	8009ec8 <_dtoa_r+0x710>
 8009fc0:	9a07      	ldr	r2, [sp, #28]
 8009fc2:	e7ab      	b.n	8009f1c <_dtoa_r+0x764>
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	e7d4      	b.n	8009f72 <_dtoa_r+0x7ba>
 8009fc8:	9b00      	ldr	r3, [sp, #0]
 8009fca:	e7d2      	b.n	8009f72 <_dtoa_r+0x7ba>
 8009fcc:	2300      	movs	r3, #0
 8009fce:	9307      	str	r3, [sp, #28]
 8009fd0:	693b      	ldr	r3, [r7, #16]
 8009fd2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8009fd6:	6918      	ldr	r0, [r3, #16]
 8009fd8:	f000 fa4d 	bl	800a476 <__hi0bits>
 8009fdc:	f1c0 0020 	rsb	r0, r0, #32
 8009fe0:	4440      	add	r0, r8
 8009fe2:	f010 001f 	ands.w	r0, r0, #31
 8009fe6:	d047      	beq.n	800a078 <_dtoa_r+0x8c0>
 8009fe8:	f1c0 0320 	rsb	r3, r0, #32
 8009fec:	2b04      	cmp	r3, #4
 8009fee:	dd3b      	ble.n	800a068 <_dtoa_r+0x8b0>
 8009ff0:	9b05      	ldr	r3, [sp, #20]
 8009ff2:	f1c0 001c 	rsb	r0, r0, #28
 8009ff6:	4403      	add	r3, r0
 8009ff8:	9305      	str	r3, [sp, #20]
 8009ffa:	4405      	add	r5, r0
 8009ffc:	4480      	add	r8, r0
 8009ffe:	9b05      	ldr	r3, [sp, #20]
 800a000:	2b00      	cmp	r3, #0
 800a002:	dd05      	ble.n	800a010 <_dtoa_r+0x858>
 800a004:	461a      	mov	r2, r3
 800a006:	9904      	ldr	r1, [sp, #16]
 800a008:	4620      	mov	r0, r4
 800a00a:	f000 fb6f 	bl	800a6ec <__lshift>
 800a00e:	9004      	str	r0, [sp, #16]
 800a010:	f1b8 0f00 	cmp.w	r8, #0
 800a014:	dd05      	ble.n	800a022 <_dtoa_r+0x86a>
 800a016:	4639      	mov	r1, r7
 800a018:	4642      	mov	r2, r8
 800a01a:	4620      	mov	r0, r4
 800a01c:	f000 fb66 	bl	800a6ec <__lshift>
 800a020:	4607      	mov	r7, r0
 800a022:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a024:	b353      	cbz	r3, 800a07c <_dtoa_r+0x8c4>
 800a026:	4639      	mov	r1, r7
 800a028:	9804      	ldr	r0, [sp, #16]
 800a02a:	f000 fbb3 	bl	800a794 <__mcmp>
 800a02e:	2800      	cmp	r0, #0
 800a030:	da24      	bge.n	800a07c <_dtoa_r+0x8c4>
 800a032:	2300      	movs	r3, #0
 800a034:	220a      	movs	r2, #10
 800a036:	9904      	ldr	r1, [sp, #16]
 800a038:	4620      	mov	r0, r4
 800a03a:	f000 f9e1 	bl	800a400 <__multadd>
 800a03e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a040:	9004      	str	r0, [sp, #16]
 800a042:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a046:	2b00      	cmp	r3, #0
 800a048:	f000 814d 	beq.w	800a2e6 <_dtoa_r+0xb2e>
 800a04c:	2300      	movs	r3, #0
 800a04e:	4631      	mov	r1, r6
 800a050:	220a      	movs	r2, #10
 800a052:	4620      	mov	r0, r4
 800a054:	f000 f9d4 	bl	800a400 <__multadd>
 800a058:	9b02      	ldr	r3, [sp, #8]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	4606      	mov	r6, r0
 800a05e:	dc4f      	bgt.n	800a100 <_dtoa_r+0x948>
 800a060:	9b06      	ldr	r3, [sp, #24]
 800a062:	2b02      	cmp	r3, #2
 800a064:	dd4c      	ble.n	800a100 <_dtoa_r+0x948>
 800a066:	e011      	b.n	800a08c <_dtoa_r+0x8d4>
 800a068:	d0c9      	beq.n	8009ffe <_dtoa_r+0x846>
 800a06a:	9a05      	ldr	r2, [sp, #20]
 800a06c:	331c      	adds	r3, #28
 800a06e:	441a      	add	r2, r3
 800a070:	9205      	str	r2, [sp, #20]
 800a072:	441d      	add	r5, r3
 800a074:	4498      	add	r8, r3
 800a076:	e7c2      	b.n	8009ffe <_dtoa_r+0x846>
 800a078:	4603      	mov	r3, r0
 800a07a:	e7f6      	b.n	800a06a <_dtoa_r+0x8b2>
 800a07c:	f1b9 0f00 	cmp.w	r9, #0
 800a080:	dc38      	bgt.n	800a0f4 <_dtoa_r+0x93c>
 800a082:	9b06      	ldr	r3, [sp, #24]
 800a084:	2b02      	cmp	r3, #2
 800a086:	dd35      	ble.n	800a0f4 <_dtoa_r+0x93c>
 800a088:	f8cd 9008 	str.w	r9, [sp, #8]
 800a08c:	9b02      	ldr	r3, [sp, #8]
 800a08e:	b963      	cbnz	r3, 800a0aa <_dtoa_r+0x8f2>
 800a090:	4639      	mov	r1, r7
 800a092:	2205      	movs	r2, #5
 800a094:	4620      	mov	r0, r4
 800a096:	f000 f9b3 	bl	800a400 <__multadd>
 800a09a:	4601      	mov	r1, r0
 800a09c:	4607      	mov	r7, r0
 800a09e:	9804      	ldr	r0, [sp, #16]
 800a0a0:	f000 fb78 	bl	800a794 <__mcmp>
 800a0a4:	2800      	cmp	r0, #0
 800a0a6:	f73f adcc 	bgt.w	8009c42 <_dtoa_r+0x48a>
 800a0aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0ac:	465d      	mov	r5, fp
 800a0ae:	ea6f 0a03 	mvn.w	sl, r3
 800a0b2:	f04f 0900 	mov.w	r9, #0
 800a0b6:	4639      	mov	r1, r7
 800a0b8:	4620      	mov	r0, r4
 800a0ba:	f000 f98a 	bl	800a3d2 <_Bfree>
 800a0be:	2e00      	cmp	r6, #0
 800a0c0:	f43f aeb7 	beq.w	8009e32 <_dtoa_r+0x67a>
 800a0c4:	f1b9 0f00 	cmp.w	r9, #0
 800a0c8:	d005      	beq.n	800a0d6 <_dtoa_r+0x91e>
 800a0ca:	45b1      	cmp	r9, r6
 800a0cc:	d003      	beq.n	800a0d6 <_dtoa_r+0x91e>
 800a0ce:	4649      	mov	r1, r9
 800a0d0:	4620      	mov	r0, r4
 800a0d2:	f000 f97e 	bl	800a3d2 <_Bfree>
 800a0d6:	4631      	mov	r1, r6
 800a0d8:	4620      	mov	r0, r4
 800a0da:	f000 f97a 	bl	800a3d2 <_Bfree>
 800a0de:	e6a8      	b.n	8009e32 <_dtoa_r+0x67a>
 800a0e0:	2700      	movs	r7, #0
 800a0e2:	463e      	mov	r6, r7
 800a0e4:	e7e1      	b.n	800a0aa <_dtoa_r+0x8f2>
 800a0e6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a0ea:	463e      	mov	r6, r7
 800a0ec:	e5a9      	b.n	8009c42 <_dtoa_r+0x48a>
 800a0ee:	bf00      	nop
 800a0f0:	40240000 	.word	0x40240000
 800a0f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0f6:	f8cd 9008 	str.w	r9, [sp, #8]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	f000 80fa 	beq.w	800a2f4 <_dtoa_r+0xb3c>
 800a100:	2d00      	cmp	r5, #0
 800a102:	dd05      	ble.n	800a110 <_dtoa_r+0x958>
 800a104:	4631      	mov	r1, r6
 800a106:	462a      	mov	r2, r5
 800a108:	4620      	mov	r0, r4
 800a10a:	f000 faef 	bl	800a6ec <__lshift>
 800a10e:	4606      	mov	r6, r0
 800a110:	9b07      	ldr	r3, [sp, #28]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d04c      	beq.n	800a1b0 <_dtoa_r+0x9f8>
 800a116:	6871      	ldr	r1, [r6, #4]
 800a118:	4620      	mov	r0, r4
 800a11a:	f000 f926 	bl	800a36a <_Balloc>
 800a11e:	6932      	ldr	r2, [r6, #16]
 800a120:	3202      	adds	r2, #2
 800a122:	4605      	mov	r5, r0
 800a124:	0092      	lsls	r2, r2, #2
 800a126:	f106 010c 	add.w	r1, r6, #12
 800a12a:	300c      	adds	r0, #12
 800a12c:	f000 f912 	bl	800a354 <memcpy>
 800a130:	2201      	movs	r2, #1
 800a132:	4629      	mov	r1, r5
 800a134:	4620      	mov	r0, r4
 800a136:	f000 fad9 	bl	800a6ec <__lshift>
 800a13a:	9b00      	ldr	r3, [sp, #0]
 800a13c:	f8cd b014 	str.w	fp, [sp, #20]
 800a140:	f003 0301 	and.w	r3, r3, #1
 800a144:	46b1      	mov	r9, r6
 800a146:	9307      	str	r3, [sp, #28]
 800a148:	4606      	mov	r6, r0
 800a14a:	4639      	mov	r1, r7
 800a14c:	9804      	ldr	r0, [sp, #16]
 800a14e:	f7ff faa7 	bl	80096a0 <quorem>
 800a152:	4649      	mov	r1, r9
 800a154:	4605      	mov	r5, r0
 800a156:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a15a:	9804      	ldr	r0, [sp, #16]
 800a15c:	f000 fb1a 	bl	800a794 <__mcmp>
 800a160:	4632      	mov	r2, r6
 800a162:	9000      	str	r0, [sp, #0]
 800a164:	4639      	mov	r1, r7
 800a166:	4620      	mov	r0, r4
 800a168:	f000 fb2e 	bl	800a7c8 <__mdiff>
 800a16c:	68c3      	ldr	r3, [r0, #12]
 800a16e:	4602      	mov	r2, r0
 800a170:	bb03      	cbnz	r3, 800a1b4 <_dtoa_r+0x9fc>
 800a172:	4601      	mov	r1, r0
 800a174:	9008      	str	r0, [sp, #32]
 800a176:	9804      	ldr	r0, [sp, #16]
 800a178:	f000 fb0c 	bl	800a794 <__mcmp>
 800a17c:	9a08      	ldr	r2, [sp, #32]
 800a17e:	4603      	mov	r3, r0
 800a180:	4611      	mov	r1, r2
 800a182:	4620      	mov	r0, r4
 800a184:	9308      	str	r3, [sp, #32]
 800a186:	f000 f924 	bl	800a3d2 <_Bfree>
 800a18a:	9b08      	ldr	r3, [sp, #32]
 800a18c:	b9a3      	cbnz	r3, 800a1b8 <_dtoa_r+0xa00>
 800a18e:	9a06      	ldr	r2, [sp, #24]
 800a190:	b992      	cbnz	r2, 800a1b8 <_dtoa_r+0xa00>
 800a192:	9a07      	ldr	r2, [sp, #28]
 800a194:	b982      	cbnz	r2, 800a1b8 <_dtoa_r+0xa00>
 800a196:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a19a:	d029      	beq.n	800a1f0 <_dtoa_r+0xa38>
 800a19c:	9b00      	ldr	r3, [sp, #0]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	dd01      	ble.n	800a1a6 <_dtoa_r+0x9ee>
 800a1a2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800a1a6:	9b05      	ldr	r3, [sp, #20]
 800a1a8:	1c5d      	adds	r5, r3, #1
 800a1aa:	f883 8000 	strb.w	r8, [r3]
 800a1ae:	e782      	b.n	800a0b6 <_dtoa_r+0x8fe>
 800a1b0:	4630      	mov	r0, r6
 800a1b2:	e7c2      	b.n	800a13a <_dtoa_r+0x982>
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	e7e3      	b.n	800a180 <_dtoa_r+0x9c8>
 800a1b8:	9a00      	ldr	r2, [sp, #0]
 800a1ba:	2a00      	cmp	r2, #0
 800a1bc:	db04      	blt.n	800a1c8 <_dtoa_r+0xa10>
 800a1be:	d125      	bne.n	800a20c <_dtoa_r+0xa54>
 800a1c0:	9a06      	ldr	r2, [sp, #24]
 800a1c2:	bb1a      	cbnz	r2, 800a20c <_dtoa_r+0xa54>
 800a1c4:	9a07      	ldr	r2, [sp, #28]
 800a1c6:	bb0a      	cbnz	r2, 800a20c <_dtoa_r+0xa54>
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	ddec      	ble.n	800a1a6 <_dtoa_r+0x9ee>
 800a1cc:	2201      	movs	r2, #1
 800a1ce:	9904      	ldr	r1, [sp, #16]
 800a1d0:	4620      	mov	r0, r4
 800a1d2:	f000 fa8b 	bl	800a6ec <__lshift>
 800a1d6:	4639      	mov	r1, r7
 800a1d8:	9004      	str	r0, [sp, #16]
 800a1da:	f000 fadb 	bl	800a794 <__mcmp>
 800a1de:	2800      	cmp	r0, #0
 800a1e0:	dc03      	bgt.n	800a1ea <_dtoa_r+0xa32>
 800a1e2:	d1e0      	bne.n	800a1a6 <_dtoa_r+0x9ee>
 800a1e4:	f018 0f01 	tst.w	r8, #1
 800a1e8:	d0dd      	beq.n	800a1a6 <_dtoa_r+0x9ee>
 800a1ea:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a1ee:	d1d8      	bne.n	800a1a2 <_dtoa_r+0x9ea>
 800a1f0:	9b05      	ldr	r3, [sp, #20]
 800a1f2:	9a05      	ldr	r2, [sp, #20]
 800a1f4:	1c5d      	adds	r5, r3, #1
 800a1f6:	2339      	movs	r3, #57	; 0x39
 800a1f8:	7013      	strb	r3, [r2, #0]
 800a1fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a1fe:	2b39      	cmp	r3, #57	; 0x39
 800a200:	f105 32ff 	add.w	r2, r5, #4294967295
 800a204:	d04f      	beq.n	800a2a6 <_dtoa_r+0xaee>
 800a206:	3301      	adds	r3, #1
 800a208:	7013      	strb	r3, [r2, #0]
 800a20a:	e754      	b.n	800a0b6 <_dtoa_r+0x8fe>
 800a20c:	9a05      	ldr	r2, [sp, #20]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	f102 0501 	add.w	r5, r2, #1
 800a214:	dd06      	ble.n	800a224 <_dtoa_r+0xa6c>
 800a216:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a21a:	d0e9      	beq.n	800a1f0 <_dtoa_r+0xa38>
 800a21c:	f108 0801 	add.w	r8, r8, #1
 800a220:	9b05      	ldr	r3, [sp, #20]
 800a222:	e7c2      	b.n	800a1aa <_dtoa_r+0x9f2>
 800a224:	9a02      	ldr	r2, [sp, #8]
 800a226:	f805 8c01 	strb.w	r8, [r5, #-1]
 800a22a:	eba5 030b 	sub.w	r3, r5, fp
 800a22e:	4293      	cmp	r3, r2
 800a230:	d021      	beq.n	800a276 <_dtoa_r+0xabe>
 800a232:	2300      	movs	r3, #0
 800a234:	220a      	movs	r2, #10
 800a236:	9904      	ldr	r1, [sp, #16]
 800a238:	4620      	mov	r0, r4
 800a23a:	f000 f8e1 	bl	800a400 <__multadd>
 800a23e:	45b1      	cmp	r9, r6
 800a240:	9004      	str	r0, [sp, #16]
 800a242:	f04f 0300 	mov.w	r3, #0
 800a246:	f04f 020a 	mov.w	r2, #10
 800a24a:	4649      	mov	r1, r9
 800a24c:	4620      	mov	r0, r4
 800a24e:	d105      	bne.n	800a25c <_dtoa_r+0xaa4>
 800a250:	f000 f8d6 	bl	800a400 <__multadd>
 800a254:	4681      	mov	r9, r0
 800a256:	4606      	mov	r6, r0
 800a258:	9505      	str	r5, [sp, #20]
 800a25a:	e776      	b.n	800a14a <_dtoa_r+0x992>
 800a25c:	f000 f8d0 	bl	800a400 <__multadd>
 800a260:	4631      	mov	r1, r6
 800a262:	4681      	mov	r9, r0
 800a264:	2300      	movs	r3, #0
 800a266:	220a      	movs	r2, #10
 800a268:	4620      	mov	r0, r4
 800a26a:	f000 f8c9 	bl	800a400 <__multadd>
 800a26e:	4606      	mov	r6, r0
 800a270:	e7f2      	b.n	800a258 <_dtoa_r+0xaa0>
 800a272:	f04f 0900 	mov.w	r9, #0
 800a276:	2201      	movs	r2, #1
 800a278:	9904      	ldr	r1, [sp, #16]
 800a27a:	4620      	mov	r0, r4
 800a27c:	f000 fa36 	bl	800a6ec <__lshift>
 800a280:	4639      	mov	r1, r7
 800a282:	9004      	str	r0, [sp, #16]
 800a284:	f000 fa86 	bl	800a794 <__mcmp>
 800a288:	2800      	cmp	r0, #0
 800a28a:	dcb6      	bgt.n	800a1fa <_dtoa_r+0xa42>
 800a28c:	d102      	bne.n	800a294 <_dtoa_r+0xadc>
 800a28e:	f018 0f01 	tst.w	r8, #1
 800a292:	d1b2      	bne.n	800a1fa <_dtoa_r+0xa42>
 800a294:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a298:	2b30      	cmp	r3, #48	; 0x30
 800a29a:	f105 32ff 	add.w	r2, r5, #4294967295
 800a29e:	f47f af0a 	bne.w	800a0b6 <_dtoa_r+0x8fe>
 800a2a2:	4615      	mov	r5, r2
 800a2a4:	e7f6      	b.n	800a294 <_dtoa_r+0xadc>
 800a2a6:	4593      	cmp	fp, r2
 800a2a8:	d105      	bne.n	800a2b6 <_dtoa_r+0xafe>
 800a2aa:	2331      	movs	r3, #49	; 0x31
 800a2ac:	f10a 0a01 	add.w	sl, sl, #1
 800a2b0:	f88b 3000 	strb.w	r3, [fp]
 800a2b4:	e6ff      	b.n	800a0b6 <_dtoa_r+0x8fe>
 800a2b6:	4615      	mov	r5, r2
 800a2b8:	e79f      	b.n	800a1fa <_dtoa_r+0xa42>
 800a2ba:	f8df b064 	ldr.w	fp, [pc, #100]	; 800a320 <_dtoa_r+0xb68>
 800a2be:	e007      	b.n	800a2d0 <_dtoa_r+0xb18>
 800a2c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2c2:	f8df b060 	ldr.w	fp, [pc, #96]	; 800a324 <_dtoa_r+0xb6c>
 800a2c6:	b11b      	cbz	r3, 800a2d0 <_dtoa_r+0xb18>
 800a2c8:	f10b 0308 	add.w	r3, fp, #8
 800a2cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a2ce:	6013      	str	r3, [r2, #0]
 800a2d0:	4658      	mov	r0, fp
 800a2d2:	b017      	add	sp, #92	; 0x5c
 800a2d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2d8:	9b06      	ldr	r3, [sp, #24]
 800a2da:	2b01      	cmp	r3, #1
 800a2dc:	f77f ae35 	ble.w	8009f4a <_dtoa_r+0x792>
 800a2e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2e2:	9307      	str	r3, [sp, #28]
 800a2e4:	e649      	b.n	8009f7a <_dtoa_r+0x7c2>
 800a2e6:	9b02      	ldr	r3, [sp, #8]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	dc03      	bgt.n	800a2f4 <_dtoa_r+0xb3c>
 800a2ec:	9b06      	ldr	r3, [sp, #24]
 800a2ee:	2b02      	cmp	r3, #2
 800a2f0:	f73f aecc 	bgt.w	800a08c <_dtoa_r+0x8d4>
 800a2f4:	465d      	mov	r5, fp
 800a2f6:	4639      	mov	r1, r7
 800a2f8:	9804      	ldr	r0, [sp, #16]
 800a2fa:	f7ff f9d1 	bl	80096a0 <quorem>
 800a2fe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a302:	f805 8b01 	strb.w	r8, [r5], #1
 800a306:	9a02      	ldr	r2, [sp, #8]
 800a308:	eba5 030b 	sub.w	r3, r5, fp
 800a30c:	429a      	cmp	r2, r3
 800a30e:	ddb0      	ble.n	800a272 <_dtoa_r+0xaba>
 800a310:	2300      	movs	r3, #0
 800a312:	220a      	movs	r2, #10
 800a314:	9904      	ldr	r1, [sp, #16]
 800a316:	4620      	mov	r0, r4
 800a318:	f000 f872 	bl	800a400 <__multadd>
 800a31c:	9004      	str	r0, [sp, #16]
 800a31e:	e7ea      	b.n	800a2f6 <_dtoa_r+0xb3e>
 800a320:	0800c018 	.word	0x0800c018
 800a324:	0800c03c 	.word	0x0800c03c

0800a328 <_localeconv_r>:
 800a328:	4b04      	ldr	r3, [pc, #16]	; (800a33c <_localeconv_r+0x14>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	6a18      	ldr	r0, [r3, #32]
 800a32e:	4b04      	ldr	r3, [pc, #16]	; (800a340 <_localeconv_r+0x18>)
 800a330:	2800      	cmp	r0, #0
 800a332:	bf08      	it	eq
 800a334:	4618      	moveq	r0, r3
 800a336:	30f0      	adds	r0, #240	; 0xf0
 800a338:	4770      	bx	lr
 800a33a:	bf00      	nop
 800a33c:	2000000c 	.word	0x2000000c
 800a340:	20000070 	.word	0x20000070

0800a344 <malloc>:
 800a344:	4b02      	ldr	r3, [pc, #8]	; (800a350 <malloc+0xc>)
 800a346:	4601      	mov	r1, r0
 800a348:	6818      	ldr	r0, [r3, #0]
 800a34a:	f000 bb45 	b.w	800a9d8 <_malloc_r>
 800a34e:	bf00      	nop
 800a350:	2000000c 	.word	0x2000000c

0800a354 <memcpy>:
 800a354:	b510      	push	{r4, lr}
 800a356:	1e43      	subs	r3, r0, #1
 800a358:	440a      	add	r2, r1
 800a35a:	4291      	cmp	r1, r2
 800a35c:	d100      	bne.n	800a360 <memcpy+0xc>
 800a35e:	bd10      	pop	{r4, pc}
 800a360:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a364:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a368:	e7f7      	b.n	800a35a <memcpy+0x6>

0800a36a <_Balloc>:
 800a36a:	b570      	push	{r4, r5, r6, lr}
 800a36c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a36e:	4604      	mov	r4, r0
 800a370:	460e      	mov	r6, r1
 800a372:	b93d      	cbnz	r5, 800a384 <_Balloc+0x1a>
 800a374:	2010      	movs	r0, #16
 800a376:	f7ff ffe5 	bl	800a344 <malloc>
 800a37a:	6260      	str	r0, [r4, #36]	; 0x24
 800a37c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a380:	6005      	str	r5, [r0, #0]
 800a382:	60c5      	str	r5, [r0, #12]
 800a384:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a386:	68eb      	ldr	r3, [r5, #12]
 800a388:	b183      	cbz	r3, 800a3ac <_Balloc+0x42>
 800a38a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a38c:	68db      	ldr	r3, [r3, #12]
 800a38e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a392:	b9b8      	cbnz	r0, 800a3c4 <_Balloc+0x5a>
 800a394:	2101      	movs	r1, #1
 800a396:	fa01 f506 	lsl.w	r5, r1, r6
 800a39a:	1d6a      	adds	r2, r5, #5
 800a39c:	0092      	lsls	r2, r2, #2
 800a39e:	4620      	mov	r0, r4
 800a3a0:	f000 fabe 	bl	800a920 <_calloc_r>
 800a3a4:	b160      	cbz	r0, 800a3c0 <_Balloc+0x56>
 800a3a6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a3aa:	e00e      	b.n	800a3ca <_Balloc+0x60>
 800a3ac:	2221      	movs	r2, #33	; 0x21
 800a3ae:	2104      	movs	r1, #4
 800a3b0:	4620      	mov	r0, r4
 800a3b2:	f000 fab5 	bl	800a920 <_calloc_r>
 800a3b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3b8:	60e8      	str	r0, [r5, #12]
 800a3ba:	68db      	ldr	r3, [r3, #12]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d1e4      	bne.n	800a38a <_Balloc+0x20>
 800a3c0:	2000      	movs	r0, #0
 800a3c2:	bd70      	pop	{r4, r5, r6, pc}
 800a3c4:	6802      	ldr	r2, [r0, #0]
 800a3c6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a3d0:	e7f7      	b.n	800a3c2 <_Balloc+0x58>

0800a3d2 <_Bfree>:
 800a3d2:	b570      	push	{r4, r5, r6, lr}
 800a3d4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a3d6:	4606      	mov	r6, r0
 800a3d8:	460d      	mov	r5, r1
 800a3da:	b93c      	cbnz	r4, 800a3ec <_Bfree+0x1a>
 800a3dc:	2010      	movs	r0, #16
 800a3de:	f7ff ffb1 	bl	800a344 <malloc>
 800a3e2:	6270      	str	r0, [r6, #36]	; 0x24
 800a3e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a3e8:	6004      	str	r4, [r0, #0]
 800a3ea:	60c4      	str	r4, [r0, #12]
 800a3ec:	b13d      	cbz	r5, 800a3fe <_Bfree+0x2c>
 800a3ee:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a3f0:	686a      	ldr	r2, [r5, #4]
 800a3f2:	68db      	ldr	r3, [r3, #12]
 800a3f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a3f8:	6029      	str	r1, [r5, #0]
 800a3fa:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a3fe:	bd70      	pop	{r4, r5, r6, pc}

0800a400 <__multadd>:
 800a400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a404:	690d      	ldr	r5, [r1, #16]
 800a406:	461f      	mov	r7, r3
 800a408:	4606      	mov	r6, r0
 800a40a:	460c      	mov	r4, r1
 800a40c:	f101 0c14 	add.w	ip, r1, #20
 800a410:	2300      	movs	r3, #0
 800a412:	f8dc 0000 	ldr.w	r0, [ip]
 800a416:	b281      	uxth	r1, r0
 800a418:	fb02 7101 	mla	r1, r2, r1, r7
 800a41c:	0c0f      	lsrs	r7, r1, #16
 800a41e:	0c00      	lsrs	r0, r0, #16
 800a420:	fb02 7000 	mla	r0, r2, r0, r7
 800a424:	b289      	uxth	r1, r1
 800a426:	3301      	adds	r3, #1
 800a428:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a42c:	429d      	cmp	r5, r3
 800a42e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a432:	f84c 1b04 	str.w	r1, [ip], #4
 800a436:	dcec      	bgt.n	800a412 <__multadd+0x12>
 800a438:	b1d7      	cbz	r7, 800a470 <__multadd+0x70>
 800a43a:	68a3      	ldr	r3, [r4, #8]
 800a43c:	42ab      	cmp	r3, r5
 800a43e:	dc12      	bgt.n	800a466 <__multadd+0x66>
 800a440:	6861      	ldr	r1, [r4, #4]
 800a442:	4630      	mov	r0, r6
 800a444:	3101      	adds	r1, #1
 800a446:	f7ff ff90 	bl	800a36a <_Balloc>
 800a44a:	6922      	ldr	r2, [r4, #16]
 800a44c:	3202      	adds	r2, #2
 800a44e:	f104 010c 	add.w	r1, r4, #12
 800a452:	4680      	mov	r8, r0
 800a454:	0092      	lsls	r2, r2, #2
 800a456:	300c      	adds	r0, #12
 800a458:	f7ff ff7c 	bl	800a354 <memcpy>
 800a45c:	4621      	mov	r1, r4
 800a45e:	4630      	mov	r0, r6
 800a460:	f7ff ffb7 	bl	800a3d2 <_Bfree>
 800a464:	4644      	mov	r4, r8
 800a466:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a46a:	3501      	adds	r5, #1
 800a46c:	615f      	str	r7, [r3, #20]
 800a46e:	6125      	str	r5, [r4, #16]
 800a470:	4620      	mov	r0, r4
 800a472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a476 <__hi0bits>:
 800a476:	0c02      	lsrs	r2, r0, #16
 800a478:	0412      	lsls	r2, r2, #16
 800a47a:	4603      	mov	r3, r0
 800a47c:	b9b2      	cbnz	r2, 800a4ac <__hi0bits+0x36>
 800a47e:	0403      	lsls	r3, r0, #16
 800a480:	2010      	movs	r0, #16
 800a482:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a486:	bf04      	itt	eq
 800a488:	021b      	lsleq	r3, r3, #8
 800a48a:	3008      	addeq	r0, #8
 800a48c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a490:	bf04      	itt	eq
 800a492:	011b      	lsleq	r3, r3, #4
 800a494:	3004      	addeq	r0, #4
 800a496:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a49a:	bf04      	itt	eq
 800a49c:	009b      	lsleq	r3, r3, #2
 800a49e:	3002      	addeq	r0, #2
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	db06      	blt.n	800a4b2 <__hi0bits+0x3c>
 800a4a4:	005b      	lsls	r3, r3, #1
 800a4a6:	d503      	bpl.n	800a4b0 <__hi0bits+0x3a>
 800a4a8:	3001      	adds	r0, #1
 800a4aa:	4770      	bx	lr
 800a4ac:	2000      	movs	r0, #0
 800a4ae:	e7e8      	b.n	800a482 <__hi0bits+0xc>
 800a4b0:	2020      	movs	r0, #32
 800a4b2:	4770      	bx	lr

0800a4b4 <__lo0bits>:
 800a4b4:	6803      	ldr	r3, [r0, #0]
 800a4b6:	f013 0207 	ands.w	r2, r3, #7
 800a4ba:	4601      	mov	r1, r0
 800a4bc:	d00b      	beq.n	800a4d6 <__lo0bits+0x22>
 800a4be:	07da      	lsls	r2, r3, #31
 800a4c0:	d423      	bmi.n	800a50a <__lo0bits+0x56>
 800a4c2:	0798      	lsls	r0, r3, #30
 800a4c4:	bf49      	itett	mi
 800a4c6:	085b      	lsrmi	r3, r3, #1
 800a4c8:	089b      	lsrpl	r3, r3, #2
 800a4ca:	2001      	movmi	r0, #1
 800a4cc:	600b      	strmi	r3, [r1, #0]
 800a4ce:	bf5c      	itt	pl
 800a4d0:	600b      	strpl	r3, [r1, #0]
 800a4d2:	2002      	movpl	r0, #2
 800a4d4:	4770      	bx	lr
 800a4d6:	b298      	uxth	r0, r3
 800a4d8:	b9a8      	cbnz	r0, 800a506 <__lo0bits+0x52>
 800a4da:	0c1b      	lsrs	r3, r3, #16
 800a4dc:	2010      	movs	r0, #16
 800a4de:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a4e2:	bf04      	itt	eq
 800a4e4:	0a1b      	lsreq	r3, r3, #8
 800a4e6:	3008      	addeq	r0, #8
 800a4e8:	071a      	lsls	r2, r3, #28
 800a4ea:	bf04      	itt	eq
 800a4ec:	091b      	lsreq	r3, r3, #4
 800a4ee:	3004      	addeq	r0, #4
 800a4f0:	079a      	lsls	r2, r3, #30
 800a4f2:	bf04      	itt	eq
 800a4f4:	089b      	lsreq	r3, r3, #2
 800a4f6:	3002      	addeq	r0, #2
 800a4f8:	07da      	lsls	r2, r3, #31
 800a4fa:	d402      	bmi.n	800a502 <__lo0bits+0x4e>
 800a4fc:	085b      	lsrs	r3, r3, #1
 800a4fe:	d006      	beq.n	800a50e <__lo0bits+0x5a>
 800a500:	3001      	adds	r0, #1
 800a502:	600b      	str	r3, [r1, #0]
 800a504:	4770      	bx	lr
 800a506:	4610      	mov	r0, r2
 800a508:	e7e9      	b.n	800a4de <__lo0bits+0x2a>
 800a50a:	2000      	movs	r0, #0
 800a50c:	4770      	bx	lr
 800a50e:	2020      	movs	r0, #32
 800a510:	4770      	bx	lr

0800a512 <__i2b>:
 800a512:	b510      	push	{r4, lr}
 800a514:	460c      	mov	r4, r1
 800a516:	2101      	movs	r1, #1
 800a518:	f7ff ff27 	bl	800a36a <_Balloc>
 800a51c:	2201      	movs	r2, #1
 800a51e:	6144      	str	r4, [r0, #20]
 800a520:	6102      	str	r2, [r0, #16]
 800a522:	bd10      	pop	{r4, pc}

0800a524 <__multiply>:
 800a524:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a528:	4614      	mov	r4, r2
 800a52a:	690a      	ldr	r2, [r1, #16]
 800a52c:	6923      	ldr	r3, [r4, #16]
 800a52e:	429a      	cmp	r2, r3
 800a530:	bfb8      	it	lt
 800a532:	460b      	movlt	r3, r1
 800a534:	4688      	mov	r8, r1
 800a536:	bfbc      	itt	lt
 800a538:	46a0      	movlt	r8, r4
 800a53a:	461c      	movlt	r4, r3
 800a53c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a540:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a544:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a548:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a54c:	eb07 0609 	add.w	r6, r7, r9
 800a550:	42b3      	cmp	r3, r6
 800a552:	bfb8      	it	lt
 800a554:	3101      	addlt	r1, #1
 800a556:	f7ff ff08 	bl	800a36a <_Balloc>
 800a55a:	f100 0514 	add.w	r5, r0, #20
 800a55e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a562:	462b      	mov	r3, r5
 800a564:	2200      	movs	r2, #0
 800a566:	4573      	cmp	r3, lr
 800a568:	d316      	bcc.n	800a598 <__multiply+0x74>
 800a56a:	f104 0214 	add.w	r2, r4, #20
 800a56e:	f108 0114 	add.w	r1, r8, #20
 800a572:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a576:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a57a:	9300      	str	r3, [sp, #0]
 800a57c:	9b00      	ldr	r3, [sp, #0]
 800a57e:	9201      	str	r2, [sp, #4]
 800a580:	4293      	cmp	r3, r2
 800a582:	d80c      	bhi.n	800a59e <__multiply+0x7a>
 800a584:	2e00      	cmp	r6, #0
 800a586:	dd03      	ble.n	800a590 <__multiply+0x6c>
 800a588:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d05d      	beq.n	800a64c <__multiply+0x128>
 800a590:	6106      	str	r6, [r0, #16]
 800a592:	b003      	add	sp, #12
 800a594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a598:	f843 2b04 	str.w	r2, [r3], #4
 800a59c:	e7e3      	b.n	800a566 <__multiply+0x42>
 800a59e:	f8b2 b000 	ldrh.w	fp, [r2]
 800a5a2:	f1bb 0f00 	cmp.w	fp, #0
 800a5a6:	d023      	beq.n	800a5f0 <__multiply+0xcc>
 800a5a8:	4689      	mov	r9, r1
 800a5aa:	46ac      	mov	ip, r5
 800a5ac:	f04f 0800 	mov.w	r8, #0
 800a5b0:	f859 4b04 	ldr.w	r4, [r9], #4
 800a5b4:	f8dc a000 	ldr.w	sl, [ip]
 800a5b8:	b2a3      	uxth	r3, r4
 800a5ba:	fa1f fa8a 	uxth.w	sl, sl
 800a5be:	fb0b a303 	mla	r3, fp, r3, sl
 800a5c2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a5c6:	f8dc 4000 	ldr.w	r4, [ip]
 800a5ca:	4443      	add	r3, r8
 800a5cc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a5d0:	fb0b 840a 	mla	r4, fp, sl, r8
 800a5d4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a5d8:	46e2      	mov	sl, ip
 800a5da:	b29b      	uxth	r3, r3
 800a5dc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a5e0:	454f      	cmp	r7, r9
 800a5e2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a5e6:	f84a 3b04 	str.w	r3, [sl], #4
 800a5ea:	d82b      	bhi.n	800a644 <__multiply+0x120>
 800a5ec:	f8cc 8004 	str.w	r8, [ip, #4]
 800a5f0:	9b01      	ldr	r3, [sp, #4]
 800a5f2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a5f6:	3204      	adds	r2, #4
 800a5f8:	f1ba 0f00 	cmp.w	sl, #0
 800a5fc:	d020      	beq.n	800a640 <__multiply+0x11c>
 800a5fe:	682b      	ldr	r3, [r5, #0]
 800a600:	4689      	mov	r9, r1
 800a602:	46a8      	mov	r8, r5
 800a604:	f04f 0b00 	mov.w	fp, #0
 800a608:	f8b9 c000 	ldrh.w	ip, [r9]
 800a60c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800a610:	fb0a 440c 	mla	r4, sl, ip, r4
 800a614:	445c      	add	r4, fp
 800a616:	46c4      	mov	ip, r8
 800a618:	b29b      	uxth	r3, r3
 800a61a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a61e:	f84c 3b04 	str.w	r3, [ip], #4
 800a622:	f859 3b04 	ldr.w	r3, [r9], #4
 800a626:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800a62a:	0c1b      	lsrs	r3, r3, #16
 800a62c:	fb0a b303 	mla	r3, sl, r3, fp
 800a630:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a634:	454f      	cmp	r7, r9
 800a636:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800a63a:	d805      	bhi.n	800a648 <__multiply+0x124>
 800a63c:	f8c8 3004 	str.w	r3, [r8, #4]
 800a640:	3504      	adds	r5, #4
 800a642:	e79b      	b.n	800a57c <__multiply+0x58>
 800a644:	46d4      	mov	ip, sl
 800a646:	e7b3      	b.n	800a5b0 <__multiply+0x8c>
 800a648:	46e0      	mov	r8, ip
 800a64a:	e7dd      	b.n	800a608 <__multiply+0xe4>
 800a64c:	3e01      	subs	r6, #1
 800a64e:	e799      	b.n	800a584 <__multiply+0x60>

0800a650 <__pow5mult>:
 800a650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a654:	4615      	mov	r5, r2
 800a656:	f012 0203 	ands.w	r2, r2, #3
 800a65a:	4606      	mov	r6, r0
 800a65c:	460f      	mov	r7, r1
 800a65e:	d007      	beq.n	800a670 <__pow5mult+0x20>
 800a660:	3a01      	subs	r2, #1
 800a662:	4c21      	ldr	r4, [pc, #132]	; (800a6e8 <__pow5mult+0x98>)
 800a664:	2300      	movs	r3, #0
 800a666:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a66a:	f7ff fec9 	bl	800a400 <__multadd>
 800a66e:	4607      	mov	r7, r0
 800a670:	10ad      	asrs	r5, r5, #2
 800a672:	d035      	beq.n	800a6e0 <__pow5mult+0x90>
 800a674:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a676:	b93c      	cbnz	r4, 800a688 <__pow5mult+0x38>
 800a678:	2010      	movs	r0, #16
 800a67a:	f7ff fe63 	bl	800a344 <malloc>
 800a67e:	6270      	str	r0, [r6, #36]	; 0x24
 800a680:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a684:	6004      	str	r4, [r0, #0]
 800a686:	60c4      	str	r4, [r0, #12]
 800a688:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a68c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a690:	b94c      	cbnz	r4, 800a6a6 <__pow5mult+0x56>
 800a692:	f240 2171 	movw	r1, #625	; 0x271
 800a696:	4630      	mov	r0, r6
 800a698:	f7ff ff3b 	bl	800a512 <__i2b>
 800a69c:	2300      	movs	r3, #0
 800a69e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a6a2:	4604      	mov	r4, r0
 800a6a4:	6003      	str	r3, [r0, #0]
 800a6a6:	f04f 0800 	mov.w	r8, #0
 800a6aa:	07eb      	lsls	r3, r5, #31
 800a6ac:	d50a      	bpl.n	800a6c4 <__pow5mult+0x74>
 800a6ae:	4639      	mov	r1, r7
 800a6b0:	4622      	mov	r2, r4
 800a6b2:	4630      	mov	r0, r6
 800a6b4:	f7ff ff36 	bl	800a524 <__multiply>
 800a6b8:	4639      	mov	r1, r7
 800a6ba:	4681      	mov	r9, r0
 800a6bc:	4630      	mov	r0, r6
 800a6be:	f7ff fe88 	bl	800a3d2 <_Bfree>
 800a6c2:	464f      	mov	r7, r9
 800a6c4:	106d      	asrs	r5, r5, #1
 800a6c6:	d00b      	beq.n	800a6e0 <__pow5mult+0x90>
 800a6c8:	6820      	ldr	r0, [r4, #0]
 800a6ca:	b938      	cbnz	r0, 800a6dc <__pow5mult+0x8c>
 800a6cc:	4622      	mov	r2, r4
 800a6ce:	4621      	mov	r1, r4
 800a6d0:	4630      	mov	r0, r6
 800a6d2:	f7ff ff27 	bl	800a524 <__multiply>
 800a6d6:	6020      	str	r0, [r4, #0]
 800a6d8:	f8c0 8000 	str.w	r8, [r0]
 800a6dc:	4604      	mov	r4, r0
 800a6de:	e7e4      	b.n	800a6aa <__pow5mult+0x5a>
 800a6e0:	4638      	mov	r0, r7
 800a6e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6e6:	bf00      	nop
 800a6e8:	0800c140 	.word	0x0800c140

0800a6ec <__lshift>:
 800a6ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6f0:	460c      	mov	r4, r1
 800a6f2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a6f6:	6923      	ldr	r3, [r4, #16]
 800a6f8:	6849      	ldr	r1, [r1, #4]
 800a6fa:	eb0a 0903 	add.w	r9, sl, r3
 800a6fe:	68a3      	ldr	r3, [r4, #8]
 800a700:	4607      	mov	r7, r0
 800a702:	4616      	mov	r6, r2
 800a704:	f109 0501 	add.w	r5, r9, #1
 800a708:	42ab      	cmp	r3, r5
 800a70a:	db32      	blt.n	800a772 <__lshift+0x86>
 800a70c:	4638      	mov	r0, r7
 800a70e:	f7ff fe2c 	bl	800a36a <_Balloc>
 800a712:	2300      	movs	r3, #0
 800a714:	4680      	mov	r8, r0
 800a716:	f100 0114 	add.w	r1, r0, #20
 800a71a:	461a      	mov	r2, r3
 800a71c:	4553      	cmp	r3, sl
 800a71e:	db2b      	blt.n	800a778 <__lshift+0x8c>
 800a720:	6920      	ldr	r0, [r4, #16]
 800a722:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a726:	f104 0314 	add.w	r3, r4, #20
 800a72a:	f016 021f 	ands.w	r2, r6, #31
 800a72e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a732:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a736:	d025      	beq.n	800a784 <__lshift+0x98>
 800a738:	f1c2 0e20 	rsb	lr, r2, #32
 800a73c:	2000      	movs	r0, #0
 800a73e:	681e      	ldr	r6, [r3, #0]
 800a740:	468a      	mov	sl, r1
 800a742:	4096      	lsls	r6, r2
 800a744:	4330      	orrs	r0, r6
 800a746:	f84a 0b04 	str.w	r0, [sl], #4
 800a74a:	f853 0b04 	ldr.w	r0, [r3], #4
 800a74e:	459c      	cmp	ip, r3
 800a750:	fa20 f00e 	lsr.w	r0, r0, lr
 800a754:	d814      	bhi.n	800a780 <__lshift+0x94>
 800a756:	6048      	str	r0, [r1, #4]
 800a758:	b108      	cbz	r0, 800a75e <__lshift+0x72>
 800a75a:	f109 0502 	add.w	r5, r9, #2
 800a75e:	3d01      	subs	r5, #1
 800a760:	4638      	mov	r0, r7
 800a762:	f8c8 5010 	str.w	r5, [r8, #16]
 800a766:	4621      	mov	r1, r4
 800a768:	f7ff fe33 	bl	800a3d2 <_Bfree>
 800a76c:	4640      	mov	r0, r8
 800a76e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a772:	3101      	adds	r1, #1
 800a774:	005b      	lsls	r3, r3, #1
 800a776:	e7c7      	b.n	800a708 <__lshift+0x1c>
 800a778:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a77c:	3301      	adds	r3, #1
 800a77e:	e7cd      	b.n	800a71c <__lshift+0x30>
 800a780:	4651      	mov	r1, sl
 800a782:	e7dc      	b.n	800a73e <__lshift+0x52>
 800a784:	3904      	subs	r1, #4
 800a786:	f853 2b04 	ldr.w	r2, [r3], #4
 800a78a:	f841 2f04 	str.w	r2, [r1, #4]!
 800a78e:	459c      	cmp	ip, r3
 800a790:	d8f9      	bhi.n	800a786 <__lshift+0x9a>
 800a792:	e7e4      	b.n	800a75e <__lshift+0x72>

0800a794 <__mcmp>:
 800a794:	6903      	ldr	r3, [r0, #16]
 800a796:	690a      	ldr	r2, [r1, #16]
 800a798:	1a9b      	subs	r3, r3, r2
 800a79a:	b530      	push	{r4, r5, lr}
 800a79c:	d10c      	bne.n	800a7b8 <__mcmp+0x24>
 800a79e:	0092      	lsls	r2, r2, #2
 800a7a0:	3014      	adds	r0, #20
 800a7a2:	3114      	adds	r1, #20
 800a7a4:	1884      	adds	r4, r0, r2
 800a7a6:	4411      	add	r1, r2
 800a7a8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a7ac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a7b0:	4295      	cmp	r5, r2
 800a7b2:	d003      	beq.n	800a7bc <__mcmp+0x28>
 800a7b4:	d305      	bcc.n	800a7c2 <__mcmp+0x2e>
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	bd30      	pop	{r4, r5, pc}
 800a7bc:	42a0      	cmp	r0, r4
 800a7be:	d3f3      	bcc.n	800a7a8 <__mcmp+0x14>
 800a7c0:	e7fa      	b.n	800a7b8 <__mcmp+0x24>
 800a7c2:	f04f 33ff 	mov.w	r3, #4294967295
 800a7c6:	e7f7      	b.n	800a7b8 <__mcmp+0x24>

0800a7c8 <__mdiff>:
 800a7c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7cc:	460d      	mov	r5, r1
 800a7ce:	4607      	mov	r7, r0
 800a7d0:	4611      	mov	r1, r2
 800a7d2:	4628      	mov	r0, r5
 800a7d4:	4614      	mov	r4, r2
 800a7d6:	f7ff ffdd 	bl	800a794 <__mcmp>
 800a7da:	1e06      	subs	r6, r0, #0
 800a7dc:	d108      	bne.n	800a7f0 <__mdiff+0x28>
 800a7de:	4631      	mov	r1, r6
 800a7e0:	4638      	mov	r0, r7
 800a7e2:	f7ff fdc2 	bl	800a36a <_Balloc>
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a7ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7f0:	bfa4      	itt	ge
 800a7f2:	4623      	movge	r3, r4
 800a7f4:	462c      	movge	r4, r5
 800a7f6:	4638      	mov	r0, r7
 800a7f8:	6861      	ldr	r1, [r4, #4]
 800a7fa:	bfa6      	itte	ge
 800a7fc:	461d      	movge	r5, r3
 800a7fe:	2600      	movge	r6, #0
 800a800:	2601      	movlt	r6, #1
 800a802:	f7ff fdb2 	bl	800a36a <_Balloc>
 800a806:	692b      	ldr	r3, [r5, #16]
 800a808:	60c6      	str	r6, [r0, #12]
 800a80a:	6926      	ldr	r6, [r4, #16]
 800a80c:	f105 0914 	add.w	r9, r5, #20
 800a810:	f104 0214 	add.w	r2, r4, #20
 800a814:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a818:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a81c:	f100 0514 	add.w	r5, r0, #20
 800a820:	f04f 0e00 	mov.w	lr, #0
 800a824:	f852 ab04 	ldr.w	sl, [r2], #4
 800a828:	f859 4b04 	ldr.w	r4, [r9], #4
 800a82c:	fa1e f18a 	uxtah	r1, lr, sl
 800a830:	b2a3      	uxth	r3, r4
 800a832:	1ac9      	subs	r1, r1, r3
 800a834:	0c23      	lsrs	r3, r4, #16
 800a836:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800a83a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a83e:	b289      	uxth	r1, r1
 800a840:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a844:	45c8      	cmp	r8, r9
 800a846:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a84a:	4694      	mov	ip, r2
 800a84c:	f845 3b04 	str.w	r3, [r5], #4
 800a850:	d8e8      	bhi.n	800a824 <__mdiff+0x5c>
 800a852:	45bc      	cmp	ip, r7
 800a854:	d304      	bcc.n	800a860 <__mdiff+0x98>
 800a856:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800a85a:	b183      	cbz	r3, 800a87e <__mdiff+0xb6>
 800a85c:	6106      	str	r6, [r0, #16]
 800a85e:	e7c5      	b.n	800a7ec <__mdiff+0x24>
 800a860:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a864:	fa1e f381 	uxtah	r3, lr, r1
 800a868:	141a      	asrs	r2, r3, #16
 800a86a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a86e:	b29b      	uxth	r3, r3
 800a870:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a874:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800a878:	f845 3b04 	str.w	r3, [r5], #4
 800a87c:	e7e9      	b.n	800a852 <__mdiff+0x8a>
 800a87e:	3e01      	subs	r6, #1
 800a880:	e7e9      	b.n	800a856 <__mdiff+0x8e>

0800a882 <__d2b>:
 800a882:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a886:	460e      	mov	r6, r1
 800a888:	2101      	movs	r1, #1
 800a88a:	ec59 8b10 	vmov	r8, r9, d0
 800a88e:	4615      	mov	r5, r2
 800a890:	f7ff fd6b 	bl	800a36a <_Balloc>
 800a894:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a898:	4607      	mov	r7, r0
 800a89a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a89e:	bb34      	cbnz	r4, 800a8ee <__d2b+0x6c>
 800a8a0:	9301      	str	r3, [sp, #4]
 800a8a2:	f1b8 0300 	subs.w	r3, r8, #0
 800a8a6:	d027      	beq.n	800a8f8 <__d2b+0x76>
 800a8a8:	a802      	add	r0, sp, #8
 800a8aa:	f840 3d08 	str.w	r3, [r0, #-8]!
 800a8ae:	f7ff fe01 	bl	800a4b4 <__lo0bits>
 800a8b2:	9900      	ldr	r1, [sp, #0]
 800a8b4:	b1f0      	cbz	r0, 800a8f4 <__d2b+0x72>
 800a8b6:	9a01      	ldr	r2, [sp, #4]
 800a8b8:	f1c0 0320 	rsb	r3, r0, #32
 800a8bc:	fa02 f303 	lsl.w	r3, r2, r3
 800a8c0:	430b      	orrs	r3, r1
 800a8c2:	40c2      	lsrs	r2, r0
 800a8c4:	617b      	str	r3, [r7, #20]
 800a8c6:	9201      	str	r2, [sp, #4]
 800a8c8:	9b01      	ldr	r3, [sp, #4]
 800a8ca:	61bb      	str	r3, [r7, #24]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	bf14      	ite	ne
 800a8d0:	2102      	movne	r1, #2
 800a8d2:	2101      	moveq	r1, #1
 800a8d4:	6139      	str	r1, [r7, #16]
 800a8d6:	b1c4      	cbz	r4, 800a90a <__d2b+0x88>
 800a8d8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a8dc:	4404      	add	r4, r0
 800a8de:	6034      	str	r4, [r6, #0]
 800a8e0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a8e4:	6028      	str	r0, [r5, #0]
 800a8e6:	4638      	mov	r0, r7
 800a8e8:	b003      	add	sp, #12
 800a8ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a8f2:	e7d5      	b.n	800a8a0 <__d2b+0x1e>
 800a8f4:	6179      	str	r1, [r7, #20]
 800a8f6:	e7e7      	b.n	800a8c8 <__d2b+0x46>
 800a8f8:	a801      	add	r0, sp, #4
 800a8fa:	f7ff fddb 	bl	800a4b4 <__lo0bits>
 800a8fe:	9b01      	ldr	r3, [sp, #4]
 800a900:	617b      	str	r3, [r7, #20]
 800a902:	2101      	movs	r1, #1
 800a904:	6139      	str	r1, [r7, #16]
 800a906:	3020      	adds	r0, #32
 800a908:	e7e5      	b.n	800a8d6 <__d2b+0x54>
 800a90a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a90e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a912:	6030      	str	r0, [r6, #0]
 800a914:	6918      	ldr	r0, [r3, #16]
 800a916:	f7ff fdae 	bl	800a476 <__hi0bits>
 800a91a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a91e:	e7e1      	b.n	800a8e4 <__d2b+0x62>

0800a920 <_calloc_r>:
 800a920:	b538      	push	{r3, r4, r5, lr}
 800a922:	fb02 f401 	mul.w	r4, r2, r1
 800a926:	4621      	mov	r1, r4
 800a928:	f000 f856 	bl	800a9d8 <_malloc_r>
 800a92c:	4605      	mov	r5, r0
 800a92e:	b118      	cbz	r0, 800a938 <_calloc_r+0x18>
 800a930:	4622      	mov	r2, r4
 800a932:	2100      	movs	r1, #0
 800a934:	f7fe fa30 	bl	8008d98 <memset>
 800a938:	4628      	mov	r0, r5
 800a93a:	bd38      	pop	{r3, r4, r5, pc}

0800a93c <_free_r>:
 800a93c:	b538      	push	{r3, r4, r5, lr}
 800a93e:	4605      	mov	r5, r0
 800a940:	2900      	cmp	r1, #0
 800a942:	d045      	beq.n	800a9d0 <_free_r+0x94>
 800a944:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a948:	1f0c      	subs	r4, r1, #4
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	bfb8      	it	lt
 800a94e:	18e4      	addlt	r4, r4, r3
 800a950:	f000 fa29 	bl	800ada6 <__malloc_lock>
 800a954:	4a1f      	ldr	r2, [pc, #124]	; (800a9d4 <_free_r+0x98>)
 800a956:	6813      	ldr	r3, [r2, #0]
 800a958:	4610      	mov	r0, r2
 800a95a:	b933      	cbnz	r3, 800a96a <_free_r+0x2e>
 800a95c:	6063      	str	r3, [r4, #4]
 800a95e:	6014      	str	r4, [r2, #0]
 800a960:	4628      	mov	r0, r5
 800a962:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a966:	f000 ba1f 	b.w	800ada8 <__malloc_unlock>
 800a96a:	42a3      	cmp	r3, r4
 800a96c:	d90c      	bls.n	800a988 <_free_r+0x4c>
 800a96e:	6821      	ldr	r1, [r4, #0]
 800a970:	1862      	adds	r2, r4, r1
 800a972:	4293      	cmp	r3, r2
 800a974:	bf04      	itt	eq
 800a976:	681a      	ldreq	r2, [r3, #0]
 800a978:	685b      	ldreq	r3, [r3, #4]
 800a97a:	6063      	str	r3, [r4, #4]
 800a97c:	bf04      	itt	eq
 800a97e:	1852      	addeq	r2, r2, r1
 800a980:	6022      	streq	r2, [r4, #0]
 800a982:	6004      	str	r4, [r0, #0]
 800a984:	e7ec      	b.n	800a960 <_free_r+0x24>
 800a986:	4613      	mov	r3, r2
 800a988:	685a      	ldr	r2, [r3, #4]
 800a98a:	b10a      	cbz	r2, 800a990 <_free_r+0x54>
 800a98c:	42a2      	cmp	r2, r4
 800a98e:	d9fa      	bls.n	800a986 <_free_r+0x4a>
 800a990:	6819      	ldr	r1, [r3, #0]
 800a992:	1858      	adds	r0, r3, r1
 800a994:	42a0      	cmp	r0, r4
 800a996:	d10b      	bne.n	800a9b0 <_free_r+0x74>
 800a998:	6820      	ldr	r0, [r4, #0]
 800a99a:	4401      	add	r1, r0
 800a99c:	1858      	adds	r0, r3, r1
 800a99e:	4282      	cmp	r2, r0
 800a9a0:	6019      	str	r1, [r3, #0]
 800a9a2:	d1dd      	bne.n	800a960 <_free_r+0x24>
 800a9a4:	6810      	ldr	r0, [r2, #0]
 800a9a6:	6852      	ldr	r2, [r2, #4]
 800a9a8:	605a      	str	r2, [r3, #4]
 800a9aa:	4401      	add	r1, r0
 800a9ac:	6019      	str	r1, [r3, #0]
 800a9ae:	e7d7      	b.n	800a960 <_free_r+0x24>
 800a9b0:	d902      	bls.n	800a9b8 <_free_r+0x7c>
 800a9b2:	230c      	movs	r3, #12
 800a9b4:	602b      	str	r3, [r5, #0]
 800a9b6:	e7d3      	b.n	800a960 <_free_r+0x24>
 800a9b8:	6820      	ldr	r0, [r4, #0]
 800a9ba:	1821      	adds	r1, r4, r0
 800a9bc:	428a      	cmp	r2, r1
 800a9be:	bf04      	itt	eq
 800a9c0:	6811      	ldreq	r1, [r2, #0]
 800a9c2:	6852      	ldreq	r2, [r2, #4]
 800a9c4:	6062      	str	r2, [r4, #4]
 800a9c6:	bf04      	itt	eq
 800a9c8:	1809      	addeq	r1, r1, r0
 800a9ca:	6021      	streq	r1, [r4, #0]
 800a9cc:	605c      	str	r4, [r3, #4]
 800a9ce:	e7c7      	b.n	800a960 <_free_r+0x24>
 800a9d0:	bd38      	pop	{r3, r4, r5, pc}
 800a9d2:	bf00      	nop
 800a9d4:	2000022c 	.word	0x2000022c

0800a9d8 <_malloc_r>:
 800a9d8:	b570      	push	{r4, r5, r6, lr}
 800a9da:	1ccd      	adds	r5, r1, #3
 800a9dc:	f025 0503 	bic.w	r5, r5, #3
 800a9e0:	3508      	adds	r5, #8
 800a9e2:	2d0c      	cmp	r5, #12
 800a9e4:	bf38      	it	cc
 800a9e6:	250c      	movcc	r5, #12
 800a9e8:	2d00      	cmp	r5, #0
 800a9ea:	4606      	mov	r6, r0
 800a9ec:	db01      	blt.n	800a9f2 <_malloc_r+0x1a>
 800a9ee:	42a9      	cmp	r1, r5
 800a9f0:	d903      	bls.n	800a9fa <_malloc_r+0x22>
 800a9f2:	230c      	movs	r3, #12
 800a9f4:	6033      	str	r3, [r6, #0]
 800a9f6:	2000      	movs	r0, #0
 800a9f8:	bd70      	pop	{r4, r5, r6, pc}
 800a9fa:	f000 f9d4 	bl	800ada6 <__malloc_lock>
 800a9fe:	4a21      	ldr	r2, [pc, #132]	; (800aa84 <_malloc_r+0xac>)
 800aa00:	6814      	ldr	r4, [r2, #0]
 800aa02:	4621      	mov	r1, r4
 800aa04:	b991      	cbnz	r1, 800aa2c <_malloc_r+0x54>
 800aa06:	4c20      	ldr	r4, [pc, #128]	; (800aa88 <_malloc_r+0xb0>)
 800aa08:	6823      	ldr	r3, [r4, #0]
 800aa0a:	b91b      	cbnz	r3, 800aa14 <_malloc_r+0x3c>
 800aa0c:	4630      	mov	r0, r6
 800aa0e:	f000 f98f 	bl	800ad30 <_sbrk_r>
 800aa12:	6020      	str	r0, [r4, #0]
 800aa14:	4629      	mov	r1, r5
 800aa16:	4630      	mov	r0, r6
 800aa18:	f000 f98a 	bl	800ad30 <_sbrk_r>
 800aa1c:	1c43      	adds	r3, r0, #1
 800aa1e:	d124      	bne.n	800aa6a <_malloc_r+0x92>
 800aa20:	230c      	movs	r3, #12
 800aa22:	6033      	str	r3, [r6, #0]
 800aa24:	4630      	mov	r0, r6
 800aa26:	f000 f9bf 	bl	800ada8 <__malloc_unlock>
 800aa2a:	e7e4      	b.n	800a9f6 <_malloc_r+0x1e>
 800aa2c:	680b      	ldr	r3, [r1, #0]
 800aa2e:	1b5b      	subs	r3, r3, r5
 800aa30:	d418      	bmi.n	800aa64 <_malloc_r+0x8c>
 800aa32:	2b0b      	cmp	r3, #11
 800aa34:	d90f      	bls.n	800aa56 <_malloc_r+0x7e>
 800aa36:	600b      	str	r3, [r1, #0]
 800aa38:	50cd      	str	r5, [r1, r3]
 800aa3a:	18cc      	adds	r4, r1, r3
 800aa3c:	4630      	mov	r0, r6
 800aa3e:	f000 f9b3 	bl	800ada8 <__malloc_unlock>
 800aa42:	f104 000b 	add.w	r0, r4, #11
 800aa46:	1d23      	adds	r3, r4, #4
 800aa48:	f020 0007 	bic.w	r0, r0, #7
 800aa4c:	1ac3      	subs	r3, r0, r3
 800aa4e:	d0d3      	beq.n	800a9f8 <_malloc_r+0x20>
 800aa50:	425a      	negs	r2, r3
 800aa52:	50e2      	str	r2, [r4, r3]
 800aa54:	e7d0      	b.n	800a9f8 <_malloc_r+0x20>
 800aa56:	428c      	cmp	r4, r1
 800aa58:	684b      	ldr	r3, [r1, #4]
 800aa5a:	bf16      	itet	ne
 800aa5c:	6063      	strne	r3, [r4, #4]
 800aa5e:	6013      	streq	r3, [r2, #0]
 800aa60:	460c      	movne	r4, r1
 800aa62:	e7eb      	b.n	800aa3c <_malloc_r+0x64>
 800aa64:	460c      	mov	r4, r1
 800aa66:	6849      	ldr	r1, [r1, #4]
 800aa68:	e7cc      	b.n	800aa04 <_malloc_r+0x2c>
 800aa6a:	1cc4      	adds	r4, r0, #3
 800aa6c:	f024 0403 	bic.w	r4, r4, #3
 800aa70:	42a0      	cmp	r0, r4
 800aa72:	d005      	beq.n	800aa80 <_malloc_r+0xa8>
 800aa74:	1a21      	subs	r1, r4, r0
 800aa76:	4630      	mov	r0, r6
 800aa78:	f000 f95a 	bl	800ad30 <_sbrk_r>
 800aa7c:	3001      	adds	r0, #1
 800aa7e:	d0cf      	beq.n	800aa20 <_malloc_r+0x48>
 800aa80:	6025      	str	r5, [r4, #0]
 800aa82:	e7db      	b.n	800aa3c <_malloc_r+0x64>
 800aa84:	2000022c 	.word	0x2000022c
 800aa88:	20000230 	.word	0x20000230

0800aa8c <__ssputs_r>:
 800aa8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa90:	688e      	ldr	r6, [r1, #8]
 800aa92:	429e      	cmp	r6, r3
 800aa94:	4682      	mov	sl, r0
 800aa96:	460c      	mov	r4, r1
 800aa98:	4690      	mov	r8, r2
 800aa9a:	4699      	mov	r9, r3
 800aa9c:	d837      	bhi.n	800ab0e <__ssputs_r+0x82>
 800aa9e:	898a      	ldrh	r2, [r1, #12]
 800aaa0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aaa4:	d031      	beq.n	800ab0a <__ssputs_r+0x7e>
 800aaa6:	6825      	ldr	r5, [r4, #0]
 800aaa8:	6909      	ldr	r1, [r1, #16]
 800aaaa:	1a6f      	subs	r7, r5, r1
 800aaac:	6965      	ldr	r5, [r4, #20]
 800aaae:	2302      	movs	r3, #2
 800aab0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aab4:	fb95 f5f3 	sdiv	r5, r5, r3
 800aab8:	f109 0301 	add.w	r3, r9, #1
 800aabc:	443b      	add	r3, r7
 800aabe:	429d      	cmp	r5, r3
 800aac0:	bf38      	it	cc
 800aac2:	461d      	movcc	r5, r3
 800aac4:	0553      	lsls	r3, r2, #21
 800aac6:	d530      	bpl.n	800ab2a <__ssputs_r+0x9e>
 800aac8:	4629      	mov	r1, r5
 800aaca:	f7ff ff85 	bl	800a9d8 <_malloc_r>
 800aace:	4606      	mov	r6, r0
 800aad0:	b950      	cbnz	r0, 800aae8 <__ssputs_r+0x5c>
 800aad2:	230c      	movs	r3, #12
 800aad4:	f8ca 3000 	str.w	r3, [sl]
 800aad8:	89a3      	ldrh	r3, [r4, #12]
 800aada:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aade:	81a3      	strh	r3, [r4, #12]
 800aae0:	f04f 30ff 	mov.w	r0, #4294967295
 800aae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aae8:	463a      	mov	r2, r7
 800aaea:	6921      	ldr	r1, [r4, #16]
 800aaec:	f7ff fc32 	bl	800a354 <memcpy>
 800aaf0:	89a3      	ldrh	r3, [r4, #12]
 800aaf2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aaf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aafa:	81a3      	strh	r3, [r4, #12]
 800aafc:	6126      	str	r6, [r4, #16]
 800aafe:	6165      	str	r5, [r4, #20]
 800ab00:	443e      	add	r6, r7
 800ab02:	1bed      	subs	r5, r5, r7
 800ab04:	6026      	str	r6, [r4, #0]
 800ab06:	60a5      	str	r5, [r4, #8]
 800ab08:	464e      	mov	r6, r9
 800ab0a:	454e      	cmp	r6, r9
 800ab0c:	d900      	bls.n	800ab10 <__ssputs_r+0x84>
 800ab0e:	464e      	mov	r6, r9
 800ab10:	4632      	mov	r2, r6
 800ab12:	4641      	mov	r1, r8
 800ab14:	6820      	ldr	r0, [r4, #0]
 800ab16:	f000 f92d 	bl	800ad74 <memmove>
 800ab1a:	68a3      	ldr	r3, [r4, #8]
 800ab1c:	1b9b      	subs	r3, r3, r6
 800ab1e:	60a3      	str	r3, [r4, #8]
 800ab20:	6823      	ldr	r3, [r4, #0]
 800ab22:	441e      	add	r6, r3
 800ab24:	6026      	str	r6, [r4, #0]
 800ab26:	2000      	movs	r0, #0
 800ab28:	e7dc      	b.n	800aae4 <__ssputs_r+0x58>
 800ab2a:	462a      	mov	r2, r5
 800ab2c:	f000 f93d 	bl	800adaa <_realloc_r>
 800ab30:	4606      	mov	r6, r0
 800ab32:	2800      	cmp	r0, #0
 800ab34:	d1e2      	bne.n	800aafc <__ssputs_r+0x70>
 800ab36:	6921      	ldr	r1, [r4, #16]
 800ab38:	4650      	mov	r0, sl
 800ab3a:	f7ff feff 	bl	800a93c <_free_r>
 800ab3e:	e7c8      	b.n	800aad2 <__ssputs_r+0x46>

0800ab40 <_svfiprintf_r>:
 800ab40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab44:	461d      	mov	r5, r3
 800ab46:	898b      	ldrh	r3, [r1, #12]
 800ab48:	061f      	lsls	r7, r3, #24
 800ab4a:	b09d      	sub	sp, #116	; 0x74
 800ab4c:	4680      	mov	r8, r0
 800ab4e:	460c      	mov	r4, r1
 800ab50:	4616      	mov	r6, r2
 800ab52:	d50f      	bpl.n	800ab74 <_svfiprintf_r+0x34>
 800ab54:	690b      	ldr	r3, [r1, #16]
 800ab56:	b96b      	cbnz	r3, 800ab74 <_svfiprintf_r+0x34>
 800ab58:	2140      	movs	r1, #64	; 0x40
 800ab5a:	f7ff ff3d 	bl	800a9d8 <_malloc_r>
 800ab5e:	6020      	str	r0, [r4, #0]
 800ab60:	6120      	str	r0, [r4, #16]
 800ab62:	b928      	cbnz	r0, 800ab70 <_svfiprintf_r+0x30>
 800ab64:	230c      	movs	r3, #12
 800ab66:	f8c8 3000 	str.w	r3, [r8]
 800ab6a:	f04f 30ff 	mov.w	r0, #4294967295
 800ab6e:	e0c8      	b.n	800ad02 <_svfiprintf_r+0x1c2>
 800ab70:	2340      	movs	r3, #64	; 0x40
 800ab72:	6163      	str	r3, [r4, #20]
 800ab74:	2300      	movs	r3, #0
 800ab76:	9309      	str	r3, [sp, #36]	; 0x24
 800ab78:	2320      	movs	r3, #32
 800ab7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab7e:	2330      	movs	r3, #48	; 0x30
 800ab80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab84:	9503      	str	r5, [sp, #12]
 800ab86:	f04f 0b01 	mov.w	fp, #1
 800ab8a:	4637      	mov	r7, r6
 800ab8c:	463d      	mov	r5, r7
 800ab8e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ab92:	b10b      	cbz	r3, 800ab98 <_svfiprintf_r+0x58>
 800ab94:	2b25      	cmp	r3, #37	; 0x25
 800ab96:	d13e      	bne.n	800ac16 <_svfiprintf_r+0xd6>
 800ab98:	ebb7 0a06 	subs.w	sl, r7, r6
 800ab9c:	d00b      	beq.n	800abb6 <_svfiprintf_r+0x76>
 800ab9e:	4653      	mov	r3, sl
 800aba0:	4632      	mov	r2, r6
 800aba2:	4621      	mov	r1, r4
 800aba4:	4640      	mov	r0, r8
 800aba6:	f7ff ff71 	bl	800aa8c <__ssputs_r>
 800abaa:	3001      	adds	r0, #1
 800abac:	f000 80a4 	beq.w	800acf8 <_svfiprintf_r+0x1b8>
 800abb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abb2:	4453      	add	r3, sl
 800abb4:	9309      	str	r3, [sp, #36]	; 0x24
 800abb6:	783b      	ldrb	r3, [r7, #0]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	f000 809d 	beq.w	800acf8 <_svfiprintf_r+0x1b8>
 800abbe:	2300      	movs	r3, #0
 800abc0:	f04f 32ff 	mov.w	r2, #4294967295
 800abc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abc8:	9304      	str	r3, [sp, #16]
 800abca:	9307      	str	r3, [sp, #28]
 800abcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800abd0:	931a      	str	r3, [sp, #104]	; 0x68
 800abd2:	462f      	mov	r7, r5
 800abd4:	2205      	movs	r2, #5
 800abd6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800abda:	4850      	ldr	r0, [pc, #320]	; (800ad1c <_svfiprintf_r+0x1dc>)
 800abdc:	f7f5 faf8 	bl	80001d0 <memchr>
 800abe0:	9b04      	ldr	r3, [sp, #16]
 800abe2:	b9d0      	cbnz	r0, 800ac1a <_svfiprintf_r+0xda>
 800abe4:	06d9      	lsls	r1, r3, #27
 800abe6:	bf44      	itt	mi
 800abe8:	2220      	movmi	r2, #32
 800abea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800abee:	071a      	lsls	r2, r3, #28
 800abf0:	bf44      	itt	mi
 800abf2:	222b      	movmi	r2, #43	; 0x2b
 800abf4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800abf8:	782a      	ldrb	r2, [r5, #0]
 800abfa:	2a2a      	cmp	r2, #42	; 0x2a
 800abfc:	d015      	beq.n	800ac2a <_svfiprintf_r+0xea>
 800abfe:	9a07      	ldr	r2, [sp, #28]
 800ac00:	462f      	mov	r7, r5
 800ac02:	2000      	movs	r0, #0
 800ac04:	250a      	movs	r5, #10
 800ac06:	4639      	mov	r1, r7
 800ac08:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac0c:	3b30      	subs	r3, #48	; 0x30
 800ac0e:	2b09      	cmp	r3, #9
 800ac10:	d94d      	bls.n	800acae <_svfiprintf_r+0x16e>
 800ac12:	b1b8      	cbz	r0, 800ac44 <_svfiprintf_r+0x104>
 800ac14:	e00f      	b.n	800ac36 <_svfiprintf_r+0xf6>
 800ac16:	462f      	mov	r7, r5
 800ac18:	e7b8      	b.n	800ab8c <_svfiprintf_r+0x4c>
 800ac1a:	4a40      	ldr	r2, [pc, #256]	; (800ad1c <_svfiprintf_r+0x1dc>)
 800ac1c:	1a80      	subs	r0, r0, r2
 800ac1e:	fa0b f000 	lsl.w	r0, fp, r0
 800ac22:	4318      	orrs	r0, r3
 800ac24:	9004      	str	r0, [sp, #16]
 800ac26:	463d      	mov	r5, r7
 800ac28:	e7d3      	b.n	800abd2 <_svfiprintf_r+0x92>
 800ac2a:	9a03      	ldr	r2, [sp, #12]
 800ac2c:	1d11      	adds	r1, r2, #4
 800ac2e:	6812      	ldr	r2, [r2, #0]
 800ac30:	9103      	str	r1, [sp, #12]
 800ac32:	2a00      	cmp	r2, #0
 800ac34:	db01      	blt.n	800ac3a <_svfiprintf_r+0xfa>
 800ac36:	9207      	str	r2, [sp, #28]
 800ac38:	e004      	b.n	800ac44 <_svfiprintf_r+0x104>
 800ac3a:	4252      	negs	r2, r2
 800ac3c:	f043 0302 	orr.w	r3, r3, #2
 800ac40:	9207      	str	r2, [sp, #28]
 800ac42:	9304      	str	r3, [sp, #16]
 800ac44:	783b      	ldrb	r3, [r7, #0]
 800ac46:	2b2e      	cmp	r3, #46	; 0x2e
 800ac48:	d10c      	bne.n	800ac64 <_svfiprintf_r+0x124>
 800ac4a:	787b      	ldrb	r3, [r7, #1]
 800ac4c:	2b2a      	cmp	r3, #42	; 0x2a
 800ac4e:	d133      	bne.n	800acb8 <_svfiprintf_r+0x178>
 800ac50:	9b03      	ldr	r3, [sp, #12]
 800ac52:	1d1a      	adds	r2, r3, #4
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	9203      	str	r2, [sp, #12]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	bfb8      	it	lt
 800ac5c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ac60:	3702      	adds	r7, #2
 800ac62:	9305      	str	r3, [sp, #20]
 800ac64:	4d2e      	ldr	r5, [pc, #184]	; (800ad20 <_svfiprintf_r+0x1e0>)
 800ac66:	7839      	ldrb	r1, [r7, #0]
 800ac68:	2203      	movs	r2, #3
 800ac6a:	4628      	mov	r0, r5
 800ac6c:	f7f5 fab0 	bl	80001d0 <memchr>
 800ac70:	b138      	cbz	r0, 800ac82 <_svfiprintf_r+0x142>
 800ac72:	2340      	movs	r3, #64	; 0x40
 800ac74:	1b40      	subs	r0, r0, r5
 800ac76:	fa03 f000 	lsl.w	r0, r3, r0
 800ac7a:	9b04      	ldr	r3, [sp, #16]
 800ac7c:	4303      	orrs	r3, r0
 800ac7e:	3701      	adds	r7, #1
 800ac80:	9304      	str	r3, [sp, #16]
 800ac82:	7839      	ldrb	r1, [r7, #0]
 800ac84:	4827      	ldr	r0, [pc, #156]	; (800ad24 <_svfiprintf_r+0x1e4>)
 800ac86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ac8a:	2206      	movs	r2, #6
 800ac8c:	1c7e      	adds	r6, r7, #1
 800ac8e:	f7f5 fa9f 	bl	80001d0 <memchr>
 800ac92:	2800      	cmp	r0, #0
 800ac94:	d038      	beq.n	800ad08 <_svfiprintf_r+0x1c8>
 800ac96:	4b24      	ldr	r3, [pc, #144]	; (800ad28 <_svfiprintf_r+0x1e8>)
 800ac98:	bb13      	cbnz	r3, 800ace0 <_svfiprintf_r+0x1a0>
 800ac9a:	9b03      	ldr	r3, [sp, #12]
 800ac9c:	3307      	adds	r3, #7
 800ac9e:	f023 0307 	bic.w	r3, r3, #7
 800aca2:	3308      	adds	r3, #8
 800aca4:	9303      	str	r3, [sp, #12]
 800aca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aca8:	444b      	add	r3, r9
 800acaa:	9309      	str	r3, [sp, #36]	; 0x24
 800acac:	e76d      	b.n	800ab8a <_svfiprintf_r+0x4a>
 800acae:	fb05 3202 	mla	r2, r5, r2, r3
 800acb2:	2001      	movs	r0, #1
 800acb4:	460f      	mov	r7, r1
 800acb6:	e7a6      	b.n	800ac06 <_svfiprintf_r+0xc6>
 800acb8:	2300      	movs	r3, #0
 800acba:	3701      	adds	r7, #1
 800acbc:	9305      	str	r3, [sp, #20]
 800acbe:	4619      	mov	r1, r3
 800acc0:	250a      	movs	r5, #10
 800acc2:	4638      	mov	r0, r7
 800acc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acc8:	3a30      	subs	r2, #48	; 0x30
 800acca:	2a09      	cmp	r2, #9
 800accc:	d903      	bls.n	800acd6 <_svfiprintf_r+0x196>
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d0c8      	beq.n	800ac64 <_svfiprintf_r+0x124>
 800acd2:	9105      	str	r1, [sp, #20]
 800acd4:	e7c6      	b.n	800ac64 <_svfiprintf_r+0x124>
 800acd6:	fb05 2101 	mla	r1, r5, r1, r2
 800acda:	2301      	movs	r3, #1
 800acdc:	4607      	mov	r7, r0
 800acde:	e7f0      	b.n	800acc2 <_svfiprintf_r+0x182>
 800ace0:	ab03      	add	r3, sp, #12
 800ace2:	9300      	str	r3, [sp, #0]
 800ace4:	4622      	mov	r2, r4
 800ace6:	4b11      	ldr	r3, [pc, #68]	; (800ad2c <_svfiprintf_r+0x1ec>)
 800ace8:	a904      	add	r1, sp, #16
 800acea:	4640      	mov	r0, r8
 800acec:	f7fe f8f0 	bl	8008ed0 <_printf_float>
 800acf0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800acf4:	4681      	mov	r9, r0
 800acf6:	d1d6      	bne.n	800aca6 <_svfiprintf_r+0x166>
 800acf8:	89a3      	ldrh	r3, [r4, #12]
 800acfa:	065b      	lsls	r3, r3, #25
 800acfc:	f53f af35 	bmi.w	800ab6a <_svfiprintf_r+0x2a>
 800ad00:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad02:	b01d      	add	sp, #116	; 0x74
 800ad04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad08:	ab03      	add	r3, sp, #12
 800ad0a:	9300      	str	r3, [sp, #0]
 800ad0c:	4622      	mov	r2, r4
 800ad0e:	4b07      	ldr	r3, [pc, #28]	; (800ad2c <_svfiprintf_r+0x1ec>)
 800ad10:	a904      	add	r1, sp, #16
 800ad12:	4640      	mov	r0, r8
 800ad14:	f7fe fb92 	bl	800943c <_printf_i>
 800ad18:	e7ea      	b.n	800acf0 <_svfiprintf_r+0x1b0>
 800ad1a:	bf00      	nop
 800ad1c:	0800c14c 	.word	0x0800c14c
 800ad20:	0800c152 	.word	0x0800c152
 800ad24:	0800c156 	.word	0x0800c156
 800ad28:	08008ed1 	.word	0x08008ed1
 800ad2c:	0800aa8d 	.word	0x0800aa8d

0800ad30 <_sbrk_r>:
 800ad30:	b538      	push	{r3, r4, r5, lr}
 800ad32:	4c06      	ldr	r4, [pc, #24]	; (800ad4c <_sbrk_r+0x1c>)
 800ad34:	2300      	movs	r3, #0
 800ad36:	4605      	mov	r5, r0
 800ad38:	4608      	mov	r0, r1
 800ad3a:	6023      	str	r3, [r4, #0]
 800ad3c:	f7f9 f9fa 	bl	8004134 <_sbrk>
 800ad40:	1c43      	adds	r3, r0, #1
 800ad42:	d102      	bne.n	800ad4a <_sbrk_r+0x1a>
 800ad44:	6823      	ldr	r3, [r4, #0]
 800ad46:	b103      	cbz	r3, 800ad4a <_sbrk_r+0x1a>
 800ad48:	602b      	str	r3, [r5, #0]
 800ad4a:	bd38      	pop	{r3, r4, r5, pc}
 800ad4c:	20000bb0 	.word	0x20000bb0

0800ad50 <__ascii_mbtowc>:
 800ad50:	b082      	sub	sp, #8
 800ad52:	b901      	cbnz	r1, 800ad56 <__ascii_mbtowc+0x6>
 800ad54:	a901      	add	r1, sp, #4
 800ad56:	b142      	cbz	r2, 800ad6a <__ascii_mbtowc+0x1a>
 800ad58:	b14b      	cbz	r3, 800ad6e <__ascii_mbtowc+0x1e>
 800ad5a:	7813      	ldrb	r3, [r2, #0]
 800ad5c:	600b      	str	r3, [r1, #0]
 800ad5e:	7812      	ldrb	r2, [r2, #0]
 800ad60:	1c10      	adds	r0, r2, #0
 800ad62:	bf18      	it	ne
 800ad64:	2001      	movne	r0, #1
 800ad66:	b002      	add	sp, #8
 800ad68:	4770      	bx	lr
 800ad6a:	4610      	mov	r0, r2
 800ad6c:	e7fb      	b.n	800ad66 <__ascii_mbtowc+0x16>
 800ad6e:	f06f 0001 	mvn.w	r0, #1
 800ad72:	e7f8      	b.n	800ad66 <__ascii_mbtowc+0x16>

0800ad74 <memmove>:
 800ad74:	4288      	cmp	r0, r1
 800ad76:	b510      	push	{r4, lr}
 800ad78:	eb01 0302 	add.w	r3, r1, r2
 800ad7c:	d807      	bhi.n	800ad8e <memmove+0x1a>
 800ad7e:	1e42      	subs	r2, r0, #1
 800ad80:	4299      	cmp	r1, r3
 800ad82:	d00a      	beq.n	800ad9a <memmove+0x26>
 800ad84:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad88:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ad8c:	e7f8      	b.n	800ad80 <memmove+0xc>
 800ad8e:	4283      	cmp	r3, r0
 800ad90:	d9f5      	bls.n	800ad7e <memmove+0xa>
 800ad92:	1881      	adds	r1, r0, r2
 800ad94:	1ad2      	subs	r2, r2, r3
 800ad96:	42d3      	cmn	r3, r2
 800ad98:	d100      	bne.n	800ad9c <memmove+0x28>
 800ad9a:	bd10      	pop	{r4, pc}
 800ad9c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ada0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ada4:	e7f7      	b.n	800ad96 <memmove+0x22>

0800ada6 <__malloc_lock>:
 800ada6:	4770      	bx	lr

0800ada8 <__malloc_unlock>:
 800ada8:	4770      	bx	lr

0800adaa <_realloc_r>:
 800adaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adac:	4607      	mov	r7, r0
 800adae:	4614      	mov	r4, r2
 800adb0:	460e      	mov	r6, r1
 800adb2:	b921      	cbnz	r1, 800adbe <_realloc_r+0x14>
 800adb4:	4611      	mov	r1, r2
 800adb6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800adba:	f7ff be0d 	b.w	800a9d8 <_malloc_r>
 800adbe:	b922      	cbnz	r2, 800adca <_realloc_r+0x20>
 800adc0:	f7ff fdbc 	bl	800a93c <_free_r>
 800adc4:	4625      	mov	r5, r4
 800adc6:	4628      	mov	r0, r5
 800adc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800adca:	f000 f821 	bl	800ae10 <_malloc_usable_size_r>
 800adce:	42a0      	cmp	r0, r4
 800add0:	d20f      	bcs.n	800adf2 <_realloc_r+0x48>
 800add2:	4621      	mov	r1, r4
 800add4:	4638      	mov	r0, r7
 800add6:	f7ff fdff 	bl	800a9d8 <_malloc_r>
 800adda:	4605      	mov	r5, r0
 800addc:	2800      	cmp	r0, #0
 800adde:	d0f2      	beq.n	800adc6 <_realloc_r+0x1c>
 800ade0:	4631      	mov	r1, r6
 800ade2:	4622      	mov	r2, r4
 800ade4:	f7ff fab6 	bl	800a354 <memcpy>
 800ade8:	4631      	mov	r1, r6
 800adea:	4638      	mov	r0, r7
 800adec:	f7ff fda6 	bl	800a93c <_free_r>
 800adf0:	e7e9      	b.n	800adc6 <_realloc_r+0x1c>
 800adf2:	4635      	mov	r5, r6
 800adf4:	e7e7      	b.n	800adc6 <_realloc_r+0x1c>

0800adf6 <__ascii_wctomb>:
 800adf6:	b149      	cbz	r1, 800ae0c <__ascii_wctomb+0x16>
 800adf8:	2aff      	cmp	r2, #255	; 0xff
 800adfa:	bf85      	ittet	hi
 800adfc:	238a      	movhi	r3, #138	; 0x8a
 800adfe:	6003      	strhi	r3, [r0, #0]
 800ae00:	700a      	strbls	r2, [r1, #0]
 800ae02:	f04f 30ff 	movhi.w	r0, #4294967295
 800ae06:	bf98      	it	ls
 800ae08:	2001      	movls	r0, #1
 800ae0a:	4770      	bx	lr
 800ae0c:	4608      	mov	r0, r1
 800ae0e:	4770      	bx	lr

0800ae10 <_malloc_usable_size_r>:
 800ae10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae14:	1f18      	subs	r0, r3, #4
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	bfbc      	itt	lt
 800ae1a:	580b      	ldrlt	r3, [r1, r0]
 800ae1c:	18c0      	addlt	r0, r0, r3
 800ae1e:	4770      	bx	lr

0800ae20 <pow>:
 800ae20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae24:	ed2d 8b04 	vpush	{d8-d9}
 800ae28:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800b0fc <pow+0x2dc>
 800ae2c:	b08d      	sub	sp, #52	; 0x34
 800ae2e:	ec57 6b10 	vmov	r6, r7, d0
 800ae32:	ec55 4b11 	vmov	r4, r5, d1
 800ae36:	f000 f963 	bl	800b100 <__ieee754_pow>
 800ae3a:	f999 3000 	ldrsb.w	r3, [r9]
 800ae3e:	9300      	str	r3, [sp, #0]
 800ae40:	3301      	adds	r3, #1
 800ae42:	eeb0 8a40 	vmov.f32	s16, s0
 800ae46:	eef0 8a60 	vmov.f32	s17, s1
 800ae4a:	46c8      	mov	r8, r9
 800ae4c:	d05f      	beq.n	800af0e <pow+0xee>
 800ae4e:	4622      	mov	r2, r4
 800ae50:	462b      	mov	r3, r5
 800ae52:	4620      	mov	r0, r4
 800ae54:	4629      	mov	r1, r5
 800ae56:	f7f5 fe69 	bl	8000b2c <__aeabi_dcmpun>
 800ae5a:	4683      	mov	fp, r0
 800ae5c:	2800      	cmp	r0, #0
 800ae5e:	d156      	bne.n	800af0e <pow+0xee>
 800ae60:	4632      	mov	r2, r6
 800ae62:	463b      	mov	r3, r7
 800ae64:	4630      	mov	r0, r6
 800ae66:	4639      	mov	r1, r7
 800ae68:	f7f5 fe60 	bl	8000b2c <__aeabi_dcmpun>
 800ae6c:	9001      	str	r0, [sp, #4]
 800ae6e:	b1e8      	cbz	r0, 800aeac <pow+0x8c>
 800ae70:	2200      	movs	r2, #0
 800ae72:	2300      	movs	r3, #0
 800ae74:	4620      	mov	r0, r4
 800ae76:	4629      	mov	r1, r5
 800ae78:	f7f5 fe26 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae7c:	2800      	cmp	r0, #0
 800ae7e:	d046      	beq.n	800af0e <pow+0xee>
 800ae80:	2301      	movs	r3, #1
 800ae82:	9302      	str	r3, [sp, #8]
 800ae84:	4b96      	ldr	r3, [pc, #600]	; (800b0e0 <pow+0x2c0>)
 800ae86:	9303      	str	r3, [sp, #12]
 800ae88:	4b96      	ldr	r3, [pc, #600]	; (800b0e4 <pow+0x2c4>)
 800ae8a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800ae8e:	2200      	movs	r2, #0
 800ae90:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ae94:	9b00      	ldr	r3, [sp, #0]
 800ae96:	2b02      	cmp	r3, #2
 800ae98:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800ae9c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800aea0:	d033      	beq.n	800af0a <pow+0xea>
 800aea2:	a802      	add	r0, sp, #8
 800aea4:	f000 fefb 	bl	800bc9e <matherr>
 800aea8:	bb48      	cbnz	r0, 800aefe <pow+0xde>
 800aeaa:	e05d      	b.n	800af68 <pow+0x148>
 800aeac:	f04f 0a00 	mov.w	sl, #0
 800aeb0:	f04f 0b00 	mov.w	fp, #0
 800aeb4:	4652      	mov	r2, sl
 800aeb6:	465b      	mov	r3, fp
 800aeb8:	4630      	mov	r0, r6
 800aeba:	4639      	mov	r1, r7
 800aebc:	f7f5 fe04 	bl	8000ac8 <__aeabi_dcmpeq>
 800aec0:	ec4b ab19 	vmov	d9, sl, fp
 800aec4:	2800      	cmp	r0, #0
 800aec6:	d054      	beq.n	800af72 <pow+0x152>
 800aec8:	4652      	mov	r2, sl
 800aeca:	465b      	mov	r3, fp
 800aecc:	4620      	mov	r0, r4
 800aece:	4629      	mov	r1, r5
 800aed0:	f7f5 fdfa 	bl	8000ac8 <__aeabi_dcmpeq>
 800aed4:	4680      	mov	r8, r0
 800aed6:	b318      	cbz	r0, 800af20 <pow+0x100>
 800aed8:	2301      	movs	r3, #1
 800aeda:	9302      	str	r3, [sp, #8]
 800aedc:	4b80      	ldr	r3, [pc, #512]	; (800b0e0 <pow+0x2c0>)
 800aede:	9303      	str	r3, [sp, #12]
 800aee0:	9b01      	ldr	r3, [sp, #4]
 800aee2:	930a      	str	r3, [sp, #40]	; 0x28
 800aee4:	9b00      	ldr	r3, [sp, #0]
 800aee6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800aeea:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800aeee:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d0d5      	beq.n	800aea2 <pow+0x82>
 800aef6:	4b7b      	ldr	r3, [pc, #492]	; (800b0e4 <pow+0x2c4>)
 800aef8:	2200      	movs	r2, #0
 800aefa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800aefe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af00:	b11b      	cbz	r3, 800af0a <pow+0xea>
 800af02:	f7fd ff1f 	bl	8008d44 <__errno>
 800af06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af08:	6003      	str	r3, [r0, #0]
 800af0a:	ed9d 8b08 	vldr	d8, [sp, #32]
 800af0e:	eeb0 0a48 	vmov.f32	s0, s16
 800af12:	eef0 0a68 	vmov.f32	s1, s17
 800af16:	b00d      	add	sp, #52	; 0x34
 800af18:	ecbd 8b04 	vpop	{d8-d9}
 800af1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af20:	ec45 4b10 	vmov	d0, r4, r5
 800af24:	f000 feb3 	bl	800bc8e <finite>
 800af28:	2800      	cmp	r0, #0
 800af2a:	d0f0      	beq.n	800af0e <pow+0xee>
 800af2c:	4652      	mov	r2, sl
 800af2e:	465b      	mov	r3, fp
 800af30:	4620      	mov	r0, r4
 800af32:	4629      	mov	r1, r5
 800af34:	f7f5 fdd2 	bl	8000adc <__aeabi_dcmplt>
 800af38:	2800      	cmp	r0, #0
 800af3a:	d0e8      	beq.n	800af0e <pow+0xee>
 800af3c:	2301      	movs	r3, #1
 800af3e:	9302      	str	r3, [sp, #8]
 800af40:	4b67      	ldr	r3, [pc, #412]	; (800b0e0 <pow+0x2c0>)
 800af42:	9303      	str	r3, [sp, #12]
 800af44:	f999 3000 	ldrsb.w	r3, [r9]
 800af48:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800af4c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800af50:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800af54:	b913      	cbnz	r3, 800af5c <pow+0x13c>
 800af56:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800af5a:	e7a2      	b.n	800aea2 <pow+0x82>
 800af5c:	4962      	ldr	r1, [pc, #392]	; (800b0e8 <pow+0x2c8>)
 800af5e:	2000      	movs	r0, #0
 800af60:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800af64:	2b02      	cmp	r3, #2
 800af66:	d19c      	bne.n	800aea2 <pow+0x82>
 800af68:	f7fd feec 	bl	8008d44 <__errno>
 800af6c:	2321      	movs	r3, #33	; 0x21
 800af6e:	6003      	str	r3, [r0, #0]
 800af70:	e7c5      	b.n	800aefe <pow+0xde>
 800af72:	eeb0 0a48 	vmov.f32	s0, s16
 800af76:	eef0 0a68 	vmov.f32	s1, s17
 800af7a:	f000 fe88 	bl	800bc8e <finite>
 800af7e:	9000      	str	r0, [sp, #0]
 800af80:	2800      	cmp	r0, #0
 800af82:	f040 8081 	bne.w	800b088 <pow+0x268>
 800af86:	ec47 6b10 	vmov	d0, r6, r7
 800af8a:	f000 fe80 	bl	800bc8e <finite>
 800af8e:	2800      	cmp	r0, #0
 800af90:	d07a      	beq.n	800b088 <pow+0x268>
 800af92:	ec45 4b10 	vmov	d0, r4, r5
 800af96:	f000 fe7a 	bl	800bc8e <finite>
 800af9a:	2800      	cmp	r0, #0
 800af9c:	d074      	beq.n	800b088 <pow+0x268>
 800af9e:	ec53 2b18 	vmov	r2, r3, d8
 800afa2:	ee18 0a10 	vmov	r0, s16
 800afa6:	4619      	mov	r1, r3
 800afa8:	f7f5 fdc0 	bl	8000b2c <__aeabi_dcmpun>
 800afac:	f999 9000 	ldrsb.w	r9, [r9]
 800afb0:	4b4b      	ldr	r3, [pc, #300]	; (800b0e0 <pow+0x2c0>)
 800afb2:	b1b0      	cbz	r0, 800afe2 <pow+0x1c2>
 800afb4:	2201      	movs	r2, #1
 800afb6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800afba:	9b00      	ldr	r3, [sp, #0]
 800afbc:	930a      	str	r3, [sp, #40]	; 0x28
 800afbe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800afc2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800afc6:	f1b9 0f00 	cmp.w	r9, #0
 800afca:	d0c4      	beq.n	800af56 <pow+0x136>
 800afcc:	4652      	mov	r2, sl
 800afce:	465b      	mov	r3, fp
 800afd0:	4650      	mov	r0, sl
 800afd2:	4659      	mov	r1, fp
 800afd4:	f7f5 fc3a 	bl	800084c <__aeabi_ddiv>
 800afd8:	f1b9 0f02 	cmp.w	r9, #2
 800afdc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800afe0:	e7c1      	b.n	800af66 <pow+0x146>
 800afe2:	2203      	movs	r2, #3
 800afe4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800afe8:	900a      	str	r0, [sp, #40]	; 0x28
 800afea:	4629      	mov	r1, r5
 800afec:	4620      	mov	r0, r4
 800afee:	2200      	movs	r2, #0
 800aff0:	4b3e      	ldr	r3, [pc, #248]	; (800b0ec <pow+0x2cc>)
 800aff2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800aff6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800affa:	f7f5 fafd 	bl	80005f8 <__aeabi_dmul>
 800affe:	4604      	mov	r4, r0
 800b000:	460d      	mov	r5, r1
 800b002:	f1b9 0f00 	cmp.w	r9, #0
 800b006:	d124      	bne.n	800b052 <pow+0x232>
 800b008:	4b39      	ldr	r3, [pc, #228]	; (800b0f0 <pow+0x2d0>)
 800b00a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b00e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b012:	4630      	mov	r0, r6
 800b014:	4652      	mov	r2, sl
 800b016:	465b      	mov	r3, fp
 800b018:	4639      	mov	r1, r7
 800b01a:	f7f5 fd5f 	bl	8000adc <__aeabi_dcmplt>
 800b01e:	2800      	cmp	r0, #0
 800b020:	d056      	beq.n	800b0d0 <pow+0x2b0>
 800b022:	ec45 4b10 	vmov	d0, r4, r5
 800b026:	f000 fe47 	bl	800bcb8 <rint>
 800b02a:	4622      	mov	r2, r4
 800b02c:	462b      	mov	r3, r5
 800b02e:	ec51 0b10 	vmov	r0, r1, d0
 800b032:	f7f5 fd49 	bl	8000ac8 <__aeabi_dcmpeq>
 800b036:	b920      	cbnz	r0, 800b042 <pow+0x222>
 800b038:	4b2e      	ldr	r3, [pc, #184]	; (800b0f4 <pow+0x2d4>)
 800b03a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b03e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b042:	f998 3000 	ldrsb.w	r3, [r8]
 800b046:	2b02      	cmp	r3, #2
 800b048:	d142      	bne.n	800b0d0 <pow+0x2b0>
 800b04a:	f7fd fe7b 	bl	8008d44 <__errno>
 800b04e:	2322      	movs	r3, #34	; 0x22
 800b050:	e78d      	b.n	800af6e <pow+0x14e>
 800b052:	4b29      	ldr	r3, [pc, #164]	; (800b0f8 <pow+0x2d8>)
 800b054:	2200      	movs	r2, #0
 800b056:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b05a:	4630      	mov	r0, r6
 800b05c:	4652      	mov	r2, sl
 800b05e:	465b      	mov	r3, fp
 800b060:	4639      	mov	r1, r7
 800b062:	f7f5 fd3b 	bl	8000adc <__aeabi_dcmplt>
 800b066:	2800      	cmp	r0, #0
 800b068:	d0eb      	beq.n	800b042 <pow+0x222>
 800b06a:	ec45 4b10 	vmov	d0, r4, r5
 800b06e:	f000 fe23 	bl	800bcb8 <rint>
 800b072:	4622      	mov	r2, r4
 800b074:	462b      	mov	r3, r5
 800b076:	ec51 0b10 	vmov	r0, r1, d0
 800b07a:	f7f5 fd25 	bl	8000ac8 <__aeabi_dcmpeq>
 800b07e:	2800      	cmp	r0, #0
 800b080:	d1df      	bne.n	800b042 <pow+0x222>
 800b082:	2200      	movs	r2, #0
 800b084:	4b18      	ldr	r3, [pc, #96]	; (800b0e8 <pow+0x2c8>)
 800b086:	e7da      	b.n	800b03e <pow+0x21e>
 800b088:	2200      	movs	r2, #0
 800b08a:	2300      	movs	r3, #0
 800b08c:	ec51 0b18 	vmov	r0, r1, d8
 800b090:	f7f5 fd1a 	bl	8000ac8 <__aeabi_dcmpeq>
 800b094:	2800      	cmp	r0, #0
 800b096:	f43f af3a 	beq.w	800af0e <pow+0xee>
 800b09a:	ec47 6b10 	vmov	d0, r6, r7
 800b09e:	f000 fdf6 	bl	800bc8e <finite>
 800b0a2:	2800      	cmp	r0, #0
 800b0a4:	f43f af33 	beq.w	800af0e <pow+0xee>
 800b0a8:	ec45 4b10 	vmov	d0, r4, r5
 800b0ac:	f000 fdef 	bl	800bc8e <finite>
 800b0b0:	2800      	cmp	r0, #0
 800b0b2:	f43f af2c 	beq.w	800af0e <pow+0xee>
 800b0b6:	2304      	movs	r3, #4
 800b0b8:	9302      	str	r3, [sp, #8]
 800b0ba:	4b09      	ldr	r3, [pc, #36]	; (800b0e0 <pow+0x2c0>)
 800b0bc:	9303      	str	r3, [sp, #12]
 800b0be:	2300      	movs	r3, #0
 800b0c0:	930a      	str	r3, [sp, #40]	; 0x28
 800b0c2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b0c6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b0ca:	ed8d 9b08 	vstr	d9, [sp, #32]
 800b0ce:	e7b8      	b.n	800b042 <pow+0x222>
 800b0d0:	a802      	add	r0, sp, #8
 800b0d2:	f000 fde4 	bl	800bc9e <matherr>
 800b0d6:	2800      	cmp	r0, #0
 800b0d8:	f47f af11 	bne.w	800aefe <pow+0xde>
 800b0dc:	e7b5      	b.n	800b04a <pow+0x22a>
 800b0de:	bf00      	nop
 800b0e0:	0800c268 	.word	0x0800c268
 800b0e4:	3ff00000 	.word	0x3ff00000
 800b0e8:	fff00000 	.word	0xfff00000
 800b0ec:	3fe00000 	.word	0x3fe00000
 800b0f0:	47efffff 	.word	0x47efffff
 800b0f4:	c7efffff 	.word	0xc7efffff
 800b0f8:	7ff00000 	.word	0x7ff00000
 800b0fc:	200001dc 	.word	0x200001dc

0800b100 <__ieee754_pow>:
 800b100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b104:	b091      	sub	sp, #68	; 0x44
 800b106:	ed8d 1b00 	vstr	d1, [sp]
 800b10a:	e9dd 2900 	ldrd	r2, r9, [sp]
 800b10e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800b112:	ea58 0302 	orrs.w	r3, r8, r2
 800b116:	ec57 6b10 	vmov	r6, r7, d0
 800b11a:	f000 84be 	beq.w	800ba9a <__ieee754_pow+0x99a>
 800b11e:	4b7a      	ldr	r3, [pc, #488]	; (800b308 <__ieee754_pow+0x208>)
 800b120:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800b124:	429c      	cmp	r4, r3
 800b126:	463d      	mov	r5, r7
 800b128:	ee10 aa10 	vmov	sl, s0
 800b12c:	dc09      	bgt.n	800b142 <__ieee754_pow+0x42>
 800b12e:	d103      	bne.n	800b138 <__ieee754_pow+0x38>
 800b130:	b93e      	cbnz	r6, 800b142 <__ieee754_pow+0x42>
 800b132:	45a0      	cmp	r8, r4
 800b134:	dc0d      	bgt.n	800b152 <__ieee754_pow+0x52>
 800b136:	e001      	b.n	800b13c <__ieee754_pow+0x3c>
 800b138:	4598      	cmp	r8, r3
 800b13a:	dc02      	bgt.n	800b142 <__ieee754_pow+0x42>
 800b13c:	4598      	cmp	r8, r3
 800b13e:	d10e      	bne.n	800b15e <__ieee754_pow+0x5e>
 800b140:	b16a      	cbz	r2, 800b15e <__ieee754_pow+0x5e>
 800b142:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b146:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b14a:	ea54 030a 	orrs.w	r3, r4, sl
 800b14e:	f000 84a4 	beq.w	800ba9a <__ieee754_pow+0x99a>
 800b152:	486e      	ldr	r0, [pc, #440]	; (800b30c <__ieee754_pow+0x20c>)
 800b154:	b011      	add	sp, #68	; 0x44
 800b156:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b15a:	f000 bda5 	b.w	800bca8 <nan>
 800b15e:	2d00      	cmp	r5, #0
 800b160:	da53      	bge.n	800b20a <__ieee754_pow+0x10a>
 800b162:	4b6b      	ldr	r3, [pc, #428]	; (800b310 <__ieee754_pow+0x210>)
 800b164:	4598      	cmp	r8, r3
 800b166:	dc4d      	bgt.n	800b204 <__ieee754_pow+0x104>
 800b168:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b16c:	4598      	cmp	r8, r3
 800b16e:	dd4c      	ble.n	800b20a <__ieee754_pow+0x10a>
 800b170:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b174:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b178:	2b14      	cmp	r3, #20
 800b17a:	dd26      	ble.n	800b1ca <__ieee754_pow+0xca>
 800b17c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b180:	fa22 f103 	lsr.w	r1, r2, r3
 800b184:	fa01 f303 	lsl.w	r3, r1, r3
 800b188:	4293      	cmp	r3, r2
 800b18a:	d13e      	bne.n	800b20a <__ieee754_pow+0x10a>
 800b18c:	f001 0101 	and.w	r1, r1, #1
 800b190:	f1c1 0b02 	rsb	fp, r1, #2
 800b194:	2a00      	cmp	r2, #0
 800b196:	d15b      	bne.n	800b250 <__ieee754_pow+0x150>
 800b198:	4b5b      	ldr	r3, [pc, #364]	; (800b308 <__ieee754_pow+0x208>)
 800b19a:	4598      	cmp	r8, r3
 800b19c:	d124      	bne.n	800b1e8 <__ieee754_pow+0xe8>
 800b19e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b1a2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b1a6:	ea53 030a 	orrs.w	r3, r3, sl
 800b1aa:	f000 8476 	beq.w	800ba9a <__ieee754_pow+0x99a>
 800b1ae:	4b59      	ldr	r3, [pc, #356]	; (800b314 <__ieee754_pow+0x214>)
 800b1b0:	429c      	cmp	r4, r3
 800b1b2:	dd2d      	ble.n	800b210 <__ieee754_pow+0x110>
 800b1b4:	f1b9 0f00 	cmp.w	r9, #0
 800b1b8:	f280 8473 	bge.w	800baa2 <__ieee754_pow+0x9a2>
 800b1bc:	2000      	movs	r0, #0
 800b1be:	2100      	movs	r1, #0
 800b1c0:	ec41 0b10 	vmov	d0, r0, r1
 800b1c4:	b011      	add	sp, #68	; 0x44
 800b1c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1ca:	2a00      	cmp	r2, #0
 800b1cc:	d13e      	bne.n	800b24c <__ieee754_pow+0x14c>
 800b1ce:	f1c3 0314 	rsb	r3, r3, #20
 800b1d2:	fa48 f103 	asr.w	r1, r8, r3
 800b1d6:	fa01 f303 	lsl.w	r3, r1, r3
 800b1da:	4543      	cmp	r3, r8
 800b1dc:	f040 8469 	bne.w	800bab2 <__ieee754_pow+0x9b2>
 800b1e0:	f001 0101 	and.w	r1, r1, #1
 800b1e4:	f1c1 0b02 	rsb	fp, r1, #2
 800b1e8:	4b4b      	ldr	r3, [pc, #300]	; (800b318 <__ieee754_pow+0x218>)
 800b1ea:	4598      	cmp	r8, r3
 800b1ec:	d118      	bne.n	800b220 <__ieee754_pow+0x120>
 800b1ee:	f1b9 0f00 	cmp.w	r9, #0
 800b1f2:	f280 845a 	bge.w	800baaa <__ieee754_pow+0x9aa>
 800b1f6:	4948      	ldr	r1, [pc, #288]	; (800b318 <__ieee754_pow+0x218>)
 800b1f8:	4632      	mov	r2, r6
 800b1fa:	463b      	mov	r3, r7
 800b1fc:	2000      	movs	r0, #0
 800b1fe:	f7f5 fb25 	bl	800084c <__aeabi_ddiv>
 800b202:	e7dd      	b.n	800b1c0 <__ieee754_pow+0xc0>
 800b204:	f04f 0b02 	mov.w	fp, #2
 800b208:	e7c4      	b.n	800b194 <__ieee754_pow+0x94>
 800b20a:	f04f 0b00 	mov.w	fp, #0
 800b20e:	e7c1      	b.n	800b194 <__ieee754_pow+0x94>
 800b210:	f1b9 0f00 	cmp.w	r9, #0
 800b214:	dad2      	bge.n	800b1bc <__ieee754_pow+0xbc>
 800b216:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b21a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b21e:	e7cf      	b.n	800b1c0 <__ieee754_pow+0xc0>
 800b220:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800b224:	d106      	bne.n	800b234 <__ieee754_pow+0x134>
 800b226:	4632      	mov	r2, r6
 800b228:	463b      	mov	r3, r7
 800b22a:	4610      	mov	r0, r2
 800b22c:	4619      	mov	r1, r3
 800b22e:	f7f5 f9e3 	bl	80005f8 <__aeabi_dmul>
 800b232:	e7c5      	b.n	800b1c0 <__ieee754_pow+0xc0>
 800b234:	4b39      	ldr	r3, [pc, #228]	; (800b31c <__ieee754_pow+0x21c>)
 800b236:	4599      	cmp	r9, r3
 800b238:	d10a      	bne.n	800b250 <__ieee754_pow+0x150>
 800b23a:	2d00      	cmp	r5, #0
 800b23c:	db08      	blt.n	800b250 <__ieee754_pow+0x150>
 800b23e:	ec47 6b10 	vmov	d0, r6, r7
 800b242:	b011      	add	sp, #68	; 0x44
 800b244:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b248:	f000 bc68 	b.w	800bb1c <__ieee754_sqrt>
 800b24c:	f04f 0b00 	mov.w	fp, #0
 800b250:	ec47 6b10 	vmov	d0, r6, r7
 800b254:	f000 fd12 	bl	800bc7c <fabs>
 800b258:	ec51 0b10 	vmov	r0, r1, d0
 800b25c:	f1ba 0f00 	cmp.w	sl, #0
 800b260:	d127      	bne.n	800b2b2 <__ieee754_pow+0x1b2>
 800b262:	b124      	cbz	r4, 800b26e <__ieee754_pow+0x16e>
 800b264:	4b2c      	ldr	r3, [pc, #176]	; (800b318 <__ieee754_pow+0x218>)
 800b266:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800b26a:	429a      	cmp	r2, r3
 800b26c:	d121      	bne.n	800b2b2 <__ieee754_pow+0x1b2>
 800b26e:	f1b9 0f00 	cmp.w	r9, #0
 800b272:	da05      	bge.n	800b280 <__ieee754_pow+0x180>
 800b274:	4602      	mov	r2, r0
 800b276:	460b      	mov	r3, r1
 800b278:	2000      	movs	r0, #0
 800b27a:	4927      	ldr	r1, [pc, #156]	; (800b318 <__ieee754_pow+0x218>)
 800b27c:	f7f5 fae6 	bl	800084c <__aeabi_ddiv>
 800b280:	2d00      	cmp	r5, #0
 800b282:	da9d      	bge.n	800b1c0 <__ieee754_pow+0xc0>
 800b284:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b288:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b28c:	ea54 030b 	orrs.w	r3, r4, fp
 800b290:	d108      	bne.n	800b2a4 <__ieee754_pow+0x1a4>
 800b292:	4602      	mov	r2, r0
 800b294:	460b      	mov	r3, r1
 800b296:	4610      	mov	r0, r2
 800b298:	4619      	mov	r1, r3
 800b29a:	f7f4 fff5 	bl	8000288 <__aeabi_dsub>
 800b29e:	4602      	mov	r2, r0
 800b2a0:	460b      	mov	r3, r1
 800b2a2:	e7ac      	b.n	800b1fe <__ieee754_pow+0xfe>
 800b2a4:	f1bb 0f01 	cmp.w	fp, #1
 800b2a8:	d18a      	bne.n	800b1c0 <__ieee754_pow+0xc0>
 800b2aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b2ae:	4619      	mov	r1, r3
 800b2b0:	e786      	b.n	800b1c0 <__ieee754_pow+0xc0>
 800b2b2:	0fed      	lsrs	r5, r5, #31
 800b2b4:	1e6b      	subs	r3, r5, #1
 800b2b6:	930d      	str	r3, [sp, #52]	; 0x34
 800b2b8:	ea5b 0303 	orrs.w	r3, fp, r3
 800b2bc:	d102      	bne.n	800b2c4 <__ieee754_pow+0x1c4>
 800b2be:	4632      	mov	r2, r6
 800b2c0:	463b      	mov	r3, r7
 800b2c2:	e7e8      	b.n	800b296 <__ieee754_pow+0x196>
 800b2c4:	4b16      	ldr	r3, [pc, #88]	; (800b320 <__ieee754_pow+0x220>)
 800b2c6:	4598      	cmp	r8, r3
 800b2c8:	f340 80fe 	ble.w	800b4c8 <__ieee754_pow+0x3c8>
 800b2cc:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b2d0:	4598      	cmp	r8, r3
 800b2d2:	dd0a      	ble.n	800b2ea <__ieee754_pow+0x1ea>
 800b2d4:	4b0f      	ldr	r3, [pc, #60]	; (800b314 <__ieee754_pow+0x214>)
 800b2d6:	429c      	cmp	r4, r3
 800b2d8:	dc0d      	bgt.n	800b2f6 <__ieee754_pow+0x1f6>
 800b2da:	f1b9 0f00 	cmp.w	r9, #0
 800b2de:	f6bf af6d 	bge.w	800b1bc <__ieee754_pow+0xbc>
 800b2e2:	a307      	add	r3, pc, #28	; (adr r3, 800b300 <__ieee754_pow+0x200>)
 800b2e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2e8:	e79f      	b.n	800b22a <__ieee754_pow+0x12a>
 800b2ea:	4b0e      	ldr	r3, [pc, #56]	; (800b324 <__ieee754_pow+0x224>)
 800b2ec:	429c      	cmp	r4, r3
 800b2ee:	ddf4      	ble.n	800b2da <__ieee754_pow+0x1da>
 800b2f0:	4b09      	ldr	r3, [pc, #36]	; (800b318 <__ieee754_pow+0x218>)
 800b2f2:	429c      	cmp	r4, r3
 800b2f4:	dd18      	ble.n	800b328 <__ieee754_pow+0x228>
 800b2f6:	f1b9 0f00 	cmp.w	r9, #0
 800b2fa:	dcf2      	bgt.n	800b2e2 <__ieee754_pow+0x1e2>
 800b2fc:	e75e      	b.n	800b1bc <__ieee754_pow+0xbc>
 800b2fe:	bf00      	nop
 800b300:	8800759c 	.word	0x8800759c
 800b304:	7e37e43c 	.word	0x7e37e43c
 800b308:	7ff00000 	.word	0x7ff00000
 800b30c:	0800c151 	.word	0x0800c151
 800b310:	433fffff 	.word	0x433fffff
 800b314:	3fefffff 	.word	0x3fefffff
 800b318:	3ff00000 	.word	0x3ff00000
 800b31c:	3fe00000 	.word	0x3fe00000
 800b320:	41e00000 	.word	0x41e00000
 800b324:	3feffffe 	.word	0x3feffffe
 800b328:	2200      	movs	r2, #0
 800b32a:	4b63      	ldr	r3, [pc, #396]	; (800b4b8 <__ieee754_pow+0x3b8>)
 800b32c:	f7f4 ffac 	bl	8000288 <__aeabi_dsub>
 800b330:	a355      	add	r3, pc, #340	; (adr r3, 800b488 <__ieee754_pow+0x388>)
 800b332:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b336:	4604      	mov	r4, r0
 800b338:	460d      	mov	r5, r1
 800b33a:	f7f5 f95d 	bl	80005f8 <__aeabi_dmul>
 800b33e:	a354      	add	r3, pc, #336	; (adr r3, 800b490 <__ieee754_pow+0x390>)
 800b340:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b344:	4606      	mov	r6, r0
 800b346:	460f      	mov	r7, r1
 800b348:	4620      	mov	r0, r4
 800b34a:	4629      	mov	r1, r5
 800b34c:	f7f5 f954 	bl	80005f8 <__aeabi_dmul>
 800b350:	2200      	movs	r2, #0
 800b352:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b356:	4b59      	ldr	r3, [pc, #356]	; (800b4bc <__ieee754_pow+0x3bc>)
 800b358:	4620      	mov	r0, r4
 800b35a:	4629      	mov	r1, r5
 800b35c:	f7f5 f94c 	bl	80005f8 <__aeabi_dmul>
 800b360:	4602      	mov	r2, r0
 800b362:	460b      	mov	r3, r1
 800b364:	a14c      	add	r1, pc, #304	; (adr r1, 800b498 <__ieee754_pow+0x398>)
 800b366:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b36a:	f7f4 ff8d 	bl	8000288 <__aeabi_dsub>
 800b36e:	4622      	mov	r2, r4
 800b370:	462b      	mov	r3, r5
 800b372:	f7f5 f941 	bl	80005f8 <__aeabi_dmul>
 800b376:	4602      	mov	r2, r0
 800b378:	460b      	mov	r3, r1
 800b37a:	2000      	movs	r0, #0
 800b37c:	4950      	ldr	r1, [pc, #320]	; (800b4c0 <__ieee754_pow+0x3c0>)
 800b37e:	f7f4 ff83 	bl	8000288 <__aeabi_dsub>
 800b382:	4622      	mov	r2, r4
 800b384:	462b      	mov	r3, r5
 800b386:	4680      	mov	r8, r0
 800b388:	4689      	mov	r9, r1
 800b38a:	4620      	mov	r0, r4
 800b38c:	4629      	mov	r1, r5
 800b38e:	f7f5 f933 	bl	80005f8 <__aeabi_dmul>
 800b392:	4602      	mov	r2, r0
 800b394:	460b      	mov	r3, r1
 800b396:	4640      	mov	r0, r8
 800b398:	4649      	mov	r1, r9
 800b39a:	f7f5 f92d 	bl	80005f8 <__aeabi_dmul>
 800b39e:	a340      	add	r3, pc, #256	; (adr r3, 800b4a0 <__ieee754_pow+0x3a0>)
 800b3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3a4:	f7f5 f928 	bl	80005f8 <__aeabi_dmul>
 800b3a8:	4602      	mov	r2, r0
 800b3aa:	460b      	mov	r3, r1
 800b3ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3b0:	f7f4 ff6a 	bl	8000288 <__aeabi_dsub>
 800b3b4:	4602      	mov	r2, r0
 800b3b6:	460b      	mov	r3, r1
 800b3b8:	4604      	mov	r4, r0
 800b3ba:	460d      	mov	r5, r1
 800b3bc:	4630      	mov	r0, r6
 800b3be:	4639      	mov	r1, r7
 800b3c0:	f7f4 ff64 	bl	800028c <__adddf3>
 800b3c4:	2000      	movs	r0, #0
 800b3c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b3ca:	4632      	mov	r2, r6
 800b3cc:	463b      	mov	r3, r7
 800b3ce:	f7f4 ff5b 	bl	8000288 <__aeabi_dsub>
 800b3d2:	4602      	mov	r2, r0
 800b3d4:	460b      	mov	r3, r1
 800b3d6:	4620      	mov	r0, r4
 800b3d8:	4629      	mov	r1, r5
 800b3da:	f7f4 ff55 	bl	8000288 <__aeabi_dsub>
 800b3de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b3e0:	f10b 33ff 	add.w	r3, fp, #4294967295
 800b3e4:	4313      	orrs	r3, r2
 800b3e6:	4606      	mov	r6, r0
 800b3e8:	460f      	mov	r7, r1
 800b3ea:	f040 81eb 	bne.w	800b7c4 <__ieee754_pow+0x6c4>
 800b3ee:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800b4a8 <__ieee754_pow+0x3a8>
 800b3f2:	e9dd 4500 	ldrd	r4, r5, [sp]
 800b3f6:	2400      	movs	r4, #0
 800b3f8:	4622      	mov	r2, r4
 800b3fa:	462b      	mov	r3, r5
 800b3fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b400:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b404:	f7f4 ff40 	bl	8000288 <__aeabi_dsub>
 800b408:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b40c:	f7f5 f8f4 	bl	80005f8 <__aeabi_dmul>
 800b410:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b414:	4680      	mov	r8, r0
 800b416:	4689      	mov	r9, r1
 800b418:	4630      	mov	r0, r6
 800b41a:	4639      	mov	r1, r7
 800b41c:	f7f5 f8ec 	bl	80005f8 <__aeabi_dmul>
 800b420:	4602      	mov	r2, r0
 800b422:	460b      	mov	r3, r1
 800b424:	4640      	mov	r0, r8
 800b426:	4649      	mov	r1, r9
 800b428:	f7f4 ff30 	bl	800028c <__adddf3>
 800b42c:	4622      	mov	r2, r4
 800b42e:	462b      	mov	r3, r5
 800b430:	4680      	mov	r8, r0
 800b432:	4689      	mov	r9, r1
 800b434:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b438:	f7f5 f8de 	bl	80005f8 <__aeabi_dmul>
 800b43c:	460b      	mov	r3, r1
 800b43e:	4604      	mov	r4, r0
 800b440:	460d      	mov	r5, r1
 800b442:	4602      	mov	r2, r0
 800b444:	4649      	mov	r1, r9
 800b446:	4640      	mov	r0, r8
 800b448:	e9cd 4500 	strd	r4, r5, [sp]
 800b44c:	f7f4 ff1e 	bl	800028c <__adddf3>
 800b450:	4b1c      	ldr	r3, [pc, #112]	; (800b4c4 <__ieee754_pow+0x3c4>)
 800b452:	4299      	cmp	r1, r3
 800b454:	4606      	mov	r6, r0
 800b456:	460f      	mov	r7, r1
 800b458:	468b      	mov	fp, r1
 800b45a:	f340 82f7 	ble.w	800ba4c <__ieee754_pow+0x94c>
 800b45e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b462:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b466:	4303      	orrs	r3, r0
 800b468:	f000 81ea 	beq.w	800b840 <__ieee754_pow+0x740>
 800b46c:	a310      	add	r3, pc, #64	; (adr r3, 800b4b0 <__ieee754_pow+0x3b0>)
 800b46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b472:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b476:	f7f5 f8bf 	bl	80005f8 <__aeabi_dmul>
 800b47a:	a30d      	add	r3, pc, #52	; (adr r3, 800b4b0 <__ieee754_pow+0x3b0>)
 800b47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b480:	e6d5      	b.n	800b22e <__ieee754_pow+0x12e>
 800b482:	bf00      	nop
 800b484:	f3af 8000 	nop.w
 800b488:	60000000 	.word	0x60000000
 800b48c:	3ff71547 	.word	0x3ff71547
 800b490:	f85ddf44 	.word	0xf85ddf44
 800b494:	3e54ae0b 	.word	0x3e54ae0b
 800b498:	55555555 	.word	0x55555555
 800b49c:	3fd55555 	.word	0x3fd55555
 800b4a0:	652b82fe 	.word	0x652b82fe
 800b4a4:	3ff71547 	.word	0x3ff71547
 800b4a8:	00000000 	.word	0x00000000
 800b4ac:	bff00000 	.word	0xbff00000
 800b4b0:	8800759c 	.word	0x8800759c
 800b4b4:	7e37e43c 	.word	0x7e37e43c
 800b4b8:	3ff00000 	.word	0x3ff00000
 800b4bc:	3fd00000 	.word	0x3fd00000
 800b4c0:	3fe00000 	.word	0x3fe00000
 800b4c4:	408fffff 	.word	0x408fffff
 800b4c8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800b4cc:	f04f 0200 	mov.w	r2, #0
 800b4d0:	da05      	bge.n	800b4de <__ieee754_pow+0x3de>
 800b4d2:	4bd3      	ldr	r3, [pc, #844]	; (800b820 <__ieee754_pow+0x720>)
 800b4d4:	f7f5 f890 	bl	80005f8 <__aeabi_dmul>
 800b4d8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b4dc:	460c      	mov	r4, r1
 800b4de:	1523      	asrs	r3, r4, #20
 800b4e0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b4e4:	4413      	add	r3, r2
 800b4e6:	9309      	str	r3, [sp, #36]	; 0x24
 800b4e8:	4bce      	ldr	r3, [pc, #824]	; (800b824 <__ieee754_pow+0x724>)
 800b4ea:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b4ee:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b4f2:	429c      	cmp	r4, r3
 800b4f4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b4f8:	dd08      	ble.n	800b50c <__ieee754_pow+0x40c>
 800b4fa:	4bcb      	ldr	r3, [pc, #812]	; (800b828 <__ieee754_pow+0x728>)
 800b4fc:	429c      	cmp	r4, r3
 800b4fe:	f340 815e 	ble.w	800b7be <__ieee754_pow+0x6be>
 800b502:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b504:	3301      	adds	r3, #1
 800b506:	9309      	str	r3, [sp, #36]	; 0x24
 800b508:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b50c:	f04f 0a00 	mov.w	sl, #0
 800b510:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800b514:	930c      	str	r3, [sp, #48]	; 0x30
 800b516:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b518:	4bc4      	ldr	r3, [pc, #784]	; (800b82c <__ieee754_pow+0x72c>)
 800b51a:	4413      	add	r3, r2
 800b51c:	ed93 7b00 	vldr	d7, [r3]
 800b520:	4629      	mov	r1, r5
 800b522:	ec53 2b17 	vmov	r2, r3, d7
 800b526:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b52a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b52e:	f7f4 feab 	bl	8000288 <__aeabi_dsub>
 800b532:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b536:	4606      	mov	r6, r0
 800b538:	460f      	mov	r7, r1
 800b53a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b53e:	f7f4 fea5 	bl	800028c <__adddf3>
 800b542:	4602      	mov	r2, r0
 800b544:	460b      	mov	r3, r1
 800b546:	2000      	movs	r0, #0
 800b548:	49b9      	ldr	r1, [pc, #740]	; (800b830 <__ieee754_pow+0x730>)
 800b54a:	f7f5 f97f 	bl	800084c <__aeabi_ddiv>
 800b54e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b552:	4602      	mov	r2, r0
 800b554:	460b      	mov	r3, r1
 800b556:	4630      	mov	r0, r6
 800b558:	4639      	mov	r1, r7
 800b55a:	f7f5 f84d 	bl	80005f8 <__aeabi_dmul>
 800b55e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b562:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b566:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b56a:	2300      	movs	r3, #0
 800b56c:	9302      	str	r3, [sp, #8]
 800b56e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b572:	106d      	asrs	r5, r5, #1
 800b574:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b578:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b57c:	2200      	movs	r2, #0
 800b57e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800b582:	4640      	mov	r0, r8
 800b584:	4649      	mov	r1, r9
 800b586:	4614      	mov	r4, r2
 800b588:	461d      	mov	r5, r3
 800b58a:	f7f5 f835 	bl	80005f8 <__aeabi_dmul>
 800b58e:	4602      	mov	r2, r0
 800b590:	460b      	mov	r3, r1
 800b592:	4630      	mov	r0, r6
 800b594:	4639      	mov	r1, r7
 800b596:	f7f4 fe77 	bl	8000288 <__aeabi_dsub>
 800b59a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b59e:	4606      	mov	r6, r0
 800b5a0:	460f      	mov	r7, r1
 800b5a2:	4620      	mov	r0, r4
 800b5a4:	4629      	mov	r1, r5
 800b5a6:	f7f4 fe6f 	bl	8000288 <__aeabi_dsub>
 800b5aa:	4602      	mov	r2, r0
 800b5ac:	460b      	mov	r3, r1
 800b5ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b5b2:	f7f4 fe69 	bl	8000288 <__aeabi_dsub>
 800b5b6:	4642      	mov	r2, r8
 800b5b8:	464b      	mov	r3, r9
 800b5ba:	f7f5 f81d 	bl	80005f8 <__aeabi_dmul>
 800b5be:	4602      	mov	r2, r0
 800b5c0:	460b      	mov	r3, r1
 800b5c2:	4630      	mov	r0, r6
 800b5c4:	4639      	mov	r1, r7
 800b5c6:	f7f4 fe5f 	bl	8000288 <__aeabi_dsub>
 800b5ca:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b5ce:	f7f5 f813 	bl	80005f8 <__aeabi_dmul>
 800b5d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b5d6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b5da:	4610      	mov	r0, r2
 800b5dc:	4619      	mov	r1, r3
 800b5de:	f7f5 f80b 	bl	80005f8 <__aeabi_dmul>
 800b5e2:	a37b      	add	r3, pc, #492	; (adr r3, 800b7d0 <__ieee754_pow+0x6d0>)
 800b5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5e8:	4604      	mov	r4, r0
 800b5ea:	460d      	mov	r5, r1
 800b5ec:	f7f5 f804 	bl	80005f8 <__aeabi_dmul>
 800b5f0:	a379      	add	r3, pc, #484	; (adr r3, 800b7d8 <__ieee754_pow+0x6d8>)
 800b5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5f6:	f7f4 fe49 	bl	800028c <__adddf3>
 800b5fa:	4622      	mov	r2, r4
 800b5fc:	462b      	mov	r3, r5
 800b5fe:	f7f4 fffb 	bl	80005f8 <__aeabi_dmul>
 800b602:	a377      	add	r3, pc, #476	; (adr r3, 800b7e0 <__ieee754_pow+0x6e0>)
 800b604:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b608:	f7f4 fe40 	bl	800028c <__adddf3>
 800b60c:	4622      	mov	r2, r4
 800b60e:	462b      	mov	r3, r5
 800b610:	f7f4 fff2 	bl	80005f8 <__aeabi_dmul>
 800b614:	a374      	add	r3, pc, #464	; (adr r3, 800b7e8 <__ieee754_pow+0x6e8>)
 800b616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b61a:	f7f4 fe37 	bl	800028c <__adddf3>
 800b61e:	4622      	mov	r2, r4
 800b620:	462b      	mov	r3, r5
 800b622:	f7f4 ffe9 	bl	80005f8 <__aeabi_dmul>
 800b626:	a372      	add	r3, pc, #456	; (adr r3, 800b7f0 <__ieee754_pow+0x6f0>)
 800b628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b62c:	f7f4 fe2e 	bl	800028c <__adddf3>
 800b630:	4622      	mov	r2, r4
 800b632:	462b      	mov	r3, r5
 800b634:	f7f4 ffe0 	bl	80005f8 <__aeabi_dmul>
 800b638:	a36f      	add	r3, pc, #444	; (adr r3, 800b7f8 <__ieee754_pow+0x6f8>)
 800b63a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b63e:	f7f4 fe25 	bl	800028c <__adddf3>
 800b642:	4622      	mov	r2, r4
 800b644:	4606      	mov	r6, r0
 800b646:	460f      	mov	r7, r1
 800b648:	462b      	mov	r3, r5
 800b64a:	4620      	mov	r0, r4
 800b64c:	4629      	mov	r1, r5
 800b64e:	f7f4 ffd3 	bl	80005f8 <__aeabi_dmul>
 800b652:	4602      	mov	r2, r0
 800b654:	460b      	mov	r3, r1
 800b656:	4630      	mov	r0, r6
 800b658:	4639      	mov	r1, r7
 800b65a:	f7f4 ffcd 	bl	80005f8 <__aeabi_dmul>
 800b65e:	4642      	mov	r2, r8
 800b660:	4604      	mov	r4, r0
 800b662:	460d      	mov	r5, r1
 800b664:	464b      	mov	r3, r9
 800b666:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b66a:	f7f4 fe0f 	bl	800028c <__adddf3>
 800b66e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b672:	f7f4 ffc1 	bl	80005f8 <__aeabi_dmul>
 800b676:	4622      	mov	r2, r4
 800b678:	462b      	mov	r3, r5
 800b67a:	f7f4 fe07 	bl	800028c <__adddf3>
 800b67e:	4642      	mov	r2, r8
 800b680:	4606      	mov	r6, r0
 800b682:	460f      	mov	r7, r1
 800b684:	464b      	mov	r3, r9
 800b686:	4640      	mov	r0, r8
 800b688:	4649      	mov	r1, r9
 800b68a:	f7f4 ffb5 	bl	80005f8 <__aeabi_dmul>
 800b68e:	2200      	movs	r2, #0
 800b690:	4b68      	ldr	r3, [pc, #416]	; (800b834 <__ieee754_pow+0x734>)
 800b692:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b696:	f7f4 fdf9 	bl	800028c <__adddf3>
 800b69a:	4632      	mov	r2, r6
 800b69c:	463b      	mov	r3, r7
 800b69e:	f7f4 fdf5 	bl	800028c <__adddf3>
 800b6a2:	9802      	ldr	r0, [sp, #8]
 800b6a4:	460d      	mov	r5, r1
 800b6a6:	4604      	mov	r4, r0
 800b6a8:	4602      	mov	r2, r0
 800b6aa:	460b      	mov	r3, r1
 800b6ac:	4640      	mov	r0, r8
 800b6ae:	4649      	mov	r1, r9
 800b6b0:	f7f4 ffa2 	bl	80005f8 <__aeabi_dmul>
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	4680      	mov	r8, r0
 800b6b8:	4689      	mov	r9, r1
 800b6ba:	4b5e      	ldr	r3, [pc, #376]	; (800b834 <__ieee754_pow+0x734>)
 800b6bc:	4620      	mov	r0, r4
 800b6be:	4629      	mov	r1, r5
 800b6c0:	f7f4 fde2 	bl	8000288 <__aeabi_dsub>
 800b6c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b6c8:	f7f4 fdde 	bl	8000288 <__aeabi_dsub>
 800b6cc:	4602      	mov	r2, r0
 800b6ce:	460b      	mov	r3, r1
 800b6d0:	4630      	mov	r0, r6
 800b6d2:	4639      	mov	r1, r7
 800b6d4:	f7f4 fdd8 	bl	8000288 <__aeabi_dsub>
 800b6d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b6dc:	f7f4 ff8c 	bl	80005f8 <__aeabi_dmul>
 800b6e0:	4622      	mov	r2, r4
 800b6e2:	4606      	mov	r6, r0
 800b6e4:	460f      	mov	r7, r1
 800b6e6:	462b      	mov	r3, r5
 800b6e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b6ec:	f7f4 ff84 	bl	80005f8 <__aeabi_dmul>
 800b6f0:	4602      	mov	r2, r0
 800b6f2:	460b      	mov	r3, r1
 800b6f4:	4630      	mov	r0, r6
 800b6f6:	4639      	mov	r1, r7
 800b6f8:	f7f4 fdc8 	bl	800028c <__adddf3>
 800b6fc:	4606      	mov	r6, r0
 800b6fe:	460f      	mov	r7, r1
 800b700:	4602      	mov	r2, r0
 800b702:	460b      	mov	r3, r1
 800b704:	4640      	mov	r0, r8
 800b706:	4649      	mov	r1, r9
 800b708:	f7f4 fdc0 	bl	800028c <__adddf3>
 800b70c:	9802      	ldr	r0, [sp, #8]
 800b70e:	a33c      	add	r3, pc, #240	; (adr r3, 800b800 <__ieee754_pow+0x700>)
 800b710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b714:	4604      	mov	r4, r0
 800b716:	460d      	mov	r5, r1
 800b718:	f7f4 ff6e 	bl	80005f8 <__aeabi_dmul>
 800b71c:	4642      	mov	r2, r8
 800b71e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b722:	464b      	mov	r3, r9
 800b724:	4620      	mov	r0, r4
 800b726:	4629      	mov	r1, r5
 800b728:	f7f4 fdae 	bl	8000288 <__aeabi_dsub>
 800b72c:	4602      	mov	r2, r0
 800b72e:	460b      	mov	r3, r1
 800b730:	4630      	mov	r0, r6
 800b732:	4639      	mov	r1, r7
 800b734:	f7f4 fda8 	bl	8000288 <__aeabi_dsub>
 800b738:	a333      	add	r3, pc, #204	; (adr r3, 800b808 <__ieee754_pow+0x708>)
 800b73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b73e:	f7f4 ff5b 	bl	80005f8 <__aeabi_dmul>
 800b742:	a333      	add	r3, pc, #204	; (adr r3, 800b810 <__ieee754_pow+0x710>)
 800b744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b748:	4606      	mov	r6, r0
 800b74a:	460f      	mov	r7, r1
 800b74c:	4620      	mov	r0, r4
 800b74e:	4629      	mov	r1, r5
 800b750:	f7f4 ff52 	bl	80005f8 <__aeabi_dmul>
 800b754:	4602      	mov	r2, r0
 800b756:	460b      	mov	r3, r1
 800b758:	4630      	mov	r0, r6
 800b75a:	4639      	mov	r1, r7
 800b75c:	f7f4 fd96 	bl	800028c <__adddf3>
 800b760:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b762:	4b35      	ldr	r3, [pc, #212]	; (800b838 <__ieee754_pow+0x738>)
 800b764:	4413      	add	r3, r2
 800b766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b76a:	f7f4 fd8f 	bl	800028c <__adddf3>
 800b76e:	4604      	mov	r4, r0
 800b770:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b772:	460d      	mov	r5, r1
 800b774:	f7f4 fed6 	bl	8000524 <__aeabi_i2d>
 800b778:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b77a:	4b30      	ldr	r3, [pc, #192]	; (800b83c <__ieee754_pow+0x73c>)
 800b77c:	4413      	add	r3, r2
 800b77e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b782:	4606      	mov	r6, r0
 800b784:	460f      	mov	r7, r1
 800b786:	4622      	mov	r2, r4
 800b788:	462b      	mov	r3, r5
 800b78a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b78e:	f7f4 fd7d 	bl	800028c <__adddf3>
 800b792:	4642      	mov	r2, r8
 800b794:	464b      	mov	r3, r9
 800b796:	f7f4 fd79 	bl	800028c <__adddf3>
 800b79a:	4632      	mov	r2, r6
 800b79c:	463b      	mov	r3, r7
 800b79e:	f7f4 fd75 	bl	800028c <__adddf3>
 800b7a2:	9802      	ldr	r0, [sp, #8]
 800b7a4:	4632      	mov	r2, r6
 800b7a6:	463b      	mov	r3, r7
 800b7a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b7ac:	f7f4 fd6c 	bl	8000288 <__aeabi_dsub>
 800b7b0:	4642      	mov	r2, r8
 800b7b2:	464b      	mov	r3, r9
 800b7b4:	f7f4 fd68 	bl	8000288 <__aeabi_dsub>
 800b7b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b7bc:	e607      	b.n	800b3ce <__ieee754_pow+0x2ce>
 800b7be:	f04f 0a01 	mov.w	sl, #1
 800b7c2:	e6a5      	b.n	800b510 <__ieee754_pow+0x410>
 800b7c4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800b818 <__ieee754_pow+0x718>
 800b7c8:	e613      	b.n	800b3f2 <__ieee754_pow+0x2f2>
 800b7ca:	bf00      	nop
 800b7cc:	f3af 8000 	nop.w
 800b7d0:	4a454eef 	.word	0x4a454eef
 800b7d4:	3fca7e28 	.word	0x3fca7e28
 800b7d8:	93c9db65 	.word	0x93c9db65
 800b7dc:	3fcd864a 	.word	0x3fcd864a
 800b7e0:	a91d4101 	.word	0xa91d4101
 800b7e4:	3fd17460 	.word	0x3fd17460
 800b7e8:	518f264d 	.word	0x518f264d
 800b7ec:	3fd55555 	.word	0x3fd55555
 800b7f0:	db6fabff 	.word	0xdb6fabff
 800b7f4:	3fdb6db6 	.word	0x3fdb6db6
 800b7f8:	33333303 	.word	0x33333303
 800b7fc:	3fe33333 	.word	0x3fe33333
 800b800:	e0000000 	.word	0xe0000000
 800b804:	3feec709 	.word	0x3feec709
 800b808:	dc3a03fd 	.word	0xdc3a03fd
 800b80c:	3feec709 	.word	0x3feec709
 800b810:	145b01f5 	.word	0x145b01f5
 800b814:	be3e2fe0 	.word	0xbe3e2fe0
 800b818:	00000000 	.word	0x00000000
 800b81c:	3ff00000 	.word	0x3ff00000
 800b820:	43400000 	.word	0x43400000
 800b824:	0003988e 	.word	0x0003988e
 800b828:	000bb679 	.word	0x000bb679
 800b82c:	0800c270 	.word	0x0800c270
 800b830:	3ff00000 	.word	0x3ff00000
 800b834:	40080000 	.word	0x40080000
 800b838:	0800c290 	.word	0x0800c290
 800b83c:	0800c280 	.word	0x0800c280
 800b840:	a3b4      	add	r3, pc, #720	; (adr r3, 800bb14 <__ieee754_pow+0xa14>)
 800b842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b846:	4640      	mov	r0, r8
 800b848:	4649      	mov	r1, r9
 800b84a:	f7f4 fd1f 	bl	800028c <__adddf3>
 800b84e:	4622      	mov	r2, r4
 800b850:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b854:	462b      	mov	r3, r5
 800b856:	4630      	mov	r0, r6
 800b858:	4639      	mov	r1, r7
 800b85a:	f7f4 fd15 	bl	8000288 <__aeabi_dsub>
 800b85e:	4602      	mov	r2, r0
 800b860:	460b      	mov	r3, r1
 800b862:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b866:	f7f5 f957 	bl	8000b18 <__aeabi_dcmpgt>
 800b86a:	2800      	cmp	r0, #0
 800b86c:	f47f adfe 	bne.w	800b46c <__ieee754_pow+0x36c>
 800b870:	4aa3      	ldr	r2, [pc, #652]	; (800bb00 <__ieee754_pow+0xa00>)
 800b872:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b876:	4293      	cmp	r3, r2
 800b878:	f340 810a 	ble.w	800ba90 <__ieee754_pow+0x990>
 800b87c:	151b      	asrs	r3, r3, #20
 800b87e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b882:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b886:	fa4a f303 	asr.w	r3, sl, r3
 800b88a:	445b      	add	r3, fp
 800b88c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b890:	4e9c      	ldr	r6, [pc, #624]	; (800bb04 <__ieee754_pow+0xa04>)
 800b892:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b896:	4116      	asrs	r6, r2
 800b898:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800b89c:	2000      	movs	r0, #0
 800b89e:	ea23 0106 	bic.w	r1, r3, r6
 800b8a2:	f1c2 0214 	rsb	r2, r2, #20
 800b8a6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b8aa:	fa4a fa02 	asr.w	sl, sl, r2
 800b8ae:	f1bb 0f00 	cmp.w	fp, #0
 800b8b2:	4602      	mov	r2, r0
 800b8b4:	460b      	mov	r3, r1
 800b8b6:	4620      	mov	r0, r4
 800b8b8:	4629      	mov	r1, r5
 800b8ba:	bfb8      	it	lt
 800b8bc:	f1ca 0a00 	rsblt	sl, sl, #0
 800b8c0:	f7f4 fce2 	bl	8000288 <__aeabi_dsub>
 800b8c4:	e9cd 0100 	strd	r0, r1, [sp]
 800b8c8:	4642      	mov	r2, r8
 800b8ca:	464b      	mov	r3, r9
 800b8cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b8d0:	f7f4 fcdc 	bl	800028c <__adddf3>
 800b8d4:	2000      	movs	r0, #0
 800b8d6:	a378      	add	r3, pc, #480	; (adr r3, 800bab8 <__ieee754_pow+0x9b8>)
 800b8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8dc:	4604      	mov	r4, r0
 800b8de:	460d      	mov	r5, r1
 800b8e0:	f7f4 fe8a 	bl	80005f8 <__aeabi_dmul>
 800b8e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b8e8:	4606      	mov	r6, r0
 800b8ea:	460f      	mov	r7, r1
 800b8ec:	4620      	mov	r0, r4
 800b8ee:	4629      	mov	r1, r5
 800b8f0:	f7f4 fcca 	bl	8000288 <__aeabi_dsub>
 800b8f4:	4602      	mov	r2, r0
 800b8f6:	460b      	mov	r3, r1
 800b8f8:	4640      	mov	r0, r8
 800b8fa:	4649      	mov	r1, r9
 800b8fc:	f7f4 fcc4 	bl	8000288 <__aeabi_dsub>
 800b900:	a36f      	add	r3, pc, #444	; (adr r3, 800bac0 <__ieee754_pow+0x9c0>)
 800b902:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b906:	f7f4 fe77 	bl	80005f8 <__aeabi_dmul>
 800b90a:	a36f      	add	r3, pc, #444	; (adr r3, 800bac8 <__ieee754_pow+0x9c8>)
 800b90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b910:	4680      	mov	r8, r0
 800b912:	4689      	mov	r9, r1
 800b914:	4620      	mov	r0, r4
 800b916:	4629      	mov	r1, r5
 800b918:	f7f4 fe6e 	bl	80005f8 <__aeabi_dmul>
 800b91c:	4602      	mov	r2, r0
 800b91e:	460b      	mov	r3, r1
 800b920:	4640      	mov	r0, r8
 800b922:	4649      	mov	r1, r9
 800b924:	f7f4 fcb2 	bl	800028c <__adddf3>
 800b928:	4604      	mov	r4, r0
 800b92a:	460d      	mov	r5, r1
 800b92c:	4602      	mov	r2, r0
 800b92e:	460b      	mov	r3, r1
 800b930:	4630      	mov	r0, r6
 800b932:	4639      	mov	r1, r7
 800b934:	f7f4 fcaa 	bl	800028c <__adddf3>
 800b938:	4632      	mov	r2, r6
 800b93a:	463b      	mov	r3, r7
 800b93c:	4680      	mov	r8, r0
 800b93e:	4689      	mov	r9, r1
 800b940:	f7f4 fca2 	bl	8000288 <__aeabi_dsub>
 800b944:	4602      	mov	r2, r0
 800b946:	460b      	mov	r3, r1
 800b948:	4620      	mov	r0, r4
 800b94a:	4629      	mov	r1, r5
 800b94c:	f7f4 fc9c 	bl	8000288 <__aeabi_dsub>
 800b950:	4642      	mov	r2, r8
 800b952:	4606      	mov	r6, r0
 800b954:	460f      	mov	r7, r1
 800b956:	464b      	mov	r3, r9
 800b958:	4640      	mov	r0, r8
 800b95a:	4649      	mov	r1, r9
 800b95c:	f7f4 fe4c 	bl	80005f8 <__aeabi_dmul>
 800b960:	a35b      	add	r3, pc, #364	; (adr r3, 800bad0 <__ieee754_pow+0x9d0>)
 800b962:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b966:	4604      	mov	r4, r0
 800b968:	460d      	mov	r5, r1
 800b96a:	f7f4 fe45 	bl	80005f8 <__aeabi_dmul>
 800b96e:	a35a      	add	r3, pc, #360	; (adr r3, 800bad8 <__ieee754_pow+0x9d8>)
 800b970:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b974:	f7f4 fc88 	bl	8000288 <__aeabi_dsub>
 800b978:	4622      	mov	r2, r4
 800b97a:	462b      	mov	r3, r5
 800b97c:	f7f4 fe3c 	bl	80005f8 <__aeabi_dmul>
 800b980:	a357      	add	r3, pc, #348	; (adr r3, 800bae0 <__ieee754_pow+0x9e0>)
 800b982:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b986:	f7f4 fc81 	bl	800028c <__adddf3>
 800b98a:	4622      	mov	r2, r4
 800b98c:	462b      	mov	r3, r5
 800b98e:	f7f4 fe33 	bl	80005f8 <__aeabi_dmul>
 800b992:	a355      	add	r3, pc, #340	; (adr r3, 800bae8 <__ieee754_pow+0x9e8>)
 800b994:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b998:	f7f4 fc76 	bl	8000288 <__aeabi_dsub>
 800b99c:	4622      	mov	r2, r4
 800b99e:	462b      	mov	r3, r5
 800b9a0:	f7f4 fe2a 	bl	80005f8 <__aeabi_dmul>
 800b9a4:	a352      	add	r3, pc, #328	; (adr r3, 800baf0 <__ieee754_pow+0x9f0>)
 800b9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9aa:	f7f4 fc6f 	bl	800028c <__adddf3>
 800b9ae:	4622      	mov	r2, r4
 800b9b0:	462b      	mov	r3, r5
 800b9b2:	f7f4 fe21 	bl	80005f8 <__aeabi_dmul>
 800b9b6:	4602      	mov	r2, r0
 800b9b8:	460b      	mov	r3, r1
 800b9ba:	4640      	mov	r0, r8
 800b9bc:	4649      	mov	r1, r9
 800b9be:	f7f4 fc63 	bl	8000288 <__aeabi_dsub>
 800b9c2:	4604      	mov	r4, r0
 800b9c4:	460d      	mov	r5, r1
 800b9c6:	4602      	mov	r2, r0
 800b9c8:	460b      	mov	r3, r1
 800b9ca:	4640      	mov	r0, r8
 800b9cc:	4649      	mov	r1, r9
 800b9ce:	f7f4 fe13 	bl	80005f8 <__aeabi_dmul>
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	e9cd 0100 	strd	r0, r1, [sp]
 800b9d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b9dc:	4620      	mov	r0, r4
 800b9de:	4629      	mov	r1, r5
 800b9e0:	f7f4 fc52 	bl	8000288 <__aeabi_dsub>
 800b9e4:	4602      	mov	r2, r0
 800b9e6:	460b      	mov	r3, r1
 800b9e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b9ec:	f7f4 ff2e 	bl	800084c <__aeabi_ddiv>
 800b9f0:	4632      	mov	r2, r6
 800b9f2:	4604      	mov	r4, r0
 800b9f4:	460d      	mov	r5, r1
 800b9f6:	463b      	mov	r3, r7
 800b9f8:	4640      	mov	r0, r8
 800b9fa:	4649      	mov	r1, r9
 800b9fc:	f7f4 fdfc 	bl	80005f8 <__aeabi_dmul>
 800ba00:	4632      	mov	r2, r6
 800ba02:	463b      	mov	r3, r7
 800ba04:	f7f4 fc42 	bl	800028c <__adddf3>
 800ba08:	4602      	mov	r2, r0
 800ba0a:	460b      	mov	r3, r1
 800ba0c:	4620      	mov	r0, r4
 800ba0e:	4629      	mov	r1, r5
 800ba10:	f7f4 fc3a 	bl	8000288 <__aeabi_dsub>
 800ba14:	4642      	mov	r2, r8
 800ba16:	464b      	mov	r3, r9
 800ba18:	f7f4 fc36 	bl	8000288 <__aeabi_dsub>
 800ba1c:	4602      	mov	r2, r0
 800ba1e:	460b      	mov	r3, r1
 800ba20:	2000      	movs	r0, #0
 800ba22:	4939      	ldr	r1, [pc, #228]	; (800bb08 <__ieee754_pow+0xa08>)
 800ba24:	f7f4 fc30 	bl	8000288 <__aeabi_dsub>
 800ba28:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800ba2c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800ba30:	4602      	mov	r2, r0
 800ba32:	460b      	mov	r3, r1
 800ba34:	da2f      	bge.n	800ba96 <__ieee754_pow+0x996>
 800ba36:	4650      	mov	r0, sl
 800ba38:	ec43 2b10 	vmov	d0, r2, r3
 800ba3c:	f000 f9c0 	bl	800bdc0 <scalbn>
 800ba40:	ec51 0b10 	vmov	r0, r1, d0
 800ba44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ba48:	f7ff bbf1 	b.w	800b22e <__ieee754_pow+0x12e>
 800ba4c:	4b2f      	ldr	r3, [pc, #188]	; (800bb0c <__ieee754_pow+0xa0c>)
 800ba4e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ba52:	429e      	cmp	r6, r3
 800ba54:	f77f af0c 	ble.w	800b870 <__ieee754_pow+0x770>
 800ba58:	4b2d      	ldr	r3, [pc, #180]	; (800bb10 <__ieee754_pow+0xa10>)
 800ba5a:	440b      	add	r3, r1
 800ba5c:	4303      	orrs	r3, r0
 800ba5e:	d00b      	beq.n	800ba78 <__ieee754_pow+0x978>
 800ba60:	a325      	add	r3, pc, #148	; (adr r3, 800baf8 <__ieee754_pow+0x9f8>)
 800ba62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba6a:	f7f4 fdc5 	bl	80005f8 <__aeabi_dmul>
 800ba6e:	a322      	add	r3, pc, #136	; (adr r3, 800baf8 <__ieee754_pow+0x9f8>)
 800ba70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba74:	f7ff bbdb 	b.w	800b22e <__ieee754_pow+0x12e>
 800ba78:	4622      	mov	r2, r4
 800ba7a:	462b      	mov	r3, r5
 800ba7c:	f7f4 fc04 	bl	8000288 <__aeabi_dsub>
 800ba80:	4642      	mov	r2, r8
 800ba82:	464b      	mov	r3, r9
 800ba84:	f7f5 f83e 	bl	8000b04 <__aeabi_dcmpge>
 800ba88:	2800      	cmp	r0, #0
 800ba8a:	f43f aef1 	beq.w	800b870 <__ieee754_pow+0x770>
 800ba8e:	e7e7      	b.n	800ba60 <__ieee754_pow+0x960>
 800ba90:	f04f 0a00 	mov.w	sl, #0
 800ba94:	e718      	b.n	800b8c8 <__ieee754_pow+0x7c8>
 800ba96:	4621      	mov	r1, r4
 800ba98:	e7d4      	b.n	800ba44 <__ieee754_pow+0x944>
 800ba9a:	2000      	movs	r0, #0
 800ba9c:	491a      	ldr	r1, [pc, #104]	; (800bb08 <__ieee754_pow+0xa08>)
 800ba9e:	f7ff bb8f 	b.w	800b1c0 <__ieee754_pow+0xc0>
 800baa2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800baa6:	f7ff bb8b 	b.w	800b1c0 <__ieee754_pow+0xc0>
 800baaa:	4630      	mov	r0, r6
 800baac:	4639      	mov	r1, r7
 800baae:	f7ff bb87 	b.w	800b1c0 <__ieee754_pow+0xc0>
 800bab2:	4693      	mov	fp, r2
 800bab4:	f7ff bb98 	b.w	800b1e8 <__ieee754_pow+0xe8>
 800bab8:	00000000 	.word	0x00000000
 800babc:	3fe62e43 	.word	0x3fe62e43
 800bac0:	fefa39ef 	.word	0xfefa39ef
 800bac4:	3fe62e42 	.word	0x3fe62e42
 800bac8:	0ca86c39 	.word	0x0ca86c39
 800bacc:	be205c61 	.word	0xbe205c61
 800bad0:	72bea4d0 	.word	0x72bea4d0
 800bad4:	3e663769 	.word	0x3e663769
 800bad8:	c5d26bf1 	.word	0xc5d26bf1
 800badc:	3ebbbd41 	.word	0x3ebbbd41
 800bae0:	af25de2c 	.word	0xaf25de2c
 800bae4:	3f11566a 	.word	0x3f11566a
 800bae8:	16bebd93 	.word	0x16bebd93
 800baec:	3f66c16c 	.word	0x3f66c16c
 800baf0:	5555553e 	.word	0x5555553e
 800baf4:	3fc55555 	.word	0x3fc55555
 800baf8:	c2f8f359 	.word	0xc2f8f359
 800bafc:	01a56e1f 	.word	0x01a56e1f
 800bb00:	3fe00000 	.word	0x3fe00000
 800bb04:	000fffff 	.word	0x000fffff
 800bb08:	3ff00000 	.word	0x3ff00000
 800bb0c:	4090cbff 	.word	0x4090cbff
 800bb10:	3f6f3400 	.word	0x3f6f3400
 800bb14:	652b82fe 	.word	0x652b82fe
 800bb18:	3c971547 	.word	0x3c971547

0800bb1c <__ieee754_sqrt>:
 800bb1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb20:	4955      	ldr	r1, [pc, #340]	; (800bc78 <__ieee754_sqrt+0x15c>)
 800bb22:	ec55 4b10 	vmov	r4, r5, d0
 800bb26:	43a9      	bics	r1, r5
 800bb28:	462b      	mov	r3, r5
 800bb2a:	462a      	mov	r2, r5
 800bb2c:	d112      	bne.n	800bb54 <__ieee754_sqrt+0x38>
 800bb2e:	ee10 2a10 	vmov	r2, s0
 800bb32:	ee10 0a10 	vmov	r0, s0
 800bb36:	4629      	mov	r1, r5
 800bb38:	f7f4 fd5e 	bl	80005f8 <__aeabi_dmul>
 800bb3c:	4602      	mov	r2, r0
 800bb3e:	460b      	mov	r3, r1
 800bb40:	4620      	mov	r0, r4
 800bb42:	4629      	mov	r1, r5
 800bb44:	f7f4 fba2 	bl	800028c <__adddf3>
 800bb48:	4604      	mov	r4, r0
 800bb4a:	460d      	mov	r5, r1
 800bb4c:	ec45 4b10 	vmov	d0, r4, r5
 800bb50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb54:	2d00      	cmp	r5, #0
 800bb56:	ee10 0a10 	vmov	r0, s0
 800bb5a:	4621      	mov	r1, r4
 800bb5c:	dc0f      	bgt.n	800bb7e <__ieee754_sqrt+0x62>
 800bb5e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bb62:	4330      	orrs	r0, r6
 800bb64:	d0f2      	beq.n	800bb4c <__ieee754_sqrt+0x30>
 800bb66:	b155      	cbz	r5, 800bb7e <__ieee754_sqrt+0x62>
 800bb68:	ee10 2a10 	vmov	r2, s0
 800bb6c:	4620      	mov	r0, r4
 800bb6e:	4629      	mov	r1, r5
 800bb70:	f7f4 fb8a 	bl	8000288 <__aeabi_dsub>
 800bb74:	4602      	mov	r2, r0
 800bb76:	460b      	mov	r3, r1
 800bb78:	f7f4 fe68 	bl	800084c <__aeabi_ddiv>
 800bb7c:	e7e4      	b.n	800bb48 <__ieee754_sqrt+0x2c>
 800bb7e:	151b      	asrs	r3, r3, #20
 800bb80:	d073      	beq.n	800bc6a <__ieee754_sqrt+0x14e>
 800bb82:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bb86:	07dd      	lsls	r5, r3, #31
 800bb88:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800bb8c:	bf48      	it	mi
 800bb8e:	0fc8      	lsrmi	r0, r1, #31
 800bb90:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800bb94:	bf44      	itt	mi
 800bb96:	0049      	lslmi	r1, r1, #1
 800bb98:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800bb9c:	2500      	movs	r5, #0
 800bb9e:	1058      	asrs	r0, r3, #1
 800bba0:	0fcb      	lsrs	r3, r1, #31
 800bba2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800bba6:	0049      	lsls	r1, r1, #1
 800bba8:	2316      	movs	r3, #22
 800bbaa:	462c      	mov	r4, r5
 800bbac:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800bbb0:	19a7      	adds	r7, r4, r6
 800bbb2:	4297      	cmp	r7, r2
 800bbb4:	bfde      	ittt	le
 800bbb6:	19bc      	addle	r4, r7, r6
 800bbb8:	1bd2      	suble	r2, r2, r7
 800bbba:	19ad      	addle	r5, r5, r6
 800bbbc:	0fcf      	lsrs	r7, r1, #31
 800bbbe:	3b01      	subs	r3, #1
 800bbc0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800bbc4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800bbc8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800bbcc:	d1f0      	bne.n	800bbb0 <__ieee754_sqrt+0x94>
 800bbce:	f04f 0c20 	mov.w	ip, #32
 800bbd2:	469e      	mov	lr, r3
 800bbd4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800bbd8:	42a2      	cmp	r2, r4
 800bbda:	eb06 070e 	add.w	r7, r6, lr
 800bbde:	dc02      	bgt.n	800bbe6 <__ieee754_sqrt+0xca>
 800bbe0:	d112      	bne.n	800bc08 <__ieee754_sqrt+0xec>
 800bbe2:	428f      	cmp	r7, r1
 800bbe4:	d810      	bhi.n	800bc08 <__ieee754_sqrt+0xec>
 800bbe6:	2f00      	cmp	r7, #0
 800bbe8:	eb07 0e06 	add.w	lr, r7, r6
 800bbec:	da42      	bge.n	800bc74 <__ieee754_sqrt+0x158>
 800bbee:	f1be 0f00 	cmp.w	lr, #0
 800bbf2:	db3f      	blt.n	800bc74 <__ieee754_sqrt+0x158>
 800bbf4:	f104 0801 	add.w	r8, r4, #1
 800bbf8:	1b12      	subs	r2, r2, r4
 800bbfa:	428f      	cmp	r7, r1
 800bbfc:	bf88      	it	hi
 800bbfe:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800bc02:	1bc9      	subs	r1, r1, r7
 800bc04:	4433      	add	r3, r6
 800bc06:	4644      	mov	r4, r8
 800bc08:	0052      	lsls	r2, r2, #1
 800bc0a:	f1bc 0c01 	subs.w	ip, ip, #1
 800bc0e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800bc12:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800bc16:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800bc1a:	d1dd      	bne.n	800bbd8 <__ieee754_sqrt+0xbc>
 800bc1c:	430a      	orrs	r2, r1
 800bc1e:	d006      	beq.n	800bc2e <__ieee754_sqrt+0x112>
 800bc20:	1c5c      	adds	r4, r3, #1
 800bc22:	bf13      	iteet	ne
 800bc24:	3301      	addne	r3, #1
 800bc26:	3501      	addeq	r5, #1
 800bc28:	4663      	moveq	r3, ip
 800bc2a:	f023 0301 	bicne.w	r3, r3, #1
 800bc2e:	106a      	asrs	r2, r5, #1
 800bc30:	085b      	lsrs	r3, r3, #1
 800bc32:	07e9      	lsls	r1, r5, #31
 800bc34:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800bc38:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800bc3c:	bf48      	it	mi
 800bc3e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800bc42:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800bc46:	461c      	mov	r4, r3
 800bc48:	e780      	b.n	800bb4c <__ieee754_sqrt+0x30>
 800bc4a:	0aca      	lsrs	r2, r1, #11
 800bc4c:	3815      	subs	r0, #21
 800bc4e:	0549      	lsls	r1, r1, #21
 800bc50:	2a00      	cmp	r2, #0
 800bc52:	d0fa      	beq.n	800bc4a <__ieee754_sqrt+0x12e>
 800bc54:	02d6      	lsls	r6, r2, #11
 800bc56:	d50a      	bpl.n	800bc6e <__ieee754_sqrt+0x152>
 800bc58:	f1c3 0420 	rsb	r4, r3, #32
 800bc5c:	fa21 f404 	lsr.w	r4, r1, r4
 800bc60:	1e5d      	subs	r5, r3, #1
 800bc62:	4099      	lsls	r1, r3
 800bc64:	4322      	orrs	r2, r4
 800bc66:	1b43      	subs	r3, r0, r5
 800bc68:	e78b      	b.n	800bb82 <__ieee754_sqrt+0x66>
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	e7f0      	b.n	800bc50 <__ieee754_sqrt+0x134>
 800bc6e:	0052      	lsls	r2, r2, #1
 800bc70:	3301      	adds	r3, #1
 800bc72:	e7ef      	b.n	800bc54 <__ieee754_sqrt+0x138>
 800bc74:	46a0      	mov	r8, r4
 800bc76:	e7bf      	b.n	800bbf8 <__ieee754_sqrt+0xdc>
 800bc78:	7ff00000 	.word	0x7ff00000

0800bc7c <fabs>:
 800bc7c:	ec51 0b10 	vmov	r0, r1, d0
 800bc80:	ee10 2a10 	vmov	r2, s0
 800bc84:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bc88:	ec43 2b10 	vmov	d0, r2, r3
 800bc8c:	4770      	bx	lr

0800bc8e <finite>:
 800bc8e:	ee10 3a90 	vmov	r3, s1
 800bc92:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800bc96:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800bc9a:	0fc0      	lsrs	r0, r0, #31
 800bc9c:	4770      	bx	lr

0800bc9e <matherr>:
 800bc9e:	2000      	movs	r0, #0
 800bca0:	4770      	bx	lr
 800bca2:	0000      	movs	r0, r0
 800bca4:	0000      	movs	r0, r0
	...

0800bca8 <nan>:
 800bca8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bcb0 <nan+0x8>
 800bcac:	4770      	bx	lr
 800bcae:	bf00      	nop
 800bcb0:	00000000 	.word	0x00000000
 800bcb4:	7ff80000 	.word	0x7ff80000

0800bcb8 <rint>:
 800bcb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bcba:	ec51 0b10 	vmov	r0, r1, d0
 800bcbe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bcc2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800bcc6:	2e13      	cmp	r6, #19
 800bcc8:	460b      	mov	r3, r1
 800bcca:	ee10 4a10 	vmov	r4, s0
 800bcce:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800bcd2:	dc56      	bgt.n	800bd82 <rint+0xca>
 800bcd4:	2e00      	cmp	r6, #0
 800bcd6:	da2b      	bge.n	800bd30 <rint+0x78>
 800bcd8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800bcdc:	4302      	orrs	r2, r0
 800bcde:	d023      	beq.n	800bd28 <rint+0x70>
 800bce0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800bce4:	4302      	orrs	r2, r0
 800bce6:	4254      	negs	r4, r2
 800bce8:	4314      	orrs	r4, r2
 800bcea:	0c4b      	lsrs	r3, r1, #17
 800bcec:	0b24      	lsrs	r4, r4, #12
 800bcee:	045b      	lsls	r3, r3, #17
 800bcf0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800bcf4:	ea44 0103 	orr.w	r1, r4, r3
 800bcf8:	460b      	mov	r3, r1
 800bcfa:	492f      	ldr	r1, [pc, #188]	; (800bdb8 <rint+0x100>)
 800bcfc:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800bd00:	e9d1 6700 	ldrd	r6, r7, [r1]
 800bd04:	4602      	mov	r2, r0
 800bd06:	4639      	mov	r1, r7
 800bd08:	4630      	mov	r0, r6
 800bd0a:	f7f4 fabf 	bl	800028c <__adddf3>
 800bd0e:	e9cd 0100 	strd	r0, r1, [sp]
 800bd12:	463b      	mov	r3, r7
 800bd14:	4632      	mov	r2, r6
 800bd16:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd1a:	f7f4 fab5 	bl	8000288 <__aeabi_dsub>
 800bd1e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bd22:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800bd26:	4639      	mov	r1, r7
 800bd28:	ec41 0b10 	vmov	d0, r0, r1
 800bd2c:	b003      	add	sp, #12
 800bd2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd30:	4a22      	ldr	r2, [pc, #136]	; (800bdbc <rint+0x104>)
 800bd32:	4132      	asrs	r2, r6
 800bd34:	ea01 0702 	and.w	r7, r1, r2
 800bd38:	4307      	orrs	r7, r0
 800bd3a:	d0f5      	beq.n	800bd28 <rint+0x70>
 800bd3c:	0852      	lsrs	r2, r2, #1
 800bd3e:	4011      	ands	r1, r2
 800bd40:	430c      	orrs	r4, r1
 800bd42:	d00b      	beq.n	800bd5c <rint+0xa4>
 800bd44:	ea23 0202 	bic.w	r2, r3, r2
 800bd48:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bd4c:	2e13      	cmp	r6, #19
 800bd4e:	fa43 f306 	asr.w	r3, r3, r6
 800bd52:	bf0c      	ite	eq
 800bd54:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800bd58:	2400      	movne	r4, #0
 800bd5a:	4313      	orrs	r3, r2
 800bd5c:	4916      	ldr	r1, [pc, #88]	; (800bdb8 <rint+0x100>)
 800bd5e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800bd62:	4622      	mov	r2, r4
 800bd64:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bd68:	4620      	mov	r0, r4
 800bd6a:	4629      	mov	r1, r5
 800bd6c:	f7f4 fa8e 	bl	800028c <__adddf3>
 800bd70:	e9cd 0100 	strd	r0, r1, [sp]
 800bd74:	4622      	mov	r2, r4
 800bd76:	462b      	mov	r3, r5
 800bd78:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd7c:	f7f4 fa84 	bl	8000288 <__aeabi_dsub>
 800bd80:	e7d2      	b.n	800bd28 <rint+0x70>
 800bd82:	2e33      	cmp	r6, #51	; 0x33
 800bd84:	dd07      	ble.n	800bd96 <rint+0xde>
 800bd86:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800bd8a:	d1cd      	bne.n	800bd28 <rint+0x70>
 800bd8c:	ee10 2a10 	vmov	r2, s0
 800bd90:	f7f4 fa7c 	bl	800028c <__adddf3>
 800bd94:	e7c8      	b.n	800bd28 <rint+0x70>
 800bd96:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800bd9a:	f04f 32ff 	mov.w	r2, #4294967295
 800bd9e:	40f2      	lsrs	r2, r6
 800bda0:	4210      	tst	r0, r2
 800bda2:	d0c1      	beq.n	800bd28 <rint+0x70>
 800bda4:	0852      	lsrs	r2, r2, #1
 800bda6:	4210      	tst	r0, r2
 800bda8:	bf1f      	itttt	ne
 800bdaa:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800bdae:	ea20 0202 	bicne.w	r2, r0, r2
 800bdb2:	4134      	asrne	r4, r6
 800bdb4:	4314      	orrne	r4, r2
 800bdb6:	e7d1      	b.n	800bd5c <rint+0xa4>
 800bdb8:	0800c2a0 	.word	0x0800c2a0
 800bdbc:	000fffff 	.word	0x000fffff

0800bdc0 <scalbn>:
 800bdc0:	b570      	push	{r4, r5, r6, lr}
 800bdc2:	ec55 4b10 	vmov	r4, r5, d0
 800bdc6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800bdca:	4606      	mov	r6, r0
 800bdcc:	462b      	mov	r3, r5
 800bdce:	b9aa      	cbnz	r2, 800bdfc <scalbn+0x3c>
 800bdd0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bdd4:	4323      	orrs	r3, r4
 800bdd6:	d03b      	beq.n	800be50 <scalbn+0x90>
 800bdd8:	4b31      	ldr	r3, [pc, #196]	; (800bea0 <scalbn+0xe0>)
 800bdda:	4629      	mov	r1, r5
 800bddc:	2200      	movs	r2, #0
 800bdde:	ee10 0a10 	vmov	r0, s0
 800bde2:	f7f4 fc09 	bl	80005f8 <__aeabi_dmul>
 800bde6:	4b2f      	ldr	r3, [pc, #188]	; (800bea4 <scalbn+0xe4>)
 800bde8:	429e      	cmp	r6, r3
 800bdea:	4604      	mov	r4, r0
 800bdec:	460d      	mov	r5, r1
 800bdee:	da12      	bge.n	800be16 <scalbn+0x56>
 800bdf0:	a327      	add	r3, pc, #156	; (adr r3, 800be90 <scalbn+0xd0>)
 800bdf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf6:	f7f4 fbff 	bl	80005f8 <__aeabi_dmul>
 800bdfa:	e009      	b.n	800be10 <scalbn+0x50>
 800bdfc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800be00:	428a      	cmp	r2, r1
 800be02:	d10c      	bne.n	800be1e <scalbn+0x5e>
 800be04:	ee10 2a10 	vmov	r2, s0
 800be08:	4620      	mov	r0, r4
 800be0a:	4629      	mov	r1, r5
 800be0c:	f7f4 fa3e 	bl	800028c <__adddf3>
 800be10:	4604      	mov	r4, r0
 800be12:	460d      	mov	r5, r1
 800be14:	e01c      	b.n	800be50 <scalbn+0x90>
 800be16:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800be1a:	460b      	mov	r3, r1
 800be1c:	3a36      	subs	r2, #54	; 0x36
 800be1e:	4432      	add	r2, r6
 800be20:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800be24:	428a      	cmp	r2, r1
 800be26:	dd0b      	ble.n	800be40 <scalbn+0x80>
 800be28:	ec45 4b11 	vmov	d1, r4, r5
 800be2c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800be98 <scalbn+0xd8>
 800be30:	f000 f83c 	bl	800beac <copysign>
 800be34:	a318      	add	r3, pc, #96	; (adr r3, 800be98 <scalbn+0xd8>)
 800be36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be3a:	ec51 0b10 	vmov	r0, r1, d0
 800be3e:	e7da      	b.n	800bdf6 <scalbn+0x36>
 800be40:	2a00      	cmp	r2, #0
 800be42:	dd08      	ble.n	800be56 <scalbn+0x96>
 800be44:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800be48:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800be4c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800be50:	ec45 4b10 	vmov	d0, r4, r5
 800be54:	bd70      	pop	{r4, r5, r6, pc}
 800be56:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800be5a:	da0d      	bge.n	800be78 <scalbn+0xb8>
 800be5c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800be60:	429e      	cmp	r6, r3
 800be62:	ec45 4b11 	vmov	d1, r4, r5
 800be66:	dce1      	bgt.n	800be2c <scalbn+0x6c>
 800be68:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800be90 <scalbn+0xd0>
 800be6c:	f000 f81e 	bl	800beac <copysign>
 800be70:	a307      	add	r3, pc, #28	; (adr r3, 800be90 <scalbn+0xd0>)
 800be72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be76:	e7e0      	b.n	800be3a <scalbn+0x7a>
 800be78:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800be7c:	3236      	adds	r2, #54	; 0x36
 800be7e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800be82:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800be86:	4620      	mov	r0, r4
 800be88:	4629      	mov	r1, r5
 800be8a:	2200      	movs	r2, #0
 800be8c:	4b06      	ldr	r3, [pc, #24]	; (800bea8 <scalbn+0xe8>)
 800be8e:	e7b2      	b.n	800bdf6 <scalbn+0x36>
 800be90:	c2f8f359 	.word	0xc2f8f359
 800be94:	01a56e1f 	.word	0x01a56e1f
 800be98:	8800759c 	.word	0x8800759c
 800be9c:	7e37e43c 	.word	0x7e37e43c
 800bea0:	43500000 	.word	0x43500000
 800bea4:	ffff3cb0 	.word	0xffff3cb0
 800bea8:	3c900000 	.word	0x3c900000

0800beac <copysign>:
 800beac:	ec51 0b10 	vmov	r0, r1, d0
 800beb0:	ee11 0a90 	vmov	r0, s3
 800beb4:	ee10 2a10 	vmov	r2, s0
 800beb8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800bebc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800bec0:	ea41 0300 	orr.w	r3, r1, r0
 800bec4:	ec43 2b10 	vmov	d0, r2, r3
 800bec8:	4770      	bx	lr
	...

0800becc <_init>:
 800becc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bece:	bf00      	nop
 800bed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bed2:	bc08      	pop	{r3}
 800bed4:	469e      	mov	lr, r3
 800bed6:	4770      	bx	lr

0800bed8 <_fini>:
 800bed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beda:	bf00      	nop
 800bedc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bede:	bc08      	pop	{r3}
 800bee0:	469e      	mov	lr, r3
 800bee2:	4770      	bx	lr
