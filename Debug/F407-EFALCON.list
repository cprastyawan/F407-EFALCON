
F407-EFALCON.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab34  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000448  0800acc8  0800acc8  0001acc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b110  0800b110  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b110  0800b110  0001b110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b118  0800b118  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b118  0800b118  0001b118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b11c  0800b11c  0001b11c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800b120  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000620  200001e4  0800b304  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000804  0800b304  00020804  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000102ad  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002035  00000000  00000000  000304c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f98  00000000  00000000  000324f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f40  00000000  00000000  00033490  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021074  00000000  00000000  000343d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b539  00000000  00000000  00055444  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cd1c9  00000000  00000000  0006097d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012db46  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f50  00000000  00000000  0012dbc4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800acac 	.word	0x0800acac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800acac 	.word	0x0800acac

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_ldivmod>:
 8000c68:	b97b      	cbnz	r3, 8000c8a <__aeabi_ldivmod+0x22>
 8000c6a:	b972      	cbnz	r2, 8000c8a <__aeabi_ldivmod+0x22>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bfbe      	ittt	lt
 8000c70:	2000      	movlt	r0, #0
 8000c72:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c76:	e006      	blt.n	8000c86 <__aeabi_ldivmod+0x1e>
 8000c78:	bf08      	it	eq
 8000c7a:	2800      	cmpeq	r0, #0
 8000c7c:	bf1c      	itt	ne
 8000c7e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c82:	f04f 30ff 	movne.w	r0, #4294967295
 8000c86:	f000 b9bd 	b.w	8001004 <__aeabi_idiv0>
 8000c8a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c8e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c92:	2900      	cmp	r1, #0
 8000c94:	db09      	blt.n	8000caa <__aeabi_ldivmod+0x42>
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	db1a      	blt.n	8000cd0 <__aeabi_ldivmod+0x68>
 8000c9a:	f000 f84d 	bl	8000d38 <__udivmoddi4>
 8000c9e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca6:	b004      	add	sp, #16
 8000ca8:	4770      	bx	lr
 8000caa:	4240      	negs	r0, r0
 8000cac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	db1b      	blt.n	8000cec <__aeabi_ldivmod+0x84>
 8000cb4:	f000 f840 	bl	8000d38 <__udivmoddi4>
 8000cb8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc0:	b004      	add	sp, #16
 8000cc2:	4240      	negs	r0, r0
 8000cc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc8:	4252      	negs	r2, r2
 8000cca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cce:	4770      	bx	lr
 8000cd0:	4252      	negs	r2, r2
 8000cd2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd6:	f000 f82f 	bl	8000d38 <__udivmoddi4>
 8000cda:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce2:	b004      	add	sp, #16
 8000ce4:	4240      	negs	r0, r0
 8000ce6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cea:	4770      	bx	lr
 8000cec:	4252      	negs	r2, r2
 8000cee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf2:	f000 f821 	bl	8000d38 <__udivmoddi4>
 8000cf6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cfe:	b004      	add	sp, #16
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_uldivmod>:
 8000d08:	b953      	cbnz	r3, 8000d20 <__aeabi_uldivmod+0x18>
 8000d0a:	b94a      	cbnz	r2, 8000d20 <__aeabi_uldivmod+0x18>
 8000d0c:	2900      	cmp	r1, #0
 8000d0e:	bf08      	it	eq
 8000d10:	2800      	cmpeq	r0, #0
 8000d12:	bf1c      	itt	ne
 8000d14:	f04f 31ff 	movne.w	r1, #4294967295
 8000d18:	f04f 30ff 	movne.w	r0, #4294967295
 8000d1c:	f000 b972 	b.w	8001004 <__aeabi_idiv0>
 8000d20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d28:	f000 f806 	bl	8000d38 <__udivmoddi4>
 8000d2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d34:	b004      	add	sp, #16
 8000d36:	4770      	bx	lr

08000d38 <__udivmoddi4>:
 8000d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d3c:	9e08      	ldr	r6, [sp, #32]
 8000d3e:	4604      	mov	r4, r0
 8000d40:	4688      	mov	r8, r1
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d14b      	bne.n	8000dde <__udivmoddi4+0xa6>
 8000d46:	428a      	cmp	r2, r1
 8000d48:	4615      	mov	r5, r2
 8000d4a:	d967      	bls.n	8000e1c <__udivmoddi4+0xe4>
 8000d4c:	fab2 f282 	clz	r2, r2
 8000d50:	b14a      	cbz	r2, 8000d66 <__udivmoddi4+0x2e>
 8000d52:	f1c2 0720 	rsb	r7, r2, #32
 8000d56:	fa01 f302 	lsl.w	r3, r1, r2
 8000d5a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d5e:	4095      	lsls	r5, r2
 8000d60:	ea47 0803 	orr.w	r8, r7, r3
 8000d64:	4094      	lsls	r4, r2
 8000d66:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d6a:	0c23      	lsrs	r3, r4, #16
 8000d6c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d70:	fa1f fc85 	uxth.w	ip, r5
 8000d74:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d78:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d7c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d80:	4299      	cmp	r1, r3
 8000d82:	d909      	bls.n	8000d98 <__udivmoddi4+0x60>
 8000d84:	18eb      	adds	r3, r5, r3
 8000d86:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d8a:	f080 811b 	bcs.w	8000fc4 <__udivmoddi4+0x28c>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 8118 	bls.w	8000fc4 <__udivmoddi4+0x28c>
 8000d94:	3f02      	subs	r7, #2
 8000d96:	442b      	add	r3, r5
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000da0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dac:	45a4      	cmp	ip, r4
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x8c>
 8000db0:	192c      	adds	r4, r5, r4
 8000db2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db6:	f080 8107 	bcs.w	8000fc8 <__udivmoddi4+0x290>
 8000dba:	45a4      	cmp	ip, r4
 8000dbc:	f240 8104 	bls.w	8000fc8 <__udivmoddi4+0x290>
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	442c      	add	r4, r5
 8000dc4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000dc8:	eba4 040c 	sub.w	r4, r4, ip
 8000dcc:	2700      	movs	r7, #0
 8000dce:	b11e      	cbz	r6, 8000dd8 <__udivmoddi4+0xa0>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c6 4300 	strd	r4, r3, [r6]
 8000dd8:	4639      	mov	r1, r7
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xbe>
 8000de2:	2e00      	cmp	r6, #0
 8000de4:	f000 80eb 	beq.w	8000fbe <__udivmoddi4+0x286>
 8000de8:	2700      	movs	r7, #0
 8000dea:	e9c6 0100 	strd	r0, r1, [r6]
 8000dee:	4638      	mov	r0, r7
 8000df0:	4639      	mov	r1, r7
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f783 	clz	r7, r3
 8000dfa:	2f00      	cmp	r7, #0
 8000dfc:	d147      	bne.n	8000e8e <__udivmoddi4+0x156>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd0>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80fa 	bhi.w	8000ffc <__udivmoddi4+0x2c4>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	4698      	mov	r8, r3
 8000e12:	2e00      	cmp	r6, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa0>
 8000e16:	e9c6 4800 	strd	r4, r8, [r6]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa0>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xe8>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 808f 	bne.w	8000f48 <__udivmoddi4+0x210>
 8000e2a:	1b49      	subs	r1, r1, r5
 8000e2c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e30:	fa1f f885 	uxth.w	r8, r5
 8000e34:	2701      	movs	r7, #1
 8000e36:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e3a:	0c23      	lsrs	r3, r4, #16
 8000e3c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e44:	fb08 f10c 	mul.w	r1, r8, ip
 8000e48:	4299      	cmp	r1, r3
 8000e4a:	d907      	bls.n	8000e5c <__udivmoddi4+0x124>
 8000e4c:	18eb      	adds	r3, r5, r3
 8000e4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e52:	d202      	bcs.n	8000e5a <__udivmoddi4+0x122>
 8000e54:	4299      	cmp	r1, r3
 8000e56:	f200 80cd 	bhi.w	8000ff4 <__udivmoddi4+0x2bc>
 8000e5a:	4684      	mov	ip, r0
 8000e5c:	1a59      	subs	r1, r3, r1
 8000e5e:	b2a3      	uxth	r3, r4
 8000e60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e64:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e68:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e6c:	fb08 f800 	mul.w	r8, r8, r0
 8000e70:	45a0      	cmp	r8, r4
 8000e72:	d907      	bls.n	8000e84 <__udivmoddi4+0x14c>
 8000e74:	192c      	adds	r4, r5, r4
 8000e76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e7a:	d202      	bcs.n	8000e82 <__udivmoddi4+0x14a>
 8000e7c:	45a0      	cmp	r8, r4
 8000e7e:	f200 80b6 	bhi.w	8000fee <__udivmoddi4+0x2b6>
 8000e82:	4618      	mov	r0, r3
 8000e84:	eba4 0408 	sub.w	r4, r4, r8
 8000e88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e8c:	e79f      	b.n	8000dce <__udivmoddi4+0x96>
 8000e8e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e92:	40bb      	lsls	r3, r7
 8000e94:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e98:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e9c:	fa01 f407 	lsl.w	r4, r1, r7
 8000ea0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ea4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ea8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000eac:	4325      	orrs	r5, r4
 8000eae:	fbb3 f9f8 	udiv	r9, r3, r8
 8000eb2:	0c2c      	lsrs	r4, r5, #16
 8000eb4:	fb08 3319 	mls	r3, r8, r9, r3
 8000eb8:	fa1f fa8e 	uxth.w	sl, lr
 8000ebc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ec0:	fb09 f40a 	mul.w	r4, r9, sl
 8000ec4:	429c      	cmp	r4, r3
 8000ec6:	fa02 f207 	lsl.w	r2, r2, r7
 8000eca:	fa00 f107 	lsl.w	r1, r0, r7
 8000ece:	d90b      	bls.n	8000ee8 <__udivmoddi4+0x1b0>
 8000ed0:	eb1e 0303 	adds.w	r3, lr, r3
 8000ed4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ed8:	f080 8087 	bcs.w	8000fea <__udivmoddi4+0x2b2>
 8000edc:	429c      	cmp	r4, r3
 8000ede:	f240 8084 	bls.w	8000fea <__udivmoddi4+0x2b2>
 8000ee2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ee6:	4473      	add	r3, lr
 8000ee8:	1b1b      	subs	r3, r3, r4
 8000eea:	b2ad      	uxth	r5, r5
 8000eec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ef0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ef4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ef8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000efc:	45a2      	cmp	sl, r4
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x1da>
 8000f00:	eb1e 0404 	adds.w	r4, lr, r4
 8000f04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f08:	d26b      	bcs.n	8000fe2 <__udivmoddi4+0x2aa>
 8000f0a:	45a2      	cmp	sl, r4
 8000f0c:	d969      	bls.n	8000fe2 <__udivmoddi4+0x2aa>
 8000f0e:	3802      	subs	r0, #2
 8000f10:	4474      	add	r4, lr
 8000f12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f16:	fba0 8902 	umull	r8, r9, r0, r2
 8000f1a:	eba4 040a 	sub.w	r4, r4, sl
 8000f1e:	454c      	cmp	r4, r9
 8000f20:	46c2      	mov	sl, r8
 8000f22:	464b      	mov	r3, r9
 8000f24:	d354      	bcc.n	8000fd0 <__udivmoddi4+0x298>
 8000f26:	d051      	beq.n	8000fcc <__udivmoddi4+0x294>
 8000f28:	2e00      	cmp	r6, #0
 8000f2a:	d069      	beq.n	8001000 <__udivmoddi4+0x2c8>
 8000f2c:	ebb1 050a 	subs.w	r5, r1, sl
 8000f30:	eb64 0403 	sbc.w	r4, r4, r3
 8000f34:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f38:	40fd      	lsrs	r5, r7
 8000f3a:	40fc      	lsrs	r4, r7
 8000f3c:	ea4c 0505 	orr.w	r5, ip, r5
 8000f40:	e9c6 5400 	strd	r5, r4, [r6]
 8000f44:	2700      	movs	r7, #0
 8000f46:	e747      	b.n	8000dd8 <__udivmoddi4+0xa0>
 8000f48:	f1c2 0320 	rsb	r3, r2, #32
 8000f4c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f50:	4095      	lsls	r5, r2
 8000f52:	fa01 f002 	lsl.w	r0, r1, r2
 8000f56:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f5e:	4338      	orrs	r0, r7
 8000f60:	0c01      	lsrs	r1, r0, #16
 8000f62:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f66:	fa1f f885 	uxth.w	r8, r5
 8000f6a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f72:	fb07 f308 	mul.w	r3, r7, r8
 8000f76:	428b      	cmp	r3, r1
 8000f78:	fa04 f402 	lsl.w	r4, r4, r2
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x256>
 8000f7e:	1869      	adds	r1, r5, r1
 8000f80:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f84:	d22f      	bcs.n	8000fe6 <__udivmoddi4+0x2ae>
 8000f86:	428b      	cmp	r3, r1
 8000f88:	d92d      	bls.n	8000fe6 <__udivmoddi4+0x2ae>
 8000f8a:	3f02      	subs	r7, #2
 8000f8c:	4429      	add	r1, r5
 8000f8e:	1acb      	subs	r3, r1, r3
 8000f90:	b281      	uxth	r1, r0
 8000f92:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f96:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f9a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f9e:	fb00 f308 	mul.w	r3, r0, r8
 8000fa2:	428b      	cmp	r3, r1
 8000fa4:	d907      	bls.n	8000fb6 <__udivmoddi4+0x27e>
 8000fa6:	1869      	adds	r1, r5, r1
 8000fa8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000fac:	d217      	bcs.n	8000fde <__udivmoddi4+0x2a6>
 8000fae:	428b      	cmp	r3, r1
 8000fb0:	d915      	bls.n	8000fde <__udivmoddi4+0x2a6>
 8000fb2:	3802      	subs	r0, #2
 8000fb4:	4429      	add	r1, r5
 8000fb6:	1ac9      	subs	r1, r1, r3
 8000fb8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000fbc:	e73b      	b.n	8000e36 <__udivmoddi4+0xfe>
 8000fbe:	4637      	mov	r7, r6
 8000fc0:	4630      	mov	r0, r6
 8000fc2:	e709      	b.n	8000dd8 <__udivmoddi4+0xa0>
 8000fc4:	4607      	mov	r7, r0
 8000fc6:	e6e7      	b.n	8000d98 <__udivmoddi4+0x60>
 8000fc8:	4618      	mov	r0, r3
 8000fca:	e6fb      	b.n	8000dc4 <__udivmoddi4+0x8c>
 8000fcc:	4541      	cmp	r1, r8
 8000fce:	d2ab      	bcs.n	8000f28 <__udivmoddi4+0x1f0>
 8000fd0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000fd4:	eb69 020e 	sbc.w	r2, r9, lr
 8000fd8:	3801      	subs	r0, #1
 8000fda:	4613      	mov	r3, r2
 8000fdc:	e7a4      	b.n	8000f28 <__udivmoddi4+0x1f0>
 8000fde:	4660      	mov	r0, ip
 8000fe0:	e7e9      	b.n	8000fb6 <__udivmoddi4+0x27e>
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	e795      	b.n	8000f12 <__udivmoddi4+0x1da>
 8000fe6:	4667      	mov	r7, ip
 8000fe8:	e7d1      	b.n	8000f8e <__udivmoddi4+0x256>
 8000fea:	4681      	mov	r9, r0
 8000fec:	e77c      	b.n	8000ee8 <__udivmoddi4+0x1b0>
 8000fee:	3802      	subs	r0, #2
 8000ff0:	442c      	add	r4, r5
 8000ff2:	e747      	b.n	8000e84 <__udivmoddi4+0x14c>
 8000ff4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ff8:	442b      	add	r3, r5
 8000ffa:	e72f      	b.n	8000e5c <__udivmoddi4+0x124>
 8000ffc:	4638      	mov	r0, r7
 8000ffe:	e708      	b.n	8000e12 <__udivmoddi4+0xda>
 8001000:	4637      	mov	r7, r6
 8001002:	e6e9      	b.n	8000dd8 <__udivmoddi4+0xa0>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2203      	movs	r2, #3
 8001014:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2200      	movs	r2, #0
 800101a:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_ULTRA_HIGH_RES;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2205      	movs	r2, #5
 8001020:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_ULTRA_HIGH_RES;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2205      	movs	r2, #5
 8001026:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_ULTRA_HIGH_RES;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2205      	movs	r2, #5
 800102c:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2203      	movs	r2, #3
 8001032:	715a      	strb	r2, [r3, #5]
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b08a      	sub	sp, #40	; 0x28
 8001044:	af04      	add	r7, sp, #16
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	460b      	mov	r3, r1
 800104a:	607a      	str	r2, [r7, #4]
 800104c:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800105a:	7afb      	ldrb	r3, [r7, #11]
 800105c:	b29a      	uxth	r2, r3
 800105e:	8af9      	ldrh	r1, [r7, #22]
 8001060:	f241 3388 	movw	r3, #5000	; 0x1388
 8001064:	9302      	str	r3, [sp, #8]
 8001066:	2302      	movs	r3, #2
 8001068:	9301      	str	r3, [sp, #4]
 800106a:	f107 0314 	add.w	r3, r7, #20
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	2301      	movs	r3, #1
 8001072:	f003 fb85 	bl	8004780 <HAL_I2C_Mem_Read>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d10b      	bne.n	8001094 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 800107c:	7d7b      	ldrb	r3, [r7, #21]
 800107e:	021b      	lsls	r3, r3, #8
 8001080:	b21a      	sxth	r2, r3
 8001082:	7d3b      	ldrb	r3, [r7, #20]
 8001084:	b21b      	sxth	r3, r3
 8001086:	4313      	orrs	r3, r2
 8001088:	b21b      	sxth	r3, r3
 800108a:	b29a      	uxth	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	801a      	strh	r2, [r3, #0]
		return true;
 8001090:	2301      	movs	r3, #1
 8001092:	e000      	b.n	8001096 <read_register16+0x56>
	} else
		return false;
 8001094:	2300      	movs	r3, #0

}
 8001096:	4618      	mov	r0, r3
 8001098:	3718      	adds	r7, #24
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 800109e:	b590      	push	{r4, r7, lr}
 80010a0:	b08b      	sub	sp, #44	; 0x2c
 80010a2:	af04      	add	r7, sp, #16
 80010a4:	60f8      	str	r0, [r7, #12]
 80010a6:	607a      	str	r2, [r7, #4]
 80010a8:	461a      	mov	r2, r3
 80010aa:	460b      	mov	r3, r1
 80010ac:	72fb      	strb	r3, [r7, #11]
 80010ae:	4613      	mov	r3, r2
 80010b0:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80010be:	7afb      	ldrb	r3, [r7, #11]
 80010c0:	b29c      	uxth	r4, r3
 80010c2:	7abb      	ldrb	r3, [r7, #10]
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	8af9      	ldrh	r1, [r7, #22]
 80010c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80010cc:	9202      	str	r2, [sp, #8]
 80010ce:	9301      	str	r3, [sp, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	2301      	movs	r3, #1
 80010d6:	4622      	mov	r2, r4
 80010d8:	f003 fb52 	bl	8004780 <HAL_I2C_Mem_Read>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d101      	bne.n	80010e6 <read_data+0x48>
		return 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	e000      	b.n	80010e8 <read_data+0x4a>
	else
		return 1;
 80010e6:	2301      	movs	r3, #1

}
 80010e8:	4618      	mov	r0, r3
 80010ea:	371c      	adds	r7, #28
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd90      	pop	{r4, r7, pc}

080010f0 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	461a      	mov	r2, r3
 80010fc:	2188      	movs	r1, #136	; 0x88
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f7ff ff9e 	bl	8001040 <read_register16>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d06f      	beq.n	80011ea <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	3302      	adds	r3, #2
 800110e:	461a      	mov	r2, r3
 8001110:	218a      	movs	r1, #138	; 0x8a
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff ff94 	bl	8001040 <read_register16>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d065      	beq.n	80011ea <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	3304      	adds	r3, #4
 8001122:	461a      	mov	r2, r3
 8001124:	218c      	movs	r1, #140	; 0x8c
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f7ff ff8a 	bl	8001040 <read_register16>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d05b      	beq.n	80011ea <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	3306      	adds	r3, #6
 8001136:	461a      	mov	r2, r3
 8001138:	218e      	movs	r1, #142	; 0x8e
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff ff80 	bl	8001040 <read_register16>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d051      	beq.n	80011ea <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	3308      	adds	r3, #8
 800114a:	461a      	mov	r2, r3
 800114c:	2190      	movs	r1, #144	; 0x90
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff ff76 	bl	8001040 <read_register16>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d047      	beq.n	80011ea <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	330a      	adds	r3, #10
 800115e:	461a      	mov	r2, r3
 8001160:	2192      	movs	r1, #146	; 0x92
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f7ff ff6c 	bl	8001040 <read_register16>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d03d      	beq.n	80011ea <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	330c      	adds	r3, #12
 8001172:	461a      	mov	r2, r3
 8001174:	2194      	movs	r1, #148	; 0x94
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f7ff ff62 	bl	8001040 <read_register16>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d033      	beq.n	80011ea <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	330e      	adds	r3, #14
 8001186:	461a      	mov	r2, r3
 8001188:	2196      	movs	r1, #150	; 0x96
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff ff58 	bl	8001040 <read_register16>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d029      	beq.n	80011ea <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	3310      	adds	r3, #16
 800119a:	461a      	mov	r2, r3
 800119c:	2198      	movs	r1, #152	; 0x98
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff ff4e 	bl	8001040 <read_register16>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d01f      	beq.n	80011ea <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	3312      	adds	r3, #18
 80011ae:	461a      	mov	r2, r3
 80011b0:	219a      	movs	r1, #154	; 0x9a
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f7ff ff44 	bl	8001040 <read_register16>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d015      	beq.n	80011ea <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	3314      	adds	r3, #20
 80011c2:	461a      	mov	r2, r3
 80011c4:	219c      	movs	r1, #156	; 0x9c
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff ff3a 	bl	8001040 <read_register16>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d00b      	beq.n	80011ea <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 80011d6:	461a      	mov	r2, r3
 80011d8:	219e      	movs	r1, #158	; 0x9e
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f7ff ff30 	bl	8001040 <read_register16>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <read_calibration_data+0xfa>

		return true;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e000      	b.n	80011ec <read_calibration_data+0xfc>
	}

	return false;
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f103 0218 	add.w	r2, r3, #24
 8001202:	2301      	movs	r3, #1
 8001204:	21a1      	movs	r1, #161	; 0xa1
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff ff49 	bl	800109e <read_data>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d14b      	bne.n	80012aa <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	331a      	adds	r3, #26
 8001216:	461a      	mov	r2, r3
 8001218:	21e1      	movs	r1, #225	; 0xe1
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff ff10 	bl	8001040 <read_register16>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d041      	beq.n	80012aa <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f103 021c 	add.w	r2, r3, #28
 800122c:	2301      	movs	r3, #1
 800122e:	21e3      	movs	r1, #227	; 0xe3
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f7ff ff34 	bl	800109e <read_data>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d136      	bne.n	80012aa <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 800123c:	f107 030e 	add.w	r3, r7, #14
 8001240:	461a      	mov	r2, r3
 8001242:	21e4      	movs	r1, #228	; 0xe4
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7ff fefb 	bl	8001040 <read_register16>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d02c      	beq.n	80012aa <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 8001250:	f107 030c 	add.w	r3, r7, #12
 8001254:	461a      	mov	r2, r3
 8001256:	21e5      	movs	r1, #229	; 0xe5
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff fef1 	bl	8001040 <read_register16>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d022      	beq.n	80012aa <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f103 0222 	add.w	r2, r3, #34	; 0x22
 800126a:	2301      	movs	r3, #1
 800126c:	21e7      	movs	r1, #231	; 0xe7
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff ff15 	bl	800109e <read_data>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d117      	bne.n	80012aa <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 800127a:	89fb      	ldrh	r3, [r7, #14]
 800127c:	011b      	lsls	r3, r3, #4
 800127e:	b21b      	sxth	r3, r3
 8001280:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 8001284:	b21a      	sxth	r2, r3
 8001286:	89fb      	ldrh	r3, [r7, #14]
 8001288:	121b      	asrs	r3, r3, #8
 800128a:	b21b      	sxth	r3, r3
 800128c:	f003 030f 	and.w	r3, r3, #15
 8001290:	b21b      	sxth	r3, r3
 8001292:	4313      	orrs	r3, r2
 8001294:	b21a      	sxth	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 800129a:	89bb      	ldrh	r3, [r7, #12]
 800129c:	091b      	lsrs	r3, r3, #4
 800129e:	b29b      	uxth	r3, r3
 80012a0:	b21a      	sxth	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	841a      	strh	r2, [r3, #32]

		return true;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e000      	b.n	80012ac <read_hum_calibration_data+0xb8>
	}

	return false;
 80012aa:	2300      	movs	r3, #0
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3710      	adds	r7, #16
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b088      	sub	sp, #32
 80012b8:	af04      	add	r7, sp, #16
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	460b      	mov	r3, r1
 80012be:	70fb      	strb	r3, [r7, #3]
 80012c0:	4613      	mov	r3, r2
 80012c2:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80012d0:	78fb      	ldrb	r3, [r7, #3]
 80012d2:	b29a      	uxth	r2, r3
 80012d4:	89f9      	ldrh	r1, [r7, #14]
 80012d6:	f242 7310 	movw	r3, #10000	; 0x2710
 80012da:	9302      	str	r3, [sp, #8]
 80012dc:	2301      	movs	r3, #1
 80012de:	9301      	str	r3, [sp, #4]
 80012e0:	1cbb      	adds	r3, r7, #2
 80012e2:	9300      	str	r3, [sp, #0]
 80012e4:	2301      	movs	r3, #1
 80012e6:	f003 f951 	bl	800458c <HAL_I2C_Mem_Write>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d101      	bne.n	80012f4 <write_register8+0x40>
		return false;
 80012f0:	2300      	movs	r3, #0
 80012f2:	e000      	b.n	80012f6 <write_register8+0x42>
	else
		return true;
 80012f4:	2301      	movs	r3, #1
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 80012fe:	b580      	push	{r7, lr}
 8001300:	b084      	sub	sp, #16
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
 8001306:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800130c:	2b76      	cmp	r3, #118	; 0x76
 800130e:	d005      	beq.n	800131c <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001314:	2b77      	cmp	r3, #119	; 0x77
 8001316:	d001      	beq.n	800131c <bmp280_init+0x1e>

		return false;
 8001318:	2300      	movs	r3, #0
 800131a:	e099      	b.n	8001450 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001322:	2301      	movs	r3, #1
 8001324:	21d0      	movs	r1, #208	; 0xd0
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7ff feb9 	bl	800109e <read_data>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <bmp280_init+0x38>
		return false;
 8001332:	2300      	movs	r3, #0
 8001334:	e08c      	b.n	8001450 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800133c:	2b58      	cmp	r3, #88	; 0x58
 800133e:	d006      	beq.n	800134e <bmp280_init+0x50>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001346:	2b60      	cmp	r3, #96	; 0x60
 8001348:	d001      	beq.n	800134e <bmp280_init+0x50>

		return false;
 800134a:	2300      	movs	r3, #0
 800134c:	e080      	b.n	8001450 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 800134e:	22b6      	movs	r2, #182	; 0xb6
 8001350:	21e0      	movs	r1, #224	; 0xe0
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7ff ffae 	bl	80012b4 <write_register8>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <bmp280_init+0x64>
		return false;
 800135e:	2300      	movs	r3, #0
 8001360:	e076      	b.n	8001450 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8001362:	f107 020c 	add.w	r2, r7, #12
 8001366:	2301      	movs	r3, #1
 8001368:	21f3      	movs	r1, #243	; 0xf3
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f7ff fe97 	bl	800109e <read_data>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d1f5      	bne.n	8001362 <bmp280_init+0x64>
				&& (status & 1) == 0)
 8001376:	7b3b      	ldrb	r3, [r7, #12]
 8001378:	f003 0301 	and.w	r3, r3, #1
 800137c:	2b00      	cmp	r3, #0
 800137e:	d1f0      	bne.n	8001362 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f7ff feb5 	bl	80010f0 <read_calibration_data>
 8001386:	4603      	mov	r3, r0
 8001388:	f083 0301 	eor.w	r3, r3, #1
 800138c:	b2db      	uxtb	r3, r3
 800138e:	2b00      	cmp	r3, #0
 8001390:	d100      	bne.n	8001394 <bmp280_init+0x96>
 8001392:	e001      	b.n	8001398 <bmp280_init+0x9a>
		return false;
 8001394:	2300      	movs	r3, #0
 8001396:	e05b      	b.n	8001450 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800139e:	2b60      	cmp	r3, #96	; 0x60
 80013a0:	d10a      	bne.n	80013b8 <bmp280_init+0xba>
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff ff26 	bl	80011f4 <read_hum_calibration_data>
 80013a8:	4603      	mov	r3, r0
 80013aa:	f083 0301 	eor.w	r3, r3, #1
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <bmp280_init+0xba>
		return false;
 80013b4:	2300      	movs	r3, #0
 80013b6:	e04b      	b.n	8001450 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	795b      	ldrb	r3, [r3, #5]
 80013bc:	015b      	lsls	r3, r3, #5
 80013be:	b25a      	sxtb	r2, r3
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	785b      	ldrb	r3, [r3, #1]
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	b25b      	sxtb	r3, r3
 80013c8:	4313      	orrs	r3, r2
 80013ca:	b25b      	sxtb	r3, r3
 80013cc:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 80013ce:	7bfb      	ldrb	r3, [r7, #15]
 80013d0:	461a      	mov	r2, r3
 80013d2:	21f5      	movs	r1, #245	; 0xf5
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7ff ff6d 	bl	80012b4 <write_register8>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <bmp280_init+0xe6>
		return false;
 80013e0:	2300      	movs	r3, #0
 80013e2:	e035      	b.n	8001450 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d102      	bne.n	80013f2 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	2200      	movs	r2, #0
 80013f0:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	78db      	ldrb	r3, [r3, #3]
 80013f6:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 80013f8:	b25a      	sxtb	r2, r3
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	789b      	ldrb	r3, [r3, #2]
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	b25b      	sxtb	r3, r3
 8001402:	4313      	orrs	r3, r2
 8001404:	b25a      	sxtb	r2, r3
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	b25b      	sxtb	r3, r3
 800140c:	4313      	orrs	r3, r2
 800140e:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001410:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001418:	2b60      	cmp	r3, #96	; 0x60
 800141a:	d10d      	bne.n	8001438 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	791b      	ldrb	r3, [r3, #4]
 8001420:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8001422:	7b7b      	ldrb	r3, [r7, #13]
 8001424:	461a      	mov	r2, r3
 8001426:	21f2      	movs	r1, #242	; 0xf2
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f7ff ff43 	bl	80012b4 <write_register8>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <bmp280_init+0x13a>
			return false;
 8001434:	2300      	movs	r3, #0
 8001436:	e00b      	b.n	8001450 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8001438:	7bbb      	ldrb	r3, [r7, #14]
 800143a:	461a      	mov	r2, r3
 800143c:	21f4      	movs	r1, #244	; 0xf4
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f7ff ff38 	bl	80012b4 <write_register8>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <bmp280_init+0x150>
		return false;
 800144a:	2300      	movs	r3, #0
 800144c:	e000      	b.n	8001450 <bmp280_init+0x152>
	}

	return true;
 800144e:	2301      	movs	r3, #1
}
 8001450:	4618      	mov	r0, r3
 8001452:	3710      	adds	r7, #16
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8001458:	b480      	push	{r7}
 800145a:	b087      	sub	sp, #28
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	10da      	asrs	r2, r3, #3
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	881b      	ldrh	r3, [r3, #0]
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8001470:	68fa      	ldr	r2, [r7, #12]
 8001472:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001476:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 800147a:	12db      	asrs	r3, r3, #11
 800147c:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	111b      	asrs	r3, r3, #4
 8001482:	68fa      	ldr	r2, [r7, #12]
 8001484:	8812      	ldrh	r2, [r2, #0]
 8001486:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8001488:	68ba      	ldr	r2, [r7, #8]
 800148a:	1112      	asrs	r2, r2, #4
 800148c:	68f9      	ldr	r1, [r7, #12]
 800148e:	8809      	ldrh	r1, [r1, #0]
 8001490:	1a52      	subs	r2, r2, r1
 8001492:	fb02 f303 	mul.w	r3, r2, r3
 8001496:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8001498:	68fa      	ldr	r2, [r7, #12]
 800149a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800149e:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80014a2:	139b      	asrs	r3, r3, #14
 80014a4:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 80014a6:	697a      	ldr	r2, [r7, #20]
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	441a      	add	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	4613      	mov	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	4413      	add	r3, r2
 80014ba:	3380      	adds	r3, #128	; 0x80
 80014bc:	121b      	asrs	r3, r3, #8
}
 80014be:	4618      	mov	r0, r3
 80014c0:	371c      	adds	r7, #28
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 80014ca:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 80014ce:	b08a      	sub	sp, #40	; 0x28
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	607a      	str	r2, [r7, #4]
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	4619      	mov	r1, r3
 80014dc:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80014e0:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 80014e4:	f142 34ff 	adc.w	r4, r2, #4294967295
 80014e8:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 80014ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ee:	6a3a      	ldr	r2, [r7, #32]
 80014f0:	fb02 f203 	mul.w	r2, r2, r3
 80014f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f6:	6a39      	ldr	r1, [r7, #32]
 80014f8:	fb01 f303 	mul.w	r3, r1, r3
 80014fc:	441a      	add	r2, r3
 80014fe:	6a39      	ldr	r1, [r7, #32]
 8001500:	6a3b      	ldr	r3, [r7, #32]
 8001502:	fba1 3403 	umull	r3, r4, r1, r3
 8001506:	4422      	add	r2, r4
 8001508:	4614      	mov	r4, r2
 800150a:	68fa      	ldr	r2, [r7, #12]
 800150c:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8001510:	b211      	sxth	r1, r2
 8001512:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001516:	fb01 f504 	mul.w	r5, r1, r4
 800151a:	fb03 f002 	mul.w	r0, r3, r2
 800151e:	4428      	add	r0, r5
 8001520:	fba3 3401 	umull	r3, r4, r3, r1
 8001524:	1902      	adds	r2, r0, r4
 8001526:	4614      	mov	r4, r2
 8001528:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800152c:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001536:	b21b      	sxth	r3, r3
 8001538:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800153c:	6a3a      	ldr	r2, [r7, #32]
 800153e:	fb04 f102 	mul.w	r1, r4, r2
 8001542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001544:	fb03 f202 	mul.w	r2, r3, r2
 8001548:	1888      	adds	r0, r1, r2
 800154a:	6a3a      	ldr	r2, [r7, #32]
 800154c:	fba2 1203 	umull	r1, r2, r2, r3
 8001550:	1883      	adds	r3, r0, r2
 8001552:	461a      	mov	r2, r3
 8001554:	f04f 0500 	mov.w	r5, #0
 8001558:	f04f 0600 	mov.w	r6, #0
 800155c:	0456      	lsls	r6, r2, #17
 800155e:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 8001562:	044d      	lsls	r5, r1, #17
 8001564:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001568:	186b      	adds	r3, r5, r1
 800156a:	eb46 0402 	adc.w	r4, r6, r2
 800156e:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001578:	b219      	sxth	r1, r3
 800157a:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800157e:	f04f 0500 	mov.w	r5, #0
 8001582:	f04f 0600 	mov.w	r6, #0
 8001586:	00ce      	lsls	r6, r1, #3
 8001588:	2500      	movs	r5, #0
 800158a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800158e:	186b      	adds	r3, r5, r1
 8001590:	eb46 0402 	adc.w	r4, r6, r2
 8001594:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159a:	6a3a      	ldr	r2, [r7, #32]
 800159c:	fb02 f203 	mul.w	r2, r2, r3
 80015a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a2:	6a39      	ldr	r1, [r7, #32]
 80015a4:	fb01 f303 	mul.w	r3, r1, r3
 80015a8:	441a      	add	r2, r3
 80015aa:	6a39      	ldr	r1, [r7, #32]
 80015ac:	6a3b      	ldr	r3, [r7, #32]
 80015ae:	fba1 3403 	umull	r3, r4, r1, r3
 80015b2:	4422      	add	r2, r4
 80015b4:	4614      	mov	r4, r2
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 80015bc:	b211      	sxth	r1, r2
 80015be:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80015c2:	fb01 f504 	mul.w	r5, r1, r4
 80015c6:	fb03 f002 	mul.w	r0, r3, r2
 80015ca:	4428      	add	r0, r5
 80015cc:	fba3 3401 	umull	r3, r4, r3, r1
 80015d0:	1902      	adds	r2, r0, r4
 80015d2:	4614      	mov	r4, r2
 80015d4:	f04f 0100 	mov.w	r1, #0
 80015d8:	f04f 0200 	mov.w	r2, #0
 80015dc:	0a19      	lsrs	r1, r3, #8
 80015de:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 80015e2:	1222      	asrs	r2, r4, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80015ea:	b21b      	sxth	r3, r3
 80015ec:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80015f0:	6a38      	ldr	r0, [r7, #32]
 80015f2:	fb04 f500 	mul.w	r5, r4, r0
 80015f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80015f8:	fb03 f000 	mul.w	r0, r3, r0
 80015fc:	4428      	add	r0, r5
 80015fe:	6a3d      	ldr	r5, [r7, #32]
 8001600:	fba5 5603 	umull	r5, r6, r5, r3
 8001604:	1983      	adds	r3, r0, r6
 8001606:	461e      	mov	r6, r3
 8001608:	f04f 0b00 	mov.w	fp, #0
 800160c:	f04f 0c00 	mov.w	ip, #0
 8001610:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 8001614:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 8001618:	ea4f 3b05 	mov.w	fp, r5, lsl #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 800161c:	eb1b 0301 	adds.w	r3, fp, r1
 8001620:	eb4c 0402 	adc.w	r4, ip, r2
 8001624:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8001628:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800162c:	1c19      	adds	r1, r3, #0
 800162e:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	88db      	ldrh	r3, [r3, #6]
 8001636:	b29b      	uxth	r3, r3
 8001638:	f04f 0400 	mov.w	r4, #0
 800163c:	fb03 f502 	mul.w	r5, r3, r2
 8001640:	fb01 f004 	mul.w	r0, r1, r4
 8001644:	4428      	add	r0, r5
 8001646:	fba1 3403 	umull	r3, r4, r1, r3
 800164a:	1902      	adds	r2, r0, r4
 800164c:	4614      	mov	r4, r2
 800164e:	f04f 0100 	mov.w	r1, #0
 8001652:	f04f 0200 	mov.w	r2, #0
 8001656:	1061      	asrs	r1, r4, #1
 8001658:	17e2      	asrs	r2, r4, #31
 800165a:	e9c7 1208 	strd	r1, r2, [r7, #32]

	if (var1 == 0) {
 800165e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001662:	4323      	orrs	r3, r4
 8001664:	d101      	bne.n	800166a <compensate_pressure+0x1a0>
		return 0;  // avoid exception caused by division by zero
 8001666:	2300      	movs	r3, #0
 8001668:	e0d4      	b.n	8001814 <compensate_pressure+0x34a>
	}

	p = 1048576 - adc_press;
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001670:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001674:	e9c7 3404 	strd	r3, r4, [r7, #16]
	p = (((p << 31) - var2) * 3125) / var1;
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	ea4f 0963 	mov.w	r9, r3, asr #1
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	ea4f 78c3 	mov.w	r8, r3, lsl #31
 8001684:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001688:	4645      	mov	r5, r8
 800168a:	464e      	mov	r6, r9
 800168c:	1aed      	subs	r5, r5, r3
 800168e:	eb66 0604 	sbc.w	r6, r6, r4
 8001692:	46a8      	mov	r8, r5
 8001694:	46b1      	mov	r9, r6
 8001696:	eb18 0308 	adds.w	r3, r8, r8
 800169a:	eb49 0409 	adc.w	r4, r9, r9
 800169e:	4698      	mov	r8, r3
 80016a0:	46a1      	mov	r9, r4
 80016a2:	eb18 0805 	adds.w	r8, r8, r5
 80016a6:	eb49 0906 	adc.w	r9, r9, r6
 80016aa:	f04f 0100 	mov.w	r1, #0
 80016ae:	f04f 0200 	mov.w	r2, #0
 80016b2:	ea4f 1289 	mov.w	r2, r9, lsl #6
 80016b6:	ea42 6298 	orr.w	r2, r2, r8, lsr #26
 80016ba:	ea4f 1188 	mov.w	r1, r8, lsl #6
 80016be:	eb18 0801 	adds.w	r8, r8, r1
 80016c2:	eb49 0902 	adc.w	r9, r9, r2
 80016c6:	f04f 0100 	mov.w	r1, #0
 80016ca:	f04f 0200 	mov.w	r2, #0
 80016ce:	ea4f 0289 	mov.w	r2, r9, lsl #2
 80016d2:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 80016d6:	ea4f 0188 	mov.w	r1, r8, lsl #2
 80016da:	4688      	mov	r8, r1
 80016dc:	4691      	mov	r9, r2
 80016de:	eb18 0805 	adds.w	r8, r8, r5
 80016e2:	eb49 0906 	adc.w	r9, r9, r6
 80016e6:	f04f 0100 	mov.w	r1, #0
 80016ea:	f04f 0200 	mov.w	r2, #0
 80016ee:	ea4f 0289 	mov.w	r2, r9, lsl #2
 80016f2:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 80016f6:	ea4f 0188 	mov.w	r1, r8, lsl #2
 80016fa:	4688      	mov	r8, r1
 80016fc:	4691      	mov	r9, r2
 80016fe:	eb18 0005 	adds.w	r0, r8, r5
 8001702:	eb49 0106 	adc.w	r1, r9, r6
 8001706:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800170a:	f7ff faad 	bl	8000c68 <__aeabi_ldivmod>
 800170e:	4603      	mov	r3, r0
 8001710:	460c      	mov	r4, r1
 8001712:	e9c7 3404 	strd	r3, r4, [r7, #16]
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800171c:	b219      	sxth	r1, r3
 800171e:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001722:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 8001726:	f04f 0300 	mov.w	r3, #0
 800172a:	f04f 0400 	mov.w	r4, #0
 800172e:	0b6b      	lsrs	r3, r5, #13
 8001730:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8001734:	1374      	asrs	r4, r6, #13
 8001736:	fb03 f502 	mul.w	r5, r3, r2
 800173a:	fb01 f004 	mul.w	r0, r1, r4
 800173e:	4428      	add	r0, r5
 8001740:	fba1 1203 	umull	r1, r2, r1, r3
 8001744:	1883      	adds	r3, r0, r2
 8001746:	461a      	mov	r2, r3
 8001748:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 800174c:	f04f 0300 	mov.w	r3, #0
 8001750:	f04f 0400 	mov.w	r4, #0
 8001754:	0b6b      	lsrs	r3, r5, #13
 8001756:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 800175a:	1374      	asrs	r4, r6, #13
 800175c:	fb03 f502 	mul.w	r5, r3, r2
 8001760:	fb01 f004 	mul.w	r0, r1, r4
 8001764:	4428      	add	r0, r5
 8001766:	fba1 1203 	umull	r1, r2, r1, r3
 800176a:	1883      	adds	r3, r0, r2
 800176c:	461a      	mov	r2, r3
 800176e:	f04f 0300 	mov.w	r3, #0
 8001772:	f04f 0400 	mov.w	r4, #0
 8001776:	0e4b      	lsrs	r3, r1, #25
 8001778:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800177c:	1654      	asrs	r4, r2, #25
 800177e:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001788:	b21b      	sxth	r3, r3
 800178a:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	fb04 f102 	mul.w	r1, r4, r2
 8001794:	697a      	ldr	r2, [r7, #20]
 8001796:	fb03 f202 	mul.w	r2, r3, r2
 800179a:	1888      	adds	r0, r1, r2
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	fba2 1203 	umull	r1, r2, r2, r3
 80017a2:	1883      	adds	r3, r0, r2
 80017a4:	461a      	mov	r2, r3
 80017a6:	f04f 0300 	mov.w	r3, #0
 80017aa:	f04f 0400 	mov.w	r4, #0
 80017ae:	0ccb      	lsrs	r3, r1, #19
 80017b0:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 80017b4:	14d4      	asrs	r4, r2, #19
 80017b6:	e9c7 3406 	strd	r3, r4, [r7, #24]

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 80017ba:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80017be:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80017c2:	eb11 0803 	adds.w	r8, r1, r3
 80017c6:	eb42 0904 	adc.w	r9, r2, r4
 80017ca:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80017ce:	eb13 0508 	adds.w	r5, r3, r8
 80017d2:	eb44 0609 	adc.w	r6, r4, r9
 80017d6:	f04f 0100 	mov.w	r1, #0
 80017da:	f04f 0200 	mov.w	r2, #0
 80017de:	0a29      	lsrs	r1, r5, #8
 80017e0:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 80017e4:	1232      	asrs	r2, r6, #8
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80017ec:	b21d      	sxth	r5, r3
 80017ee:	ea4f 76e5 	mov.w	r6, r5, asr #31
 80017f2:	f04f 0800 	mov.w	r8, #0
 80017f6:	f04f 0900 	mov.w	r9, #0
 80017fa:	ea4f 1906 	mov.w	r9, r6, lsl #4
 80017fe:	ea49 7915 	orr.w	r9, r9, r5, lsr #28
 8001802:	ea4f 1805 	mov.w	r8, r5, lsl #4
 8001806:	eb18 0301 	adds.w	r3, r8, r1
 800180a:	eb49 0402 	adc.w	r4, r9, r2
 800180e:	e9c7 3404 	strd	r3, r4, [r7, #16]
	return p;
 8001812:	693b      	ldr	r3, [r7, #16]
}
 8001814:	4618      	mov	r0, r3
 8001816:	3728      	adds	r7, #40	; 0x28
 8001818:	46bd      	mov	sp, r7
 800181a:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}

0800181e <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 800181e:	b480      	push	{r7}
 8001820:	b087      	sub	sp, #28
 8001822:	af00      	add	r7, sp, #0
 8001824:	60f8      	str	r0, [r7, #12]
 8001826:	60b9      	str	r1, [r7, #8]
 8001828:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001830:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	039a      	lsls	r2, r3, #14
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800183c:	051b      	lsls	r3, r3, #20
 800183e:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001846:	4619      	mov	r1, r3
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	fb03 f301 	mul.w	r3, r3, r1
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001854:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8001856:	68fa      	ldr	r2, [r7, #12]
 8001858:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 800185c:	4611      	mov	r1, r2
 800185e:	697a      	ldr	r2, [r7, #20]
 8001860:	fb02 f201 	mul.w	r2, r2, r1
 8001864:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001866:	68f9      	ldr	r1, [r7, #12]
 8001868:	7f09      	ldrb	r1, [r1, #28]
 800186a:	4608      	mov	r0, r1
 800186c:	6979      	ldr	r1, [r7, #20]
 800186e:	fb01 f100 	mul.w	r1, r1, r0
 8001872:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001874:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001878:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 800187c:	1292      	asrs	r2, r2, #10
 800187e:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001882:	68f9      	ldr	r1, [r7, #12]
 8001884:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001888:	fb01 f202 	mul.w	r2, r1, r2
 800188c:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001890:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001892:	fb02 f303 	mul.w	r3, r2, r3
 8001896:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	13db      	asrs	r3, r3, #15
 800189c:	697a      	ldr	r2, [r7, #20]
 800189e:	13d2      	asrs	r2, r2, #15
 80018a0:	fb02 f303 	mul.w	r3, r2, r3
 80018a4:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 80018a6:	68fa      	ldr	r2, [r7, #12]
 80018a8:	7e12      	ldrb	r2, [r2, #24]
 80018aa:	fb02 f303 	mul.w	r3, r2, r3
 80018ae:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 80018b0:	697a      	ldr	r2, [r7, #20]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80018bc:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 80018c4:	bfa8      	it	ge
 80018c6:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 80018ca:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	131b      	asrs	r3, r3, #12
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	371c      	adds	r7, #28
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08c      	sub	sp, #48	; 0x30
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
 80018e8:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80018f0:	2b60      	cmp	r3, #96	; 0x60
 80018f2:	d007      	beq.n	8001904 <bmp280_read_fixed+0x28>
		if (humidity)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d002      	beq.n	8001900 <bmp280_read_fixed+0x24>
			*humidity = 0;
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8001900:	2300      	movs	r3, #0
 8001902:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <bmp280_read_fixed+0x32>
 800190a:	2308      	movs	r3, #8
 800190c:	e000      	b.n	8001910 <bmp280_read_fixed+0x34>
 800190e:	2306      	movs	r3, #6
 8001910:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8001912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001914:	b2db      	uxtb	r3, r3
 8001916:	f107 0218 	add.w	r2, r7, #24
 800191a:	21f7      	movs	r1, #247	; 0xf7
 800191c:	68f8      	ldr	r0, [r7, #12]
 800191e:	f7ff fbbe 	bl	800109e <read_data>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <bmp280_read_fixed+0x50>
		return false;
 8001928:	2300      	movs	r3, #0
 800192a:	e038      	b.n	800199e <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 800192c:	7e3b      	ldrb	r3, [r7, #24]
 800192e:	031a      	lsls	r2, r3, #12
 8001930:	7e7b      	ldrb	r3, [r7, #25]
 8001932:	011b      	lsls	r3, r3, #4
 8001934:	4313      	orrs	r3, r2
 8001936:	7eba      	ldrb	r2, [r7, #26]
 8001938:	0912      	lsrs	r2, r2, #4
 800193a:	b2d2      	uxtb	r2, r2
 800193c:	4313      	orrs	r3, r2
 800193e:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001940:	7efb      	ldrb	r3, [r7, #27]
 8001942:	031a      	lsls	r2, r3, #12
 8001944:	7f3b      	ldrb	r3, [r7, #28]
 8001946:	011b      	lsls	r3, r3, #4
 8001948:	4313      	orrs	r3, r2
 800194a:	7f7a      	ldrb	r2, [r7, #29]
 800194c:	0912      	lsrs	r2, r2, #4
 800194e:	b2d2      	uxtb	r2, r2
 8001950:	4313      	orrs	r3, r2
 8001952:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8001954:	f107 0314 	add.w	r3, r7, #20
 8001958:	461a      	mov	r2, r3
 800195a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800195c:	68f8      	ldr	r0, [r7, #12]
 800195e:	f7ff fd7b 	bl	8001458 <compensate_temperature>
 8001962:	4602      	mov	r2, r0
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	461a      	mov	r2, r3
 800196c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800196e:	68f8      	ldr	r0, [r7, #12]
 8001970:	f7ff fdab 	bl	80014ca <compensate_pressure>
 8001974:	4602      	mov	r2, r0
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	601a      	str	r2, [r3, #0]

	if (humidity) {
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d00d      	beq.n	800199c <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001980:	7fbb      	ldrb	r3, [r7, #30]
 8001982:	021b      	lsls	r3, r3, #8
 8001984:	7ffa      	ldrb	r2, [r7, #31]
 8001986:	4313      	orrs	r3, r2
 8001988:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	461a      	mov	r2, r3
 800198e:	6a39      	ldr	r1, [r7, #32]
 8001990:	68f8      	ldr	r0, [r7, #12]
 8001992:	f7ff ff44 	bl	800181e <compensate_humidity>
 8001996:	4602      	mov	r2, r0
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	601a      	str	r2, [r3, #0]
	}

	return true;
 800199c:	2301      	movs	r3, #1
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3730      	adds	r7, #48	; 0x30
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
	...

080019a8 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b088      	sub	sp, #32
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	607a      	str	r2, [r7, #4]
 80019b4:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d002      	beq.n	80019c2 <bmp280_read_float+0x1a>
 80019bc:	f107 0314 	add.w	r3, r7, #20
 80019c0:	e000      	b.n	80019c4 <bmp280_read_float+0x1c>
 80019c2:	2300      	movs	r3, #0
 80019c4:	f107 0218 	add.w	r2, r7, #24
 80019c8:	f107 011c 	add.w	r1, r7, #28
 80019cc:	68f8      	ldr	r0, [r7, #12]
 80019ce:	f7ff ff85 	bl	80018dc <bmp280_read_fixed>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d028      	beq.n	8001a2a <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	ee07 3a90 	vmov	s15, r3
 80019de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019e2:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001a34 <bmp280_read_float+0x8c>
 80019e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	ee07 3a90 	vmov	s15, r3
 80019f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019fa:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001a38 <bmp280_read_float+0x90>
 80019fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d00b      	beq.n	8001a26 <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	ee07 3a90 	vmov	s15, r3
 8001a14:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a18:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001a3c <bmp280_read_float+0x94>
 8001a1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e000      	b.n	8001a2c <bmp280_read_float+0x84>
	}

	return false;
 8001a2a:	2300      	movs	r3, #0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3720      	adds	r7, #32
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	42c80000 	.word	0x42c80000
 8001a38:	43800000 	.word	0x43800000
 8001a3c:	44800000 	.word	0x44800000

08001a40 <bmp280_read_altitude>:

float bmp280_read_altitude(float pressurehPa, float seaLevelPressurehPa){
 8001a40:	b590      	push	{r4, r7, lr}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	ed87 0a01 	vstr	s0, [r7, #4]
 8001a4a:	edc7 0a00 	vstr	s1, [r7]
	float altitude = 44330 * (1.0 - pow(pressurehPa / seaLevelPressurehPa, 0.1903));
 8001a4e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a52:	edd7 7a00 	vldr	s15, [r7]
 8001a56:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001a5a:	ee16 0a90 	vmov	r0, s13
 8001a5e:	f7fe fd83 	bl	8000568 <__aeabi_f2d>
 8001a62:	4603      	mov	r3, r0
 8001a64:	460c      	mov	r4, r1
 8001a66:	ed9f 1b14 	vldr	d1, [pc, #80]	; 8001ab8 <bmp280_read_altitude+0x78>
 8001a6a:	ec44 3b10 	vmov	d0, r3, r4
 8001a6e:	f008 f8c5 	bl	8009bfc <pow>
 8001a72:	ec54 3b10 	vmov	r3, r4, d0
 8001a76:	461a      	mov	r2, r3
 8001a78:	4623      	mov	r3, r4
 8001a7a:	f04f 0000 	mov.w	r0, #0
 8001a7e:	4912      	ldr	r1, [pc, #72]	; (8001ac8 <bmp280_read_altitude+0x88>)
 8001a80:	f7fe fc12 	bl	80002a8 <__aeabi_dsub>
 8001a84:	4603      	mov	r3, r0
 8001a86:	460c      	mov	r4, r1
 8001a88:	4618      	mov	r0, r3
 8001a8a:	4621      	mov	r1, r4
 8001a8c:	a30c      	add	r3, pc, #48	; (adr r3, 8001ac0 <bmp280_read_altitude+0x80>)
 8001a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a92:	f7fe fdc1 	bl	8000618 <__aeabi_dmul>
 8001a96:	4603      	mov	r3, r0
 8001a98:	460c      	mov	r4, r1
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	4621      	mov	r1, r4
 8001a9e:	f7ff f893 	bl	8000bc8 <__aeabi_d2f>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	60fb      	str	r3, [r7, #12]
	return altitude;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	ee07 3a90 	vmov	s15, r3
}
 8001aac:	eeb0 0a67 	vmov.f32	s0, s15
 8001ab0:	3714      	adds	r7, #20
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd90      	pop	{r4, r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	1a36e2eb 	.word	0x1a36e2eb
 8001abc:	3fc85bc0 	.word	0x3fc85bc0
 8001ac0:	00000000 	.word	0x00000000
 8001ac4:	40e5a540 	.word	0x40e5a540
 8001ac8:	3ff00000 	.word	0x3ff00000

08001acc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001acc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001ad0:	b095      	sub	sp, #84	; 0x54
 8001ad2:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ad4:	f001 fd74 	bl	80035c0 <HAL_Init>

  /* USER CODE BEGIN Init */
  initPWM_DATA(&PWM_CH1);
 8001ad8:	48a0      	ldr	r0, [pc, #640]	; (8001d5c <main+0x290>)
 8001ada:	f000 fd4b 	bl	8002574 <initPWM_DATA>
  initPWM_DATA(&PWM_CH2);
 8001ade:	48a0      	ldr	r0, [pc, #640]	; (8001d60 <main+0x294>)
 8001ae0:	f000 fd48 	bl	8002574 <initPWM_DATA>
  initPWM_DATA(&PWM_CH3);
 8001ae4:	489f      	ldr	r0, [pc, #636]	; (8001d64 <main+0x298>)
 8001ae6:	f000 fd45 	bl	8002574 <initPWM_DATA>
  initPWM_DATA(&PWM_CH4);
 8001aea:	489f      	ldr	r0, [pc, #636]	; (8001d68 <main+0x29c>)
 8001aec:	f000 fd42 	bl	8002574 <initPWM_DATA>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001af0:	f000 fa1c 	bl	8001f2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001af4:	f000 fcfa 	bl	80024ec <MX_GPIO_Init>
  MX_DMA_Init();
 8001af8:	f000 fcd0 	bl	800249c <MX_DMA_Init>
  MX_I2C1_Init();
 8001afc:	f000 fa74 	bl	8001fe8 <MX_I2C1_Init>
  MX_UART4_Init();
 8001b00:	f000 fc24 	bl	800234c <MX_UART4_Init>
  MX_USART1_UART_Init();
 8001b04:	f000 fc4c 	bl	80023a0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001b08:	f000 fc9e 	bl	8002448 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8001b0c:	f000 fc72 	bl	80023f4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001b10:	f000 fb56 	bl	80021c0 <MX_TIM3_Init>
  MX_I2C3_Init();
 8001b14:	f000 fa96 	bl	8002044 <MX_I2C3_Init>
  MX_TIM2_Init();
 8001b18:	f000 fac2 	bl	80020a0 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001b1c:	f000 fbc8 	bl	80022b0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  //Kalibrasi Tilt

  IMUInit();
 8001b20:	f000 fed4 	bl	80028cc <IMUInit>
  huart4Status = HAL_UART_Receive_DMA(&huart4, GPSBuffer, 300);
 8001b24:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b28:	4990      	ldr	r1, [pc, #576]	; (8001d6c <main+0x2a0>)
 8001b2a:	4891      	ldr	r0, [pc, #580]	; (8001d70 <main+0x2a4>)
 8001b2c:	f005 face 	bl	80070cc <HAL_UART_Receive_DMA>
 8001b30:	4603      	mov	r3, r0
 8001b32:	461a      	mov	r2, r3
 8001b34:	4b8f      	ldr	r3, [pc, #572]	; (8001d74 <main+0x2a8>)
 8001b36:	701a      	strb	r2, [r3, #0]
  BMPInit();
 8001b38:	f000 fe2e 	bl	8002798 <BMPInit>
	//HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
  CalibrateESC();
 8001b3c:	f000 fdf0 	bl	8002720 <CalibrateESC>
  HAL_TIM_Base_Start_IT(&htim4);
 8001b40:	488d      	ldr	r0, [pc, #564]	; (8001d78 <main+0x2ac>)
 8001b42:	f004 f802 	bl	8005b4a <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001b46:	2100      	movs	r1, #0
 8001b48:	488c      	ldr	r0, [pc, #560]	; (8001d7c <main+0x2b0>)
 8001b4a:	f004 f923 	bl	8005d94 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8001b4e:	2104      	movs	r1, #4
 8001b50:	488a      	ldr	r0, [pc, #552]	; (8001d7c <main+0x2b0>)
 8001b52:	f004 f91f 	bl	8005d94 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 8001b56:	2108      	movs	r1, #8
 8001b58:	4888      	ldr	r0, [pc, #544]	; (8001d7c <main+0x2b0>)
 8001b5a:	f004 f91b 	bl	8005d94 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_4);
 8001b5e:	210c      	movs	r1, #12
 8001b60:	4886      	ldr	r0, [pc, #536]	; (8001d7c <main+0x2b0>)
 8001b62:	f004 f917 	bl	8005d94 <HAL_TIM_IC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  if(dutyCycle > ESC_PWM_MAX) dutyCycle = ESC_PWM_MIN;
 8001b66:	4b86      	ldr	r3, [pc, #536]	; (8001d80 <main+0x2b4>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001b6e:	dd03      	ble.n	8001b78 <main+0xac>
 8001b70:	4b83      	ldr	r3, [pc, #524]	; (8001d80 <main+0x2b4>)
 8001b72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b76:	601a      	str	r2, [r3, #0]
	  setPWM(htim3, TIM_CHANNEL_3, dutyCycle);
 8001b78:	4b81      	ldr	r3, [pc, #516]	; (8001d80 <main+0x2b4>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4e81      	ldr	r6, [pc, #516]	; (8001d84 <main+0x2b8>)
 8001b7e:	930d      	str	r3, [sp, #52]	; 0x34
 8001b80:	2308      	movs	r3, #8
 8001b82:	930c      	str	r3, [sp, #48]	; 0x30
 8001b84:	466d      	mov	r5, sp
 8001b86:	f106 0410 	add.w	r4, r6, #16
 8001b8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b92:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b96:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001b9a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001b9e:	f000 fd8f 	bl	80026c0 <setPWM>
	  dutyCycle = dutyCycle + 100;
 8001ba2:	4b77      	ldr	r3, [pc, #476]	; (8001d80 <main+0x2b4>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	3364      	adds	r3, #100	; 0x64
 8001ba8:	4a75      	ldr	r2, [pc, #468]	; (8001d80 <main+0x2b4>)
 8001baa:	6013      	str	r3, [r2, #0]
	  if(IMUDataStatus == 1){
 8001bac:	4b76      	ldr	r3, [pc, #472]	; (8001d88 <main+0x2bc>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d12f      	bne.n	8001c14 <main+0x148>
		  getIMUData(&IMU_Data);
 8001bb4:	4875      	ldr	r0, [pc, #468]	; (8001d8c <main+0x2c0>)
 8001bb6:	f000 fced 	bl	8002594 <getIMUData>
		  strSize = sprintf(buffer, "YAW: %f, PITCH: %f, ROLL: %f\r\n", IMU_Data.YAW, IMU_Data.PITCH, IMU_Data.ROLL);
 8001bba:	4b74      	ldr	r3, [pc, #464]	; (8001d8c <main+0x2c0>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7fe fcd2 	bl	8000568 <__aeabi_f2d>
 8001bc4:	4680      	mov	r8, r0
 8001bc6:	4689      	mov	r9, r1
 8001bc8:	4b70      	ldr	r3, [pc, #448]	; (8001d8c <main+0x2c0>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7fe fccb 	bl	8000568 <__aeabi_f2d>
 8001bd2:	4604      	mov	r4, r0
 8001bd4:	460d      	mov	r5, r1
 8001bd6:	4b6d      	ldr	r3, [pc, #436]	; (8001d8c <main+0x2c0>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7fe fcc4 	bl	8000568 <__aeabi_f2d>
 8001be0:	4602      	mov	r2, r0
 8001be2:	460b      	mov	r3, r1
 8001be4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001be8:	e9cd 4500 	strd	r4, r5, [sp]
 8001bec:	4642      	mov	r2, r8
 8001bee:	464b      	mov	r3, r9
 8001bf0:	4967      	ldr	r1, [pc, #412]	; (8001d90 <main+0x2c4>)
 8001bf2:	4868      	ldr	r0, [pc, #416]	; (8001d94 <main+0x2c8>)
 8001bf4:	f006 fcde 	bl	80085b4 <siprintf>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	4b66      	ldr	r3, [pc, #408]	; (8001d98 <main+0x2cc>)
 8001bfe:	801a      	strh	r2, [r3, #0]
		  HAL_UART_Transmit(&huart3, buffer, strSize, 100);
 8001c00:	4b65      	ldr	r3, [pc, #404]	; (8001d98 <main+0x2cc>)
 8001c02:	881a      	ldrh	r2, [r3, #0]
 8001c04:	2364      	movs	r3, #100	; 0x64
 8001c06:	4963      	ldr	r1, [pc, #396]	; (8001d94 <main+0x2c8>)
 8001c08:	4864      	ldr	r0, [pc, #400]	; (8001d9c <main+0x2d0>)
 8001c0a:	f005 f9c6 	bl	8006f9a <HAL_UART_Transmit>
		  IMUDataStatus = 0;
 8001c0e:	4b5e      	ldr	r3, [pc, #376]	; (8001d88 <main+0x2bc>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	701a      	strb	r2, [r3, #0]
	  }

	  if(GPSDataStatus == 1){
 8001c14:	4b62      	ldr	r3, [pc, #392]	; (8001da0 <main+0x2d4>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	f040 811b 	bne.w	8001e54 <main+0x388>
		  int GPSBuffer_len = strlen(GPSBuffer);
 8001c1e:	4853      	ldr	r0, [pc, #332]	; (8001d6c <main+0x2a0>)
 8001c20:	f7fe fae0 	bl	80001e4 <strlen>
 8001c24:	4603      	mov	r3, r0
 8001c26:	613b      	str	r3, [r7, #16]
		  for(int i = 0; i < GPSBuffer_len; i++){
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]
 8001c2c:	e104      	b.n	8001e38 <main+0x36c>
			  if(GPSBuffer[i] == '$') {
 8001c2e:	4a4f      	ldr	r2, [pc, #316]	; (8001d6c <main+0x2a0>)
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	4413      	add	r3, r2
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	2b24      	cmp	r3, #36	; 0x24
 8001c38:	f040 80f8 	bne.w	8001e2c <main+0x360>
				  char str[4] = {GPSBuffer[i+3], GPSBuffer[i+4], GPSBuffer[i+5], '\0'};
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	3303      	adds	r3, #3
 8001c40:	4a4a      	ldr	r2, [pc, #296]	; (8001d6c <main+0x2a0>)
 8001c42:	5cd3      	ldrb	r3, [r2, r3]
 8001c44:	703b      	strb	r3, [r7, #0]
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	3304      	adds	r3, #4
 8001c4a:	4a48      	ldr	r2, [pc, #288]	; (8001d6c <main+0x2a0>)
 8001c4c:	5cd3      	ldrb	r3, [r2, r3]
 8001c4e:	707b      	strb	r3, [r7, #1]
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	3305      	adds	r3, #5
 8001c54:	4a45      	ldr	r2, [pc, #276]	; (8001d6c <main+0x2a0>)
 8001c56:	5cd3      	ldrb	r3, [r2, r3]
 8001c58:	70bb      	strb	r3, [r7, #2]
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	70fb      	strb	r3, [r7, #3]
				  if(strcmp("GGA", str) == 0){
 8001c5e:	463b      	mov	r3, r7
 8001c60:	4619      	mov	r1, r3
 8001c62:	4850      	ldr	r0, [pc, #320]	; (8001da4 <main+0x2d8>)
 8001c64:	f7fe fab4 	bl	80001d0 <strcmp>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d136      	bne.n	8001cdc <main+0x210>
					  	int length = strchr(&GPSBuffer[i], '\n') - (unsigned)&GPSBuffer[i] + 1;
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	4a3e      	ldr	r2, [pc, #248]	; (8001d6c <main+0x2a0>)
 8001c72:	4413      	add	r3, r2
 8001c74:	210a      	movs	r1, #10
 8001c76:	4618      	mov	r0, r3
 8001c78:	f006 fcbc 	bl	80085f4 <strchr>
 8001c7c:	4601      	mov	r1, r0
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	4a3a      	ldr	r2, [pc, #232]	; (8001d6c <main+0x2a0>)
 8001c82:	4413      	add	r3, r2
 8001c84:	f1c3 0301 	rsb	r3, r3, #1
 8001c88:	440b      	add	r3, r1
 8001c8a:	607b      	str	r3, [r7, #4]
					  	if(length <= 0) break;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	f340 80d8 	ble.w	8001e44 <main+0x378>
					  	GPS_String.GNGGA = (char*)malloc(length);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f005 ff5c 	bl	8007b54 <malloc>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	4b41      	ldr	r3, [pc, #260]	; (8001da8 <main+0x2dc>)
 8001ca2:	609a      	str	r2, [r3, #8]
						memcpy(GPS_String.GNGGA, &GPSBuffer[i], length);
 8001ca4:	4b40      	ldr	r3, [pc, #256]	; (8001da8 <main+0x2dc>)
 8001ca6:	6898      	ldr	r0, [r3, #8]
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	4a30      	ldr	r2, [pc, #192]	; (8001d6c <main+0x2a0>)
 8001cac:	4413      	add	r3, r2
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	f005 ff57 	bl	8007b64 <memcpy>
						GPS_String.GNGGA[length] = '\0';
 8001cb6:	4b3c      	ldr	r3, [pc, #240]	; (8001da8 <main+0x2dc>)
 8001cb8:	689a      	ldr	r2, [r3, #8]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	701a      	strb	r2, [r3, #0]
						i = i + length;
 8001cc2:	697a      	ldr	r2, [r7, #20]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	617b      	str	r3, [r7, #20]
						HAL_UART_Transmit(&huart3, GPS_String.GNGGA, length, 100);
 8001cca:	4b37      	ldr	r3, [pc, #220]	; (8001da8 <main+0x2dc>)
 8001ccc:	6899      	ldr	r1, [r3, #8]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	b29a      	uxth	r2, r3
 8001cd2:	2364      	movs	r3, #100	; 0x64
 8001cd4:	4831      	ldr	r0, [pc, #196]	; (8001d9c <main+0x2d0>)
 8001cd6:	f005 f960 	bl	8006f9a <HAL_UART_Transmit>
 8001cda:	e0aa      	b.n	8001e32 <main+0x366>
				  }

				  else if(strcmp("GLL", str) == 0){
 8001cdc:	463b      	mov	r3, r7
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4832      	ldr	r0, [pc, #200]	; (8001dac <main+0x2e0>)
 8001ce2:	f7fe fa75 	bl	80001d0 <strcmp>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d161      	bne.n	8001db0 <main+0x2e4>
						int length = strchr(&GPSBuffer[i], '\n') - (unsigned)&GPSBuffer[i] + 1;
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	4a1f      	ldr	r2, [pc, #124]	; (8001d6c <main+0x2a0>)
 8001cf0:	4413      	add	r3, r2
 8001cf2:	210a      	movs	r1, #10
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f006 fc7d 	bl	80085f4 <strchr>
 8001cfa:	4601      	mov	r1, r0
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	4a1b      	ldr	r2, [pc, #108]	; (8001d6c <main+0x2a0>)
 8001d00:	4413      	add	r3, r2
 8001d02:	f1c3 0301 	rsb	r3, r3, #1
 8001d06:	440b      	add	r3, r1
 8001d08:	60bb      	str	r3, [r7, #8]
					  	if(length <= 0) break;
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f340 809b 	ble.w	8001e48 <main+0x37c>
						GPS_String.GNGLL = (char*)malloc(length);
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f005 ff1d 	bl	8007b54 <malloc>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	4b22      	ldr	r3, [pc, #136]	; (8001da8 <main+0x2dc>)
 8001d20:	601a      	str	r2, [r3, #0]
						memcpy(GPS_String.GNGLL, &GPSBuffer[i], length);
 8001d22:	4b21      	ldr	r3, [pc, #132]	; (8001da8 <main+0x2dc>)
 8001d24:	6818      	ldr	r0, [r3, #0]
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	4a10      	ldr	r2, [pc, #64]	; (8001d6c <main+0x2a0>)
 8001d2a:	4413      	add	r3, r2
 8001d2c:	68ba      	ldr	r2, [r7, #8]
 8001d2e:	4619      	mov	r1, r3
 8001d30:	f005 ff18 	bl	8007b64 <memcpy>
						GPS_String.GNGLL[length] = '\0';
 8001d34:	4b1c      	ldr	r3, [pc, #112]	; (8001da8 <main+0x2dc>)
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	701a      	strb	r2, [r3, #0]
						i = i + length;
 8001d40:	697a      	ldr	r2, [r7, #20]
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	4413      	add	r3, r2
 8001d46:	617b      	str	r3, [r7, #20]
						HAL_UART_Transmit(&huart3, GPS_String.GNGLL, length, 100);
 8001d48:	4b17      	ldr	r3, [pc, #92]	; (8001da8 <main+0x2dc>)
 8001d4a:	6819      	ldr	r1, [r3, #0]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	2364      	movs	r3, #100	; 0x64
 8001d52:	4812      	ldr	r0, [pc, #72]	; (8001d9c <main+0x2d0>)
 8001d54:	f005 f921 	bl	8006f9a <HAL_UART_Transmit>
 8001d58:	e06b      	b.n	8001e32 <main+0x366>
 8001d5a:	bf00      	nop
 8001d5c:	20000418 	.word	0x20000418
 8001d60:	200003b0 	.word	0x200003b0
 8001d64:	200007e4 	.word	0x200007e4
 8001d68:	200005b0 	.word	0x200005b0
 8001d6c:	2000042c 	.word	0x2000042c
 8001d70:	200006d4 	.word	0x200006d4
 8001d74:	200006d0 	.word	0x200006d0
 8001d78:	20000328 	.word	0x20000328
 8001d7c:	20000714 	.word	0x20000714
 8001d80:	20000000 	.word	0x20000000
 8001d84:	20000568 	.word	0x20000568
 8001d88:	20000201 	.word	0x20000201
 8001d8c:	2000055c 	.word	0x2000055c
 8001d90:	0800acc8 	.word	0x0800acc8
 8001d94:	20000608 	.word	0x20000608
 8001d98:	200007f8 	.word	0x200007f8
 8001d9c:	2000036c 	.word	0x2000036c
 8001da0:	20000200 	.word	0x20000200
 8001da4:	0800ace8 	.word	0x0800ace8
 8001da8:	200007d8 	.word	0x200007d8
 8001dac:	0800acec 	.word	0x0800acec
				  }

				  else if(strcmp("RMC", str) == 0){
 8001db0:	463b      	mov	r3, r7
 8001db2:	4619      	mov	r1, r3
 8001db4:	484e      	ldr	r0, [pc, #312]	; (8001ef0 <main+0x424>)
 8001db6:	f7fe fa0b 	bl	80001d0 <strcmp>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d137      	bne.n	8001e30 <main+0x364>
						int length = strchr(&GPSBuffer[i], '\n') - (unsigned)&GPSBuffer[i] + 1;
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	4a4c      	ldr	r2, [pc, #304]	; (8001ef4 <main+0x428>)
 8001dc4:	4413      	add	r3, r2
 8001dc6:	210a      	movs	r1, #10
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f006 fc13 	bl	80085f4 <strchr>
 8001dce:	4601      	mov	r1, r0
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	4a48      	ldr	r2, [pc, #288]	; (8001ef4 <main+0x428>)
 8001dd4:	4413      	add	r3, r2
 8001dd6:	f1c3 0301 	rsb	r3, r3, #1
 8001dda:	440b      	add	r3, r1
 8001ddc:	60fb      	str	r3, [r7, #12]
					  	if(length <= 0) break;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	dd33      	ble.n	8001e4c <main+0x380>
						GPS_String.GNRMC = (char*)malloc(length);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f005 feb4 	bl	8007b54 <malloc>
 8001dec:	4603      	mov	r3, r0
 8001dee:	461a      	mov	r2, r3
 8001df0:	4b41      	ldr	r3, [pc, #260]	; (8001ef8 <main+0x42c>)
 8001df2:	605a      	str	r2, [r3, #4]
						memcpy(GPS_String.GNRMC, &GPSBuffer[i], length);
 8001df4:	4b40      	ldr	r3, [pc, #256]	; (8001ef8 <main+0x42c>)
 8001df6:	6858      	ldr	r0, [r3, #4]
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	4a3e      	ldr	r2, [pc, #248]	; (8001ef4 <main+0x428>)
 8001dfc:	4413      	add	r3, r2
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	4619      	mov	r1, r3
 8001e02:	f005 feaf 	bl	8007b64 <memcpy>
						GPS_String.GNRMC[length] = '\0';
 8001e06:	4b3c      	ldr	r3, [pc, #240]	; (8001ef8 <main+0x42c>)
 8001e08:	685a      	ldr	r2, [r3, #4]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	2200      	movs	r2, #0
 8001e10:	701a      	strb	r2, [r3, #0]
						i = i + length;
 8001e12:	697a      	ldr	r2, [r7, #20]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	4413      	add	r3, r2
 8001e18:	617b      	str	r3, [r7, #20]
						HAL_UART_Transmit(&huart3, GPS_String.GNRMC, length, 100);
 8001e1a:	4b37      	ldr	r3, [pc, #220]	; (8001ef8 <main+0x42c>)
 8001e1c:	6859      	ldr	r1, [r3, #4]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	b29a      	uxth	r2, r3
 8001e22:	2364      	movs	r3, #100	; 0x64
 8001e24:	4835      	ldr	r0, [pc, #212]	; (8001efc <main+0x430>)
 8001e26:	f005 f8b8 	bl	8006f9a <HAL_UART_Transmit>
 8001e2a:	e002      	b.n	8001e32 <main+0x366>
				  } else continue;
			  }  else continue;
 8001e2c:	bf00      	nop
 8001e2e:	e000      	b.n	8001e32 <main+0x366>
				  } else continue;
 8001e30:	bf00      	nop
		  for(int i = 0; i < GPSBuffer_len; i++){
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	3301      	adds	r3, #1
 8001e36:	617b      	str	r3, [r7, #20]
 8001e38:	697a      	ldr	r2, [r7, #20]
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	f6ff aef6 	blt.w	8001c2e <main+0x162>
 8001e42:	e004      	b.n	8001e4e <main+0x382>
					  	if(length <= 0) break;
 8001e44:	bf00      	nop
 8001e46:	e002      	b.n	8001e4e <main+0x382>
					  	if(length <= 0) break;
 8001e48:	bf00      	nop
 8001e4a:	e000      	b.n	8001e4e <main+0x382>
					  	if(length <= 0) break;
 8001e4c:	bf00      	nop
		  }
		  //strSize = sprintf(buffer, "%s\r\n", GPSBuffer);
		  GPSDataStatus = 0;
 8001e4e:	4b2c      	ldr	r3, [pc, #176]	; (8001f00 <main+0x434>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	701a      	strb	r2, [r3, #0]
	  }

	  strSize = sprintf((char*)buffer, "TIM2 CH1: %lu us\r\n", PWM_CH1.DutyCycleVal); //ROLL
 8001e54:	4b2b      	ldr	r3, [pc, #172]	; (8001f04 <main+0x438>)
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	461a      	mov	r2, r3
 8001e5a:	492b      	ldr	r1, [pc, #172]	; (8001f08 <main+0x43c>)
 8001e5c:	482b      	ldr	r0, [pc, #172]	; (8001f0c <main+0x440>)
 8001e5e:	f006 fba9 	bl	80085b4 <siprintf>
 8001e62:	4603      	mov	r3, r0
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	4b2a      	ldr	r3, [pc, #168]	; (8001f10 <main+0x444>)
 8001e68:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Transmit(&huart3, buffer, strSize, 100);
 8001e6a:	4b29      	ldr	r3, [pc, #164]	; (8001f10 <main+0x444>)
 8001e6c:	881a      	ldrh	r2, [r3, #0]
 8001e6e:	2364      	movs	r3, #100	; 0x64
 8001e70:	4926      	ldr	r1, [pc, #152]	; (8001f0c <main+0x440>)
 8001e72:	4822      	ldr	r0, [pc, #136]	; (8001efc <main+0x430>)
 8001e74:	f005 f891 	bl	8006f9a <HAL_UART_Transmit>
	  strSize = sprintf((char*)buffer, "TIM2 CH2: %lu us\r\n", PWM_CH2.DutyCycleVal); //YAW
 8001e78:	4b26      	ldr	r3, [pc, #152]	; (8001f14 <main+0x448>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	4926      	ldr	r1, [pc, #152]	; (8001f18 <main+0x44c>)
 8001e80:	4822      	ldr	r0, [pc, #136]	; (8001f0c <main+0x440>)
 8001e82:	f006 fb97 	bl	80085b4 <siprintf>
 8001e86:	4603      	mov	r3, r0
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	4b21      	ldr	r3, [pc, #132]	; (8001f10 <main+0x444>)
 8001e8c:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Transmit(&huart3, buffer, strSize, 100);
 8001e8e:	4b20      	ldr	r3, [pc, #128]	; (8001f10 <main+0x444>)
 8001e90:	881a      	ldrh	r2, [r3, #0]
 8001e92:	2364      	movs	r3, #100	; 0x64
 8001e94:	491d      	ldr	r1, [pc, #116]	; (8001f0c <main+0x440>)
 8001e96:	4819      	ldr	r0, [pc, #100]	; (8001efc <main+0x430>)
 8001e98:	f005 f87f 	bl	8006f9a <HAL_UART_Transmit>
	  strSize = sprintf((char*)buffer, "TIM2 CH3: %lu us\r\n", PWM_CH3.DutyCycleVal); //THROTTLE
 8001e9c:	4b1f      	ldr	r3, [pc, #124]	; (8001f1c <main+0x450>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	491f      	ldr	r1, [pc, #124]	; (8001f20 <main+0x454>)
 8001ea4:	4819      	ldr	r0, [pc, #100]	; (8001f0c <main+0x440>)
 8001ea6:	f006 fb85 	bl	80085b4 <siprintf>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	b29a      	uxth	r2, r3
 8001eae:	4b18      	ldr	r3, [pc, #96]	; (8001f10 <main+0x444>)
 8001eb0:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Transmit(&huart3, buffer, strSize, 100);
 8001eb2:	4b17      	ldr	r3, [pc, #92]	; (8001f10 <main+0x444>)
 8001eb4:	881a      	ldrh	r2, [r3, #0]
 8001eb6:	2364      	movs	r3, #100	; 0x64
 8001eb8:	4914      	ldr	r1, [pc, #80]	; (8001f0c <main+0x440>)
 8001eba:	4810      	ldr	r0, [pc, #64]	; (8001efc <main+0x430>)
 8001ebc:	f005 f86d 	bl	8006f9a <HAL_UART_Transmit>
	  strSize = sprintf((char*)buffer, "TIM2 CH4: %lu us\r\n", PWM_CH4.DutyCycleVal); //PITCH
 8001ec0:	4b18      	ldr	r3, [pc, #96]	; (8001f24 <main+0x458>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	4918      	ldr	r1, [pc, #96]	; (8001f28 <main+0x45c>)
 8001ec8:	4810      	ldr	r0, [pc, #64]	; (8001f0c <main+0x440>)
 8001eca:	f006 fb73 	bl	80085b4 <siprintf>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	b29a      	uxth	r2, r3
 8001ed2:	4b0f      	ldr	r3, [pc, #60]	; (8001f10 <main+0x444>)
 8001ed4:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Transmit(&huart3, buffer, strSize, 100);
 8001ed6:	4b0e      	ldr	r3, [pc, #56]	; (8001f10 <main+0x444>)
 8001ed8:	881a      	ldrh	r2, [r3, #0]
 8001eda:	2364      	movs	r3, #100	; 0x64
 8001edc:	490b      	ldr	r1, [pc, #44]	; (8001f0c <main+0x440>)
 8001ede:	4807      	ldr	r0, [pc, #28]	; (8001efc <main+0x430>)
 8001ee0:	f005 f85b 	bl	8006f9a <HAL_UART_Transmit>
	  HAL_Delay(500);
 8001ee4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ee8:	f001 fbdc 	bl	80036a4 <HAL_Delay>
	  if(dutyCycle > ESC_PWM_MAX) dutyCycle = ESC_PWM_MIN;
 8001eec:	e63b      	b.n	8001b66 <main+0x9a>
 8001eee:	bf00      	nop
 8001ef0:	0800acf0 	.word	0x0800acf0
 8001ef4:	2000042c 	.word	0x2000042c
 8001ef8:	200007d8 	.word	0x200007d8
 8001efc:	2000036c 	.word	0x2000036c
 8001f00:	20000200 	.word	0x20000200
 8001f04:	20000418 	.word	0x20000418
 8001f08:	0800acf4 	.word	0x0800acf4
 8001f0c:	20000608 	.word	0x20000608
 8001f10:	200007f8 	.word	0x200007f8
 8001f14:	200003b0 	.word	0x200003b0
 8001f18:	0800ad08 	.word	0x0800ad08
 8001f1c:	200007e4 	.word	0x200007e4
 8001f20:	0800ad1c 	.word	0x0800ad1c
 8001f24:	200005b0 	.word	0x200005b0
 8001f28:	0800ad30 	.word	0x0800ad30

08001f2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b094      	sub	sp, #80	; 0x50
 8001f30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f32:	f107 0320 	add.w	r3, r7, #32
 8001f36:	2230      	movs	r2, #48	; 0x30
 8001f38:	2100      	movs	r1, #0
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f005 fe1d 	bl	8007b7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f40:	f107 030c 	add.w	r3, r7, #12
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	609a      	str	r2, [r3, #8]
 8001f4c:	60da      	str	r2, [r3, #12]
 8001f4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f50:	2300      	movs	r3, #0
 8001f52:	60bb      	str	r3, [r7, #8]
 8001f54:	4b22      	ldr	r3, [pc, #136]	; (8001fe0 <SystemClock_Config+0xb4>)
 8001f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f58:	4a21      	ldr	r2, [pc, #132]	; (8001fe0 <SystemClock_Config+0xb4>)
 8001f5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f5e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f60:	4b1f      	ldr	r3, [pc, #124]	; (8001fe0 <SystemClock_Config+0xb4>)
 8001f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f68:	60bb      	str	r3, [r7, #8]
 8001f6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	607b      	str	r3, [r7, #4]
 8001f70:	4b1c      	ldr	r3, [pc, #112]	; (8001fe4 <SystemClock_Config+0xb8>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a1b      	ldr	r2, [pc, #108]	; (8001fe4 <SystemClock_Config+0xb8>)
 8001f76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f7a:	6013      	str	r3, [r2, #0]
 8001f7c:	4b19      	ldr	r3, [pc, #100]	; (8001fe4 <SystemClock_Config+0xb8>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f84:	607b      	str	r3, [r7, #4]
 8001f86:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f88:	2302      	movs	r3, #2
 8001f8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f90:	2310      	movs	r3, #16
 8001f92:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001f94:	2300      	movs	r3, #0
 8001f96:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f98:	f107 0320 	add.w	r3, r7, #32
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f003 f96d 	bl	800527c <HAL_RCC_OscConfig>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001fa8:	f000 ff58 	bl	8002e5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fac:	230f      	movs	r3, #15
 8001fae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001fc0:	f107 030c 	add.w	r3, r7, #12
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f003 fbc8 	bl	800575c <HAL_RCC_ClockConfig>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001fd2:	f000 ff43 	bl	8002e5c <Error_Handler>
  }
}
 8001fd6:	bf00      	nop
 8001fd8:	3750      	adds	r7, #80	; 0x50
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40023800 	.word	0x40023800
 8001fe4:	40007000 	.word	0x40007000

08001fe8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001fec:	4b12      	ldr	r3, [pc, #72]	; (8002038 <MX_I2C1_Init+0x50>)
 8001fee:	4a13      	ldr	r2, [pc, #76]	; (800203c <MX_I2C1_Init+0x54>)
 8001ff0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001ff2:	4b11      	ldr	r3, [pc, #68]	; (8002038 <MX_I2C1_Init+0x50>)
 8001ff4:	4a12      	ldr	r2, [pc, #72]	; (8002040 <MX_I2C1_Init+0x58>)
 8001ff6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ff8:	4b0f      	ldr	r3, [pc, #60]	; (8002038 <MX_I2C1_Init+0x50>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ffe:	4b0e      	ldr	r3, [pc, #56]	; (8002038 <MX_I2C1_Init+0x50>)
 8002000:	2200      	movs	r2, #0
 8002002:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002004:	4b0c      	ldr	r3, [pc, #48]	; (8002038 <MX_I2C1_Init+0x50>)
 8002006:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800200a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800200c:	4b0a      	ldr	r3, [pc, #40]	; (8002038 <MX_I2C1_Init+0x50>)
 800200e:	2200      	movs	r2, #0
 8002010:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002012:	4b09      	ldr	r3, [pc, #36]	; (8002038 <MX_I2C1_Init+0x50>)
 8002014:	2200      	movs	r2, #0
 8002016:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002018:	4b07      	ldr	r3, [pc, #28]	; (8002038 <MX_I2C1_Init+0x50>)
 800201a:	2200      	movs	r2, #0
 800201c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800201e:	4b06      	ldr	r3, [pc, #24]	; (8002038 <MX_I2C1_Init+0x50>)
 8002020:	2200      	movs	r2, #0
 8002022:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002024:	4804      	ldr	r0, [pc, #16]	; (8002038 <MX_I2C1_Init+0x50>)
 8002026:	f002 f979 	bl	800431c <HAL_I2C_Init>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002030:	f000 ff14 	bl	8002e5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002034:	bf00      	nop
 8002036:	bd80      	pop	{r7, pc}
 8002038:	200003c4 	.word	0x200003c4
 800203c:	40005400 	.word	0x40005400
 8002040:	000186a0 	.word	0x000186a0

08002044 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002048:	4b12      	ldr	r3, [pc, #72]	; (8002094 <MX_I2C3_Init+0x50>)
 800204a:	4a13      	ldr	r2, [pc, #76]	; (8002098 <MX_I2C3_Init+0x54>)
 800204c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800204e:	4b11      	ldr	r3, [pc, #68]	; (8002094 <MX_I2C3_Init+0x50>)
 8002050:	4a12      	ldr	r2, [pc, #72]	; (800209c <MX_I2C3_Init+0x58>)
 8002052:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002054:	4b0f      	ldr	r3, [pc, #60]	; (8002094 <MX_I2C3_Init+0x50>)
 8002056:	2200      	movs	r2, #0
 8002058:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800205a:	4b0e      	ldr	r3, [pc, #56]	; (8002094 <MX_I2C3_Init+0x50>)
 800205c:	2200      	movs	r2, #0
 800205e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002060:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <MX_I2C3_Init+0x50>)
 8002062:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002066:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002068:	4b0a      	ldr	r3, [pc, #40]	; (8002094 <MX_I2C3_Init+0x50>)
 800206a:	2200      	movs	r2, #0
 800206c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800206e:	4b09      	ldr	r3, [pc, #36]	; (8002094 <MX_I2C3_Init+0x50>)
 8002070:	2200      	movs	r2, #0
 8002072:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002074:	4b07      	ldr	r3, [pc, #28]	; (8002094 <MX_I2C3_Init+0x50>)
 8002076:	2200      	movs	r2, #0
 8002078:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800207a:	4b06      	ldr	r3, [pc, #24]	; (8002094 <MX_I2C3_Init+0x50>)
 800207c:	2200      	movs	r2, #0
 800207e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002080:	4804      	ldr	r0, [pc, #16]	; (8002094 <MX_I2C3_Init+0x50>)
 8002082:	f002 f94b 	bl	800431c <HAL_I2C_Init>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800208c:	f000 fee6 	bl	8002e5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002090:	bf00      	nop
 8002092:	bd80      	pop	{r7, pc}
 8002094:	200002d4 	.word	0x200002d4
 8002098:	40005c00 	.word	0x40005c00
 800209c:	000186a0 	.word	0x000186a0

080020a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b08a      	sub	sp, #40	; 0x28
 80020a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020a6:	f107 0318 	add.w	r3, r7, #24
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	605a      	str	r2, [r3, #4]
 80020b0:	609a      	str	r2, [r3, #8]
 80020b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020b4:	f107 0310 	add.w	r3, r7, #16
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80020be:	463b      	mov	r3, r7
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	605a      	str	r2, [r3, #4]
 80020c6:	609a      	str	r2, [r3, #8]
 80020c8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020ca:	4b3c      	ldr	r3, [pc, #240]	; (80021bc <MX_TIM2_Init+0x11c>)
 80020cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16 - 1;
 80020d2:	4b3a      	ldr	r3, [pc, #232]	; (80021bc <MX_TIM2_Init+0x11c>)
 80020d4:	220f      	movs	r2, #15
 80020d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020d8:	4b38      	ldr	r3, [pc, #224]	; (80021bc <MX_TIM2_Init+0x11c>)
 80020da:	2200      	movs	r2, #0
 80020dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFF - 1;
 80020de:	4b37      	ldr	r3, [pc, #220]	; (80021bc <MX_TIM2_Init+0x11c>)
 80020e0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80020e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020e6:	4b35      	ldr	r3, [pc, #212]	; (80021bc <MX_TIM2_Init+0x11c>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ec:	4b33      	ldr	r3, [pc, #204]	; (80021bc <MX_TIM2_Init+0x11c>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020f2:	4832      	ldr	r0, [pc, #200]	; (80021bc <MX_TIM2_Init+0x11c>)
 80020f4:	f003 fcfe 	bl	8005af4 <HAL_TIM_Base_Init>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80020fe:	f000 fead 	bl	8002e5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002102:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002106:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002108:	f107 0318 	add.w	r3, r7, #24
 800210c:	4619      	mov	r1, r3
 800210e:	482b      	ldr	r0, [pc, #172]	; (80021bc <MX_TIM2_Init+0x11c>)
 8002110:	f004 f912 	bl	8006338 <HAL_TIM_ConfigClockSource>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800211a:	f000 fe9f 	bl	8002e5c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800211e:	4827      	ldr	r0, [pc, #156]	; (80021bc <MX_TIM2_Init+0x11c>)
 8002120:	f003 fe02 	bl	8005d28 <HAL_TIM_IC_Init>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800212a:	f000 fe97 	bl	8002e5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800212e:	2300      	movs	r3, #0
 8002130:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002132:	2300      	movs	r3, #0
 8002134:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002136:	f107 0310 	add.w	r3, r7, #16
 800213a:	4619      	mov	r1, r3
 800213c:	481f      	ldr	r0, [pc, #124]	; (80021bc <MX_TIM2_Init+0x11c>)
 800213e:	f004 fe4f 	bl	8006de0 <HAL_TIMEx_MasterConfigSynchronization>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8002148:	f000 fe88 	bl	8002e5c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800214c:	2300      	movs	r3, #0
 800214e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002150:	2301      	movs	r3, #1
 8002152:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002154:	2300      	movs	r3, #0
 8002156:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002158:	2300      	movs	r3, #0
 800215a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800215c:	463b      	mov	r3, r7
 800215e:	2200      	movs	r2, #0
 8002160:	4619      	mov	r1, r3
 8002162:	4816      	ldr	r0, [pc, #88]	; (80021bc <MX_TIM2_Init+0x11c>)
 8002164:	f003 ff86 	bl	8006074 <HAL_TIM_IC_ConfigChannel>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 800216e:	f000 fe75 	bl	8002e5c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002172:	463b      	mov	r3, r7
 8002174:	2204      	movs	r2, #4
 8002176:	4619      	mov	r1, r3
 8002178:	4810      	ldr	r0, [pc, #64]	; (80021bc <MX_TIM2_Init+0x11c>)
 800217a:	f003 ff7b 	bl	8006074 <HAL_TIM_IC_ConfigChannel>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8002184:	f000 fe6a 	bl	8002e5c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002188:	463b      	mov	r3, r7
 800218a:	2208      	movs	r2, #8
 800218c:	4619      	mov	r1, r3
 800218e:	480b      	ldr	r0, [pc, #44]	; (80021bc <MX_TIM2_Init+0x11c>)
 8002190:	f003 ff70 	bl	8006074 <HAL_TIM_IC_ConfigChannel>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <MX_TIM2_Init+0xfe>
  {
    Error_Handler();
 800219a:	f000 fe5f 	bl	8002e5c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800219e:	463b      	mov	r3, r7
 80021a0:	220c      	movs	r2, #12
 80021a2:	4619      	mov	r1, r3
 80021a4:	4805      	ldr	r0, [pc, #20]	; (80021bc <MX_TIM2_Init+0x11c>)
 80021a6:	f003 ff65 	bl	8006074 <HAL_TIM_IC_ConfigChannel>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <MX_TIM2_Init+0x114>
  {
    Error_Handler();
 80021b0:	f000 fe54 	bl	8002e5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80021b4:	bf00      	nop
 80021b6:	3728      	adds	r7, #40	; 0x28
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	20000714 	.word	0x20000714

080021c0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b08e      	sub	sp, #56	; 0x38
 80021c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021ca:	2200      	movs	r2, #0
 80021cc:	601a      	str	r2, [r3, #0]
 80021ce:	605a      	str	r2, [r3, #4]
 80021d0:	609a      	str	r2, [r3, #8]
 80021d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021d4:	f107 0320 	add.w	r3, r7, #32
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021de:	1d3b      	adds	r3, r7, #4
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	605a      	str	r2, [r3, #4]
 80021e6:	609a      	str	r2, [r3, #8]
 80021e8:	60da      	str	r2, [r3, #12]
 80021ea:	611a      	str	r2, [r3, #16]
 80021ec:	615a      	str	r2, [r3, #20]
 80021ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80021f0:	4b2d      	ldr	r3, [pc, #180]	; (80022a8 <MX_TIM3_Init+0xe8>)
 80021f2:	4a2e      	ldr	r2, [pc, #184]	; (80022ac <MX_TIM3_Init+0xec>)
 80021f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16 - 1;
 80021f6:	4b2c      	ldr	r3, [pc, #176]	; (80022a8 <MX_TIM3_Init+0xe8>)
 80021f8:	220f      	movs	r2, #15
 80021fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021fc:	4b2a      	ldr	r3, [pc, #168]	; (80022a8 <MX_TIM3_Init+0xe8>)
 80021fe:	2200      	movs	r2, #0
 8002200:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000 - 1;
 8002202:	4b29      	ldr	r3, [pc, #164]	; (80022a8 <MX_TIM3_Init+0xe8>)
 8002204:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002208:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800220a:	4b27      	ldr	r3, [pc, #156]	; (80022a8 <MX_TIM3_Init+0xe8>)
 800220c:	2200      	movs	r2, #0
 800220e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002210:	4b25      	ldr	r3, [pc, #148]	; (80022a8 <MX_TIM3_Init+0xe8>)
 8002212:	2200      	movs	r2, #0
 8002214:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002216:	4824      	ldr	r0, [pc, #144]	; (80022a8 <MX_TIM3_Init+0xe8>)
 8002218:	f003 fc6c 	bl	8005af4 <HAL_TIM_Base_Init>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002222:	f000 fe1b 	bl	8002e5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002226:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800222a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800222c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002230:	4619      	mov	r1, r3
 8002232:	481d      	ldr	r0, [pc, #116]	; (80022a8 <MX_TIM3_Init+0xe8>)
 8002234:	f004 f880 	bl	8006338 <HAL_TIM_ConfigClockSource>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800223e:	f000 fe0d 	bl	8002e5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002242:	4819      	ldr	r0, [pc, #100]	; (80022a8 <MX_TIM3_Init+0xe8>)
 8002244:	f003 fca5 	bl	8005b92 <HAL_TIM_PWM_Init>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800224e:	f000 fe05 	bl	8002e5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002252:	2300      	movs	r3, #0
 8002254:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002256:	2300      	movs	r3, #0
 8002258:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800225a:	f107 0320 	add.w	r3, r7, #32
 800225e:	4619      	mov	r1, r3
 8002260:	4811      	ldr	r0, [pc, #68]	; (80022a8 <MX_TIM3_Init+0xe8>)
 8002262:	f004 fdbd 	bl	8006de0 <HAL_TIMEx_MasterConfigSynchronization>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800226c:	f000 fdf6 	bl	8002e5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002270:	2360      	movs	r3, #96	; 0x60
 8002272:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8002274:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002278:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800227a:	2300      	movs	r3, #0
 800227c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800227e:	2300      	movs	r3, #0
 8002280:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002282:	1d3b      	adds	r3, r7, #4
 8002284:	2208      	movs	r2, #8
 8002286:	4619      	mov	r1, r3
 8002288:	4807      	ldr	r0, [pc, #28]	; (80022a8 <MX_TIM3_Init+0xe8>)
 800228a:	f003 ff8f 	bl	80061ac <HAL_TIM_PWM_ConfigChannel>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002294:	f000 fde2 	bl	8002e5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002298:	4803      	ldr	r0, [pc, #12]	; (80022a8 <MX_TIM3_Init+0xe8>)
 800229a:	f000 ff39 	bl	8003110 <HAL_TIM_MspPostInit>

}
 800229e:	bf00      	nop
 80022a0:	3738      	adds	r7, #56	; 0x38
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	20000568 	.word	0x20000568
 80022ac:	40000400 	.word	0x40000400

080022b0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022b6:	f107 0308 	add.w	r3, r7, #8
 80022ba:	2200      	movs	r2, #0
 80022bc:	601a      	str	r2, [r3, #0]
 80022be:	605a      	str	r2, [r3, #4]
 80022c0:	609a      	str	r2, [r3, #8]
 80022c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022c4:	463b      	mov	r3, r7
 80022c6:	2200      	movs	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]
 80022ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80022cc:	4b1d      	ldr	r3, [pc, #116]	; (8002344 <MX_TIM4_Init+0x94>)
 80022ce:	4a1e      	ldr	r2, [pc, #120]	; (8002348 <MX_TIM4_Init+0x98>)
 80022d0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16000;
 80022d2:	4b1c      	ldr	r3, [pc, #112]	; (8002344 <MX_TIM4_Init+0x94>)
 80022d4:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80022d8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022da:	4b1a      	ldr	r3, [pc, #104]	; (8002344 <MX_TIM4_Init+0x94>)
 80022dc:	2200      	movs	r2, #0
 80022de:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000 - 1;
 80022e0:	4b18      	ldr	r3, [pc, #96]	; (8002344 <MX_TIM4_Init+0x94>)
 80022e2:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80022e6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022e8:	4b16      	ldr	r3, [pc, #88]	; (8002344 <MX_TIM4_Init+0x94>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022ee:	4b15      	ldr	r3, [pc, #84]	; (8002344 <MX_TIM4_Init+0x94>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80022f4:	4813      	ldr	r0, [pc, #76]	; (8002344 <MX_TIM4_Init+0x94>)
 80022f6:	f003 fbfd 	bl	8005af4 <HAL_TIM_Base_Init>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002300:	f000 fdac 	bl	8002e5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002304:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002308:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800230a:	f107 0308 	add.w	r3, r7, #8
 800230e:	4619      	mov	r1, r3
 8002310:	480c      	ldr	r0, [pc, #48]	; (8002344 <MX_TIM4_Init+0x94>)
 8002312:	f004 f811 	bl	8006338 <HAL_TIM_ConfigClockSource>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800231c:	f000 fd9e 	bl	8002e5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002320:	2300      	movs	r3, #0
 8002322:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002324:	2300      	movs	r3, #0
 8002326:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002328:	463b      	mov	r3, r7
 800232a:	4619      	mov	r1, r3
 800232c:	4805      	ldr	r0, [pc, #20]	; (8002344 <MX_TIM4_Init+0x94>)
 800232e:	f004 fd57 	bl	8006de0 <HAL_TIMEx_MasterConfigSynchronization>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002338:	f000 fd90 	bl	8002e5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800233c:	bf00      	nop
 800233e:	3718      	adds	r7, #24
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	20000328 	.word	0x20000328
 8002348:	40000800 	.word	0x40000800

0800234c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002350:	4b11      	ldr	r3, [pc, #68]	; (8002398 <MX_UART4_Init+0x4c>)
 8002352:	4a12      	ldr	r2, [pc, #72]	; (800239c <MX_UART4_Init+0x50>)
 8002354:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002356:	4b10      	ldr	r3, [pc, #64]	; (8002398 <MX_UART4_Init+0x4c>)
 8002358:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800235c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800235e:	4b0e      	ldr	r3, [pc, #56]	; (8002398 <MX_UART4_Init+0x4c>)
 8002360:	2200      	movs	r2, #0
 8002362:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002364:	4b0c      	ldr	r3, [pc, #48]	; (8002398 <MX_UART4_Init+0x4c>)
 8002366:	2200      	movs	r2, #0
 8002368:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800236a:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <MX_UART4_Init+0x4c>)
 800236c:	2200      	movs	r2, #0
 800236e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002370:	4b09      	ldr	r3, [pc, #36]	; (8002398 <MX_UART4_Init+0x4c>)
 8002372:	220c      	movs	r2, #12
 8002374:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002376:	4b08      	ldr	r3, [pc, #32]	; (8002398 <MX_UART4_Init+0x4c>)
 8002378:	2200      	movs	r2, #0
 800237a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800237c:	4b06      	ldr	r3, [pc, #24]	; (8002398 <MX_UART4_Init+0x4c>)
 800237e:	2200      	movs	r2, #0
 8002380:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002382:	4805      	ldr	r0, [pc, #20]	; (8002398 <MX_UART4_Init+0x4c>)
 8002384:	f004 fdbc 	bl	8006f00 <HAL_UART_Init>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800238e:	f000 fd65 	bl	8002e5c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002392:	bf00      	nop
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	200006d4 	.word	0x200006d4
 800239c:	40004c00 	.word	0x40004c00

080023a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80023a4:	4b11      	ldr	r3, [pc, #68]	; (80023ec <MX_USART1_UART_Init+0x4c>)
 80023a6:	4a12      	ldr	r2, [pc, #72]	; (80023f0 <MX_USART1_UART_Init+0x50>)
 80023a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80023aa:	4b10      	ldr	r3, [pc, #64]	; (80023ec <MX_USART1_UART_Init+0x4c>)
 80023ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023b2:	4b0e      	ldr	r3, [pc, #56]	; (80023ec <MX_USART1_UART_Init+0x4c>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023b8:	4b0c      	ldr	r3, [pc, #48]	; (80023ec <MX_USART1_UART_Init+0x4c>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80023be:	4b0b      	ldr	r3, [pc, #44]	; (80023ec <MX_USART1_UART_Init+0x4c>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023c4:	4b09      	ldr	r3, [pc, #36]	; (80023ec <MX_USART1_UART_Init+0x4c>)
 80023c6:	220c      	movs	r2, #12
 80023c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023ca:	4b08      	ldr	r3, [pc, #32]	; (80023ec <MX_USART1_UART_Init+0x4c>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023d0:	4b06      	ldr	r3, [pc, #24]	; (80023ec <MX_USART1_UART_Init+0x4c>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023d6:	4805      	ldr	r0, [pc, #20]	; (80023ec <MX_USART1_UART_Init+0x4c>)
 80023d8:	f004 fd92 	bl	8006f00 <HAL_UART_Init>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80023e2:	f000 fd3b 	bl	8002e5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80023e6:	bf00      	nop
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	200005c8 	.word	0x200005c8
 80023f0:	40011000 	.word	0x40011000

080023f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80023f8:	4b11      	ldr	r3, [pc, #68]	; (8002440 <MX_USART2_UART_Init+0x4c>)
 80023fa:	4a12      	ldr	r2, [pc, #72]	; (8002444 <MX_USART2_UART_Init+0x50>)
 80023fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80023fe:	4b10      	ldr	r3, [pc, #64]	; (8002440 <MX_USART2_UART_Init+0x4c>)
 8002400:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002404:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002406:	4b0e      	ldr	r3, [pc, #56]	; (8002440 <MX_USART2_UART_Init+0x4c>)
 8002408:	2200      	movs	r2, #0
 800240a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800240c:	4b0c      	ldr	r3, [pc, #48]	; (8002440 <MX_USART2_UART_Init+0x4c>)
 800240e:	2200      	movs	r2, #0
 8002410:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002412:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <MX_USART2_UART_Init+0x4c>)
 8002414:	2200      	movs	r2, #0
 8002416:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002418:	4b09      	ldr	r3, [pc, #36]	; (8002440 <MX_USART2_UART_Init+0x4c>)
 800241a:	220c      	movs	r2, #12
 800241c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800241e:	4b08      	ldr	r3, [pc, #32]	; (8002440 <MX_USART2_UART_Init+0x4c>)
 8002420:	2200      	movs	r2, #0
 8002422:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002424:	4b06      	ldr	r3, [pc, #24]	; (8002440 <MX_USART2_UART_Init+0x4c>)
 8002426:	2200      	movs	r2, #0
 8002428:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800242a:	4805      	ldr	r0, [pc, #20]	; (8002440 <MX_USART2_UART_Init+0x4c>)
 800242c:	f004 fd68 	bl	8006f00 <HAL_UART_Init>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002436:	f000 fd11 	bl	8002e5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800243a:	bf00      	nop
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	20000798 	.word	0x20000798
 8002444:	40004400 	.word	0x40004400

08002448 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800244c:	4b11      	ldr	r3, [pc, #68]	; (8002494 <MX_USART3_UART_Init+0x4c>)
 800244e:	4a12      	ldr	r2, [pc, #72]	; (8002498 <MX_USART3_UART_Init+0x50>)
 8002450:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002452:	4b10      	ldr	r3, [pc, #64]	; (8002494 <MX_USART3_UART_Init+0x4c>)
 8002454:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002458:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800245a:	4b0e      	ldr	r3, [pc, #56]	; (8002494 <MX_USART3_UART_Init+0x4c>)
 800245c:	2200      	movs	r2, #0
 800245e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002460:	4b0c      	ldr	r3, [pc, #48]	; (8002494 <MX_USART3_UART_Init+0x4c>)
 8002462:	2200      	movs	r2, #0
 8002464:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002466:	4b0b      	ldr	r3, [pc, #44]	; (8002494 <MX_USART3_UART_Init+0x4c>)
 8002468:	2200      	movs	r2, #0
 800246a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800246c:	4b09      	ldr	r3, [pc, #36]	; (8002494 <MX_USART3_UART_Init+0x4c>)
 800246e:	220c      	movs	r2, #12
 8002470:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002472:	4b08      	ldr	r3, [pc, #32]	; (8002494 <MX_USART3_UART_Init+0x4c>)
 8002474:	2200      	movs	r2, #0
 8002476:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002478:	4b06      	ldr	r3, [pc, #24]	; (8002494 <MX_USART3_UART_Init+0x4c>)
 800247a:	2200      	movs	r2, #0
 800247c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800247e:	4805      	ldr	r0, [pc, #20]	; (8002494 <MX_USART3_UART_Init+0x4c>)
 8002480:	f004 fd3e 	bl	8006f00 <HAL_UART_Init>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800248a:	f000 fce7 	bl	8002e5c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800248e:	bf00      	nop
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	2000036c 	.word	0x2000036c
 8002498:	40004800 	.word	0x40004800

0800249c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024a2:	2300      	movs	r3, #0
 80024a4:	607b      	str	r3, [r7, #4]
 80024a6:	4b10      	ldr	r3, [pc, #64]	; (80024e8 <MX_DMA_Init+0x4c>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024aa:	4a0f      	ldr	r2, [pc, #60]	; (80024e8 <MX_DMA_Init+0x4c>)
 80024ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024b0:	6313      	str	r3, [r2, #48]	; 0x30
 80024b2:	4b0d      	ldr	r3, [pc, #52]	; (80024e8 <MX_DMA_Init+0x4c>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024ba:	607b      	str	r3, [r7, #4]
 80024bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80024be:	2200      	movs	r2, #0
 80024c0:	2100      	movs	r1, #0
 80024c2:	200d      	movs	r0, #13
 80024c4:	f001 f9eb 	bl	800389e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80024c8:	200d      	movs	r0, #13
 80024ca:	f001 fa04 	bl	80038d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80024ce:	2200      	movs	r2, #0
 80024d0:	2100      	movs	r1, #0
 80024d2:	2010      	movs	r0, #16
 80024d4:	f001 f9e3 	bl	800389e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80024d8:	2010      	movs	r0, #16
 80024da:	f001 f9fc 	bl	80038d6 <HAL_NVIC_EnableIRQ>

}
 80024de:	bf00      	nop
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	40023800 	.word	0x40023800

080024ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f2:	2300      	movs	r3, #0
 80024f4:	60fb      	str	r3, [r7, #12]
 80024f6:	4b1e      	ldr	r3, [pc, #120]	; (8002570 <MX_GPIO_Init+0x84>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fa:	4a1d      	ldr	r2, [pc, #116]	; (8002570 <MX_GPIO_Init+0x84>)
 80024fc:	f043 0301 	orr.w	r3, r3, #1
 8002500:	6313      	str	r3, [r2, #48]	; 0x30
 8002502:	4b1b      	ldr	r3, [pc, #108]	; (8002570 <MX_GPIO_Init+0x84>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	60fb      	str	r3, [r7, #12]
 800250c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800250e:	2300      	movs	r3, #0
 8002510:	60bb      	str	r3, [r7, #8]
 8002512:	4b17      	ldr	r3, [pc, #92]	; (8002570 <MX_GPIO_Init+0x84>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	4a16      	ldr	r2, [pc, #88]	; (8002570 <MX_GPIO_Init+0x84>)
 8002518:	f043 0302 	orr.w	r3, r3, #2
 800251c:	6313      	str	r3, [r2, #48]	; 0x30
 800251e:	4b14      	ldr	r3, [pc, #80]	; (8002570 <MX_GPIO_Init+0x84>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	60bb      	str	r3, [r7, #8]
 8002528:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800252a:	2300      	movs	r3, #0
 800252c:	607b      	str	r3, [r7, #4]
 800252e:	4b10      	ldr	r3, [pc, #64]	; (8002570 <MX_GPIO_Init+0x84>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002532:	4a0f      	ldr	r2, [pc, #60]	; (8002570 <MX_GPIO_Init+0x84>)
 8002534:	f043 0304 	orr.w	r3, r3, #4
 8002538:	6313      	str	r3, [r2, #48]	; 0x30
 800253a:	4b0d      	ldr	r3, [pc, #52]	; (8002570 <MX_GPIO_Init+0x84>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253e:	f003 0304 	and.w	r3, r3, #4
 8002542:	607b      	str	r3, [r7, #4]
 8002544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002546:	2300      	movs	r3, #0
 8002548:	603b      	str	r3, [r7, #0]
 800254a:	4b09      	ldr	r3, [pc, #36]	; (8002570 <MX_GPIO_Init+0x84>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254e:	4a08      	ldr	r2, [pc, #32]	; (8002570 <MX_GPIO_Init+0x84>)
 8002550:	f043 0308 	orr.w	r3, r3, #8
 8002554:	6313      	str	r3, [r2, #48]	; 0x30
 8002556:	4b06      	ldr	r3, [pc, #24]	; (8002570 <MX_GPIO_Init+0x84>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	f003 0308 	and.w	r3, r3, #8
 800255e:	603b      	str	r3, [r7, #0]
 8002560:	683b      	ldr	r3, [r7, #0]

}
 8002562:	bf00      	nop
 8002564:	3714      	adds	r7, #20
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	40023800 	.word	0x40023800

08002574 <initPWM_DATA>:

/* USER CODE BEGIN 4 */
void initPWM_DATA(struct PWM_DATA* PWM_Data){
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
	PWM_Data->onFallingEdge = false;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	745a      	strb	r2, [r3, #17]
	PWM_Data->onRisingEdge = true;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2201      	movs	r2, #1
 8002586:	741a      	strb	r2, [r3, #16]
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <getIMUData>:

void getIMUData(struct IMU_DATA *IMU_Data){
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
	  uint8_t YPR[8];
	  IMU_Data->YAW = 1000.0f, IMU_Data->PITCH = 1000.0f, IMU_Data->ROLL = 1000.0f;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4a43      	ldr	r2, [pc, #268]	; (80026ac <getIMUData+0x118>)
 80025a0:	601a      	str	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a41      	ldr	r2, [pc, #260]	; (80026ac <getIMUData+0x118>)
 80025a6:	605a      	str	r2, [r3, #4]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a40      	ldr	r2, [pc, #256]	; (80026ac <getIMUData+0x118>)
 80025ac:	609a      	str	r2, [r3, #8]
	  char* buf;
	  buf = strchr(IMUBuffer, 0xAA);
 80025ae:	21aa      	movs	r1, #170	; 0xaa
 80025b0:	483f      	ldr	r0, [pc, #252]	; (80026b0 <getIMUData+0x11c>)
 80025b2:	f006 f81f 	bl	80085f4 <strchr>
 80025b6:	6178      	str	r0, [r7, #20]
	  memcpy(YPR, buf, 8);
 80025b8:	697a      	ldr	r2, [r7, #20]
 80025ba:	f107 030c 	add.w	r3, r7, #12
 80025be:	6810      	ldr	r0, [r2, #0]
 80025c0:	6851      	ldr	r1, [r2, #4]
 80025c2:	c303      	stmia	r3!, {r0, r1}
	  if(YPR[0] == 0xAA && YPR[7] == 0x55){
 80025c4:	7b3b      	ldrb	r3, [r7, #12]
 80025c6:	2baa      	cmp	r3, #170	; 0xaa
 80025c8:	d16c      	bne.n	80026a4 <getIMUData+0x110>
 80025ca:	7cfb      	ldrb	r3, [r7, #19]
 80025cc:	2b55      	cmp	r3, #85	; 0x55
 80025ce:	d169      	bne.n	80026a4 <getIMUData+0x110>
		  IMU_Data->YAW = (YPR[1] << 8 | YPR[2]) * 0.01f;
 80025d0:	7b7b      	ldrb	r3, [r7, #13]
 80025d2:	021b      	lsls	r3, r3, #8
 80025d4:	7bba      	ldrb	r2, [r7, #14]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	ee07 3a90 	vmov	s15, r3
 80025dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025e0:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80026b4 <getIMUData+0x120>
 80025e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	edc3 7a00 	vstr	s15, [r3]
		  if(IMU_Data->YAW > 179) IMU_Data->YAW = IMU_Data->YAW - 655;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	edd3 7a00 	vldr	s15, [r3]
 80025f4:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80026b8 <getIMUData+0x124>
 80025f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002600:	dd09      	ble.n	8002616 <getIMUData+0x82>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	edd3 7a00 	vldr	s15, [r3]
 8002608:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80026bc <getIMUData+0x128>
 800260c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	edc3 7a00 	vstr	s15, [r3]

		  IMU_Data->PITCH = (YPR[3] << 8 | YPR[4]) * 0.01f;
 8002616:	7bfb      	ldrb	r3, [r7, #15]
 8002618:	021b      	lsls	r3, r3, #8
 800261a:	7c3a      	ldrb	r2, [r7, #16]
 800261c:	4313      	orrs	r3, r2
 800261e:	ee07 3a90 	vmov	s15, r3
 8002622:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002626:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80026b4 <getIMUData+0x120>
 800262a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	edc3 7a01 	vstr	s15, [r3, #4]
		  if(IMU_Data->PITCH > 179) IMU_Data->PITCH = IMU_Data->PITCH - 655;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	edd3 7a01 	vldr	s15, [r3, #4]
 800263a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80026b8 <getIMUData+0x124>
 800263e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002646:	dd09      	ble.n	800265c <getIMUData+0xc8>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	edd3 7a01 	vldr	s15, [r3, #4]
 800264e:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80026bc <getIMUData+0x128>
 8002652:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	edc3 7a01 	vstr	s15, [r3, #4]

		  IMU_Data->ROLL = (YPR[5] << 8 | YPR[6]) * 0.01f;
 800265c:	7c7b      	ldrb	r3, [r7, #17]
 800265e:	021b      	lsls	r3, r3, #8
 8002660:	7cba      	ldrb	r2, [r7, #18]
 8002662:	4313      	orrs	r3, r2
 8002664:	ee07 3a90 	vmov	s15, r3
 8002668:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800266c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80026b4 <getIMUData+0x120>
 8002670:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	edc3 7a02 	vstr	s15, [r3, #8]
		  if(IMU_Data->ROLL > 179) IMU_Data->ROLL = IMU_Data->ROLL - 655;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002680:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80026b8 <getIMUData+0x124>
 8002684:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800268c:	dc00      	bgt.n	8002690 <getIMUData+0xfc>
	  }
	  //strSize = sprintf(buffer, "YAW: %f, PITCH: %f, ROLL: %f\r\n", IMU_Data.YAW, IMU_Data.PITCH, IMU_Data.ROLL);
	 //HAL_UART_Transmit(&huart3, buffer, strSize, 100);
}
 800268e:	e009      	b.n	80026a4 <getIMUData+0x110>
		  if(IMU_Data->ROLL > 179) IMU_Data->ROLL = IMU_Data->ROLL - 655;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	edd3 7a02 	vldr	s15, [r3, #8]
 8002696:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80026bc <getIMUData+0x128>
 800269a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80026a4:	bf00      	nop
 80026a6:	3718      	adds	r7, #24
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	447a0000 	.word	0x447a0000
 80026b0:	20000754 	.word	0x20000754
 80026b4:	3c23d70a 	.word	0x3c23d70a
 80026b8:	43330000 	.word	0x43330000
 80026bc:	4423c000 	.word	0x4423c000

080026c0 <setPWM>:

void setPWM(TIM_HandleTypeDef htim, uint32_t channel, uint32_t dutyCycle){
 80026c0:	b084      	sub	sp, #16
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b088      	sub	sp, #32
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 80026cc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_TIM_PWM_Stop(&htim, channel);
 80026d0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80026d2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80026d6:	f003 facf 	bl	8005c78 <HAL_TIM_PWM_Stop>
	TIM_OC_InitTypeDef sConfigOC;
	htim.Init.Period = 20000 - 1;
 80026da:	f644 631f 	movw	r3, #19999	; 0x4e1f
 80026de:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_TIM_PWM_Init(&htim);
 80026e0:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80026e4:	f003 fa55 	bl	8005b92 <HAL_TIM_PWM_Init>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026e8:	2360      	movs	r3, #96	; 0x60
 80026ea:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = dutyCycle;
 80026ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026ee:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026f0:	2300      	movs	r3, #0
 80026f2:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026f4:	2300      	movs	r3, #0
 80026f6:	617b      	str	r3, [r7, #20]
	HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, channel);
 80026f8:	1d3b      	adds	r3, r7, #4
 80026fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80026fc:	4619      	mov	r1, r3
 80026fe:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002702:	f003 fd53 	bl	80061ac <HAL_TIM_PWM_ConfigChannel>

	HAL_TIM_PWM_Start(&htim, channel);
 8002706:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002708:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800270c:	f003 fa76 	bl	8005bfc <HAL_TIM_PWM_Start>
}
 8002710:	bf00      	nop
 8002712:	3720      	adds	r7, #32
 8002714:	46bd      	mov	sp, r7
 8002716:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800271a:	b004      	add	sp, #16
 800271c:	4770      	bx	lr
	...

08002720 <CalibrateESC>:

void CalibrateESC(){
 8002720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002722:	b08f      	sub	sp, #60	; 0x3c
 8002724:	af0e      	add	r7, sp, #56	; 0x38
	setPWM(htim3, TIM_CHANNEL_3, ESC_PWM_MAX);
 8002726:	4e1b      	ldr	r6, [pc, #108]	; (8002794 <CalibrateESC+0x74>)
 8002728:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800272c:	930d      	str	r3, [sp, #52]	; 0x34
 800272e:	2308      	movs	r3, #8
 8002730:	930c      	str	r3, [sp, #48]	; 0x30
 8002732:	466d      	mov	r5, sp
 8002734:	f106 0410 	add.w	r4, r6, #16
 8002738:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800273a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800273c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800273e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002740:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002744:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002748:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800274c:	f7ff ffb8 	bl	80026c0 <setPWM>
	HAL_Delay(2000);
 8002750:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002754:	f000 ffa6 	bl	80036a4 <HAL_Delay>
	setPWM(htim3, TIM_CHANNEL_3, ESC_PWM_MIN);
 8002758:	4e0e      	ldr	r6, [pc, #56]	; (8002794 <CalibrateESC+0x74>)
 800275a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800275e:	930d      	str	r3, [sp, #52]	; 0x34
 8002760:	2308      	movs	r3, #8
 8002762:	930c      	str	r3, [sp, #48]	; 0x30
 8002764:	466d      	mov	r5, sp
 8002766:	f106 0410 	add.w	r4, r6, #16
 800276a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800276c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800276e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002770:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002772:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002776:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800277a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800277e:	f7ff ff9f 	bl	80026c0 <setPWM>
	HAL_Delay(2000);
 8002782:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002786:	f000 ff8d 	bl	80036a4 <HAL_Delay>
}
 800278a:	bf00      	nop
 800278c:	3704      	adds	r7, #4
 800278e:	46bd      	mov	sp, r7
 8002790:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002792:	bf00      	nop
 8002794:	20000568 	.word	0x20000568

08002798 <BMPInit>:

void BMPInit(){
 8002798:	b5b0      	push	{r4, r5, r7, lr}
 800279a:	af00      	add	r7, sp, #0
	bmp280_init_default_params(&bmp280.params);
 800279c:	483b      	ldr	r0, [pc, #236]	; (800288c <BMPInit+0xf4>)
 800279e:	f7fe fc33 	bl	8001008 <bmp280_init_default_params>
	bmp280.addr = BMP280_I2C_ADDRESS_0;
 80027a2:	4b3b      	ldr	r3, [pc, #236]	; (8002890 <BMPInit+0xf8>)
 80027a4:	2276      	movs	r2, #118	; 0x76
 80027a6:	849a      	strh	r2, [r3, #36]	; 0x24
	bmp280.i2c = &hi2c1;
 80027a8:	4b39      	ldr	r3, [pc, #228]	; (8002890 <BMPInit+0xf8>)
 80027aa:	4a3a      	ldr	r2, [pc, #232]	; (8002894 <BMPInit+0xfc>)
 80027ac:	629a      	str	r2, [r3, #40]	; 0x28

	while(!bmp280_init(&bmp280, &bmp280.params)){
 80027ae:	e01d      	b.n	80027ec <BMPInit+0x54>
		strSize = sprintf((char*)buffer, "BMP280 initialization failed\r\n");
 80027b0:	4a39      	ldr	r2, [pc, #228]	; (8002898 <BMPInit+0x100>)
 80027b2:	4b3a      	ldr	r3, [pc, #232]	; (800289c <BMPInit+0x104>)
 80027b4:	4615      	mov	r5, r2
 80027b6:	461c      	mov	r4, r3
 80027b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027ba:	6028      	str	r0, [r5, #0]
 80027bc:	6069      	str	r1, [r5, #4]
 80027be:	60aa      	str	r2, [r5, #8]
 80027c0:	60eb      	str	r3, [r5, #12]
 80027c2:	cc07      	ldmia	r4!, {r0, r1, r2}
 80027c4:	6128      	str	r0, [r5, #16]
 80027c6:	6169      	str	r1, [r5, #20]
 80027c8:	61aa      	str	r2, [r5, #24]
 80027ca:	8823      	ldrh	r3, [r4, #0]
 80027cc:	78a2      	ldrb	r2, [r4, #2]
 80027ce:	83ab      	strh	r3, [r5, #28]
 80027d0:	4613      	mov	r3, r2
 80027d2:	77ab      	strb	r3, [r5, #30]
 80027d4:	231e      	movs	r3, #30
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	4b31      	ldr	r3, [pc, #196]	; (80028a0 <BMPInit+0x108>)
 80027da:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, buffer, strSize, 1000);
 80027dc:	4b30      	ldr	r3, [pc, #192]	; (80028a0 <BMPInit+0x108>)
 80027de:	881a      	ldrh	r2, [r3, #0]
 80027e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027e4:	492c      	ldr	r1, [pc, #176]	; (8002898 <BMPInit+0x100>)
 80027e6:	482f      	ldr	r0, [pc, #188]	; (80028a4 <BMPInit+0x10c>)
 80027e8:	f004 fbd7 	bl	8006f9a <HAL_UART_Transmit>
	while(!bmp280_init(&bmp280, &bmp280.params)){
 80027ec:	4927      	ldr	r1, [pc, #156]	; (800288c <BMPInit+0xf4>)
 80027ee:	4828      	ldr	r0, [pc, #160]	; (8002890 <BMPInit+0xf8>)
 80027f0:	f7fe fd85 	bl	80012fe <bmp280_init>
 80027f4:	4603      	mov	r3, r0
 80027f6:	f083 0301 	eor.w	r3, r3, #1
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1d7      	bne.n	80027b0 <BMPInit+0x18>
	}
	HAL_Delay(1000);
 8002800:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002804:	f000 ff4e 	bl	80036a4 <HAL_Delay>
	bme280p = bmp280.id == BME280_CHIP_ID;
 8002808:	4b21      	ldr	r3, [pc, #132]	; (8002890 <BMPInit+0xf8>)
 800280a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800280e:	2b60      	cmp	r3, #96	; 0x60
 8002810:	bf0c      	ite	eq
 8002812:	2301      	moveq	r3, #1
 8002814:	2300      	movne	r3, #0
 8002816:	b2da      	uxtb	r2, r3
 8002818:	4b23      	ldr	r3, [pc, #140]	; (80028a8 <BMPInit+0x110>)
 800281a:	701a      	strb	r2, [r3, #0]
	strSize = sprintf((char*)buffer, "BMP280: found %s\r\n", bme280p ? "BME280" : "BMP280");
 800281c:	4b22      	ldr	r3, [pc, #136]	; (80028a8 <BMPInit+0x110>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <BMPInit+0x90>
 8002824:	4b21      	ldr	r3, [pc, #132]	; (80028ac <BMPInit+0x114>)
 8002826:	e000      	b.n	800282a <BMPInit+0x92>
 8002828:	4b21      	ldr	r3, [pc, #132]	; (80028b0 <BMPInit+0x118>)
 800282a:	461a      	mov	r2, r3
 800282c:	4921      	ldr	r1, [pc, #132]	; (80028b4 <BMPInit+0x11c>)
 800282e:	481a      	ldr	r0, [pc, #104]	; (8002898 <BMPInit+0x100>)
 8002830:	f005 fec0 	bl	80085b4 <siprintf>
 8002834:	4603      	mov	r3, r0
 8002836:	b29a      	uxth	r2, r3
 8002838:	4b19      	ldr	r3, [pc, #100]	; (80028a0 <BMPInit+0x108>)
 800283a:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, buffer, strSize, 1000);
 800283c:	4b18      	ldr	r3, [pc, #96]	; (80028a0 <BMPInit+0x108>)
 800283e:	881a      	ldrh	r2, [r3, #0]
 8002840:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002844:	4914      	ldr	r1, [pc, #80]	; (8002898 <BMPInit+0x100>)
 8002846:	4817      	ldr	r0, [pc, #92]	; (80028a4 <BMPInit+0x10c>)
 8002848:	f004 fba7 	bl	8006f9a <HAL_UART_Transmit>

	strSize = sprintf((char*)buffer, "Calibrating.");
 800284c:	4a12      	ldr	r2, [pc, #72]	; (8002898 <BMPInit+0x100>)
 800284e:	4b1a      	ldr	r3, [pc, #104]	; (80028b8 <BMPInit+0x120>)
 8002850:	4614      	mov	r4, r2
 8002852:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002854:	6020      	str	r0, [r4, #0]
 8002856:	6061      	str	r1, [r4, #4]
 8002858:	60a2      	str	r2, [r4, #8]
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	7323      	strb	r3, [r4, #12]
 800285e:	230c      	movs	r3, #12
 8002860:	b29a      	uxth	r2, r3
 8002862:	4b0f      	ldr	r3, [pc, #60]	; (80028a0 <BMPInit+0x108>)
 8002864:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, buffer, strSize, 10);
 8002866:	4b0e      	ldr	r3, [pc, #56]	; (80028a0 <BMPInit+0x108>)
 8002868:	881a      	ldrh	r2, [r3, #0]
 800286a:	230a      	movs	r3, #10
 800286c:	490a      	ldr	r1, [pc, #40]	; (8002898 <BMPInit+0x100>)
 800286e:	480d      	ldr	r0, [pc, #52]	; (80028a4 <BMPInit+0x10c>)
 8002870:	f004 fb93 	bl	8006f9a <HAL_UART_Transmit>


	bmp280_read_float(&bmp280, &temperature, &pressure, &humidity);
 8002874:	4b11      	ldr	r3, [pc, #68]	; (80028bc <BMPInit+0x124>)
 8002876:	4a12      	ldr	r2, [pc, #72]	; (80028c0 <BMPInit+0x128>)
 8002878:	4912      	ldr	r1, [pc, #72]	; (80028c4 <BMPInit+0x12c>)
 800287a:	4805      	ldr	r0, [pc, #20]	; (8002890 <BMPInit+0xf8>)
 800287c:	f7ff f894 	bl	80019a8 <bmp280_read_float>
	pressureRef = pressure;
 8002880:	4b0f      	ldr	r3, [pc, #60]	; (80028c0 <BMPInit+0x128>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a10      	ldr	r2, [pc, #64]	; (80028c8 <BMPInit+0x130>)
 8002886:	6013      	str	r3, [r2, #0]


}
 8002888:	bf00      	nop
 800288a:	bdb0      	pop	{r4, r5, r7, pc}
 800288c:	20000790 	.word	0x20000790
 8002890:	20000764 	.word	0x20000764
 8002894:	200003c4 	.word	0x200003c4
 8002898:	20000608 	.word	0x20000608
 800289c:	0800ad44 	.word	0x0800ad44
 80028a0:	200007f8 	.word	0x200007f8
 80028a4:	2000036c 	.word	0x2000036c
 80028a8:	200005a8 	.word	0x200005a8
 80028ac:	0800ad64 	.word	0x0800ad64
 80028b0:	0800ad6c 	.word	0x0800ad6c
 80028b4:	0800ad74 	.word	0x0800ad74
 80028b8:	0800ad88 	.word	0x0800ad88
 80028bc:	200005c4 	.word	0x200005c4
 80028c0:	200005ac 	.word	0x200005ac
 80028c4:	20000558 	.word	0x20000558
 80028c8:	20000204 	.word	0x20000204

080028cc <IMUInit>:

void IMUInit(){
 80028cc:	b5b0      	push	{r4, r5, r7, lr}
 80028ce:	af00      	add	r7, sp, #0
	huart2Status = HAL_UART_Transmit(&huart2, (u_char*)0xA5, 1, 10);
 80028d0:	230a      	movs	r3, #10
 80028d2:	2201      	movs	r2, #1
 80028d4:	21a5      	movs	r1, #165	; 0xa5
 80028d6:	4844      	ldr	r0, [pc, #272]	; (80029e8 <IMUInit+0x11c>)
 80028d8:	f004 fb5f 	bl	8006f9a <HAL_UART_Transmit>
 80028dc:	4603      	mov	r3, r0
 80028de:	461a      	mov	r2, r3
 80028e0:	4b42      	ldr	r3, [pc, #264]	; (80029ec <IMUInit+0x120>)
 80028e2:	701a      	strb	r2, [r3, #0]
	huart2Status = HAL_UART_Transmit(&huart2, (u_char*)0x54, 1, 10);
 80028e4:	230a      	movs	r3, #10
 80028e6:	2201      	movs	r2, #1
 80028e8:	2154      	movs	r1, #84	; 0x54
 80028ea:	483f      	ldr	r0, [pc, #252]	; (80029e8 <IMUInit+0x11c>)
 80028ec:	f004 fb55 	bl	8006f9a <HAL_UART_Transmit>
 80028f0:	4603      	mov	r3, r0
 80028f2:	461a      	mov	r2, r3
 80028f4:	4b3d      	ldr	r3, [pc, #244]	; (80029ec <IMUInit+0x120>)
 80028f6:	701a      	strb	r2, [r3, #0]

	  HAL_Delay(3000);
 80028f8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80028fc:	f000 fed2 	bl	80036a4 <HAL_Delay>
	  strSize = sprintf((char*)buffer,"Kalibrasi tilt done\r\n");
 8002900:	4a3b      	ldr	r2, [pc, #236]	; (80029f0 <IMUInit+0x124>)
 8002902:	4b3c      	ldr	r3, [pc, #240]	; (80029f4 <IMUInit+0x128>)
 8002904:	4615      	mov	r5, r2
 8002906:	461c      	mov	r4, r3
 8002908:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800290a:	6028      	str	r0, [r5, #0]
 800290c:	6069      	str	r1, [r5, #4]
 800290e:	60aa      	str	r2, [r5, #8]
 8002910:	60eb      	str	r3, [r5, #12]
 8002912:	6820      	ldr	r0, [r4, #0]
 8002914:	6128      	str	r0, [r5, #16]
 8002916:	88a3      	ldrh	r3, [r4, #4]
 8002918:	82ab      	strh	r3, [r5, #20]
 800291a:	2315      	movs	r3, #21
 800291c:	b29a      	uxth	r2, r3
 800291e:	4b36      	ldr	r3, [pc, #216]	; (80029f8 <IMUInit+0x12c>)
 8002920:	801a      	strh	r2, [r3, #0]
	  huart3Status = HAL_UART_Transmit(&huart3, buffer, strSize, 100);
 8002922:	4b35      	ldr	r3, [pc, #212]	; (80029f8 <IMUInit+0x12c>)
 8002924:	881a      	ldrh	r2, [r3, #0]
 8002926:	2364      	movs	r3, #100	; 0x64
 8002928:	4931      	ldr	r1, [pc, #196]	; (80029f0 <IMUInit+0x124>)
 800292a:	4834      	ldr	r0, [pc, #208]	; (80029fc <IMUInit+0x130>)
 800292c:	f004 fb35 	bl	8006f9a <HAL_UART_Transmit>
 8002930:	4603      	mov	r3, r0
 8002932:	461a      	mov	r2, r3
 8002934:	4b32      	ldr	r3, [pc, #200]	; (8002a00 <IMUInit+0x134>)
 8002936:	701a      	strb	r2, [r3, #0]

	  //Kalibrasi heading
	  HAL_Delay(1000);
 8002938:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800293c:	f000 feb2 	bl	80036a4 <HAL_Delay>
	  huart2Status = HAL_UART_Transmit(&huart2, (u_char*)0xA5, 1, 10);
 8002940:	230a      	movs	r3, #10
 8002942:	2201      	movs	r2, #1
 8002944:	21a5      	movs	r1, #165	; 0xa5
 8002946:	4828      	ldr	r0, [pc, #160]	; (80029e8 <IMUInit+0x11c>)
 8002948:	f004 fb27 	bl	8006f9a <HAL_UART_Transmit>
 800294c:	4603      	mov	r3, r0
 800294e:	461a      	mov	r2, r3
 8002950:	4b26      	ldr	r3, [pc, #152]	; (80029ec <IMUInit+0x120>)
 8002952:	701a      	strb	r2, [r3, #0]
	  huart2Status = HAL_UART_Transmit(&huart2, (u_char*)0x55, 1, 10);
 8002954:	230a      	movs	r3, #10
 8002956:	2201      	movs	r2, #1
 8002958:	2155      	movs	r1, #85	; 0x55
 800295a:	4823      	ldr	r0, [pc, #140]	; (80029e8 <IMUInit+0x11c>)
 800295c:	f004 fb1d 	bl	8006f9a <HAL_UART_Transmit>
 8002960:	4603      	mov	r3, r0
 8002962:	461a      	mov	r2, r3
 8002964:	4b21      	ldr	r3, [pc, #132]	; (80029ec <IMUInit+0x120>)
 8002966:	701a      	strb	r2, [r3, #0]

	  strSize = sprintf((char*)buffer,"Kalibrasi heading done\r\n");
 8002968:	4a21      	ldr	r2, [pc, #132]	; (80029f0 <IMUInit+0x124>)
 800296a:	4b26      	ldr	r3, [pc, #152]	; (8002a04 <IMUInit+0x138>)
 800296c:	4615      	mov	r5, r2
 800296e:	461c      	mov	r4, r3
 8002970:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002972:	6028      	str	r0, [r5, #0]
 8002974:	6069      	str	r1, [r5, #4]
 8002976:	60aa      	str	r2, [r5, #8]
 8002978:	60eb      	str	r3, [r5, #12]
 800297a:	cc03      	ldmia	r4!, {r0, r1}
 800297c:	6128      	str	r0, [r5, #16]
 800297e:	6169      	str	r1, [r5, #20]
 8002980:	7823      	ldrb	r3, [r4, #0]
 8002982:	762b      	strb	r3, [r5, #24]
 8002984:	2318      	movs	r3, #24
 8002986:	b29a      	uxth	r2, r3
 8002988:	4b1b      	ldr	r3, [pc, #108]	; (80029f8 <IMUInit+0x12c>)
 800298a:	801a      	strh	r2, [r3, #0]
	  huart3Status = HAL_UART_Transmit(&huart3, buffer, strSize, 100);
 800298c:	4b1a      	ldr	r3, [pc, #104]	; (80029f8 <IMUInit+0x12c>)
 800298e:	881a      	ldrh	r2, [r3, #0]
 8002990:	2364      	movs	r3, #100	; 0x64
 8002992:	4917      	ldr	r1, [pc, #92]	; (80029f0 <IMUInit+0x124>)
 8002994:	4819      	ldr	r0, [pc, #100]	; (80029fc <IMUInit+0x130>)
 8002996:	f004 fb00 	bl	8006f9a <HAL_UART_Transmit>
 800299a:	4603      	mov	r3, r0
 800299c:	461a      	mov	r2, r3
 800299e:	4b18      	ldr	r3, [pc, #96]	; (8002a00 <IMUInit+0x134>)
 80029a0:	701a      	strb	r2, [r3, #0]

	  //Konfigurasi Output ASCII
	  HAL_Delay(100);
 80029a2:	2064      	movs	r0, #100	; 0x64
 80029a4:	f000 fe7e 	bl	80036a4 <HAL_Delay>
	  huart2Status = HAL_UART_Transmit(&huart2, (u_char*)0xA5, 1, 10);
 80029a8:	230a      	movs	r3, #10
 80029aa:	2201      	movs	r2, #1
 80029ac:	21a5      	movs	r1, #165	; 0xa5
 80029ae:	480e      	ldr	r0, [pc, #56]	; (80029e8 <IMUInit+0x11c>)
 80029b0:	f004 faf3 	bl	8006f9a <HAL_UART_Transmit>
 80029b4:	4603      	mov	r3, r0
 80029b6:	461a      	mov	r2, r3
 80029b8:	4b0c      	ldr	r3, [pc, #48]	; (80029ec <IMUInit+0x120>)
 80029ba:	701a      	strb	r2, [r3, #0]
	  huart2Status = HAL_UART_Transmit(&huart2, (u_char*)0x52, 1, 10);
 80029bc:	230a      	movs	r3, #10
 80029be:	2201      	movs	r2, #1
 80029c0:	2152      	movs	r1, #82	; 0x52
 80029c2:	4809      	ldr	r0, [pc, #36]	; (80029e8 <IMUInit+0x11c>)
 80029c4:	f004 fae9 	bl	8006f9a <HAL_UART_Transmit>
 80029c8:	4603      	mov	r3, r0
 80029ca:	461a      	mov	r2, r3
 80029cc:	4b07      	ldr	r3, [pc, #28]	; (80029ec <IMUInit+0x120>)
 80029ce:	701a      	strb	r2, [r3, #0]

	  huart2Status = HAL_UART_Receive_DMA(&huart2, IMUBuffer, 16);
 80029d0:	2210      	movs	r2, #16
 80029d2:	490d      	ldr	r1, [pc, #52]	; (8002a08 <IMUInit+0x13c>)
 80029d4:	4804      	ldr	r0, [pc, #16]	; (80029e8 <IMUInit+0x11c>)
 80029d6:	f004 fb79 	bl	80070cc <HAL_UART_Receive_DMA>
 80029da:	4603      	mov	r3, r0
 80029dc:	461a      	mov	r2, r3
 80029de:	4b03      	ldr	r3, [pc, #12]	; (80029ec <IMUInit+0x120>)
 80029e0:	701a      	strb	r2, [r3, #0]
}
 80029e2:	bf00      	nop
 80029e4:	bdb0      	pop	{r4, r5, r7, pc}
 80029e6:	bf00      	nop
 80029e8:	20000798 	.word	0x20000798
 80029ec:	20000368 	.word	0x20000368
 80029f0:	20000608 	.word	0x20000608
 80029f4:	0800ad98 	.word	0x0800ad98
 80029f8:	200007f8 	.word	0x200007f8
 80029fc:	2000036c 	.word	0x2000036c
 8002a00:	200003ac 	.word	0x200003ac
 8002a04:	0800adb0 	.word	0x0800adb0
 8002a08:	20000754 	.word	0x20000754

08002a0c <setPWM_DATA>:

void setPWM_DATA(TIM_HandleTypeDef *htim, uint32_t channel, struct PWM_DATA* PWM_Data){
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
	if(PWM_Data->onRisingEdge && !PWM_Data->onFallingEdge){
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	7c1b      	ldrb	r3, [r3, #16]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d06c      	beq.n	8002afa <setPWM_DATA+0xee>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	7c5b      	ldrb	r3, [r3, #17]
 8002a24:	f083 0301 	eor.w	r3, r3, #1
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d065      	beq.n	8002afa <setPWM_DATA+0xee>
		PWM_Data->onRisingEdge = false;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	741a      	strb	r2, [r3, #16]
		PWM_Data->onFallingEdge = true;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	745a      	strb	r2, [r3, #17]
		PWM_Data->RisingEdgeVal = HAL_TIM_ReadCapturedValue(htim, channel);
 8002a3a:	68b9      	ldr	r1, [r7, #8]
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f003 fd33 	bl	80064a8 <HAL_TIM_ReadCapturedValue>
 8002a42:	4602      	mov	r2, r0
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, channel, TIM_INPUTCHANNELPOLARITY_FALLING);
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d108      	bne.n	8002a60 <setPWM_DATA+0x54>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6a1a      	ldr	r2, [r3, #32]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f022 020a 	bic.w	r2, r2, #10
 8002a5c:	621a      	str	r2, [r3, #32]
 8002a5e:	e01f      	b.n	8002aa0 <setPWM_DATA+0x94>
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	2b04      	cmp	r3, #4
 8002a64:	d108      	bne.n	8002a78 <setPWM_DATA+0x6c>
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	6a1a      	ldr	r2, [r3, #32]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a74:	621a      	str	r2, [r3, #32]
 8002a76:	e013      	b.n	8002aa0 <setPWM_DATA+0x94>
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	2b08      	cmp	r3, #8
 8002a7c:	d108      	bne.n	8002a90 <setPWM_DATA+0x84>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	6a1a      	ldr	r2, [r3, #32]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8002a8c:	621a      	str	r2, [r3, #32]
 8002a8e:	e007      	b.n	8002aa0 <setPWM_DATA+0x94>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6a1a      	ldr	r2, [r3, #32]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 8002a9e:	621a      	str	r2, [r3, #32]
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d108      	bne.n	8002ab8 <setPWM_DATA+0xac>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	6a1a      	ldr	r2, [r3, #32]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f042 0202 	orr.w	r2, r2, #2
 8002ab4:	621a      	str	r2, [r3, #32]
 8002ab6:	e088      	b.n	8002bca <setPWM_DATA+0x1be>
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	2b04      	cmp	r3, #4
 8002abc:	d108      	bne.n	8002ad0 <setPWM_DATA+0xc4>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	6a1a      	ldr	r2, [r3, #32]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f042 0220 	orr.w	r2, r2, #32
 8002acc:	621a      	str	r2, [r3, #32]
 8002ace:	e07c      	b.n	8002bca <setPWM_DATA+0x1be>
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	2b08      	cmp	r3, #8
 8002ad4:	d108      	bne.n	8002ae8 <setPWM_DATA+0xdc>
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	6a1a      	ldr	r2, [r3, #32]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ae4:	621a      	str	r2, [r3, #32]
 8002ae6:	e070      	b.n	8002bca <setPWM_DATA+0x1be>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	6a1a      	ldr	r2, [r3, #32]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002af6:	621a      	str	r2, [r3, #32]
 8002af8:	e067      	b.n	8002bca <setPWM_DATA+0x1be>

	} else if(PWM_Data->onFallingEdge && !PWM_Data->onRisingEdge) {
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	7c5b      	ldrb	r3, [r3, #17]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d063      	beq.n	8002bca <setPWM_DATA+0x1be>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	7c1b      	ldrb	r3, [r3, #16]
 8002b06:	f083 0301 	eor.w	r3, r3, #1
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d05c      	beq.n	8002bca <setPWM_DATA+0x1be>
		PWM_Data->onFallingEdge = false;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	745a      	strb	r2, [r3, #17]
		PWM_Data->onRisingEdge =  true;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	741a      	strb	r2, [r3, #16]
		PWM_Data->FallingEdgeVal = HAL_TIM_ReadCapturedValue(htim, channel);
 8002b1c:	68b9      	ldr	r1, [r7, #8]
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f003 fcc2 	bl	80064a8 <HAL_TIM_ReadCapturedValue>
 8002b24:	4602      	mov	r2, r0
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	605a      	str	r2, [r3, #4]
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, channel, TIM_INPUTCHANNELPOLARITY_RISING);
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d108      	bne.n	8002b42 <setPWM_DATA+0x136>
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6a1a      	ldr	r2, [r3, #32]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 020a 	bic.w	r2, r2, #10
 8002b3e:	621a      	str	r2, [r3, #32]
 8002b40:	e01f      	b.n	8002b82 <setPWM_DATA+0x176>
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	2b04      	cmp	r3, #4
 8002b46:	d108      	bne.n	8002b5a <setPWM_DATA+0x14e>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	6a1a      	ldr	r2, [r3, #32]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002b56:	621a      	str	r2, [r3, #32]
 8002b58:	e013      	b.n	8002b82 <setPWM_DATA+0x176>
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	2b08      	cmp	r3, #8
 8002b5e:	d108      	bne.n	8002b72 <setPWM_DATA+0x166>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	6a1a      	ldr	r2, [r3, #32]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8002b6e:	621a      	str	r2, [r3, #32]
 8002b70:	e007      	b.n	8002b82 <setPWM_DATA+0x176>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	6a1a      	ldr	r2, [r3, #32]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 8002b80:	621a      	str	r2, [r3, #32]
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d106      	bne.n	8002b96 <setPWM_DATA+0x18a>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6a12      	ldr	r2, [r2, #32]
 8002b92:	621a      	str	r2, [r3, #32]
 8002b94:	e019      	b.n	8002bca <setPWM_DATA+0x1be>
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	2b04      	cmp	r3, #4
 8002b9a:	d106      	bne.n	8002baa <setPWM_DATA+0x19e>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6a12      	ldr	r2, [r2, #32]
 8002ba6:	621a      	str	r2, [r3, #32]
 8002ba8:	e00f      	b.n	8002bca <setPWM_DATA+0x1be>
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	2b08      	cmp	r3, #8
 8002bae:	d106      	bne.n	8002bbe <setPWM_DATA+0x1b2>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6a12      	ldr	r2, [r2, #32]
 8002bba:	621a      	str	r2, [r3, #32]
 8002bbc:	e005      	b.n	8002bca <setPWM_DATA+0x1be>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	6a12      	ldr	r2, [r2, #32]
 8002bc8:	621a      	str	r2, [r3, #32]
	}

	if(PWM_Data->FallingEdgeVal > PWM_Data->RisingEdgeVal){
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685a      	ldr	r2, [r3, #4]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d90c      	bls.n	8002bf0 <setPWM_DATA+0x1e4>
		PWM_Data->DutyCycleVal = PWM_Data->FallingEdgeVal - PWM_Data->RisingEdgeVal;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685a      	ldr	r2, [r3, #4]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	1ad2      	subs	r2, r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	609a      	str	r2, [r3, #8]
		PWM_Data->FallingEdgeVal = 0;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	605a      	str	r2, [r3, #4]
		PWM_Data->RisingEdgeVal = 0;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]
	}
}
 8002bf0:	bf00      	nop
 8002bf2:	3710      	adds	r7, #16
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <HAL_UART_RxCpltCallback>:

uint32_t map(uint32_t x, uint32_t in_min, uint32_t in_max, uint32_t out_min, uint32_t out_max) {
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
  //HAL_UART_Transmit(&huart3, RxBuffer, 8, 100);
  if(huart->Instance == USART2 && IMUDataStatus == 0) IMUDataStatus = 1;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a0e      	ldr	r2, [pc, #56]	; (8002c40 <HAL_UART_RxCpltCallback+0x48>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d107      	bne.n	8002c1a <HAL_UART_RxCpltCallback+0x22>
 8002c0a:	4b0e      	ldr	r3, [pc, #56]	; (8002c44 <HAL_UART_RxCpltCallback+0x4c>)
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d103      	bne.n	8002c1a <HAL_UART_RxCpltCallback+0x22>
 8002c12:	4b0c      	ldr	r3, [pc, #48]	; (8002c44 <HAL_UART_RxCpltCallback+0x4c>)
 8002c14:	2201      	movs	r2, #1
 8002c16:	701a      	strb	r2, [r3, #0]
  else if(huart->Instance == UART4 && GPSDataStatus == 0){
	  GPSDataStatus = 1;
  }

}
 8002c18:	e00b      	b.n	8002c32 <HAL_UART_RxCpltCallback+0x3a>
  else if(huart->Instance == UART4 && GPSDataStatus == 0){
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a0a      	ldr	r2, [pc, #40]	; (8002c48 <HAL_UART_RxCpltCallback+0x50>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d106      	bne.n	8002c32 <HAL_UART_RxCpltCallback+0x3a>
 8002c24:	4b09      	ldr	r3, [pc, #36]	; (8002c4c <HAL_UART_RxCpltCallback+0x54>)
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d102      	bne.n	8002c32 <HAL_UART_RxCpltCallback+0x3a>
	  GPSDataStatus = 1;
 8002c2c:	4b07      	ldr	r3, [pc, #28]	; (8002c4c <HAL_UART_RxCpltCallback+0x54>)
 8002c2e:	2201      	movs	r2, #1
 8002c30:	701a      	strb	r2, [r3, #0]
}
 8002c32:	bf00      	nop
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	40004400 	.word	0x40004400
 8002c44:	20000201 	.word	0x20000201
 8002c48:	40004c00 	.word	0x40004c00
 8002c4c:	20000200 	.word	0x20000200

08002c50 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c60:	d126      	bne.n	8002cb0 <HAL_TIM_IC_CaptureCallback+0x60>
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	7f1b      	ldrb	r3, [r3, #28]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d105      	bne.n	8002c76 <HAL_TIM_IC_CaptureCallback+0x26>
			setPWM_DATA(htim, TIM_CHANNEL_1, &PWM_CH1);
 8002c6a:	4a13      	ldr	r2, [pc, #76]	; (8002cb8 <HAL_TIM_IC_CaptureCallback+0x68>)
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7ff fecc 	bl	8002a0c <setPWM_DATA>
		} else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) {
			setPWM_DATA(htim, TIM_CHANNEL_4, &PWM_CH4);
		}
	}

}
 8002c74:	e01c      	b.n	8002cb0 <HAL_TIM_IC_CaptureCallback+0x60>
		} else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2){
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	7f1b      	ldrb	r3, [r3, #28]
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d105      	bne.n	8002c8a <HAL_TIM_IC_CaptureCallback+0x3a>
			setPWM_DATA(htim, TIM_CHANNEL_2, &PWM_CH2);
 8002c7e:	4a0f      	ldr	r2, [pc, #60]	; (8002cbc <HAL_TIM_IC_CaptureCallback+0x6c>)
 8002c80:	2104      	movs	r1, #4
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f7ff fec2 	bl	8002a0c <setPWM_DATA>
}
 8002c88:	e012      	b.n	8002cb0 <HAL_TIM_IC_CaptureCallback+0x60>
		} else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3){
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	7f1b      	ldrb	r3, [r3, #28]
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	d105      	bne.n	8002c9e <HAL_TIM_IC_CaptureCallback+0x4e>
			setPWM_DATA(htim, TIM_CHANNEL_3, &PWM_CH3);
 8002c92:	4a0b      	ldr	r2, [pc, #44]	; (8002cc0 <HAL_TIM_IC_CaptureCallback+0x70>)
 8002c94:	2108      	movs	r1, #8
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f7ff feb8 	bl	8002a0c <setPWM_DATA>
}
 8002c9c:	e008      	b.n	8002cb0 <HAL_TIM_IC_CaptureCallback+0x60>
		} else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) {
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	7f1b      	ldrb	r3, [r3, #28]
 8002ca2:	2b08      	cmp	r3, #8
 8002ca4:	d104      	bne.n	8002cb0 <HAL_TIM_IC_CaptureCallback+0x60>
			setPWM_DATA(htim, TIM_CHANNEL_4, &PWM_CH4);
 8002ca6:	4a07      	ldr	r2, [pc, #28]	; (8002cc4 <HAL_TIM_IC_CaptureCallback+0x74>)
 8002ca8:	210c      	movs	r1, #12
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f7ff feae 	bl	8002a0c <setPWM_DATA>
}
 8002cb0:	bf00      	nop
 8002cb2:	3708      	adds	r7, #8
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	20000418 	.word	0x20000418
 8002cbc:	200003b0 	.word	0x200003b0
 8002cc0:	200007e4 	.word	0x200007e4
 8002cc4:	200005b0 	.word	0x200005b0

08002cc8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002cc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002ccc:	b089      	sub	sp, #36	; 0x24
 8002cce:	af04      	add	r7, sp, #16
 8002cd0:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM4){
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a52      	ldr	r2, [pc, #328]	; (8002e20 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	f040 809c 	bne.w	8002e16 <HAL_TIM_PeriodElapsedCallback+0x14e>
		  while(!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)){
 8002cde:	e022      	b.n	8002d26 <HAL_TIM_PeriodElapsedCallback+0x5e>
				  strSize = sprintf((char*)buffer, "Temperature/pressure reading failed\r\n");
 8002ce0:	4b50      	ldr	r3, [pc, #320]	; (8002e24 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002ce2:	4a51      	ldr	r2, [pc, #324]	; (8002e28 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8002ce4:	4614      	mov	r4, r2
 8002ce6:	469c      	mov	ip, r3
 8002ce8:	f104 0e20 	add.w	lr, r4, #32
 8002cec:	4665      	mov	r5, ip
 8002cee:	4626      	mov	r6, r4
 8002cf0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002cf2:	6028      	str	r0, [r5, #0]
 8002cf4:	6069      	str	r1, [r5, #4]
 8002cf6:	60aa      	str	r2, [r5, #8]
 8002cf8:	60eb      	str	r3, [r5, #12]
 8002cfa:	3410      	adds	r4, #16
 8002cfc:	f10c 0c10 	add.w	ip, ip, #16
 8002d00:	4574      	cmp	r4, lr
 8002d02:	d1f3      	bne.n	8002cec <HAL_TIM_PeriodElapsedCallback+0x24>
 8002d04:	4663      	mov	r3, ip
 8002d06:	4622      	mov	r2, r4
 8002d08:	6810      	ldr	r0, [r2, #0]
 8002d0a:	6018      	str	r0, [r3, #0]
 8002d0c:	8892      	ldrh	r2, [r2, #4]
 8002d0e:	809a      	strh	r2, [r3, #4]
 8002d10:	2325      	movs	r3, #37	; 0x25
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	4b45      	ldr	r3, [pc, #276]	; (8002e2c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002d16:	801a      	strh	r2, [r3, #0]
				  HAL_UART_Transmit(&huart3, buffer, strSize, 100);
 8002d18:	4b44      	ldr	r3, [pc, #272]	; (8002e2c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002d1a:	881a      	ldrh	r2, [r3, #0]
 8002d1c:	2364      	movs	r3, #100	; 0x64
 8002d1e:	4941      	ldr	r1, [pc, #260]	; (8002e24 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002d20:	4843      	ldr	r0, [pc, #268]	; (8002e30 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002d22:	f004 f93a 	bl	8006f9a <HAL_UART_Transmit>
		  while(!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)){
 8002d26:	4b43      	ldr	r3, [pc, #268]	; (8002e34 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002d28:	4a43      	ldr	r2, [pc, #268]	; (8002e38 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8002d2a:	4944      	ldr	r1, [pc, #272]	; (8002e3c <HAL_TIM_PeriodElapsedCallback+0x174>)
 8002d2c:	4844      	ldr	r0, [pc, #272]	; (8002e40 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8002d2e:	f7fe fe3b 	bl	80019a8 <bmp280_read_float>
 8002d32:	4603      	mov	r3, r0
 8002d34:	f083 0301 	eor.w	r3, r3, #1
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1d0      	bne.n	8002ce0 <HAL_TIM_PeriodElapsedCallback+0x18>
			  }

			  float altitude = bmp280_read_altitude(pressure / 100, pressureRef / 100);
 8002d3e:	4b3e      	ldr	r3, [pc, #248]	; (8002e38 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8002d40:	edd3 7a00 	vldr	s15, [r3]
 8002d44:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8002e44 <HAL_TIM_PeriodElapsedCallback+0x17c>
 8002d48:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002d4c:	4b3e      	ldr	r3, [pc, #248]	; (8002e48 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002d4e:	edd3 7a00 	vldr	s15, [r3]
 8002d52:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8002e44 <HAL_TIM_PeriodElapsedCallback+0x17c>
 8002d56:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8002d5a:	eef0 0a46 	vmov.f32	s1, s12
 8002d5e:	eeb0 0a66 	vmov.f32	s0, s13
 8002d62:	f7fe fe6d 	bl	8001a40 <bmp280_read_altitude>
 8002d66:	ed87 0a03 	vstr	s0, [r7, #12]
			  strSize = sprintf((char*)buffer, "Pressure: %.2f Pa, Temperature: %.2f C, Altitude: %.2f m, ", pressure, temperature, altitude);
 8002d6a:	4b33      	ldr	r3, [pc, #204]	; (8002e38 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7fd fbfa 	bl	8000568 <__aeabi_f2d>
 8002d74:	4680      	mov	r8, r0
 8002d76:	4689      	mov	r9, r1
 8002d78:	4b30      	ldr	r3, [pc, #192]	; (8002e3c <HAL_TIM_PeriodElapsedCallback+0x174>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7fd fbf3 	bl	8000568 <__aeabi_f2d>
 8002d82:	4604      	mov	r4, r0
 8002d84:	460d      	mov	r5, r1
 8002d86:	68f8      	ldr	r0, [r7, #12]
 8002d88:	f7fd fbee 	bl	8000568 <__aeabi_f2d>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	460b      	mov	r3, r1
 8002d90:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002d94:	e9cd 4500 	strd	r4, r5, [sp]
 8002d98:	4642      	mov	r2, r8
 8002d9a:	464b      	mov	r3, r9
 8002d9c:	492b      	ldr	r1, [pc, #172]	; (8002e4c <HAL_TIM_PeriodElapsedCallback+0x184>)
 8002d9e:	4821      	ldr	r0, [pc, #132]	; (8002e24 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002da0:	f005 fc08 	bl	80085b4 <siprintf>
 8002da4:	4603      	mov	r3, r0
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	4b20      	ldr	r3, [pc, #128]	; (8002e2c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002daa:	801a      	strh	r2, [r3, #0]
			  HAL_UART_Transmit(&huart3, buffer, strSize, 100);
 8002dac:	4b1f      	ldr	r3, [pc, #124]	; (8002e2c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002dae:	881a      	ldrh	r2, [r3, #0]
 8002db0:	2364      	movs	r3, #100	; 0x64
 8002db2:	491c      	ldr	r1, [pc, #112]	; (8002e24 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002db4:	481e      	ldr	r0, [pc, #120]	; (8002e30 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002db6:	f004 f8f0 	bl	8006f9a <HAL_UART_Transmit>

			  if(bme280p){
 8002dba:	4b25      	ldr	r3, [pc, #148]	; (8002e50 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d018      	beq.n	8002df4 <HAL_TIM_PeriodElapsedCallback+0x12c>
				  strSize = sprintf((char *)buffer,", Humidity: %.2f\r\n", humidity);
 8002dc2:	4b1c      	ldr	r3, [pc, #112]	; (8002e34 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7fd fbce 	bl	8000568 <__aeabi_f2d>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	460c      	mov	r4, r1
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	4623      	mov	r3, r4
 8002dd4:	491f      	ldr	r1, [pc, #124]	; (8002e54 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002dd6:	4813      	ldr	r0, [pc, #76]	; (8002e24 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002dd8:	f005 fbec 	bl	80085b4 <siprintf>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	4b12      	ldr	r3, [pc, #72]	; (8002e2c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002de2:	801a      	strh	r2, [r3, #0]
				  HAL_UART_Transmit(&huart3, buffer, strSize, 100);
 8002de4:	4b11      	ldr	r3, [pc, #68]	; (8002e2c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002de6:	881a      	ldrh	r2, [r3, #0]
 8002de8:	2364      	movs	r3, #100	; 0x64
 8002dea:	490e      	ldr	r1, [pc, #56]	; (8002e24 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002dec:	4810      	ldr	r0, [pc, #64]	; (8002e30 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002dee:	f004 f8d4 	bl	8006f9a <HAL_UART_Transmit>
			  } else {
				  strSize = sprintf((char *)buffer, "\r\n");
				  HAL_UART_Transmit(&huart3, buffer, strSize, 100);
			  }
	}
}
 8002df2:	e010      	b.n	8002e16 <HAL_TIM_PeriodElapsedCallback+0x14e>
				  strSize = sprintf((char *)buffer, "\r\n");
 8002df4:	4b0b      	ldr	r3, [pc, #44]	; (8002e24 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002df6:	4a18      	ldr	r2, [pc, #96]	; (8002e58 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002df8:	8811      	ldrh	r1, [r2, #0]
 8002dfa:	7892      	ldrb	r2, [r2, #2]
 8002dfc:	8019      	strh	r1, [r3, #0]
 8002dfe:	709a      	strb	r2, [r3, #2]
 8002e00:	2302      	movs	r3, #2
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	4b09      	ldr	r3, [pc, #36]	; (8002e2c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002e06:	801a      	strh	r2, [r3, #0]
				  HAL_UART_Transmit(&huart3, buffer, strSize, 100);
 8002e08:	4b08      	ldr	r3, [pc, #32]	; (8002e2c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002e0a:	881a      	ldrh	r2, [r3, #0]
 8002e0c:	2364      	movs	r3, #100	; 0x64
 8002e0e:	4905      	ldr	r1, [pc, #20]	; (8002e24 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002e10:	4807      	ldr	r0, [pc, #28]	; (8002e30 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002e12:	f004 f8c2 	bl	8006f9a <HAL_UART_Transmit>
}
 8002e16:	bf00      	nop
 8002e18:	3714      	adds	r7, #20
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002e20:	40000800 	.word	0x40000800
 8002e24:	20000608 	.word	0x20000608
 8002e28:	0800adcc 	.word	0x0800adcc
 8002e2c:	200007f8 	.word	0x200007f8
 8002e30:	2000036c 	.word	0x2000036c
 8002e34:	200005c4 	.word	0x200005c4
 8002e38:	200005ac 	.word	0x200005ac
 8002e3c:	20000558 	.word	0x20000558
 8002e40:	20000764 	.word	0x20000764
 8002e44:	42c80000 	.word	0x42c80000
 8002e48:	20000204 	.word	0x20000204
 8002e4c:	0800adf4 	.word	0x0800adf4
 8002e50:	200005a8 	.word	0x200005a8
 8002e54:	0800ae30 	.word	0x0800ae30
 8002e58:	0800ae44 	.word	0x0800ae44

08002e5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002e60:	bf00      	nop
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
	...

08002e6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e72:	2300      	movs	r3, #0
 8002e74:	607b      	str	r3, [r7, #4]
 8002e76:	4b10      	ldr	r3, [pc, #64]	; (8002eb8 <HAL_MspInit+0x4c>)
 8002e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7a:	4a0f      	ldr	r2, [pc, #60]	; (8002eb8 <HAL_MspInit+0x4c>)
 8002e7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e80:	6453      	str	r3, [r2, #68]	; 0x44
 8002e82:	4b0d      	ldr	r3, [pc, #52]	; (8002eb8 <HAL_MspInit+0x4c>)
 8002e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e8a:	607b      	str	r3, [r7, #4]
 8002e8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e8e:	2300      	movs	r3, #0
 8002e90:	603b      	str	r3, [r7, #0]
 8002e92:	4b09      	ldr	r3, [pc, #36]	; (8002eb8 <HAL_MspInit+0x4c>)
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	4a08      	ldr	r2, [pc, #32]	; (8002eb8 <HAL_MspInit+0x4c>)
 8002e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e9e:	4b06      	ldr	r3, [pc, #24]	; (8002eb8 <HAL_MspInit+0x4c>)
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ea6:	603b      	str	r3, [r7, #0]
 8002ea8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002eaa:	bf00      	nop
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	40023800 	.word	0x40023800

08002ebc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b08c      	sub	sp, #48	; 0x30
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ec4:	f107 031c 	add.w	r3, r7, #28
 8002ec8:	2200      	movs	r2, #0
 8002eca:	601a      	str	r2, [r3, #0]
 8002ecc:	605a      	str	r2, [r3, #4]
 8002ece:	609a      	str	r2, [r3, #8]
 8002ed0:	60da      	str	r2, [r3, #12]
 8002ed2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a42      	ldr	r2, [pc, #264]	; (8002fe4 <HAL_I2C_MspInit+0x128>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d12d      	bne.n	8002f3a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ede:	2300      	movs	r3, #0
 8002ee0:	61bb      	str	r3, [r7, #24]
 8002ee2:	4b41      	ldr	r3, [pc, #260]	; (8002fe8 <HAL_I2C_MspInit+0x12c>)
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee6:	4a40      	ldr	r2, [pc, #256]	; (8002fe8 <HAL_I2C_MspInit+0x12c>)
 8002ee8:	f043 0302 	orr.w	r3, r3, #2
 8002eec:	6313      	str	r3, [r2, #48]	; 0x30
 8002eee:	4b3e      	ldr	r3, [pc, #248]	; (8002fe8 <HAL_I2C_MspInit+0x12c>)
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	61bb      	str	r3, [r7, #24]
 8002ef8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8002efa:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002efe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f00:	2312      	movs	r3, #18
 8002f02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f04:	2301      	movs	r3, #1
 8002f06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002f0c:	2304      	movs	r3, #4
 8002f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f10:	f107 031c 	add.w	r3, r7, #28
 8002f14:	4619      	mov	r1, r3
 8002f16:	4835      	ldr	r0, [pc, #212]	; (8002fec <HAL_I2C_MspInit+0x130>)
 8002f18:	f001 f866 	bl	8003fe8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	617b      	str	r3, [r7, #20]
 8002f20:	4b31      	ldr	r3, [pc, #196]	; (8002fe8 <HAL_I2C_MspInit+0x12c>)
 8002f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f24:	4a30      	ldr	r2, [pc, #192]	; (8002fe8 <HAL_I2C_MspInit+0x12c>)
 8002f26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f2a:	6413      	str	r3, [r2, #64]	; 0x40
 8002f2c:	4b2e      	ldr	r3, [pc, #184]	; (8002fe8 <HAL_I2C_MspInit+0x12c>)
 8002f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f34:	617b      	str	r3, [r7, #20]
 8002f36:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002f38:	e050      	b.n	8002fdc <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a2c      	ldr	r2, [pc, #176]	; (8002ff0 <HAL_I2C_MspInit+0x134>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d14b      	bne.n	8002fdc <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f44:	2300      	movs	r3, #0
 8002f46:	613b      	str	r3, [r7, #16]
 8002f48:	4b27      	ldr	r3, [pc, #156]	; (8002fe8 <HAL_I2C_MspInit+0x12c>)
 8002f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4c:	4a26      	ldr	r2, [pc, #152]	; (8002fe8 <HAL_I2C_MspInit+0x12c>)
 8002f4e:	f043 0304 	orr.w	r3, r3, #4
 8002f52:	6313      	str	r3, [r2, #48]	; 0x30
 8002f54:	4b24      	ldr	r3, [pc, #144]	; (8002fe8 <HAL_I2C_MspInit+0x12c>)
 8002f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f58:	f003 0304 	and.w	r3, r3, #4
 8002f5c:	613b      	str	r3, [r7, #16]
 8002f5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f60:	2300      	movs	r3, #0
 8002f62:	60fb      	str	r3, [r7, #12]
 8002f64:	4b20      	ldr	r3, [pc, #128]	; (8002fe8 <HAL_I2C_MspInit+0x12c>)
 8002f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f68:	4a1f      	ldr	r2, [pc, #124]	; (8002fe8 <HAL_I2C_MspInit+0x12c>)
 8002f6a:	f043 0301 	orr.w	r3, r3, #1
 8002f6e:	6313      	str	r3, [r2, #48]	; 0x30
 8002f70:	4b1d      	ldr	r3, [pc, #116]	; (8002fe8 <HAL_I2C_MspInit+0x12c>)
 8002f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f74:	f003 0301 	and.w	r3, r3, #1
 8002f78:	60fb      	str	r3, [r7, #12]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002f7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f82:	2312      	movs	r3, #18
 8002f84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f86:	2301      	movs	r3, #1
 8002f88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002f8e:	2304      	movs	r3, #4
 8002f90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f92:	f107 031c 	add.w	r3, r7, #28
 8002f96:	4619      	mov	r1, r3
 8002f98:	4816      	ldr	r0, [pc, #88]	; (8002ff4 <HAL_I2C_MspInit+0x138>)
 8002f9a:	f001 f825 	bl	8003fe8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002f9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fa4:	2312      	movs	r3, #18
 8002fa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fac:	2303      	movs	r3, #3
 8002fae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002fb0:	2304      	movs	r3, #4
 8002fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fb4:	f107 031c 	add.w	r3, r7, #28
 8002fb8:	4619      	mov	r1, r3
 8002fba:	480f      	ldr	r0, [pc, #60]	; (8002ff8 <HAL_I2C_MspInit+0x13c>)
 8002fbc:	f001 f814 	bl	8003fe8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	60bb      	str	r3, [r7, #8]
 8002fc4:	4b08      	ldr	r3, [pc, #32]	; (8002fe8 <HAL_I2C_MspInit+0x12c>)
 8002fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc8:	4a07      	ldr	r2, [pc, #28]	; (8002fe8 <HAL_I2C_MspInit+0x12c>)
 8002fca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002fce:	6413      	str	r3, [r2, #64]	; 0x40
 8002fd0:	4b05      	ldr	r3, [pc, #20]	; (8002fe8 <HAL_I2C_MspInit+0x12c>)
 8002fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fd8:	60bb      	str	r3, [r7, #8]
 8002fda:	68bb      	ldr	r3, [r7, #8]
}
 8002fdc:	bf00      	nop
 8002fde:	3730      	adds	r7, #48	; 0x30
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	40005400 	.word	0x40005400
 8002fe8:	40023800 	.word	0x40023800
 8002fec:	40020400 	.word	0x40020400
 8002ff0:	40005c00 	.word	0x40005c00
 8002ff4:	40020800 	.word	0x40020800
 8002ff8:	40020000 	.word	0x40020000

08002ffc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b08c      	sub	sp, #48	; 0x30
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003004:	f107 031c 	add.w	r3, r7, #28
 8003008:	2200      	movs	r2, #0
 800300a:	601a      	str	r2, [r3, #0]
 800300c:	605a      	str	r2, [r3, #4]
 800300e:	609a      	str	r2, [r3, #8]
 8003010:	60da      	str	r2, [r3, #12]
 8003012:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800301c:	d134      	bne.n	8003088 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800301e:	2300      	movs	r3, #0
 8003020:	61bb      	str	r3, [r7, #24]
 8003022:	4b37      	ldr	r3, [pc, #220]	; (8003100 <HAL_TIM_Base_MspInit+0x104>)
 8003024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003026:	4a36      	ldr	r2, [pc, #216]	; (8003100 <HAL_TIM_Base_MspInit+0x104>)
 8003028:	f043 0301 	orr.w	r3, r3, #1
 800302c:	6413      	str	r3, [r2, #64]	; 0x40
 800302e:	4b34      	ldr	r3, [pc, #208]	; (8003100 <HAL_TIM_Base_MspInit+0x104>)
 8003030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	61bb      	str	r3, [r7, #24]
 8003038:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800303a:	2300      	movs	r3, #0
 800303c:	617b      	str	r3, [r7, #20]
 800303e:	4b30      	ldr	r3, [pc, #192]	; (8003100 <HAL_TIM_Base_MspInit+0x104>)
 8003040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003042:	4a2f      	ldr	r2, [pc, #188]	; (8003100 <HAL_TIM_Base_MspInit+0x104>)
 8003044:	f043 0301 	orr.w	r3, r3, #1
 8003048:	6313      	str	r3, [r2, #48]	; 0x30
 800304a:	4b2d      	ldr	r3, [pc, #180]	; (8003100 <HAL_TIM_Base_MspInit+0x104>)
 800304c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	617b      	str	r3, [r7, #20]
 8003054:	697b      	ldr	r3, [r7, #20]
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA5     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
 8003056:	232e      	movs	r3, #46	; 0x2e
 8003058:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800305a:	2302      	movs	r3, #2
 800305c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305e:	2300      	movs	r3, #0
 8003060:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003062:	2300      	movs	r3, #0
 8003064:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003066:	2301      	movs	r3, #1
 8003068:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800306a:	f107 031c 	add.w	r3, r7, #28
 800306e:	4619      	mov	r1, r3
 8003070:	4824      	ldr	r0, [pc, #144]	; (8003104 <HAL_TIM_Base_MspInit+0x108>)
 8003072:	f000 ffb9 	bl	8003fe8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003076:	2200      	movs	r2, #0
 8003078:	2100      	movs	r1, #0
 800307a:	201c      	movs	r0, #28
 800307c:	f000 fc0f 	bl	800389e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003080:	201c      	movs	r0, #28
 8003082:	f000 fc28 	bl	80038d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003086:	e036      	b.n	80030f6 <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM3)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a1e      	ldr	r2, [pc, #120]	; (8003108 <HAL_TIM_Base_MspInit+0x10c>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d116      	bne.n	80030c0 <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003092:	2300      	movs	r3, #0
 8003094:	613b      	str	r3, [r7, #16]
 8003096:	4b1a      	ldr	r3, [pc, #104]	; (8003100 <HAL_TIM_Base_MspInit+0x104>)
 8003098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309a:	4a19      	ldr	r2, [pc, #100]	; (8003100 <HAL_TIM_Base_MspInit+0x104>)
 800309c:	f043 0302 	orr.w	r3, r3, #2
 80030a0:	6413      	str	r3, [r2, #64]	; 0x40
 80030a2:	4b17      	ldr	r3, [pc, #92]	; (8003100 <HAL_TIM_Base_MspInit+0x104>)
 80030a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	613b      	str	r3, [r7, #16]
 80030ac:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80030ae:	2200      	movs	r2, #0
 80030b0:	2100      	movs	r1, #0
 80030b2:	201d      	movs	r0, #29
 80030b4:	f000 fbf3 	bl	800389e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80030b8:	201d      	movs	r0, #29
 80030ba:	f000 fc0c 	bl	80038d6 <HAL_NVIC_EnableIRQ>
}
 80030be:	e01a      	b.n	80030f6 <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM4)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a11      	ldr	r2, [pc, #68]	; (800310c <HAL_TIM_Base_MspInit+0x110>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d115      	bne.n	80030f6 <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80030ca:	2300      	movs	r3, #0
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	4b0c      	ldr	r3, [pc, #48]	; (8003100 <HAL_TIM_Base_MspInit+0x104>)
 80030d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d2:	4a0b      	ldr	r2, [pc, #44]	; (8003100 <HAL_TIM_Base_MspInit+0x104>)
 80030d4:	f043 0304 	orr.w	r3, r3, #4
 80030d8:	6413      	str	r3, [r2, #64]	; 0x40
 80030da:	4b09      	ldr	r3, [pc, #36]	; (8003100 <HAL_TIM_Base_MspInit+0x104>)
 80030dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030de:	f003 0304 	and.w	r3, r3, #4
 80030e2:	60fb      	str	r3, [r7, #12]
 80030e4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80030e6:	2200      	movs	r2, #0
 80030e8:	2100      	movs	r1, #0
 80030ea:	201e      	movs	r0, #30
 80030ec:	f000 fbd7 	bl	800389e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80030f0:	201e      	movs	r0, #30
 80030f2:	f000 fbf0 	bl	80038d6 <HAL_NVIC_EnableIRQ>
}
 80030f6:	bf00      	nop
 80030f8:	3730      	adds	r7, #48	; 0x30
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	40023800 	.word	0x40023800
 8003104:	40020000 	.word	0x40020000
 8003108:	40000400 	.word	0x40000400
 800310c:	40000800 	.word	0x40000800

08003110 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b088      	sub	sp, #32
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003118:	f107 030c 	add.w	r3, r7, #12
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]
 8003120:	605a      	str	r2, [r3, #4]
 8003122:	609a      	str	r2, [r3, #8]
 8003124:	60da      	str	r2, [r3, #12]
 8003126:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a12      	ldr	r2, [pc, #72]	; (8003178 <HAL_TIM_MspPostInit+0x68>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d11d      	bne.n	800316e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003132:	2300      	movs	r3, #0
 8003134:	60bb      	str	r3, [r7, #8]
 8003136:	4b11      	ldr	r3, [pc, #68]	; (800317c <HAL_TIM_MspPostInit+0x6c>)
 8003138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313a:	4a10      	ldr	r2, [pc, #64]	; (800317c <HAL_TIM_MspPostInit+0x6c>)
 800313c:	f043 0302 	orr.w	r3, r3, #2
 8003140:	6313      	str	r3, [r2, #48]	; 0x30
 8003142:	4b0e      	ldr	r3, [pc, #56]	; (800317c <HAL_TIM_MspPostInit+0x6c>)
 8003144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	60bb      	str	r3, [r7, #8]
 800314c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PB0     ------> TIM3_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800314e:	2301      	movs	r3, #1
 8003150:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003152:	2302      	movs	r3, #2
 8003154:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003156:	2300      	movs	r3, #0
 8003158:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800315a:	2300      	movs	r3, #0
 800315c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800315e:	2302      	movs	r3, #2
 8003160:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003162:	f107 030c 	add.w	r3, r7, #12
 8003166:	4619      	mov	r1, r3
 8003168:	4805      	ldr	r0, [pc, #20]	; (8003180 <HAL_TIM_MspPostInit+0x70>)
 800316a:	f000 ff3d 	bl	8003fe8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800316e:	bf00      	nop
 8003170:	3720      	adds	r7, #32
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	40000400 	.word	0x40000400
 800317c:	40023800 	.word	0x40023800
 8003180:	40020400 	.word	0x40020400

08003184 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b090      	sub	sp, #64	; 0x40
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800318c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003190:	2200      	movs	r2, #0
 8003192:	601a      	str	r2, [r3, #0]
 8003194:	605a      	str	r2, [r3, #4]
 8003196:	609a      	str	r2, [r3, #8]
 8003198:	60da      	str	r2, [r3, #12]
 800319a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a94      	ldr	r2, [pc, #592]	; (80033f4 <HAL_UART_MspInit+0x270>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d15c      	bne.n	8003260 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80031a6:	2300      	movs	r3, #0
 80031a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80031aa:	4b93      	ldr	r3, [pc, #588]	; (80033f8 <HAL_UART_MspInit+0x274>)
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	4a92      	ldr	r2, [pc, #584]	; (80033f8 <HAL_UART_MspInit+0x274>)
 80031b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80031b4:	6413      	str	r3, [r2, #64]	; 0x40
 80031b6:	4b90      	ldr	r3, [pc, #576]	; (80033f8 <HAL_UART_MspInit+0x274>)
 80031b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031be:	62bb      	str	r3, [r7, #40]	; 0x28
 80031c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031c2:	2300      	movs	r3, #0
 80031c4:	627b      	str	r3, [r7, #36]	; 0x24
 80031c6:	4b8c      	ldr	r3, [pc, #560]	; (80033f8 <HAL_UART_MspInit+0x274>)
 80031c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ca:	4a8b      	ldr	r2, [pc, #556]	; (80033f8 <HAL_UART_MspInit+0x274>)
 80031cc:	f043 0304 	orr.w	r3, r3, #4
 80031d0:	6313      	str	r3, [r2, #48]	; 0x30
 80031d2:	4b89      	ldr	r3, [pc, #548]	; (80033f8 <HAL_UART_MspInit+0x274>)
 80031d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d6:	f003 0304 	and.w	r3, r3, #4
 80031da:	627b      	str	r3, [r7, #36]	; 0x24
 80031dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration    
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80031de:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80031e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031e4:	2302      	movs	r3, #2
 80031e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031e8:	2301      	movs	r3, #1
 80031ea:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031ec:	2303      	movs	r3, #3
 80031ee:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80031f0:	2308      	movs	r3, #8
 80031f2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031f8:	4619      	mov	r1, r3
 80031fa:	4880      	ldr	r0, [pc, #512]	; (80033fc <HAL_UART_MspInit+0x278>)
 80031fc:	f000 fef4 	bl	8003fe8 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8003200:	4b7f      	ldr	r3, [pc, #508]	; (8003400 <HAL_UART_MspInit+0x27c>)
 8003202:	4a80      	ldr	r2, [pc, #512]	; (8003404 <HAL_UART_MspInit+0x280>)
 8003204:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8003206:	4b7e      	ldr	r3, [pc, #504]	; (8003400 <HAL_UART_MspInit+0x27c>)
 8003208:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800320c:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800320e:	4b7c      	ldr	r3, [pc, #496]	; (8003400 <HAL_UART_MspInit+0x27c>)
 8003210:	2200      	movs	r2, #0
 8003212:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003214:	4b7a      	ldr	r3, [pc, #488]	; (8003400 <HAL_UART_MspInit+0x27c>)
 8003216:	2200      	movs	r2, #0
 8003218:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800321a:	4b79      	ldr	r3, [pc, #484]	; (8003400 <HAL_UART_MspInit+0x27c>)
 800321c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003220:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003222:	4b77      	ldr	r3, [pc, #476]	; (8003400 <HAL_UART_MspInit+0x27c>)
 8003224:	2200      	movs	r2, #0
 8003226:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003228:	4b75      	ldr	r3, [pc, #468]	; (8003400 <HAL_UART_MspInit+0x27c>)
 800322a:	2200      	movs	r2, #0
 800322c:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 800322e:	4b74      	ldr	r3, [pc, #464]	; (8003400 <HAL_UART_MspInit+0x27c>)
 8003230:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003234:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003236:	4b72      	ldr	r3, [pc, #456]	; (8003400 <HAL_UART_MspInit+0x27c>)
 8003238:	2200      	movs	r2, #0
 800323a:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800323c:	4b70      	ldr	r3, [pc, #448]	; (8003400 <HAL_UART_MspInit+0x27c>)
 800323e:	2200      	movs	r2, #0
 8003240:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8003242:	486f      	ldr	r0, [pc, #444]	; (8003400 <HAL_UART_MspInit+0x27c>)
 8003244:	f000 fb62 	bl	800390c <HAL_DMA_Init>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800324e:	f7ff fe05 	bl	8002e5c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a6a      	ldr	r2, [pc, #424]	; (8003400 <HAL_UART_MspInit+0x27c>)
 8003256:	635a      	str	r2, [r3, #52]	; 0x34
 8003258:	4a69      	ldr	r2, [pc, #420]	; (8003400 <HAL_UART_MspInit+0x27c>)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800325e:	e0c5      	b.n	80033ec <HAL_UART_MspInit+0x268>
  else if(huart->Instance==USART1)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a68      	ldr	r2, [pc, #416]	; (8003408 <HAL_UART_MspInit+0x284>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d12d      	bne.n	80032c6 <HAL_UART_MspInit+0x142>
    __HAL_RCC_USART1_CLK_ENABLE();
 800326a:	2300      	movs	r3, #0
 800326c:	623b      	str	r3, [r7, #32]
 800326e:	4b62      	ldr	r3, [pc, #392]	; (80033f8 <HAL_UART_MspInit+0x274>)
 8003270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003272:	4a61      	ldr	r2, [pc, #388]	; (80033f8 <HAL_UART_MspInit+0x274>)
 8003274:	f043 0310 	orr.w	r3, r3, #16
 8003278:	6453      	str	r3, [r2, #68]	; 0x44
 800327a:	4b5f      	ldr	r3, [pc, #380]	; (80033f8 <HAL_UART_MspInit+0x274>)
 800327c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327e:	f003 0310 	and.w	r3, r3, #16
 8003282:	623b      	str	r3, [r7, #32]
 8003284:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003286:	2300      	movs	r3, #0
 8003288:	61fb      	str	r3, [r7, #28]
 800328a:	4b5b      	ldr	r3, [pc, #364]	; (80033f8 <HAL_UART_MspInit+0x274>)
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328e:	4a5a      	ldr	r2, [pc, #360]	; (80033f8 <HAL_UART_MspInit+0x274>)
 8003290:	f043 0301 	orr.w	r3, r3, #1
 8003294:	6313      	str	r3, [r2, #48]	; 0x30
 8003296:	4b58      	ldr	r3, [pc, #352]	; (80033f8 <HAL_UART_MspInit+0x274>)
 8003298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	61fb      	str	r3, [r7, #28]
 80032a0:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80032a2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80032a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032a8:	2302      	movs	r3, #2
 80032aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ac:	2300      	movs	r3, #0
 80032ae:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032b0:	2303      	movs	r3, #3
 80032b2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032b4:	2307      	movs	r3, #7
 80032b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032bc:	4619      	mov	r1, r3
 80032be:	4853      	ldr	r0, [pc, #332]	; (800340c <HAL_UART_MspInit+0x288>)
 80032c0:	f000 fe92 	bl	8003fe8 <HAL_GPIO_Init>
}
 80032c4:	e092      	b.n	80033ec <HAL_UART_MspInit+0x268>
  else if(huart->Instance==USART2)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a51      	ldr	r2, [pc, #324]	; (8003410 <HAL_UART_MspInit+0x28c>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d15b      	bne.n	8003388 <HAL_UART_MspInit+0x204>
    __HAL_RCC_USART2_CLK_ENABLE();
 80032d0:	2300      	movs	r3, #0
 80032d2:	61bb      	str	r3, [r7, #24]
 80032d4:	4b48      	ldr	r3, [pc, #288]	; (80033f8 <HAL_UART_MspInit+0x274>)
 80032d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d8:	4a47      	ldr	r2, [pc, #284]	; (80033f8 <HAL_UART_MspInit+0x274>)
 80032da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032de:	6413      	str	r3, [r2, #64]	; 0x40
 80032e0:	4b45      	ldr	r3, [pc, #276]	; (80033f8 <HAL_UART_MspInit+0x274>)
 80032e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e8:	61bb      	str	r3, [r7, #24]
 80032ea:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80032ec:	2300      	movs	r3, #0
 80032ee:	617b      	str	r3, [r7, #20]
 80032f0:	4b41      	ldr	r3, [pc, #260]	; (80033f8 <HAL_UART_MspInit+0x274>)
 80032f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f4:	4a40      	ldr	r2, [pc, #256]	; (80033f8 <HAL_UART_MspInit+0x274>)
 80032f6:	f043 0308 	orr.w	r3, r3, #8
 80032fa:	6313      	str	r3, [r2, #48]	; 0x30
 80032fc:	4b3e      	ldr	r3, [pc, #248]	; (80033f8 <HAL_UART_MspInit+0x274>)
 80032fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003300:	f003 0308 	and.w	r3, r3, #8
 8003304:	617b      	str	r3, [r7, #20]
 8003306:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003308:	2360      	movs	r3, #96	; 0x60
 800330a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800330c:	2302      	movs	r3, #2
 800330e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003310:	2300      	movs	r3, #0
 8003312:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003314:	2303      	movs	r3, #3
 8003316:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003318:	2307      	movs	r3, #7
 800331a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800331c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003320:	4619      	mov	r1, r3
 8003322:	483c      	ldr	r0, [pc, #240]	; (8003414 <HAL_UART_MspInit+0x290>)
 8003324:	f000 fe60 	bl	8003fe8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003328:	4b3b      	ldr	r3, [pc, #236]	; (8003418 <HAL_UART_MspInit+0x294>)
 800332a:	4a3c      	ldr	r2, [pc, #240]	; (800341c <HAL_UART_MspInit+0x298>)
 800332c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800332e:	4b3a      	ldr	r3, [pc, #232]	; (8003418 <HAL_UART_MspInit+0x294>)
 8003330:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003334:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003336:	4b38      	ldr	r3, [pc, #224]	; (8003418 <HAL_UART_MspInit+0x294>)
 8003338:	2200      	movs	r2, #0
 800333a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800333c:	4b36      	ldr	r3, [pc, #216]	; (8003418 <HAL_UART_MspInit+0x294>)
 800333e:	2200      	movs	r2, #0
 8003340:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003342:	4b35      	ldr	r3, [pc, #212]	; (8003418 <HAL_UART_MspInit+0x294>)
 8003344:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003348:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800334a:	4b33      	ldr	r3, [pc, #204]	; (8003418 <HAL_UART_MspInit+0x294>)
 800334c:	2200      	movs	r2, #0
 800334e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003350:	4b31      	ldr	r3, [pc, #196]	; (8003418 <HAL_UART_MspInit+0x294>)
 8003352:	2200      	movs	r2, #0
 8003354:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003356:	4b30      	ldr	r3, [pc, #192]	; (8003418 <HAL_UART_MspInit+0x294>)
 8003358:	f44f 7280 	mov.w	r2, #256	; 0x100
 800335c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800335e:	4b2e      	ldr	r3, [pc, #184]	; (8003418 <HAL_UART_MspInit+0x294>)
 8003360:	2200      	movs	r2, #0
 8003362:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003364:	4b2c      	ldr	r3, [pc, #176]	; (8003418 <HAL_UART_MspInit+0x294>)
 8003366:	2200      	movs	r2, #0
 8003368:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800336a:	482b      	ldr	r0, [pc, #172]	; (8003418 <HAL_UART_MspInit+0x294>)
 800336c:	f000 face 	bl	800390c <HAL_DMA_Init>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <HAL_UART_MspInit+0x1f6>
      Error_Handler();
 8003376:	f7ff fd71 	bl	8002e5c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a26      	ldr	r2, [pc, #152]	; (8003418 <HAL_UART_MspInit+0x294>)
 800337e:	635a      	str	r2, [r3, #52]	; 0x34
 8003380:	4a25      	ldr	r2, [pc, #148]	; (8003418 <HAL_UART_MspInit+0x294>)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003386:	e031      	b.n	80033ec <HAL_UART_MspInit+0x268>
  else if(huart->Instance==USART3)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a24      	ldr	r2, [pc, #144]	; (8003420 <HAL_UART_MspInit+0x29c>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d12c      	bne.n	80033ec <HAL_UART_MspInit+0x268>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003392:	2300      	movs	r3, #0
 8003394:	613b      	str	r3, [r7, #16]
 8003396:	4b18      	ldr	r3, [pc, #96]	; (80033f8 <HAL_UART_MspInit+0x274>)
 8003398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339a:	4a17      	ldr	r2, [pc, #92]	; (80033f8 <HAL_UART_MspInit+0x274>)
 800339c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033a0:	6413      	str	r3, [r2, #64]	; 0x40
 80033a2:	4b15      	ldr	r3, [pc, #84]	; (80033f8 <HAL_UART_MspInit+0x274>)
 80033a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033aa:	613b      	str	r3, [r7, #16]
 80033ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033ae:	2300      	movs	r3, #0
 80033b0:	60fb      	str	r3, [r7, #12]
 80033b2:	4b11      	ldr	r3, [pc, #68]	; (80033f8 <HAL_UART_MspInit+0x274>)
 80033b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b6:	4a10      	ldr	r2, [pc, #64]	; (80033f8 <HAL_UART_MspInit+0x274>)
 80033b8:	f043 0302 	orr.w	r3, r3, #2
 80033bc:	6313      	str	r3, [r2, #48]	; 0x30
 80033be:	4b0e      	ldr	r3, [pc, #56]	; (80033f8 <HAL_UART_MspInit+0x274>)
 80033c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	60fb      	str	r3, [r7, #12]
 80033c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80033ca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80033ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d0:	2302      	movs	r3, #2
 80033d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d4:	2300      	movs	r3, #0
 80033d6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033d8:	2303      	movs	r3, #3
 80033da:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80033dc:	2307      	movs	r3, #7
 80033de:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033e4:	4619      	mov	r1, r3
 80033e6:	480f      	ldr	r0, [pc, #60]	; (8003424 <HAL_UART_MspInit+0x2a0>)
 80033e8:	f000 fdfe 	bl	8003fe8 <HAL_GPIO_Init>
}
 80033ec:	bf00      	nop
 80033ee:	3740      	adds	r7, #64	; 0x40
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	40004c00 	.word	0x40004c00
 80033f8:	40023800 	.word	0x40023800
 80033fc:	40020800 	.word	0x40020800
 8003400:	20000214 	.word	0x20000214
 8003404:	40026040 	.word	0x40026040
 8003408:	40011000 	.word	0x40011000
 800340c:	40020000 	.word	0x40020000
 8003410:	40004400 	.word	0x40004400
 8003414:	40020c00 	.word	0x40020c00
 8003418:	20000274 	.word	0x20000274
 800341c:	40026088 	.word	0x40026088
 8003420:	40004800 	.word	0x40004800
 8003424:	40020400 	.word	0x40020400

08003428 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003428:	b480      	push	{r7}
 800342a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800342c:	bf00      	nop
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr

08003436 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003436:	b480      	push	{r7}
 8003438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800343a:	e7fe      	b.n	800343a <HardFault_Handler+0x4>

0800343c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003440:	e7fe      	b.n	8003440 <MemManage_Handler+0x4>

08003442 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003442:	b480      	push	{r7}
 8003444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003446:	e7fe      	b.n	8003446 <BusFault_Handler+0x4>

08003448 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003448:	b480      	push	{r7}
 800344a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800344c:	e7fe      	b.n	800344c <UsageFault_Handler+0x4>

0800344e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800344e:	b480      	push	{r7}
 8003450:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003452:	bf00      	nop
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003460:	bf00      	nop
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr

0800346a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800346a:	b480      	push	{r7}
 800346c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800346e:	bf00      	nop
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	HAL_IncTick();
 800347c:	f000 f8f2 	bl	8003664 <HAL_IncTick>
  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003480:	bf00      	nop
 8003482:	bd80      	pop	{r7, pc}

08003484 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8003488:	4802      	ldr	r0, [pc, #8]	; (8003494 <DMA1_Stream2_IRQHandler+0x10>)
 800348a:	f000 fb45 	bl	8003b18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800348e:	bf00      	nop
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	20000214 	.word	0x20000214

08003498 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800349c:	4802      	ldr	r0, [pc, #8]	; (80034a8 <DMA1_Stream5_IRQHandler+0x10>)
 800349e:	f000 fb3b 	bl	8003b18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80034a2:	bf00      	nop
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	20000274 	.word	0x20000274

080034ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80034b0:	4802      	ldr	r0, [pc, #8]	; (80034bc <TIM2_IRQHandler+0x10>)
 80034b2:	f002 fcd7 	bl	8005e64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80034b6:	bf00      	nop
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	20000714 	.word	0x20000714

080034c0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80034c4:	4802      	ldr	r0, [pc, #8]	; (80034d0 <TIM3_IRQHandler+0x10>)
 80034c6:	f002 fccd 	bl	8005e64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80034ca:	bf00      	nop
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	20000568 	.word	0x20000568

080034d4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80034d8:	4802      	ldr	r0, [pc, #8]	; (80034e4 <TIM4_IRQHandler+0x10>)
 80034da:	f002 fcc3 	bl	8005e64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80034de:	bf00      	nop
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	20000328 	.word	0x20000328

080034e8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80034f0:	4b11      	ldr	r3, [pc, #68]	; (8003538 <_sbrk+0x50>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d102      	bne.n	80034fe <_sbrk+0x16>
		heap_end = &end;
 80034f8:	4b0f      	ldr	r3, [pc, #60]	; (8003538 <_sbrk+0x50>)
 80034fa:	4a10      	ldr	r2, [pc, #64]	; (800353c <_sbrk+0x54>)
 80034fc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80034fe:	4b0e      	ldr	r3, [pc, #56]	; (8003538 <_sbrk+0x50>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003504:	4b0c      	ldr	r3, [pc, #48]	; (8003538 <_sbrk+0x50>)
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4413      	add	r3, r2
 800350c:	466a      	mov	r2, sp
 800350e:	4293      	cmp	r3, r2
 8003510:	d907      	bls.n	8003522 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003512:	f004 faf5 	bl	8007b00 <__errno>
 8003516:	4602      	mov	r2, r0
 8003518:	230c      	movs	r3, #12
 800351a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800351c:	f04f 33ff 	mov.w	r3, #4294967295
 8003520:	e006      	b.n	8003530 <_sbrk+0x48>
	}

	heap_end += incr;
 8003522:	4b05      	ldr	r3, [pc, #20]	; (8003538 <_sbrk+0x50>)
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4413      	add	r3, r2
 800352a:	4a03      	ldr	r2, [pc, #12]	; (8003538 <_sbrk+0x50>)
 800352c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800352e:	68fb      	ldr	r3, [r7, #12]
}
 8003530:	4618      	mov	r0, r3
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	20000208 	.word	0x20000208
 800353c:	20000808 	.word	0x20000808

08003540 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003544:	4b08      	ldr	r3, [pc, #32]	; (8003568 <SystemInit+0x28>)
 8003546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800354a:	4a07      	ldr	r2, [pc, #28]	; (8003568 <SystemInit+0x28>)
 800354c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003550:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003554:	4b04      	ldr	r3, [pc, #16]	; (8003568 <SystemInit+0x28>)
 8003556:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800355a:	609a      	str	r2, [r3, #8]
#endif
}
 800355c:	bf00      	nop
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	e000ed00 	.word	0xe000ed00

0800356c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800356c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80035a4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003570:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003572:	e003      	b.n	800357c <LoopCopyDataInit>

08003574 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003574:	4b0c      	ldr	r3, [pc, #48]	; (80035a8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003576:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003578:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800357a:	3104      	adds	r1, #4

0800357c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800357c:	480b      	ldr	r0, [pc, #44]	; (80035ac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800357e:	4b0c      	ldr	r3, [pc, #48]	; (80035b0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003580:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003582:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003584:	d3f6      	bcc.n	8003574 <CopyDataInit>
  ldr  r2, =_sbss
 8003586:	4a0b      	ldr	r2, [pc, #44]	; (80035b4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003588:	e002      	b.n	8003590 <LoopFillZerobss>

0800358a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800358a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800358c:	f842 3b04 	str.w	r3, [r2], #4

08003590 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003590:	4b09      	ldr	r3, [pc, #36]	; (80035b8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003592:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003594:	d3f9      	bcc.n	800358a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003596:	f7ff ffd3 	bl	8003540 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800359a:	f004 fab7 	bl	8007b0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800359e:	f7fe fa95 	bl	8001acc <main>
  bx  lr    
 80035a2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80035a4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80035a8:	0800b120 	.word	0x0800b120
  ldr  r0, =_sdata
 80035ac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80035b0:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 80035b4:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 80035b8:	20000804 	.word	0x20000804

080035bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035bc:	e7fe      	b.n	80035bc <ADC_IRQHandler>
	...

080035c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80035c4:	4b0e      	ldr	r3, [pc, #56]	; (8003600 <HAL_Init+0x40>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a0d      	ldr	r2, [pc, #52]	; (8003600 <HAL_Init+0x40>)
 80035ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80035d0:	4b0b      	ldr	r3, [pc, #44]	; (8003600 <HAL_Init+0x40>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a0a      	ldr	r2, [pc, #40]	; (8003600 <HAL_Init+0x40>)
 80035d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035dc:	4b08      	ldr	r3, [pc, #32]	; (8003600 <HAL_Init+0x40>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a07      	ldr	r2, [pc, #28]	; (8003600 <HAL_Init+0x40>)
 80035e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035e8:	2003      	movs	r0, #3
 80035ea:	f000 f94d 	bl	8003888 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80035ee:	2000      	movs	r0, #0
 80035f0:	f000 f808 	bl	8003604 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80035f4:	f7ff fc3a 	bl	8002e6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	40023c00 	.word	0x40023c00

08003604 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800360c:	4b12      	ldr	r3, [pc, #72]	; (8003658 <HAL_InitTick+0x54>)
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	4b12      	ldr	r3, [pc, #72]	; (800365c <HAL_InitTick+0x58>)
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	4619      	mov	r1, r3
 8003616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800361a:	fbb3 f3f1 	udiv	r3, r3, r1
 800361e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003622:	4618      	mov	r0, r3
 8003624:	f000 f965 	bl	80038f2 <HAL_SYSTICK_Config>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d001      	beq.n	8003632 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e00e      	b.n	8003650 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2b0f      	cmp	r3, #15
 8003636:	d80a      	bhi.n	800364e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003638:	2200      	movs	r2, #0
 800363a:	6879      	ldr	r1, [r7, #4]
 800363c:	f04f 30ff 	mov.w	r0, #4294967295
 8003640:	f000 f92d 	bl	800389e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003644:	4a06      	ldr	r2, [pc, #24]	; (8003660 <HAL_InitTick+0x5c>)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800364a:	2300      	movs	r3, #0
 800364c:	e000      	b.n	8003650 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
}
 8003650:	4618      	mov	r0, r3
 8003652:	3708      	adds	r7, #8
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	20000004 	.word	0x20000004
 800365c:	2000000c 	.word	0x2000000c
 8003660:	20000008 	.word	0x20000008

08003664 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003664:	b480      	push	{r7}
 8003666:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003668:	4b06      	ldr	r3, [pc, #24]	; (8003684 <HAL_IncTick+0x20>)
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	461a      	mov	r2, r3
 800366e:	4b06      	ldr	r3, [pc, #24]	; (8003688 <HAL_IncTick+0x24>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4413      	add	r3, r2
 8003674:	4a04      	ldr	r2, [pc, #16]	; (8003688 <HAL_IncTick+0x24>)
 8003676:	6013      	str	r3, [r2, #0]
}
 8003678:	bf00      	nop
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	2000000c 	.word	0x2000000c
 8003688:	200007fc 	.word	0x200007fc

0800368c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0
  return uwTick;
 8003690:	4b03      	ldr	r3, [pc, #12]	; (80036a0 <HAL_GetTick+0x14>)
 8003692:	681b      	ldr	r3, [r3, #0]
}
 8003694:	4618      	mov	r0, r3
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	200007fc 	.word	0x200007fc

080036a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80036ac:	f7ff ffee 	bl	800368c <HAL_GetTick>
 80036b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036bc:	d005      	beq.n	80036ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036be:	4b09      	ldr	r3, [pc, #36]	; (80036e4 <HAL_Delay+0x40>)
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	461a      	mov	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	4413      	add	r3, r2
 80036c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80036ca:	bf00      	nop
 80036cc:	f7ff ffde 	bl	800368c <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d8f7      	bhi.n	80036cc <HAL_Delay+0x28>
  {
  }
}
 80036dc:	bf00      	nop
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	2000000c 	.word	0x2000000c

080036e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f003 0307 	and.w	r3, r3, #7
 80036f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036f8:	4b0c      	ldr	r3, [pc, #48]	; (800372c <__NVIC_SetPriorityGrouping+0x44>)
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036fe:	68ba      	ldr	r2, [r7, #8]
 8003700:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003704:	4013      	ands	r3, r2
 8003706:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003710:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003718:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800371a:	4a04      	ldr	r2, [pc, #16]	; (800372c <__NVIC_SetPriorityGrouping+0x44>)
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	60d3      	str	r3, [r2, #12]
}
 8003720:	bf00      	nop
 8003722:	3714      	adds	r7, #20
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr
 800372c:	e000ed00 	.word	0xe000ed00

08003730 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003734:	4b04      	ldr	r3, [pc, #16]	; (8003748 <__NVIC_GetPriorityGrouping+0x18>)
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	0a1b      	lsrs	r3, r3, #8
 800373a:	f003 0307 	and.w	r3, r3, #7
}
 800373e:	4618      	mov	r0, r3
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr
 8003748:	e000ed00 	.word	0xe000ed00

0800374c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	4603      	mov	r3, r0
 8003754:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800375a:	2b00      	cmp	r3, #0
 800375c:	db0b      	blt.n	8003776 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800375e:	79fb      	ldrb	r3, [r7, #7]
 8003760:	f003 021f 	and.w	r2, r3, #31
 8003764:	4907      	ldr	r1, [pc, #28]	; (8003784 <__NVIC_EnableIRQ+0x38>)
 8003766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800376a:	095b      	lsrs	r3, r3, #5
 800376c:	2001      	movs	r0, #1
 800376e:	fa00 f202 	lsl.w	r2, r0, r2
 8003772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003776:	bf00      	nop
 8003778:	370c      	adds	r7, #12
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	e000e100 	.word	0xe000e100

08003788 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	4603      	mov	r3, r0
 8003790:	6039      	str	r1, [r7, #0]
 8003792:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003798:	2b00      	cmp	r3, #0
 800379a:	db0a      	blt.n	80037b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	b2da      	uxtb	r2, r3
 80037a0:	490c      	ldr	r1, [pc, #48]	; (80037d4 <__NVIC_SetPriority+0x4c>)
 80037a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a6:	0112      	lsls	r2, r2, #4
 80037a8:	b2d2      	uxtb	r2, r2
 80037aa:	440b      	add	r3, r1
 80037ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037b0:	e00a      	b.n	80037c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	b2da      	uxtb	r2, r3
 80037b6:	4908      	ldr	r1, [pc, #32]	; (80037d8 <__NVIC_SetPriority+0x50>)
 80037b8:	79fb      	ldrb	r3, [r7, #7]
 80037ba:	f003 030f 	and.w	r3, r3, #15
 80037be:	3b04      	subs	r3, #4
 80037c0:	0112      	lsls	r2, r2, #4
 80037c2:	b2d2      	uxtb	r2, r2
 80037c4:	440b      	add	r3, r1
 80037c6:	761a      	strb	r2, [r3, #24]
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr
 80037d4:	e000e100 	.word	0xe000e100
 80037d8:	e000ed00 	.word	0xe000ed00

080037dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037dc:	b480      	push	{r7}
 80037de:	b089      	sub	sp, #36	; 0x24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f003 0307 	and.w	r3, r3, #7
 80037ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	f1c3 0307 	rsb	r3, r3, #7
 80037f6:	2b04      	cmp	r3, #4
 80037f8:	bf28      	it	cs
 80037fa:	2304      	movcs	r3, #4
 80037fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	3304      	adds	r3, #4
 8003802:	2b06      	cmp	r3, #6
 8003804:	d902      	bls.n	800380c <NVIC_EncodePriority+0x30>
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	3b03      	subs	r3, #3
 800380a:	e000      	b.n	800380e <NVIC_EncodePriority+0x32>
 800380c:	2300      	movs	r3, #0
 800380e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003810:	f04f 32ff 	mov.w	r2, #4294967295
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	fa02 f303 	lsl.w	r3, r2, r3
 800381a:	43da      	mvns	r2, r3
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	401a      	ands	r2, r3
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003824:	f04f 31ff 	mov.w	r1, #4294967295
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	fa01 f303 	lsl.w	r3, r1, r3
 800382e:	43d9      	mvns	r1, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003834:	4313      	orrs	r3, r2
         );
}
 8003836:	4618      	mov	r0, r3
 8003838:	3724      	adds	r7, #36	; 0x24
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
	...

08003844 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	3b01      	subs	r3, #1
 8003850:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003854:	d301      	bcc.n	800385a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003856:	2301      	movs	r3, #1
 8003858:	e00f      	b.n	800387a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800385a:	4a0a      	ldr	r2, [pc, #40]	; (8003884 <SysTick_Config+0x40>)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	3b01      	subs	r3, #1
 8003860:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003862:	210f      	movs	r1, #15
 8003864:	f04f 30ff 	mov.w	r0, #4294967295
 8003868:	f7ff ff8e 	bl	8003788 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800386c:	4b05      	ldr	r3, [pc, #20]	; (8003884 <SysTick_Config+0x40>)
 800386e:	2200      	movs	r2, #0
 8003870:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003872:	4b04      	ldr	r3, [pc, #16]	; (8003884 <SysTick_Config+0x40>)
 8003874:	2207      	movs	r2, #7
 8003876:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	e000e010 	.word	0xe000e010

08003888 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f7ff ff29 	bl	80036e8 <__NVIC_SetPriorityGrouping>
}
 8003896:	bf00      	nop
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800389e:	b580      	push	{r7, lr}
 80038a0:	b086      	sub	sp, #24
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	4603      	mov	r3, r0
 80038a6:	60b9      	str	r1, [r7, #8]
 80038a8:	607a      	str	r2, [r7, #4]
 80038aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038ac:	2300      	movs	r3, #0
 80038ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038b0:	f7ff ff3e 	bl	8003730 <__NVIC_GetPriorityGrouping>
 80038b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	68b9      	ldr	r1, [r7, #8]
 80038ba:	6978      	ldr	r0, [r7, #20]
 80038bc:	f7ff ff8e 	bl	80037dc <NVIC_EncodePriority>
 80038c0:	4602      	mov	r2, r0
 80038c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038c6:	4611      	mov	r1, r2
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7ff ff5d 	bl	8003788 <__NVIC_SetPriority>
}
 80038ce:	bf00      	nop
 80038d0:	3718      	adds	r7, #24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b082      	sub	sp, #8
 80038da:	af00      	add	r7, sp, #0
 80038dc:	4603      	mov	r3, r0
 80038de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7ff ff31 	bl	800374c <__NVIC_EnableIRQ>
}
 80038ea:	bf00      	nop
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b082      	sub	sp, #8
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f7ff ffa2 	bl	8003844 <SysTick_Config>
 8003900:	4603      	mov	r3, r0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3708      	adds	r7, #8
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
	...

0800390c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003914:	2300      	movs	r3, #0
 8003916:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003918:	f7ff feb8 	bl	800368c <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d101      	bne.n	8003928 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e099      	b.n	8003a5c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2202      	movs	r2, #2
 8003934:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 0201 	bic.w	r2, r2, #1
 8003946:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003948:	e00f      	b.n	800396a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800394a:	f7ff fe9f 	bl	800368c <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	2b05      	cmp	r3, #5
 8003956:	d908      	bls.n	800396a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2220      	movs	r2, #32
 800395c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2203      	movs	r2, #3
 8003962:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e078      	b.n	8003a5c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1e8      	bne.n	800394a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003980:	697a      	ldr	r2, [r7, #20]
 8003982:	4b38      	ldr	r3, [pc, #224]	; (8003a64 <HAL_DMA_Init+0x158>)
 8003984:	4013      	ands	r3, r2
 8003986:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685a      	ldr	r2, [r3, #4]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003996:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c0:	2b04      	cmp	r3, #4
 80039c2:	d107      	bne.n	80039d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039cc:	4313      	orrs	r3, r2
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	f023 0307 	bic.w	r3, r3, #7
 80039ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f0:	697a      	ldr	r2, [r7, #20]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fa:	2b04      	cmp	r3, #4
 80039fc:	d117      	bne.n	8003a2e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d00e      	beq.n	8003a2e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f000 fa6f 	bl	8003ef4 <DMA_CheckFifoParam>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d008      	beq.n	8003a2e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2240      	movs	r2, #64	; 0x40
 8003a20:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2201      	movs	r2, #1
 8003a26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e016      	b.n	8003a5c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 fa26 	bl	8003e88 <DMA_CalcBaseAndBitshift>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a44:	223f      	movs	r2, #63	; 0x3f
 8003a46:	409a      	lsls	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3718      	adds	r7, #24
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	f010803f 	.word	0xf010803f

08003a68 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b086      	sub	sp, #24
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
 8003a74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a76:	2300      	movs	r3, #0
 8003a78:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a7e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d101      	bne.n	8003a8e <HAL_DMA_Start_IT+0x26>
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	e040      	b.n	8003b10 <HAL_DMA_Start_IT+0xa8>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d12f      	bne.n	8003b02 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2202      	movs	r2, #2
 8003aa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2200      	movs	r2, #0
 8003aae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	68b9      	ldr	r1, [r7, #8]
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f000 f9b8 	bl	8003e2c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac0:	223f      	movs	r2, #63	; 0x3f
 8003ac2:	409a      	lsls	r2, r3
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f042 0216 	orr.w	r2, r2, #22
 8003ad6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d007      	beq.n	8003af0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f042 0208 	orr.w	r2, r2, #8
 8003aee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f042 0201 	orr.w	r2, r2, #1
 8003afe:	601a      	str	r2, [r3, #0]
 8003b00:	e005      	b.n	8003b0e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003b0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3718      	adds	r7, #24
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b086      	sub	sp, #24
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003b20:	2300      	movs	r3, #0
 8003b22:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003b24:	4b92      	ldr	r3, [pc, #584]	; (8003d70 <HAL_DMA_IRQHandler+0x258>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a92      	ldr	r2, [pc, #584]	; (8003d74 <HAL_DMA_IRQHandler+0x25c>)
 8003b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2e:	0a9b      	lsrs	r3, r3, #10
 8003b30:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b36:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b42:	2208      	movs	r2, #8
 8003b44:	409a      	lsls	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	4013      	ands	r3, r2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d01a      	beq.n	8003b84 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0304 	and.w	r3, r3, #4
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d013      	beq.n	8003b84 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f022 0204 	bic.w	r2, r2, #4
 8003b6a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b70:	2208      	movs	r2, #8
 8003b72:	409a      	lsls	r2, r3
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b7c:	f043 0201 	orr.w	r2, r3, #1
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b88:	2201      	movs	r2, #1
 8003b8a:	409a      	lsls	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	4013      	ands	r3, r2
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d012      	beq.n	8003bba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00b      	beq.n	8003bba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	409a      	lsls	r2, r3
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bb2:	f043 0202 	orr.w	r2, r3, #2
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bbe:	2204      	movs	r2, #4
 8003bc0:	409a      	lsls	r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d012      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0302 	and.w	r3, r3, #2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00b      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bdc:	2204      	movs	r2, #4
 8003bde:	409a      	lsls	r2, r3
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be8:	f043 0204 	orr.w	r2, r3, #4
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf4:	2210      	movs	r2, #16
 8003bf6:	409a      	lsls	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d043      	beq.n	8003c88 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0308 	and.w	r3, r3, #8
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d03c      	beq.n	8003c88 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c12:	2210      	movs	r2, #16
 8003c14:	409a      	lsls	r2, r3
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d018      	beq.n	8003c5a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d108      	bne.n	8003c48 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d024      	beq.n	8003c88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	4798      	blx	r3
 8003c46:	e01f      	b.n	8003c88 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d01b      	beq.n	8003c88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	4798      	blx	r3
 8003c58:	e016      	b.n	8003c88 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d107      	bne.n	8003c78 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f022 0208 	bic.w	r2, r2, #8
 8003c76:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d003      	beq.n	8003c88 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c8c:	2220      	movs	r2, #32
 8003c8e:	409a      	lsls	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	4013      	ands	r3, r2
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f000 808e 	beq.w	8003db6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0310 	and.w	r3, r3, #16
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f000 8086 	beq.w	8003db6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cae:	2220      	movs	r2, #32
 8003cb0:	409a      	lsls	r2, r3
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b05      	cmp	r3, #5
 8003cc0:	d136      	bne.n	8003d30 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f022 0216 	bic.w	r2, r2, #22
 8003cd0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	695a      	ldr	r2, [r3, #20]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ce0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d103      	bne.n	8003cf2 <HAL_DMA_IRQHandler+0x1da>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d007      	beq.n	8003d02 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f022 0208 	bic.w	r2, r2, #8
 8003d00:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d06:	223f      	movs	r2, #63	; 0x3f
 8003d08:	409a      	lsls	r2, r3
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d07d      	beq.n	8003e22 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	4798      	blx	r3
        }
        return;
 8003d2e:	e078      	b.n	8003e22 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d01c      	beq.n	8003d78 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d108      	bne.n	8003d5e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d030      	beq.n	8003db6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	4798      	blx	r3
 8003d5c:	e02b      	b.n	8003db6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d027      	beq.n	8003db6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	4798      	blx	r3
 8003d6e:	e022      	b.n	8003db6 <HAL_DMA_IRQHandler+0x29e>
 8003d70:	20000004 	.word	0x20000004
 8003d74:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d10f      	bne.n	8003da6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f022 0210 	bic.w	r2, r2, #16
 8003d94:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d003      	beq.n	8003db6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d032      	beq.n	8003e24 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d022      	beq.n	8003e10 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2205      	movs	r2, #5
 8003dce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f022 0201 	bic.w	r2, r2, #1
 8003de0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	3301      	adds	r3, #1
 8003de6:	60bb      	str	r3, [r7, #8]
 8003de8:	697a      	ldr	r2, [r7, #20]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d307      	bcc.n	8003dfe <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0301 	and.w	r3, r3, #1
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1f2      	bne.n	8003de2 <HAL_DMA_IRQHandler+0x2ca>
 8003dfc:	e000      	b.n	8003e00 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003dfe:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d005      	beq.n	8003e24 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	4798      	blx	r3
 8003e20:	e000      	b.n	8003e24 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003e22:	bf00      	nop
    }
  }
}
 8003e24:	3718      	adds	r7, #24
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop

08003e2c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b085      	sub	sp, #20
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	607a      	str	r2, [r7, #4]
 8003e38:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e48:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	683a      	ldr	r2, [r7, #0]
 8003e50:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	2b40      	cmp	r3, #64	; 0x40
 8003e58:	d108      	bne.n	8003e6c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68ba      	ldr	r2, [r7, #8]
 8003e68:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003e6a:	e007      	b.n	8003e7c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68ba      	ldr	r2, [r7, #8]
 8003e72:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	60da      	str	r2, [r3, #12]
}
 8003e7c:	bf00      	nop
 8003e7e:	3714      	adds	r7, #20
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	3b10      	subs	r3, #16
 8003e98:	4a14      	ldr	r2, [pc, #80]	; (8003eec <DMA_CalcBaseAndBitshift+0x64>)
 8003e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e9e:	091b      	lsrs	r3, r3, #4
 8003ea0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003ea2:	4a13      	ldr	r2, [pc, #76]	; (8003ef0 <DMA_CalcBaseAndBitshift+0x68>)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	461a      	mov	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2b03      	cmp	r3, #3
 8003eb4:	d909      	bls.n	8003eca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ebe:	f023 0303 	bic.w	r3, r3, #3
 8003ec2:	1d1a      	adds	r2, r3, #4
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	659a      	str	r2, [r3, #88]	; 0x58
 8003ec8:	e007      	b.n	8003eda <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ed2:	f023 0303 	bic.w	r3, r3, #3
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3714      	adds	r7, #20
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	aaaaaaab 	.word	0xaaaaaaab
 8003ef0:	0800ae60 	.word	0x0800ae60

08003ef4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003efc:	2300      	movs	r3, #0
 8003efe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f04:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d11f      	bne.n	8003f4e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	2b03      	cmp	r3, #3
 8003f12:	d855      	bhi.n	8003fc0 <DMA_CheckFifoParam+0xcc>
 8003f14:	a201      	add	r2, pc, #4	; (adr r2, 8003f1c <DMA_CheckFifoParam+0x28>)
 8003f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f1a:	bf00      	nop
 8003f1c:	08003f2d 	.word	0x08003f2d
 8003f20:	08003f3f 	.word	0x08003f3f
 8003f24:	08003f2d 	.word	0x08003f2d
 8003f28:	08003fc1 	.word	0x08003fc1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d045      	beq.n	8003fc4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f3c:	e042      	b.n	8003fc4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f42:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f46:	d13f      	bne.n	8003fc8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f4c:	e03c      	b.n	8003fc8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f56:	d121      	bne.n	8003f9c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	2b03      	cmp	r3, #3
 8003f5c:	d836      	bhi.n	8003fcc <DMA_CheckFifoParam+0xd8>
 8003f5e:	a201      	add	r2, pc, #4	; (adr r2, 8003f64 <DMA_CheckFifoParam+0x70>)
 8003f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f64:	08003f75 	.word	0x08003f75
 8003f68:	08003f7b 	.word	0x08003f7b
 8003f6c:	08003f75 	.word	0x08003f75
 8003f70:	08003f8d 	.word	0x08003f8d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	73fb      	strb	r3, [r7, #15]
      break;
 8003f78:	e02f      	b.n	8003fda <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d024      	beq.n	8003fd0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f8a:	e021      	b.n	8003fd0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f90:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f94:	d11e      	bne.n	8003fd4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003f9a:	e01b      	b.n	8003fd4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d902      	bls.n	8003fa8 <DMA_CheckFifoParam+0xb4>
 8003fa2:	2b03      	cmp	r3, #3
 8003fa4:	d003      	beq.n	8003fae <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003fa6:	e018      	b.n	8003fda <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	73fb      	strb	r3, [r7, #15]
      break;
 8003fac:	e015      	b.n	8003fda <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00e      	beq.n	8003fd8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	73fb      	strb	r3, [r7, #15]
      break;
 8003fbe:	e00b      	b.n	8003fd8 <DMA_CheckFifoParam+0xe4>
      break;
 8003fc0:	bf00      	nop
 8003fc2:	e00a      	b.n	8003fda <DMA_CheckFifoParam+0xe6>
      break;
 8003fc4:	bf00      	nop
 8003fc6:	e008      	b.n	8003fda <DMA_CheckFifoParam+0xe6>
      break;
 8003fc8:	bf00      	nop
 8003fca:	e006      	b.n	8003fda <DMA_CheckFifoParam+0xe6>
      break;
 8003fcc:	bf00      	nop
 8003fce:	e004      	b.n	8003fda <DMA_CheckFifoParam+0xe6>
      break;
 8003fd0:	bf00      	nop
 8003fd2:	e002      	b.n	8003fda <DMA_CheckFifoParam+0xe6>
      break;   
 8003fd4:	bf00      	nop
 8003fd6:	e000      	b.n	8003fda <DMA_CheckFifoParam+0xe6>
      break;
 8003fd8:	bf00      	nop
    }
  } 
  
  return status; 
 8003fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3714      	adds	r7, #20
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b089      	sub	sp, #36	; 0x24
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ffe:	2300      	movs	r3, #0
 8004000:	61fb      	str	r3, [r7, #28]
 8004002:	e16b      	b.n	80042dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004004:	2201      	movs	r2, #1
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	fa02 f303 	lsl.w	r3, r2, r3
 800400c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	4013      	ands	r3, r2
 8004016:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	429a      	cmp	r2, r3
 800401e:	f040 815a 	bne.w	80042d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d00b      	beq.n	8004042 <HAL_GPIO_Init+0x5a>
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	2b02      	cmp	r3, #2
 8004030:	d007      	beq.n	8004042 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004036:	2b11      	cmp	r3, #17
 8004038:	d003      	beq.n	8004042 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	2b12      	cmp	r3, #18
 8004040:	d130      	bne.n	80040a4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	005b      	lsls	r3, r3, #1
 800404c:	2203      	movs	r2, #3
 800404e:	fa02 f303 	lsl.w	r3, r2, r3
 8004052:	43db      	mvns	r3, r3
 8004054:	69ba      	ldr	r2, [r7, #24]
 8004056:	4013      	ands	r3, r2
 8004058:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	68da      	ldr	r2, [r3, #12]
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	005b      	lsls	r3, r3, #1
 8004062:	fa02 f303 	lsl.w	r3, r2, r3
 8004066:	69ba      	ldr	r2, [r7, #24]
 8004068:	4313      	orrs	r3, r2
 800406a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	69ba      	ldr	r2, [r7, #24]
 8004070:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004078:	2201      	movs	r2, #1
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	fa02 f303 	lsl.w	r3, r2, r3
 8004080:	43db      	mvns	r3, r3
 8004082:	69ba      	ldr	r2, [r7, #24]
 8004084:	4013      	ands	r3, r2
 8004086:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	091b      	lsrs	r3, r3, #4
 800408e:	f003 0201 	and.w	r2, r3, #1
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	fa02 f303 	lsl.w	r3, r2, r3
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	4313      	orrs	r3, r2
 800409c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	69ba      	ldr	r2, [r7, #24]
 80040a2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	005b      	lsls	r3, r3, #1
 80040ae:	2203      	movs	r2, #3
 80040b0:	fa02 f303 	lsl.w	r3, r2, r3
 80040b4:	43db      	mvns	r3, r3
 80040b6:	69ba      	ldr	r2, [r7, #24]
 80040b8:	4013      	ands	r3, r2
 80040ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	689a      	ldr	r2, [r3, #8]
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	005b      	lsls	r3, r3, #1
 80040c4:	fa02 f303 	lsl.w	r3, r2, r3
 80040c8:	69ba      	ldr	r2, [r7, #24]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	69ba      	ldr	r2, [r7, #24]
 80040d2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d003      	beq.n	80040e4 <HAL_GPIO_Init+0xfc>
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	2b12      	cmp	r3, #18
 80040e2:	d123      	bne.n	800412c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	08da      	lsrs	r2, r3, #3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	3208      	adds	r2, #8
 80040ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	f003 0307 	and.w	r3, r3, #7
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	220f      	movs	r2, #15
 80040fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004100:	43db      	mvns	r3, r3
 8004102:	69ba      	ldr	r2, [r7, #24]
 8004104:	4013      	ands	r3, r2
 8004106:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	691a      	ldr	r2, [r3, #16]
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	f003 0307 	and.w	r3, r3, #7
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	fa02 f303 	lsl.w	r3, r2, r3
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	4313      	orrs	r3, r2
 800411c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	08da      	lsrs	r2, r3, #3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	3208      	adds	r2, #8
 8004126:	69b9      	ldr	r1, [r7, #24]
 8004128:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	005b      	lsls	r3, r3, #1
 8004136:	2203      	movs	r2, #3
 8004138:	fa02 f303 	lsl.w	r3, r2, r3
 800413c:	43db      	mvns	r3, r3
 800413e:	69ba      	ldr	r2, [r7, #24]
 8004140:	4013      	ands	r3, r2
 8004142:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f003 0203 	and.w	r2, r3, #3
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	005b      	lsls	r3, r3, #1
 8004150:	fa02 f303 	lsl.w	r3, r2, r3
 8004154:	69ba      	ldr	r2, [r7, #24]
 8004156:	4313      	orrs	r3, r2
 8004158:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	69ba      	ldr	r2, [r7, #24]
 800415e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004168:	2b00      	cmp	r3, #0
 800416a:	f000 80b4 	beq.w	80042d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800416e:	2300      	movs	r3, #0
 8004170:	60fb      	str	r3, [r7, #12]
 8004172:	4b5f      	ldr	r3, [pc, #380]	; (80042f0 <HAL_GPIO_Init+0x308>)
 8004174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004176:	4a5e      	ldr	r2, [pc, #376]	; (80042f0 <HAL_GPIO_Init+0x308>)
 8004178:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800417c:	6453      	str	r3, [r2, #68]	; 0x44
 800417e:	4b5c      	ldr	r3, [pc, #368]	; (80042f0 <HAL_GPIO_Init+0x308>)
 8004180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004182:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004186:	60fb      	str	r3, [r7, #12]
 8004188:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800418a:	4a5a      	ldr	r2, [pc, #360]	; (80042f4 <HAL_GPIO_Init+0x30c>)
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	089b      	lsrs	r3, r3, #2
 8004190:	3302      	adds	r3, #2
 8004192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004196:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	f003 0303 	and.w	r3, r3, #3
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	220f      	movs	r2, #15
 80041a2:	fa02 f303 	lsl.w	r3, r2, r3
 80041a6:	43db      	mvns	r3, r3
 80041a8:	69ba      	ldr	r2, [r7, #24]
 80041aa:	4013      	ands	r3, r2
 80041ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a51      	ldr	r2, [pc, #324]	; (80042f8 <HAL_GPIO_Init+0x310>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d02b      	beq.n	800420e <HAL_GPIO_Init+0x226>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a50      	ldr	r2, [pc, #320]	; (80042fc <HAL_GPIO_Init+0x314>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d025      	beq.n	800420a <HAL_GPIO_Init+0x222>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a4f      	ldr	r2, [pc, #316]	; (8004300 <HAL_GPIO_Init+0x318>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d01f      	beq.n	8004206 <HAL_GPIO_Init+0x21e>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a4e      	ldr	r2, [pc, #312]	; (8004304 <HAL_GPIO_Init+0x31c>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d019      	beq.n	8004202 <HAL_GPIO_Init+0x21a>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a4d      	ldr	r2, [pc, #308]	; (8004308 <HAL_GPIO_Init+0x320>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d013      	beq.n	80041fe <HAL_GPIO_Init+0x216>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a4c      	ldr	r2, [pc, #304]	; (800430c <HAL_GPIO_Init+0x324>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d00d      	beq.n	80041fa <HAL_GPIO_Init+0x212>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a4b      	ldr	r2, [pc, #300]	; (8004310 <HAL_GPIO_Init+0x328>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d007      	beq.n	80041f6 <HAL_GPIO_Init+0x20e>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a4a      	ldr	r2, [pc, #296]	; (8004314 <HAL_GPIO_Init+0x32c>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d101      	bne.n	80041f2 <HAL_GPIO_Init+0x20a>
 80041ee:	2307      	movs	r3, #7
 80041f0:	e00e      	b.n	8004210 <HAL_GPIO_Init+0x228>
 80041f2:	2308      	movs	r3, #8
 80041f4:	e00c      	b.n	8004210 <HAL_GPIO_Init+0x228>
 80041f6:	2306      	movs	r3, #6
 80041f8:	e00a      	b.n	8004210 <HAL_GPIO_Init+0x228>
 80041fa:	2305      	movs	r3, #5
 80041fc:	e008      	b.n	8004210 <HAL_GPIO_Init+0x228>
 80041fe:	2304      	movs	r3, #4
 8004200:	e006      	b.n	8004210 <HAL_GPIO_Init+0x228>
 8004202:	2303      	movs	r3, #3
 8004204:	e004      	b.n	8004210 <HAL_GPIO_Init+0x228>
 8004206:	2302      	movs	r3, #2
 8004208:	e002      	b.n	8004210 <HAL_GPIO_Init+0x228>
 800420a:	2301      	movs	r3, #1
 800420c:	e000      	b.n	8004210 <HAL_GPIO_Init+0x228>
 800420e:	2300      	movs	r3, #0
 8004210:	69fa      	ldr	r2, [r7, #28]
 8004212:	f002 0203 	and.w	r2, r2, #3
 8004216:	0092      	lsls	r2, r2, #2
 8004218:	4093      	lsls	r3, r2
 800421a:	69ba      	ldr	r2, [r7, #24]
 800421c:	4313      	orrs	r3, r2
 800421e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004220:	4934      	ldr	r1, [pc, #208]	; (80042f4 <HAL_GPIO_Init+0x30c>)
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	089b      	lsrs	r3, r3, #2
 8004226:	3302      	adds	r3, #2
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800422e:	4b3a      	ldr	r3, [pc, #232]	; (8004318 <HAL_GPIO_Init+0x330>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	43db      	mvns	r3, r3
 8004238:	69ba      	ldr	r2, [r7, #24]
 800423a:	4013      	ands	r3, r2
 800423c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d003      	beq.n	8004252 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800424a:	69ba      	ldr	r2, [r7, #24]
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	4313      	orrs	r3, r2
 8004250:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004252:	4a31      	ldr	r2, [pc, #196]	; (8004318 <HAL_GPIO_Init+0x330>)
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004258:	4b2f      	ldr	r3, [pc, #188]	; (8004318 <HAL_GPIO_Init+0x330>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	43db      	mvns	r3, r3
 8004262:	69ba      	ldr	r2, [r7, #24]
 8004264:	4013      	ands	r3, r2
 8004266:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d003      	beq.n	800427c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004274:	69ba      	ldr	r2, [r7, #24]
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	4313      	orrs	r3, r2
 800427a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800427c:	4a26      	ldr	r2, [pc, #152]	; (8004318 <HAL_GPIO_Init+0x330>)
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004282:	4b25      	ldr	r3, [pc, #148]	; (8004318 <HAL_GPIO_Init+0x330>)
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	43db      	mvns	r3, r3
 800428c:	69ba      	ldr	r2, [r7, #24]
 800428e:	4013      	ands	r3, r2
 8004290:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d003      	beq.n	80042a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800429e:	69ba      	ldr	r2, [r7, #24]
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80042a6:	4a1c      	ldr	r2, [pc, #112]	; (8004318 <HAL_GPIO_Init+0x330>)
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80042ac:	4b1a      	ldr	r3, [pc, #104]	; (8004318 <HAL_GPIO_Init+0x330>)
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	43db      	mvns	r3, r3
 80042b6:	69ba      	ldr	r2, [r7, #24]
 80042b8:	4013      	ands	r3, r2
 80042ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d003      	beq.n	80042d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80042d0:	4a11      	ldr	r2, [pc, #68]	; (8004318 <HAL_GPIO_Init+0x330>)
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	3301      	adds	r3, #1
 80042da:	61fb      	str	r3, [r7, #28]
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	2b0f      	cmp	r3, #15
 80042e0:	f67f ae90 	bls.w	8004004 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80042e4:	bf00      	nop
 80042e6:	3724      	adds	r7, #36	; 0x24
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr
 80042f0:	40023800 	.word	0x40023800
 80042f4:	40013800 	.word	0x40013800
 80042f8:	40020000 	.word	0x40020000
 80042fc:	40020400 	.word	0x40020400
 8004300:	40020800 	.word	0x40020800
 8004304:	40020c00 	.word	0x40020c00
 8004308:	40021000 	.word	0x40021000
 800430c:	40021400 	.word	0x40021400
 8004310:	40021800 	.word	0x40021800
 8004314:	40021c00 	.word	0x40021c00
 8004318:	40013c00 	.word	0x40013c00

0800431c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d101      	bne.n	800432e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e11f      	b.n	800456e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d106      	bne.n	8004348 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f7fe fdba 	bl	8002ebc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2224      	movs	r2, #36	; 0x24
 800434c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f022 0201 	bic.w	r2, r2, #1
 800435e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800436e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800437e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004380:	f001 fb90 	bl	8005aa4 <HAL_RCC_GetPCLK1Freq>
 8004384:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	4a7b      	ldr	r2, [pc, #492]	; (8004578 <HAL_I2C_Init+0x25c>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d807      	bhi.n	80043a0 <HAL_I2C_Init+0x84>
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	4a7a      	ldr	r2, [pc, #488]	; (800457c <HAL_I2C_Init+0x260>)
 8004394:	4293      	cmp	r3, r2
 8004396:	bf94      	ite	ls
 8004398:	2301      	movls	r3, #1
 800439a:	2300      	movhi	r3, #0
 800439c:	b2db      	uxtb	r3, r3
 800439e:	e006      	b.n	80043ae <HAL_I2C_Init+0x92>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	4a77      	ldr	r2, [pc, #476]	; (8004580 <HAL_I2C_Init+0x264>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	bf94      	ite	ls
 80043a8:	2301      	movls	r3, #1
 80043aa:	2300      	movhi	r3, #0
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e0db      	b.n	800456e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	4a72      	ldr	r2, [pc, #456]	; (8004584 <HAL_I2C_Init+0x268>)
 80043ba:	fba2 2303 	umull	r2, r3, r2, r3
 80043be:	0c9b      	lsrs	r3, r3, #18
 80043c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68ba      	ldr	r2, [r7, #8]
 80043d2:	430a      	orrs	r2, r1
 80043d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	6a1b      	ldr	r3, [r3, #32]
 80043dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	4a64      	ldr	r2, [pc, #400]	; (8004578 <HAL_I2C_Init+0x25c>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d802      	bhi.n	80043f0 <HAL_I2C_Init+0xd4>
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	3301      	adds	r3, #1
 80043ee:	e009      	b.n	8004404 <HAL_I2C_Init+0xe8>
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80043f6:	fb02 f303 	mul.w	r3, r2, r3
 80043fa:	4a63      	ldr	r2, [pc, #396]	; (8004588 <HAL_I2C_Init+0x26c>)
 80043fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004400:	099b      	lsrs	r3, r3, #6
 8004402:	3301      	adds	r3, #1
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	6812      	ldr	r2, [r2, #0]
 8004408:	430b      	orrs	r3, r1
 800440a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	69db      	ldr	r3, [r3, #28]
 8004412:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004416:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	4956      	ldr	r1, [pc, #344]	; (8004578 <HAL_I2C_Init+0x25c>)
 8004420:	428b      	cmp	r3, r1
 8004422:	d80d      	bhi.n	8004440 <HAL_I2C_Init+0x124>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	1e59      	subs	r1, r3, #1
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	005b      	lsls	r3, r3, #1
 800442e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004432:	3301      	adds	r3, #1
 8004434:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004438:	2b04      	cmp	r3, #4
 800443a:	bf38      	it	cc
 800443c:	2304      	movcc	r3, #4
 800443e:	e04f      	b.n	80044e0 <HAL_I2C_Init+0x1c4>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d111      	bne.n	800446c <HAL_I2C_Init+0x150>
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	1e58      	subs	r0, r3, #1
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6859      	ldr	r1, [r3, #4]
 8004450:	460b      	mov	r3, r1
 8004452:	005b      	lsls	r3, r3, #1
 8004454:	440b      	add	r3, r1
 8004456:	fbb0 f3f3 	udiv	r3, r0, r3
 800445a:	3301      	adds	r3, #1
 800445c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004460:	2b00      	cmp	r3, #0
 8004462:	bf0c      	ite	eq
 8004464:	2301      	moveq	r3, #1
 8004466:	2300      	movne	r3, #0
 8004468:	b2db      	uxtb	r3, r3
 800446a:	e012      	b.n	8004492 <HAL_I2C_Init+0x176>
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	1e58      	subs	r0, r3, #1
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6859      	ldr	r1, [r3, #4]
 8004474:	460b      	mov	r3, r1
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	440b      	add	r3, r1
 800447a:	0099      	lsls	r1, r3, #2
 800447c:	440b      	add	r3, r1
 800447e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004482:	3301      	adds	r3, #1
 8004484:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004488:	2b00      	cmp	r3, #0
 800448a:	bf0c      	ite	eq
 800448c:	2301      	moveq	r3, #1
 800448e:	2300      	movne	r3, #0
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d001      	beq.n	800449a <HAL_I2C_Init+0x17e>
 8004496:	2301      	movs	r3, #1
 8004498:	e022      	b.n	80044e0 <HAL_I2C_Init+0x1c4>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10e      	bne.n	80044c0 <HAL_I2C_Init+0x1a4>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	1e58      	subs	r0, r3, #1
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6859      	ldr	r1, [r3, #4]
 80044aa:	460b      	mov	r3, r1
 80044ac:	005b      	lsls	r3, r3, #1
 80044ae:	440b      	add	r3, r1
 80044b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80044b4:	3301      	adds	r3, #1
 80044b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044be:	e00f      	b.n	80044e0 <HAL_I2C_Init+0x1c4>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	1e58      	subs	r0, r3, #1
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6859      	ldr	r1, [r3, #4]
 80044c8:	460b      	mov	r3, r1
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	440b      	add	r3, r1
 80044ce:	0099      	lsls	r1, r3, #2
 80044d0:	440b      	add	r3, r1
 80044d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80044d6:	3301      	adds	r3, #1
 80044d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044e0:	6879      	ldr	r1, [r7, #4]
 80044e2:	6809      	ldr	r1, [r1, #0]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	69da      	ldr	r2, [r3, #28]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a1b      	ldr	r3, [r3, #32]
 80044fa:	431a      	orrs	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	430a      	orrs	r2, r1
 8004502:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800450e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	6911      	ldr	r1, [r2, #16]
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	68d2      	ldr	r2, [r2, #12]
 800451a:	4311      	orrs	r1, r2
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	6812      	ldr	r2, [r2, #0]
 8004520:	430b      	orrs	r3, r1
 8004522:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	695a      	ldr	r2, [r3, #20]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	431a      	orrs	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	430a      	orrs	r2, r1
 800453e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f042 0201 	orr.w	r2, r2, #1
 800454e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2220      	movs	r2, #32
 800455a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	000186a0 	.word	0x000186a0
 800457c:	001e847f 	.word	0x001e847f
 8004580:	003d08ff 	.word	0x003d08ff
 8004584:	431bde83 	.word	0x431bde83
 8004588:	10624dd3 	.word	0x10624dd3

0800458c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b088      	sub	sp, #32
 8004590:	af02      	add	r7, sp, #8
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	4608      	mov	r0, r1
 8004596:	4611      	mov	r1, r2
 8004598:	461a      	mov	r2, r3
 800459a:	4603      	mov	r3, r0
 800459c:	817b      	strh	r3, [r7, #10]
 800459e:	460b      	mov	r3, r1
 80045a0:	813b      	strh	r3, [r7, #8]
 80045a2:	4613      	mov	r3, r2
 80045a4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80045a6:	f7ff f871 	bl	800368c <HAL_GetTick>
 80045aa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	2b20      	cmp	r3, #32
 80045b6:	f040 80d9 	bne.w	800476c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	9300      	str	r3, [sp, #0]
 80045be:	2319      	movs	r3, #25
 80045c0:	2201      	movs	r2, #1
 80045c2:	496d      	ldr	r1, [pc, #436]	; (8004778 <HAL_I2C_Mem_Write+0x1ec>)
 80045c4:	68f8      	ldr	r0, [r7, #12]
 80045c6:	f000 fc7b 	bl	8004ec0 <I2C_WaitOnFlagUntilTimeout>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d001      	beq.n	80045d4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80045d0:	2302      	movs	r3, #2
 80045d2:	e0cc      	b.n	800476e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d101      	bne.n	80045e2 <HAL_I2C_Mem_Write+0x56>
 80045de:	2302      	movs	r3, #2
 80045e0:	e0c5      	b.n	800476e <HAL_I2C_Mem_Write+0x1e2>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0301 	and.w	r3, r3, #1
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d007      	beq.n	8004608 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f042 0201 	orr.w	r2, r2, #1
 8004606:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004616:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2221      	movs	r2, #33	; 0x21
 800461c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2240      	movs	r2, #64	; 0x40
 8004624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6a3a      	ldr	r2, [r7, #32]
 8004632:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004638:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800463e:	b29a      	uxth	r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	4a4d      	ldr	r2, [pc, #308]	; (800477c <HAL_I2C_Mem_Write+0x1f0>)
 8004648:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800464a:	88f8      	ldrh	r0, [r7, #6]
 800464c:	893a      	ldrh	r2, [r7, #8]
 800464e:	8979      	ldrh	r1, [r7, #10]
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	9301      	str	r3, [sp, #4]
 8004654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004656:	9300      	str	r3, [sp, #0]
 8004658:	4603      	mov	r3, r0
 800465a:	68f8      	ldr	r0, [r7, #12]
 800465c:	f000 fab6 	bl	8004bcc <I2C_RequestMemoryWrite>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d052      	beq.n	800470c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e081      	b.n	800476e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800466a:	697a      	ldr	r2, [r7, #20]
 800466c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f000 fcfc 	bl	800506c <I2C_WaitOnTXEFlagUntilTimeout>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00d      	beq.n	8004696 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467e:	2b04      	cmp	r3, #4
 8004680:	d107      	bne.n	8004692 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004690:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e06b      	b.n	800476e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469a:	781a      	ldrb	r2, [r3, #0]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a6:	1c5a      	adds	r2, r3, #1
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046b0:	3b01      	subs	r3, #1
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046bc:	b29b      	uxth	r3, r3
 80046be:	3b01      	subs	r3, #1
 80046c0:	b29a      	uxth	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	695b      	ldr	r3, [r3, #20]
 80046cc:	f003 0304 	and.w	r3, r3, #4
 80046d0:	2b04      	cmp	r3, #4
 80046d2:	d11b      	bne.n	800470c <HAL_I2C_Mem_Write+0x180>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d017      	beq.n	800470c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e0:	781a      	ldrb	r2, [r3, #0]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ec:	1c5a      	adds	r2, r3, #1
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046f6:	3b01      	subs	r3, #1
 80046f8:	b29a      	uxth	r2, r3
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004702:	b29b      	uxth	r3, r3
 8004704:	3b01      	subs	r3, #1
 8004706:	b29a      	uxth	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004710:	2b00      	cmp	r3, #0
 8004712:	d1aa      	bne.n	800466a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004714:	697a      	ldr	r2, [r7, #20]
 8004716:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004718:	68f8      	ldr	r0, [r7, #12]
 800471a:	f000 fce8 	bl	80050ee <I2C_WaitOnBTFFlagUntilTimeout>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d00d      	beq.n	8004740 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004728:	2b04      	cmp	r3, #4
 800472a:	d107      	bne.n	800473c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800473a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e016      	b.n	800476e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800474e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2220      	movs	r2, #32
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004768:	2300      	movs	r3, #0
 800476a:	e000      	b.n	800476e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800476c:	2302      	movs	r3, #2
  }
}
 800476e:	4618      	mov	r0, r3
 8004770:	3718      	adds	r7, #24
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	00100002 	.word	0x00100002
 800477c:	ffff0000 	.word	0xffff0000

08004780 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b08c      	sub	sp, #48	; 0x30
 8004784:	af02      	add	r7, sp, #8
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	4608      	mov	r0, r1
 800478a:	4611      	mov	r1, r2
 800478c:	461a      	mov	r2, r3
 800478e:	4603      	mov	r3, r0
 8004790:	817b      	strh	r3, [r7, #10]
 8004792:	460b      	mov	r3, r1
 8004794:	813b      	strh	r3, [r7, #8]
 8004796:	4613      	mov	r3, r2
 8004798:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800479a:	f7fe ff77 	bl	800368c <HAL_GetTick>
 800479e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	2b20      	cmp	r3, #32
 80047aa:	f040 8208 	bne.w	8004bbe <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b0:	9300      	str	r3, [sp, #0]
 80047b2:	2319      	movs	r3, #25
 80047b4:	2201      	movs	r2, #1
 80047b6:	497b      	ldr	r1, [pc, #492]	; (80049a4 <HAL_I2C_Mem_Read+0x224>)
 80047b8:	68f8      	ldr	r0, [r7, #12]
 80047ba:	f000 fb81 	bl	8004ec0 <I2C_WaitOnFlagUntilTimeout>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d001      	beq.n	80047c8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80047c4:	2302      	movs	r3, #2
 80047c6:	e1fb      	b.n	8004bc0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d101      	bne.n	80047d6 <HAL_I2C_Mem_Read+0x56>
 80047d2:	2302      	movs	r3, #2
 80047d4:	e1f4      	b.n	8004bc0 <HAL_I2C_Mem_Read+0x440>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2201      	movs	r2, #1
 80047da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0301 	and.w	r3, r3, #1
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d007      	beq.n	80047fc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f042 0201 	orr.w	r2, r2, #1
 80047fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800480a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2222      	movs	r2, #34	; 0x22
 8004810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2240      	movs	r2, #64	; 0x40
 8004818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2200      	movs	r2, #0
 8004820:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004826:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800482c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004832:	b29a      	uxth	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	4a5b      	ldr	r2, [pc, #364]	; (80049a8 <HAL_I2C_Mem_Read+0x228>)
 800483c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800483e:	88f8      	ldrh	r0, [r7, #6]
 8004840:	893a      	ldrh	r2, [r7, #8]
 8004842:	8979      	ldrh	r1, [r7, #10]
 8004844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004846:	9301      	str	r3, [sp, #4]
 8004848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800484a:	9300      	str	r3, [sp, #0]
 800484c:	4603      	mov	r3, r0
 800484e:	68f8      	ldr	r0, [r7, #12]
 8004850:	f000 fa50 	bl	8004cf4 <I2C_RequestMemoryRead>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d001      	beq.n	800485e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e1b0      	b.n	8004bc0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004862:	2b00      	cmp	r3, #0
 8004864:	d113      	bne.n	800488e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004866:	2300      	movs	r3, #0
 8004868:	623b      	str	r3, [r7, #32]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	695b      	ldr	r3, [r3, #20]
 8004870:	623b      	str	r3, [r7, #32]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	699b      	ldr	r3, [r3, #24]
 8004878:	623b      	str	r3, [r7, #32]
 800487a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800488a:	601a      	str	r2, [r3, #0]
 800488c:	e184      	b.n	8004b98 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004892:	2b01      	cmp	r3, #1
 8004894:	d11b      	bne.n	80048ce <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048a6:	2300      	movs	r3, #0
 80048a8:	61fb      	str	r3, [r7, #28]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	695b      	ldr	r3, [r3, #20]
 80048b0:	61fb      	str	r3, [r7, #28]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	61fb      	str	r3, [r7, #28]
 80048ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048ca:	601a      	str	r2, [r3, #0]
 80048cc:	e164      	b.n	8004b98 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d11b      	bne.n	800490e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048e4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048f6:	2300      	movs	r3, #0
 80048f8:	61bb      	str	r3, [r7, #24]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	695b      	ldr	r3, [r3, #20]
 8004900:	61bb      	str	r3, [r7, #24]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	61bb      	str	r3, [r7, #24]
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	e144      	b.n	8004b98 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800490e:	2300      	movs	r3, #0
 8004910:	617b      	str	r3, [r7, #20]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	695b      	ldr	r3, [r3, #20]
 8004918:	617b      	str	r3, [r7, #20]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	699b      	ldr	r3, [r3, #24]
 8004920:	617b      	str	r3, [r7, #20]
 8004922:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004924:	e138      	b.n	8004b98 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800492a:	2b03      	cmp	r3, #3
 800492c:	f200 80f1 	bhi.w	8004b12 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004934:	2b01      	cmp	r3, #1
 8004936:	d123      	bne.n	8004980 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800493a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	f000 fc17 	bl	8005170 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d001      	beq.n	800494c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e139      	b.n	8004bc0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	691a      	ldr	r2, [r3, #16]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004956:	b2d2      	uxtb	r2, r2
 8004958:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495e:	1c5a      	adds	r2, r3, #1
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004968:	3b01      	subs	r3, #1
 800496a:	b29a      	uxth	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004974:	b29b      	uxth	r3, r3
 8004976:	3b01      	subs	r3, #1
 8004978:	b29a      	uxth	r2, r3
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800497e:	e10b      	b.n	8004b98 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004984:	2b02      	cmp	r3, #2
 8004986:	d14e      	bne.n	8004a26 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498a:	9300      	str	r3, [sp, #0]
 800498c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800498e:	2200      	movs	r2, #0
 8004990:	4906      	ldr	r1, [pc, #24]	; (80049ac <HAL_I2C_Mem_Read+0x22c>)
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	f000 fa94 	bl	8004ec0 <I2C_WaitOnFlagUntilTimeout>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d008      	beq.n	80049b0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e10e      	b.n	8004bc0 <HAL_I2C_Mem_Read+0x440>
 80049a2:	bf00      	nop
 80049a4:	00100002 	.word	0x00100002
 80049a8:	ffff0000 	.word	0xffff0000
 80049ac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	691a      	ldr	r2, [r3, #16]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ca:	b2d2      	uxtb	r2, r2
 80049cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d2:	1c5a      	adds	r2, r3, #1
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049dc:	3b01      	subs	r3, #1
 80049de:	b29a      	uxth	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	3b01      	subs	r3, #1
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	691a      	ldr	r2, [r3, #16]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fc:	b2d2      	uxtb	r2, r2
 80049fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a04:	1c5a      	adds	r2, r3, #1
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	b29a      	uxth	r2, r3
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a24:	e0b8      	b.n	8004b98 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a28:	9300      	str	r3, [sp, #0]
 8004a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	4966      	ldr	r1, [pc, #408]	; (8004bc8 <HAL_I2C_Mem_Read+0x448>)
 8004a30:	68f8      	ldr	r0, [r7, #12]
 8004a32:	f000 fa45 	bl	8004ec0 <I2C_WaitOnFlagUntilTimeout>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d001      	beq.n	8004a40 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e0bf      	b.n	8004bc0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	691a      	ldr	r2, [r3, #16]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5a:	b2d2      	uxtb	r2, r2
 8004a5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a62:	1c5a      	adds	r2, r3, #1
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a6c:	3b01      	subs	r3, #1
 8004a6e:	b29a      	uxth	r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	b29a      	uxth	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a84:	9300      	str	r3, [sp, #0]
 8004a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a88:	2200      	movs	r2, #0
 8004a8a:	494f      	ldr	r1, [pc, #316]	; (8004bc8 <HAL_I2C_Mem_Read+0x448>)
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	f000 fa17 	bl	8004ec0 <I2C_WaitOnFlagUntilTimeout>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d001      	beq.n	8004a9c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e091      	b.n	8004bc0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aaa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	691a      	ldr	r2, [r3, #16]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab6:	b2d2      	uxtb	r2, r2
 8004ab8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abe:	1c5a      	adds	r2, r3, #1
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	b29a      	uxth	r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	b29a      	uxth	r2, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	691a      	ldr	r2, [r3, #16]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae8:	b2d2      	uxtb	r2, r2
 8004aea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af0:	1c5a      	adds	r2, r3, #1
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004afa:	3b01      	subs	r3, #1
 8004afc:	b29a      	uxth	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	3b01      	subs	r3, #1
 8004b0a:	b29a      	uxth	r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b10:	e042      	b.n	8004b98 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b14:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b16:	68f8      	ldr	r0, [r7, #12]
 8004b18:	f000 fb2a 	bl	8005170 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d001      	beq.n	8004b26 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e04c      	b.n	8004bc0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	691a      	ldr	r2, [r3, #16]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b30:	b2d2      	uxtb	r2, r2
 8004b32:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b38:	1c5a      	adds	r2, r3, #1
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b42:	3b01      	subs	r3, #1
 8004b44:	b29a      	uxth	r2, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	3b01      	subs	r3, #1
 8004b52:	b29a      	uxth	r2, r3
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	f003 0304 	and.w	r3, r3, #4
 8004b62:	2b04      	cmp	r3, #4
 8004b64:	d118      	bne.n	8004b98 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	691a      	ldr	r2, [r3, #16]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b70:	b2d2      	uxtb	r2, r2
 8004b72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b78:	1c5a      	adds	r2, r3, #1
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b82:	3b01      	subs	r3, #1
 8004b84:	b29a      	uxth	r2, r3
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	3b01      	subs	r3, #1
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	f47f aec2 	bne.w	8004926 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2220      	movs	r2, #32
 8004ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	e000      	b.n	8004bc0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004bbe:	2302      	movs	r3, #2
  }
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3728      	adds	r7, #40	; 0x28
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	00010004 	.word	0x00010004

08004bcc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b088      	sub	sp, #32
 8004bd0:	af02      	add	r7, sp, #8
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	4608      	mov	r0, r1
 8004bd6:	4611      	mov	r1, r2
 8004bd8:	461a      	mov	r2, r3
 8004bda:	4603      	mov	r3, r0
 8004bdc:	817b      	strh	r3, [r7, #10]
 8004bde:	460b      	mov	r3, r1
 8004be0:	813b      	strh	r3, [r7, #8]
 8004be2:	4613      	mov	r3, r2
 8004be4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bf4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf8:	9300      	str	r3, [sp, #0]
 8004bfa:	6a3b      	ldr	r3, [r7, #32]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c02:	68f8      	ldr	r0, [r7, #12]
 8004c04:	f000 f95c 	bl	8004ec0 <I2C_WaitOnFlagUntilTimeout>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00c      	beq.n	8004c28 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d003      	beq.n	8004c24 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c22:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e05f      	b.n	8004ce8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c28:	897b      	ldrh	r3, [r7, #10]
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c36:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3a:	6a3a      	ldr	r2, [r7, #32]
 8004c3c:	492c      	ldr	r1, [pc, #176]	; (8004cf0 <I2C_RequestMemoryWrite+0x124>)
 8004c3e:	68f8      	ldr	r0, [r7, #12]
 8004c40:	f000 f995 	bl	8004f6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d001      	beq.n	8004c4e <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e04c      	b.n	8004ce8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c4e:	2300      	movs	r3, #0
 8004c50:	617b      	str	r3, [r7, #20]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	695b      	ldr	r3, [r3, #20]
 8004c58:	617b      	str	r3, [r7, #20]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	617b      	str	r3, [r7, #20]
 8004c62:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c66:	6a39      	ldr	r1, [r7, #32]
 8004c68:	68f8      	ldr	r0, [r7, #12]
 8004c6a:	f000 f9ff 	bl	800506c <I2C_WaitOnTXEFlagUntilTimeout>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00d      	beq.n	8004c90 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c78:	2b04      	cmp	r3, #4
 8004c7a:	d107      	bne.n	8004c8c <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c8a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e02b      	b.n	8004ce8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c90:	88fb      	ldrh	r3, [r7, #6]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d105      	bne.n	8004ca2 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c96:	893b      	ldrh	r3, [r7, #8]
 8004c98:	b2da      	uxtb	r2, r3
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	611a      	str	r2, [r3, #16]
 8004ca0:	e021      	b.n	8004ce6 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004ca2:	893b      	ldrh	r3, [r7, #8]
 8004ca4:	0a1b      	lsrs	r3, r3, #8
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	b2da      	uxtb	r2, r3
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cb2:	6a39      	ldr	r1, [r7, #32]
 8004cb4:	68f8      	ldr	r0, [r7, #12]
 8004cb6:	f000 f9d9 	bl	800506c <I2C_WaitOnTXEFlagUntilTimeout>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00d      	beq.n	8004cdc <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc4:	2b04      	cmp	r3, #4
 8004cc6:	d107      	bne.n	8004cd8 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cd6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e005      	b.n	8004ce8 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004cdc:	893b      	ldrh	r3, [r7, #8]
 8004cde:	b2da      	uxtb	r2, r3
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004ce6:	2300      	movs	r3, #0
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3718      	adds	r7, #24
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	00010002 	.word	0x00010002

08004cf4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b088      	sub	sp, #32
 8004cf8:	af02      	add	r7, sp, #8
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	4608      	mov	r0, r1
 8004cfe:	4611      	mov	r1, r2
 8004d00:	461a      	mov	r2, r3
 8004d02:	4603      	mov	r3, r0
 8004d04:	817b      	strh	r3, [r7, #10]
 8004d06:	460b      	mov	r3, r1
 8004d08:	813b      	strh	r3, [r7, #8]
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d1c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d2c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d30:	9300      	str	r3, [sp, #0]
 8004d32:	6a3b      	ldr	r3, [r7, #32]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	f000 f8c0 	bl	8004ec0 <I2C_WaitOnFlagUntilTimeout>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00c      	beq.n	8004d60 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d003      	beq.n	8004d5c <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e0a9      	b.n	8004eb4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d60:	897b      	ldrh	r3, [r7, #10]
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	461a      	mov	r2, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004d6e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d72:	6a3a      	ldr	r2, [r7, #32]
 8004d74:	4951      	ldr	r1, [pc, #324]	; (8004ebc <I2C_RequestMemoryRead+0x1c8>)
 8004d76:	68f8      	ldr	r0, [r7, #12]
 8004d78:	f000 f8f9 	bl	8004f6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d001      	beq.n	8004d86 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e096      	b.n	8004eb4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d86:	2300      	movs	r3, #0
 8004d88:	617b      	str	r3, [r7, #20]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	695b      	ldr	r3, [r3, #20]
 8004d90:	617b      	str	r3, [r7, #20]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	699b      	ldr	r3, [r3, #24]
 8004d98:	617b      	str	r3, [r7, #20]
 8004d9a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d9e:	6a39      	ldr	r1, [r7, #32]
 8004da0:	68f8      	ldr	r0, [r7, #12]
 8004da2:	f000 f963 	bl	800506c <I2C_WaitOnTXEFlagUntilTimeout>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d00d      	beq.n	8004dc8 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db0:	2b04      	cmp	r3, #4
 8004db2:	d107      	bne.n	8004dc4 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dc2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e075      	b.n	8004eb4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004dc8:	88fb      	ldrh	r3, [r7, #6]
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d105      	bne.n	8004dda <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004dce:	893b      	ldrh	r3, [r7, #8]
 8004dd0:	b2da      	uxtb	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	611a      	str	r2, [r3, #16]
 8004dd8:	e021      	b.n	8004e1e <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004dda:	893b      	ldrh	r3, [r7, #8]
 8004ddc:	0a1b      	lsrs	r3, r3, #8
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	b2da      	uxtb	r2, r3
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dea:	6a39      	ldr	r1, [r7, #32]
 8004dec:	68f8      	ldr	r0, [r7, #12]
 8004dee:	f000 f93d 	bl	800506c <I2C_WaitOnTXEFlagUntilTimeout>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00d      	beq.n	8004e14 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfc:	2b04      	cmp	r3, #4
 8004dfe:	d107      	bne.n	8004e10 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e0e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e04f      	b.n	8004eb4 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e14:	893b      	ldrh	r3, [r7, #8]
 8004e16:	b2da      	uxtb	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e20:	6a39      	ldr	r1, [r7, #32]
 8004e22:	68f8      	ldr	r0, [r7, #12]
 8004e24:	f000 f922 	bl	800506c <I2C_WaitOnTXEFlagUntilTimeout>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00d      	beq.n	8004e4a <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e32:	2b04      	cmp	r3, #4
 8004e34:	d107      	bne.n	8004e46 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e44:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e034      	b.n	8004eb4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e58:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5c:	9300      	str	r3, [sp, #0]
 8004e5e:	6a3b      	ldr	r3, [r7, #32]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	f000 f82a 	bl	8004ec0 <I2C_WaitOnFlagUntilTimeout>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00c      	beq.n	8004e8c <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d003      	beq.n	8004e88 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e86:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e013      	b.n	8004eb4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004e8c:	897b      	ldrh	r3, [r7, #10]
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	f043 0301 	orr.w	r3, r3, #1
 8004e94:	b2da      	uxtb	r2, r3
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9e:	6a3a      	ldr	r2, [r7, #32]
 8004ea0:	4906      	ldr	r1, [pc, #24]	; (8004ebc <I2C_RequestMemoryRead+0x1c8>)
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	f000 f863 	bl	8004f6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d001      	beq.n	8004eb2 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e000      	b.n	8004eb4 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3718      	adds	r7, #24
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	00010002 	.word	0x00010002

08004ec0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	603b      	str	r3, [r7, #0]
 8004ecc:	4613      	mov	r3, r2
 8004ece:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ed0:	e025      	b.n	8004f1e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed8:	d021      	beq.n	8004f1e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eda:	f7fe fbd7 	bl	800368c <HAL_GetTick>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	683a      	ldr	r2, [r7, #0]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d302      	bcc.n	8004ef0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d116      	bne.n	8004f1e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2220      	movs	r2, #32
 8004efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0a:	f043 0220 	orr.w	r2, r3, #32
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e023      	b.n	8004f66 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	0c1b      	lsrs	r3, r3, #16
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d10d      	bne.n	8004f44 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	43da      	mvns	r2, r3
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	4013      	ands	r3, r2
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	bf0c      	ite	eq
 8004f3a:	2301      	moveq	r3, #1
 8004f3c:	2300      	movne	r3, #0
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	461a      	mov	r2, r3
 8004f42:	e00c      	b.n	8004f5e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	43da      	mvns	r2, r3
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	4013      	ands	r3, r2
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	bf0c      	ite	eq
 8004f56:	2301      	moveq	r3, #1
 8004f58:	2300      	movne	r3, #0
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	79fb      	ldrb	r3, [r7, #7]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d0b6      	beq.n	8004ed2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3710      	adds	r7, #16
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b084      	sub	sp, #16
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	60f8      	str	r0, [r7, #12]
 8004f76:	60b9      	str	r1, [r7, #8]
 8004f78:	607a      	str	r2, [r7, #4]
 8004f7a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f7c:	e051      	b.n	8005022 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	695b      	ldr	r3, [r3, #20]
 8004f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f8c:	d123      	bne.n	8004fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f9c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004fa6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2200      	movs	r2, #0
 8004fac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2220      	movs	r2, #32
 8004fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc2:	f043 0204 	orr.w	r2, r3, #4
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e046      	b.n	8005064 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fdc:	d021      	beq.n	8005022 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fde:	f7fe fb55 	bl	800368c <HAL_GetTick>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d302      	bcc.n	8004ff4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d116      	bne.n	8005022 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2220      	movs	r2, #32
 8004ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500e:	f043 0220 	orr.w	r2, r3, #32
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e020      	b.n	8005064 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	0c1b      	lsrs	r3, r3, #16
 8005026:	b2db      	uxtb	r3, r3
 8005028:	2b01      	cmp	r3, #1
 800502a:	d10c      	bne.n	8005046 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	695b      	ldr	r3, [r3, #20]
 8005032:	43da      	mvns	r2, r3
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	4013      	ands	r3, r2
 8005038:	b29b      	uxth	r3, r3
 800503a:	2b00      	cmp	r3, #0
 800503c:	bf14      	ite	ne
 800503e:	2301      	movne	r3, #1
 8005040:	2300      	moveq	r3, #0
 8005042:	b2db      	uxtb	r3, r3
 8005044:	e00b      	b.n	800505e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	699b      	ldr	r3, [r3, #24]
 800504c:	43da      	mvns	r2, r3
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	4013      	ands	r3, r2
 8005052:	b29b      	uxth	r3, r3
 8005054:	2b00      	cmp	r3, #0
 8005056:	bf14      	ite	ne
 8005058:	2301      	movne	r3, #1
 800505a:	2300      	moveq	r3, #0
 800505c:	b2db      	uxtb	r3, r3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d18d      	bne.n	8004f7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3710      	adds	r7, #16
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005078:	e02d      	b.n	80050d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800507a:	68f8      	ldr	r0, [r7, #12]
 800507c:	f000 f8ce 	bl	800521c <I2C_IsAcknowledgeFailed>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d001      	beq.n	800508a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e02d      	b.n	80050e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005090:	d021      	beq.n	80050d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005092:	f7fe fafb 	bl	800368c <HAL_GetTick>
 8005096:	4602      	mov	r2, r0
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	68ba      	ldr	r2, [r7, #8]
 800509e:	429a      	cmp	r2, r3
 80050a0:	d302      	bcc.n	80050a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d116      	bne.n	80050d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2200      	movs	r2, #0
 80050ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2220      	movs	r2, #32
 80050b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c2:	f043 0220 	orr.w	r2, r3, #32
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e007      	b.n	80050e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	695b      	ldr	r3, [r3, #20]
 80050dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050e0:	2b80      	cmp	r3, #128	; 0x80
 80050e2:	d1ca      	bne.n	800507a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}

080050ee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b084      	sub	sp, #16
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	60f8      	str	r0, [r7, #12]
 80050f6:	60b9      	str	r1, [r7, #8]
 80050f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80050fa:	e02d      	b.n	8005158 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80050fc:	68f8      	ldr	r0, [r7, #12]
 80050fe:	f000 f88d 	bl	800521c <I2C_IsAcknowledgeFailed>
 8005102:	4603      	mov	r3, r0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d001      	beq.n	800510c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e02d      	b.n	8005168 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005112:	d021      	beq.n	8005158 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005114:	f7fe faba 	bl	800368c <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	68ba      	ldr	r2, [r7, #8]
 8005120:	429a      	cmp	r2, r3
 8005122:	d302      	bcc.n	800512a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d116      	bne.n	8005158 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2200      	movs	r2, #0
 800512e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2220      	movs	r2, #32
 8005134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2200      	movs	r2, #0
 800513c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005144:	f043 0220 	orr.w	r2, r3, #32
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2200      	movs	r2, #0
 8005150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e007      	b.n	8005168 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	f003 0304 	and.w	r3, r3, #4
 8005162:	2b04      	cmp	r3, #4
 8005164:	d1ca      	bne.n	80050fc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005166:	2300      	movs	r3, #0
}
 8005168:	4618      	mov	r0, r3
 800516a:	3710      	adds	r7, #16
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}

08005170 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800517c:	e042      	b.n	8005204 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	695b      	ldr	r3, [r3, #20]
 8005184:	f003 0310 	and.w	r3, r3, #16
 8005188:	2b10      	cmp	r3, #16
 800518a:	d119      	bne.n	80051c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f06f 0210 	mvn.w	r2, #16
 8005194:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2200      	movs	r2, #0
 800519a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2220      	movs	r2, #32
 80051a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e029      	b.n	8005214 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051c0:	f7fe fa64 	bl	800368c <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	68ba      	ldr	r2, [r7, #8]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d302      	bcc.n	80051d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d116      	bne.n	8005204 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2220      	movs	r2, #32
 80051e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f0:	f043 0220 	orr.w	r2, r3, #32
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e007      	b.n	8005214 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800520e:	2b40      	cmp	r3, #64	; 0x40
 8005210:	d1b5      	bne.n	800517e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005212:	2300      	movs	r3, #0
}
 8005214:	4618      	mov	r0, r3
 8005216:	3710      	adds	r7, #16
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800522e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005232:	d11b      	bne.n	800526c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800523c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2220      	movs	r2, #32
 8005248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005258:	f043 0204 	orr.w	r2, r3, #4
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e000      	b.n	800526e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	370c      	adds	r7, #12
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
	...

0800527c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b086      	sub	sp, #24
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d101      	bne.n	800528e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e25b      	b.n	8005746 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0301 	and.w	r3, r3, #1
 8005296:	2b00      	cmp	r3, #0
 8005298:	d075      	beq.n	8005386 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800529a:	4ba3      	ldr	r3, [pc, #652]	; (8005528 <HAL_RCC_OscConfig+0x2ac>)
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f003 030c 	and.w	r3, r3, #12
 80052a2:	2b04      	cmp	r3, #4
 80052a4:	d00c      	beq.n	80052c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052a6:	4ba0      	ldr	r3, [pc, #640]	; (8005528 <HAL_RCC_OscConfig+0x2ac>)
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80052ae:	2b08      	cmp	r3, #8
 80052b0:	d112      	bne.n	80052d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052b2:	4b9d      	ldr	r3, [pc, #628]	; (8005528 <HAL_RCC_OscConfig+0x2ac>)
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052be:	d10b      	bne.n	80052d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052c0:	4b99      	ldr	r3, [pc, #612]	; (8005528 <HAL_RCC_OscConfig+0x2ac>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d05b      	beq.n	8005384 <HAL_RCC_OscConfig+0x108>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d157      	bne.n	8005384 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e236      	b.n	8005746 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052e0:	d106      	bne.n	80052f0 <HAL_RCC_OscConfig+0x74>
 80052e2:	4b91      	ldr	r3, [pc, #580]	; (8005528 <HAL_RCC_OscConfig+0x2ac>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a90      	ldr	r2, [pc, #576]	; (8005528 <HAL_RCC_OscConfig+0x2ac>)
 80052e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052ec:	6013      	str	r3, [r2, #0]
 80052ee:	e01d      	b.n	800532c <HAL_RCC_OscConfig+0xb0>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052f8:	d10c      	bne.n	8005314 <HAL_RCC_OscConfig+0x98>
 80052fa:	4b8b      	ldr	r3, [pc, #556]	; (8005528 <HAL_RCC_OscConfig+0x2ac>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a8a      	ldr	r2, [pc, #552]	; (8005528 <HAL_RCC_OscConfig+0x2ac>)
 8005300:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005304:	6013      	str	r3, [r2, #0]
 8005306:	4b88      	ldr	r3, [pc, #544]	; (8005528 <HAL_RCC_OscConfig+0x2ac>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a87      	ldr	r2, [pc, #540]	; (8005528 <HAL_RCC_OscConfig+0x2ac>)
 800530c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005310:	6013      	str	r3, [r2, #0]
 8005312:	e00b      	b.n	800532c <HAL_RCC_OscConfig+0xb0>
 8005314:	4b84      	ldr	r3, [pc, #528]	; (8005528 <HAL_RCC_OscConfig+0x2ac>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a83      	ldr	r2, [pc, #524]	; (8005528 <HAL_RCC_OscConfig+0x2ac>)
 800531a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800531e:	6013      	str	r3, [r2, #0]
 8005320:	4b81      	ldr	r3, [pc, #516]	; (8005528 <HAL_RCC_OscConfig+0x2ac>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a80      	ldr	r2, [pc, #512]	; (8005528 <HAL_RCC_OscConfig+0x2ac>)
 8005326:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800532a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d013      	beq.n	800535c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005334:	f7fe f9aa 	bl	800368c <HAL_GetTick>
 8005338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800533a:	e008      	b.n	800534e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800533c:	f7fe f9a6 	bl	800368c <HAL_GetTick>
 8005340:	4602      	mov	r2, r0
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	2b64      	cmp	r3, #100	; 0x64
 8005348:	d901      	bls.n	800534e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	e1fb      	b.n	8005746 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800534e:	4b76      	ldr	r3, [pc, #472]	; (8005528 <HAL_RCC_OscConfig+0x2ac>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005356:	2b00      	cmp	r3, #0
 8005358:	d0f0      	beq.n	800533c <HAL_RCC_OscConfig+0xc0>
 800535a:	e014      	b.n	8005386 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800535c:	f7fe f996 	bl	800368c <HAL_GetTick>
 8005360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005362:	e008      	b.n	8005376 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005364:	f7fe f992 	bl	800368c <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	2b64      	cmp	r3, #100	; 0x64
 8005370:	d901      	bls.n	8005376 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e1e7      	b.n	8005746 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005376:	4b6c      	ldr	r3, [pc, #432]	; (8005528 <HAL_RCC_OscConfig+0x2ac>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d1f0      	bne.n	8005364 <HAL_RCC_OscConfig+0xe8>
 8005382:	e000      	b.n	8005386 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005384:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 0302 	and.w	r3, r3, #2
 800538e:	2b00      	cmp	r3, #0
 8005390:	d063      	beq.n	800545a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005392:	4b65      	ldr	r3, [pc, #404]	; (8005528 <HAL_RCC_OscConfig+0x2ac>)
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	f003 030c 	and.w	r3, r3, #12
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00b      	beq.n	80053b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800539e:	4b62      	ldr	r3, [pc, #392]	; (8005528 <HAL_RCC_OscConfig+0x2ac>)
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053a6:	2b08      	cmp	r3, #8
 80053a8:	d11c      	bne.n	80053e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053aa:	4b5f      	ldr	r3, [pc, #380]	; (8005528 <HAL_RCC_OscConfig+0x2ac>)
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d116      	bne.n	80053e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053b6:	4b5c      	ldr	r3, [pc, #368]	; (8005528 <HAL_RCC_OscConfig+0x2ac>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 0302 	and.w	r3, r3, #2
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d005      	beq.n	80053ce <HAL_RCC_OscConfig+0x152>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d001      	beq.n	80053ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e1bb      	b.n	8005746 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053ce:	4b56      	ldr	r3, [pc, #344]	; (8005528 <HAL_RCC_OscConfig+0x2ac>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	00db      	lsls	r3, r3, #3
 80053dc:	4952      	ldr	r1, [pc, #328]	; (8005528 <HAL_RCC_OscConfig+0x2ac>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053e2:	e03a      	b.n	800545a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d020      	beq.n	800542e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053ec:	4b4f      	ldr	r3, [pc, #316]	; (800552c <HAL_RCC_OscConfig+0x2b0>)
 80053ee:	2201      	movs	r2, #1
 80053f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053f2:	f7fe f94b 	bl	800368c <HAL_GetTick>
 80053f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053f8:	e008      	b.n	800540c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053fa:	f7fe f947 	bl	800368c <HAL_GetTick>
 80053fe:	4602      	mov	r2, r0
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	2b02      	cmp	r3, #2
 8005406:	d901      	bls.n	800540c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005408:	2303      	movs	r3, #3
 800540a:	e19c      	b.n	8005746 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800540c:	4b46      	ldr	r3, [pc, #280]	; (8005528 <HAL_RCC_OscConfig+0x2ac>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0302 	and.w	r3, r3, #2
 8005414:	2b00      	cmp	r3, #0
 8005416:	d0f0      	beq.n	80053fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005418:	4b43      	ldr	r3, [pc, #268]	; (8005528 <HAL_RCC_OscConfig+0x2ac>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	00db      	lsls	r3, r3, #3
 8005426:	4940      	ldr	r1, [pc, #256]	; (8005528 <HAL_RCC_OscConfig+0x2ac>)
 8005428:	4313      	orrs	r3, r2
 800542a:	600b      	str	r3, [r1, #0]
 800542c:	e015      	b.n	800545a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800542e:	4b3f      	ldr	r3, [pc, #252]	; (800552c <HAL_RCC_OscConfig+0x2b0>)
 8005430:	2200      	movs	r2, #0
 8005432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005434:	f7fe f92a 	bl	800368c <HAL_GetTick>
 8005438:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800543a:	e008      	b.n	800544e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800543c:	f7fe f926 	bl	800368c <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	2b02      	cmp	r3, #2
 8005448:	d901      	bls.n	800544e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e17b      	b.n	8005746 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800544e:	4b36      	ldr	r3, [pc, #216]	; (8005528 <HAL_RCC_OscConfig+0x2ac>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0302 	and.w	r3, r3, #2
 8005456:	2b00      	cmp	r3, #0
 8005458:	d1f0      	bne.n	800543c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0308 	and.w	r3, r3, #8
 8005462:	2b00      	cmp	r3, #0
 8005464:	d030      	beq.n	80054c8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	695b      	ldr	r3, [r3, #20]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d016      	beq.n	800549c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800546e:	4b30      	ldr	r3, [pc, #192]	; (8005530 <HAL_RCC_OscConfig+0x2b4>)
 8005470:	2201      	movs	r2, #1
 8005472:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005474:	f7fe f90a 	bl	800368c <HAL_GetTick>
 8005478:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800547a:	e008      	b.n	800548e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800547c:	f7fe f906 	bl	800368c <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	2b02      	cmp	r3, #2
 8005488:	d901      	bls.n	800548e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e15b      	b.n	8005746 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800548e:	4b26      	ldr	r3, [pc, #152]	; (8005528 <HAL_RCC_OscConfig+0x2ac>)
 8005490:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005492:	f003 0302 	and.w	r3, r3, #2
 8005496:	2b00      	cmp	r3, #0
 8005498:	d0f0      	beq.n	800547c <HAL_RCC_OscConfig+0x200>
 800549a:	e015      	b.n	80054c8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800549c:	4b24      	ldr	r3, [pc, #144]	; (8005530 <HAL_RCC_OscConfig+0x2b4>)
 800549e:	2200      	movs	r2, #0
 80054a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054a2:	f7fe f8f3 	bl	800368c <HAL_GetTick>
 80054a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054a8:	e008      	b.n	80054bc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054aa:	f7fe f8ef 	bl	800368c <HAL_GetTick>
 80054ae:	4602      	mov	r2, r0
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d901      	bls.n	80054bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80054b8:	2303      	movs	r3, #3
 80054ba:	e144      	b.n	8005746 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054bc:	4b1a      	ldr	r3, [pc, #104]	; (8005528 <HAL_RCC_OscConfig+0x2ac>)
 80054be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054c0:	f003 0302 	and.w	r3, r3, #2
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1f0      	bne.n	80054aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0304 	and.w	r3, r3, #4
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f000 80a0 	beq.w	8005616 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054d6:	2300      	movs	r3, #0
 80054d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054da:	4b13      	ldr	r3, [pc, #76]	; (8005528 <HAL_RCC_OscConfig+0x2ac>)
 80054dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d10f      	bne.n	8005506 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054e6:	2300      	movs	r3, #0
 80054e8:	60bb      	str	r3, [r7, #8]
 80054ea:	4b0f      	ldr	r3, [pc, #60]	; (8005528 <HAL_RCC_OscConfig+0x2ac>)
 80054ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ee:	4a0e      	ldr	r2, [pc, #56]	; (8005528 <HAL_RCC_OscConfig+0x2ac>)
 80054f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054f4:	6413      	str	r3, [r2, #64]	; 0x40
 80054f6:	4b0c      	ldr	r3, [pc, #48]	; (8005528 <HAL_RCC_OscConfig+0x2ac>)
 80054f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054fe:	60bb      	str	r3, [r7, #8]
 8005500:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005502:	2301      	movs	r3, #1
 8005504:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005506:	4b0b      	ldr	r3, [pc, #44]	; (8005534 <HAL_RCC_OscConfig+0x2b8>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800550e:	2b00      	cmp	r3, #0
 8005510:	d121      	bne.n	8005556 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005512:	4b08      	ldr	r3, [pc, #32]	; (8005534 <HAL_RCC_OscConfig+0x2b8>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a07      	ldr	r2, [pc, #28]	; (8005534 <HAL_RCC_OscConfig+0x2b8>)
 8005518:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800551c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800551e:	f7fe f8b5 	bl	800368c <HAL_GetTick>
 8005522:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005524:	e011      	b.n	800554a <HAL_RCC_OscConfig+0x2ce>
 8005526:	bf00      	nop
 8005528:	40023800 	.word	0x40023800
 800552c:	42470000 	.word	0x42470000
 8005530:	42470e80 	.word	0x42470e80
 8005534:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005538:	f7fe f8a8 	bl	800368c <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	2b02      	cmp	r3, #2
 8005544:	d901      	bls.n	800554a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e0fd      	b.n	8005746 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800554a:	4b81      	ldr	r3, [pc, #516]	; (8005750 <HAL_RCC_OscConfig+0x4d4>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005552:	2b00      	cmp	r3, #0
 8005554:	d0f0      	beq.n	8005538 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	2b01      	cmp	r3, #1
 800555c:	d106      	bne.n	800556c <HAL_RCC_OscConfig+0x2f0>
 800555e:	4b7d      	ldr	r3, [pc, #500]	; (8005754 <HAL_RCC_OscConfig+0x4d8>)
 8005560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005562:	4a7c      	ldr	r2, [pc, #496]	; (8005754 <HAL_RCC_OscConfig+0x4d8>)
 8005564:	f043 0301 	orr.w	r3, r3, #1
 8005568:	6713      	str	r3, [r2, #112]	; 0x70
 800556a:	e01c      	b.n	80055a6 <HAL_RCC_OscConfig+0x32a>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	2b05      	cmp	r3, #5
 8005572:	d10c      	bne.n	800558e <HAL_RCC_OscConfig+0x312>
 8005574:	4b77      	ldr	r3, [pc, #476]	; (8005754 <HAL_RCC_OscConfig+0x4d8>)
 8005576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005578:	4a76      	ldr	r2, [pc, #472]	; (8005754 <HAL_RCC_OscConfig+0x4d8>)
 800557a:	f043 0304 	orr.w	r3, r3, #4
 800557e:	6713      	str	r3, [r2, #112]	; 0x70
 8005580:	4b74      	ldr	r3, [pc, #464]	; (8005754 <HAL_RCC_OscConfig+0x4d8>)
 8005582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005584:	4a73      	ldr	r2, [pc, #460]	; (8005754 <HAL_RCC_OscConfig+0x4d8>)
 8005586:	f043 0301 	orr.w	r3, r3, #1
 800558a:	6713      	str	r3, [r2, #112]	; 0x70
 800558c:	e00b      	b.n	80055a6 <HAL_RCC_OscConfig+0x32a>
 800558e:	4b71      	ldr	r3, [pc, #452]	; (8005754 <HAL_RCC_OscConfig+0x4d8>)
 8005590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005592:	4a70      	ldr	r2, [pc, #448]	; (8005754 <HAL_RCC_OscConfig+0x4d8>)
 8005594:	f023 0301 	bic.w	r3, r3, #1
 8005598:	6713      	str	r3, [r2, #112]	; 0x70
 800559a:	4b6e      	ldr	r3, [pc, #440]	; (8005754 <HAL_RCC_OscConfig+0x4d8>)
 800559c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800559e:	4a6d      	ldr	r2, [pc, #436]	; (8005754 <HAL_RCC_OscConfig+0x4d8>)
 80055a0:	f023 0304 	bic.w	r3, r3, #4
 80055a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d015      	beq.n	80055da <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055ae:	f7fe f86d 	bl	800368c <HAL_GetTick>
 80055b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055b4:	e00a      	b.n	80055cc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055b6:	f7fe f869 	bl	800368c <HAL_GetTick>
 80055ba:	4602      	mov	r2, r0
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d901      	bls.n	80055cc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	e0bc      	b.n	8005746 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055cc:	4b61      	ldr	r3, [pc, #388]	; (8005754 <HAL_RCC_OscConfig+0x4d8>)
 80055ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d0:	f003 0302 	and.w	r3, r3, #2
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d0ee      	beq.n	80055b6 <HAL_RCC_OscConfig+0x33a>
 80055d8:	e014      	b.n	8005604 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055da:	f7fe f857 	bl	800368c <HAL_GetTick>
 80055de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055e0:	e00a      	b.n	80055f8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055e2:	f7fe f853 	bl	800368c <HAL_GetTick>
 80055e6:	4602      	mov	r2, r0
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	1ad3      	subs	r3, r2, r3
 80055ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d901      	bls.n	80055f8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80055f4:	2303      	movs	r3, #3
 80055f6:	e0a6      	b.n	8005746 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055f8:	4b56      	ldr	r3, [pc, #344]	; (8005754 <HAL_RCC_OscConfig+0x4d8>)
 80055fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055fc:	f003 0302 	and.w	r3, r3, #2
 8005600:	2b00      	cmp	r3, #0
 8005602:	d1ee      	bne.n	80055e2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005604:	7dfb      	ldrb	r3, [r7, #23]
 8005606:	2b01      	cmp	r3, #1
 8005608:	d105      	bne.n	8005616 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800560a:	4b52      	ldr	r3, [pc, #328]	; (8005754 <HAL_RCC_OscConfig+0x4d8>)
 800560c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560e:	4a51      	ldr	r2, [pc, #324]	; (8005754 <HAL_RCC_OscConfig+0x4d8>)
 8005610:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005614:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	2b00      	cmp	r3, #0
 800561c:	f000 8092 	beq.w	8005744 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005620:	4b4c      	ldr	r3, [pc, #304]	; (8005754 <HAL_RCC_OscConfig+0x4d8>)
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	f003 030c 	and.w	r3, r3, #12
 8005628:	2b08      	cmp	r3, #8
 800562a:	d05c      	beq.n	80056e6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	699b      	ldr	r3, [r3, #24]
 8005630:	2b02      	cmp	r3, #2
 8005632:	d141      	bne.n	80056b8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005634:	4b48      	ldr	r3, [pc, #288]	; (8005758 <HAL_RCC_OscConfig+0x4dc>)
 8005636:	2200      	movs	r2, #0
 8005638:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800563a:	f7fe f827 	bl	800368c <HAL_GetTick>
 800563e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005640:	e008      	b.n	8005654 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005642:	f7fe f823 	bl	800368c <HAL_GetTick>
 8005646:	4602      	mov	r2, r0
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	2b02      	cmp	r3, #2
 800564e:	d901      	bls.n	8005654 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	e078      	b.n	8005746 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005654:	4b3f      	ldr	r3, [pc, #252]	; (8005754 <HAL_RCC_OscConfig+0x4d8>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800565c:	2b00      	cmp	r3, #0
 800565e:	d1f0      	bne.n	8005642 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	69da      	ldr	r2, [r3, #28]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a1b      	ldr	r3, [r3, #32]
 8005668:	431a      	orrs	r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566e:	019b      	lsls	r3, r3, #6
 8005670:	431a      	orrs	r2, r3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005676:	085b      	lsrs	r3, r3, #1
 8005678:	3b01      	subs	r3, #1
 800567a:	041b      	lsls	r3, r3, #16
 800567c:	431a      	orrs	r2, r3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005682:	061b      	lsls	r3, r3, #24
 8005684:	4933      	ldr	r1, [pc, #204]	; (8005754 <HAL_RCC_OscConfig+0x4d8>)
 8005686:	4313      	orrs	r3, r2
 8005688:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800568a:	4b33      	ldr	r3, [pc, #204]	; (8005758 <HAL_RCC_OscConfig+0x4dc>)
 800568c:	2201      	movs	r2, #1
 800568e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005690:	f7fd fffc 	bl	800368c <HAL_GetTick>
 8005694:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005696:	e008      	b.n	80056aa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005698:	f7fd fff8 	bl	800368c <HAL_GetTick>
 800569c:	4602      	mov	r2, r0
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d901      	bls.n	80056aa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e04d      	b.n	8005746 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056aa:	4b2a      	ldr	r3, [pc, #168]	; (8005754 <HAL_RCC_OscConfig+0x4d8>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d0f0      	beq.n	8005698 <HAL_RCC_OscConfig+0x41c>
 80056b6:	e045      	b.n	8005744 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056b8:	4b27      	ldr	r3, [pc, #156]	; (8005758 <HAL_RCC_OscConfig+0x4dc>)
 80056ba:	2200      	movs	r2, #0
 80056bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056be:	f7fd ffe5 	bl	800368c <HAL_GetTick>
 80056c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056c4:	e008      	b.n	80056d8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056c6:	f7fd ffe1 	bl	800368c <HAL_GetTick>
 80056ca:	4602      	mov	r2, r0
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	d901      	bls.n	80056d8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e036      	b.n	8005746 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056d8:	4b1e      	ldr	r3, [pc, #120]	; (8005754 <HAL_RCC_OscConfig+0x4d8>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1f0      	bne.n	80056c6 <HAL_RCC_OscConfig+0x44a>
 80056e4:	e02e      	b.n	8005744 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	699b      	ldr	r3, [r3, #24]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d101      	bne.n	80056f2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e029      	b.n	8005746 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80056f2:	4b18      	ldr	r3, [pc, #96]	; (8005754 <HAL_RCC_OscConfig+0x4d8>)
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	69db      	ldr	r3, [r3, #28]
 8005702:	429a      	cmp	r2, r3
 8005704:	d11c      	bne.n	8005740 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005710:	429a      	cmp	r2, r3
 8005712:	d115      	bne.n	8005740 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800571a:	4013      	ands	r3, r2
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005720:	4293      	cmp	r3, r2
 8005722:	d10d      	bne.n	8005740 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800572e:	429a      	cmp	r2, r3
 8005730:	d106      	bne.n	8005740 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800573c:	429a      	cmp	r2, r3
 800573e:	d001      	beq.n	8005744 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e000      	b.n	8005746 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3718      	adds	r7, #24
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	40007000 	.word	0x40007000
 8005754:	40023800 	.word	0x40023800
 8005758:	42470060 	.word	0x42470060

0800575c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d101      	bne.n	8005770 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e0cc      	b.n	800590a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005770:	4b68      	ldr	r3, [pc, #416]	; (8005914 <HAL_RCC_ClockConfig+0x1b8>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 030f 	and.w	r3, r3, #15
 8005778:	683a      	ldr	r2, [r7, #0]
 800577a:	429a      	cmp	r2, r3
 800577c:	d90c      	bls.n	8005798 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800577e:	4b65      	ldr	r3, [pc, #404]	; (8005914 <HAL_RCC_ClockConfig+0x1b8>)
 8005780:	683a      	ldr	r2, [r7, #0]
 8005782:	b2d2      	uxtb	r2, r2
 8005784:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005786:	4b63      	ldr	r3, [pc, #396]	; (8005914 <HAL_RCC_ClockConfig+0x1b8>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 030f 	and.w	r3, r3, #15
 800578e:	683a      	ldr	r2, [r7, #0]
 8005790:	429a      	cmp	r2, r3
 8005792:	d001      	beq.n	8005798 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e0b8      	b.n	800590a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0302 	and.w	r3, r3, #2
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d020      	beq.n	80057e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 0304 	and.w	r3, r3, #4
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d005      	beq.n	80057bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057b0:	4b59      	ldr	r3, [pc, #356]	; (8005918 <HAL_RCC_ClockConfig+0x1bc>)
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	4a58      	ldr	r2, [pc, #352]	; (8005918 <HAL_RCC_ClockConfig+0x1bc>)
 80057b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80057ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0308 	and.w	r3, r3, #8
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d005      	beq.n	80057d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80057c8:	4b53      	ldr	r3, [pc, #332]	; (8005918 <HAL_RCC_ClockConfig+0x1bc>)
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	4a52      	ldr	r2, [pc, #328]	; (8005918 <HAL_RCC_ClockConfig+0x1bc>)
 80057ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80057d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057d4:	4b50      	ldr	r3, [pc, #320]	; (8005918 <HAL_RCC_ClockConfig+0x1bc>)
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	494d      	ldr	r1, [pc, #308]	; (8005918 <HAL_RCC_ClockConfig+0x1bc>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 0301 	and.w	r3, r3, #1
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d044      	beq.n	800587c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d107      	bne.n	800580a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057fa:	4b47      	ldr	r3, [pc, #284]	; (8005918 <HAL_RCC_ClockConfig+0x1bc>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d119      	bne.n	800583a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e07f      	b.n	800590a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	2b02      	cmp	r3, #2
 8005810:	d003      	beq.n	800581a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005816:	2b03      	cmp	r3, #3
 8005818:	d107      	bne.n	800582a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800581a:	4b3f      	ldr	r3, [pc, #252]	; (8005918 <HAL_RCC_ClockConfig+0x1bc>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005822:	2b00      	cmp	r3, #0
 8005824:	d109      	bne.n	800583a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e06f      	b.n	800590a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800582a:	4b3b      	ldr	r3, [pc, #236]	; (8005918 <HAL_RCC_ClockConfig+0x1bc>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0302 	and.w	r3, r3, #2
 8005832:	2b00      	cmp	r3, #0
 8005834:	d101      	bne.n	800583a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e067      	b.n	800590a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800583a:	4b37      	ldr	r3, [pc, #220]	; (8005918 <HAL_RCC_ClockConfig+0x1bc>)
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	f023 0203 	bic.w	r2, r3, #3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	4934      	ldr	r1, [pc, #208]	; (8005918 <HAL_RCC_ClockConfig+0x1bc>)
 8005848:	4313      	orrs	r3, r2
 800584a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800584c:	f7fd ff1e 	bl	800368c <HAL_GetTick>
 8005850:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005852:	e00a      	b.n	800586a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005854:	f7fd ff1a 	bl	800368c <HAL_GetTick>
 8005858:	4602      	mov	r2, r0
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005862:	4293      	cmp	r3, r2
 8005864:	d901      	bls.n	800586a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e04f      	b.n	800590a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800586a:	4b2b      	ldr	r3, [pc, #172]	; (8005918 <HAL_RCC_ClockConfig+0x1bc>)
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	f003 020c 	and.w	r2, r3, #12
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	429a      	cmp	r2, r3
 800587a:	d1eb      	bne.n	8005854 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800587c:	4b25      	ldr	r3, [pc, #148]	; (8005914 <HAL_RCC_ClockConfig+0x1b8>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 030f 	and.w	r3, r3, #15
 8005884:	683a      	ldr	r2, [r7, #0]
 8005886:	429a      	cmp	r2, r3
 8005888:	d20c      	bcs.n	80058a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800588a:	4b22      	ldr	r3, [pc, #136]	; (8005914 <HAL_RCC_ClockConfig+0x1b8>)
 800588c:	683a      	ldr	r2, [r7, #0]
 800588e:	b2d2      	uxtb	r2, r2
 8005890:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005892:	4b20      	ldr	r3, [pc, #128]	; (8005914 <HAL_RCC_ClockConfig+0x1b8>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 030f 	and.w	r3, r3, #15
 800589a:	683a      	ldr	r2, [r7, #0]
 800589c:	429a      	cmp	r2, r3
 800589e:	d001      	beq.n	80058a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e032      	b.n	800590a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 0304 	and.w	r3, r3, #4
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d008      	beq.n	80058c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058b0:	4b19      	ldr	r3, [pc, #100]	; (8005918 <HAL_RCC_ClockConfig+0x1bc>)
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	4916      	ldr	r1, [pc, #88]	; (8005918 <HAL_RCC_ClockConfig+0x1bc>)
 80058be:	4313      	orrs	r3, r2
 80058c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 0308 	and.w	r3, r3, #8
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d009      	beq.n	80058e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058ce:	4b12      	ldr	r3, [pc, #72]	; (8005918 <HAL_RCC_ClockConfig+0x1bc>)
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	00db      	lsls	r3, r3, #3
 80058dc:	490e      	ldr	r1, [pc, #56]	; (8005918 <HAL_RCC_ClockConfig+0x1bc>)
 80058de:	4313      	orrs	r3, r2
 80058e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80058e2:	f000 f821 	bl	8005928 <HAL_RCC_GetSysClockFreq>
 80058e6:	4601      	mov	r1, r0
 80058e8:	4b0b      	ldr	r3, [pc, #44]	; (8005918 <HAL_RCC_ClockConfig+0x1bc>)
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	091b      	lsrs	r3, r3, #4
 80058ee:	f003 030f 	and.w	r3, r3, #15
 80058f2:	4a0a      	ldr	r2, [pc, #40]	; (800591c <HAL_RCC_ClockConfig+0x1c0>)
 80058f4:	5cd3      	ldrb	r3, [r2, r3]
 80058f6:	fa21 f303 	lsr.w	r3, r1, r3
 80058fa:	4a09      	ldr	r2, [pc, #36]	; (8005920 <HAL_RCC_ClockConfig+0x1c4>)
 80058fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80058fe:	4b09      	ldr	r3, [pc, #36]	; (8005924 <HAL_RCC_ClockConfig+0x1c8>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4618      	mov	r0, r3
 8005904:	f7fd fe7e 	bl	8003604 <HAL_InitTick>

  return HAL_OK;
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	3710      	adds	r7, #16
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	40023c00 	.word	0x40023c00
 8005918:	40023800 	.word	0x40023800
 800591c:	0800ae48 	.word	0x0800ae48
 8005920:	20000004 	.word	0x20000004
 8005924:	20000008 	.word	0x20000008

08005928 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800592a:	b085      	sub	sp, #20
 800592c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800592e:	2300      	movs	r3, #0
 8005930:	607b      	str	r3, [r7, #4]
 8005932:	2300      	movs	r3, #0
 8005934:	60fb      	str	r3, [r7, #12]
 8005936:	2300      	movs	r3, #0
 8005938:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800593a:	2300      	movs	r3, #0
 800593c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800593e:	4b50      	ldr	r3, [pc, #320]	; (8005a80 <HAL_RCC_GetSysClockFreq+0x158>)
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	f003 030c 	and.w	r3, r3, #12
 8005946:	2b04      	cmp	r3, #4
 8005948:	d007      	beq.n	800595a <HAL_RCC_GetSysClockFreq+0x32>
 800594a:	2b08      	cmp	r3, #8
 800594c:	d008      	beq.n	8005960 <HAL_RCC_GetSysClockFreq+0x38>
 800594e:	2b00      	cmp	r3, #0
 8005950:	f040 808d 	bne.w	8005a6e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005954:	4b4b      	ldr	r3, [pc, #300]	; (8005a84 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005956:	60bb      	str	r3, [r7, #8]
       break;
 8005958:	e08c      	b.n	8005a74 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800595a:	4b4b      	ldr	r3, [pc, #300]	; (8005a88 <HAL_RCC_GetSysClockFreq+0x160>)
 800595c:	60bb      	str	r3, [r7, #8]
      break;
 800595e:	e089      	b.n	8005a74 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005960:	4b47      	ldr	r3, [pc, #284]	; (8005a80 <HAL_RCC_GetSysClockFreq+0x158>)
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005968:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800596a:	4b45      	ldr	r3, [pc, #276]	; (8005a80 <HAL_RCC_GetSysClockFreq+0x158>)
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005972:	2b00      	cmp	r3, #0
 8005974:	d023      	beq.n	80059be <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005976:	4b42      	ldr	r3, [pc, #264]	; (8005a80 <HAL_RCC_GetSysClockFreq+0x158>)
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	099b      	lsrs	r3, r3, #6
 800597c:	f04f 0400 	mov.w	r4, #0
 8005980:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005984:	f04f 0200 	mov.w	r2, #0
 8005988:	ea03 0501 	and.w	r5, r3, r1
 800598c:	ea04 0602 	and.w	r6, r4, r2
 8005990:	4a3d      	ldr	r2, [pc, #244]	; (8005a88 <HAL_RCC_GetSysClockFreq+0x160>)
 8005992:	fb02 f106 	mul.w	r1, r2, r6
 8005996:	2200      	movs	r2, #0
 8005998:	fb02 f205 	mul.w	r2, r2, r5
 800599c:	440a      	add	r2, r1
 800599e:	493a      	ldr	r1, [pc, #232]	; (8005a88 <HAL_RCC_GetSysClockFreq+0x160>)
 80059a0:	fba5 0101 	umull	r0, r1, r5, r1
 80059a4:	1853      	adds	r3, r2, r1
 80059a6:	4619      	mov	r1, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f04f 0400 	mov.w	r4, #0
 80059ae:	461a      	mov	r2, r3
 80059b0:	4623      	mov	r3, r4
 80059b2:	f7fb f9a9 	bl	8000d08 <__aeabi_uldivmod>
 80059b6:	4603      	mov	r3, r0
 80059b8:	460c      	mov	r4, r1
 80059ba:	60fb      	str	r3, [r7, #12]
 80059bc:	e049      	b.n	8005a52 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059be:	4b30      	ldr	r3, [pc, #192]	; (8005a80 <HAL_RCC_GetSysClockFreq+0x158>)
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	099b      	lsrs	r3, r3, #6
 80059c4:	f04f 0400 	mov.w	r4, #0
 80059c8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80059cc:	f04f 0200 	mov.w	r2, #0
 80059d0:	ea03 0501 	and.w	r5, r3, r1
 80059d4:	ea04 0602 	and.w	r6, r4, r2
 80059d8:	4629      	mov	r1, r5
 80059da:	4632      	mov	r2, r6
 80059dc:	f04f 0300 	mov.w	r3, #0
 80059e0:	f04f 0400 	mov.w	r4, #0
 80059e4:	0154      	lsls	r4, r2, #5
 80059e6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80059ea:	014b      	lsls	r3, r1, #5
 80059ec:	4619      	mov	r1, r3
 80059ee:	4622      	mov	r2, r4
 80059f0:	1b49      	subs	r1, r1, r5
 80059f2:	eb62 0206 	sbc.w	r2, r2, r6
 80059f6:	f04f 0300 	mov.w	r3, #0
 80059fa:	f04f 0400 	mov.w	r4, #0
 80059fe:	0194      	lsls	r4, r2, #6
 8005a00:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005a04:	018b      	lsls	r3, r1, #6
 8005a06:	1a5b      	subs	r3, r3, r1
 8005a08:	eb64 0402 	sbc.w	r4, r4, r2
 8005a0c:	f04f 0100 	mov.w	r1, #0
 8005a10:	f04f 0200 	mov.w	r2, #0
 8005a14:	00e2      	lsls	r2, r4, #3
 8005a16:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005a1a:	00d9      	lsls	r1, r3, #3
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	4614      	mov	r4, r2
 8005a20:	195b      	adds	r3, r3, r5
 8005a22:	eb44 0406 	adc.w	r4, r4, r6
 8005a26:	f04f 0100 	mov.w	r1, #0
 8005a2a:	f04f 0200 	mov.w	r2, #0
 8005a2e:	02a2      	lsls	r2, r4, #10
 8005a30:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005a34:	0299      	lsls	r1, r3, #10
 8005a36:	460b      	mov	r3, r1
 8005a38:	4614      	mov	r4, r2
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	4621      	mov	r1, r4
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f04f 0400 	mov.w	r4, #0
 8005a44:	461a      	mov	r2, r3
 8005a46:	4623      	mov	r3, r4
 8005a48:	f7fb f95e 	bl	8000d08 <__aeabi_uldivmod>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	460c      	mov	r4, r1
 8005a50:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005a52:	4b0b      	ldr	r3, [pc, #44]	; (8005a80 <HAL_RCC_GetSysClockFreq+0x158>)
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	0c1b      	lsrs	r3, r3, #16
 8005a58:	f003 0303 	and.w	r3, r3, #3
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	005b      	lsls	r3, r3, #1
 8005a60:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a6a:	60bb      	str	r3, [r7, #8]
      break;
 8005a6c:	e002      	b.n	8005a74 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a6e:	4b05      	ldr	r3, [pc, #20]	; (8005a84 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005a70:	60bb      	str	r3, [r7, #8]
      break;
 8005a72:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a74:	68bb      	ldr	r3, [r7, #8]
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3714      	adds	r7, #20
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	40023800 	.word	0x40023800
 8005a84:	00f42400 	.word	0x00f42400
 8005a88:	017d7840 	.word	0x017d7840

08005a8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a90:	4b03      	ldr	r3, [pc, #12]	; (8005aa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a92:	681b      	ldr	r3, [r3, #0]
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr
 8005a9e:	bf00      	nop
 8005aa0:	20000004 	.word	0x20000004

08005aa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005aa8:	f7ff fff0 	bl	8005a8c <HAL_RCC_GetHCLKFreq>
 8005aac:	4601      	mov	r1, r0
 8005aae:	4b05      	ldr	r3, [pc, #20]	; (8005ac4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	0a9b      	lsrs	r3, r3, #10
 8005ab4:	f003 0307 	and.w	r3, r3, #7
 8005ab8:	4a03      	ldr	r2, [pc, #12]	; (8005ac8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005aba:	5cd3      	ldrb	r3, [r2, r3]
 8005abc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	40023800 	.word	0x40023800
 8005ac8:	0800ae58 	.word	0x0800ae58

08005acc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005ad0:	f7ff ffdc 	bl	8005a8c <HAL_RCC_GetHCLKFreq>
 8005ad4:	4601      	mov	r1, r0
 8005ad6:	4b05      	ldr	r3, [pc, #20]	; (8005aec <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	0b5b      	lsrs	r3, r3, #13
 8005adc:	f003 0307 	and.w	r3, r3, #7
 8005ae0:	4a03      	ldr	r2, [pc, #12]	; (8005af0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ae2:	5cd3      	ldrb	r3, [r2, r3]
 8005ae4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	bd80      	pop	{r7, pc}
 8005aec:	40023800 	.word	0x40023800
 8005af0:	0800ae58 	.word	0x0800ae58

08005af4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d101      	bne.n	8005b06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e01d      	b.n	8005b42 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d106      	bne.n	8005b20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f7fd fa6e 	bl	8002ffc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2202      	movs	r2, #2
 8005b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	3304      	adds	r3, #4
 8005b30:	4619      	mov	r1, r3
 8005b32:	4610      	mov	r0, r2
 8005b34:	f000 fd1a 	bl	800656c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3708      	adds	r7, #8
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}

08005b4a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b4a:	b480      	push	{r7}
 8005b4c:	b085      	sub	sp, #20
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68da      	ldr	r2, [r3, #12]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f042 0201 	orr.w	r2, r2, #1
 8005b60:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	f003 0307 	and.w	r3, r3, #7
 8005b6c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2b06      	cmp	r3, #6
 8005b72:	d007      	beq.n	8005b84 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f042 0201 	orr.w	r2, r2, #1
 8005b82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3714      	adds	r7, #20
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr

08005b92 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b92:	b580      	push	{r7, lr}
 8005b94:	b082      	sub	sp, #8
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d101      	bne.n	8005ba4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e01d      	b.n	8005be0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d106      	bne.n	8005bbe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 f815 	bl	8005be8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2202      	movs	r2, #2
 8005bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	3304      	adds	r3, #4
 8005bce:	4619      	mov	r1, r3
 8005bd0:	4610      	mov	r0, r2
 8005bd2:	f000 fccb 	bl	800656c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2201      	movs	r2, #1
 8005bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bde:	2300      	movs	r3, #0
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3708      	adds	r7, #8
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005bf0:	bf00      	nop
 8005bf2:	370c      	adds	r7, #12
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	6839      	ldr	r1, [r7, #0]
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f001 f8c0 	bl	8006d94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a15      	ldr	r2, [pc, #84]	; (8005c70 <HAL_TIM_PWM_Start+0x74>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d004      	beq.n	8005c28 <HAL_TIM_PWM_Start+0x2c>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a14      	ldr	r2, [pc, #80]	; (8005c74 <HAL_TIM_PWM_Start+0x78>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d101      	bne.n	8005c2c <HAL_TIM_PWM_Start+0x30>
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e000      	b.n	8005c2e <HAL_TIM_PWM_Start+0x32>
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d007      	beq.n	8005c42 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f003 0307 	and.w	r3, r3, #7
 8005c4c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2b06      	cmp	r3, #6
 8005c52:	d007      	beq.n	8005c64 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f042 0201 	orr.w	r2, r2, #1
 8005c62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3710      	adds	r7, #16
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	40010000 	.word	0x40010000
 8005c74:	40010400 	.word	0x40010400

08005c78 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2200      	movs	r2, #0
 8005c88:	6839      	ldr	r1, [r7, #0]
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f001 f882 	bl	8006d94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a22      	ldr	r2, [pc, #136]	; (8005d20 <HAL_TIM_PWM_Stop+0xa8>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d004      	beq.n	8005ca4 <HAL_TIM_PWM_Stop+0x2c>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a21      	ldr	r2, [pc, #132]	; (8005d24 <HAL_TIM_PWM_Stop+0xac>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d101      	bne.n	8005ca8 <HAL_TIM_PWM_Stop+0x30>
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e000      	b.n	8005caa <HAL_TIM_PWM_Stop+0x32>
 8005ca8:	2300      	movs	r3, #0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d017      	beq.n	8005cde <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	6a1a      	ldr	r2, [r3, #32]
 8005cb4:	f241 1311 	movw	r3, #4369	; 0x1111
 8005cb8:	4013      	ands	r3, r2
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d10f      	bne.n	8005cde <HAL_TIM_PWM_Stop+0x66>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	6a1a      	ldr	r2, [r3, #32]
 8005cc4:	f240 4344 	movw	r3, #1092	; 0x444
 8005cc8:	4013      	ands	r3, r2
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d107      	bne.n	8005cde <HAL_TIM_PWM_Stop+0x66>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005cdc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	6a1a      	ldr	r2, [r3, #32]
 8005ce4:	f241 1311 	movw	r3, #4369	; 0x1111
 8005ce8:	4013      	ands	r3, r2
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d10f      	bne.n	8005d0e <HAL_TIM_PWM_Stop+0x96>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	6a1a      	ldr	r2, [r3, #32]
 8005cf4:	f240 4344 	movw	r3, #1092	; 0x444
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d107      	bne.n	8005d0e <HAL_TIM_PWM_Stop+0x96>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f022 0201 	bic.w	r2, r2, #1
 8005d0c:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2201      	movs	r2, #1
 8005d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005d16:	2300      	movs	r3, #0
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3708      	adds	r7, #8
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}
 8005d20:	40010000 	.word	0x40010000
 8005d24:	40010400 	.word	0x40010400

08005d28 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d101      	bne.n	8005d3a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e01d      	b.n	8005d76 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d106      	bne.n	8005d54 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 f815 	bl	8005d7e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2202      	movs	r2, #2
 8005d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	3304      	adds	r3, #4
 8005d64:	4619      	mov	r1, r3
 8005d66:	4610      	mov	r0, r2
 8005d68:	f000 fc00 	bl	800656c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3708      	adds	r7, #8
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}

08005d7e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005d7e:	b480      	push	{r7}
 8005d80:	b083      	sub	sp, #12
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005d86:	bf00      	nop
 8005d88:	370c      	adds	r7, #12
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
	...

08005d94 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	2b0c      	cmp	r3, #12
 8005da2:	d841      	bhi.n	8005e28 <HAL_TIM_IC_Start_IT+0x94>
 8005da4:	a201      	add	r2, pc, #4	; (adr r2, 8005dac <HAL_TIM_IC_Start_IT+0x18>)
 8005da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005daa:	bf00      	nop
 8005dac:	08005de1 	.word	0x08005de1
 8005db0:	08005e29 	.word	0x08005e29
 8005db4:	08005e29 	.word	0x08005e29
 8005db8:	08005e29 	.word	0x08005e29
 8005dbc:	08005df3 	.word	0x08005df3
 8005dc0:	08005e29 	.word	0x08005e29
 8005dc4:	08005e29 	.word	0x08005e29
 8005dc8:	08005e29 	.word	0x08005e29
 8005dcc:	08005e05 	.word	0x08005e05
 8005dd0:	08005e29 	.word	0x08005e29
 8005dd4:	08005e29 	.word	0x08005e29
 8005dd8:	08005e29 	.word	0x08005e29
 8005ddc:	08005e17 	.word	0x08005e17
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68da      	ldr	r2, [r3, #12]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f042 0202 	orr.w	r2, r2, #2
 8005dee:	60da      	str	r2, [r3, #12]
      break;
 8005df0:	e01b      	b.n	8005e2a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68da      	ldr	r2, [r3, #12]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f042 0204 	orr.w	r2, r2, #4
 8005e00:	60da      	str	r2, [r3, #12]
      break;
 8005e02:	e012      	b.n	8005e2a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	68da      	ldr	r2, [r3, #12]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f042 0208 	orr.w	r2, r2, #8
 8005e12:	60da      	str	r2, [r3, #12]
      break;
 8005e14:	e009      	b.n	8005e2a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68da      	ldr	r2, [r3, #12]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f042 0210 	orr.w	r2, r2, #16
 8005e24:	60da      	str	r2, [r3, #12]
      break;
 8005e26:	e000      	b.n	8005e2a <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8005e28:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	6839      	ldr	r1, [r7, #0]
 8005e32:	4618      	mov	r0, r3
 8005e34:	f000 ffae 	bl	8006d94 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	f003 0307 	and.w	r3, r3, #7
 8005e42:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2b06      	cmp	r3, #6
 8005e48:	d007      	beq.n	8005e5a <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f042 0201 	orr.w	r2, r2, #1
 8005e58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e5a:	2300      	movs	r3, #0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3710      	adds	r7, #16
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b082      	sub	sp, #8
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	f003 0302 	and.w	r3, r3, #2
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	d122      	bne.n	8005ec0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	f003 0302 	and.w	r3, r3, #2
 8005e84:	2b02      	cmp	r3, #2
 8005e86:	d11b      	bne.n	8005ec0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f06f 0202 	mvn.w	r2, #2
 8005e90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2201      	movs	r2, #1
 8005e96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	699b      	ldr	r3, [r3, #24]
 8005e9e:	f003 0303 	and.w	r3, r3, #3
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d003      	beq.n	8005eae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f7fc fed2 	bl	8002c50 <HAL_TIM_IC_CaptureCallback>
 8005eac:	e005      	b.n	8005eba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 fb3e 	bl	8006530 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 fb45 	bl	8006544 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	f003 0304 	and.w	r3, r3, #4
 8005eca:	2b04      	cmp	r3, #4
 8005ecc:	d122      	bne.n	8005f14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	f003 0304 	and.w	r3, r3, #4
 8005ed8:	2b04      	cmp	r3, #4
 8005eda:	d11b      	bne.n	8005f14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f06f 0204 	mvn.w	r2, #4
 8005ee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2202      	movs	r2, #2
 8005eea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	699b      	ldr	r3, [r3, #24]
 8005ef2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d003      	beq.n	8005f02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f7fc fea8 	bl	8002c50 <HAL_TIM_IC_CaptureCallback>
 8005f00:	e005      	b.n	8005f0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 fb14 	bl	8006530 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 fb1b 	bl	8006544 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	f003 0308 	and.w	r3, r3, #8
 8005f1e:	2b08      	cmp	r3, #8
 8005f20:	d122      	bne.n	8005f68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	f003 0308 	and.w	r3, r3, #8
 8005f2c:	2b08      	cmp	r3, #8
 8005f2e:	d11b      	bne.n	8005f68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f06f 0208 	mvn.w	r2, #8
 8005f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2204      	movs	r2, #4
 8005f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	69db      	ldr	r3, [r3, #28]
 8005f46:	f003 0303 	and.w	r3, r3, #3
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d003      	beq.n	8005f56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f7fc fe7e 	bl	8002c50 <HAL_TIM_IC_CaptureCallback>
 8005f54:	e005      	b.n	8005f62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 faea 	bl	8006530 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 faf1 	bl	8006544 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	f003 0310 	and.w	r3, r3, #16
 8005f72:	2b10      	cmp	r3, #16
 8005f74:	d122      	bne.n	8005fbc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	f003 0310 	and.w	r3, r3, #16
 8005f80:	2b10      	cmp	r3, #16
 8005f82:	d11b      	bne.n	8005fbc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f06f 0210 	mvn.w	r2, #16
 8005f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2208      	movs	r2, #8
 8005f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	69db      	ldr	r3, [r3, #28]
 8005f9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d003      	beq.n	8005faa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f7fc fe54 	bl	8002c50 <HAL_TIM_IC_CaptureCallback>
 8005fa8:	e005      	b.n	8005fb6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 fac0 	bl	8006530 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 fac7 	bl	8006544 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	f003 0301 	and.w	r3, r3, #1
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d10e      	bne.n	8005fe8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	f003 0301 	and.w	r3, r3, #1
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d107      	bne.n	8005fe8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f06f 0201 	mvn.w	r2, #1
 8005fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f7fc fe70 	bl	8002cc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ff2:	2b80      	cmp	r3, #128	; 0x80
 8005ff4:	d10e      	bne.n	8006014 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006000:	2b80      	cmp	r3, #128	; 0x80
 8006002:	d107      	bne.n	8006014 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800600c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 ff6c 	bl	8006eec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800601e:	2b40      	cmp	r3, #64	; 0x40
 8006020:	d10e      	bne.n	8006040 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800602c:	2b40      	cmp	r3, #64	; 0x40
 800602e:	d107      	bne.n	8006040 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 fa8c 	bl	8006558 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	f003 0320 	and.w	r3, r3, #32
 800604a:	2b20      	cmp	r3, #32
 800604c:	d10e      	bne.n	800606c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	f003 0320 	and.w	r3, r3, #32
 8006058:	2b20      	cmp	r3, #32
 800605a:	d107      	bne.n	800606c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f06f 0220 	mvn.w	r2, #32
 8006064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 ff36 	bl	8006ed8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800606c:	bf00      	nop
 800606e:	3708      	adds	r7, #8
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b084      	sub	sp, #16
 8006078:	af00      	add	r7, sp, #0
 800607a:	60f8      	str	r0, [r7, #12]
 800607c:	60b9      	str	r1, [r7, #8]
 800607e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006086:	2b01      	cmp	r3, #1
 8006088:	d101      	bne.n	800608e <HAL_TIM_IC_ConfigChannel+0x1a>
 800608a:	2302      	movs	r3, #2
 800608c:	e08a      	b.n	80061a4 <HAL_TIM_IC_ConfigChannel+0x130>
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2201      	movs	r2, #1
 8006092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2202      	movs	r2, #2
 800609a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d11b      	bne.n	80060dc <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	6818      	ldr	r0, [r3, #0]
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	6819      	ldr	r1, [r3, #0]
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	685a      	ldr	r2, [r3, #4]
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	f000 fcaa 	bl	8006a0c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	699a      	ldr	r2, [r3, #24]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f022 020c 	bic.w	r2, r2, #12
 80060c6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	6999      	ldr	r1, [r3, #24]
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	689a      	ldr	r2, [r3, #8]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	430a      	orrs	r2, r1
 80060d8:	619a      	str	r2, [r3, #24]
 80060da:	e05a      	b.n	8006192 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2b04      	cmp	r3, #4
 80060e0:	d11c      	bne.n	800611c <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6818      	ldr	r0, [r3, #0]
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	6819      	ldr	r1, [r3, #0]
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	685a      	ldr	r2, [r3, #4]
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	f000 fd2e 	bl	8006b52 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	699a      	ldr	r2, [r3, #24]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006104:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	6999      	ldr	r1, [r3, #24]
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	021a      	lsls	r2, r3, #8
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	430a      	orrs	r2, r1
 8006118:	619a      	str	r2, [r3, #24]
 800611a:	e03a      	b.n	8006192 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2b08      	cmp	r3, #8
 8006120:	d11b      	bne.n	800615a <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6818      	ldr	r0, [r3, #0]
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	6819      	ldr	r1, [r3, #0]
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	685a      	ldr	r2, [r3, #4]
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	f000 fd7b 	bl	8006c2c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	69da      	ldr	r2, [r3, #28]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f022 020c 	bic.w	r2, r2, #12
 8006144:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	69d9      	ldr	r1, [r3, #28]
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	689a      	ldr	r2, [r3, #8]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	430a      	orrs	r2, r1
 8006156:	61da      	str	r2, [r3, #28]
 8006158:	e01b      	b.n	8006192 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	6818      	ldr	r0, [r3, #0]
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	6819      	ldr	r1, [r3, #0]
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	685a      	ldr	r2, [r3, #4]
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	f000 fd9b 	bl	8006ca4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	69da      	ldr	r2, [r3, #28]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800617c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	69d9      	ldr	r1, [r3, #28]
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	021a      	lsls	r2, r3, #8
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	430a      	orrs	r2, r1
 8006190:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2201      	movs	r2, #1
 8006196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2200      	movs	r2, #0
 800619e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3710      	adds	r7, #16
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d101      	bne.n	80061c6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80061c2:	2302      	movs	r3, #2
 80061c4:	e0b4      	b.n	8006330 <HAL_TIM_PWM_ConfigChannel+0x184>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2201      	movs	r2, #1
 80061ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2202      	movs	r2, #2
 80061d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2b0c      	cmp	r3, #12
 80061da:	f200 809f 	bhi.w	800631c <HAL_TIM_PWM_ConfigChannel+0x170>
 80061de:	a201      	add	r2, pc, #4	; (adr r2, 80061e4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80061e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e4:	08006219 	.word	0x08006219
 80061e8:	0800631d 	.word	0x0800631d
 80061ec:	0800631d 	.word	0x0800631d
 80061f0:	0800631d 	.word	0x0800631d
 80061f4:	08006259 	.word	0x08006259
 80061f8:	0800631d 	.word	0x0800631d
 80061fc:	0800631d 	.word	0x0800631d
 8006200:	0800631d 	.word	0x0800631d
 8006204:	0800629b 	.word	0x0800629b
 8006208:	0800631d 	.word	0x0800631d
 800620c:	0800631d 	.word	0x0800631d
 8006210:	0800631d 	.word	0x0800631d
 8006214:	080062db 	.word	0x080062db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	68b9      	ldr	r1, [r7, #8]
 800621e:	4618      	mov	r0, r3
 8006220:	f000 fa44 	bl	80066ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	699a      	ldr	r2, [r3, #24]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f042 0208 	orr.w	r2, r2, #8
 8006232:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	699a      	ldr	r2, [r3, #24]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f022 0204 	bic.w	r2, r2, #4
 8006242:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	6999      	ldr	r1, [r3, #24]
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	691a      	ldr	r2, [r3, #16]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	430a      	orrs	r2, r1
 8006254:	619a      	str	r2, [r3, #24]
      break;
 8006256:	e062      	b.n	800631e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68b9      	ldr	r1, [r7, #8]
 800625e:	4618      	mov	r0, r3
 8006260:	f000 fa94 	bl	800678c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	699a      	ldr	r2, [r3, #24]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006272:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	699a      	ldr	r2, [r3, #24]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006282:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	6999      	ldr	r1, [r3, #24]
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	021a      	lsls	r2, r3, #8
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	430a      	orrs	r2, r1
 8006296:	619a      	str	r2, [r3, #24]
      break;
 8006298:	e041      	b.n	800631e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	68b9      	ldr	r1, [r7, #8]
 80062a0:	4618      	mov	r0, r3
 80062a2:	f000 fae9 	bl	8006878 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	69da      	ldr	r2, [r3, #28]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f042 0208 	orr.w	r2, r2, #8
 80062b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	69da      	ldr	r2, [r3, #28]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f022 0204 	bic.w	r2, r2, #4
 80062c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	69d9      	ldr	r1, [r3, #28]
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	691a      	ldr	r2, [r3, #16]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	430a      	orrs	r2, r1
 80062d6:	61da      	str	r2, [r3, #28]
      break;
 80062d8:	e021      	b.n	800631e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68b9      	ldr	r1, [r7, #8]
 80062e0:	4618      	mov	r0, r3
 80062e2:	f000 fb3d 	bl	8006960 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	69da      	ldr	r2, [r3, #28]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	69da      	ldr	r2, [r3, #28]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006304:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	69d9      	ldr	r1, [r3, #28]
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	021a      	lsls	r2, r3, #8
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	430a      	orrs	r2, r1
 8006318:	61da      	str	r2, [r3, #28]
      break;
 800631a:	e000      	b.n	800631e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800631c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2201      	movs	r2, #1
 8006322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2200      	movs	r2, #0
 800632a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800632e:	2300      	movs	r3, #0
}
 8006330:	4618      	mov	r0, r3
 8006332:	3710      	adds	r7, #16
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b084      	sub	sp, #16
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006348:	2b01      	cmp	r3, #1
 800634a:	d101      	bne.n	8006350 <HAL_TIM_ConfigClockSource+0x18>
 800634c:	2302      	movs	r3, #2
 800634e:	e0a6      	b.n	800649e <HAL_TIM_ConfigClockSource+0x166>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2202      	movs	r2, #2
 800635c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800636e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006376:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68fa      	ldr	r2, [r7, #12]
 800637e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2b40      	cmp	r3, #64	; 0x40
 8006386:	d067      	beq.n	8006458 <HAL_TIM_ConfigClockSource+0x120>
 8006388:	2b40      	cmp	r3, #64	; 0x40
 800638a:	d80b      	bhi.n	80063a4 <HAL_TIM_ConfigClockSource+0x6c>
 800638c:	2b10      	cmp	r3, #16
 800638e:	d073      	beq.n	8006478 <HAL_TIM_ConfigClockSource+0x140>
 8006390:	2b10      	cmp	r3, #16
 8006392:	d802      	bhi.n	800639a <HAL_TIM_ConfigClockSource+0x62>
 8006394:	2b00      	cmp	r3, #0
 8006396:	d06f      	beq.n	8006478 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006398:	e078      	b.n	800648c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800639a:	2b20      	cmp	r3, #32
 800639c:	d06c      	beq.n	8006478 <HAL_TIM_ConfigClockSource+0x140>
 800639e:	2b30      	cmp	r3, #48	; 0x30
 80063a0:	d06a      	beq.n	8006478 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80063a2:	e073      	b.n	800648c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80063a4:	2b70      	cmp	r3, #112	; 0x70
 80063a6:	d00d      	beq.n	80063c4 <HAL_TIM_ConfigClockSource+0x8c>
 80063a8:	2b70      	cmp	r3, #112	; 0x70
 80063aa:	d804      	bhi.n	80063b6 <HAL_TIM_ConfigClockSource+0x7e>
 80063ac:	2b50      	cmp	r3, #80	; 0x50
 80063ae:	d033      	beq.n	8006418 <HAL_TIM_ConfigClockSource+0xe0>
 80063b0:	2b60      	cmp	r3, #96	; 0x60
 80063b2:	d041      	beq.n	8006438 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80063b4:	e06a      	b.n	800648c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80063b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063ba:	d066      	beq.n	800648a <HAL_TIM_ConfigClockSource+0x152>
 80063bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063c0:	d017      	beq.n	80063f2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80063c2:	e063      	b.n	800648c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6818      	ldr	r0, [r3, #0]
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	6899      	ldr	r1, [r3, #8]
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	685a      	ldr	r2, [r3, #4]
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	f000 fcbe 	bl	8006d54 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80063e6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	68fa      	ldr	r2, [r7, #12]
 80063ee:	609a      	str	r2, [r3, #8]
      break;
 80063f0:	e04c      	b.n	800648c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6818      	ldr	r0, [r3, #0]
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	6899      	ldr	r1, [r3, #8]
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	685a      	ldr	r2, [r3, #4]
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	f000 fca7 	bl	8006d54 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	689a      	ldr	r2, [r3, #8]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006414:	609a      	str	r2, [r3, #8]
      break;
 8006416:	e039      	b.n	800648c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6818      	ldr	r0, [r3, #0]
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	6859      	ldr	r1, [r3, #4]
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	461a      	mov	r2, r3
 8006426:	f000 fb65 	bl	8006af4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2150      	movs	r1, #80	; 0x50
 8006430:	4618      	mov	r0, r3
 8006432:	f000 fc74 	bl	8006d1e <TIM_ITRx_SetConfig>
      break;
 8006436:	e029      	b.n	800648c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6818      	ldr	r0, [r3, #0]
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	6859      	ldr	r1, [r3, #4]
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	461a      	mov	r2, r3
 8006446:	f000 fbc1 	bl	8006bcc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2160      	movs	r1, #96	; 0x60
 8006450:	4618      	mov	r0, r3
 8006452:	f000 fc64 	bl	8006d1e <TIM_ITRx_SetConfig>
      break;
 8006456:	e019      	b.n	800648c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6818      	ldr	r0, [r3, #0]
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	6859      	ldr	r1, [r3, #4]
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	461a      	mov	r2, r3
 8006466:	f000 fb45 	bl	8006af4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2140      	movs	r1, #64	; 0x40
 8006470:	4618      	mov	r0, r3
 8006472:	f000 fc54 	bl	8006d1e <TIM_ITRx_SetConfig>
      break;
 8006476:	e009      	b.n	800648c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4619      	mov	r1, r3
 8006482:	4610      	mov	r0, r2
 8006484:	f000 fc4b 	bl	8006d1e <TIM_ITRx_SetConfig>
      break;
 8006488:	e000      	b.n	800648c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800648a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3710      	adds	r7, #16
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
	...

080064a8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80064b2:	2300      	movs	r3, #0
 80064b4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	2b0c      	cmp	r3, #12
 80064ba:	d831      	bhi.n	8006520 <HAL_TIM_ReadCapturedValue+0x78>
 80064bc:	a201      	add	r2, pc, #4	; (adr r2, 80064c4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80064be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c2:	bf00      	nop
 80064c4:	080064f9 	.word	0x080064f9
 80064c8:	08006521 	.word	0x08006521
 80064cc:	08006521 	.word	0x08006521
 80064d0:	08006521 	.word	0x08006521
 80064d4:	08006503 	.word	0x08006503
 80064d8:	08006521 	.word	0x08006521
 80064dc:	08006521 	.word	0x08006521
 80064e0:	08006521 	.word	0x08006521
 80064e4:	0800650d 	.word	0x0800650d
 80064e8:	08006521 	.word	0x08006521
 80064ec:	08006521 	.word	0x08006521
 80064f0:	08006521 	.word	0x08006521
 80064f4:	08006517 	.word	0x08006517
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064fe:	60fb      	str	r3, [r7, #12]

      break;
 8006500:	e00f      	b.n	8006522 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006508:	60fb      	str	r3, [r7, #12]

      break;
 800650a:	e00a      	b.n	8006522 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006512:	60fb      	str	r3, [r7, #12]

      break;
 8006514:	e005      	b.n	8006522 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651c:	60fb      	str	r3, [r7, #12]

      break;
 800651e:	e000      	b.n	8006522 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006520:	bf00      	nop
  }

  return tmpreg;
 8006522:	68fb      	ldr	r3, [r7, #12]
}
 8006524:	4618      	mov	r0, r3
 8006526:	3714      	adds	r7, #20
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006538:	bf00      	nop
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800654c:	bf00      	nop
 800654e:	370c      	adds	r7, #12
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006560:	bf00      	nop
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800656c:	b480      	push	{r7}
 800656e:	b085      	sub	sp, #20
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4a40      	ldr	r2, [pc, #256]	; (8006680 <TIM_Base_SetConfig+0x114>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d013      	beq.n	80065ac <TIM_Base_SetConfig+0x40>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800658a:	d00f      	beq.n	80065ac <TIM_Base_SetConfig+0x40>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	4a3d      	ldr	r2, [pc, #244]	; (8006684 <TIM_Base_SetConfig+0x118>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d00b      	beq.n	80065ac <TIM_Base_SetConfig+0x40>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4a3c      	ldr	r2, [pc, #240]	; (8006688 <TIM_Base_SetConfig+0x11c>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d007      	beq.n	80065ac <TIM_Base_SetConfig+0x40>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4a3b      	ldr	r2, [pc, #236]	; (800668c <TIM_Base_SetConfig+0x120>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d003      	beq.n	80065ac <TIM_Base_SetConfig+0x40>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4a3a      	ldr	r2, [pc, #232]	; (8006690 <TIM_Base_SetConfig+0x124>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d108      	bne.n	80065be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	68fa      	ldr	r2, [r7, #12]
 80065ba:	4313      	orrs	r3, r2
 80065bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4a2f      	ldr	r2, [pc, #188]	; (8006680 <TIM_Base_SetConfig+0x114>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d02b      	beq.n	800661e <TIM_Base_SetConfig+0xb2>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065cc:	d027      	beq.n	800661e <TIM_Base_SetConfig+0xb2>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4a2c      	ldr	r2, [pc, #176]	; (8006684 <TIM_Base_SetConfig+0x118>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d023      	beq.n	800661e <TIM_Base_SetConfig+0xb2>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a2b      	ldr	r2, [pc, #172]	; (8006688 <TIM_Base_SetConfig+0x11c>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d01f      	beq.n	800661e <TIM_Base_SetConfig+0xb2>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a2a      	ldr	r2, [pc, #168]	; (800668c <TIM_Base_SetConfig+0x120>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d01b      	beq.n	800661e <TIM_Base_SetConfig+0xb2>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a29      	ldr	r2, [pc, #164]	; (8006690 <TIM_Base_SetConfig+0x124>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d017      	beq.n	800661e <TIM_Base_SetConfig+0xb2>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4a28      	ldr	r2, [pc, #160]	; (8006694 <TIM_Base_SetConfig+0x128>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d013      	beq.n	800661e <TIM_Base_SetConfig+0xb2>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a27      	ldr	r2, [pc, #156]	; (8006698 <TIM_Base_SetConfig+0x12c>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d00f      	beq.n	800661e <TIM_Base_SetConfig+0xb2>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a26      	ldr	r2, [pc, #152]	; (800669c <TIM_Base_SetConfig+0x130>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d00b      	beq.n	800661e <TIM_Base_SetConfig+0xb2>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a25      	ldr	r2, [pc, #148]	; (80066a0 <TIM_Base_SetConfig+0x134>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d007      	beq.n	800661e <TIM_Base_SetConfig+0xb2>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4a24      	ldr	r2, [pc, #144]	; (80066a4 <TIM_Base_SetConfig+0x138>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d003      	beq.n	800661e <TIM_Base_SetConfig+0xb2>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4a23      	ldr	r2, [pc, #140]	; (80066a8 <TIM_Base_SetConfig+0x13c>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d108      	bne.n	8006630 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006624:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	68fa      	ldr	r2, [r7, #12]
 800662c:	4313      	orrs	r3, r2
 800662e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	695b      	ldr	r3, [r3, #20]
 800663a:	4313      	orrs	r3, r2
 800663c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	689a      	ldr	r2, [r3, #8]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a0a      	ldr	r2, [pc, #40]	; (8006680 <TIM_Base_SetConfig+0x114>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d003      	beq.n	8006664 <TIM_Base_SetConfig+0xf8>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a0c      	ldr	r2, [pc, #48]	; (8006690 <TIM_Base_SetConfig+0x124>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d103      	bne.n	800666c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	691a      	ldr	r2, [r3, #16]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	615a      	str	r2, [r3, #20]
}
 8006672:	bf00      	nop
 8006674:	3714      	adds	r7, #20
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr
 800667e:	bf00      	nop
 8006680:	40010000 	.word	0x40010000
 8006684:	40000400 	.word	0x40000400
 8006688:	40000800 	.word	0x40000800
 800668c:	40000c00 	.word	0x40000c00
 8006690:	40010400 	.word	0x40010400
 8006694:	40014000 	.word	0x40014000
 8006698:	40014400 	.word	0x40014400
 800669c:	40014800 	.word	0x40014800
 80066a0:	40001800 	.word	0x40001800
 80066a4:	40001c00 	.word	0x40001c00
 80066a8:	40002000 	.word	0x40002000

080066ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b087      	sub	sp, #28
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6a1b      	ldr	r3, [r3, #32]
 80066ba:	f023 0201 	bic.w	r2, r3, #1
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6a1b      	ldr	r3, [r3, #32]
 80066c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	699b      	ldr	r3, [r3, #24]
 80066d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f023 0303 	bic.w	r3, r3, #3
 80066e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68fa      	ldr	r2, [r7, #12]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	f023 0302 	bic.w	r3, r3, #2
 80066f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	697a      	ldr	r2, [r7, #20]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4a20      	ldr	r2, [pc, #128]	; (8006784 <TIM_OC1_SetConfig+0xd8>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d003      	beq.n	8006710 <TIM_OC1_SetConfig+0x64>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	4a1f      	ldr	r2, [pc, #124]	; (8006788 <TIM_OC1_SetConfig+0xdc>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d10c      	bne.n	800672a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	f023 0308 	bic.w	r3, r3, #8
 8006716:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	697a      	ldr	r2, [r7, #20]
 800671e:	4313      	orrs	r3, r2
 8006720:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	f023 0304 	bic.w	r3, r3, #4
 8006728:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	4a15      	ldr	r2, [pc, #84]	; (8006784 <TIM_OC1_SetConfig+0xd8>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d003      	beq.n	800673a <TIM_OC1_SetConfig+0x8e>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4a14      	ldr	r2, [pc, #80]	; (8006788 <TIM_OC1_SetConfig+0xdc>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d111      	bne.n	800675e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006740:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006748:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	695b      	ldr	r3, [r3, #20]
 800674e:	693a      	ldr	r2, [r7, #16]
 8006750:	4313      	orrs	r3, r2
 8006752:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	699b      	ldr	r3, [r3, #24]
 8006758:	693a      	ldr	r2, [r7, #16]
 800675a:	4313      	orrs	r3, r2
 800675c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	693a      	ldr	r2, [r7, #16]
 8006762:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	68fa      	ldr	r2, [r7, #12]
 8006768:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	685a      	ldr	r2, [r3, #4]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	697a      	ldr	r2, [r7, #20]
 8006776:	621a      	str	r2, [r3, #32]
}
 8006778:	bf00      	nop
 800677a:	371c      	adds	r7, #28
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr
 8006784:	40010000 	.word	0x40010000
 8006788:	40010400 	.word	0x40010400

0800678c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800678c:	b480      	push	{r7}
 800678e:	b087      	sub	sp, #28
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6a1b      	ldr	r3, [r3, #32]
 800679a:	f023 0210 	bic.w	r2, r3, #16
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a1b      	ldr	r3, [r3, #32]
 80067a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	699b      	ldr	r3, [r3, #24]
 80067b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	021b      	lsls	r3, r3, #8
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	4313      	orrs	r3, r2
 80067ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	f023 0320 	bic.w	r3, r3, #32
 80067d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	011b      	lsls	r3, r3, #4
 80067de:	697a      	ldr	r2, [r7, #20]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4a22      	ldr	r2, [pc, #136]	; (8006870 <TIM_OC2_SetConfig+0xe4>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d003      	beq.n	80067f4 <TIM_OC2_SetConfig+0x68>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4a21      	ldr	r2, [pc, #132]	; (8006874 <TIM_OC2_SetConfig+0xe8>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d10d      	bne.n	8006810 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	011b      	lsls	r3, r3, #4
 8006802:	697a      	ldr	r2, [r7, #20]
 8006804:	4313      	orrs	r3, r2
 8006806:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800680e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4a17      	ldr	r2, [pc, #92]	; (8006870 <TIM_OC2_SetConfig+0xe4>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d003      	beq.n	8006820 <TIM_OC2_SetConfig+0x94>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4a16      	ldr	r2, [pc, #88]	; (8006874 <TIM_OC2_SetConfig+0xe8>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d113      	bne.n	8006848 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006826:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800682e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	695b      	ldr	r3, [r3, #20]
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	693a      	ldr	r2, [r7, #16]
 8006838:	4313      	orrs	r3, r2
 800683a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	699b      	ldr	r3, [r3, #24]
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	693a      	ldr	r2, [r7, #16]
 8006844:	4313      	orrs	r3, r2
 8006846:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	693a      	ldr	r2, [r7, #16]
 800684c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	685a      	ldr	r2, [r3, #4]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	697a      	ldr	r2, [r7, #20]
 8006860:	621a      	str	r2, [r3, #32]
}
 8006862:	bf00      	nop
 8006864:	371c      	adds	r7, #28
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr
 800686e:	bf00      	nop
 8006870:	40010000 	.word	0x40010000
 8006874:	40010400 	.word	0x40010400

08006878 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006878:	b480      	push	{r7}
 800687a:	b087      	sub	sp, #28
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6a1b      	ldr	r3, [r3, #32]
 8006886:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6a1b      	ldr	r3, [r3, #32]
 8006892:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	69db      	ldr	r3, [r3, #28]
 800689e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f023 0303 	bic.w	r3, r3, #3
 80068ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	68fa      	ldr	r2, [r7, #12]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80068c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	021b      	lsls	r3, r3, #8
 80068c8:	697a      	ldr	r2, [r7, #20]
 80068ca:	4313      	orrs	r3, r2
 80068cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4a21      	ldr	r2, [pc, #132]	; (8006958 <TIM_OC3_SetConfig+0xe0>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d003      	beq.n	80068de <TIM_OC3_SetConfig+0x66>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4a20      	ldr	r2, [pc, #128]	; (800695c <TIM_OC3_SetConfig+0xe4>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d10d      	bne.n	80068fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	68db      	ldr	r3, [r3, #12]
 80068ea:	021b      	lsls	r3, r3, #8
 80068ec:	697a      	ldr	r2, [r7, #20]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4a16      	ldr	r2, [pc, #88]	; (8006958 <TIM_OC3_SetConfig+0xe0>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d003      	beq.n	800690a <TIM_OC3_SetConfig+0x92>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4a15      	ldr	r2, [pc, #84]	; (800695c <TIM_OC3_SetConfig+0xe4>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d113      	bne.n	8006932 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006910:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006918:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	695b      	ldr	r3, [r3, #20]
 800691e:	011b      	lsls	r3, r3, #4
 8006920:	693a      	ldr	r2, [r7, #16]
 8006922:	4313      	orrs	r3, r2
 8006924:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	699b      	ldr	r3, [r3, #24]
 800692a:	011b      	lsls	r3, r3, #4
 800692c:	693a      	ldr	r2, [r7, #16]
 800692e:	4313      	orrs	r3, r2
 8006930:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	693a      	ldr	r2, [r7, #16]
 8006936:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	68fa      	ldr	r2, [r7, #12]
 800693c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	685a      	ldr	r2, [r3, #4]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	697a      	ldr	r2, [r7, #20]
 800694a:	621a      	str	r2, [r3, #32]
}
 800694c:	bf00      	nop
 800694e:	371c      	adds	r7, #28
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr
 8006958:	40010000 	.word	0x40010000
 800695c:	40010400 	.word	0x40010400

08006960 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006960:	b480      	push	{r7}
 8006962:	b087      	sub	sp, #28
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6a1b      	ldr	r3, [r3, #32]
 800696e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6a1b      	ldr	r3, [r3, #32]
 800697a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	69db      	ldr	r3, [r3, #28]
 8006986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800698e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006996:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	021b      	lsls	r3, r3, #8
 800699e:	68fa      	ldr	r2, [r7, #12]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80069aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	031b      	lsls	r3, r3, #12
 80069b2:	693a      	ldr	r2, [r7, #16]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a12      	ldr	r2, [pc, #72]	; (8006a04 <TIM_OC4_SetConfig+0xa4>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d003      	beq.n	80069c8 <TIM_OC4_SetConfig+0x68>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4a11      	ldr	r2, [pc, #68]	; (8006a08 <TIM_OC4_SetConfig+0xa8>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d109      	bne.n	80069dc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	695b      	ldr	r3, [r3, #20]
 80069d4:	019b      	lsls	r3, r3, #6
 80069d6:	697a      	ldr	r2, [r7, #20]
 80069d8:	4313      	orrs	r3, r2
 80069da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	697a      	ldr	r2, [r7, #20]
 80069e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	68fa      	ldr	r2, [r7, #12]
 80069e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	685a      	ldr	r2, [r3, #4]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	693a      	ldr	r2, [r7, #16]
 80069f4:	621a      	str	r2, [r3, #32]
}
 80069f6:	bf00      	nop
 80069f8:	371c      	adds	r7, #28
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop
 8006a04:	40010000 	.word	0x40010000
 8006a08:	40010400 	.word	0x40010400

08006a0c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b087      	sub	sp, #28
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	60f8      	str	r0, [r7, #12]
 8006a14:	60b9      	str	r1, [r7, #8]
 8006a16:	607a      	str	r2, [r7, #4]
 8006a18:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6a1b      	ldr	r3, [r3, #32]
 8006a1e:	f023 0201 	bic.w	r2, r3, #1
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	699b      	ldr	r3, [r3, #24]
 8006a2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6a1b      	ldr	r3, [r3, #32]
 8006a30:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	4a28      	ldr	r2, [pc, #160]	; (8006ad8 <TIM_TI1_SetConfig+0xcc>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d01b      	beq.n	8006a72 <TIM_TI1_SetConfig+0x66>
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a40:	d017      	beq.n	8006a72 <TIM_TI1_SetConfig+0x66>
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	4a25      	ldr	r2, [pc, #148]	; (8006adc <TIM_TI1_SetConfig+0xd0>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d013      	beq.n	8006a72 <TIM_TI1_SetConfig+0x66>
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	4a24      	ldr	r2, [pc, #144]	; (8006ae0 <TIM_TI1_SetConfig+0xd4>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d00f      	beq.n	8006a72 <TIM_TI1_SetConfig+0x66>
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	4a23      	ldr	r2, [pc, #140]	; (8006ae4 <TIM_TI1_SetConfig+0xd8>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d00b      	beq.n	8006a72 <TIM_TI1_SetConfig+0x66>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	4a22      	ldr	r2, [pc, #136]	; (8006ae8 <TIM_TI1_SetConfig+0xdc>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d007      	beq.n	8006a72 <TIM_TI1_SetConfig+0x66>
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	4a21      	ldr	r2, [pc, #132]	; (8006aec <TIM_TI1_SetConfig+0xe0>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d003      	beq.n	8006a72 <TIM_TI1_SetConfig+0x66>
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	4a20      	ldr	r2, [pc, #128]	; (8006af0 <TIM_TI1_SetConfig+0xe4>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d101      	bne.n	8006a76 <TIM_TI1_SetConfig+0x6a>
 8006a72:	2301      	movs	r3, #1
 8006a74:	e000      	b.n	8006a78 <TIM_TI1_SetConfig+0x6c>
 8006a76:	2300      	movs	r3, #0
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d008      	beq.n	8006a8e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	f023 0303 	bic.w	r3, r3, #3
 8006a82:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006a84:	697a      	ldr	r2, [r7, #20]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	617b      	str	r3, [r7, #20]
 8006a8c:	e003      	b.n	8006a96 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	f043 0301 	orr.w	r3, r3, #1
 8006a94:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	011b      	lsls	r3, r3, #4
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	697a      	ldr	r2, [r7, #20]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	f023 030a 	bic.w	r3, r3, #10
 8006ab0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	f003 030a 	and.w	r3, r3, #10
 8006ab8:	693a      	ldr	r2, [r7, #16]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	697a      	ldr	r2, [r7, #20]
 8006ac2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	693a      	ldr	r2, [r7, #16]
 8006ac8:	621a      	str	r2, [r3, #32]
}
 8006aca:	bf00      	nop
 8006acc:	371c      	adds	r7, #28
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr
 8006ad6:	bf00      	nop
 8006ad8:	40010000 	.word	0x40010000
 8006adc:	40000400 	.word	0x40000400
 8006ae0:	40000800 	.word	0x40000800
 8006ae4:	40000c00 	.word	0x40000c00
 8006ae8:	40010400 	.word	0x40010400
 8006aec:	40014000 	.word	0x40014000
 8006af0:	40001800 	.word	0x40001800

08006af4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b087      	sub	sp, #28
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	60f8      	str	r0, [r7, #12]
 8006afc:	60b9      	str	r1, [r7, #8]
 8006afe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	6a1b      	ldr	r3, [r3, #32]
 8006b04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6a1b      	ldr	r3, [r3, #32]
 8006b0a:	f023 0201 	bic.w	r2, r3, #1
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	699b      	ldr	r3, [r3, #24]
 8006b16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	011b      	lsls	r3, r3, #4
 8006b24:	693a      	ldr	r2, [r7, #16]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	f023 030a 	bic.w	r3, r3, #10
 8006b30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b32:	697a      	ldr	r2, [r7, #20]
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	693a      	ldr	r2, [r7, #16]
 8006b3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	697a      	ldr	r2, [r7, #20]
 8006b44:	621a      	str	r2, [r3, #32]
}
 8006b46:	bf00      	nop
 8006b48:	371c      	adds	r7, #28
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr

08006b52 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006b52:	b480      	push	{r7}
 8006b54:	b087      	sub	sp, #28
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	60f8      	str	r0, [r7, #12]
 8006b5a:	60b9      	str	r1, [r7, #8]
 8006b5c:	607a      	str	r2, [r7, #4]
 8006b5e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6a1b      	ldr	r3, [r3, #32]
 8006b64:	f023 0210 	bic.w	r2, r3, #16
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	699b      	ldr	r3, [r3, #24]
 8006b70:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	6a1b      	ldr	r3, [r3, #32]
 8006b76:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b7e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	021b      	lsls	r3, r3, #8
 8006b84:	697a      	ldr	r2, [r7, #20]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	031b      	lsls	r3, r3, #12
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	697a      	ldr	r2, [r7, #20]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ba4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	011b      	lsls	r3, r3, #4
 8006baa:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006bae:	693a      	ldr	r2, [r7, #16]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	697a      	ldr	r2, [r7, #20]
 8006bb8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	693a      	ldr	r2, [r7, #16]
 8006bbe:	621a      	str	r2, [r3, #32]
}
 8006bc0:	bf00      	nop
 8006bc2:	371c      	adds	r7, #28
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b087      	sub	sp, #28
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	60b9      	str	r1, [r7, #8]
 8006bd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6a1b      	ldr	r3, [r3, #32]
 8006bdc:	f023 0210 	bic.w	r2, r3, #16
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	699b      	ldr	r3, [r3, #24]
 8006be8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	6a1b      	ldr	r3, [r3, #32]
 8006bee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006bf6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	031b      	lsls	r3, r3, #12
 8006bfc:	697a      	ldr	r2, [r7, #20]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c08:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	011b      	lsls	r3, r3, #4
 8006c0e:	693a      	ldr	r2, [r7, #16]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	697a      	ldr	r2, [r7, #20]
 8006c18:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	693a      	ldr	r2, [r7, #16]
 8006c1e:	621a      	str	r2, [r3, #32]
}
 8006c20:	bf00      	nop
 8006c22:	371c      	adds	r7, #28
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b087      	sub	sp, #28
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	60f8      	str	r0, [r7, #12]
 8006c34:	60b9      	str	r1, [r7, #8]
 8006c36:	607a      	str	r2, [r7, #4]
 8006c38:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	6a1b      	ldr	r3, [r3, #32]
 8006c3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	69db      	ldr	r3, [r3, #28]
 8006c4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	6a1b      	ldr	r3, [r3, #32]
 8006c50:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	f023 0303 	bic.w	r3, r3, #3
 8006c58:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006c5a:	697a      	ldr	r2, [r7, #20]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c68:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	011b      	lsls	r3, r3, #4
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	697a      	ldr	r2, [r7, #20]
 8006c72:	4313      	orrs	r3, r2
 8006c74:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006c7c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	021b      	lsls	r3, r3, #8
 8006c82:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006c86:	693a      	ldr	r2, [r7, #16]
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	697a      	ldr	r2, [r7, #20]
 8006c90:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	693a      	ldr	r2, [r7, #16]
 8006c96:	621a      	str	r2, [r3, #32]
}
 8006c98:	bf00      	nop
 8006c9a:	371c      	adds	r7, #28
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b087      	sub	sp, #28
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	60b9      	str	r1, [r7, #8]
 8006cae:	607a      	str	r2, [r7, #4]
 8006cb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	6a1b      	ldr	r3, [r3, #32]
 8006cb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	69db      	ldr	r3, [r3, #28]
 8006cc2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6a1b      	ldr	r3, [r3, #32]
 8006cc8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cd0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	021b      	lsls	r3, r3, #8
 8006cd6:	697a      	ldr	r2, [r7, #20]
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ce2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	031b      	lsls	r3, r3, #12
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	697a      	ldr	r2, [r7, #20]
 8006cec:	4313      	orrs	r3, r2
 8006cee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006cf6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	031b      	lsls	r3, r3, #12
 8006cfc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006d00:	693a      	ldr	r2, [r7, #16]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	697a      	ldr	r2, [r7, #20]
 8006d0a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	693a      	ldr	r2, [r7, #16]
 8006d10:	621a      	str	r2, [r3, #32]
}
 8006d12:	bf00      	nop
 8006d14:	371c      	adds	r7, #28
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr

08006d1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d1e:	b480      	push	{r7}
 8006d20:	b085      	sub	sp, #20
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
 8006d26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d36:	683a      	ldr	r2, [r7, #0]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	f043 0307 	orr.w	r3, r3, #7
 8006d40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	68fa      	ldr	r2, [r7, #12]
 8006d46:	609a      	str	r2, [r3, #8]
}
 8006d48:	bf00      	nop
 8006d4a:	3714      	adds	r7, #20
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr

08006d54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b087      	sub	sp, #28
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	607a      	str	r2, [r7, #4]
 8006d60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	021a      	lsls	r2, r3, #8
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	431a      	orrs	r2, r3
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	697a      	ldr	r2, [r7, #20]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	697a      	ldr	r2, [r7, #20]
 8006d86:	609a      	str	r2, [r3, #8]
}
 8006d88:	bf00      	nop
 8006d8a:	371c      	adds	r7, #28
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr

08006d94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b087      	sub	sp, #28
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	60f8      	str	r0, [r7, #12]
 8006d9c:	60b9      	str	r1, [r7, #8]
 8006d9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	f003 031f 	and.w	r3, r3, #31
 8006da6:	2201      	movs	r2, #1
 8006da8:	fa02 f303 	lsl.w	r3, r2, r3
 8006dac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	6a1a      	ldr	r2, [r3, #32]
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	43db      	mvns	r3, r3
 8006db6:	401a      	ands	r2, r3
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6a1a      	ldr	r2, [r3, #32]
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	f003 031f 	and.w	r3, r3, #31
 8006dc6:	6879      	ldr	r1, [r7, #4]
 8006dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8006dcc:	431a      	orrs	r2, r3
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	621a      	str	r2, [r3, #32]
}
 8006dd2:	bf00      	nop
 8006dd4:	371c      	adds	r7, #28
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr
	...

08006de0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b085      	sub	sp, #20
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d101      	bne.n	8006df8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006df4:	2302      	movs	r3, #2
 8006df6:	e05a      	b.n	8006eae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2202      	movs	r2, #2
 8006e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	68fa      	ldr	r2, [r7, #12]
 8006e26:	4313      	orrs	r3, r2
 8006e28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	68fa      	ldr	r2, [r7, #12]
 8006e30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a21      	ldr	r2, [pc, #132]	; (8006ebc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d022      	beq.n	8006e82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e44:	d01d      	beq.n	8006e82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a1d      	ldr	r2, [pc, #116]	; (8006ec0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d018      	beq.n	8006e82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a1b      	ldr	r2, [pc, #108]	; (8006ec4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d013      	beq.n	8006e82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a1a      	ldr	r2, [pc, #104]	; (8006ec8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d00e      	beq.n	8006e82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a18      	ldr	r2, [pc, #96]	; (8006ecc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d009      	beq.n	8006e82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a17      	ldr	r2, [pc, #92]	; (8006ed0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d004      	beq.n	8006e82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a15      	ldr	r2, [pc, #84]	; (8006ed4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d10c      	bne.n	8006e9c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	68ba      	ldr	r2, [r7, #8]
 8006e90:	4313      	orrs	r3, r2
 8006e92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	68ba      	ldr	r2, [r7, #8]
 8006e9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006eac:	2300      	movs	r3, #0
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3714      	adds	r7, #20
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr
 8006eba:	bf00      	nop
 8006ebc:	40010000 	.word	0x40010000
 8006ec0:	40000400 	.word	0x40000400
 8006ec4:	40000800 	.word	0x40000800
 8006ec8:	40000c00 	.word	0x40000c00
 8006ecc:	40010400 	.word	0x40010400
 8006ed0:	40014000 	.word	0x40014000
 8006ed4:	40001800 	.word	0x40001800

08006ed8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ee0:	bf00      	nop
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ef4:	bf00      	nop
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b082      	sub	sp, #8
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d101      	bne.n	8006f12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e03f      	b.n	8006f92 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d106      	bne.n	8006f2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f7fc f92c 	bl	8003184 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2224      	movs	r2, #36	; 0x24
 8006f30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	68da      	ldr	r2, [r3, #12]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f000 fa5f 	bl	8007408 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	691a      	ldr	r2, [r3, #16]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	695a      	ldr	r2, [r3, #20]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	68da      	ldr	r2, [r3, #12]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2220      	movs	r2, #32
 8006f84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2220      	movs	r2, #32
 8006f8c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3708      	adds	r7, #8
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}

08006f9a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	b088      	sub	sp, #32
 8006f9e:	af02      	add	r7, sp, #8
 8006fa0:	60f8      	str	r0, [r7, #12]
 8006fa2:	60b9      	str	r1, [r7, #8]
 8006fa4:	603b      	str	r3, [r7, #0]
 8006fa6:	4613      	mov	r3, r2
 8006fa8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006faa:	2300      	movs	r3, #0
 8006fac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	2b20      	cmp	r3, #32
 8006fb8:	f040 8083 	bne.w	80070c2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d002      	beq.n	8006fc8 <HAL_UART_Transmit+0x2e>
 8006fc2:	88fb      	ldrh	r3, [r7, #6]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d101      	bne.n	8006fcc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e07b      	b.n	80070c4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d101      	bne.n	8006fda <HAL_UART_Transmit+0x40>
 8006fd6:	2302      	movs	r3, #2
 8006fd8:	e074      	b.n	80070c4 <HAL_UART_Transmit+0x12a>
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2201      	movs	r2, #1
 8006fde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2221      	movs	r2, #33	; 0x21
 8006fec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006ff0:	f7fc fb4c 	bl	800368c <HAL_GetTick>
 8006ff4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	88fa      	ldrh	r2, [r7, #6]
 8006ffa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	88fa      	ldrh	r2, [r7, #6]
 8007000:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2200      	movs	r2, #0
 8007006:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800700a:	e042      	b.n	8007092 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007010:	b29b      	uxth	r3, r3
 8007012:	3b01      	subs	r3, #1
 8007014:	b29a      	uxth	r2, r3
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007022:	d122      	bne.n	800706a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	9300      	str	r3, [sp, #0]
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	2200      	movs	r2, #0
 800702c:	2180      	movs	r1, #128	; 0x80
 800702e:	68f8      	ldr	r0, [r7, #12]
 8007030:	f000 f96c 	bl	800730c <UART_WaitOnFlagUntilTimeout>
 8007034:	4603      	mov	r3, r0
 8007036:	2b00      	cmp	r3, #0
 8007038:	d001      	beq.n	800703e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800703a:	2303      	movs	r3, #3
 800703c:	e042      	b.n	80070c4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	881b      	ldrh	r3, [r3, #0]
 8007046:	461a      	mov	r2, r3
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007050:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	691b      	ldr	r3, [r3, #16]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d103      	bne.n	8007062 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	3302      	adds	r3, #2
 800705e:	60bb      	str	r3, [r7, #8]
 8007060:	e017      	b.n	8007092 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	3301      	adds	r3, #1
 8007066:	60bb      	str	r3, [r7, #8]
 8007068:	e013      	b.n	8007092 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	9300      	str	r3, [sp, #0]
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	2200      	movs	r2, #0
 8007072:	2180      	movs	r1, #128	; 0x80
 8007074:	68f8      	ldr	r0, [r7, #12]
 8007076:	f000 f949 	bl	800730c <UART_WaitOnFlagUntilTimeout>
 800707a:	4603      	mov	r3, r0
 800707c:	2b00      	cmp	r3, #0
 800707e:	d001      	beq.n	8007084 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8007080:	2303      	movs	r3, #3
 8007082:	e01f      	b.n	80070c4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	1c5a      	adds	r2, r3, #1
 8007088:	60ba      	str	r2, [r7, #8]
 800708a:	781a      	ldrb	r2, [r3, #0]
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007096:	b29b      	uxth	r3, r3
 8007098:	2b00      	cmp	r3, #0
 800709a:	d1b7      	bne.n	800700c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	9300      	str	r3, [sp, #0]
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	2200      	movs	r2, #0
 80070a4:	2140      	movs	r1, #64	; 0x40
 80070a6:	68f8      	ldr	r0, [r7, #12]
 80070a8:	f000 f930 	bl	800730c <UART_WaitOnFlagUntilTimeout>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d001      	beq.n	80070b6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80070b2:	2303      	movs	r3, #3
 80070b4:	e006      	b.n	80070c4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2220      	movs	r2, #32
 80070ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80070be:	2300      	movs	r3, #0
 80070c0:	e000      	b.n	80070c4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80070c2:	2302      	movs	r3, #2
  }
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3718      	adds	r7, #24
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b086      	sub	sp, #24
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	60f8      	str	r0, [r7, #12]
 80070d4:	60b9      	str	r1, [r7, #8]
 80070d6:	4613      	mov	r3, r2
 80070d8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	2b20      	cmp	r3, #32
 80070e4:	d166      	bne.n	80071b4 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d002      	beq.n	80070f2 <HAL_UART_Receive_DMA+0x26>
 80070ec:	88fb      	ldrh	r3, [r7, #6]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d101      	bne.n	80070f6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80070f2:	2301      	movs	r3, #1
 80070f4:	e05f      	b.n	80071b6 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d101      	bne.n	8007104 <HAL_UART_Receive_DMA+0x38>
 8007100:	2302      	movs	r3, #2
 8007102:	e058      	b.n	80071b6 <HAL_UART_Receive_DMA+0xea>
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2201      	movs	r2, #1
 8007108:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800710c:	68ba      	ldr	r2, [r7, #8]
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	88fa      	ldrh	r2, [r7, #6]
 8007116:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2200      	movs	r2, #0
 800711c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2222      	movs	r2, #34	; 0x22
 8007122:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800712a:	4a25      	ldr	r2, [pc, #148]	; (80071c0 <HAL_UART_Receive_DMA+0xf4>)
 800712c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007132:	4a24      	ldr	r2, [pc, #144]	; (80071c4 <HAL_UART_Receive_DMA+0xf8>)
 8007134:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800713a:	4a23      	ldr	r2, [pc, #140]	; (80071c8 <HAL_UART_Receive_DMA+0xfc>)
 800713c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007142:	2200      	movs	r2, #0
 8007144:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8007146:	f107 0308 	add.w	r3, r7, #8
 800714a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	3304      	adds	r3, #4
 8007156:	4619      	mov	r1, r3
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	88fb      	ldrh	r3, [r7, #6]
 800715e:	f7fc fc83 	bl	8003a68 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8007162:	2300      	movs	r3, #0
 8007164:	613b      	str	r3, [r7, #16]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	613b      	str	r3, [r7, #16]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	613b      	str	r3, [r7, #16]
 8007176:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2200      	movs	r2, #0
 800717c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	68da      	ldr	r2, [r3, #12]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800718e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	695a      	ldr	r2, [r3, #20]
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f042 0201 	orr.w	r2, r2, #1
 800719e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	695a      	ldr	r2, [r3, #20]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071ae:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80071b0:	2300      	movs	r3, #0
 80071b2:	e000      	b.n	80071b6 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80071b4:	2302      	movs	r3, #2
  }
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3718      	adds	r7, #24
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	080071f5 	.word	0x080071f5
 80071c4:	0800725d 	.word	0x0800725d
 80071c8:	08007279 	.word	0x08007279

080071cc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80071d4:	bf00      	nop
 80071d6:	370c      	adds	r7, #12
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b083      	sub	sp, #12
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80071e8:	bf00      	nop
 80071ea:	370c      	adds	r7, #12
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr

080071f4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007200:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800720c:	2b00      	cmp	r3, #0
 800720e:	d11e      	bne.n	800724e <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2200      	movs	r2, #0
 8007214:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	68da      	ldr	r2, [r3, #12]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007224:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	695a      	ldr	r2, [r3, #20]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f022 0201 	bic.w	r2, r2, #1
 8007234:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	695a      	ldr	r2, [r3, #20]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007244:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2220      	movs	r2, #32
 800724a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800724e:	68f8      	ldr	r0, [r7, #12]
 8007250:	f7fb fcd2 	bl	8002bf8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007254:	bf00      	nop
 8007256:	3710      	adds	r7, #16
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b084      	sub	sp, #16
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007268:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800726a:	68f8      	ldr	r0, [r7, #12]
 800726c:	f7ff ffae 	bl	80071cc <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007270:	bf00      	nop
 8007272:	3710      	adds	r7, #16
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b084      	sub	sp, #16
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007280:	2300      	movs	r3, #0
 8007282:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007288:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	695b      	ldr	r3, [r3, #20]
 8007290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007294:	2b80      	cmp	r3, #128	; 0x80
 8007296:	bf0c      	ite	eq
 8007298:	2301      	moveq	r3, #1
 800729a:	2300      	movne	r3, #0
 800729c:	b2db      	uxtb	r3, r3
 800729e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80072a6:	b2db      	uxtb	r3, r3
 80072a8:	2b21      	cmp	r3, #33	; 0x21
 80072aa:	d108      	bne.n	80072be <UART_DMAError+0x46>
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d005      	beq.n	80072be <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	2200      	movs	r2, #0
 80072b6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80072b8:	68b8      	ldr	r0, [r7, #8]
 80072ba:	f000 f871 	bl	80073a0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	695b      	ldr	r3, [r3, #20]
 80072c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072c8:	2b40      	cmp	r3, #64	; 0x40
 80072ca:	bf0c      	ite	eq
 80072cc:	2301      	moveq	r3, #1
 80072ce:	2300      	movne	r3, #0
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80072da:	b2db      	uxtb	r3, r3
 80072dc:	2b22      	cmp	r3, #34	; 0x22
 80072de:	d108      	bne.n	80072f2 <UART_DMAError+0x7a>
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d005      	beq.n	80072f2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	2200      	movs	r2, #0
 80072ea:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80072ec:	68b8      	ldr	r0, [r7, #8]
 80072ee:	f000 f86d 	bl	80073cc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072f6:	f043 0210 	orr.w	r2, r3, #16
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80072fe:	68b8      	ldr	r0, [r7, #8]
 8007300:	f7ff ff6e 	bl	80071e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007304:	bf00      	nop
 8007306:	3710      	adds	r7, #16
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	60b9      	str	r1, [r7, #8]
 8007316:	603b      	str	r3, [r7, #0]
 8007318:	4613      	mov	r3, r2
 800731a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800731c:	e02c      	b.n	8007378 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800731e:	69bb      	ldr	r3, [r7, #24]
 8007320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007324:	d028      	beq.n	8007378 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007326:	69bb      	ldr	r3, [r7, #24]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d007      	beq.n	800733c <UART_WaitOnFlagUntilTimeout+0x30>
 800732c:	f7fc f9ae 	bl	800368c <HAL_GetTick>
 8007330:	4602      	mov	r2, r0
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	1ad3      	subs	r3, r2, r3
 8007336:	69ba      	ldr	r2, [r7, #24]
 8007338:	429a      	cmp	r2, r3
 800733a:	d21d      	bcs.n	8007378 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	68da      	ldr	r2, [r3, #12]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800734a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	695a      	ldr	r2, [r3, #20]
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f022 0201 	bic.w	r2, r2, #1
 800735a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2220      	movs	r2, #32
 8007360:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2220      	movs	r2, #32
 8007368:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2200      	movs	r2, #0
 8007370:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8007374:	2303      	movs	r3, #3
 8007376:	e00f      	b.n	8007398 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	4013      	ands	r3, r2
 8007382:	68ba      	ldr	r2, [r7, #8]
 8007384:	429a      	cmp	r2, r3
 8007386:	bf0c      	ite	eq
 8007388:	2301      	moveq	r3, #1
 800738a:	2300      	movne	r3, #0
 800738c:	b2db      	uxtb	r3, r3
 800738e:	461a      	mov	r2, r3
 8007390:	79fb      	ldrb	r3, [r7, #7]
 8007392:	429a      	cmp	r2, r3
 8007394:	d0c3      	beq.n	800731e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007396:	2300      	movs	r3, #0
}
 8007398:	4618      	mov	r0, r3
 800739a:	3710      	adds	r7, #16
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	68da      	ldr	r2, [r3, #12]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80073b6:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2220      	movs	r2, #32
 80073bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80073c0:	bf00      	nop
 80073c2:	370c      	adds	r7, #12
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b083      	sub	sp, #12
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	68da      	ldr	r2, [r3, #12]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80073e2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	695a      	ldr	r2, [r3, #20]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f022 0201 	bic.w	r2, r2, #1
 80073f2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2220      	movs	r2, #32
 80073f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80073fc:	bf00      	nop
 80073fe:	370c      	adds	r7, #12
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr

08007408 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800740c:	b085      	sub	sp, #20
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	691b      	ldr	r3, [r3, #16]
 8007418:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	68da      	ldr	r2, [r3, #12]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	430a      	orrs	r2, r1
 8007426:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	689a      	ldr	r2, [r3, #8]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	691b      	ldr	r3, [r3, #16]
 8007430:	431a      	orrs	r2, r3
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	695b      	ldr	r3, [r3, #20]
 8007436:	431a      	orrs	r2, r3
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	69db      	ldr	r3, [r3, #28]
 800743c:	4313      	orrs	r3, r2
 800743e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	68db      	ldr	r3, [r3, #12]
 8007446:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800744a:	f023 030c 	bic.w	r3, r3, #12
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	6812      	ldr	r2, [r2, #0]
 8007452:	68f9      	ldr	r1, [r7, #12]
 8007454:	430b      	orrs	r3, r1
 8007456:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	695b      	ldr	r3, [r3, #20]
 800745e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	699a      	ldr	r2, [r3, #24]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	430a      	orrs	r2, r1
 800746c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	69db      	ldr	r3, [r3, #28]
 8007472:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007476:	f040 818b 	bne.w	8007790 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4ac1      	ldr	r2, [pc, #772]	; (8007784 <UART_SetConfig+0x37c>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d005      	beq.n	8007490 <UART_SetConfig+0x88>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4abf      	ldr	r2, [pc, #764]	; (8007788 <UART_SetConfig+0x380>)
 800748a:	4293      	cmp	r3, r2
 800748c:	f040 80bd 	bne.w	800760a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007490:	f7fe fb1c 	bl	8005acc <HAL_RCC_GetPCLK2Freq>
 8007494:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	461d      	mov	r5, r3
 800749a:	f04f 0600 	mov.w	r6, #0
 800749e:	46a8      	mov	r8, r5
 80074a0:	46b1      	mov	r9, r6
 80074a2:	eb18 0308 	adds.w	r3, r8, r8
 80074a6:	eb49 0409 	adc.w	r4, r9, r9
 80074aa:	4698      	mov	r8, r3
 80074ac:	46a1      	mov	r9, r4
 80074ae:	eb18 0805 	adds.w	r8, r8, r5
 80074b2:	eb49 0906 	adc.w	r9, r9, r6
 80074b6:	f04f 0100 	mov.w	r1, #0
 80074ba:	f04f 0200 	mov.w	r2, #0
 80074be:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80074c2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80074c6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80074ca:	4688      	mov	r8, r1
 80074cc:	4691      	mov	r9, r2
 80074ce:	eb18 0005 	adds.w	r0, r8, r5
 80074d2:	eb49 0106 	adc.w	r1, r9, r6
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	461d      	mov	r5, r3
 80074dc:	f04f 0600 	mov.w	r6, #0
 80074e0:	196b      	adds	r3, r5, r5
 80074e2:	eb46 0406 	adc.w	r4, r6, r6
 80074e6:	461a      	mov	r2, r3
 80074e8:	4623      	mov	r3, r4
 80074ea:	f7f9 fc0d 	bl	8000d08 <__aeabi_uldivmod>
 80074ee:	4603      	mov	r3, r0
 80074f0:	460c      	mov	r4, r1
 80074f2:	461a      	mov	r2, r3
 80074f4:	4ba5      	ldr	r3, [pc, #660]	; (800778c <UART_SetConfig+0x384>)
 80074f6:	fba3 2302 	umull	r2, r3, r3, r2
 80074fa:	095b      	lsrs	r3, r3, #5
 80074fc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	461d      	mov	r5, r3
 8007504:	f04f 0600 	mov.w	r6, #0
 8007508:	46a9      	mov	r9, r5
 800750a:	46b2      	mov	sl, r6
 800750c:	eb19 0309 	adds.w	r3, r9, r9
 8007510:	eb4a 040a 	adc.w	r4, sl, sl
 8007514:	4699      	mov	r9, r3
 8007516:	46a2      	mov	sl, r4
 8007518:	eb19 0905 	adds.w	r9, r9, r5
 800751c:	eb4a 0a06 	adc.w	sl, sl, r6
 8007520:	f04f 0100 	mov.w	r1, #0
 8007524:	f04f 0200 	mov.w	r2, #0
 8007528:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800752c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007530:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007534:	4689      	mov	r9, r1
 8007536:	4692      	mov	sl, r2
 8007538:	eb19 0005 	adds.w	r0, r9, r5
 800753c:	eb4a 0106 	adc.w	r1, sl, r6
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	461d      	mov	r5, r3
 8007546:	f04f 0600 	mov.w	r6, #0
 800754a:	196b      	adds	r3, r5, r5
 800754c:	eb46 0406 	adc.w	r4, r6, r6
 8007550:	461a      	mov	r2, r3
 8007552:	4623      	mov	r3, r4
 8007554:	f7f9 fbd8 	bl	8000d08 <__aeabi_uldivmod>
 8007558:	4603      	mov	r3, r0
 800755a:	460c      	mov	r4, r1
 800755c:	461a      	mov	r2, r3
 800755e:	4b8b      	ldr	r3, [pc, #556]	; (800778c <UART_SetConfig+0x384>)
 8007560:	fba3 1302 	umull	r1, r3, r3, r2
 8007564:	095b      	lsrs	r3, r3, #5
 8007566:	2164      	movs	r1, #100	; 0x64
 8007568:	fb01 f303 	mul.w	r3, r1, r3
 800756c:	1ad3      	subs	r3, r2, r3
 800756e:	00db      	lsls	r3, r3, #3
 8007570:	3332      	adds	r3, #50	; 0x32
 8007572:	4a86      	ldr	r2, [pc, #536]	; (800778c <UART_SetConfig+0x384>)
 8007574:	fba2 2303 	umull	r2, r3, r2, r3
 8007578:	095b      	lsrs	r3, r3, #5
 800757a:	005b      	lsls	r3, r3, #1
 800757c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007580:	4498      	add	r8, r3
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	461d      	mov	r5, r3
 8007586:	f04f 0600 	mov.w	r6, #0
 800758a:	46a9      	mov	r9, r5
 800758c:	46b2      	mov	sl, r6
 800758e:	eb19 0309 	adds.w	r3, r9, r9
 8007592:	eb4a 040a 	adc.w	r4, sl, sl
 8007596:	4699      	mov	r9, r3
 8007598:	46a2      	mov	sl, r4
 800759a:	eb19 0905 	adds.w	r9, r9, r5
 800759e:	eb4a 0a06 	adc.w	sl, sl, r6
 80075a2:	f04f 0100 	mov.w	r1, #0
 80075a6:	f04f 0200 	mov.w	r2, #0
 80075aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80075ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80075b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80075b6:	4689      	mov	r9, r1
 80075b8:	4692      	mov	sl, r2
 80075ba:	eb19 0005 	adds.w	r0, r9, r5
 80075be:	eb4a 0106 	adc.w	r1, sl, r6
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	461d      	mov	r5, r3
 80075c8:	f04f 0600 	mov.w	r6, #0
 80075cc:	196b      	adds	r3, r5, r5
 80075ce:	eb46 0406 	adc.w	r4, r6, r6
 80075d2:	461a      	mov	r2, r3
 80075d4:	4623      	mov	r3, r4
 80075d6:	f7f9 fb97 	bl	8000d08 <__aeabi_uldivmod>
 80075da:	4603      	mov	r3, r0
 80075dc:	460c      	mov	r4, r1
 80075de:	461a      	mov	r2, r3
 80075e0:	4b6a      	ldr	r3, [pc, #424]	; (800778c <UART_SetConfig+0x384>)
 80075e2:	fba3 1302 	umull	r1, r3, r3, r2
 80075e6:	095b      	lsrs	r3, r3, #5
 80075e8:	2164      	movs	r1, #100	; 0x64
 80075ea:	fb01 f303 	mul.w	r3, r1, r3
 80075ee:	1ad3      	subs	r3, r2, r3
 80075f0:	00db      	lsls	r3, r3, #3
 80075f2:	3332      	adds	r3, #50	; 0x32
 80075f4:	4a65      	ldr	r2, [pc, #404]	; (800778c <UART_SetConfig+0x384>)
 80075f6:	fba2 2303 	umull	r2, r3, r2, r3
 80075fa:	095b      	lsrs	r3, r3, #5
 80075fc:	f003 0207 	and.w	r2, r3, #7
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4442      	add	r2, r8
 8007606:	609a      	str	r2, [r3, #8]
 8007608:	e26f      	b.n	8007aea <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800760a:	f7fe fa4b 	bl	8005aa4 <HAL_RCC_GetPCLK1Freq>
 800760e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	461d      	mov	r5, r3
 8007614:	f04f 0600 	mov.w	r6, #0
 8007618:	46a8      	mov	r8, r5
 800761a:	46b1      	mov	r9, r6
 800761c:	eb18 0308 	adds.w	r3, r8, r8
 8007620:	eb49 0409 	adc.w	r4, r9, r9
 8007624:	4698      	mov	r8, r3
 8007626:	46a1      	mov	r9, r4
 8007628:	eb18 0805 	adds.w	r8, r8, r5
 800762c:	eb49 0906 	adc.w	r9, r9, r6
 8007630:	f04f 0100 	mov.w	r1, #0
 8007634:	f04f 0200 	mov.w	r2, #0
 8007638:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800763c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007640:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007644:	4688      	mov	r8, r1
 8007646:	4691      	mov	r9, r2
 8007648:	eb18 0005 	adds.w	r0, r8, r5
 800764c:	eb49 0106 	adc.w	r1, r9, r6
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	461d      	mov	r5, r3
 8007656:	f04f 0600 	mov.w	r6, #0
 800765a:	196b      	adds	r3, r5, r5
 800765c:	eb46 0406 	adc.w	r4, r6, r6
 8007660:	461a      	mov	r2, r3
 8007662:	4623      	mov	r3, r4
 8007664:	f7f9 fb50 	bl	8000d08 <__aeabi_uldivmod>
 8007668:	4603      	mov	r3, r0
 800766a:	460c      	mov	r4, r1
 800766c:	461a      	mov	r2, r3
 800766e:	4b47      	ldr	r3, [pc, #284]	; (800778c <UART_SetConfig+0x384>)
 8007670:	fba3 2302 	umull	r2, r3, r3, r2
 8007674:	095b      	lsrs	r3, r3, #5
 8007676:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	461d      	mov	r5, r3
 800767e:	f04f 0600 	mov.w	r6, #0
 8007682:	46a9      	mov	r9, r5
 8007684:	46b2      	mov	sl, r6
 8007686:	eb19 0309 	adds.w	r3, r9, r9
 800768a:	eb4a 040a 	adc.w	r4, sl, sl
 800768e:	4699      	mov	r9, r3
 8007690:	46a2      	mov	sl, r4
 8007692:	eb19 0905 	adds.w	r9, r9, r5
 8007696:	eb4a 0a06 	adc.w	sl, sl, r6
 800769a:	f04f 0100 	mov.w	r1, #0
 800769e:	f04f 0200 	mov.w	r2, #0
 80076a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80076a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80076aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80076ae:	4689      	mov	r9, r1
 80076b0:	4692      	mov	sl, r2
 80076b2:	eb19 0005 	adds.w	r0, r9, r5
 80076b6:	eb4a 0106 	adc.w	r1, sl, r6
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	461d      	mov	r5, r3
 80076c0:	f04f 0600 	mov.w	r6, #0
 80076c4:	196b      	adds	r3, r5, r5
 80076c6:	eb46 0406 	adc.w	r4, r6, r6
 80076ca:	461a      	mov	r2, r3
 80076cc:	4623      	mov	r3, r4
 80076ce:	f7f9 fb1b 	bl	8000d08 <__aeabi_uldivmod>
 80076d2:	4603      	mov	r3, r0
 80076d4:	460c      	mov	r4, r1
 80076d6:	461a      	mov	r2, r3
 80076d8:	4b2c      	ldr	r3, [pc, #176]	; (800778c <UART_SetConfig+0x384>)
 80076da:	fba3 1302 	umull	r1, r3, r3, r2
 80076de:	095b      	lsrs	r3, r3, #5
 80076e0:	2164      	movs	r1, #100	; 0x64
 80076e2:	fb01 f303 	mul.w	r3, r1, r3
 80076e6:	1ad3      	subs	r3, r2, r3
 80076e8:	00db      	lsls	r3, r3, #3
 80076ea:	3332      	adds	r3, #50	; 0x32
 80076ec:	4a27      	ldr	r2, [pc, #156]	; (800778c <UART_SetConfig+0x384>)
 80076ee:	fba2 2303 	umull	r2, r3, r2, r3
 80076f2:	095b      	lsrs	r3, r3, #5
 80076f4:	005b      	lsls	r3, r3, #1
 80076f6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80076fa:	4498      	add	r8, r3
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	461d      	mov	r5, r3
 8007700:	f04f 0600 	mov.w	r6, #0
 8007704:	46a9      	mov	r9, r5
 8007706:	46b2      	mov	sl, r6
 8007708:	eb19 0309 	adds.w	r3, r9, r9
 800770c:	eb4a 040a 	adc.w	r4, sl, sl
 8007710:	4699      	mov	r9, r3
 8007712:	46a2      	mov	sl, r4
 8007714:	eb19 0905 	adds.w	r9, r9, r5
 8007718:	eb4a 0a06 	adc.w	sl, sl, r6
 800771c:	f04f 0100 	mov.w	r1, #0
 8007720:	f04f 0200 	mov.w	r2, #0
 8007724:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007728:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800772c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007730:	4689      	mov	r9, r1
 8007732:	4692      	mov	sl, r2
 8007734:	eb19 0005 	adds.w	r0, r9, r5
 8007738:	eb4a 0106 	adc.w	r1, sl, r6
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	461d      	mov	r5, r3
 8007742:	f04f 0600 	mov.w	r6, #0
 8007746:	196b      	adds	r3, r5, r5
 8007748:	eb46 0406 	adc.w	r4, r6, r6
 800774c:	461a      	mov	r2, r3
 800774e:	4623      	mov	r3, r4
 8007750:	f7f9 fada 	bl	8000d08 <__aeabi_uldivmod>
 8007754:	4603      	mov	r3, r0
 8007756:	460c      	mov	r4, r1
 8007758:	461a      	mov	r2, r3
 800775a:	4b0c      	ldr	r3, [pc, #48]	; (800778c <UART_SetConfig+0x384>)
 800775c:	fba3 1302 	umull	r1, r3, r3, r2
 8007760:	095b      	lsrs	r3, r3, #5
 8007762:	2164      	movs	r1, #100	; 0x64
 8007764:	fb01 f303 	mul.w	r3, r1, r3
 8007768:	1ad3      	subs	r3, r2, r3
 800776a:	00db      	lsls	r3, r3, #3
 800776c:	3332      	adds	r3, #50	; 0x32
 800776e:	4a07      	ldr	r2, [pc, #28]	; (800778c <UART_SetConfig+0x384>)
 8007770:	fba2 2303 	umull	r2, r3, r2, r3
 8007774:	095b      	lsrs	r3, r3, #5
 8007776:	f003 0207 	and.w	r2, r3, #7
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4442      	add	r2, r8
 8007780:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007782:	e1b2      	b.n	8007aea <UART_SetConfig+0x6e2>
 8007784:	40011000 	.word	0x40011000
 8007788:	40011400 	.word	0x40011400
 800778c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4ad7      	ldr	r2, [pc, #860]	; (8007af4 <UART_SetConfig+0x6ec>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d005      	beq.n	80077a6 <UART_SetConfig+0x39e>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4ad6      	ldr	r2, [pc, #856]	; (8007af8 <UART_SetConfig+0x6f0>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	f040 80d1 	bne.w	8007948 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80077a6:	f7fe f991 	bl	8005acc <HAL_RCC_GetPCLK2Freq>
 80077aa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	469a      	mov	sl, r3
 80077b0:	f04f 0b00 	mov.w	fp, #0
 80077b4:	46d0      	mov	r8, sl
 80077b6:	46d9      	mov	r9, fp
 80077b8:	eb18 0308 	adds.w	r3, r8, r8
 80077bc:	eb49 0409 	adc.w	r4, r9, r9
 80077c0:	4698      	mov	r8, r3
 80077c2:	46a1      	mov	r9, r4
 80077c4:	eb18 080a 	adds.w	r8, r8, sl
 80077c8:	eb49 090b 	adc.w	r9, r9, fp
 80077cc:	f04f 0100 	mov.w	r1, #0
 80077d0:	f04f 0200 	mov.w	r2, #0
 80077d4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80077d8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80077dc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80077e0:	4688      	mov	r8, r1
 80077e2:	4691      	mov	r9, r2
 80077e4:	eb1a 0508 	adds.w	r5, sl, r8
 80077e8:	eb4b 0609 	adc.w	r6, fp, r9
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	4619      	mov	r1, r3
 80077f2:	f04f 0200 	mov.w	r2, #0
 80077f6:	f04f 0300 	mov.w	r3, #0
 80077fa:	f04f 0400 	mov.w	r4, #0
 80077fe:	0094      	lsls	r4, r2, #2
 8007800:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007804:	008b      	lsls	r3, r1, #2
 8007806:	461a      	mov	r2, r3
 8007808:	4623      	mov	r3, r4
 800780a:	4628      	mov	r0, r5
 800780c:	4631      	mov	r1, r6
 800780e:	f7f9 fa7b 	bl	8000d08 <__aeabi_uldivmod>
 8007812:	4603      	mov	r3, r0
 8007814:	460c      	mov	r4, r1
 8007816:	461a      	mov	r2, r3
 8007818:	4bb8      	ldr	r3, [pc, #736]	; (8007afc <UART_SetConfig+0x6f4>)
 800781a:	fba3 2302 	umull	r2, r3, r3, r2
 800781e:	095b      	lsrs	r3, r3, #5
 8007820:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	469b      	mov	fp, r3
 8007828:	f04f 0c00 	mov.w	ip, #0
 800782c:	46d9      	mov	r9, fp
 800782e:	46e2      	mov	sl, ip
 8007830:	eb19 0309 	adds.w	r3, r9, r9
 8007834:	eb4a 040a 	adc.w	r4, sl, sl
 8007838:	4699      	mov	r9, r3
 800783a:	46a2      	mov	sl, r4
 800783c:	eb19 090b 	adds.w	r9, r9, fp
 8007840:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007844:	f04f 0100 	mov.w	r1, #0
 8007848:	f04f 0200 	mov.w	r2, #0
 800784c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007850:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007854:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007858:	4689      	mov	r9, r1
 800785a:	4692      	mov	sl, r2
 800785c:	eb1b 0509 	adds.w	r5, fp, r9
 8007860:	eb4c 060a 	adc.w	r6, ip, sl
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	4619      	mov	r1, r3
 800786a:	f04f 0200 	mov.w	r2, #0
 800786e:	f04f 0300 	mov.w	r3, #0
 8007872:	f04f 0400 	mov.w	r4, #0
 8007876:	0094      	lsls	r4, r2, #2
 8007878:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800787c:	008b      	lsls	r3, r1, #2
 800787e:	461a      	mov	r2, r3
 8007880:	4623      	mov	r3, r4
 8007882:	4628      	mov	r0, r5
 8007884:	4631      	mov	r1, r6
 8007886:	f7f9 fa3f 	bl	8000d08 <__aeabi_uldivmod>
 800788a:	4603      	mov	r3, r0
 800788c:	460c      	mov	r4, r1
 800788e:	461a      	mov	r2, r3
 8007890:	4b9a      	ldr	r3, [pc, #616]	; (8007afc <UART_SetConfig+0x6f4>)
 8007892:	fba3 1302 	umull	r1, r3, r3, r2
 8007896:	095b      	lsrs	r3, r3, #5
 8007898:	2164      	movs	r1, #100	; 0x64
 800789a:	fb01 f303 	mul.w	r3, r1, r3
 800789e:	1ad3      	subs	r3, r2, r3
 80078a0:	011b      	lsls	r3, r3, #4
 80078a2:	3332      	adds	r3, #50	; 0x32
 80078a4:	4a95      	ldr	r2, [pc, #596]	; (8007afc <UART_SetConfig+0x6f4>)
 80078a6:	fba2 2303 	umull	r2, r3, r2, r3
 80078aa:	095b      	lsrs	r3, r3, #5
 80078ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80078b0:	4498      	add	r8, r3
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	469b      	mov	fp, r3
 80078b6:	f04f 0c00 	mov.w	ip, #0
 80078ba:	46d9      	mov	r9, fp
 80078bc:	46e2      	mov	sl, ip
 80078be:	eb19 0309 	adds.w	r3, r9, r9
 80078c2:	eb4a 040a 	adc.w	r4, sl, sl
 80078c6:	4699      	mov	r9, r3
 80078c8:	46a2      	mov	sl, r4
 80078ca:	eb19 090b 	adds.w	r9, r9, fp
 80078ce:	eb4a 0a0c 	adc.w	sl, sl, ip
 80078d2:	f04f 0100 	mov.w	r1, #0
 80078d6:	f04f 0200 	mov.w	r2, #0
 80078da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80078de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80078e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80078e6:	4689      	mov	r9, r1
 80078e8:	4692      	mov	sl, r2
 80078ea:	eb1b 0509 	adds.w	r5, fp, r9
 80078ee:	eb4c 060a 	adc.w	r6, ip, sl
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	4619      	mov	r1, r3
 80078f8:	f04f 0200 	mov.w	r2, #0
 80078fc:	f04f 0300 	mov.w	r3, #0
 8007900:	f04f 0400 	mov.w	r4, #0
 8007904:	0094      	lsls	r4, r2, #2
 8007906:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800790a:	008b      	lsls	r3, r1, #2
 800790c:	461a      	mov	r2, r3
 800790e:	4623      	mov	r3, r4
 8007910:	4628      	mov	r0, r5
 8007912:	4631      	mov	r1, r6
 8007914:	f7f9 f9f8 	bl	8000d08 <__aeabi_uldivmod>
 8007918:	4603      	mov	r3, r0
 800791a:	460c      	mov	r4, r1
 800791c:	461a      	mov	r2, r3
 800791e:	4b77      	ldr	r3, [pc, #476]	; (8007afc <UART_SetConfig+0x6f4>)
 8007920:	fba3 1302 	umull	r1, r3, r3, r2
 8007924:	095b      	lsrs	r3, r3, #5
 8007926:	2164      	movs	r1, #100	; 0x64
 8007928:	fb01 f303 	mul.w	r3, r1, r3
 800792c:	1ad3      	subs	r3, r2, r3
 800792e:	011b      	lsls	r3, r3, #4
 8007930:	3332      	adds	r3, #50	; 0x32
 8007932:	4a72      	ldr	r2, [pc, #456]	; (8007afc <UART_SetConfig+0x6f4>)
 8007934:	fba2 2303 	umull	r2, r3, r2, r3
 8007938:	095b      	lsrs	r3, r3, #5
 800793a:	f003 020f 	and.w	r2, r3, #15
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4442      	add	r2, r8
 8007944:	609a      	str	r2, [r3, #8]
 8007946:	e0d0      	b.n	8007aea <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007948:	f7fe f8ac 	bl	8005aa4 <HAL_RCC_GetPCLK1Freq>
 800794c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	469a      	mov	sl, r3
 8007952:	f04f 0b00 	mov.w	fp, #0
 8007956:	46d0      	mov	r8, sl
 8007958:	46d9      	mov	r9, fp
 800795a:	eb18 0308 	adds.w	r3, r8, r8
 800795e:	eb49 0409 	adc.w	r4, r9, r9
 8007962:	4698      	mov	r8, r3
 8007964:	46a1      	mov	r9, r4
 8007966:	eb18 080a 	adds.w	r8, r8, sl
 800796a:	eb49 090b 	adc.w	r9, r9, fp
 800796e:	f04f 0100 	mov.w	r1, #0
 8007972:	f04f 0200 	mov.w	r2, #0
 8007976:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800797a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800797e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007982:	4688      	mov	r8, r1
 8007984:	4691      	mov	r9, r2
 8007986:	eb1a 0508 	adds.w	r5, sl, r8
 800798a:	eb4b 0609 	adc.w	r6, fp, r9
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	4619      	mov	r1, r3
 8007994:	f04f 0200 	mov.w	r2, #0
 8007998:	f04f 0300 	mov.w	r3, #0
 800799c:	f04f 0400 	mov.w	r4, #0
 80079a0:	0094      	lsls	r4, r2, #2
 80079a2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80079a6:	008b      	lsls	r3, r1, #2
 80079a8:	461a      	mov	r2, r3
 80079aa:	4623      	mov	r3, r4
 80079ac:	4628      	mov	r0, r5
 80079ae:	4631      	mov	r1, r6
 80079b0:	f7f9 f9aa 	bl	8000d08 <__aeabi_uldivmod>
 80079b4:	4603      	mov	r3, r0
 80079b6:	460c      	mov	r4, r1
 80079b8:	461a      	mov	r2, r3
 80079ba:	4b50      	ldr	r3, [pc, #320]	; (8007afc <UART_SetConfig+0x6f4>)
 80079bc:	fba3 2302 	umull	r2, r3, r3, r2
 80079c0:	095b      	lsrs	r3, r3, #5
 80079c2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	469b      	mov	fp, r3
 80079ca:	f04f 0c00 	mov.w	ip, #0
 80079ce:	46d9      	mov	r9, fp
 80079d0:	46e2      	mov	sl, ip
 80079d2:	eb19 0309 	adds.w	r3, r9, r9
 80079d6:	eb4a 040a 	adc.w	r4, sl, sl
 80079da:	4699      	mov	r9, r3
 80079dc:	46a2      	mov	sl, r4
 80079de:	eb19 090b 	adds.w	r9, r9, fp
 80079e2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80079e6:	f04f 0100 	mov.w	r1, #0
 80079ea:	f04f 0200 	mov.w	r2, #0
 80079ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80079f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80079f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80079fa:	4689      	mov	r9, r1
 80079fc:	4692      	mov	sl, r2
 80079fe:	eb1b 0509 	adds.w	r5, fp, r9
 8007a02:	eb4c 060a 	adc.w	r6, ip, sl
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	4619      	mov	r1, r3
 8007a0c:	f04f 0200 	mov.w	r2, #0
 8007a10:	f04f 0300 	mov.w	r3, #0
 8007a14:	f04f 0400 	mov.w	r4, #0
 8007a18:	0094      	lsls	r4, r2, #2
 8007a1a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007a1e:	008b      	lsls	r3, r1, #2
 8007a20:	461a      	mov	r2, r3
 8007a22:	4623      	mov	r3, r4
 8007a24:	4628      	mov	r0, r5
 8007a26:	4631      	mov	r1, r6
 8007a28:	f7f9 f96e 	bl	8000d08 <__aeabi_uldivmod>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	460c      	mov	r4, r1
 8007a30:	461a      	mov	r2, r3
 8007a32:	4b32      	ldr	r3, [pc, #200]	; (8007afc <UART_SetConfig+0x6f4>)
 8007a34:	fba3 1302 	umull	r1, r3, r3, r2
 8007a38:	095b      	lsrs	r3, r3, #5
 8007a3a:	2164      	movs	r1, #100	; 0x64
 8007a3c:	fb01 f303 	mul.w	r3, r1, r3
 8007a40:	1ad3      	subs	r3, r2, r3
 8007a42:	011b      	lsls	r3, r3, #4
 8007a44:	3332      	adds	r3, #50	; 0x32
 8007a46:	4a2d      	ldr	r2, [pc, #180]	; (8007afc <UART_SetConfig+0x6f4>)
 8007a48:	fba2 2303 	umull	r2, r3, r2, r3
 8007a4c:	095b      	lsrs	r3, r3, #5
 8007a4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a52:	4498      	add	r8, r3
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	469b      	mov	fp, r3
 8007a58:	f04f 0c00 	mov.w	ip, #0
 8007a5c:	46d9      	mov	r9, fp
 8007a5e:	46e2      	mov	sl, ip
 8007a60:	eb19 0309 	adds.w	r3, r9, r9
 8007a64:	eb4a 040a 	adc.w	r4, sl, sl
 8007a68:	4699      	mov	r9, r3
 8007a6a:	46a2      	mov	sl, r4
 8007a6c:	eb19 090b 	adds.w	r9, r9, fp
 8007a70:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007a74:	f04f 0100 	mov.w	r1, #0
 8007a78:	f04f 0200 	mov.w	r2, #0
 8007a7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a80:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007a84:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007a88:	4689      	mov	r9, r1
 8007a8a:	4692      	mov	sl, r2
 8007a8c:	eb1b 0509 	adds.w	r5, fp, r9
 8007a90:	eb4c 060a 	adc.w	r6, ip, sl
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	4619      	mov	r1, r3
 8007a9a:	f04f 0200 	mov.w	r2, #0
 8007a9e:	f04f 0300 	mov.w	r3, #0
 8007aa2:	f04f 0400 	mov.w	r4, #0
 8007aa6:	0094      	lsls	r4, r2, #2
 8007aa8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007aac:	008b      	lsls	r3, r1, #2
 8007aae:	461a      	mov	r2, r3
 8007ab0:	4623      	mov	r3, r4
 8007ab2:	4628      	mov	r0, r5
 8007ab4:	4631      	mov	r1, r6
 8007ab6:	f7f9 f927 	bl	8000d08 <__aeabi_uldivmod>
 8007aba:	4603      	mov	r3, r0
 8007abc:	460c      	mov	r4, r1
 8007abe:	461a      	mov	r2, r3
 8007ac0:	4b0e      	ldr	r3, [pc, #56]	; (8007afc <UART_SetConfig+0x6f4>)
 8007ac2:	fba3 1302 	umull	r1, r3, r3, r2
 8007ac6:	095b      	lsrs	r3, r3, #5
 8007ac8:	2164      	movs	r1, #100	; 0x64
 8007aca:	fb01 f303 	mul.w	r3, r1, r3
 8007ace:	1ad3      	subs	r3, r2, r3
 8007ad0:	011b      	lsls	r3, r3, #4
 8007ad2:	3332      	adds	r3, #50	; 0x32
 8007ad4:	4a09      	ldr	r2, [pc, #36]	; (8007afc <UART_SetConfig+0x6f4>)
 8007ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8007ada:	095b      	lsrs	r3, r3, #5
 8007adc:	f003 020f 	and.w	r2, r3, #15
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4442      	add	r2, r8
 8007ae6:	609a      	str	r2, [r3, #8]
}
 8007ae8:	e7ff      	b.n	8007aea <UART_SetConfig+0x6e2>
 8007aea:	bf00      	nop
 8007aec:	3714      	adds	r7, #20
 8007aee:	46bd      	mov	sp, r7
 8007af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007af4:	40011000 	.word	0x40011000
 8007af8:	40011400 	.word	0x40011400
 8007afc:	51eb851f 	.word	0x51eb851f

08007b00 <__errno>:
 8007b00:	4b01      	ldr	r3, [pc, #4]	; (8007b08 <__errno+0x8>)
 8007b02:	6818      	ldr	r0, [r3, #0]
 8007b04:	4770      	bx	lr
 8007b06:	bf00      	nop
 8007b08:	20000010 	.word	0x20000010

08007b0c <__libc_init_array>:
 8007b0c:	b570      	push	{r4, r5, r6, lr}
 8007b0e:	4e0d      	ldr	r6, [pc, #52]	; (8007b44 <__libc_init_array+0x38>)
 8007b10:	4c0d      	ldr	r4, [pc, #52]	; (8007b48 <__libc_init_array+0x3c>)
 8007b12:	1ba4      	subs	r4, r4, r6
 8007b14:	10a4      	asrs	r4, r4, #2
 8007b16:	2500      	movs	r5, #0
 8007b18:	42a5      	cmp	r5, r4
 8007b1a:	d109      	bne.n	8007b30 <__libc_init_array+0x24>
 8007b1c:	4e0b      	ldr	r6, [pc, #44]	; (8007b4c <__libc_init_array+0x40>)
 8007b1e:	4c0c      	ldr	r4, [pc, #48]	; (8007b50 <__libc_init_array+0x44>)
 8007b20:	f003 f8c4 	bl	800acac <_init>
 8007b24:	1ba4      	subs	r4, r4, r6
 8007b26:	10a4      	asrs	r4, r4, #2
 8007b28:	2500      	movs	r5, #0
 8007b2a:	42a5      	cmp	r5, r4
 8007b2c:	d105      	bne.n	8007b3a <__libc_init_array+0x2e>
 8007b2e:	bd70      	pop	{r4, r5, r6, pc}
 8007b30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007b34:	4798      	blx	r3
 8007b36:	3501      	adds	r5, #1
 8007b38:	e7ee      	b.n	8007b18 <__libc_init_array+0xc>
 8007b3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007b3e:	4798      	blx	r3
 8007b40:	3501      	adds	r5, #1
 8007b42:	e7f2      	b.n	8007b2a <__libc_init_array+0x1e>
 8007b44:	0800b118 	.word	0x0800b118
 8007b48:	0800b118 	.word	0x0800b118
 8007b4c:	0800b118 	.word	0x0800b118
 8007b50:	0800b11c 	.word	0x0800b11c

08007b54 <malloc>:
 8007b54:	4b02      	ldr	r3, [pc, #8]	; (8007b60 <malloc+0xc>)
 8007b56:	4601      	mov	r1, r0
 8007b58:	6818      	ldr	r0, [r3, #0]
 8007b5a:	f000 b865 	b.w	8007c28 <_malloc_r>
 8007b5e:	bf00      	nop
 8007b60:	20000010 	.word	0x20000010

08007b64 <memcpy>:
 8007b64:	b510      	push	{r4, lr}
 8007b66:	1e43      	subs	r3, r0, #1
 8007b68:	440a      	add	r2, r1
 8007b6a:	4291      	cmp	r1, r2
 8007b6c:	d100      	bne.n	8007b70 <memcpy+0xc>
 8007b6e:	bd10      	pop	{r4, pc}
 8007b70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b78:	e7f7      	b.n	8007b6a <memcpy+0x6>

08007b7a <memset>:
 8007b7a:	4402      	add	r2, r0
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d100      	bne.n	8007b84 <memset+0xa>
 8007b82:	4770      	bx	lr
 8007b84:	f803 1b01 	strb.w	r1, [r3], #1
 8007b88:	e7f9      	b.n	8007b7e <memset+0x4>
	...

08007b8c <_free_r>:
 8007b8c:	b538      	push	{r3, r4, r5, lr}
 8007b8e:	4605      	mov	r5, r0
 8007b90:	2900      	cmp	r1, #0
 8007b92:	d045      	beq.n	8007c20 <_free_r+0x94>
 8007b94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b98:	1f0c      	subs	r4, r1, #4
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	bfb8      	it	lt
 8007b9e:	18e4      	addlt	r4, r4, r3
 8007ba0:	f001 fb88 	bl	80092b4 <__malloc_lock>
 8007ba4:	4a1f      	ldr	r2, [pc, #124]	; (8007c24 <_free_r+0x98>)
 8007ba6:	6813      	ldr	r3, [r2, #0]
 8007ba8:	4610      	mov	r0, r2
 8007baa:	b933      	cbnz	r3, 8007bba <_free_r+0x2e>
 8007bac:	6063      	str	r3, [r4, #4]
 8007bae:	6014      	str	r4, [r2, #0]
 8007bb0:	4628      	mov	r0, r5
 8007bb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bb6:	f001 bb7e 	b.w	80092b6 <__malloc_unlock>
 8007bba:	42a3      	cmp	r3, r4
 8007bbc:	d90c      	bls.n	8007bd8 <_free_r+0x4c>
 8007bbe:	6821      	ldr	r1, [r4, #0]
 8007bc0:	1862      	adds	r2, r4, r1
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	bf04      	itt	eq
 8007bc6:	681a      	ldreq	r2, [r3, #0]
 8007bc8:	685b      	ldreq	r3, [r3, #4]
 8007bca:	6063      	str	r3, [r4, #4]
 8007bcc:	bf04      	itt	eq
 8007bce:	1852      	addeq	r2, r2, r1
 8007bd0:	6022      	streq	r2, [r4, #0]
 8007bd2:	6004      	str	r4, [r0, #0]
 8007bd4:	e7ec      	b.n	8007bb0 <_free_r+0x24>
 8007bd6:	4613      	mov	r3, r2
 8007bd8:	685a      	ldr	r2, [r3, #4]
 8007bda:	b10a      	cbz	r2, 8007be0 <_free_r+0x54>
 8007bdc:	42a2      	cmp	r2, r4
 8007bde:	d9fa      	bls.n	8007bd6 <_free_r+0x4a>
 8007be0:	6819      	ldr	r1, [r3, #0]
 8007be2:	1858      	adds	r0, r3, r1
 8007be4:	42a0      	cmp	r0, r4
 8007be6:	d10b      	bne.n	8007c00 <_free_r+0x74>
 8007be8:	6820      	ldr	r0, [r4, #0]
 8007bea:	4401      	add	r1, r0
 8007bec:	1858      	adds	r0, r3, r1
 8007bee:	4282      	cmp	r2, r0
 8007bf0:	6019      	str	r1, [r3, #0]
 8007bf2:	d1dd      	bne.n	8007bb0 <_free_r+0x24>
 8007bf4:	6810      	ldr	r0, [r2, #0]
 8007bf6:	6852      	ldr	r2, [r2, #4]
 8007bf8:	605a      	str	r2, [r3, #4]
 8007bfa:	4401      	add	r1, r0
 8007bfc:	6019      	str	r1, [r3, #0]
 8007bfe:	e7d7      	b.n	8007bb0 <_free_r+0x24>
 8007c00:	d902      	bls.n	8007c08 <_free_r+0x7c>
 8007c02:	230c      	movs	r3, #12
 8007c04:	602b      	str	r3, [r5, #0]
 8007c06:	e7d3      	b.n	8007bb0 <_free_r+0x24>
 8007c08:	6820      	ldr	r0, [r4, #0]
 8007c0a:	1821      	adds	r1, r4, r0
 8007c0c:	428a      	cmp	r2, r1
 8007c0e:	bf04      	itt	eq
 8007c10:	6811      	ldreq	r1, [r2, #0]
 8007c12:	6852      	ldreq	r2, [r2, #4]
 8007c14:	6062      	str	r2, [r4, #4]
 8007c16:	bf04      	itt	eq
 8007c18:	1809      	addeq	r1, r1, r0
 8007c1a:	6021      	streq	r1, [r4, #0]
 8007c1c:	605c      	str	r4, [r3, #4]
 8007c1e:	e7c7      	b.n	8007bb0 <_free_r+0x24>
 8007c20:	bd38      	pop	{r3, r4, r5, pc}
 8007c22:	bf00      	nop
 8007c24:	2000020c 	.word	0x2000020c

08007c28 <_malloc_r>:
 8007c28:	b570      	push	{r4, r5, r6, lr}
 8007c2a:	1ccd      	adds	r5, r1, #3
 8007c2c:	f025 0503 	bic.w	r5, r5, #3
 8007c30:	3508      	adds	r5, #8
 8007c32:	2d0c      	cmp	r5, #12
 8007c34:	bf38      	it	cc
 8007c36:	250c      	movcc	r5, #12
 8007c38:	2d00      	cmp	r5, #0
 8007c3a:	4606      	mov	r6, r0
 8007c3c:	db01      	blt.n	8007c42 <_malloc_r+0x1a>
 8007c3e:	42a9      	cmp	r1, r5
 8007c40:	d903      	bls.n	8007c4a <_malloc_r+0x22>
 8007c42:	230c      	movs	r3, #12
 8007c44:	6033      	str	r3, [r6, #0]
 8007c46:	2000      	movs	r0, #0
 8007c48:	bd70      	pop	{r4, r5, r6, pc}
 8007c4a:	f001 fb33 	bl	80092b4 <__malloc_lock>
 8007c4e:	4a21      	ldr	r2, [pc, #132]	; (8007cd4 <_malloc_r+0xac>)
 8007c50:	6814      	ldr	r4, [r2, #0]
 8007c52:	4621      	mov	r1, r4
 8007c54:	b991      	cbnz	r1, 8007c7c <_malloc_r+0x54>
 8007c56:	4c20      	ldr	r4, [pc, #128]	; (8007cd8 <_malloc_r+0xb0>)
 8007c58:	6823      	ldr	r3, [r4, #0]
 8007c5a:	b91b      	cbnz	r3, 8007c64 <_malloc_r+0x3c>
 8007c5c:	4630      	mov	r0, r6
 8007c5e:	f000 fc99 	bl	8008594 <_sbrk_r>
 8007c62:	6020      	str	r0, [r4, #0]
 8007c64:	4629      	mov	r1, r5
 8007c66:	4630      	mov	r0, r6
 8007c68:	f000 fc94 	bl	8008594 <_sbrk_r>
 8007c6c:	1c43      	adds	r3, r0, #1
 8007c6e:	d124      	bne.n	8007cba <_malloc_r+0x92>
 8007c70:	230c      	movs	r3, #12
 8007c72:	6033      	str	r3, [r6, #0]
 8007c74:	4630      	mov	r0, r6
 8007c76:	f001 fb1e 	bl	80092b6 <__malloc_unlock>
 8007c7a:	e7e4      	b.n	8007c46 <_malloc_r+0x1e>
 8007c7c:	680b      	ldr	r3, [r1, #0]
 8007c7e:	1b5b      	subs	r3, r3, r5
 8007c80:	d418      	bmi.n	8007cb4 <_malloc_r+0x8c>
 8007c82:	2b0b      	cmp	r3, #11
 8007c84:	d90f      	bls.n	8007ca6 <_malloc_r+0x7e>
 8007c86:	600b      	str	r3, [r1, #0]
 8007c88:	50cd      	str	r5, [r1, r3]
 8007c8a:	18cc      	adds	r4, r1, r3
 8007c8c:	4630      	mov	r0, r6
 8007c8e:	f001 fb12 	bl	80092b6 <__malloc_unlock>
 8007c92:	f104 000b 	add.w	r0, r4, #11
 8007c96:	1d23      	adds	r3, r4, #4
 8007c98:	f020 0007 	bic.w	r0, r0, #7
 8007c9c:	1ac3      	subs	r3, r0, r3
 8007c9e:	d0d3      	beq.n	8007c48 <_malloc_r+0x20>
 8007ca0:	425a      	negs	r2, r3
 8007ca2:	50e2      	str	r2, [r4, r3]
 8007ca4:	e7d0      	b.n	8007c48 <_malloc_r+0x20>
 8007ca6:	428c      	cmp	r4, r1
 8007ca8:	684b      	ldr	r3, [r1, #4]
 8007caa:	bf16      	itet	ne
 8007cac:	6063      	strne	r3, [r4, #4]
 8007cae:	6013      	streq	r3, [r2, #0]
 8007cb0:	460c      	movne	r4, r1
 8007cb2:	e7eb      	b.n	8007c8c <_malloc_r+0x64>
 8007cb4:	460c      	mov	r4, r1
 8007cb6:	6849      	ldr	r1, [r1, #4]
 8007cb8:	e7cc      	b.n	8007c54 <_malloc_r+0x2c>
 8007cba:	1cc4      	adds	r4, r0, #3
 8007cbc:	f024 0403 	bic.w	r4, r4, #3
 8007cc0:	42a0      	cmp	r0, r4
 8007cc2:	d005      	beq.n	8007cd0 <_malloc_r+0xa8>
 8007cc4:	1a21      	subs	r1, r4, r0
 8007cc6:	4630      	mov	r0, r6
 8007cc8:	f000 fc64 	bl	8008594 <_sbrk_r>
 8007ccc:	3001      	adds	r0, #1
 8007cce:	d0cf      	beq.n	8007c70 <_malloc_r+0x48>
 8007cd0:	6025      	str	r5, [r4, #0]
 8007cd2:	e7db      	b.n	8007c8c <_malloc_r+0x64>
 8007cd4:	2000020c 	.word	0x2000020c
 8007cd8:	20000210 	.word	0x20000210

08007cdc <__cvt>:
 8007cdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ce0:	ec55 4b10 	vmov	r4, r5, d0
 8007ce4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007ce6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007cea:	2d00      	cmp	r5, #0
 8007cec:	460e      	mov	r6, r1
 8007cee:	4691      	mov	r9, r2
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	bfb8      	it	lt
 8007cf4:	4622      	movlt	r2, r4
 8007cf6:	462b      	mov	r3, r5
 8007cf8:	f027 0720 	bic.w	r7, r7, #32
 8007cfc:	bfbb      	ittet	lt
 8007cfe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007d02:	461d      	movlt	r5, r3
 8007d04:	2300      	movge	r3, #0
 8007d06:	232d      	movlt	r3, #45	; 0x2d
 8007d08:	bfb8      	it	lt
 8007d0a:	4614      	movlt	r4, r2
 8007d0c:	2f46      	cmp	r7, #70	; 0x46
 8007d0e:	700b      	strb	r3, [r1, #0]
 8007d10:	d004      	beq.n	8007d1c <__cvt+0x40>
 8007d12:	2f45      	cmp	r7, #69	; 0x45
 8007d14:	d100      	bne.n	8007d18 <__cvt+0x3c>
 8007d16:	3601      	adds	r6, #1
 8007d18:	2102      	movs	r1, #2
 8007d1a:	e000      	b.n	8007d1e <__cvt+0x42>
 8007d1c:	2103      	movs	r1, #3
 8007d1e:	ab03      	add	r3, sp, #12
 8007d20:	9301      	str	r3, [sp, #4]
 8007d22:	ab02      	add	r3, sp, #8
 8007d24:	9300      	str	r3, [sp, #0]
 8007d26:	4632      	mov	r2, r6
 8007d28:	4653      	mov	r3, sl
 8007d2a:	ec45 4b10 	vmov	d0, r4, r5
 8007d2e:	f000 fcfb 	bl	8008728 <_dtoa_r>
 8007d32:	2f47      	cmp	r7, #71	; 0x47
 8007d34:	4680      	mov	r8, r0
 8007d36:	d102      	bne.n	8007d3e <__cvt+0x62>
 8007d38:	f019 0f01 	tst.w	r9, #1
 8007d3c:	d026      	beq.n	8007d8c <__cvt+0xb0>
 8007d3e:	2f46      	cmp	r7, #70	; 0x46
 8007d40:	eb08 0906 	add.w	r9, r8, r6
 8007d44:	d111      	bne.n	8007d6a <__cvt+0x8e>
 8007d46:	f898 3000 	ldrb.w	r3, [r8]
 8007d4a:	2b30      	cmp	r3, #48	; 0x30
 8007d4c:	d10a      	bne.n	8007d64 <__cvt+0x88>
 8007d4e:	2200      	movs	r2, #0
 8007d50:	2300      	movs	r3, #0
 8007d52:	4620      	mov	r0, r4
 8007d54:	4629      	mov	r1, r5
 8007d56:	f7f8 fec7 	bl	8000ae8 <__aeabi_dcmpeq>
 8007d5a:	b918      	cbnz	r0, 8007d64 <__cvt+0x88>
 8007d5c:	f1c6 0601 	rsb	r6, r6, #1
 8007d60:	f8ca 6000 	str.w	r6, [sl]
 8007d64:	f8da 3000 	ldr.w	r3, [sl]
 8007d68:	4499      	add	r9, r3
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	4620      	mov	r0, r4
 8007d70:	4629      	mov	r1, r5
 8007d72:	f7f8 feb9 	bl	8000ae8 <__aeabi_dcmpeq>
 8007d76:	b938      	cbnz	r0, 8007d88 <__cvt+0xac>
 8007d78:	2230      	movs	r2, #48	; 0x30
 8007d7a:	9b03      	ldr	r3, [sp, #12]
 8007d7c:	454b      	cmp	r3, r9
 8007d7e:	d205      	bcs.n	8007d8c <__cvt+0xb0>
 8007d80:	1c59      	adds	r1, r3, #1
 8007d82:	9103      	str	r1, [sp, #12]
 8007d84:	701a      	strb	r2, [r3, #0]
 8007d86:	e7f8      	b.n	8007d7a <__cvt+0x9e>
 8007d88:	f8cd 900c 	str.w	r9, [sp, #12]
 8007d8c:	9b03      	ldr	r3, [sp, #12]
 8007d8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d90:	eba3 0308 	sub.w	r3, r3, r8
 8007d94:	4640      	mov	r0, r8
 8007d96:	6013      	str	r3, [r2, #0]
 8007d98:	b004      	add	sp, #16
 8007d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007d9e <__exponent>:
 8007d9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007da0:	2900      	cmp	r1, #0
 8007da2:	4604      	mov	r4, r0
 8007da4:	bfba      	itte	lt
 8007da6:	4249      	neglt	r1, r1
 8007da8:	232d      	movlt	r3, #45	; 0x2d
 8007daa:	232b      	movge	r3, #43	; 0x2b
 8007dac:	2909      	cmp	r1, #9
 8007dae:	f804 2b02 	strb.w	r2, [r4], #2
 8007db2:	7043      	strb	r3, [r0, #1]
 8007db4:	dd20      	ble.n	8007df8 <__exponent+0x5a>
 8007db6:	f10d 0307 	add.w	r3, sp, #7
 8007dba:	461f      	mov	r7, r3
 8007dbc:	260a      	movs	r6, #10
 8007dbe:	fb91 f5f6 	sdiv	r5, r1, r6
 8007dc2:	fb06 1115 	mls	r1, r6, r5, r1
 8007dc6:	3130      	adds	r1, #48	; 0x30
 8007dc8:	2d09      	cmp	r5, #9
 8007dca:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007dce:	f103 32ff 	add.w	r2, r3, #4294967295
 8007dd2:	4629      	mov	r1, r5
 8007dd4:	dc09      	bgt.n	8007dea <__exponent+0x4c>
 8007dd6:	3130      	adds	r1, #48	; 0x30
 8007dd8:	3b02      	subs	r3, #2
 8007dda:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007dde:	42bb      	cmp	r3, r7
 8007de0:	4622      	mov	r2, r4
 8007de2:	d304      	bcc.n	8007dee <__exponent+0x50>
 8007de4:	1a10      	subs	r0, r2, r0
 8007de6:	b003      	add	sp, #12
 8007de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007dea:	4613      	mov	r3, r2
 8007dec:	e7e7      	b.n	8007dbe <__exponent+0x20>
 8007dee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007df2:	f804 2b01 	strb.w	r2, [r4], #1
 8007df6:	e7f2      	b.n	8007dde <__exponent+0x40>
 8007df8:	2330      	movs	r3, #48	; 0x30
 8007dfa:	4419      	add	r1, r3
 8007dfc:	7083      	strb	r3, [r0, #2]
 8007dfe:	1d02      	adds	r2, r0, #4
 8007e00:	70c1      	strb	r1, [r0, #3]
 8007e02:	e7ef      	b.n	8007de4 <__exponent+0x46>

08007e04 <_printf_float>:
 8007e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e08:	b08d      	sub	sp, #52	; 0x34
 8007e0a:	460c      	mov	r4, r1
 8007e0c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007e10:	4616      	mov	r6, r2
 8007e12:	461f      	mov	r7, r3
 8007e14:	4605      	mov	r5, r0
 8007e16:	f001 fa3f 	bl	8009298 <_localeconv_r>
 8007e1a:	6803      	ldr	r3, [r0, #0]
 8007e1c:	9304      	str	r3, [sp, #16]
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f7f8 f9e0 	bl	80001e4 <strlen>
 8007e24:	2300      	movs	r3, #0
 8007e26:	930a      	str	r3, [sp, #40]	; 0x28
 8007e28:	f8d8 3000 	ldr.w	r3, [r8]
 8007e2c:	9005      	str	r0, [sp, #20]
 8007e2e:	3307      	adds	r3, #7
 8007e30:	f023 0307 	bic.w	r3, r3, #7
 8007e34:	f103 0208 	add.w	r2, r3, #8
 8007e38:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007e3c:	f8d4 b000 	ldr.w	fp, [r4]
 8007e40:	f8c8 2000 	str.w	r2, [r8]
 8007e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e48:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007e4c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007e50:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007e54:	9307      	str	r3, [sp, #28]
 8007e56:	f8cd 8018 	str.w	r8, [sp, #24]
 8007e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e5e:	4ba7      	ldr	r3, [pc, #668]	; (80080fc <_printf_float+0x2f8>)
 8007e60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e64:	f7f8 fe72 	bl	8000b4c <__aeabi_dcmpun>
 8007e68:	bb70      	cbnz	r0, 8007ec8 <_printf_float+0xc4>
 8007e6a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e6e:	4ba3      	ldr	r3, [pc, #652]	; (80080fc <_printf_float+0x2f8>)
 8007e70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e74:	f7f8 fe4c 	bl	8000b10 <__aeabi_dcmple>
 8007e78:	bb30      	cbnz	r0, 8007ec8 <_printf_float+0xc4>
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	4640      	mov	r0, r8
 8007e80:	4649      	mov	r1, r9
 8007e82:	f7f8 fe3b 	bl	8000afc <__aeabi_dcmplt>
 8007e86:	b110      	cbz	r0, 8007e8e <_printf_float+0x8a>
 8007e88:	232d      	movs	r3, #45	; 0x2d
 8007e8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e8e:	4a9c      	ldr	r2, [pc, #624]	; (8008100 <_printf_float+0x2fc>)
 8007e90:	4b9c      	ldr	r3, [pc, #624]	; (8008104 <_printf_float+0x300>)
 8007e92:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007e96:	bf8c      	ite	hi
 8007e98:	4690      	movhi	r8, r2
 8007e9a:	4698      	movls	r8, r3
 8007e9c:	2303      	movs	r3, #3
 8007e9e:	f02b 0204 	bic.w	r2, fp, #4
 8007ea2:	6123      	str	r3, [r4, #16]
 8007ea4:	6022      	str	r2, [r4, #0]
 8007ea6:	f04f 0900 	mov.w	r9, #0
 8007eaa:	9700      	str	r7, [sp, #0]
 8007eac:	4633      	mov	r3, r6
 8007eae:	aa0b      	add	r2, sp, #44	; 0x2c
 8007eb0:	4621      	mov	r1, r4
 8007eb2:	4628      	mov	r0, r5
 8007eb4:	f000 f9e6 	bl	8008284 <_printf_common>
 8007eb8:	3001      	adds	r0, #1
 8007eba:	f040 808d 	bne.w	8007fd8 <_printf_float+0x1d4>
 8007ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8007ec2:	b00d      	add	sp, #52	; 0x34
 8007ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ec8:	4642      	mov	r2, r8
 8007eca:	464b      	mov	r3, r9
 8007ecc:	4640      	mov	r0, r8
 8007ece:	4649      	mov	r1, r9
 8007ed0:	f7f8 fe3c 	bl	8000b4c <__aeabi_dcmpun>
 8007ed4:	b110      	cbz	r0, 8007edc <_printf_float+0xd8>
 8007ed6:	4a8c      	ldr	r2, [pc, #560]	; (8008108 <_printf_float+0x304>)
 8007ed8:	4b8c      	ldr	r3, [pc, #560]	; (800810c <_printf_float+0x308>)
 8007eda:	e7da      	b.n	8007e92 <_printf_float+0x8e>
 8007edc:	6861      	ldr	r1, [r4, #4]
 8007ede:	1c4b      	adds	r3, r1, #1
 8007ee0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007ee4:	a80a      	add	r0, sp, #40	; 0x28
 8007ee6:	d13e      	bne.n	8007f66 <_printf_float+0x162>
 8007ee8:	2306      	movs	r3, #6
 8007eea:	6063      	str	r3, [r4, #4]
 8007eec:	2300      	movs	r3, #0
 8007eee:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007ef2:	ab09      	add	r3, sp, #36	; 0x24
 8007ef4:	9300      	str	r3, [sp, #0]
 8007ef6:	ec49 8b10 	vmov	d0, r8, r9
 8007efa:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007efe:	6022      	str	r2, [r4, #0]
 8007f00:	f8cd a004 	str.w	sl, [sp, #4]
 8007f04:	6861      	ldr	r1, [r4, #4]
 8007f06:	4628      	mov	r0, r5
 8007f08:	f7ff fee8 	bl	8007cdc <__cvt>
 8007f0c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007f10:	2b47      	cmp	r3, #71	; 0x47
 8007f12:	4680      	mov	r8, r0
 8007f14:	d109      	bne.n	8007f2a <_printf_float+0x126>
 8007f16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f18:	1cd8      	adds	r0, r3, #3
 8007f1a:	db02      	blt.n	8007f22 <_printf_float+0x11e>
 8007f1c:	6862      	ldr	r2, [r4, #4]
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	dd47      	ble.n	8007fb2 <_printf_float+0x1ae>
 8007f22:	f1aa 0a02 	sub.w	sl, sl, #2
 8007f26:	fa5f fa8a 	uxtb.w	sl, sl
 8007f2a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007f2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f30:	d824      	bhi.n	8007f7c <_printf_float+0x178>
 8007f32:	3901      	subs	r1, #1
 8007f34:	4652      	mov	r2, sl
 8007f36:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007f3a:	9109      	str	r1, [sp, #36]	; 0x24
 8007f3c:	f7ff ff2f 	bl	8007d9e <__exponent>
 8007f40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f42:	1813      	adds	r3, r2, r0
 8007f44:	2a01      	cmp	r2, #1
 8007f46:	4681      	mov	r9, r0
 8007f48:	6123      	str	r3, [r4, #16]
 8007f4a:	dc02      	bgt.n	8007f52 <_printf_float+0x14e>
 8007f4c:	6822      	ldr	r2, [r4, #0]
 8007f4e:	07d1      	lsls	r1, r2, #31
 8007f50:	d501      	bpl.n	8007f56 <_printf_float+0x152>
 8007f52:	3301      	adds	r3, #1
 8007f54:	6123      	str	r3, [r4, #16]
 8007f56:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d0a5      	beq.n	8007eaa <_printf_float+0xa6>
 8007f5e:	232d      	movs	r3, #45	; 0x2d
 8007f60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f64:	e7a1      	b.n	8007eaa <_printf_float+0xa6>
 8007f66:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8007f6a:	f000 8177 	beq.w	800825c <_printf_float+0x458>
 8007f6e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007f72:	d1bb      	bne.n	8007eec <_printf_float+0xe8>
 8007f74:	2900      	cmp	r1, #0
 8007f76:	d1b9      	bne.n	8007eec <_printf_float+0xe8>
 8007f78:	2301      	movs	r3, #1
 8007f7a:	e7b6      	b.n	8007eea <_printf_float+0xe6>
 8007f7c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8007f80:	d119      	bne.n	8007fb6 <_printf_float+0x1b2>
 8007f82:	2900      	cmp	r1, #0
 8007f84:	6863      	ldr	r3, [r4, #4]
 8007f86:	dd0c      	ble.n	8007fa2 <_printf_float+0x19e>
 8007f88:	6121      	str	r1, [r4, #16]
 8007f8a:	b913      	cbnz	r3, 8007f92 <_printf_float+0x18e>
 8007f8c:	6822      	ldr	r2, [r4, #0]
 8007f8e:	07d2      	lsls	r2, r2, #31
 8007f90:	d502      	bpl.n	8007f98 <_printf_float+0x194>
 8007f92:	3301      	adds	r3, #1
 8007f94:	440b      	add	r3, r1
 8007f96:	6123      	str	r3, [r4, #16]
 8007f98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f9a:	65a3      	str	r3, [r4, #88]	; 0x58
 8007f9c:	f04f 0900 	mov.w	r9, #0
 8007fa0:	e7d9      	b.n	8007f56 <_printf_float+0x152>
 8007fa2:	b913      	cbnz	r3, 8007faa <_printf_float+0x1a6>
 8007fa4:	6822      	ldr	r2, [r4, #0]
 8007fa6:	07d0      	lsls	r0, r2, #31
 8007fa8:	d501      	bpl.n	8007fae <_printf_float+0x1aa>
 8007faa:	3302      	adds	r3, #2
 8007fac:	e7f3      	b.n	8007f96 <_printf_float+0x192>
 8007fae:	2301      	movs	r3, #1
 8007fb0:	e7f1      	b.n	8007f96 <_printf_float+0x192>
 8007fb2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8007fb6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	db05      	blt.n	8007fca <_printf_float+0x1c6>
 8007fbe:	6822      	ldr	r2, [r4, #0]
 8007fc0:	6123      	str	r3, [r4, #16]
 8007fc2:	07d1      	lsls	r1, r2, #31
 8007fc4:	d5e8      	bpl.n	8007f98 <_printf_float+0x194>
 8007fc6:	3301      	adds	r3, #1
 8007fc8:	e7e5      	b.n	8007f96 <_printf_float+0x192>
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	bfd4      	ite	le
 8007fce:	f1c3 0302 	rsble	r3, r3, #2
 8007fd2:	2301      	movgt	r3, #1
 8007fd4:	4413      	add	r3, r2
 8007fd6:	e7de      	b.n	8007f96 <_printf_float+0x192>
 8007fd8:	6823      	ldr	r3, [r4, #0]
 8007fda:	055a      	lsls	r2, r3, #21
 8007fdc:	d407      	bmi.n	8007fee <_printf_float+0x1ea>
 8007fde:	6923      	ldr	r3, [r4, #16]
 8007fe0:	4642      	mov	r2, r8
 8007fe2:	4631      	mov	r1, r6
 8007fe4:	4628      	mov	r0, r5
 8007fe6:	47b8      	blx	r7
 8007fe8:	3001      	adds	r0, #1
 8007fea:	d12b      	bne.n	8008044 <_printf_float+0x240>
 8007fec:	e767      	b.n	8007ebe <_printf_float+0xba>
 8007fee:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007ff2:	f240 80dc 	bls.w	80081ae <_printf_float+0x3aa>
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007ffe:	f7f8 fd73 	bl	8000ae8 <__aeabi_dcmpeq>
 8008002:	2800      	cmp	r0, #0
 8008004:	d033      	beq.n	800806e <_printf_float+0x26a>
 8008006:	2301      	movs	r3, #1
 8008008:	4a41      	ldr	r2, [pc, #260]	; (8008110 <_printf_float+0x30c>)
 800800a:	4631      	mov	r1, r6
 800800c:	4628      	mov	r0, r5
 800800e:	47b8      	blx	r7
 8008010:	3001      	adds	r0, #1
 8008012:	f43f af54 	beq.w	8007ebe <_printf_float+0xba>
 8008016:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800801a:	429a      	cmp	r2, r3
 800801c:	db02      	blt.n	8008024 <_printf_float+0x220>
 800801e:	6823      	ldr	r3, [r4, #0]
 8008020:	07d8      	lsls	r0, r3, #31
 8008022:	d50f      	bpl.n	8008044 <_printf_float+0x240>
 8008024:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008028:	4631      	mov	r1, r6
 800802a:	4628      	mov	r0, r5
 800802c:	47b8      	blx	r7
 800802e:	3001      	adds	r0, #1
 8008030:	f43f af45 	beq.w	8007ebe <_printf_float+0xba>
 8008034:	f04f 0800 	mov.w	r8, #0
 8008038:	f104 091a 	add.w	r9, r4, #26
 800803c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800803e:	3b01      	subs	r3, #1
 8008040:	4543      	cmp	r3, r8
 8008042:	dc09      	bgt.n	8008058 <_printf_float+0x254>
 8008044:	6823      	ldr	r3, [r4, #0]
 8008046:	079b      	lsls	r3, r3, #30
 8008048:	f100 8103 	bmi.w	8008252 <_printf_float+0x44e>
 800804c:	68e0      	ldr	r0, [r4, #12]
 800804e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008050:	4298      	cmp	r0, r3
 8008052:	bfb8      	it	lt
 8008054:	4618      	movlt	r0, r3
 8008056:	e734      	b.n	8007ec2 <_printf_float+0xbe>
 8008058:	2301      	movs	r3, #1
 800805a:	464a      	mov	r2, r9
 800805c:	4631      	mov	r1, r6
 800805e:	4628      	mov	r0, r5
 8008060:	47b8      	blx	r7
 8008062:	3001      	adds	r0, #1
 8008064:	f43f af2b 	beq.w	8007ebe <_printf_float+0xba>
 8008068:	f108 0801 	add.w	r8, r8, #1
 800806c:	e7e6      	b.n	800803c <_printf_float+0x238>
 800806e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008070:	2b00      	cmp	r3, #0
 8008072:	dc2b      	bgt.n	80080cc <_printf_float+0x2c8>
 8008074:	2301      	movs	r3, #1
 8008076:	4a26      	ldr	r2, [pc, #152]	; (8008110 <_printf_float+0x30c>)
 8008078:	4631      	mov	r1, r6
 800807a:	4628      	mov	r0, r5
 800807c:	47b8      	blx	r7
 800807e:	3001      	adds	r0, #1
 8008080:	f43f af1d 	beq.w	8007ebe <_printf_float+0xba>
 8008084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008086:	b923      	cbnz	r3, 8008092 <_printf_float+0x28e>
 8008088:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800808a:	b913      	cbnz	r3, 8008092 <_printf_float+0x28e>
 800808c:	6823      	ldr	r3, [r4, #0]
 800808e:	07d9      	lsls	r1, r3, #31
 8008090:	d5d8      	bpl.n	8008044 <_printf_float+0x240>
 8008092:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008096:	4631      	mov	r1, r6
 8008098:	4628      	mov	r0, r5
 800809a:	47b8      	blx	r7
 800809c:	3001      	adds	r0, #1
 800809e:	f43f af0e 	beq.w	8007ebe <_printf_float+0xba>
 80080a2:	f04f 0900 	mov.w	r9, #0
 80080a6:	f104 0a1a 	add.w	sl, r4, #26
 80080aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080ac:	425b      	negs	r3, r3
 80080ae:	454b      	cmp	r3, r9
 80080b0:	dc01      	bgt.n	80080b6 <_printf_float+0x2b2>
 80080b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080b4:	e794      	b.n	8007fe0 <_printf_float+0x1dc>
 80080b6:	2301      	movs	r3, #1
 80080b8:	4652      	mov	r2, sl
 80080ba:	4631      	mov	r1, r6
 80080bc:	4628      	mov	r0, r5
 80080be:	47b8      	blx	r7
 80080c0:	3001      	adds	r0, #1
 80080c2:	f43f aefc 	beq.w	8007ebe <_printf_float+0xba>
 80080c6:	f109 0901 	add.w	r9, r9, #1
 80080ca:	e7ee      	b.n	80080aa <_printf_float+0x2a6>
 80080cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80080d0:	429a      	cmp	r2, r3
 80080d2:	bfa8      	it	ge
 80080d4:	461a      	movge	r2, r3
 80080d6:	2a00      	cmp	r2, #0
 80080d8:	4691      	mov	r9, r2
 80080da:	dd07      	ble.n	80080ec <_printf_float+0x2e8>
 80080dc:	4613      	mov	r3, r2
 80080de:	4631      	mov	r1, r6
 80080e0:	4642      	mov	r2, r8
 80080e2:	4628      	mov	r0, r5
 80080e4:	47b8      	blx	r7
 80080e6:	3001      	adds	r0, #1
 80080e8:	f43f aee9 	beq.w	8007ebe <_printf_float+0xba>
 80080ec:	f104 031a 	add.w	r3, r4, #26
 80080f0:	f04f 0b00 	mov.w	fp, #0
 80080f4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80080f8:	9306      	str	r3, [sp, #24]
 80080fa:	e015      	b.n	8008128 <_printf_float+0x324>
 80080fc:	7fefffff 	.word	0x7fefffff
 8008100:	0800ae6c 	.word	0x0800ae6c
 8008104:	0800ae68 	.word	0x0800ae68
 8008108:	0800ae74 	.word	0x0800ae74
 800810c:	0800ae70 	.word	0x0800ae70
 8008110:	0800ae78 	.word	0x0800ae78
 8008114:	2301      	movs	r3, #1
 8008116:	9a06      	ldr	r2, [sp, #24]
 8008118:	4631      	mov	r1, r6
 800811a:	4628      	mov	r0, r5
 800811c:	47b8      	blx	r7
 800811e:	3001      	adds	r0, #1
 8008120:	f43f aecd 	beq.w	8007ebe <_printf_float+0xba>
 8008124:	f10b 0b01 	add.w	fp, fp, #1
 8008128:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800812c:	ebaa 0309 	sub.w	r3, sl, r9
 8008130:	455b      	cmp	r3, fp
 8008132:	dcef      	bgt.n	8008114 <_printf_float+0x310>
 8008134:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008138:	429a      	cmp	r2, r3
 800813a:	44d0      	add	r8, sl
 800813c:	db15      	blt.n	800816a <_printf_float+0x366>
 800813e:	6823      	ldr	r3, [r4, #0]
 8008140:	07da      	lsls	r2, r3, #31
 8008142:	d412      	bmi.n	800816a <_printf_float+0x366>
 8008144:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008146:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008148:	eba3 020a 	sub.w	r2, r3, sl
 800814c:	eba3 0a01 	sub.w	sl, r3, r1
 8008150:	4592      	cmp	sl, r2
 8008152:	bfa8      	it	ge
 8008154:	4692      	movge	sl, r2
 8008156:	f1ba 0f00 	cmp.w	sl, #0
 800815a:	dc0e      	bgt.n	800817a <_printf_float+0x376>
 800815c:	f04f 0800 	mov.w	r8, #0
 8008160:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008164:	f104 091a 	add.w	r9, r4, #26
 8008168:	e019      	b.n	800819e <_printf_float+0x39a>
 800816a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800816e:	4631      	mov	r1, r6
 8008170:	4628      	mov	r0, r5
 8008172:	47b8      	blx	r7
 8008174:	3001      	adds	r0, #1
 8008176:	d1e5      	bne.n	8008144 <_printf_float+0x340>
 8008178:	e6a1      	b.n	8007ebe <_printf_float+0xba>
 800817a:	4653      	mov	r3, sl
 800817c:	4642      	mov	r2, r8
 800817e:	4631      	mov	r1, r6
 8008180:	4628      	mov	r0, r5
 8008182:	47b8      	blx	r7
 8008184:	3001      	adds	r0, #1
 8008186:	d1e9      	bne.n	800815c <_printf_float+0x358>
 8008188:	e699      	b.n	8007ebe <_printf_float+0xba>
 800818a:	2301      	movs	r3, #1
 800818c:	464a      	mov	r2, r9
 800818e:	4631      	mov	r1, r6
 8008190:	4628      	mov	r0, r5
 8008192:	47b8      	blx	r7
 8008194:	3001      	adds	r0, #1
 8008196:	f43f ae92 	beq.w	8007ebe <_printf_float+0xba>
 800819a:	f108 0801 	add.w	r8, r8, #1
 800819e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80081a2:	1a9b      	subs	r3, r3, r2
 80081a4:	eba3 030a 	sub.w	r3, r3, sl
 80081a8:	4543      	cmp	r3, r8
 80081aa:	dcee      	bgt.n	800818a <_printf_float+0x386>
 80081ac:	e74a      	b.n	8008044 <_printf_float+0x240>
 80081ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081b0:	2a01      	cmp	r2, #1
 80081b2:	dc01      	bgt.n	80081b8 <_printf_float+0x3b4>
 80081b4:	07db      	lsls	r3, r3, #31
 80081b6:	d53a      	bpl.n	800822e <_printf_float+0x42a>
 80081b8:	2301      	movs	r3, #1
 80081ba:	4642      	mov	r2, r8
 80081bc:	4631      	mov	r1, r6
 80081be:	4628      	mov	r0, r5
 80081c0:	47b8      	blx	r7
 80081c2:	3001      	adds	r0, #1
 80081c4:	f43f ae7b 	beq.w	8007ebe <_printf_float+0xba>
 80081c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081cc:	4631      	mov	r1, r6
 80081ce:	4628      	mov	r0, r5
 80081d0:	47b8      	blx	r7
 80081d2:	3001      	adds	r0, #1
 80081d4:	f108 0801 	add.w	r8, r8, #1
 80081d8:	f43f ae71 	beq.w	8007ebe <_printf_float+0xba>
 80081dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081de:	2200      	movs	r2, #0
 80081e0:	f103 3aff 	add.w	sl, r3, #4294967295
 80081e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80081e8:	2300      	movs	r3, #0
 80081ea:	f7f8 fc7d 	bl	8000ae8 <__aeabi_dcmpeq>
 80081ee:	b9c8      	cbnz	r0, 8008224 <_printf_float+0x420>
 80081f0:	4653      	mov	r3, sl
 80081f2:	4642      	mov	r2, r8
 80081f4:	4631      	mov	r1, r6
 80081f6:	4628      	mov	r0, r5
 80081f8:	47b8      	blx	r7
 80081fa:	3001      	adds	r0, #1
 80081fc:	d10e      	bne.n	800821c <_printf_float+0x418>
 80081fe:	e65e      	b.n	8007ebe <_printf_float+0xba>
 8008200:	2301      	movs	r3, #1
 8008202:	4652      	mov	r2, sl
 8008204:	4631      	mov	r1, r6
 8008206:	4628      	mov	r0, r5
 8008208:	47b8      	blx	r7
 800820a:	3001      	adds	r0, #1
 800820c:	f43f ae57 	beq.w	8007ebe <_printf_float+0xba>
 8008210:	f108 0801 	add.w	r8, r8, #1
 8008214:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008216:	3b01      	subs	r3, #1
 8008218:	4543      	cmp	r3, r8
 800821a:	dcf1      	bgt.n	8008200 <_printf_float+0x3fc>
 800821c:	464b      	mov	r3, r9
 800821e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008222:	e6de      	b.n	8007fe2 <_printf_float+0x1de>
 8008224:	f04f 0800 	mov.w	r8, #0
 8008228:	f104 0a1a 	add.w	sl, r4, #26
 800822c:	e7f2      	b.n	8008214 <_printf_float+0x410>
 800822e:	2301      	movs	r3, #1
 8008230:	e7df      	b.n	80081f2 <_printf_float+0x3ee>
 8008232:	2301      	movs	r3, #1
 8008234:	464a      	mov	r2, r9
 8008236:	4631      	mov	r1, r6
 8008238:	4628      	mov	r0, r5
 800823a:	47b8      	blx	r7
 800823c:	3001      	adds	r0, #1
 800823e:	f43f ae3e 	beq.w	8007ebe <_printf_float+0xba>
 8008242:	f108 0801 	add.w	r8, r8, #1
 8008246:	68e3      	ldr	r3, [r4, #12]
 8008248:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800824a:	1a9b      	subs	r3, r3, r2
 800824c:	4543      	cmp	r3, r8
 800824e:	dcf0      	bgt.n	8008232 <_printf_float+0x42e>
 8008250:	e6fc      	b.n	800804c <_printf_float+0x248>
 8008252:	f04f 0800 	mov.w	r8, #0
 8008256:	f104 0919 	add.w	r9, r4, #25
 800825a:	e7f4      	b.n	8008246 <_printf_float+0x442>
 800825c:	2900      	cmp	r1, #0
 800825e:	f43f ae8b 	beq.w	8007f78 <_printf_float+0x174>
 8008262:	2300      	movs	r3, #0
 8008264:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008268:	ab09      	add	r3, sp, #36	; 0x24
 800826a:	9300      	str	r3, [sp, #0]
 800826c:	ec49 8b10 	vmov	d0, r8, r9
 8008270:	6022      	str	r2, [r4, #0]
 8008272:	f8cd a004 	str.w	sl, [sp, #4]
 8008276:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800827a:	4628      	mov	r0, r5
 800827c:	f7ff fd2e 	bl	8007cdc <__cvt>
 8008280:	4680      	mov	r8, r0
 8008282:	e648      	b.n	8007f16 <_printf_float+0x112>

08008284 <_printf_common>:
 8008284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008288:	4691      	mov	r9, r2
 800828a:	461f      	mov	r7, r3
 800828c:	688a      	ldr	r2, [r1, #8]
 800828e:	690b      	ldr	r3, [r1, #16]
 8008290:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008294:	4293      	cmp	r3, r2
 8008296:	bfb8      	it	lt
 8008298:	4613      	movlt	r3, r2
 800829a:	f8c9 3000 	str.w	r3, [r9]
 800829e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80082a2:	4606      	mov	r6, r0
 80082a4:	460c      	mov	r4, r1
 80082a6:	b112      	cbz	r2, 80082ae <_printf_common+0x2a>
 80082a8:	3301      	adds	r3, #1
 80082aa:	f8c9 3000 	str.w	r3, [r9]
 80082ae:	6823      	ldr	r3, [r4, #0]
 80082b0:	0699      	lsls	r1, r3, #26
 80082b2:	bf42      	ittt	mi
 80082b4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80082b8:	3302      	addmi	r3, #2
 80082ba:	f8c9 3000 	strmi.w	r3, [r9]
 80082be:	6825      	ldr	r5, [r4, #0]
 80082c0:	f015 0506 	ands.w	r5, r5, #6
 80082c4:	d107      	bne.n	80082d6 <_printf_common+0x52>
 80082c6:	f104 0a19 	add.w	sl, r4, #25
 80082ca:	68e3      	ldr	r3, [r4, #12]
 80082cc:	f8d9 2000 	ldr.w	r2, [r9]
 80082d0:	1a9b      	subs	r3, r3, r2
 80082d2:	42ab      	cmp	r3, r5
 80082d4:	dc28      	bgt.n	8008328 <_printf_common+0xa4>
 80082d6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80082da:	6822      	ldr	r2, [r4, #0]
 80082dc:	3300      	adds	r3, #0
 80082de:	bf18      	it	ne
 80082e0:	2301      	movne	r3, #1
 80082e2:	0692      	lsls	r2, r2, #26
 80082e4:	d42d      	bmi.n	8008342 <_printf_common+0xbe>
 80082e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80082ea:	4639      	mov	r1, r7
 80082ec:	4630      	mov	r0, r6
 80082ee:	47c0      	blx	r8
 80082f0:	3001      	adds	r0, #1
 80082f2:	d020      	beq.n	8008336 <_printf_common+0xb2>
 80082f4:	6823      	ldr	r3, [r4, #0]
 80082f6:	68e5      	ldr	r5, [r4, #12]
 80082f8:	f8d9 2000 	ldr.w	r2, [r9]
 80082fc:	f003 0306 	and.w	r3, r3, #6
 8008300:	2b04      	cmp	r3, #4
 8008302:	bf08      	it	eq
 8008304:	1aad      	subeq	r5, r5, r2
 8008306:	68a3      	ldr	r3, [r4, #8]
 8008308:	6922      	ldr	r2, [r4, #16]
 800830a:	bf0c      	ite	eq
 800830c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008310:	2500      	movne	r5, #0
 8008312:	4293      	cmp	r3, r2
 8008314:	bfc4      	itt	gt
 8008316:	1a9b      	subgt	r3, r3, r2
 8008318:	18ed      	addgt	r5, r5, r3
 800831a:	f04f 0900 	mov.w	r9, #0
 800831e:	341a      	adds	r4, #26
 8008320:	454d      	cmp	r5, r9
 8008322:	d11a      	bne.n	800835a <_printf_common+0xd6>
 8008324:	2000      	movs	r0, #0
 8008326:	e008      	b.n	800833a <_printf_common+0xb6>
 8008328:	2301      	movs	r3, #1
 800832a:	4652      	mov	r2, sl
 800832c:	4639      	mov	r1, r7
 800832e:	4630      	mov	r0, r6
 8008330:	47c0      	blx	r8
 8008332:	3001      	adds	r0, #1
 8008334:	d103      	bne.n	800833e <_printf_common+0xba>
 8008336:	f04f 30ff 	mov.w	r0, #4294967295
 800833a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800833e:	3501      	adds	r5, #1
 8008340:	e7c3      	b.n	80082ca <_printf_common+0x46>
 8008342:	18e1      	adds	r1, r4, r3
 8008344:	1c5a      	adds	r2, r3, #1
 8008346:	2030      	movs	r0, #48	; 0x30
 8008348:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800834c:	4422      	add	r2, r4
 800834e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008352:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008356:	3302      	adds	r3, #2
 8008358:	e7c5      	b.n	80082e6 <_printf_common+0x62>
 800835a:	2301      	movs	r3, #1
 800835c:	4622      	mov	r2, r4
 800835e:	4639      	mov	r1, r7
 8008360:	4630      	mov	r0, r6
 8008362:	47c0      	blx	r8
 8008364:	3001      	adds	r0, #1
 8008366:	d0e6      	beq.n	8008336 <_printf_common+0xb2>
 8008368:	f109 0901 	add.w	r9, r9, #1
 800836c:	e7d8      	b.n	8008320 <_printf_common+0x9c>
	...

08008370 <_printf_i>:
 8008370:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008374:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008378:	460c      	mov	r4, r1
 800837a:	7e09      	ldrb	r1, [r1, #24]
 800837c:	b085      	sub	sp, #20
 800837e:	296e      	cmp	r1, #110	; 0x6e
 8008380:	4617      	mov	r7, r2
 8008382:	4606      	mov	r6, r0
 8008384:	4698      	mov	r8, r3
 8008386:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008388:	f000 80b3 	beq.w	80084f2 <_printf_i+0x182>
 800838c:	d822      	bhi.n	80083d4 <_printf_i+0x64>
 800838e:	2963      	cmp	r1, #99	; 0x63
 8008390:	d036      	beq.n	8008400 <_printf_i+0x90>
 8008392:	d80a      	bhi.n	80083aa <_printf_i+0x3a>
 8008394:	2900      	cmp	r1, #0
 8008396:	f000 80b9 	beq.w	800850c <_printf_i+0x19c>
 800839a:	2958      	cmp	r1, #88	; 0x58
 800839c:	f000 8083 	beq.w	80084a6 <_printf_i+0x136>
 80083a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80083a4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80083a8:	e032      	b.n	8008410 <_printf_i+0xa0>
 80083aa:	2964      	cmp	r1, #100	; 0x64
 80083ac:	d001      	beq.n	80083b2 <_printf_i+0x42>
 80083ae:	2969      	cmp	r1, #105	; 0x69
 80083b0:	d1f6      	bne.n	80083a0 <_printf_i+0x30>
 80083b2:	6820      	ldr	r0, [r4, #0]
 80083b4:	6813      	ldr	r3, [r2, #0]
 80083b6:	0605      	lsls	r5, r0, #24
 80083b8:	f103 0104 	add.w	r1, r3, #4
 80083bc:	d52a      	bpl.n	8008414 <_printf_i+0xa4>
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	6011      	str	r1, [r2, #0]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	da03      	bge.n	80083ce <_printf_i+0x5e>
 80083c6:	222d      	movs	r2, #45	; 0x2d
 80083c8:	425b      	negs	r3, r3
 80083ca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80083ce:	486f      	ldr	r0, [pc, #444]	; (800858c <_printf_i+0x21c>)
 80083d0:	220a      	movs	r2, #10
 80083d2:	e039      	b.n	8008448 <_printf_i+0xd8>
 80083d4:	2973      	cmp	r1, #115	; 0x73
 80083d6:	f000 809d 	beq.w	8008514 <_printf_i+0x1a4>
 80083da:	d808      	bhi.n	80083ee <_printf_i+0x7e>
 80083dc:	296f      	cmp	r1, #111	; 0x6f
 80083de:	d020      	beq.n	8008422 <_printf_i+0xb2>
 80083e0:	2970      	cmp	r1, #112	; 0x70
 80083e2:	d1dd      	bne.n	80083a0 <_printf_i+0x30>
 80083e4:	6823      	ldr	r3, [r4, #0]
 80083e6:	f043 0320 	orr.w	r3, r3, #32
 80083ea:	6023      	str	r3, [r4, #0]
 80083ec:	e003      	b.n	80083f6 <_printf_i+0x86>
 80083ee:	2975      	cmp	r1, #117	; 0x75
 80083f0:	d017      	beq.n	8008422 <_printf_i+0xb2>
 80083f2:	2978      	cmp	r1, #120	; 0x78
 80083f4:	d1d4      	bne.n	80083a0 <_printf_i+0x30>
 80083f6:	2378      	movs	r3, #120	; 0x78
 80083f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80083fc:	4864      	ldr	r0, [pc, #400]	; (8008590 <_printf_i+0x220>)
 80083fe:	e055      	b.n	80084ac <_printf_i+0x13c>
 8008400:	6813      	ldr	r3, [r2, #0]
 8008402:	1d19      	adds	r1, r3, #4
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	6011      	str	r1, [r2, #0]
 8008408:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800840c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008410:	2301      	movs	r3, #1
 8008412:	e08c      	b.n	800852e <_printf_i+0x1be>
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	6011      	str	r1, [r2, #0]
 8008418:	f010 0f40 	tst.w	r0, #64	; 0x40
 800841c:	bf18      	it	ne
 800841e:	b21b      	sxthne	r3, r3
 8008420:	e7cf      	b.n	80083c2 <_printf_i+0x52>
 8008422:	6813      	ldr	r3, [r2, #0]
 8008424:	6825      	ldr	r5, [r4, #0]
 8008426:	1d18      	adds	r0, r3, #4
 8008428:	6010      	str	r0, [r2, #0]
 800842a:	0628      	lsls	r0, r5, #24
 800842c:	d501      	bpl.n	8008432 <_printf_i+0xc2>
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	e002      	b.n	8008438 <_printf_i+0xc8>
 8008432:	0668      	lsls	r0, r5, #25
 8008434:	d5fb      	bpl.n	800842e <_printf_i+0xbe>
 8008436:	881b      	ldrh	r3, [r3, #0]
 8008438:	4854      	ldr	r0, [pc, #336]	; (800858c <_printf_i+0x21c>)
 800843a:	296f      	cmp	r1, #111	; 0x6f
 800843c:	bf14      	ite	ne
 800843e:	220a      	movne	r2, #10
 8008440:	2208      	moveq	r2, #8
 8008442:	2100      	movs	r1, #0
 8008444:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008448:	6865      	ldr	r5, [r4, #4]
 800844a:	60a5      	str	r5, [r4, #8]
 800844c:	2d00      	cmp	r5, #0
 800844e:	f2c0 8095 	blt.w	800857c <_printf_i+0x20c>
 8008452:	6821      	ldr	r1, [r4, #0]
 8008454:	f021 0104 	bic.w	r1, r1, #4
 8008458:	6021      	str	r1, [r4, #0]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d13d      	bne.n	80084da <_printf_i+0x16a>
 800845e:	2d00      	cmp	r5, #0
 8008460:	f040 808e 	bne.w	8008580 <_printf_i+0x210>
 8008464:	4665      	mov	r5, ip
 8008466:	2a08      	cmp	r2, #8
 8008468:	d10b      	bne.n	8008482 <_printf_i+0x112>
 800846a:	6823      	ldr	r3, [r4, #0]
 800846c:	07db      	lsls	r3, r3, #31
 800846e:	d508      	bpl.n	8008482 <_printf_i+0x112>
 8008470:	6923      	ldr	r3, [r4, #16]
 8008472:	6862      	ldr	r2, [r4, #4]
 8008474:	429a      	cmp	r2, r3
 8008476:	bfde      	ittt	le
 8008478:	2330      	movle	r3, #48	; 0x30
 800847a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800847e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008482:	ebac 0305 	sub.w	r3, ip, r5
 8008486:	6123      	str	r3, [r4, #16]
 8008488:	f8cd 8000 	str.w	r8, [sp]
 800848c:	463b      	mov	r3, r7
 800848e:	aa03      	add	r2, sp, #12
 8008490:	4621      	mov	r1, r4
 8008492:	4630      	mov	r0, r6
 8008494:	f7ff fef6 	bl	8008284 <_printf_common>
 8008498:	3001      	adds	r0, #1
 800849a:	d14d      	bne.n	8008538 <_printf_i+0x1c8>
 800849c:	f04f 30ff 	mov.w	r0, #4294967295
 80084a0:	b005      	add	sp, #20
 80084a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80084a6:	4839      	ldr	r0, [pc, #228]	; (800858c <_printf_i+0x21c>)
 80084a8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80084ac:	6813      	ldr	r3, [r2, #0]
 80084ae:	6821      	ldr	r1, [r4, #0]
 80084b0:	1d1d      	adds	r5, r3, #4
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	6015      	str	r5, [r2, #0]
 80084b6:	060a      	lsls	r2, r1, #24
 80084b8:	d50b      	bpl.n	80084d2 <_printf_i+0x162>
 80084ba:	07ca      	lsls	r2, r1, #31
 80084bc:	bf44      	itt	mi
 80084be:	f041 0120 	orrmi.w	r1, r1, #32
 80084c2:	6021      	strmi	r1, [r4, #0]
 80084c4:	b91b      	cbnz	r3, 80084ce <_printf_i+0x15e>
 80084c6:	6822      	ldr	r2, [r4, #0]
 80084c8:	f022 0220 	bic.w	r2, r2, #32
 80084cc:	6022      	str	r2, [r4, #0]
 80084ce:	2210      	movs	r2, #16
 80084d0:	e7b7      	b.n	8008442 <_printf_i+0xd2>
 80084d2:	064d      	lsls	r5, r1, #25
 80084d4:	bf48      	it	mi
 80084d6:	b29b      	uxthmi	r3, r3
 80084d8:	e7ef      	b.n	80084ba <_printf_i+0x14a>
 80084da:	4665      	mov	r5, ip
 80084dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80084e0:	fb02 3311 	mls	r3, r2, r1, r3
 80084e4:	5cc3      	ldrb	r3, [r0, r3]
 80084e6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80084ea:	460b      	mov	r3, r1
 80084ec:	2900      	cmp	r1, #0
 80084ee:	d1f5      	bne.n	80084dc <_printf_i+0x16c>
 80084f0:	e7b9      	b.n	8008466 <_printf_i+0xf6>
 80084f2:	6813      	ldr	r3, [r2, #0]
 80084f4:	6825      	ldr	r5, [r4, #0]
 80084f6:	6961      	ldr	r1, [r4, #20]
 80084f8:	1d18      	adds	r0, r3, #4
 80084fa:	6010      	str	r0, [r2, #0]
 80084fc:	0628      	lsls	r0, r5, #24
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	d501      	bpl.n	8008506 <_printf_i+0x196>
 8008502:	6019      	str	r1, [r3, #0]
 8008504:	e002      	b.n	800850c <_printf_i+0x19c>
 8008506:	066a      	lsls	r2, r5, #25
 8008508:	d5fb      	bpl.n	8008502 <_printf_i+0x192>
 800850a:	8019      	strh	r1, [r3, #0]
 800850c:	2300      	movs	r3, #0
 800850e:	6123      	str	r3, [r4, #16]
 8008510:	4665      	mov	r5, ip
 8008512:	e7b9      	b.n	8008488 <_printf_i+0x118>
 8008514:	6813      	ldr	r3, [r2, #0]
 8008516:	1d19      	adds	r1, r3, #4
 8008518:	6011      	str	r1, [r2, #0]
 800851a:	681d      	ldr	r5, [r3, #0]
 800851c:	6862      	ldr	r2, [r4, #4]
 800851e:	2100      	movs	r1, #0
 8008520:	4628      	mov	r0, r5
 8008522:	f7f7 fe6d 	bl	8000200 <memchr>
 8008526:	b108      	cbz	r0, 800852c <_printf_i+0x1bc>
 8008528:	1b40      	subs	r0, r0, r5
 800852a:	6060      	str	r0, [r4, #4]
 800852c:	6863      	ldr	r3, [r4, #4]
 800852e:	6123      	str	r3, [r4, #16]
 8008530:	2300      	movs	r3, #0
 8008532:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008536:	e7a7      	b.n	8008488 <_printf_i+0x118>
 8008538:	6923      	ldr	r3, [r4, #16]
 800853a:	462a      	mov	r2, r5
 800853c:	4639      	mov	r1, r7
 800853e:	4630      	mov	r0, r6
 8008540:	47c0      	blx	r8
 8008542:	3001      	adds	r0, #1
 8008544:	d0aa      	beq.n	800849c <_printf_i+0x12c>
 8008546:	6823      	ldr	r3, [r4, #0]
 8008548:	079b      	lsls	r3, r3, #30
 800854a:	d413      	bmi.n	8008574 <_printf_i+0x204>
 800854c:	68e0      	ldr	r0, [r4, #12]
 800854e:	9b03      	ldr	r3, [sp, #12]
 8008550:	4298      	cmp	r0, r3
 8008552:	bfb8      	it	lt
 8008554:	4618      	movlt	r0, r3
 8008556:	e7a3      	b.n	80084a0 <_printf_i+0x130>
 8008558:	2301      	movs	r3, #1
 800855a:	464a      	mov	r2, r9
 800855c:	4639      	mov	r1, r7
 800855e:	4630      	mov	r0, r6
 8008560:	47c0      	blx	r8
 8008562:	3001      	adds	r0, #1
 8008564:	d09a      	beq.n	800849c <_printf_i+0x12c>
 8008566:	3501      	adds	r5, #1
 8008568:	68e3      	ldr	r3, [r4, #12]
 800856a:	9a03      	ldr	r2, [sp, #12]
 800856c:	1a9b      	subs	r3, r3, r2
 800856e:	42ab      	cmp	r3, r5
 8008570:	dcf2      	bgt.n	8008558 <_printf_i+0x1e8>
 8008572:	e7eb      	b.n	800854c <_printf_i+0x1dc>
 8008574:	2500      	movs	r5, #0
 8008576:	f104 0919 	add.w	r9, r4, #25
 800857a:	e7f5      	b.n	8008568 <_printf_i+0x1f8>
 800857c:	2b00      	cmp	r3, #0
 800857e:	d1ac      	bne.n	80084da <_printf_i+0x16a>
 8008580:	7803      	ldrb	r3, [r0, #0]
 8008582:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008586:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800858a:	e76c      	b.n	8008466 <_printf_i+0xf6>
 800858c:	0800ae7a 	.word	0x0800ae7a
 8008590:	0800ae8b 	.word	0x0800ae8b

08008594 <_sbrk_r>:
 8008594:	b538      	push	{r3, r4, r5, lr}
 8008596:	4c06      	ldr	r4, [pc, #24]	; (80085b0 <_sbrk_r+0x1c>)
 8008598:	2300      	movs	r3, #0
 800859a:	4605      	mov	r5, r0
 800859c:	4608      	mov	r0, r1
 800859e:	6023      	str	r3, [r4, #0]
 80085a0:	f7fa ffa2 	bl	80034e8 <_sbrk>
 80085a4:	1c43      	adds	r3, r0, #1
 80085a6:	d102      	bne.n	80085ae <_sbrk_r+0x1a>
 80085a8:	6823      	ldr	r3, [r4, #0]
 80085aa:	b103      	cbz	r3, 80085ae <_sbrk_r+0x1a>
 80085ac:	602b      	str	r3, [r5, #0]
 80085ae:	bd38      	pop	{r3, r4, r5, pc}
 80085b0:	20000800 	.word	0x20000800

080085b4 <siprintf>:
 80085b4:	b40e      	push	{r1, r2, r3}
 80085b6:	b500      	push	{lr}
 80085b8:	b09c      	sub	sp, #112	; 0x70
 80085ba:	ab1d      	add	r3, sp, #116	; 0x74
 80085bc:	9002      	str	r0, [sp, #8]
 80085be:	9006      	str	r0, [sp, #24]
 80085c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80085c4:	4809      	ldr	r0, [pc, #36]	; (80085ec <siprintf+0x38>)
 80085c6:	9107      	str	r1, [sp, #28]
 80085c8:	9104      	str	r1, [sp, #16]
 80085ca:	4909      	ldr	r1, [pc, #36]	; (80085f0 <siprintf+0x3c>)
 80085cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80085d0:	9105      	str	r1, [sp, #20]
 80085d2:	6800      	ldr	r0, [r0, #0]
 80085d4:	9301      	str	r3, [sp, #4]
 80085d6:	a902      	add	r1, sp, #8
 80085d8:	f001 f9b2 	bl	8009940 <_svfiprintf_r>
 80085dc:	9b02      	ldr	r3, [sp, #8]
 80085de:	2200      	movs	r2, #0
 80085e0:	701a      	strb	r2, [r3, #0]
 80085e2:	b01c      	add	sp, #112	; 0x70
 80085e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80085e8:	b003      	add	sp, #12
 80085ea:	4770      	bx	lr
 80085ec:	20000010 	.word	0x20000010
 80085f0:	ffff0208 	.word	0xffff0208

080085f4 <strchr>:
 80085f4:	b2c9      	uxtb	r1, r1
 80085f6:	4603      	mov	r3, r0
 80085f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085fc:	b11a      	cbz	r2, 8008606 <strchr+0x12>
 80085fe:	428a      	cmp	r2, r1
 8008600:	d1f9      	bne.n	80085f6 <strchr+0x2>
 8008602:	4618      	mov	r0, r3
 8008604:	4770      	bx	lr
 8008606:	2900      	cmp	r1, #0
 8008608:	bf18      	it	ne
 800860a:	2300      	movne	r3, #0
 800860c:	e7f9      	b.n	8008602 <strchr+0xe>

0800860e <quorem>:
 800860e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008612:	6903      	ldr	r3, [r0, #16]
 8008614:	690c      	ldr	r4, [r1, #16]
 8008616:	42a3      	cmp	r3, r4
 8008618:	4680      	mov	r8, r0
 800861a:	f2c0 8082 	blt.w	8008722 <quorem+0x114>
 800861e:	3c01      	subs	r4, #1
 8008620:	f101 0714 	add.w	r7, r1, #20
 8008624:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008628:	f100 0614 	add.w	r6, r0, #20
 800862c:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008630:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8008634:	eb06 030c 	add.w	r3, r6, ip
 8008638:	3501      	adds	r5, #1
 800863a:	eb07 090c 	add.w	r9, r7, ip
 800863e:	9301      	str	r3, [sp, #4]
 8008640:	fbb0 f5f5 	udiv	r5, r0, r5
 8008644:	b395      	cbz	r5, 80086ac <quorem+0x9e>
 8008646:	f04f 0a00 	mov.w	sl, #0
 800864a:	4638      	mov	r0, r7
 800864c:	46b6      	mov	lr, r6
 800864e:	46d3      	mov	fp, sl
 8008650:	f850 2b04 	ldr.w	r2, [r0], #4
 8008654:	b293      	uxth	r3, r2
 8008656:	fb05 a303 	mla	r3, r5, r3, sl
 800865a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800865e:	b29b      	uxth	r3, r3
 8008660:	ebab 0303 	sub.w	r3, fp, r3
 8008664:	0c12      	lsrs	r2, r2, #16
 8008666:	f8de b000 	ldr.w	fp, [lr]
 800866a:	fb05 a202 	mla	r2, r5, r2, sl
 800866e:	fa13 f38b 	uxtah	r3, r3, fp
 8008672:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008676:	fa1f fb82 	uxth.w	fp, r2
 800867a:	f8de 2000 	ldr.w	r2, [lr]
 800867e:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008682:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008686:	b29b      	uxth	r3, r3
 8008688:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800868c:	4581      	cmp	r9, r0
 800868e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008692:	f84e 3b04 	str.w	r3, [lr], #4
 8008696:	d2db      	bcs.n	8008650 <quorem+0x42>
 8008698:	f856 300c 	ldr.w	r3, [r6, ip]
 800869c:	b933      	cbnz	r3, 80086ac <quorem+0x9e>
 800869e:	9b01      	ldr	r3, [sp, #4]
 80086a0:	3b04      	subs	r3, #4
 80086a2:	429e      	cmp	r6, r3
 80086a4:	461a      	mov	r2, r3
 80086a6:	d330      	bcc.n	800870a <quorem+0xfc>
 80086a8:	f8c8 4010 	str.w	r4, [r8, #16]
 80086ac:	4640      	mov	r0, r8
 80086ae:	f001 f819 	bl	80096e4 <__mcmp>
 80086b2:	2800      	cmp	r0, #0
 80086b4:	db25      	blt.n	8008702 <quorem+0xf4>
 80086b6:	3501      	adds	r5, #1
 80086b8:	4630      	mov	r0, r6
 80086ba:	f04f 0c00 	mov.w	ip, #0
 80086be:	f857 2b04 	ldr.w	r2, [r7], #4
 80086c2:	f8d0 e000 	ldr.w	lr, [r0]
 80086c6:	b293      	uxth	r3, r2
 80086c8:	ebac 0303 	sub.w	r3, ip, r3
 80086cc:	0c12      	lsrs	r2, r2, #16
 80086ce:	fa13 f38e 	uxtah	r3, r3, lr
 80086d2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80086d6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80086da:	b29b      	uxth	r3, r3
 80086dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80086e0:	45b9      	cmp	r9, r7
 80086e2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80086e6:	f840 3b04 	str.w	r3, [r0], #4
 80086ea:	d2e8      	bcs.n	80086be <quorem+0xb0>
 80086ec:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80086f0:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80086f4:	b92a      	cbnz	r2, 8008702 <quorem+0xf4>
 80086f6:	3b04      	subs	r3, #4
 80086f8:	429e      	cmp	r6, r3
 80086fa:	461a      	mov	r2, r3
 80086fc:	d30b      	bcc.n	8008716 <quorem+0x108>
 80086fe:	f8c8 4010 	str.w	r4, [r8, #16]
 8008702:	4628      	mov	r0, r5
 8008704:	b003      	add	sp, #12
 8008706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800870a:	6812      	ldr	r2, [r2, #0]
 800870c:	3b04      	subs	r3, #4
 800870e:	2a00      	cmp	r2, #0
 8008710:	d1ca      	bne.n	80086a8 <quorem+0x9a>
 8008712:	3c01      	subs	r4, #1
 8008714:	e7c5      	b.n	80086a2 <quorem+0x94>
 8008716:	6812      	ldr	r2, [r2, #0]
 8008718:	3b04      	subs	r3, #4
 800871a:	2a00      	cmp	r2, #0
 800871c:	d1ef      	bne.n	80086fe <quorem+0xf0>
 800871e:	3c01      	subs	r4, #1
 8008720:	e7ea      	b.n	80086f8 <quorem+0xea>
 8008722:	2000      	movs	r0, #0
 8008724:	e7ee      	b.n	8008704 <quorem+0xf6>
	...

08008728 <_dtoa_r>:
 8008728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800872c:	ec57 6b10 	vmov	r6, r7, d0
 8008730:	b097      	sub	sp, #92	; 0x5c
 8008732:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008734:	9106      	str	r1, [sp, #24]
 8008736:	4604      	mov	r4, r0
 8008738:	920b      	str	r2, [sp, #44]	; 0x2c
 800873a:	9312      	str	r3, [sp, #72]	; 0x48
 800873c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008740:	e9cd 6700 	strd	r6, r7, [sp]
 8008744:	b93d      	cbnz	r5, 8008756 <_dtoa_r+0x2e>
 8008746:	2010      	movs	r0, #16
 8008748:	f7ff fa04 	bl	8007b54 <malloc>
 800874c:	6260      	str	r0, [r4, #36]	; 0x24
 800874e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008752:	6005      	str	r5, [r0, #0]
 8008754:	60c5      	str	r5, [r0, #12]
 8008756:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008758:	6819      	ldr	r1, [r3, #0]
 800875a:	b151      	cbz	r1, 8008772 <_dtoa_r+0x4a>
 800875c:	685a      	ldr	r2, [r3, #4]
 800875e:	604a      	str	r2, [r1, #4]
 8008760:	2301      	movs	r3, #1
 8008762:	4093      	lsls	r3, r2
 8008764:	608b      	str	r3, [r1, #8]
 8008766:	4620      	mov	r0, r4
 8008768:	f000 fdda 	bl	8009320 <_Bfree>
 800876c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800876e:	2200      	movs	r2, #0
 8008770:	601a      	str	r2, [r3, #0]
 8008772:	1e3b      	subs	r3, r7, #0
 8008774:	bfbb      	ittet	lt
 8008776:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800877a:	9301      	strlt	r3, [sp, #4]
 800877c:	2300      	movge	r3, #0
 800877e:	2201      	movlt	r2, #1
 8008780:	bfac      	ite	ge
 8008782:	f8c8 3000 	strge.w	r3, [r8]
 8008786:	f8c8 2000 	strlt.w	r2, [r8]
 800878a:	4baf      	ldr	r3, [pc, #700]	; (8008a48 <_dtoa_r+0x320>)
 800878c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008790:	ea33 0308 	bics.w	r3, r3, r8
 8008794:	d114      	bne.n	80087c0 <_dtoa_r+0x98>
 8008796:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008798:	f242 730f 	movw	r3, #9999	; 0x270f
 800879c:	6013      	str	r3, [r2, #0]
 800879e:	9b00      	ldr	r3, [sp, #0]
 80087a0:	b923      	cbnz	r3, 80087ac <_dtoa_r+0x84>
 80087a2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80087a6:	2800      	cmp	r0, #0
 80087a8:	f000 8542 	beq.w	8009230 <_dtoa_r+0xb08>
 80087ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80087ae:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8008a5c <_dtoa_r+0x334>
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	f000 8544 	beq.w	8009240 <_dtoa_r+0xb18>
 80087b8:	f10b 0303 	add.w	r3, fp, #3
 80087bc:	f000 bd3e 	b.w	800923c <_dtoa_r+0xb14>
 80087c0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80087c4:	2200      	movs	r2, #0
 80087c6:	2300      	movs	r3, #0
 80087c8:	4630      	mov	r0, r6
 80087ca:	4639      	mov	r1, r7
 80087cc:	f7f8 f98c 	bl	8000ae8 <__aeabi_dcmpeq>
 80087d0:	4681      	mov	r9, r0
 80087d2:	b168      	cbz	r0, 80087f0 <_dtoa_r+0xc8>
 80087d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80087d6:	2301      	movs	r3, #1
 80087d8:	6013      	str	r3, [r2, #0]
 80087da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80087dc:	2b00      	cmp	r3, #0
 80087de:	f000 8524 	beq.w	800922a <_dtoa_r+0xb02>
 80087e2:	4b9a      	ldr	r3, [pc, #616]	; (8008a4c <_dtoa_r+0x324>)
 80087e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80087e6:	f103 3bff 	add.w	fp, r3, #4294967295
 80087ea:	6013      	str	r3, [r2, #0]
 80087ec:	f000 bd28 	b.w	8009240 <_dtoa_r+0xb18>
 80087f0:	aa14      	add	r2, sp, #80	; 0x50
 80087f2:	a915      	add	r1, sp, #84	; 0x54
 80087f4:	ec47 6b10 	vmov	d0, r6, r7
 80087f8:	4620      	mov	r0, r4
 80087fa:	f000 ffea 	bl	80097d2 <__d2b>
 80087fe:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008802:	9004      	str	r0, [sp, #16]
 8008804:	2d00      	cmp	r5, #0
 8008806:	d07c      	beq.n	8008902 <_dtoa_r+0x1da>
 8008808:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800880c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008810:	46b2      	mov	sl, r6
 8008812:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8008816:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800881a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800881e:	2200      	movs	r2, #0
 8008820:	4b8b      	ldr	r3, [pc, #556]	; (8008a50 <_dtoa_r+0x328>)
 8008822:	4650      	mov	r0, sl
 8008824:	4659      	mov	r1, fp
 8008826:	f7f7 fd3f 	bl	80002a8 <__aeabi_dsub>
 800882a:	a381      	add	r3, pc, #516	; (adr r3, 8008a30 <_dtoa_r+0x308>)
 800882c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008830:	f7f7 fef2 	bl	8000618 <__aeabi_dmul>
 8008834:	a380      	add	r3, pc, #512	; (adr r3, 8008a38 <_dtoa_r+0x310>)
 8008836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800883a:	f7f7 fd37 	bl	80002ac <__adddf3>
 800883e:	4606      	mov	r6, r0
 8008840:	4628      	mov	r0, r5
 8008842:	460f      	mov	r7, r1
 8008844:	f7f7 fe7e 	bl	8000544 <__aeabi_i2d>
 8008848:	a37d      	add	r3, pc, #500	; (adr r3, 8008a40 <_dtoa_r+0x318>)
 800884a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800884e:	f7f7 fee3 	bl	8000618 <__aeabi_dmul>
 8008852:	4602      	mov	r2, r0
 8008854:	460b      	mov	r3, r1
 8008856:	4630      	mov	r0, r6
 8008858:	4639      	mov	r1, r7
 800885a:	f7f7 fd27 	bl	80002ac <__adddf3>
 800885e:	4606      	mov	r6, r0
 8008860:	460f      	mov	r7, r1
 8008862:	f7f8 f989 	bl	8000b78 <__aeabi_d2iz>
 8008866:	2200      	movs	r2, #0
 8008868:	4682      	mov	sl, r0
 800886a:	2300      	movs	r3, #0
 800886c:	4630      	mov	r0, r6
 800886e:	4639      	mov	r1, r7
 8008870:	f7f8 f944 	bl	8000afc <__aeabi_dcmplt>
 8008874:	b148      	cbz	r0, 800888a <_dtoa_r+0x162>
 8008876:	4650      	mov	r0, sl
 8008878:	f7f7 fe64 	bl	8000544 <__aeabi_i2d>
 800887c:	4632      	mov	r2, r6
 800887e:	463b      	mov	r3, r7
 8008880:	f7f8 f932 	bl	8000ae8 <__aeabi_dcmpeq>
 8008884:	b908      	cbnz	r0, 800888a <_dtoa_r+0x162>
 8008886:	f10a 3aff 	add.w	sl, sl, #4294967295
 800888a:	f1ba 0f16 	cmp.w	sl, #22
 800888e:	d859      	bhi.n	8008944 <_dtoa_r+0x21c>
 8008890:	4970      	ldr	r1, [pc, #448]	; (8008a54 <_dtoa_r+0x32c>)
 8008892:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008896:	e9dd 2300 	ldrd	r2, r3, [sp]
 800889a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800889e:	f7f8 f94b 	bl	8000b38 <__aeabi_dcmpgt>
 80088a2:	2800      	cmp	r0, #0
 80088a4:	d050      	beq.n	8008948 <_dtoa_r+0x220>
 80088a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80088aa:	2300      	movs	r3, #0
 80088ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80088ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80088b0:	1b5d      	subs	r5, r3, r5
 80088b2:	f1b5 0801 	subs.w	r8, r5, #1
 80088b6:	bf49      	itett	mi
 80088b8:	f1c5 0301 	rsbmi	r3, r5, #1
 80088bc:	2300      	movpl	r3, #0
 80088be:	9305      	strmi	r3, [sp, #20]
 80088c0:	f04f 0800 	movmi.w	r8, #0
 80088c4:	bf58      	it	pl
 80088c6:	9305      	strpl	r3, [sp, #20]
 80088c8:	f1ba 0f00 	cmp.w	sl, #0
 80088cc:	db3e      	blt.n	800894c <_dtoa_r+0x224>
 80088ce:	2300      	movs	r3, #0
 80088d0:	44d0      	add	r8, sl
 80088d2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80088d6:	9307      	str	r3, [sp, #28]
 80088d8:	9b06      	ldr	r3, [sp, #24]
 80088da:	2b09      	cmp	r3, #9
 80088dc:	f200 8090 	bhi.w	8008a00 <_dtoa_r+0x2d8>
 80088e0:	2b05      	cmp	r3, #5
 80088e2:	bfc4      	itt	gt
 80088e4:	3b04      	subgt	r3, #4
 80088e6:	9306      	strgt	r3, [sp, #24]
 80088e8:	9b06      	ldr	r3, [sp, #24]
 80088ea:	f1a3 0302 	sub.w	r3, r3, #2
 80088ee:	bfcc      	ite	gt
 80088f0:	2500      	movgt	r5, #0
 80088f2:	2501      	movle	r5, #1
 80088f4:	2b03      	cmp	r3, #3
 80088f6:	f200 808f 	bhi.w	8008a18 <_dtoa_r+0x2f0>
 80088fa:	e8df f003 	tbb	[pc, r3]
 80088fe:	7f7d      	.short	0x7f7d
 8008900:	7131      	.short	0x7131
 8008902:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8008906:	441d      	add	r5, r3
 8008908:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800890c:	2820      	cmp	r0, #32
 800890e:	dd13      	ble.n	8008938 <_dtoa_r+0x210>
 8008910:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008914:	9b00      	ldr	r3, [sp, #0]
 8008916:	fa08 f800 	lsl.w	r8, r8, r0
 800891a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800891e:	fa23 f000 	lsr.w	r0, r3, r0
 8008922:	ea48 0000 	orr.w	r0, r8, r0
 8008926:	f7f7 fdfd 	bl	8000524 <__aeabi_ui2d>
 800892a:	2301      	movs	r3, #1
 800892c:	4682      	mov	sl, r0
 800892e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8008932:	3d01      	subs	r5, #1
 8008934:	9313      	str	r3, [sp, #76]	; 0x4c
 8008936:	e772      	b.n	800881e <_dtoa_r+0xf6>
 8008938:	9b00      	ldr	r3, [sp, #0]
 800893a:	f1c0 0020 	rsb	r0, r0, #32
 800893e:	fa03 f000 	lsl.w	r0, r3, r0
 8008942:	e7f0      	b.n	8008926 <_dtoa_r+0x1fe>
 8008944:	2301      	movs	r3, #1
 8008946:	e7b1      	b.n	80088ac <_dtoa_r+0x184>
 8008948:	900f      	str	r0, [sp, #60]	; 0x3c
 800894a:	e7b0      	b.n	80088ae <_dtoa_r+0x186>
 800894c:	9b05      	ldr	r3, [sp, #20]
 800894e:	eba3 030a 	sub.w	r3, r3, sl
 8008952:	9305      	str	r3, [sp, #20]
 8008954:	f1ca 0300 	rsb	r3, sl, #0
 8008958:	9307      	str	r3, [sp, #28]
 800895a:	2300      	movs	r3, #0
 800895c:	930e      	str	r3, [sp, #56]	; 0x38
 800895e:	e7bb      	b.n	80088d8 <_dtoa_r+0x1b0>
 8008960:	2301      	movs	r3, #1
 8008962:	930a      	str	r3, [sp, #40]	; 0x28
 8008964:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008966:	2b00      	cmp	r3, #0
 8008968:	dd59      	ble.n	8008a1e <_dtoa_r+0x2f6>
 800896a:	9302      	str	r3, [sp, #8]
 800896c:	4699      	mov	r9, r3
 800896e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008970:	2200      	movs	r2, #0
 8008972:	6072      	str	r2, [r6, #4]
 8008974:	2204      	movs	r2, #4
 8008976:	f102 0014 	add.w	r0, r2, #20
 800897a:	4298      	cmp	r0, r3
 800897c:	6871      	ldr	r1, [r6, #4]
 800897e:	d953      	bls.n	8008a28 <_dtoa_r+0x300>
 8008980:	4620      	mov	r0, r4
 8008982:	f000 fc99 	bl	80092b8 <_Balloc>
 8008986:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008988:	6030      	str	r0, [r6, #0]
 800898a:	f1b9 0f0e 	cmp.w	r9, #14
 800898e:	f8d3 b000 	ldr.w	fp, [r3]
 8008992:	f200 80e6 	bhi.w	8008b62 <_dtoa_r+0x43a>
 8008996:	2d00      	cmp	r5, #0
 8008998:	f000 80e3 	beq.w	8008b62 <_dtoa_r+0x43a>
 800899c:	ed9d 7b00 	vldr	d7, [sp]
 80089a0:	f1ba 0f00 	cmp.w	sl, #0
 80089a4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80089a8:	dd74      	ble.n	8008a94 <_dtoa_r+0x36c>
 80089aa:	4a2a      	ldr	r2, [pc, #168]	; (8008a54 <_dtoa_r+0x32c>)
 80089ac:	f00a 030f 	and.w	r3, sl, #15
 80089b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80089b4:	ed93 7b00 	vldr	d7, [r3]
 80089b8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80089bc:	06f0      	lsls	r0, r6, #27
 80089be:	ed8d 7b08 	vstr	d7, [sp, #32]
 80089c2:	d565      	bpl.n	8008a90 <_dtoa_r+0x368>
 80089c4:	4b24      	ldr	r3, [pc, #144]	; (8008a58 <_dtoa_r+0x330>)
 80089c6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80089ca:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80089ce:	f7f7 ff4d 	bl	800086c <__aeabi_ddiv>
 80089d2:	e9cd 0100 	strd	r0, r1, [sp]
 80089d6:	f006 060f 	and.w	r6, r6, #15
 80089da:	2503      	movs	r5, #3
 80089dc:	4f1e      	ldr	r7, [pc, #120]	; (8008a58 <_dtoa_r+0x330>)
 80089de:	e04c      	b.n	8008a7a <_dtoa_r+0x352>
 80089e0:	2301      	movs	r3, #1
 80089e2:	930a      	str	r3, [sp, #40]	; 0x28
 80089e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089e6:	4453      	add	r3, sl
 80089e8:	f103 0901 	add.w	r9, r3, #1
 80089ec:	9302      	str	r3, [sp, #8]
 80089ee:	464b      	mov	r3, r9
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	bfb8      	it	lt
 80089f4:	2301      	movlt	r3, #1
 80089f6:	e7ba      	b.n	800896e <_dtoa_r+0x246>
 80089f8:	2300      	movs	r3, #0
 80089fa:	e7b2      	b.n	8008962 <_dtoa_r+0x23a>
 80089fc:	2300      	movs	r3, #0
 80089fe:	e7f0      	b.n	80089e2 <_dtoa_r+0x2ba>
 8008a00:	2501      	movs	r5, #1
 8008a02:	2300      	movs	r3, #0
 8008a04:	9306      	str	r3, [sp, #24]
 8008a06:	950a      	str	r5, [sp, #40]	; 0x28
 8008a08:	f04f 33ff 	mov.w	r3, #4294967295
 8008a0c:	9302      	str	r3, [sp, #8]
 8008a0e:	4699      	mov	r9, r3
 8008a10:	2200      	movs	r2, #0
 8008a12:	2312      	movs	r3, #18
 8008a14:	920b      	str	r2, [sp, #44]	; 0x2c
 8008a16:	e7aa      	b.n	800896e <_dtoa_r+0x246>
 8008a18:	2301      	movs	r3, #1
 8008a1a:	930a      	str	r3, [sp, #40]	; 0x28
 8008a1c:	e7f4      	b.n	8008a08 <_dtoa_r+0x2e0>
 8008a1e:	2301      	movs	r3, #1
 8008a20:	9302      	str	r3, [sp, #8]
 8008a22:	4699      	mov	r9, r3
 8008a24:	461a      	mov	r2, r3
 8008a26:	e7f5      	b.n	8008a14 <_dtoa_r+0x2ec>
 8008a28:	3101      	adds	r1, #1
 8008a2a:	6071      	str	r1, [r6, #4]
 8008a2c:	0052      	lsls	r2, r2, #1
 8008a2e:	e7a2      	b.n	8008976 <_dtoa_r+0x24e>
 8008a30:	636f4361 	.word	0x636f4361
 8008a34:	3fd287a7 	.word	0x3fd287a7
 8008a38:	8b60c8b3 	.word	0x8b60c8b3
 8008a3c:	3fc68a28 	.word	0x3fc68a28
 8008a40:	509f79fb 	.word	0x509f79fb
 8008a44:	3fd34413 	.word	0x3fd34413
 8008a48:	7ff00000 	.word	0x7ff00000
 8008a4c:	0800ae79 	.word	0x0800ae79
 8008a50:	3ff80000 	.word	0x3ff80000
 8008a54:	0800aed8 	.word	0x0800aed8
 8008a58:	0800aeb0 	.word	0x0800aeb0
 8008a5c:	0800aea5 	.word	0x0800aea5
 8008a60:	07f1      	lsls	r1, r6, #31
 8008a62:	d508      	bpl.n	8008a76 <_dtoa_r+0x34e>
 8008a64:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008a68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a6c:	f7f7 fdd4 	bl	8000618 <__aeabi_dmul>
 8008a70:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008a74:	3501      	adds	r5, #1
 8008a76:	1076      	asrs	r6, r6, #1
 8008a78:	3708      	adds	r7, #8
 8008a7a:	2e00      	cmp	r6, #0
 8008a7c:	d1f0      	bne.n	8008a60 <_dtoa_r+0x338>
 8008a7e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008a82:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a86:	f7f7 fef1 	bl	800086c <__aeabi_ddiv>
 8008a8a:	e9cd 0100 	strd	r0, r1, [sp]
 8008a8e:	e01a      	b.n	8008ac6 <_dtoa_r+0x39e>
 8008a90:	2502      	movs	r5, #2
 8008a92:	e7a3      	b.n	80089dc <_dtoa_r+0x2b4>
 8008a94:	f000 80a0 	beq.w	8008bd8 <_dtoa_r+0x4b0>
 8008a98:	f1ca 0600 	rsb	r6, sl, #0
 8008a9c:	4b9f      	ldr	r3, [pc, #636]	; (8008d1c <_dtoa_r+0x5f4>)
 8008a9e:	4fa0      	ldr	r7, [pc, #640]	; (8008d20 <_dtoa_r+0x5f8>)
 8008aa0:	f006 020f 	and.w	r2, r6, #15
 8008aa4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008ab0:	f7f7 fdb2 	bl	8000618 <__aeabi_dmul>
 8008ab4:	e9cd 0100 	strd	r0, r1, [sp]
 8008ab8:	1136      	asrs	r6, r6, #4
 8008aba:	2300      	movs	r3, #0
 8008abc:	2502      	movs	r5, #2
 8008abe:	2e00      	cmp	r6, #0
 8008ac0:	d17f      	bne.n	8008bc2 <_dtoa_r+0x49a>
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d1e1      	bne.n	8008a8a <_dtoa_r+0x362>
 8008ac6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	f000 8087 	beq.w	8008bdc <_dtoa_r+0x4b4>
 8008ace:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	4b93      	ldr	r3, [pc, #588]	; (8008d24 <_dtoa_r+0x5fc>)
 8008ad6:	4630      	mov	r0, r6
 8008ad8:	4639      	mov	r1, r7
 8008ada:	f7f8 f80f 	bl	8000afc <__aeabi_dcmplt>
 8008ade:	2800      	cmp	r0, #0
 8008ae0:	d07c      	beq.n	8008bdc <_dtoa_r+0x4b4>
 8008ae2:	f1b9 0f00 	cmp.w	r9, #0
 8008ae6:	d079      	beq.n	8008bdc <_dtoa_r+0x4b4>
 8008ae8:	9b02      	ldr	r3, [sp, #8]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	dd35      	ble.n	8008b5a <_dtoa_r+0x432>
 8008aee:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008af2:	9308      	str	r3, [sp, #32]
 8008af4:	4639      	mov	r1, r7
 8008af6:	2200      	movs	r2, #0
 8008af8:	4b8b      	ldr	r3, [pc, #556]	; (8008d28 <_dtoa_r+0x600>)
 8008afa:	4630      	mov	r0, r6
 8008afc:	f7f7 fd8c 	bl	8000618 <__aeabi_dmul>
 8008b00:	e9cd 0100 	strd	r0, r1, [sp]
 8008b04:	9f02      	ldr	r7, [sp, #8]
 8008b06:	3501      	adds	r5, #1
 8008b08:	4628      	mov	r0, r5
 8008b0a:	f7f7 fd1b 	bl	8000544 <__aeabi_i2d>
 8008b0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b12:	f7f7 fd81 	bl	8000618 <__aeabi_dmul>
 8008b16:	2200      	movs	r2, #0
 8008b18:	4b84      	ldr	r3, [pc, #528]	; (8008d2c <_dtoa_r+0x604>)
 8008b1a:	f7f7 fbc7 	bl	80002ac <__adddf3>
 8008b1e:	4605      	mov	r5, r0
 8008b20:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008b24:	2f00      	cmp	r7, #0
 8008b26:	d15d      	bne.n	8008be4 <_dtoa_r+0x4bc>
 8008b28:	2200      	movs	r2, #0
 8008b2a:	4b81      	ldr	r3, [pc, #516]	; (8008d30 <_dtoa_r+0x608>)
 8008b2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b30:	f7f7 fbba 	bl	80002a8 <__aeabi_dsub>
 8008b34:	462a      	mov	r2, r5
 8008b36:	4633      	mov	r3, r6
 8008b38:	e9cd 0100 	strd	r0, r1, [sp]
 8008b3c:	f7f7 fffc 	bl	8000b38 <__aeabi_dcmpgt>
 8008b40:	2800      	cmp	r0, #0
 8008b42:	f040 8288 	bne.w	8009056 <_dtoa_r+0x92e>
 8008b46:	462a      	mov	r2, r5
 8008b48:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008b4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b50:	f7f7 ffd4 	bl	8000afc <__aeabi_dcmplt>
 8008b54:	2800      	cmp	r0, #0
 8008b56:	f040 827c 	bne.w	8009052 <_dtoa_r+0x92a>
 8008b5a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008b5e:	e9cd 2300 	strd	r2, r3, [sp]
 8008b62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	f2c0 8150 	blt.w	8008e0a <_dtoa_r+0x6e2>
 8008b6a:	f1ba 0f0e 	cmp.w	sl, #14
 8008b6e:	f300 814c 	bgt.w	8008e0a <_dtoa_r+0x6e2>
 8008b72:	4b6a      	ldr	r3, [pc, #424]	; (8008d1c <_dtoa_r+0x5f4>)
 8008b74:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008b78:	ed93 7b00 	vldr	d7, [r3]
 8008b7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008b84:	f280 80d8 	bge.w	8008d38 <_dtoa_r+0x610>
 8008b88:	f1b9 0f00 	cmp.w	r9, #0
 8008b8c:	f300 80d4 	bgt.w	8008d38 <_dtoa_r+0x610>
 8008b90:	f040 825e 	bne.w	8009050 <_dtoa_r+0x928>
 8008b94:	2200      	movs	r2, #0
 8008b96:	4b66      	ldr	r3, [pc, #408]	; (8008d30 <_dtoa_r+0x608>)
 8008b98:	ec51 0b17 	vmov	r0, r1, d7
 8008b9c:	f7f7 fd3c 	bl	8000618 <__aeabi_dmul>
 8008ba0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ba4:	f7f7 ffbe 	bl	8000b24 <__aeabi_dcmpge>
 8008ba8:	464f      	mov	r7, r9
 8008baa:	464e      	mov	r6, r9
 8008bac:	2800      	cmp	r0, #0
 8008bae:	f040 8234 	bne.w	800901a <_dtoa_r+0x8f2>
 8008bb2:	2331      	movs	r3, #49	; 0x31
 8008bb4:	f10b 0501 	add.w	r5, fp, #1
 8008bb8:	f88b 3000 	strb.w	r3, [fp]
 8008bbc:	f10a 0a01 	add.w	sl, sl, #1
 8008bc0:	e22f      	b.n	8009022 <_dtoa_r+0x8fa>
 8008bc2:	07f2      	lsls	r2, r6, #31
 8008bc4:	d505      	bpl.n	8008bd2 <_dtoa_r+0x4aa>
 8008bc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bca:	f7f7 fd25 	bl	8000618 <__aeabi_dmul>
 8008bce:	3501      	adds	r5, #1
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	1076      	asrs	r6, r6, #1
 8008bd4:	3708      	adds	r7, #8
 8008bd6:	e772      	b.n	8008abe <_dtoa_r+0x396>
 8008bd8:	2502      	movs	r5, #2
 8008bda:	e774      	b.n	8008ac6 <_dtoa_r+0x39e>
 8008bdc:	f8cd a020 	str.w	sl, [sp, #32]
 8008be0:	464f      	mov	r7, r9
 8008be2:	e791      	b.n	8008b08 <_dtoa_r+0x3e0>
 8008be4:	4b4d      	ldr	r3, [pc, #308]	; (8008d1c <_dtoa_r+0x5f4>)
 8008be6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008bea:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8008bee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d047      	beq.n	8008c84 <_dtoa_r+0x55c>
 8008bf4:	4602      	mov	r2, r0
 8008bf6:	460b      	mov	r3, r1
 8008bf8:	2000      	movs	r0, #0
 8008bfa:	494e      	ldr	r1, [pc, #312]	; (8008d34 <_dtoa_r+0x60c>)
 8008bfc:	f7f7 fe36 	bl	800086c <__aeabi_ddiv>
 8008c00:	462a      	mov	r2, r5
 8008c02:	4633      	mov	r3, r6
 8008c04:	f7f7 fb50 	bl	80002a8 <__aeabi_dsub>
 8008c08:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008c0c:	465d      	mov	r5, fp
 8008c0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c12:	f7f7 ffb1 	bl	8000b78 <__aeabi_d2iz>
 8008c16:	4606      	mov	r6, r0
 8008c18:	f7f7 fc94 	bl	8000544 <__aeabi_i2d>
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	460b      	mov	r3, r1
 8008c20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c24:	f7f7 fb40 	bl	80002a8 <__aeabi_dsub>
 8008c28:	3630      	adds	r6, #48	; 0x30
 8008c2a:	f805 6b01 	strb.w	r6, [r5], #1
 8008c2e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008c32:	e9cd 0100 	strd	r0, r1, [sp]
 8008c36:	f7f7 ff61 	bl	8000afc <__aeabi_dcmplt>
 8008c3a:	2800      	cmp	r0, #0
 8008c3c:	d163      	bne.n	8008d06 <_dtoa_r+0x5de>
 8008c3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c42:	2000      	movs	r0, #0
 8008c44:	4937      	ldr	r1, [pc, #220]	; (8008d24 <_dtoa_r+0x5fc>)
 8008c46:	f7f7 fb2f 	bl	80002a8 <__aeabi_dsub>
 8008c4a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008c4e:	f7f7 ff55 	bl	8000afc <__aeabi_dcmplt>
 8008c52:	2800      	cmp	r0, #0
 8008c54:	f040 80b7 	bne.w	8008dc6 <_dtoa_r+0x69e>
 8008c58:	eba5 030b 	sub.w	r3, r5, fp
 8008c5c:	429f      	cmp	r7, r3
 8008c5e:	f77f af7c 	ble.w	8008b5a <_dtoa_r+0x432>
 8008c62:	2200      	movs	r2, #0
 8008c64:	4b30      	ldr	r3, [pc, #192]	; (8008d28 <_dtoa_r+0x600>)
 8008c66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008c6a:	f7f7 fcd5 	bl	8000618 <__aeabi_dmul>
 8008c6e:	2200      	movs	r2, #0
 8008c70:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008c74:	4b2c      	ldr	r3, [pc, #176]	; (8008d28 <_dtoa_r+0x600>)
 8008c76:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c7a:	f7f7 fccd 	bl	8000618 <__aeabi_dmul>
 8008c7e:	e9cd 0100 	strd	r0, r1, [sp]
 8008c82:	e7c4      	b.n	8008c0e <_dtoa_r+0x4e6>
 8008c84:	462a      	mov	r2, r5
 8008c86:	4633      	mov	r3, r6
 8008c88:	f7f7 fcc6 	bl	8000618 <__aeabi_dmul>
 8008c8c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008c90:	eb0b 0507 	add.w	r5, fp, r7
 8008c94:	465e      	mov	r6, fp
 8008c96:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c9a:	f7f7 ff6d 	bl	8000b78 <__aeabi_d2iz>
 8008c9e:	4607      	mov	r7, r0
 8008ca0:	f7f7 fc50 	bl	8000544 <__aeabi_i2d>
 8008ca4:	3730      	adds	r7, #48	; 0x30
 8008ca6:	4602      	mov	r2, r0
 8008ca8:	460b      	mov	r3, r1
 8008caa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008cae:	f7f7 fafb 	bl	80002a8 <__aeabi_dsub>
 8008cb2:	f806 7b01 	strb.w	r7, [r6], #1
 8008cb6:	42ae      	cmp	r6, r5
 8008cb8:	e9cd 0100 	strd	r0, r1, [sp]
 8008cbc:	f04f 0200 	mov.w	r2, #0
 8008cc0:	d126      	bne.n	8008d10 <_dtoa_r+0x5e8>
 8008cc2:	4b1c      	ldr	r3, [pc, #112]	; (8008d34 <_dtoa_r+0x60c>)
 8008cc4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008cc8:	f7f7 faf0 	bl	80002ac <__adddf3>
 8008ccc:	4602      	mov	r2, r0
 8008cce:	460b      	mov	r3, r1
 8008cd0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008cd4:	f7f7 ff30 	bl	8000b38 <__aeabi_dcmpgt>
 8008cd8:	2800      	cmp	r0, #0
 8008cda:	d174      	bne.n	8008dc6 <_dtoa_r+0x69e>
 8008cdc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008ce0:	2000      	movs	r0, #0
 8008ce2:	4914      	ldr	r1, [pc, #80]	; (8008d34 <_dtoa_r+0x60c>)
 8008ce4:	f7f7 fae0 	bl	80002a8 <__aeabi_dsub>
 8008ce8:	4602      	mov	r2, r0
 8008cea:	460b      	mov	r3, r1
 8008cec:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008cf0:	f7f7 ff04 	bl	8000afc <__aeabi_dcmplt>
 8008cf4:	2800      	cmp	r0, #0
 8008cf6:	f43f af30 	beq.w	8008b5a <_dtoa_r+0x432>
 8008cfa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008cfe:	2b30      	cmp	r3, #48	; 0x30
 8008d00:	f105 32ff 	add.w	r2, r5, #4294967295
 8008d04:	d002      	beq.n	8008d0c <_dtoa_r+0x5e4>
 8008d06:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008d0a:	e04a      	b.n	8008da2 <_dtoa_r+0x67a>
 8008d0c:	4615      	mov	r5, r2
 8008d0e:	e7f4      	b.n	8008cfa <_dtoa_r+0x5d2>
 8008d10:	4b05      	ldr	r3, [pc, #20]	; (8008d28 <_dtoa_r+0x600>)
 8008d12:	f7f7 fc81 	bl	8000618 <__aeabi_dmul>
 8008d16:	e9cd 0100 	strd	r0, r1, [sp]
 8008d1a:	e7bc      	b.n	8008c96 <_dtoa_r+0x56e>
 8008d1c:	0800aed8 	.word	0x0800aed8
 8008d20:	0800aeb0 	.word	0x0800aeb0
 8008d24:	3ff00000 	.word	0x3ff00000
 8008d28:	40240000 	.word	0x40240000
 8008d2c:	401c0000 	.word	0x401c0000
 8008d30:	40140000 	.word	0x40140000
 8008d34:	3fe00000 	.word	0x3fe00000
 8008d38:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008d3c:	465d      	mov	r5, fp
 8008d3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d42:	4630      	mov	r0, r6
 8008d44:	4639      	mov	r1, r7
 8008d46:	f7f7 fd91 	bl	800086c <__aeabi_ddiv>
 8008d4a:	f7f7 ff15 	bl	8000b78 <__aeabi_d2iz>
 8008d4e:	4680      	mov	r8, r0
 8008d50:	f7f7 fbf8 	bl	8000544 <__aeabi_i2d>
 8008d54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d58:	f7f7 fc5e 	bl	8000618 <__aeabi_dmul>
 8008d5c:	4602      	mov	r2, r0
 8008d5e:	460b      	mov	r3, r1
 8008d60:	4630      	mov	r0, r6
 8008d62:	4639      	mov	r1, r7
 8008d64:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008d68:	f7f7 fa9e 	bl	80002a8 <__aeabi_dsub>
 8008d6c:	f805 6b01 	strb.w	r6, [r5], #1
 8008d70:	eba5 060b 	sub.w	r6, r5, fp
 8008d74:	45b1      	cmp	r9, r6
 8008d76:	4602      	mov	r2, r0
 8008d78:	460b      	mov	r3, r1
 8008d7a:	d139      	bne.n	8008df0 <_dtoa_r+0x6c8>
 8008d7c:	f7f7 fa96 	bl	80002ac <__adddf3>
 8008d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d84:	4606      	mov	r6, r0
 8008d86:	460f      	mov	r7, r1
 8008d88:	f7f7 fed6 	bl	8000b38 <__aeabi_dcmpgt>
 8008d8c:	b9c8      	cbnz	r0, 8008dc2 <_dtoa_r+0x69a>
 8008d8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d92:	4630      	mov	r0, r6
 8008d94:	4639      	mov	r1, r7
 8008d96:	f7f7 fea7 	bl	8000ae8 <__aeabi_dcmpeq>
 8008d9a:	b110      	cbz	r0, 8008da2 <_dtoa_r+0x67a>
 8008d9c:	f018 0f01 	tst.w	r8, #1
 8008da0:	d10f      	bne.n	8008dc2 <_dtoa_r+0x69a>
 8008da2:	9904      	ldr	r1, [sp, #16]
 8008da4:	4620      	mov	r0, r4
 8008da6:	f000 fabb 	bl	8009320 <_Bfree>
 8008daa:	2300      	movs	r3, #0
 8008dac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008dae:	702b      	strb	r3, [r5, #0]
 8008db0:	f10a 0301 	add.w	r3, sl, #1
 8008db4:	6013      	str	r3, [r2, #0]
 8008db6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	f000 8241 	beq.w	8009240 <_dtoa_r+0xb18>
 8008dbe:	601d      	str	r5, [r3, #0]
 8008dc0:	e23e      	b.n	8009240 <_dtoa_r+0xb18>
 8008dc2:	f8cd a020 	str.w	sl, [sp, #32]
 8008dc6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008dca:	2a39      	cmp	r2, #57	; 0x39
 8008dcc:	f105 33ff 	add.w	r3, r5, #4294967295
 8008dd0:	d108      	bne.n	8008de4 <_dtoa_r+0x6bc>
 8008dd2:	459b      	cmp	fp, r3
 8008dd4:	d10a      	bne.n	8008dec <_dtoa_r+0x6c4>
 8008dd6:	9b08      	ldr	r3, [sp, #32]
 8008dd8:	3301      	adds	r3, #1
 8008dda:	9308      	str	r3, [sp, #32]
 8008ddc:	2330      	movs	r3, #48	; 0x30
 8008dde:	f88b 3000 	strb.w	r3, [fp]
 8008de2:	465b      	mov	r3, fp
 8008de4:	781a      	ldrb	r2, [r3, #0]
 8008de6:	3201      	adds	r2, #1
 8008de8:	701a      	strb	r2, [r3, #0]
 8008dea:	e78c      	b.n	8008d06 <_dtoa_r+0x5de>
 8008dec:	461d      	mov	r5, r3
 8008dee:	e7ea      	b.n	8008dc6 <_dtoa_r+0x69e>
 8008df0:	2200      	movs	r2, #0
 8008df2:	4b9b      	ldr	r3, [pc, #620]	; (8009060 <_dtoa_r+0x938>)
 8008df4:	f7f7 fc10 	bl	8000618 <__aeabi_dmul>
 8008df8:	2200      	movs	r2, #0
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	4606      	mov	r6, r0
 8008dfe:	460f      	mov	r7, r1
 8008e00:	f7f7 fe72 	bl	8000ae8 <__aeabi_dcmpeq>
 8008e04:	2800      	cmp	r0, #0
 8008e06:	d09a      	beq.n	8008d3e <_dtoa_r+0x616>
 8008e08:	e7cb      	b.n	8008da2 <_dtoa_r+0x67a>
 8008e0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e0c:	2a00      	cmp	r2, #0
 8008e0e:	f000 808b 	beq.w	8008f28 <_dtoa_r+0x800>
 8008e12:	9a06      	ldr	r2, [sp, #24]
 8008e14:	2a01      	cmp	r2, #1
 8008e16:	dc6e      	bgt.n	8008ef6 <_dtoa_r+0x7ce>
 8008e18:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008e1a:	2a00      	cmp	r2, #0
 8008e1c:	d067      	beq.n	8008eee <_dtoa_r+0x7c6>
 8008e1e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008e22:	9f07      	ldr	r7, [sp, #28]
 8008e24:	9d05      	ldr	r5, [sp, #20]
 8008e26:	9a05      	ldr	r2, [sp, #20]
 8008e28:	2101      	movs	r1, #1
 8008e2a:	441a      	add	r2, r3
 8008e2c:	4620      	mov	r0, r4
 8008e2e:	9205      	str	r2, [sp, #20]
 8008e30:	4498      	add	r8, r3
 8008e32:	f000 fb15 	bl	8009460 <__i2b>
 8008e36:	4606      	mov	r6, r0
 8008e38:	2d00      	cmp	r5, #0
 8008e3a:	dd0c      	ble.n	8008e56 <_dtoa_r+0x72e>
 8008e3c:	f1b8 0f00 	cmp.w	r8, #0
 8008e40:	dd09      	ble.n	8008e56 <_dtoa_r+0x72e>
 8008e42:	4545      	cmp	r5, r8
 8008e44:	9a05      	ldr	r2, [sp, #20]
 8008e46:	462b      	mov	r3, r5
 8008e48:	bfa8      	it	ge
 8008e4a:	4643      	movge	r3, r8
 8008e4c:	1ad2      	subs	r2, r2, r3
 8008e4e:	9205      	str	r2, [sp, #20]
 8008e50:	1aed      	subs	r5, r5, r3
 8008e52:	eba8 0803 	sub.w	r8, r8, r3
 8008e56:	9b07      	ldr	r3, [sp, #28]
 8008e58:	b1eb      	cbz	r3, 8008e96 <_dtoa_r+0x76e>
 8008e5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d067      	beq.n	8008f30 <_dtoa_r+0x808>
 8008e60:	b18f      	cbz	r7, 8008e86 <_dtoa_r+0x75e>
 8008e62:	4631      	mov	r1, r6
 8008e64:	463a      	mov	r2, r7
 8008e66:	4620      	mov	r0, r4
 8008e68:	f000 fb9a 	bl	80095a0 <__pow5mult>
 8008e6c:	9a04      	ldr	r2, [sp, #16]
 8008e6e:	4601      	mov	r1, r0
 8008e70:	4606      	mov	r6, r0
 8008e72:	4620      	mov	r0, r4
 8008e74:	f000 fafd 	bl	8009472 <__multiply>
 8008e78:	9904      	ldr	r1, [sp, #16]
 8008e7a:	9008      	str	r0, [sp, #32]
 8008e7c:	4620      	mov	r0, r4
 8008e7e:	f000 fa4f 	bl	8009320 <_Bfree>
 8008e82:	9b08      	ldr	r3, [sp, #32]
 8008e84:	9304      	str	r3, [sp, #16]
 8008e86:	9b07      	ldr	r3, [sp, #28]
 8008e88:	1bda      	subs	r2, r3, r7
 8008e8a:	d004      	beq.n	8008e96 <_dtoa_r+0x76e>
 8008e8c:	9904      	ldr	r1, [sp, #16]
 8008e8e:	4620      	mov	r0, r4
 8008e90:	f000 fb86 	bl	80095a0 <__pow5mult>
 8008e94:	9004      	str	r0, [sp, #16]
 8008e96:	2101      	movs	r1, #1
 8008e98:	4620      	mov	r0, r4
 8008e9a:	f000 fae1 	bl	8009460 <__i2b>
 8008e9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ea0:	4607      	mov	r7, r0
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	f000 81d0 	beq.w	8009248 <_dtoa_r+0xb20>
 8008ea8:	461a      	mov	r2, r3
 8008eaa:	4601      	mov	r1, r0
 8008eac:	4620      	mov	r0, r4
 8008eae:	f000 fb77 	bl	80095a0 <__pow5mult>
 8008eb2:	9b06      	ldr	r3, [sp, #24]
 8008eb4:	2b01      	cmp	r3, #1
 8008eb6:	4607      	mov	r7, r0
 8008eb8:	dc40      	bgt.n	8008f3c <_dtoa_r+0x814>
 8008eba:	9b00      	ldr	r3, [sp, #0]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d139      	bne.n	8008f34 <_dtoa_r+0x80c>
 8008ec0:	9b01      	ldr	r3, [sp, #4]
 8008ec2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d136      	bne.n	8008f38 <_dtoa_r+0x810>
 8008eca:	9b01      	ldr	r3, [sp, #4]
 8008ecc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008ed0:	0d1b      	lsrs	r3, r3, #20
 8008ed2:	051b      	lsls	r3, r3, #20
 8008ed4:	b12b      	cbz	r3, 8008ee2 <_dtoa_r+0x7ba>
 8008ed6:	9b05      	ldr	r3, [sp, #20]
 8008ed8:	3301      	adds	r3, #1
 8008eda:	9305      	str	r3, [sp, #20]
 8008edc:	f108 0801 	add.w	r8, r8, #1
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	9307      	str	r3, [sp, #28]
 8008ee4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d12a      	bne.n	8008f40 <_dtoa_r+0x818>
 8008eea:	2001      	movs	r0, #1
 8008eec:	e030      	b.n	8008f50 <_dtoa_r+0x828>
 8008eee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008ef0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008ef4:	e795      	b.n	8008e22 <_dtoa_r+0x6fa>
 8008ef6:	9b07      	ldr	r3, [sp, #28]
 8008ef8:	f109 37ff 	add.w	r7, r9, #4294967295
 8008efc:	42bb      	cmp	r3, r7
 8008efe:	bfbf      	itttt	lt
 8008f00:	9b07      	ldrlt	r3, [sp, #28]
 8008f02:	9707      	strlt	r7, [sp, #28]
 8008f04:	1afa      	sublt	r2, r7, r3
 8008f06:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008f08:	bfbb      	ittet	lt
 8008f0a:	189b      	addlt	r3, r3, r2
 8008f0c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008f0e:	1bdf      	subge	r7, r3, r7
 8008f10:	2700      	movlt	r7, #0
 8008f12:	f1b9 0f00 	cmp.w	r9, #0
 8008f16:	bfb5      	itete	lt
 8008f18:	9b05      	ldrlt	r3, [sp, #20]
 8008f1a:	9d05      	ldrge	r5, [sp, #20]
 8008f1c:	eba3 0509 	sublt.w	r5, r3, r9
 8008f20:	464b      	movge	r3, r9
 8008f22:	bfb8      	it	lt
 8008f24:	2300      	movlt	r3, #0
 8008f26:	e77e      	b.n	8008e26 <_dtoa_r+0x6fe>
 8008f28:	9f07      	ldr	r7, [sp, #28]
 8008f2a:	9d05      	ldr	r5, [sp, #20]
 8008f2c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008f2e:	e783      	b.n	8008e38 <_dtoa_r+0x710>
 8008f30:	9a07      	ldr	r2, [sp, #28]
 8008f32:	e7ab      	b.n	8008e8c <_dtoa_r+0x764>
 8008f34:	2300      	movs	r3, #0
 8008f36:	e7d4      	b.n	8008ee2 <_dtoa_r+0x7ba>
 8008f38:	9b00      	ldr	r3, [sp, #0]
 8008f3a:	e7d2      	b.n	8008ee2 <_dtoa_r+0x7ba>
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	9307      	str	r3, [sp, #28]
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8008f46:	6918      	ldr	r0, [r3, #16]
 8008f48:	f000 fa3c 	bl	80093c4 <__hi0bits>
 8008f4c:	f1c0 0020 	rsb	r0, r0, #32
 8008f50:	4440      	add	r0, r8
 8008f52:	f010 001f 	ands.w	r0, r0, #31
 8008f56:	d047      	beq.n	8008fe8 <_dtoa_r+0x8c0>
 8008f58:	f1c0 0320 	rsb	r3, r0, #32
 8008f5c:	2b04      	cmp	r3, #4
 8008f5e:	dd3b      	ble.n	8008fd8 <_dtoa_r+0x8b0>
 8008f60:	9b05      	ldr	r3, [sp, #20]
 8008f62:	f1c0 001c 	rsb	r0, r0, #28
 8008f66:	4403      	add	r3, r0
 8008f68:	9305      	str	r3, [sp, #20]
 8008f6a:	4405      	add	r5, r0
 8008f6c:	4480      	add	r8, r0
 8008f6e:	9b05      	ldr	r3, [sp, #20]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	dd05      	ble.n	8008f80 <_dtoa_r+0x858>
 8008f74:	461a      	mov	r2, r3
 8008f76:	9904      	ldr	r1, [sp, #16]
 8008f78:	4620      	mov	r0, r4
 8008f7a:	f000 fb5f 	bl	800963c <__lshift>
 8008f7e:	9004      	str	r0, [sp, #16]
 8008f80:	f1b8 0f00 	cmp.w	r8, #0
 8008f84:	dd05      	ble.n	8008f92 <_dtoa_r+0x86a>
 8008f86:	4639      	mov	r1, r7
 8008f88:	4642      	mov	r2, r8
 8008f8a:	4620      	mov	r0, r4
 8008f8c:	f000 fb56 	bl	800963c <__lshift>
 8008f90:	4607      	mov	r7, r0
 8008f92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f94:	b353      	cbz	r3, 8008fec <_dtoa_r+0x8c4>
 8008f96:	4639      	mov	r1, r7
 8008f98:	9804      	ldr	r0, [sp, #16]
 8008f9a:	f000 fba3 	bl	80096e4 <__mcmp>
 8008f9e:	2800      	cmp	r0, #0
 8008fa0:	da24      	bge.n	8008fec <_dtoa_r+0x8c4>
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	220a      	movs	r2, #10
 8008fa6:	9904      	ldr	r1, [sp, #16]
 8008fa8:	4620      	mov	r0, r4
 8008faa:	f000 f9d0 	bl	800934e <__multadd>
 8008fae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fb0:	9004      	str	r0, [sp, #16]
 8008fb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	f000 814d 	beq.w	8009256 <_dtoa_r+0xb2e>
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	4631      	mov	r1, r6
 8008fc0:	220a      	movs	r2, #10
 8008fc2:	4620      	mov	r0, r4
 8008fc4:	f000 f9c3 	bl	800934e <__multadd>
 8008fc8:	9b02      	ldr	r3, [sp, #8]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	4606      	mov	r6, r0
 8008fce:	dc4f      	bgt.n	8009070 <_dtoa_r+0x948>
 8008fd0:	9b06      	ldr	r3, [sp, #24]
 8008fd2:	2b02      	cmp	r3, #2
 8008fd4:	dd4c      	ble.n	8009070 <_dtoa_r+0x948>
 8008fd6:	e011      	b.n	8008ffc <_dtoa_r+0x8d4>
 8008fd8:	d0c9      	beq.n	8008f6e <_dtoa_r+0x846>
 8008fda:	9a05      	ldr	r2, [sp, #20]
 8008fdc:	331c      	adds	r3, #28
 8008fde:	441a      	add	r2, r3
 8008fe0:	9205      	str	r2, [sp, #20]
 8008fe2:	441d      	add	r5, r3
 8008fe4:	4498      	add	r8, r3
 8008fe6:	e7c2      	b.n	8008f6e <_dtoa_r+0x846>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	e7f6      	b.n	8008fda <_dtoa_r+0x8b2>
 8008fec:	f1b9 0f00 	cmp.w	r9, #0
 8008ff0:	dc38      	bgt.n	8009064 <_dtoa_r+0x93c>
 8008ff2:	9b06      	ldr	r3, [sp, #24]
 8008ff4:	2b02      	cmp	r3, #2
 8008ff6:	dd35      	ble.n	8009064 <_dtoa_r+0x93c>
 8008ff8:	f8cd 9008 	str.w	r9, [sp, #8]
 8008ffc:	9b02      	ldr	r3, [sp, #8]
 8008ffe:	b963      	cbnz	r3, 800901a <_dtoa_r+0x8f2>
 8009000:	4639      	mov	r1, r7
 8009002:	2205      	movs	r2, #5
 8009004:	4620      	mov	r0, r4
 8009006:	f000 f9a2 	bl	800934e <__multadd>
 800900a:	4601      	mov	r1, r0
 800900c:	4607      	mov	r7, r0
 800900e:	9804      	ldr	r0, [sp, #16]
 8009010:	f000 fb68 	bl	80096e4 <__mcmp>
 8009014:	2800      	cmp	r0, #0
 8009016:	f73f adcc 	bgt.w	8008bb2 <_dtoa_r+0x48a>
 800901a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800901c:	465d      	mov	r5, fp
 800901e:	ea6f 0a03 	mvn.w	sl, r3
 8009022:	f04f 0900 	mov.w	r9, #0
 8009026:	4639      	mov	r1, r7
 8009028:	4620      	mov	r0, r4
 800902a:	f000 f979 	bl	8009320 <_Bfree>
 800902e:	2e00      	cmp	r6, #0
 8009030:	f43f aeb7 	beq.w	8008da2 <_dtoa_r+0x67a>
 8009034:	f1b9 0f00 	cmp.w	r9, #0
 8009038:	d005      	beq.n	8009046 <_dtoa_r+0x91e>
 800903a:	45b1      	cmp	r9, r6
 800903c:	d003      	beq.n	8009046 <_dtoa_r+0x91e>
 800903e:	4649      	mov	r1, r9
 8009040:	4620      	mov	r0, r4
 8009042:	f000 f96d 	bl	8009320 <_Bfree>
 8009046:	4631      	mov	r1, r6
 8009048:	4620      	mov	r0, r4
 800904a:	f000 f969 	bl	8009320 <_Bfree>
 800904e:	e6a8      	b.n	8008da2 <_dtoa_r+0x67a>
 8009050:	2700      	movs	r7, #0
 8009052:	463e      	mov	r6, r7
 8009054:	e7e1      	b.n	800901a <_dtoa_r+0x8f2>
 8009056:	f8dd a020 	ldr.w	sl, [sp, #32]
 800905a:	463e      	mov	r6, r7
 800905c:	e5a9      	b.n	8008bb2 <_dtoa_r+0x48a>
 800905e:	bf00      	nop
 8009060:	40240000 	.word	0x40240000
 8009064:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009066:	f8cd 9008 	str.w	r9, [sp, #8]
 800906a:	2b00      	cmp	r3, #0
 800906c:	f000 80fa 	beq.w	8009264 <_dtoa_r+0xb3c>
 8009070:	2d00      	cmp	r5, #0
 8009072:	dd05      	ble.n	8009080 <_dtoa_r+0x958>
 8009074:	4631      	mov	r1, r6
 8009076:	462a      	mov	r2, r5
 8009078:	4620      	mov	r0, r4
 800907a:	f000 fadf 	bl	800963c <__lshift>
 800907e:	4606      	mov	r6, r0
 8009080:	9b07      	ldr	r3, [sp, #28]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d04c      	beq.n	8009120 <_dtoa_r+0x9f8>
 8009086:	6871      	ldr	r1, [r6, #4]
 8009088:	4620      	mov	r0, r4
 800908a:	f000 f915 	bl	80092b8 <_Balloc>
 800908e:	6932      	ldr	r2, [r6, #16]
 8009090:	3202      	adds	r2, #2
 8009092:	4605      	mov	r5, r0
 8009094:	0092      	lsls	r2, r2, #2
 8009096:	f106 010c 	add.w	r1, r6, #12
 800909a:	300c      	adds	r0, #12
 800909c:	f7fe fd62 	bl	8007b64 <memcpy>
 80090a0:	2201      	movs	r2, #1
 80090a2:	4629      	mov	r1, r5
 80090a4:	4620      	mov	r0, r4
 80090a6:	f000 fac9 	bl	800963c <__lshift>
 80090aa:	9b00      	ldr	r3, [sp, #0]
 80090ac:	f8cd b014 	str.w	fp, [sp, #20]
 80090b0:	f003 0301 	and.w	r3, r3, #1
 80090b4:	46b1      	mov	r9, r6
 80090b6:	9307      	str	r3, [sp, #28]
 80090b8:	4606      	mov	r6, r0
 80090ba:	4639      	mov	r1, r7
 80090bc:	9804      	ldr	r0, [sp, #16]
 80090be:	f7ff faa6 	bl	800860e <quorem>
 80090c2:	4649      	mov	r1, r9
 80090c4:	4605      	mov	r5, r0
 80090c6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80090ca:	9804      	ldr	r0, [sp, #16]
 80090cc:	f000 fb0a 	bl	80096e4 <__mcmp>
 80090d0:	4632      	mov	r2, r6
 80090d2:	9000      	str	r0, [sp, #0]
 80090d4:	4639      	mov	r1, r7
 80090d6:	4620      	mov	r0, r4
 80090d8:	f000 fb1e 	bl	8009718 <__mdiff>
 80090dc:	68c3      	ldr	r3, [r0, #12]
 80090de:	4602      	mov	r2, r0
 80090e0:	bb03      	cbnz	r3, 8009124 <_dtoa_r+0x9fc>
 80090e2:	4601      	mov	r1, r0
 80090e4:	9008      	str	r0, [sp, #32]
 80090e6:	9804      	ldr	r0, [sp, #16]
 80090e8:	f000 fafc 	bl	80096e4 <__mcmp>
 80090ec:	9a08      	ldr	r2, [sp, #32]
 80090ee:	4603      	mov	r3, r0
 80090f0:	4611      	mov	r1, r2
 80090f2:	4620      	mov	r0, r4
 80090f4:	9308      	str	r3, [sp, #32]
 80090f6:	f000 f913 	bl	8009320 <_Bfree>
 80090fa:	9b08      	ldr	r3, [sp, #32]
 80090fc:	b9a3      	cbnz	r3, 8009128 <_dtoa_r+0xa00>
 80090fe:	9a06      	ldr	r2, [sp, #24]
 8009100:	b992      	cbnz	r2, 8009128 <_dtoa_r+0xa00>
 8009102:	9a07      	ldr	r2, [sp, #28]
 8009104:	b982      	cbnz	r2, 8009128 <_dtoa_r+0xa00>
 8009106:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800910a:	d029      	beq.n	8009160 <_dtoa_r+0xa38>
 800910c:	9b00      	ldr	r3, [sp, #0]
 800910e:	2b00      	cmp	r3, #0
 8009110:	dd01      	ble.n	8009116 <_dtoa_r+0x9ee>
 8009112:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8009116:	9b05      	ldr	r3, [sp, #20]
 8009118:	1c5d      	adds	r5, r3, #1
 800911a:	f883 8000 	strb.w	r8, [r3]
 800911e:	e782      	b.n	8009026 <_dtoa_r+0x8fe>
 8009120:	4630      	mov	r0, r6
 8009122:	e7c2      	b.n	80090aa <_dtoa_r+0x982>
 8009124:	2301      	movs	r3, #1
 8009126:	e7e3      	b.n	80090f0 <_dtoa_r+0x9c8>
 8009128:	9a00      	ldr	r2, [sp, #0]
 800912a:	2a00      	cmp	r2, #0
 800912c:	db04      	blt.n	8009138 <_dtoa_r+0xa10>
 800912e:	d125      	bne.n	800917c <_dtoa_r+0xa54>
 8009130:	9a06      	ldr	r2, [sp, #24]
 8009132:	bb1a      	cbnz	r2, 800917c <_dtoa_r+0xa54>
 8009134:	9a07      	ldr	r2, [sp, #28]
 8009136:	bb0a      	cbnz	r2, 800917c <_dtoa_r+0xa54>
 8009138:	2b00      	cmp	r3, #0
 800913a:	ddec      	ble.n	8009116 <_dtoa_r+0x9ee>
 800913c:	2201      	movs	r2, #1
 800913e:	9904      	ldr	r1, [sp, #16]
 8009140:	4620      	mov	r0, r4
 8009142:	f000 fa7b 	bl	800963c <__lshift>
 8009146:	4639      	mov	r1, r7
 8009148:	9004      	str	r0, [sp, #16]
 800914a:	f000 facb 	bl	80096e4 <__mcmp>
 800914e:	2800      	cmp	r0, #0
 8009150:	dc03      	bgt.n	800915a <_dtoa_r+0xa32>
 8009152:	d1e0      	bne.n	8009116 <_dtoa_r+0x9ee>
 8009154:	f018 0f01 	tst.w	r8, #1
 8009158:	d0dd      	beq.n	8009116 <_dtoa_r+0x9ee>
 800915a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800915e:	d1d8      	bne.n	8009112 <_dtoa_r+0x9ea>
 8009160:	9b05      	ldr	r3, [sp, #20]
 8009162:	9a05      	ldr	r2, [sp, #20]
 8009164:	1c5d      	adds	r5, r3, #1
 8009166:	2339      	movs	r3, #57	; 0x39
 8009168:	7013      	strb	r3, [r2, #0]
 800916a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800916e:	2b39      	cmp	r3, #57	; 0x39
 8009170:	f105 32ff 	add.w	r2, r5, #4294967295
 8009174:	d04f      	beq.n	8009216 <_dtoa_r+0xaee>
 8009176:	3301      	adds	r3, #1
 8009178:	7013      	strb	r3, [r2, #0]
 800917a:	e754      	b.n	8009026 <_dtoa_r+0x8fe>
 800917c:	9a05      	ldr	r2, [sp, #20]
 800917e:	2b00      	cmp	r3, #0
 8009180:	f102 0501 	add.w	r5, r2, #1
 8009184:	dd06      	ble.n	8009194 <_dtoa_r+0xa6c>
 8009186:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800918a:	d0e9      	beq.n	8009160 <_dtoa_r+0xa38>
 800918c:	f108 0801 	add.w	r8, r8, #1
 8009190:	9b05      	ldr	r3, [sp, #20]
 8009192:	e7c2      	b.n	800911a <_dtoa_r+0x9f2>
 8009194:	9a02      	ldr	r2, [sp, #8]
 8009196:	f805 8c01 	strb.w	r8, [r5, #-1]
 800919a:	eba5 030b 	sub.w	r3, r5, fp
 800919e:	4293      	cmp	r3, r2
 80091a0:	d021      	beq.n	80091e6 <_dtoa_r+0xabe>
 80091a2:	2300      	movs	r3, #0
 80091a4:	220a      	movs	r2, #10
 80091a6:	9904      	ldr	r1, [sp, #16]
 80091a8:	4620      	mov	r0, r4
 80091aa:	f000 f8d0 	bl	800934e <__multadd>
 80091ae:	45b1      	cmp	r9, r6
 80091b0:	9004      	str	r0, [sp, #16]
 80091b2:	f04f 0300 	mov.w	r3, #0
 80091b6:	f04f 020a 	mov.w	r2, #10
 80091ba:	4649      	mov	r1, r9
 80091bc:	4620      	mov	r0, r4
 80091be:	d105      	bne.n	80091cc <_dtoa_r+0xaa4>
 80091c0:	f000 f8c5 	bl	800934e <__multadd>
 80091c4:	4681      	mov	r9, r0
 80091c6:	4606      	mov	r6, r0
 80091c8:	9505      	str	r5, [sp, #20]
 80091ca:	e776      	b.n	80090ba <_dtoa_r+0x992>
 80091cc:	f000 f8bf 	bl	800934e <__multadd>
 80091d0:	4631      	mov	r1, r6
 80091d2:	4681      	mov	r9, r0
 80091d4:	2300      	movs	r3, #0
 80091d6:	220a      	movs	r2, #10
 80091d8:	4620      	mov	r0, r4
 80091da:	f000 f8b8 	bl	800934e <__multadd>
 80091de:	4606      	mov	r6, r0
 80091e0:	e7f2      	b.n	80091c8 <_dtoa_r+0xaa0>
 80091e2:	f04f 0900 	mov.w	r9, #0
 80091e6:	2201      	movs	r2, #1
 80091e8:	9904      	ldr	r1, [sp, #16]
 80091ea:	4620      	mov	r0, r4
 80091ec:	f000 fa26 	bl	800963c <__lshift>
 80091f0:	4639      	mov	r1, r7
 80091f2:	9004      	str	r0, [sp, #16]
 80091f4:	f000 fa76 	bl	80096e4 <__mcmp>
 80091f8:	2800      	cmp	r0, #0
 80091fa:	dcb6      	bgt.n	800916a <_dtoa_r+0xa42>
 80091fc:	d102      	bne.n	8009204 <_dtoa_r+0xadc>
 80091fe:	f018 0f01 	tst.w	r8, #1
 8009202:	d1b2      	bne.n	800916a <_dtoa_r+0xa42>
 8009204:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009208:	2b30      	cmp	r3, #48	; 0x30
 800920a:	f105 32ff 	add.w	r2, r5, #4294967295
 800920e:	f47f af0a 	bne.w	8009026 <_dtoa_r+0x8fe>
 8009212:	4615      	mov	r5, r2
 8009214:	e7f6      	b.n	8009204 <_dtoa_r+0xadc>
 8009216:	4593      	cmp	fp, r2
 8009218:	d105      	bne.n	8009226 <_dtoa_r+0xafe>
 800921a:	2331      	movs	r3, #49	; 0x31
 800921c:	f10a 0a01 	add.w	sl, sl, #1
 8009220:	f88b 3000 	strb.w	r3, [fp]
 8009224:	e6ff      	b.n	8009026 <_dtoa_r+0x8fe>
 8009226:	4615      	mov	r5, r2
 8009228:	e79f      	b.n	800916a <_dtoa_r+0xa42>
 800922a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009290 <_dtoa_r+0xb68>
 800922e:	e007      	b.n	8009240 <_dtoa_r+0xb18>
 8009230:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009232:	f8df b060 	ldr.w	fp, [pc, #96]	; 8009294 <_dtoa_r+0xb6c>
 8009236:	b11b      	cbz	r3, 8009240 <_dtoa_r+0xb18>
 8009238:	f10b 0308 	add.w	r3, fp, #8
 800923c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800923e:	6013      	str	r3, [r2, #0]
 8009240:	4658      	mov	r0, fp
 8009242:	b017      	add	sp, #92	; 0x5c
 8009244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009248:	9b06      	ldr	r3, [sp, #24]
 800924a:	2b01      	cmp	r3, #1
 800924c:	f77f ae35 	ble.w	8008eba <_dtoa_r+0x792>
 8009250:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009252:	9307      	str	r3, [sp, #28]
 8009254:	e649      	b.n	8008eea <_dtoa_r+0x7c2>
 8009256:	9b02      	ldr	r3, [sp, #8]
 8009258:	2b00      	cmp	r3, #0
 800925a:	dc03      	bgt.n	8009264 <_dtoa_r+0xb3c>
 800925c:	9b06      	ldr	r3, [sp, #24]
 800925e:	2b02      	cmp	r3, #2
 8009260:	f73f aecc 	bgt.w	8008ffc <_dtoa_r+0x8d4>
 8009264:	465d      	mov	r5, fp
 8009266:	4639      	mov	r1, r7
 8009268:	9804      	ldr	r0, [sp, #16]
 800926a:	f7ff f9d0 	bl	800860e <quorem>
 800926e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009272:	f805 8b01 	strb.w	r8, [r5], #1
 8009276:	9a02      	ldr	r2, [sp, #8]
 8009278:	eba5 030b 	sub.w	r3, r5, fp
 800927c:	429a      	cmp	r2, r3
 800927e:	ddb0      	ble.n	80091e2 <_dtoa_r+0xaba>
 8009280:	2300      	movs	r3, #0
 8009282:	220a      	movs	r2, #10
 8009284:	9904      	ldr	r1, [sp, #16]
 8009286:	4620      	mov	r0, r4
 8009288:	f000 f861 	bl	800934e <__multadd>
 800928c:	9004      	str	r0, [sp, #16]
 800928e:	e7ea      	b.n	8009266 <_dtoa_r+0xb3e>
 8009290:	0800ae78 	.word	0x0800ae78
 8009294:	0800ae9c 	.word	0x0800ae9c

08009298 <_localeconv_r>:
 8009298:	4b04      	ldr	r3, [pc, #16]	; (80092ac <_localeconv_r+0x14>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	6a18      	ldr	r0, [r3, #32]
 800929e:	4b04      	ldr	r3, [pc, #16]	; (80092b0 <_localeconv_r+0x18>)
 80092a0:	2800      	cmp	r0, #0
 80092a2:	bf08      	it	eq
 80092a4:	4618      	moveq	r0, r3
 80092a6:	30f0      	adds	r0, #240	; 0xf0
 80092a8:	4770      	bx	lr
 80092aa:	bf00      	nop
 80092ac:	20000010 	.word	0x20000010
 80092b0:	20000074 	.word	0x20000074

080092b4 <__malloc_lock>:
 80092b4:	4770      	bx	lr

080092b6 <__malloc_unlock>:
 80092b6:	4770      	bx	lr

080092b8 <_Balloc>:
 80092b8:	b570      	push	{r4, r5, r6, lr}
 80092ba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80092bc:	4604      	mov	r4, r0
 80092be:	460e      	mov	r6, r1
 80092c0:	b93d      	cbnz	r5, 80092d2 <_Balloc+0x1a>
 80092c2:	2010      	movs	r0, #16
 80092c4:	f7fe fc46 	bl	8007b54 <malloc>
 80092c8:	6260      	str	r0, [r4, #36]	; 0x24
 80092ca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80092ce:	6005      	str	r5, [r0, #0]
 80092d0:	60c5      	str	r5, [r0, #12]
 80092d2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80092d4:	68eb      	ldr	r3, [r5, #12]
 80092d6:	b183      	cbz	r3, 80092fa <_Balloc+0x42>
 80092d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092da:	68db      	ldr	r3, [r3, #12]
 80092dc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80092e0:	b9b8      	cbnz	r0, 8009312 <_Balloc+0x5a>
 80092e2:	2101      	movs	r1, #1
 80092e4:	fa01 f506 	lsl.w	r5, r1, r6
 80092e8:	1d6a      	adds	r2, r5, #5
 80092ea:	0092      	lsls	r2, r2, #2
 80092ec:	4620      	mov	r0, r4
 80092ee:	f000 fabf 	bl	8009870 <_calloc_r>
 80092f2:	b160      	cbz	r0, 800930e <_Balloc+0x56>
 80092f4:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80092f8:	e00e      	b.n	8009318 <_Balloc+0x60>
 80092fa:	2221      	movs	r2, #33	; 0x21
 80092fc:	2104      	movs	r1, #4
 80092fe:	4620      	mov	r0, r4
 8009300:	f000 fab6 	bl	8009870 <_calloc_r>
 8009304:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009306:	60e8      	str	r0, [r5, #12]
 8009308:	68db      	ldr	r3, [r3, #12]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d1e4      	bne.n	80092d8 <_Balloc+0x20>
 800930e:	2000      	movs	r0, #0
 8009310:	bd70      	pop	{r4, r5, r6, pc}
 8009312:	6802      	ldr	r2, [r0, #0]
 8009314:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009318:	2300      	movs	r3, #0
 800931a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800931e:	e7f7      	b.n	8009310 <_Balloc+0x58>

08009320 <_Bfree>:
 8009320:	b570      	push	{r4, r5, r6, lr}
 8009322:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009324:	4606      	mov	r6, r0
 8009326:	460d      	mov	r5, r1
 8009328:	b93c      	cbnz	r4, 800933a <_Bfree+0x1a>
 800932a:	2010      	movs	r0, #16
 800932c:	f7fe fc12 	bl	8007b54 <malloc>
 8009330:	6270      	str	r0, [r6, #36]	; 0x24
 8009332:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009336:	6004      	str	r4, [r0, #0]
 8009338:	60c4      	str	r4, [r0, #12]
 800933a:	b13d      	cbz	r5, 800934c <_Bfree+0x2c>
 800933c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800933e:	686a      	ldr	r2, [r5, #4]
 8009340:	68db      	ldr	r3, [r3, #12]
 8009342:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009346:	6029      	str	r1, [r5, #0]
 8009348:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800934c:	bd70      	pop	{r4, r5, r6, pc}

0800934e <__multadd>:
 800934e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009352:	690d      	ldr	r5, [r1, #16]
 8009354:	461f      	mov	r7, r3
 8009356:	4606      	mov	r6, r0
 8009358:	460c      	mov	r4, r1
 800935a:	f101 0c14 	add.w	ip, r1, #20
 800935e:	2300      	movs	r3, #0
 8009360:	f8dc 0000 	ldr.w	r0, [ip]
 8009364:	b281      	uxth	r1, r0
 8009366:	fb02 7101 	mla	r1, r2, r1, r7
 800936a:	0c0f      	lsrs	r7, r1, #16
 800936c:	0c00      	lsrs	r0, r0, #16
 800936e:	fb02 7000 	mla	r0, r2, r0, r7
 8009372:	b289      	uxth	r1, r1
 8009374:	3301      	adds	r3, #1
 8009376:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800937a:	429d      	cmp	r5, r3
 800937c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009380:	f84c 1b04 	str.w	r1, [ip], #4
 8009384:	dcec      	bgt.n	8009360 <__multadd+0x12>
 8009386:	b1d7      	cbz	r7, 80093be <__multadd+0x70>
 8009388:	68a3      	ldr	r3, [r4, #8]
 800938a:	42ab      	cmp	r3, r5
 800938c:	dc12      	bgt.n	80093b4 <__multadd+0x66>
 800938e:	6861      	ldr	r1, [r4, #4]
 8009390:	4630      	mov	r0, r6
 8009392:	3101      	adds	r1, #1
 8009394:	f7ff ff90 	bl	80092b8 <_Balloc>
 8009398:	6922      	ldr	r2, [r4, #16]
 800939a:	3202      	adds	r2, #2
 800939c:	f104 010c 	add.w	r1, r4, #12
 80093a0:	4680      	mov	r8, r0
 80093a2:	0092      	lsls	r2, r2, #2
 80093a4:	300c      	adds	r0, #12
 80093a6:	f7fe fbdd 	bl	8007b64 <memcpy>
 80093aa:	4621      	mov	r1, r4
 80093ac:	4630      	mov	r0, r6
 80093ae:	f7ff ffb7 	bl	8009320 <_Bfree>
 80093b2:	4644      	mov	r4, r8
 80093b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80093b8:	3501      	adds	r5, #1
 80093ba:	615f      	str	r7, [r3, #20]
 80093bc:	6125      	str	r5, [r4, #16]
 80093be:	4620      	mov	r0, r4
 80093c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080093c4 <__hi0bits>:
 80093c4:	0c02      	lsrs	r2, r0, #16
 80093c6:	0412      	lsls	r2, r2, #16
 80093c8:	4603      	mov	r3, r0
 80093ca:	b9b2      	cbnz	r2, 80093fa <__hi0bits+0x36>
 80093cc:	0403      	lsls	r3, r0, #16
 80093ce:	2010      	movs	r0, #16
 80093d0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80093d4:	bf04      	itt	eq
 80093d6:	021b      	lsleq	r3, r3, #8
 80093d8:	3008      	addeq	r0, #8
 80093da:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80093de:	bf04      	itt	eq
 80093e0:	011b      	lsleq	r3, r3, #4
 80093e2:	3004      	addeq	r0, #4
 80093e4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80093e8:	bf04      	itt	eq
 80093ea:	009b      	lsleq	r3, r3, #2
 80093ec:	3002      	addeq	r0, #2
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	db06      	blt.n	8009400 <__hi0bits+0x3c>
 80093f2:	005b      	lsls	r3, r3, #1
 80093f4:	d503      	bpl.n	80093fe <__hi0bits+0x3a>
 80093f6:	3001      	adds	r0, #1
 80093f8:	4770      	bx	lr
 80093fa:	2000      	movs	r0, #0
 80093fc:	e7e8      	b.n	80093d0 <__hi0bits+0xc>
 80093fe:	2020      	movs	r0, #32
 8009400:	4770      	bx	lr

08009402 <__lo0bits>:
 8009402:	6803      	ldr	r3, [r0, #0]
 8009404:	f013 0207 	ands.w	r2, r3, #7
 8009408:	4601      	mov	r1, r0
 800940a:	d00b      	beq.n	8009424 <__lo0bits+0x22>
 800940c:	07da      	lsls	r2, r3, #31
 800940e:	d423      	bmi.n	8009458 <__lo0bits+0x56>
 8009410:	0798      	lsls	r0, r3, #30
 8009412:	bf49      	itett	mi
 8009414:	085b      	lsrmi	r3, r3, #1
 8009416:	089b      	lsrpl	r3, r3, #2
 8009418:	2001      	movmi	r0, #1
 800941a:	600b      	strmi	r3, [r1, #0]
 800941c:	bf5c      	itt	pl
 800941e:	600b      	strpl	r3, [r1, #0]
 8009420:	2002      	movpl	r0, #2
 8009422:	4770      	bx	lr
 8009424:	b298      	uxth	r0, r3
 8009426:	b9a8      	cbnz	r0, 8009454 <__lo0bits+0x52>
 8009428:	0c1b      	lsrs	r3, r3, #16
 800942a:	2010      	movs	r0, #16
 800942c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009430:	bf04      	itt	eq
 8009432:	0a1b      	lsreq	r3, r3, #8
 8009434:	3008      	addeq	r0, #8
 8009436:	071a      	lsls	r2, r3, #28
 8009438:	bf04      	itt	eq
 800943a:	091b      	lsreq	r3, r3, #4
 800943c:	3004      	addeq	r0, #4
 800943e:	079a      	lsls	r2, r3, #30
 8009440:	bf04      	itt	eq
 8009442:	089b      	lsreq	r3, r3, #2
 8009444:	3002      	addeq	r0, #2
 8009446:	07da      	lsls	r2, r3, #31
 8009448:	d402      	bmi.n	8009450 <__lo0bits+0x4e>
 800944a:	085b      	lsrs	r3, r3, #1
 800944c:	d006      	beq.n	800945c <__lo0bits+0x5a>
 800944e:	3001      	adds	r0, #1
 8009450:	600b      	str	r3, [r1, #0]
 8009452:	4770      	bx	lr
 8009454:	4610      	mov	r0, r2
 8009456:	e7e9      	b.n	800942c <__lo0bits+0x2a>
 8009458:	2000      	movs	r0, #0
 800945a:	4770      	bx	lr
 800945c:	2020      	movs	r0, #32
 800945e:	4770      	bx	lr

08009460 <__i2b>:
 8009460:	b510      	push	{r4, lr}
 8009462:	460c      	mov	r4, r1
 8009464:	2101      	movs	r1, #1
 8009466:	f7ff ff27 	bl	80092b8 <_Balloc>
 800946a:	2201      	movs	r2, #1
 800946c:	6144      	str	r4, [r0, #20]
 800946e:	6102      	str	r2, [r0, #16]
 8009470:	bd10      	pop	{r4, pc}

08009472 <__multiply>:
 8009472:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009476:	4614      	mov	r4, r2
 8009478:	690a      	ldr	r2, [r1, #16]
 800947a:	6923      	ldr	r3, [r4, #16]
 800947c:	429a      	cmp	r2, r3
 800947e:	bfb8      	it	lt
 8009480:	460b      	movlt	r3, r1
 8009482:	4688      	mov	r8, r1
 8009484:	bfbc      	itt	lt
 8009486:	46a0      	movlt	r8, r4
 8009488:	461c      	movlt	r4, r3
 800948a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800948e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009492:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009496:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800949a:	eb07 0609 	add.w	r6, r7, r9
 800949e:	42b3      	cmp	r3, r6
 80094a0:	bfb8      	it	lt
 80094a2:	3101      	addlt	r1, #1
 80094a4:	f7ff ff08 	bl	80092b8 <_Balloc>
 80094a8:	f100 0514 	add.w	r5, r0, #20
 80094ac:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80094b0:	462b      	mov	r3, r5
 80094b2:	2200      	movs	r2, #0
 80094b4:	4573      	cmp	r3, lr
 80094b6:	d316      	bcc.n	80094e6 <__multiply+0x74>
 80094b8:	f104 0214 	add.w	r2, r4, #20
 80094bc:	f108 0114 	add.w	r1, r8, #20
 80094c0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80094c4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80094c8:	9300      	str	r3, [sp, #0]
 80094ca:	9b00      	ldr	r3, [sp, #0]
 80094cc:	9201      	str	r2, [sp, #4]
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d80c      	bhi.n	80094ec <__multiply+0x7a>
 80094d2:	2e00      	cmp	r6, #0
 80094d4:	dd03      	ble.n	80094de <__multiply+0x6c>
 80094d6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d05d      	beq.n	800959a <__multiply+0x128>
 80094de:	6106      	str	r6, [r0, #16]
 80094e0:	b003      	add	sp, #12
 80094e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094e6:	f843 2b04 	str.w	r2, [r3], #4
 80094ea:	e7e3      	b.n	80094b4 <__multiply+0x42>
 80094ec:	f8b2 b000 	ldrh.w	fp, [r2]
 80094f0:	f1bb 0f00 	cmp.w	fp, #0
 80094f4:	d023      	beq.n	800953e <__multiply+0xcc>
 80094f6:	4689      	mov	r9, r1
 80094f8:	46ac      	mov	ip, r5
 80094fa:	f04f 0800 	mov.w	r8, #0
 80094fe:	f859 4b04 	ldr.w	r4, [r9], #4
 8009502:	f8dc a000 	ldr.w	sl, [ip]
 8009506:	b2a3      	uxth	r3, r4
 8009508:	fa1f fa8a 	uxth.w	sl, sl
 800950c:	fb0b a303 	mla	r3, fp, r3, sl
 8009510:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009514:	f8dc 4000 	ldr.w	r4, [ip]
 8009518:	4443      	add	r3, r8
 800951a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800951e:	fb0b 840a 	mla	r4, fp, sl, r8
 8009522:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009526:	46e2      	mov	sl, ip
 8009528:	b29b      	uxth	r3, r3
 800952a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800952e:	454f      	cmp	r7, r9
 8009530:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009534:	f84a 3b04 	str.w	r3, [sl], #4
 8009538:	d82b      	bhi.n	8009592 <__multiply+0x120>
 800953a:	f8cc 8004 	str.w	r8, [ip, #4]
 800953e:	9b01      	ldr	r3, [sp, #4]
 8009540:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009544:	3204      	adds	r2, #4
 8009546:	f1ba 0f00 	cmp.w	sl, #0
 800954a:	d020      	beq.n	800958e <__multiply+0x11c>
 800954c:	682b      	ldr	r3, [r5, #0]
 800954e:	4689      	mov	r9, r1
 8009550:	46a8      	mov	r8, r5
 8009552:	f04f 0b00 	mov.w	fp, #0
 8009556:	f8b9 c000 	ldrh.w	ip, [r9]
 800955a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800955e:	fb0a 440c 	mla	r4, sl, ip, r4
 8009562:	445c      	add	r4, fp
 8009564:	46c4      	mov	ip, r8
 8009566:	b29b      	uxth	r3, r3
 8009568:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800956c:	f84c 3b04 	str.w	r3, [ip], #4
 8009570:	f859 3b04 	ldr.w	r3, [r9], #4
 8009574:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009578:	0c1b      	lsrs	r3, r3, #16
 800957a:	fb0a b303 	mla	r3, sl, r3, fp
 800957e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009582:	454f      	cmp	r7, r9
 8009584:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009588:	d805      	bhi.n	8009596 <__multiply+0x124>
 800958a:	f8c8 3004 	str.w	r3, [r8, #4]
 800958e:	3504      	adds	r5, #4
 8009590:	e79b      	b.n	80094ca <__multiply+0x58>
 8009592:	46d4      	mov	ip, sl
 8009594:	e7b3      	b.n	80094fe <__multiply+0x8c>
 8009596:	46e0      	mov	r8, ip
 8009598:	e7dd      	b.n	8009556 <__multiply+0xe4>
 800959a:	3e01      	subs	r6, #1
 800959c:	e799      	b.n	80094d2 <__multiply+0x60>
	...

080095a0 <__pow5mult>:
 80095a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095a4:	4615      	mov	r5, r2
 80095a6:	f012 0203 	ands.w	r2, r2, #3
 80095aa:	4606      	mov	r6, r0
 80095ac:	460f      	mov	r7, r1
 80095ae:	d007      	beq.n	80095c0 <__pow5mult+0x20>
 80095b0:	3a01      	subs	r2, #1
 80095b2:	4c21      	ldr	r4, [pc, #132]	; (8009638 <__pow5mult+0x98>)
 80095b4:	2300      	movs	r3, #0
 80095b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80095ba:	f7ff fec8 	bl	800934e <__multadd>
 80095be:	4607      	mov	r7, r0
 80095c0:	10ad      	asrs	r5, r5, #2
 80095c2:	d035      	beq.n	8009630 <__pow5mult+0x90>
 80095c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80095c6:	b93c      	cbnz	r4, 80095d8 <__pow5mult+0x38>
 80095c8:	2010      	movs	r0, #16
 80095ca:	f7fe fac3 	bl	8007b54 <malloc>
 80095ce:	6270      	str	r0, [r6, #36]	; 0x24
 80095d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80095d4:	6004      	str	r4, [r0, #0]
 80095d6:	60c4      	str	r4, [r0, #12]
 80095d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80095dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80095e0:	b94c      	cbnz	r4, 80095f6 <__pow5mult+0x56>
 80095e2:	f240 2171 	movw	r1, #625	; 0x271
 80095e6:	4630      	mov	r0, r6
 80095e8:	f7ff ff3a 	bl	8009460 <__i2b>
 80095ec:	2300      	movs	r3, #0
 80095ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80095f2:	4604      	mov	r4, r0
 80095f4:	6003      	str	r3, [r0, #0]
 80095f6:	f04f 0800 	mov.w	r8, #0
 80095fa:	07eb      	lsls	r3, r5, #31
 80095fc:	d50a      	bpl.n	8009614 <__pow5mult+0x74>
 80095fe:	4639      	mov	r1, r7
 8009600:	4622      	mov	r2, r4
 8009602:	4630      	mov	r0, r6
 8009604:	f7ff ff35 	bl	8009472 <__multiply>
 8009608:	4639      	mov	r1, r7
 800960a:	4681      	mov	r9, r0
 800960c:	4630      	mov	r0, r6
 800960e:	f7ff fe87 	bl	8009320 <_Bfree>
 8009612:	464f      	mov	r7, r9
 8009614:	106d      	asrs	r5, r5, #1
 8009616:	d00b      	beq.n	8009630 <__pow5mult+0x90>
 8009618:	6820      	ldr	r0, [r4, #0]
 800961a:	b938      	cbnz	r0, 800962c <__pow5mult+0x8c>
 800961c:	4622      	mov	r2, r4
 800961e:	4621      	mov	r1, r4
 8009620:	4630      	mov	r0, r6
 8009622:	f7ff ff26 	bl	8009472 <__multiply>
 8009626:	6020      	str	r0, [r4, #0]
 8009628:	f8c0 8000 	str.w	r8, [r0]
 800962c:	4604      	mov	r4, r0
 800962e:	e7e4      	b.n	80095fa <__pow5mult+0x5a>
 8009630:	4638      	mov	r0, r7
 8009632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009636:	bf00      	nop
 8009638:	0800afa0 	.word	0x0800afa0

0800963c <__lshift>:
 800963c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009640:	460c      	mov	r4, r1
 8009642:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009646:	6923      	ldr	r3, [r4, #16]
 8009648:	6849      	ldr	r1, [r1, #4]
 800964a:	eb0a 0903 	add.w	r9, sl, r3
 800964e:	68a3      	ldr	r3, [r4, #8]
 8009650:	4607      	mov	r7, r0
 8009652:	4616      	mov	r6, r2
 8009654:	f109 0501 	add.w	r5, r9, #1
 8009658:	42ab      	cmp	r3, r5
 800965a:	db32      	blt.n	80096c2 <__lshift+0x86>
 800965c:	4638      	mov	r0, r7
 800965e:	f7ff fe2b 	bl	80092b8 <_Balloc>
 8009662:	2300      	movs	r3, #0
 8009664:	4680      	mov	r8, r0
 8009666:	f100 0114 	add.w	r1, r0, #20
 800966a:	461a      	mov	r2, r3
 800966c:	4553      	cmp	r3, sl
 800966e:	db2b      	blt.n	80096c8 <__lshift+0x8c>
 8009670:	6920      	ldr	r0, [r4, #16]
 8009672:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009676:	f104 0314 	add.w	r3, r4, #20
 800967a:	f016 021f 	ands.w	r2, r6, #31
 800967e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009682:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009686:	d025      	beq.n	80096d4 <__lshift+0x98>
 8009688:	f1c2 0e20 	rsb	lr, r2, #32
 800968c:	2000      	movs	r0, #0
 800968e:	681e      	ldr	r6, [r3, #0]
 8009690:	468a      	mov	sl, r1
 8009692:	4096      	lsls	r6, r2
 8009694:	4330      	orrs	r0, r6
 8009696:	f84a 0b04 	str.w	r0, [sl], #4
 800969a:	f853 0b04 	ldr.w	r0, [r3], #4
 800969e:	459c      	cmp	ip, r3
 80096a0:	fa20 f00e 	lsr.w	r0, r0, lr
 80096a4:	d814      	bhi.n	80096d0 <__lshift+0x94>
 80096a6:	6048      	str	r0, [r1, #4]
 80096a8:	b108      	cbz	r0, 80096ae <__lshift+0x72>
 80096aa:	f109 0502 	add.w	r5, r9, #2
 80096ae:	3d01      	subs	r5, #1
 80096b0:	4638      	mov	r0, r7
 80096b2:	f8c8 5010 	str.w	r5, [r8, #16]
 80096b6:	4621      	mov	r1, r4
 80096b8:	f7ff fe32 	bl	8009320 <_Bfree>
 80096bc:	4640      	mov	r0, r8
 80096be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096c2:	3101      	adds	r1, #1
 80096c4:	005b      	lsls	r3, r3, #1
 80096c6:	e7c7      	b.n	8009658 <__lshift+0x1c>
 80096c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80096cc:	3301      	adds	r3, #1
 80096ce:	e7cd      	b.n	800966c <__lshift+0x30>
 80096d0:	4651      	mov	r1, sl
 80096d2:	e7dc      	b.n	800968e <__lshift+0x52>
 80096d4:	3904      	subs	r1, #4
 80096d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80096da:	f841 2f04 	str.w	r2, [r1, #4]!
 80096de:	459c      	cmp	ip, r3
 80096e0:	d8f9      	bhi.n	80096d6 <__lshift+0x9a>
 80096e2:	e7e4      	b.n	80096ae <__lshift+0x72>

080096e4 <__mcmp>:
 80096e4:	6903      	ldr	r3, [r0, #16]
 80096e6:	690a      	ldr	r2, [r1, #16]
 80096e8:	1a9b      	subs	r3, r3, r2
 80096ea:	b530      	push	{r4, r5, lr}
 80096ec:	d10c      	bne.n	8009708 <__mcmp+0x24>
 80096ee:	0092      	lsls	r2, r2, #2
 80096f0:	3014      	adds	r0, #20
 80096f2:	3114      	adds	r1, #20
 80096f4:	1884      	adds	r4, r0, r2
 80096f6:	4411      	add	r1, r2
 80096f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80096fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009700:	4295      	cmp	r5, r2
 8009702:	d003      	beq.n	800970c <__mcmp+0x28>
 8009704:	d305      	bcc.n	8009712 <__mcmp+0x2e>
 8009706:	2301      	movs	r3, #1
 8009708:	4618      	mov	r0, r3
 800970a:	bd30      	pop	{r4, r5, pc}
 800970c:	42a0      	cmp	r0, r4
 800970e:	d3f3      	bcc.n	80096f8 <__mcmp+0x14>
 8009710:	e7fa      	b.n	8009708 <__mcmp+0x24>
 8009712:	f04f 33ff 	mov.w	r3, #4294967295
 8009716:	e7f7      	b.n	8009708 <__mcmp+0x24>

08009718 <__mdiff>:
 8009718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800971c:	460d      	mov	r5, r1
 800971e:	4607      	mov	r7, r0
 8009720:	4611      	mov	r1, r2
 8009722:	4628      	mov	r0, r5
 8009724:	4614      	mov	r4, r2
 8009726:	f7ff ffdd 	bl	80096e4 <__mcmp>
 800972a:	1e06      	subs	r6, r0, #0
 800972c:	d108      	bne.n	8009740 <__mdiff+0x28>
 800972e:	4631      	mov	r1, r6
 8009730:	4638      	mov	r0, r7
 8009732:	f7ff fdc1 	bl	80092b8 <_Balloc>
 8009736:	2301      	movs	r3, #1
 8009738:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800973c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009740:	bfa4      	itt	ge
 8009742:	4623      	movge	r3, r4
 8009744:	462c      	movge	r4, r5
 8009746:	4638      	mov	r0, r7
 8009748:	6861      	ldr	r1, [r4, #4]
 800974a:	bfa6      	itte	ge
 800974c:	461d      	movge	r5, r3
 800974e:	2600      	movge	r6, #0
 8009750:	2601      	movlt	r6, #1
 8009752:	f7ff fdb1 	bl	80092b8 <_Balloc>
 8009756:	692b      	ldr	r3, [r5, #16]
 8009758:	60c6      	str	r6, [r0, #12]
 800975a:	6926      	ldr	r6, [r4, #16]
 800975c:	f105 0914 	add.w	r9, r5, #20
 8009760:	f104 0214 	add.w	r2, r4, #20
 8009764:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009768:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800976c:	f100 0514 	add.w	r5, r0, #20
 8009770:	f04f 0e00 	mov.w	lr, #0
 8009774:	f852 ab04 	ldr.w	sl, [r2], #4
 8009778:	f859 4b04 	ldr.w	r4, [r9], #4
 800977c:	fa1e f18a 	uxtah	r1, lr, sl
 8009780:	b2a3      	uxth	r3, r4
 8009782:	1ac9      	subs	r1, r1, r3
 8009784:	0c23      	lsrs	r3, r4, #16
 8009786:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800978a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800978e:	b289      	uxth	r1, r1
 8009790:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009794:	45c8      	cmp	r8, r9
 8009796:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800979a:	4694      	mov	ip, r2
 800979c:	f845 3b04 	str.w	r3, [r5], #4
 80097a0:	d8e8      	bhi.n	8009774 <__mdiff+0x5c>
 80097a2:	45bc      	cmp	ip, r7
 80097a4:	d304      	bcc.n	80097b0 <__mdiff+0x98>
 80097a6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80097aa:	b183      	cbz	r3, 80097ce <__mdiff+0xb6>
 80097ac:	6106      	str	r6, [r0, #16]
 80097ae:	e7c5      	b.n	800973c <__mdiff+0x24>
 80097b0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80097b4:	fa1e f381 	uxtah	r3, lr, r1
 80097b8:	141a      	asrs	r2, r3, #16
 80097ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80097be:	b29b      	uxth	r3, r3
 80097c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097c4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80097c8:	f845 3b04 	str.w	r3, [r5], #4
 80097cc:	e7e9      	b.n	80097a2 <__mdiff+0x8a>
 80097ce:	3e01      	subs	r6, #1
 80097d0:	e7e9      	b.n	80097a6 <__mdiff+0x8e>

080097d2 <__d2b>:
 80097d2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80097d6:	460e      	mov	r6, r1
 80097d8:	2101      	movs	r1, #1
 80097da:	ec59 8b10 	vmov	r8, r9, d0
 80097de:	4615      	mov	r5, r2
 80097e0:	f7ff fd6a 	bl	80092b8 <_Balloc>
 80097e4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80097e8:	4607      	mov	r7, r0
 80097ea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80097ee:	bb34      	cbnz	r4, 800983e <__d2b+0x6c>
 80097f0:	9301      	str	r3, [sp, #4]
 80097f2:	f1b8 0300 	subs.w	r3, r8, #0
 80097f6:	d027      	beq.n	8009848 <__d2b+0x76>
 80097f8:	a802      	add	r0, sp, #8
 80097fa:	f840 3d08 	str.w	r3, [r0, #-8]!
 80097fe:	f7ff fe00 	bl	8009402 <__lo0bits>
 8009802:	9900      	ldr	r1, [sp, #0]
 8009804:	b1f0      	cbz	r0, 8009844 <__d2b+0x72>
 8009806:	9a01      	ldr	r2, [sp, #4]
 8009808:	f1c0 0320 	rsb	r3, r0, #32
 800980c:	fa02 f303 	lsl.w	r3, r2, r3
 8009810:	430b      	orrs	r3, r1
 8009812:	40c2      	lsrs	r2, r0
 8009814:	617b      	str	r3, [r7, #20]
 8009816:	9201      	str	r2, [sp, #4]
 8009818:	9b01      	ldr	r3, [sp, #4]
 800981a:	61bb      	str	r3, [r7, #24]
 800981c:	2b00      	cmp	r3, #0
 800981e:	bf14      	ite	ne
 8009820:	2102      	movne	r1, #2
 8009822:	2101      	moveq	r1, #1
 8009824:	6139      	str	r1, [r7, #16]
 8009826:	b1c4      	cbz	r4, 800985a <__d2b+0x88>
 8009828:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800982c:	4404      	add	r4, r0
 800982e:	6034      	str	r4, [r6, #0]
 8009830:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009834:	6028      	str	r0, [r5, #0]
 8009836:	4638      	mov	r0, r7
 8009838:	b003      	add	sp, #12
 800983a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800983e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009842:	e7d5      	b.n	80097f0 <__d2b+0x1e>
 8009844:	6179      	str	r1, [r7, #20]
 8009846:	e7e7      	b.n	8009818 <__d2b+0x46>
 8009848:	a801      	add	r0, sp, #4
 800984a:	f7ff fdda 	bl	8009402 <__lo0bits>
 800984e:	9b01      	ldr	r3, [sp, #4]
 8009850:	617b      	str	r3, [r7, #20]
 8009852:	2101      	movs	r1, #1
 8009854:	6139      	str	r1, [r7, #16]
 8009856:	3020      	adds	r0, #32
 8009858:	e7e5      	b.n	8009826 <__d2b+0x54>
 800985a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800985e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009862:	6030      	str	r0, [r6, #0]
 8009864:	6918      	ldr	r0, [r3, #16]
 8009866:	f7ff fdad 	bl	80093c4 <__hi0bits>
 800986a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800986e:	e7e1      	b.n	8009834 <__d2b+0x62>

08009870 <_calloc_r>:
 8009870:	b538      	push	{r3, r4, r5, lr}
 8009872:	fb02 f401 	mul.w	r4, r2, r1
 8009876:	4621      	mov	r1, r4
 8009878:	f7fe f9d6 	bl	8007c28 <_malloc_r>
 800987c:	4605      	mov	r5, r0
 800987e:	b118      	cbz	r0, 8009888 <_calloc_r+0x18>
 8009880:	4622      	mov	r2, r4
 8009882:	2100      	movs	r1, #0
 8009884:	f7fe f979 	bl	8007b7a <memset>
 8009888:	4628      	mov	r0, r5
 800988a:	bd38      	pop	{r3, r4, r5, pc}

0800988c <__ssputs_r>:
 800988c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009890:	688e      	ldr	r6, [r1, #8]
 8009892:	429e      	cmp	r6, r3
 8009894:	4682      	mov	sl, r0
 8009896:	460c      	mov	r4, r1
 8009898:	4690      	mov	r8, r2
 800989a:	4699      	mov	r9, r3
 800989c:	d837      	bhi.n	800990e <__ssputs_r+0x82>
 800989e:	898a      	ldrh	r2, [r1, #12]
 80098a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80098a4:	d031      	beq.n	800990a <__ssputs_r+0x7e>
 80098a6:	6825      	ldr	r5, [r4, #0]
 80098a8:	6909      	ldr	r1, [r1, #16]
 80098aa:	1a6f      	subs	r7, r5, r1
 80098ac:	6965      	ldr	r5, [r4, #20]
 80098ae:	2302      	movs	r3, #2
 80098b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80098b4:	fb95 f5f3 	sdiv	r5, r5, r3
 80098b8:	f109 0301 	add.w	r3, r9, #1
 80098bc:	443b      	add	r3, r7
 80098be:	429d      	cmp	r5, r3
 80098c0:	bf38      	it	cc
 80098c2:	461d      	movcc	r5, r3
 80098c4:	0553      	lsls	r3, r2, #21
 80098c6:	d530      	bpl.n	800992a <__ssputs_r+0x9e>
 80098c8:	4629      	mov	r1, r5
 80098ca:	f7fe f9ad 	bl	8007c28 <_malloc_r>
 80098ce:	4606      	mov	r6, r0
 80098d0:	b950      	cbnz	r0, 80098e8 <__ssputs_r+0x5c>
 80098d2:	230c      	movs	r3, #12
 80098d4:	f8ca 3000 	str.w	r3, [sl]
 80098d8:	89a3      	ldrh	r3, [r4, #12]
 80098da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098de:	81a3      	strh	r3, [r4, #12]
 80098e0:	f04f 30ff 	mov.w	r0, #4294967295
 80098e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098e8:	463a      	mov	r2, r7
 80098ea:	6921      	ldr	r1, [r4, #16]
 80098ec:	f7fe f93a 	bl	8007b64 <memcpy>
 80098f0:	89a3      	ldrh	r3, [r4, #12]
 80098f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80098f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098fa:	81a3      	strh	r3, [r4, #12]
 80098fc:	6126      	str	r6, [r4, #16]
 80098fe:	6165      	str	r5, [r4, #20]
 8009900:	443e      	add	r6, r7
 8009902:	1bed      	subs	r5, r5, r7
 8009904:	6026      	str	r6, [r4, #0]
 8009906:	60a5      	str	r5, [r4, #8]
 8009908:	464e      	mov	r6, r9
 800990a:	454e      	cmp	r6, r9
 800990c:	d900      	bls.n	8009910 <__ssputs_r+0x84>
 800990e:	464e      	mov	r6, r9
 8009910:	4632      	mov	r2, r6
 8009912:	4641      	mov	r1, r8
 8009914:	6820      	ldr	r0, [r4, #0]
 8009916:	f000 f91d 	bl	8009b54 <memmove>
 800991a:	68a3      	ldr	r3, [r4, #8]
 800991c:	1b9b      	subs	r3, r3, r6
 800991e:	60a3      	str	r3, [r4, #8]
 8009920:	6823      	ldr	r3, [r4, #0]
 8009922:	441e      	add	r6, r3
 8009924:	6026      	str	r6, [r4, #0]
 8009926:	2000      	movs	r0, #0
 8009928:	e7dc      	b.n	80098e4 <__ssputs_r+0x58>
 800992a:	462a      	mov	r2, r5
 800992c:	f000 f92b 	bl	8009b86 <_realloc_r>
 8009930:	4606      	mov	r6, r0
 8009932:	2800      	cmp	r0, #0
 8009934:	d1e2      	bne.n	80098fc <__ssputs_r+0x70>
 8009936:	6921      	ldr	r1, [r4, #16]
 8009938:	4650      	mov	r0, sl
 800993a:	f7fe f927 	bl	8007b8c <_free_r>
 800993e:	e7c8      	b.n	80098d2 <__ssputs_r+0x46>

08009940 <_svfiprintf_r>:
 8009940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009944:	461d      	mov	r5, r3
 8009946:	898b      	ldrh	r3, [r1, #12]
 8009948:	061f      	lsls	r7, r3, #24
 800994a:	b09d      	sub	sp, #116	; 0x74
 800994c:	4680      	mov	r8, r0
 800994e:	460c      	mov	r4, r1
 8009950:	4616      	mov	r6, r2
 8009952:	d50f      	bpl.n	8009974 <_svfiprintf_r+0x34>
 8009954:	690b      	ldr	r3, [r1, #16]
 8009956:	b96b      	cbnz	r3, 8009974 <_svfiprintf_r+0x34>
 8009958:	2140      	movs	r1, #64	; 0x40
 800995a:	f7fe f965 	bl	8007c28 <_malloc_r>
 800995e:	6020      	str	r0, [r4, #0]
 8009960:	6120      	str	r0, [r4, #16]
 8009962:	b928      	cbnz	r0, 8009970 <_svfiprintf_r+0x30>
 8009964:	230c      	movs	r3, #12
 8009966:	f8c8 3000 	str.w	r3, [r8]
 800996a:	f04f 30ff 	mov.w	r0, #4294967295
 800996e:	e0c8      	b.n	8009b02 <_svfiprintf_r+0x1c2>
 8009970:	2340      	movs	r3, #64	; 0x40
 8009972:	6163      	str	r3, [r4, #20]
 8009974:	2300      	movs	r3, #0
 8009976:	9309      	str	r3, [sp, #36]	; 0x24
 8009978:	2320      	movs	r3, #32
 800997a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800997e:	2330      	movs	r3, #48	; 0x30
 8009980:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009984:	9503      	str	r5, [sp, #12]
 8009986:	f04f 0b01 	mov.w	fp, #1
 800998a:	4637      	mov	r7, r6
 800998c:	463d      	mov	r5, r7
 800998e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009992:	b10b      	cbz	r3, 8009998 <_svfiprintf_r+0x58>
 8009994:	2b25      	cmp	r3, #37	; 0x25
 8009996:	d13e      	bne.n	8009a16 <_svfiprintf_r+0xd6>
 8009998:	ebb7 0a06 	subs.w	sl, r7, r6
 800999c:	d00b      	beq.n	80099b6 <_svfiprintf_r+0x76>
 800999e:	4653      	mov	r3, sl
 80099a0:	4632      	mov	r2, r6
 80099a2:	4621      	mov	r1, r4
 80099a4:	4640      	mov	r0, r8
 80099a6:	f7ff ff71 	bl	800988c <__ssputs_r>
 80099aa:	3001      	adds	r0, #1
 80099ac:	f000 80a4 	beq.w	8009af8 <_svfiprintf_r+0x1b8>
 80099b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099b2:	4453      	add	r3, sl
 80099b4:	9309      	str	r3, [sp, #36]	; 0x24
 80099b6:	783b      	ldrb	r3, [r7, #0]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	f000 809d 	beq.w	8009af8 <_svfiprintf_r+0x1b8>
 80099be:	2300      	movs	r3, #0
 80099c0:	f04f 32ff 	mov.w	r2, #4294967295
 80099c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099c8:	9304      	str	r3, [sp, #16]
 80099ca:	9307      	str	r3, [sp, #28]
 80099cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80099d0:	931a      	str	r3, [sp, #104]	; 0x68
 80099d2:	462f      	mov	r7, r5
 80099d4:	2205      	movs	r2, #5
 80099d6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80099da:	4850      	ldr	r0, [pc, #320]	; (8009b1c <_svfiprintf_r+0x1dc>)
 80099dc:	f7f6 fc10 	bl	8000200 <memchr>
 80099e0:	9b04      	ldr	r3, [sp, #16]
 80099e2:	b9d0      	cbnz	r0, 8009a1a <_svfiprintf_r+0xda>
 80099e4:	06d9      	lsls	r1, r3, #27
 80099e6:	bf44      	itt	mi
 80099e8:	2220      	movmi	r2, #32
 80099ea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80099ee:	071a      	lsls	r2, r3, #28
 80099f0:	bf44      	itt	mi
 80099f2:	222b      	movmi	r2, #43	; 0x2b
 80099f4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80099f8:	782a      	ldrb	r2, [r5, #0]
 80099fa:	2a2a      	cmp	r2, #42	; 0x2a
 80099fc:	d015      	beq.n	8009a2a <_svfiprintf_r+0xea>
 80099fe:	9a07      	ldr	r2, [sp, #28]
 8009a00:	462f      	mov	r7, r5
 8009a02:	2000      	movs	r0, #0
 8009a04:	250a      	movs	r5, #10
 8009a06:	4639      	mov	r1, r7
 8009a08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a0c:	3b30      	subs	r3, #48	; 0x30
 8009a0e:	2b09      	cmp	r3, #9
 8009a10:	d94d      	bls.n	8009aae <_svfiprintf_r+0x16e>
 8009a12:	b1b8      	cbz	r0, 8009a44 <_svfiprintf_r+0x104>
 8009a14:	e00f      	b.n	8009a36 <_svfiprintf_r+0xf6>
 8009a16:	462f      	mov	r7, r5
 8009a18:	e7b8      	b.n	800998c <_svfiprintf_r+0x4c>
 8009a1a:	4a40      	ldr	r2, [pc, #256]	; (8009b1c <_svfiprintf_r+0x1dc>)
 8009a1c:	1a80      	subs	r0, r0, r2
 8009a1e:	fa0b f000 	lsl.w	r0, fp, r0
 8009a22:	4318      	orrs	r0, r3
 8009a24:	9004      	str	r0, [sp, #16]
 8009a26:	463d      	mov	r5, r7
 8009a28:	e7d3      	b.n	80099d2 <_svfiprintf_r+0x92>
 8009a2a:	9a03      	ldr	r2, [sp, #12]
 8009a2c:	1d11      	adds	r1, r2, #4
 8009a2e:	6812      	ldr	r2, [r2, #0]
 8009a30:	9103      	str	r1, [sp, #12]
 8009a32:	2a00      	cmp	r2, #0
 8009a34:	db01      	blt.n	8009a3a <_svfiprintf_r+0xfa>
 8009a36:	9207      	str	r2, [sp, #28]
 8009a38:	e004      	b.n	8009a44 <_svfiprintf_r+0x104>
 8009a3a:	4252      	negs	r2, r2
 8009a3c:	f043 0302 	orr.w	r3, r3, #2
 8009a40:	9207      	str	r2, [sp, #28]
 8009a42:	9304      	str	r3, [sp, #16]
 8009a44:	783b      	ldrb	r3, [r7, #0]
 8009a46:	2b2e      	cmp	r3, #46	; 0x2e
 8009a48:	d10c      	bne.n	8009a64 <_svfiprintf_r+0x124>
 8009a4a:	787b      	ldrb	r3, [r7, #1]
 8009a4c:	2b2a      	cmp	r3, #42	; 0x2a
 8009a4e:	d133      	bne.n	8009ab8 <_svfiprintf_r+0x178>
 8009a50:	9b03      	ldr	r3, [sp, #12]
 8009a52:	1d1a      	adds	r2, r3, #4
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	9203      	str	r2, [sp, #12]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	bfb8      	it	lt
 8009a5c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009a60:	3702      	adds	r7, #2
 8009a62:	9305      	str	r3, [sp, #20]
 8009a64:	4d2e      	ldr	r5, [pc, #184]	; (8009b20 <_svfiprintf_r+0x1e0>)
 8009a66:	7839      	ldrb	r1, [r7, #0]
 8009a68:	2203      	movs	r2, #3
 8009a6a:	4628      	mov	r0, r5
 8009a6c:	f7f6 fbc8 	bl	8000200 <memchr>
 8009a70:	b138      	cbz	r0, 8009a82 <_svfiprintf_r+0x142>
 8009a72:	2340      	movs	r3, #64	; 0x40
 8009a74:	1b40      	subs	r0, r0, r5
 8009a76:	fa03 f000 	lsl.w	r0, r3, r0
 8009a7a:	9b04      	ldr	r3, [sp, #16]
 8009a7c:	4303      	orrs	r3, r0
 8009a7e:	3701      	adds	r7, #1
 8009a80:	9304      	str	r3, [sp, #16]
 8009a82:	7839      	ldrb	r1, [r7, #0]
 8009a84:	4827      	ldr	r0, [pc, #156]	; (8009b24 <_svfiprintf_r+0x1e4>)
 8009a86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a8a:	2206      	movs	r2, #6
 8009a8c:	1c7e      	adds	r6, r7, #1
 8009a8e:	f7f6 fbb7 	bl	8000200 <memchr>
 8009a92:	2800      	cmp	r0, #0
 8009a94:	d038      	beq.n	8009b08 <_svfiprintf_r+0x1c8>
 8009a96:	4b24      	ldr	r3, [pc, #144]	; (8009b28 <_svfiprintf_r+0x1e8>)
 8009a98:	bb13      	cbnz	r3, 8009ae0 <_svfiprintf_r+0x1a0>
 8009a9a:	9b03      	ldr	r3, [sp, #12]
 8009a9c:	3307      	adds	r3, #7
 8009a9e:	f023 0307 	bic.w	r3, r3, #7
 8009aa2:	3308      	adds	r3, #8
 8009aa4:	9303      	str	r3, [sp, #12]
 8009aa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009aa8:	444b      	add	r3, r9
 8009aaa:	9309      	str	r3, [sp, #36]	; 0x24
 8009aac:	e76d      	b.n	800998a <_svfiprintf_r+0x4a>
 8009aae:	fb05 3202 	mla	r2, r5, r2, r3
 8009ab2:	2001      	movs	r0, #1
 8009ab4:	460f      	mov	r7, r1
 8009ab6:	e7a6      	b.n	8009a06 <_svfiprintf_r+0xc6>
 8009ab8:	2300      	movs	r3, #0
 8009aba:	3701      	adds	r7, #1
 8009abc:	9305      	str	r3, [sp, #20]
 8009abe:	4619      	mov	r1, r3
 8009ac0:	250a      	movs	r5, #10
 8009ac2:	4638      	mov	r0, r7
 8009ac4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ac8:	3a30      	subs	r2, #48	; 0x30
 8009aca:	2a09      	cmp	r2, #9
 8009acc:	d903      	bls.n	8009ad6 <_svfiprintf_r+0x196>
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d0c8      	beq.n	8009a64 <_svfiprintf_r+0x124>
 8009ad2:	9105      	str	r1, [sp, #20]
 8009ad4:	e7c6      	b.n	8009a64 <_svfiprintf_r+0x124>
 8009ad6:	fb05 2101 	mla	r1, r5, r1, r2
 8009ada:	2301      	movs	r3, #1
 8009adc:	4607      	mov	r7, r0
 8009ade:	e7f0      	b.n	8009ac2 <_svfiprintf_r+0x182>
 8009ae0:	ab03      	add	r3, sp, #12
 8009ae2:	9300      	str	r3, [sp, #0]
 8009ae4:	4622      	mov	r2, r4
 8009ae6:	4b11      	ldr	r3, [pc, #68]	; (8009b2c <_svfiprintf_r+0x1ec>)
 8009ae8:	a904      	add	r1, sp, #16
 8009aea:	4640      	mov	r0, r8
 8009aec:	f7fe f98a 	bl	8007e04 <_printf_float>
 8009af0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009af4:	4681      	mov	r9, r0
 8009af6:	d1d6      	bne.n	8009aa6 <_svfiprintf_r+0x166>
 8009af8:	89a3      	ldrh	r3, [r4, #12]
 8009afa:	065b      	lsls	r3, r3, #25
 8009afc:	f53f af35 	bmi.w	800996a <_svfiprintf_r+0x2a>
 8009b00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b02:	b01d      	add	sp, #116	; 0x74
 8009b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b08:	ab03      	add	r3, sp, #12
 8009b0a:	9300      	str	r3, [sp, #0]
 8009b0c:	4622      	mov	r2, r4
 8009b0e:	4b07      	ldr	r3, [pc, #28]	; (8009b2c <_svfiprintf_r+0x1ec>)
 8009b10:	a904      	add	r1, sp, #16
 8009b12:	4640      	mov	r0, r8
 8009b14:	f7fe fc2c 	bl	8008370 <_printf_i>
 8009b18:	e7ea      	b.n	8009af0 <_svfiprintf_r+0x1b0>
 8009b1a:	bf00      	nop
 8009b1c:	0800afac 	.word	0x0800afac
 8009b20:	0800afb2 	.word	0x0800afb2
 8009b24:	0800afb6 	.word	0x0800afb6
 8009b28:	08007e05 	.word	0x08007e05
 8009b2c:	0800988d 	.word	0x0800988d

08009b30 <__ascii_mbtowc>:
 8009b30:	b082      	sub	sp, #8
 8009b32:	b901      	cbnz	r1, 8009b36 <__ascii_mbtowc+0x6>
 8009b34:	a901      	add	r1, sp, #4
 8009b36:	b142      	cbz	r2, 8009b4a <__ascii_mbtowc+0x1a>
 8009b38:	b14b      	cbz	r3, 8009b4e <__ascii_mbtowc+0x1e>
 8009b3a:	7813      	ldrb	r3, [r2, #0]
 8009b3c:	600b      	str	r3, [r1, #0]
 8009b3e:	7812      	ldrb	r2, [r2, #0]
 8009b40:	1c10      	adds	r0, r2, #0
 8009b42:	bf18      	it	ne
 8009b44:	2001      	movne	r0, #1
 8009b46:	b002      	add	sp, #8
 8009b48:	4770      	bx	lr
 8009b4a:	4610      	mov	r0, r2
 8009b4c:	e7fb      	b.n	8009b46 <__ascii_mbtowc+0x16>
 8009b4e:	f06f 0001 	mvn.w	r0, #1
 8009b52:	e7f8      	b.n	8009b46 <__ascii_mbtowc+0x16>

08009b54 <memmove>:
 8009b54:	4288      	cmp	r0, r1
 8009b56:	b510      	push	{r4, lr}
 8009b58:	eb01 0302 	add.w	r3, r1, r2
 8009b5c:	d807      	bhi.n	8009b6e <memmove+0x1a>
 8009b5e:	1e42      	subs	r2, r0, #1
 8009b60:	4299      	cmp	r1, r3
 8009b62:	d00a      	beq.n	8009b7a <memmove+0x26>
 8009b64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b68:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009b6c:	e7f8      	b.n	8009b60 <memmove+0xc>
 8009b6e:	4283      	cmp	r3, r0
 8009b70:	d9f5      	bls.n	8009b5e <memmove+0xa>
 8009b72:	1881      	adds	r1, r0, r2
 8009b74:	1ad2      	subs	r2, r2, r3
 8009b76:	42d3      	cmn	r3, r2
 8009b78:	d100      	bne.n	8009b7c <memmove+0x28>
 8009b7a:	bd10      	pop	{r4, pc}
 8009b7c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b80:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009b84:	e7f7      	b.n	8009b76 <memmove+0x22>

08009b86 <_realloc_r>:
 8009b86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b88:	4607      	mov	r7, r0
 8009b8a:	4614      	mov	r4, r2
 8009b8c:	460e      	mov	r6, r1
 8009b8e:	b921      	cbnz	r1, 8009b9a <_realloc_r+0x14>
 8009b90:	4611      	mov	r1, r2
 8009b92:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009b96:	f7fe b847 	b.w	8007c28 <_malloc_r>
 8009b9a:	b922      	cbnz	r2, 8009ba6 <_realloc_r+0x20>
 8009b9c:	f7fd fff6 	bl	8007b8c <_free_r>
 8009ba0:	4625      	mov	r5, r4
 8009ba2:	4628      	mov	r0, r5
 8009ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ba6:	f000 f821 	bl	8009bec <_malloc_usable_size_r>
 8009baa:	42a0      	cmp	r0, r4
 8009bac:	d20f      	bcs.n	8009bce <_realloc_r+0x48>
 8009bae:	4621      	mov	r1, r4
 8009bb0:	4638      	mov	r0, r7
 8009bb2:	f7fe f839 	bl	8007c28 <_malloc_r>
 8009bb6:	4605      	mov	r5, r0
 8009bb8:	2800      	cmp	r0, #0
 8009bba:	d0f2      	beq.n	8009ba2 <_realloc_r+0x1c>
 8009bbc:	4631      	mov	r1, r6
 8009bbe:	4622      	mov	r2, r4
 8009bc0:	f7fd ffd0 	bl	8007b64 <memcpy>
 8009bc4:	4631      	mov	r1, r6
 8009bc6:	4638      	mov	r0, r7
 8009bc8:	f7fd ffe0 	bl	8007b8c <_free_r>
 8009bcc:	e7e9      	b.n	8009ba2 <_realloc_r+0x1c>
 8009bce:	4635      	mov	r5, r6
 8009bd0:	e7e7      	b.n	8009ba2 <_realloc_r+0x1c>

08009bd2 <__ascii_wctomb>:
 8009bd2:	b149      	cbz	r1, 8009be8 <__ascii_wctomb+0x16>
 8009bd4:	2aff      	cmp	r2, #255	; 0xff
 8009bd6:	bf85      	ittet	hi
 8009bd8:	238a      	movhi	r3, #138	; 0x8a
 8009bda:	6003      	strhi	r3, [r0, #0]
 8009bdc:	700a      	strbls	r2, [r1, #0]
 8009bde:	f04f 30ff 	movhi.w	r0, #4294967295
 8009be2:	bf98      	it	ls
 8009be4:	2001      	movls	r0, #1
 8009be6:	4770      	bx	lr
 8009be8:	4608      	mov	r0, r1
 8009bea:	4770      	bx	lr

08009bec <_malloc_usable_size_r>:
 8009bec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bf0:	1f18      	subs	r0, r3, #4
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	bfbc      	itt	lt
 8009bf6:	580b      	ldrlt	r3, [r1, r0]
 8009bf8:	18c0      	addlt	r0, r0, r3
 8009bfa:	4770      	bx	lr

08009bfc <pow>:
 8009bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c00:	ed2d 8b04 	vpush	{d8-d9}
 8009c04:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8009ed8 <pow+0x2dc>
 8009c08:	b08d      	sub	sp, #52	; 0x34
 8009c0a:	ec57 6b10 	vmov	r6, r7, d0
 8009c0e:	ec55 4b11 	vmov	r4, r5, d1
 8009c12:	f000 f965 	bl	8009ee0 <__ieee754_pow>
 8009c16:	f999 3000 	ldrsb.w	r3, [r9]
 8009c1a:	9300      	str	r3, [sp, #0]
 8009c1c:	3301      	adds	r3, #1
 8009c1e:	eeb0 8a40 	vmov.f32	s16, s0
 8009c22:	eef0 8a60 	vmov.f32	s17, s1
 8009c26:	46c8      	mov	r8, r9
 8009c28:	d05f      	beq.n	8009cea <pow+0xee>
 8009c2a:	4622      	mov	r2, r4
 8009c2c:	462b      	mov	r3, r5
 8009c2e:	4620      	mov	r0, r4
 8009c30:	4629      	mov	r1, r5
 8009c32:	f7f6 ff8b 	bl	8000b4c <__aeabi_dcmpun>
 8009c36:	4683      	mov	fp, r0
 8009c38:	2800      	cmp	r0, #0
 8009c3a:	d156      	bne.n	8009cea <pow+0xee>
 8009c3c:	4632      	mov	r2, r6
 8009c3e:	463b      	mov	r3, r7
 8009c40:	4630      	mov	r0, r6
 8009c42:	4639      	mov	r1, r7
 8009c44:	f7f6 ff82 	bl	8000b4c <__aeabi_dcmpun>
 8009c48:	9001      	str	r0, [sp, #4]
 8009c4a:	b1e8      	cbz	r0, 8009c88 <pow+0x8c>
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	2300      	movs	r3, #0
 8009c50:	4620      	mov	r0, r4
 8009c52:	4629      	mov	r1, r5
 8009c54:	f7f6 ff48 	bl	8000ae8 <__aeabi_dcmpeq>
 8009c58:	2800      	cmp	r0, #0
 8009c5a:	d046      	beq.n	8009cea <pow+0xee>
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	9302      	str	r3, [sp, #8]
 8009c60:	4b96      	ldr	r3, [pc, #600]	; (8009ebc <pow+0x2c0>)
 8009c62:	9303      	str	r3, [sp, #12]
 8009c64:	4b96      	ldr	r3, [pc, #600]	; (8009ec0 <pow+0x2c4>)
 8009c66:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009c70:	9b00      	ldr	r3, [sp, #0]
 8009c72:	2b02      	cmp	r3, #2
 8009c74:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009c78:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009c7c:	d033      	beq.n	8009ce6 <pow+0xea>
 8009c7e:	a802      	add	r0, sp, #8
 8009c80:	f000 fefd 	bl	800aa7e <matherr>
 8009c84:	bb48      	cbnz	r0, 8009cda <pow+0xde>
 8009c86:	e05d      	b.n	8009d44 <pow+0x148>
 8009c88:	f04f 0a00 	mov.w	sl, #0
 8009c8c:	f04f 0b00 	mov.w	fp, #0
 8009c90:	4652      	mov	r2, sl
 8009c92:	465b      	mov	r3, fp
 8009c94:	4630      	mov	r0, r6
 8009c96:	4639      	mov	r1, r7
 8009c98:	f7f6 ff26 	bl	8000ae8 <__aeabi_dcmpeq>
 8009c9c:	ec4b ab19 	vmov	d9, sl, fp
 8009ca0:	2800      	cmp	r0, #0
 8009ca2:	d054      	beq.n	8009d4e <pow+0x152>
 8009ca4:	4652      	mov	r2, sl
 8009ca6:	465b      	mov	r3, fp
 8009ca8:	4620      	mov	r0, r4
 8009caa:	4629      	mov	r1, r5
 8009cac:	f7f6 ff1c 	bl	8000ae8 <__aeabi_dcmpeq>
 8009cb0:	4680      	mov	r8, r0
 8009cb2:	b318      	cbz	r0, 8009cfc <pow+0x100>
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	9302      	str	r3, [sp, #8]
 8009cb8:	4b80      	ldr	r3, [pc, #512]	; (8009ebc <pow+0x2c0>)
 8009cba:	9303      	str	r3, [sp, #12]
 8009cbc:	9b01      	ldr	r3, [sp, #4]
 8009cbe:	930a      	str	r3, [sp, #40]	; 0x28
 8009cc0:	9b00      	ldr	r3, [sp, #0]
 8009cc2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009cc6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009cca:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d0d5      	beq.n	8009c7e <pow+0x82>
 8009cd2:	4b7b      	ldr	r3, [pc, #492]	; (8009ec0 <pow+0x2c4>)
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009cda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cdc:	b11b      	cbz	r3, 8009ce6 <pow+0xea>
 8009cde:	f7fd ff0f 	bl	8007b00 <__errno>
 8009ce2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ce4:	6003      	str	r3, [r0, #0]
 8009ce6:	ed9d 8b08 	vldr	d8, [sp, #32]
 8009cea:	eeb0 0a48 	vmov.f32	s0, s16
 8009cee:	eef0 0a68 	vmov.f32	s1, s17
 8009cf2:	b00d      	add	sp, #52	; 0x34
 8009cf4:	ecbd 8b04 	vpop	{d8-d9}
 8009cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cfc:	ec45 4b10 	vmov	d0, r4, r5
 8009d00:	f000 feb5 	bl	800aa6e <finite>
 8009d04:	2800      	cmp	r0, #0
 8009d06:	d0f0      	beq.n	8009cea <pow+0xee>
 8009d08:	4652      	mov	r2, sl
 8009d0a:	465b      	mov	r3, fp
 8009d0c:	4620      	mov	r0, r4
 8009d0e:	4629      	mov	r1, r5
 8009d10:	f7f6 fef4 	bl	8000afc <__aeabi_dcmplt>
 8009d14:	2800      	cmp	r0, #0
 8009d16:	d0e8      	beq.n	8009cea <pow+0xee>
 8009d18:	2301      	movs	r3, #1
 8009d1a:	9302      	str	r3, [sp, #8]
 8009d1c:	4b67      	ldr	r3, [pc, #412]	; (8009ebc <pow+0x2c0>)
 8009d1e:	9303      	str	r3, [sp, #12]
 8009d20:	f999 3000 	ldrsb.w	r3, [r9]
 8009d24:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8009d28:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009d2c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009d30:	b913      	cbnz	r3, 8009d38 <pow+0x13c>
 8009d32:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8009d36:	e7a2      	b.n	8009c7e <pow+0x82>
 8009d38:	4962      	ldr	r1, [pc, #392]	; (8009ec4 <pow+0x2c8>)
 8009d3a:	2000      	movs	r0, #0
 8009d3c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009d40:	2b02      	cmp	r3, #2
 8009d42:	d19c      	bne.n	8009c7e <pow+0x82>
 8009d44:	f7fd fedc 	bl	8007b00 <__errno>
 8009d48:	2321      	movs	r3, #33	; 0x21
 8009d4a:	6003      	str	r3, [r0, #0]
 8009d4c:	e7c5      	b.n	8009cda <pow+0xde>
 8009d4e:	eeb0 0a48 	vmov.f32	s0, s16
 8009d52:	eef0 0a68 	vmov.f32	s1, s17
 8009d56:	f000 fe8a 	bl	800aa6e <finite>
 8009d5a:	9000      	str	r0, [sp, #0]
 8009d5c:	2800      	cmp	r0, #0
 8009d5e:	f040 8081 	bne.w	8009e64 <pow+0x268>
 8009d62:	ec47 6b10 	vmov	d0, r6, r7
 8009d66:	f000 fe82 	bl	800aa6e <finite>
 8009d6a:	2800      	cmp	r0, #0
 8009d6c:	d07a      	beq.n	8009e64 <pow+0x268>
 8009d6e:	ec45 4b10 	vmov	d0, r4, r5
 8009d72:	f000 fe7c 	bl	800aa6e <finite>
 8009d76:	2800      	cmp	r0, #0
 8009d78:	d074      	beq.n	8009e64 <pow+0x268>
 8009d7a:	ec53 2b18 	vmov	r2, r3, d8
 8009d7e:	ee18 0a10 	vmov	r0, s16
 8009d82:	4619      	mov	r1, r3
 8009d84:	f7f6 fee2 	bl	8000b4c <__aeabi_dcmpun>
 8009d88:	f999 9000 	ldrsb.w	r9, [r9]
 8009d8c:	4b4b      	ldr	r3, [pc, #300]	; (8009ebc <pow+0x2c0>)
 8009d8e:	b1b0      	cbz	r0, 8009dbe <pow+0x1c2>
 8009d90:	2201      	movs	r2, #1
 8009d92:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009d96:	9b00      	ldr	r3, [sp, #0]
 8009d98:	930a      	str	r3, [sp, #40]	; 0x28
 8009d9a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009d9e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009da2:	f1b9 0f00 	cmp.w	r9, #0
 8009da6:	d0c4      	beq.n	8009d32 <pow+0x136>
 8009da8:	4652      	mov	r2, sl
 8009daa:	465b      	mov	r3, fp
 8009dac:	4650      	mov	r0, sl
 8009dae:	4659      	mov	r1, fp
 8009db0:	f7f6 fd5c 	bl	800086c <__aeabi_ddiv>
 8009db4:	f1b9 0f02 	cmp.w	r9, #2
 8009db8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009dbc:	e7c1      	b.n	8009d42 <pow+0x146>
 8009dbe:	2203      	movs	r2, #3
 8009dc0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009dc4:	900a      	str	r0, [sp, #40]	; 0x28
 8009dc6:	4629      	mov	r1, r5
 8009dc8:	4620      	mov	r0, r4
 8009dca:	2200      	movs	r2, #0
 8009dcc:	4b3e      	ldr	r3, [pc, #248]	; (8009ec8 <pow+0x2cc>)
 8009dce:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009dd2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009dd6:	f7f6 fc1f 	bl	8000618 <__aeabi_dmul>
 8009dda:	4604      	mov	r4, r0
 8009ddc:	460d      	mov	r5, r1
 8009dde:	f1b9 0f00 	cmp.w	r9, #0
 8009de2:	d124      	bne.n	8009e2e <pow+0x232>
 8009de4:	4b39      	ldr	r3, [pc, #228]	; (8009ecc <pow+0x2d0>)
 8009de6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009dea:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009dee:	4630      	mov	r0, r6
 8009df0:	4652      	mov	r2, sl
 8009df2:	465b      	mov	r3, fp
 8009df4:	4639      	mov	r1, r7
 8009df6:	f7f6 fe81 	bl	8000afc <__aeabi_dcmplt>
 8009dfa:	2800      	cmp	r0, #0
 8009dfc:	d056      	beq.n	8009eac <pow+0x2b0>
 8009dfe:	ec45 4b10 	vmov	d0, r4, r5
 8009e02:	f000 fe49 	bl	800aa98 <rint>
 8009e06:	4622      	mov	r2, r4
 8009e08:	462b      	mov	r3, r5
 8009e0a:	ec51 0b10 	vmov	r0, r1, d0
 8009e0e:	f7f6 fe6b 	bl	8000ae8 <__aeabi_dcmpeq>
 8009e12:	b920      	cbnz	r0, 8009e1e <pow+0x222>
 8009e14:	4b2e      	ldr	r3, [pc, #184]	; (8009ed0 <pow+0x2d4>)
 8009e16:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009e1a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009e1e:	f998 3000 	ldrsb.w	r3, [r8]
 8009e22:	2b02      	cmp	r3, #2
 8009e24:	d142      	bne.n	8009eac <pow+0x2b0>
 8009e26:	f7fd fe6b 	bl	8007b00 <__errno>
 8009e2a:	2322      	movs	r3, #34	; 0x22
 8009e2c:	e78d      	b.n	8009d4a <pow+0x14e>
 8009e2e:	4b29      	ldr	r3, [pc, #164]	; (8009ed4 <pow+0x2d8>)
 8009e30:	2200      	movs	r2, #0
 8009e32:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009e36:	4630      	mov	r0, r6
 8009e38:	4652      	mov	r2, sl
 8009e3a:	465b      	mov	r3, fp
 8009e3c:	4639      	mov	r1, r7
 8009e3e:	f7f6 fe5d 	bl	8000afc <__aeabi_dcmplt>
 8009e42:	2800      	cmp	r0, #0
 8009e44:	d0eb      	beq.n	8009e1e <pow+0x222>
 8009e46:	ec45 4b10 	vmov	d0, r4, r5
 8009e4a:	f000 fe25 	bl	800aa98 <rint>
 8009e4e:	4622      	mov	r2, r4
 8009e50:	462b      	mov	r3, r5
 8009e52:	ec51 0b10 	vmov	r0, r1, d0
 8009e56:	f7f6 fe47 	bl	8000ae8 <__aeabi_dcmpeq>
 8009e5a:	2800      	cmp	r0, #0
 8009e5c:	d1df      	bne.n	8009e1e <pow+0x222>
 8009e5e:	2200      	movs	r2, #0
 8009e60:	4b18      	ldr	r3, [pc, #96]	; (8009ec4 <pow+0x2c8>)
 8009e62:	e7da      	b.n	8009e1a <pow+0x21e>
 8009e64:	2200      	movs	r2, #0
 8009e66:	2300      	movs	r3, #0
 8009e68:	ec51 0b18 	vmov	r0, r1, d8
 8009e6c:	f7f6 fe3c 	bl	8000ae8 <__aeabi_dcmpeq>
 8009e70:	2800      	cmp	r0, #0
 8009e72:	f43f af3a 	beq.w	8009cea <pow+0xee>
 8009e76:	ec47 6b10 	vmov	d0, r6, r7
 8009e7a:	f000 fdf8 	bl	800aa6e <finite>
 8009e7e:	2800      	cmp	r0, #0
 8009e80:	f43f af33 	beq.w	8009cea <pow+0xee>
 8009e84:	ec45 4b10 	vmov	d0, r4, r5
 8009e88:	f000 fdf1 	bl	800aa6e <finite>
 8009e8c:	2800      	cmp	r0, #0
 8009e8e:	f43f af2c 	beq.w	8009cea <pow+0xee>
 8009e92:	2304      	movs	r3, #4
 8009e94:	9302      	str	r3, [sp, #8]
 8009e96:	4b09      	ldr	r3, [pc, #36]	; (8009ebc <pow+0x2c0>)
 8009e98:	9303      	str	r3, [sp, #12]
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	930a      	str	r3, [sp, #40]	; 0x28
 8009e9e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009ea2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009ea6:	ed8d 9b08 	vstr	d9, [sp, #32]
 8009eaa:	e7b8      	b.n	8009e1e <pow+0x222>
 8009eac:	a802      	add	r0, sp, #8
 8009eae:	f000 fde6 	bl	800aa7e <matherr>
 8009eb2:	2800      	cmp	r0, #0
 8009eb4:	f47f af11 	bne.w	8009cda <pow+0xde>
 8009eb8:	e7b5      	b.n	8009e26 <pow+0x22a>
 8009eba:	bf00      	nop
 8009ebc:	0800b0c8 	.word	0x0800b0c8
 8009ec0:	3ff00000 	.word	0x3ff00000
 8009ec4:	fff00000 	.word	0xfff00000
 8009ec8:	3fe00000 	.word	0x3fe00000
 8009ecc:	47efffff 	.word	0x47efffff
 8009ed0:	c7efffff 	.word	0xc7efffff
 8009ed4:	7ff00000 	.word	0x7ff00000
 8009ed8:	200001e0 	.word	0x200001e0
 8009edc:	00000000 	.word	0x00000000

08009ee0 <__ieee754_pow>:
 8009ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ee4:	b091      	sub	sp, #68	; 0x44
 8009ee6:	ed8d 1b00 	vstr	d1, [sp]
 8009eea:	e9dd 2900 	ldrd	r2, r9, [sp]
 8009eee:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8009ef2:	ea58 0302 	orrs.w	r3, r8, r2
 8009ef6:	ec57 6b10 	vmov	r6, r7, d0
 8009efa:	f000 84be 	beq.w	800a87a <__ieee754_pow+0x99a>
 8009efe:	4b7a      	ldr	r3, [pc, #488]	; (800a0e8 <__ieee754_pow+0x208>)
 8009f00:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8009f04:	429c      	cmp	r4, r3
 8009f06:	463d      	mov	r5, r7
 8009f08:	ee10 aa10 	vmov	sl, s0
 8009f0c:	dc09      	bgt.n	8009f22 <__ieee754_pow+0x42>
 8009f0e:	d103      	bne.n	8009f18 <__ieee754_pow+0x38>
 8009f10:	b93e      	cbnz	r6, 8009f22 <__ieee754_pow+0x42>
 8009f12:	45a0      	cmp	r8, r4
 8009f14:	dc0d      	bgt.n	8009f32 <__ieee754_pow+0x52>
 8009f16:	e001      	b.n	8009f1c <__ieee754_pow+0x3c>
 8009f18:	4598      	cmp	r8, r3
 8009f1a:	dc02      	bgt.n	8009f22 <__ieee754_pow+0x42>
 8009f1c:	4598      	cmp	r8, r3
 8009f1e:	d10e      	bne.n	8009f3e <__ieee754_pow+0x5e>
 8009f20:	b16a      	cbz	r2, 8009f3e <__ieee754_pow+0x5e>
 8009f22:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009f26:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009f2a:	ea54 030a 	orrs.w	r3, r4, sl
 8009f2e:	f000 84a4 	beq.w	800a87a <__ieee754_pow+0x99a>
 8009f32:	486e      	ldr	r0, [pc, #440]	; (800a0ec <__ieee754_pow+0x20c>)
 8009f34:	b011      	add	sp, #68	; 0x44
 8009f36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f3a:	f000 bda5 	b.w	800aa88 <nan>
 8009f3e:	2d00      	cmp	r5, #0
 8009f40:	da53      	bge.n	8009fea <__ieee754_pow+0x10a>
 8009f42:	4b6b      	ldr	r3, [pc, #428]	; (800a0f0 <__ieee754_pow+0x210>)
 8009f44:	4598      	cmp	r8, r3
 8009f46:	dc4d      	bgt.n	8009fe4 <__ieee754_pow+0x104>
 8009f48:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009f4c:	4598      	cmp	r8, r3
 8009f4e:	dd4c      	ble.n	8009fea <__ieee754_pow+0x10a>
 8009f50:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009f54:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009f58:	2b14      	cmp	r3, #20
 8009f5a:	dd26      	ble.n	8009faa <__ieee754_pow+0xca>
 8009f5c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009f60:	fa22 f103 	lsr.w	r1, r2, r3
 8009f64:	fa01 f303 	lsl.w	r3, r1, r3
 8009f68:	4293      	cmp	r3, r2
 8009f6a:	d13e      	bne.n	8009fea <__ieee754_pow+0x10a>
 8009f6c:	f001 0101 	and.w	r1, r1, #1
 8009f70:	f1c1 0b02 	rsb	fp, r1, #2
 8009f74:	2a00      	cmp	r2, #0
 8009f76:	d15b      	bne.n	800a030 <__ieee754_pow+0x150>
 8009f78:	4b5b      	ldr	r3, [pc, #364]	; (800a0e8 <__ieee754_pow+0x208>)
 8009f7a:	4598      	cmp	r8, r3
 8009f7c:	d124      	bne.n	8009fc8 <__ieee754_pow+0xe8>
 8009f7e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009f82:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009f86:	ea53 030a 	orrs.w	r3, r3, sl
 8009f8a:	f000 8476 	beq.w	800a87a <__ieee754_pow+0x99a>
 8009f8e:	4b59      	ldr	r3, [pc, #356]	; (800a0f4 <__ieee754_pow+0x214>)
 8009f90:	429c      	cmp	r4, r3
 8009f92:	dd2d      	ble.n	8009ff0 <__ieee754_pow+0x110>
 8009f94:	f1b9 0f00 	cmp.w	r9, #0
 8009f98:	f280 8473 	bge.w	800a882 <__ieee754_pow+0x9a2>
 8009f9c:	2000      	movs	r0, #0
 8009f9e:	2100      	movs	r1, #0
 8009fa0:	ec41 0b10 	vmov	d0, r0, r1
 8009fa4:	b011      	add	sp, #68	; 0x44
 8009fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009faa:	2a00      	cmp	r2, #0
 8009fac:	d13e      	bne.n	800a02c <__ieee754_pow+0x14c>
 8009fae:	f1c3 0314 	rsb	r3, r3, #20
 8009fb2:	fa48 f103 	asr.w	r1, r8, r3
 8009fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8009fba:	4543      	cmp	r3, r8
 8009fbc:	f040 8469 	bne.w	800a892 <__ieee754_pow+0x9b2>
 8009fc0:	f001 0101 	and.w	r1, r1, #1
 8009fc4:	f1c1 0b02 	rsb	fp, r1, #2
 8009fc8:	4b4b      	ldr	r3, [pc, #300]	; (800a0f8 <__ieee754_pow+0x218>)
 8009fca:	4598      	cmp	r8, r3
 8009fcc:	d118      	bne.n	800a000 <__ieee754_pow+0x120>
 8009fce:	f1b9 0f00 	cmp.w	r9, #0
 8009fd2:	f280 845a 	bge.w	800a88a <__ieee754_pow+0x9aa>
 8009fd6:	4948      	ldr	r1, [pc, #288]	; (800a0f8 <__ieee754_pow+0x218>)
 8009fd8:	4632      	mov	r2, r6
 8009fda:	463b      	mov	r3, r7
 8009fdc:	2000      	movs	r0, #0
 8009fde:	f7f6 fc45 	bl	800086c <__aeabi_ddiv>
 8009fe2:	e7dd      	b.n	8009fa0 <__ieee754_pow+0xc0>
 8009fe4:	f04f 0b02 	mov.w	fp, #2
 8009fe8:	e7c4      	b.n	8009f74 <__ieee754_pow+0x94>
 8009fea:	f04f 0b00 	mov.w	fp, #0
 8009fee:	e7c1      	b.n	8009f74 <__ieee754_pow+0x94>
 8009ff0:	f1b9 0f00 	cmp.w	r9, #0
 8009ff4:	dad2      	bge.n	8009f9c <__ieee754_pow+0xbc>
 8009ff6:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009ffa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009ffe:	e7cf      	b.n	8009fa0 <__ieee754_pow+0xc0>
 800a000:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800a004:	d106      	bne.n	800a014 <__ieee754_pow+0x134>
 800a006:	4632      	mov	r2, r6
 800a008:	463b      	mov	r3, r7
 800a00a:	4610      	mov	r0, r2
 800a00c:	4619      	mov	r1, r3
 800a00e:	f7f6 fb03 	bl	8000618 <__aeabi_dmul>
 800a012:	e7c5      	b.n	8009fa0 <__ieee754_pow+0xc0>
 800a014:	4b39      	ldr	r3, [pc, #228]	; (800a0fc <__ieee754_pow+0x21c>)
 800a016:	4599      	cmp	r9, r3
 800a018:	d10a      	bne.n	800a030 <__ieee754_pow+0x150>
 800a01a:	2d00      	cmp	r5, #0
 800a01c:	db08      	blt.n	800a030 <__ieee754_pow+0x150>
 800a01e:	ec47 6b10 	vmov	d0, r6, r7
 800a022:	b011      	add	sp, #68	; 0x44
 800a024:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a028:	f000 bc68 	b.w	800a8fc <__ieee754_sqrt>
 800a02c:	f04f 0b00 	mov.w	fp, #0
 800a030:	ec47 6b10 	vmov	d0, r6, r7
 800a034:	f000 fd12 	bl	800aa5c <fabs>
 800a038:	ec51 0b10 	vmov	r0, r1, d0
 800a03c:	f1ba 0f00 	cmp.w	sl, #0
 800a040:	d127      	bne.n	800a092 <__ieee754_pow+0x1b2>
 800a042:	b124      	cbz	r4, 800a04e <__ieee754_pow+0x16e>
 800a044:	4b2c      	ldr	r3, [pc, #176]	; (800a0f8 <__ieee754_pow+0x218>)
 800a046:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800a04a:	429a      	cmp	r2, r3
 800a04c:	d121      	bne.n	800a092 <__ieee754_pow+0x1b2>
 800a04e:	f1b9 0f00 	cmp.w	r9, #0
 800a052:	da05      	bge.n	800a060 <__ieee754_pow+0x180>
 800a054:	4602      	mov	r2, r0
 800a056:	460b      	mov	r3, r1
 800a058:	2000      	movs	r0, #0
 800a05a:	4927      	ldr	r1, [pc, #156]	; (800a0f8 <__ieee754_pow+0x218>)
 800a05c:	f7f6 fc06 	bl	800086c <__aeabi_ddiv>
 800a060:	2d00      	cmp	r5, #0
 800a062:	da9d      	bge.n	8009fa0 <__ieee754_pow+0xc0>
 800a064:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a068:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a06c:	ea54 030b 	orrs.w	r3, r4, fp
 800a070:	d108      	bne.n	800a084 <__ieee754_pow+0x1a4>
 800a072:	4602      	mov	r2, r0
 800a074:	460b      	mov	r3, r1
 800a076:	4610      	mov	r0, r2
 800a078:	4619      	mov	r1, r3
 800a07a:	f7f6 f915 	bl	80002a8 <__aeabi_dsub>
 800a07e:	4602      	mov	r2, r0
 800a080:	460b      	mov	r3, r1
 800a082:	e7ac      	b.n	8009fde <__ieee754_pow+0xfe>
 800a084:	f1bb 0f01 	cmp.w	fp, #1
 800a088:	d18a      	bne.n	8009fa0 <__ieee754_pow+0xc0>
 800a08a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a08e:	4619      	mov	r1, r3
 800a090:	e786      	b.n	8009fa0 <__ieee754_pow+0xc0>
 800a092:	0fed      	lsrs	r5, r5, #31
 800a094:	1e6b      	subs	r3, r5, #1
 800a096:	930d      	str	r3, [sp, #52]	; 0x34
 800a098:	ea5b 0303 	orrs.w	r3, fp, r3
 800a09c:	d102      	bne.n	800a0a4 <__ieee754_pow+0x1c4>
 800a09e:	4632      	mov	r2, r6
 800a0a0:	463b      	mov	r3, r7
 800a0a2:	e7e8      	b.n	800a076 <__ieee754_pow+0x196>
 800a0a4:	4b16      	ldr	r3, [pc, #88]	; (800a100 <__ieee754_pow+0x220>)
 800a0a6:	4598      	cmp	r8, r3
 800a0a8:	f340 80fe 	ble.w	800a2a8 <__ieee754_pow+0x3c8>
 800a0ac:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a0b0:	4598      	cmp	r8, r3
 800a0b2:	dd0a      	ble.n	800a0ca <__ieee754_pow+0x1ea>
 800a0b4:	4b0f      	ldr	r3, [pc, #60]	; (800a0f4 <__ieee754_pow+0x214>)
 800a0b6:	429c      	cmp	r4, r3
 800a0b8:	dc0d      	bgt.n	800a0d6 <__ieee754_pow+0x1f6>
 800a0ba:	f1b9 0f00 	cmp.w	r9, #0
 800a0be:	f6bf af6d 	bge.w	8009f9c <__ieee754_pow+0xbc>
 800a0c2:	a307      	add	r3, pc, #28	; (adr r3, 800a0e0 <__ieee754_pow+0x200>)
 800a0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c8:	e79f      	b.n	800a00a <__ieee754_pow+0x12a>
 800a0ca:	4b0e      	ldr	r3, [pc, #56]	; (800a104 <__ieee754_pow+0x224>)
 800a0cc:	429c      	cmp	r4, r3
 800a0ce:	ddf4      	ble.n	800a0ba <__ieee754_pow+0x1da>
 800a0d0:	4b09      	ldr	r3, [pc, #36]	; (800a0f8 <__ieee754_pow+0x218>)
 800a0d2:	429c      	cmp	r4, r3
 800a0d4:	dd18      	ble.n	800a108 <__ieee754_pow+0x228>
 800a0d6:	f1b9 0f00 	cmp.w	r9, #0
 800a0da:	dcf2      	bgt.n	800a0c2 <__ieee754_pow+0x1e2>
 800a0dc:	e75e      	b.n	8009f9c <__ieee754_pow+0xbc>
 800a0de:	bf00      	nop
 800a0e0:	8800759c 	.word	0x8800759c
 800a0e4:	7e37e43c 	.word	0x7e37e43c
 800a0e8:	7ff00000 	.word	0x7ff00000
 800a0ec:	0800afb1 	.word	0x0800afb1
 800a0f0:	433fffff 	.word	0x433fffff
 800a0f4:	3fefffff 	.word	0x3fefffff
 800a0f8:	3ff00000 	.word	0x3ff00000
 800a0fc:	3fe00000 	.word	0x3fe00000
 800a100:	41e00000 	.word	0x41e00000
 800a104:	3feffffe 	.word	0x3feffffe
 800a108:	2200      	movs	r2, #0
 800a10a:	4b63      	ldr	r3, [pc, #396]	; (800a298 <__ieee754_pow+0x3b8>)
 800a10c:	f7f6 f8cc 	bl	80002a8 <__aeabi_dsub>
 800a110:	a355      	add	r3, pc, #340	; (adr r3, 800a268 <__ieee754_pow+0x388>)
 800a112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a116:	4604      	mov	r4, r0
 800a118:	460d      	mov	r5, r1
 800a11a:	f7f6 fa7d 	bl	8000618 <__aeabi_dmul>
 800a11e:	a354      	add	r3, pc, #336	; (adr r3, 800a270 <__ieee754_pow+0x390>)
 800a120:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a124:	4606      	mov	r6, r0
 800a126:	460f      	mov	r7, r1
 800a128:	4620      	mov	r0, r4
 800a12a:	4629      	mov	r1, r5
 800a12c:	f7f6 fa74 	bl	8000618 <__aeabi_dmul>
 800a130:	2200      	movs	r2, #0
 800a132:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a136:	4b59      	ldr	r3, [pc, #356]	; (800a29c <__ieee754_pow+0x3bc>)
 800a138:	4620      	mov	r0, r4
 800a13a:	4629      	mov	r1, r5
 800a13c:	f7f6 fa6c 	bl	8000618 <__aeabi_dmul>
 800a140:	4602      	mov	r2, r0
 800a142:	460b      	mov	r3, r1
 800a144:	a14c      	add	r1, pc, #304	; (adr r1, 800a278 <__ieee754_pow+0x398>)
 800a146:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a14a:	f7f6 f8ad 	bl	80002a8 <__aeabi_dsub>
 800a14e:	4622      	mov	r2, r4
 800a150:	462b      	mov	r3, r5
 800a152:	f7f6 fa61 	bl	8000618 <__aeabi_dmul>
 800a156:	4602      	mov	r2, r0
 800a158:	460b      	mov	r3, r1
 800a15a:	2000      	movs	r0, #0
 800a15c:	4950      	ldr	r1, [pc, #320]	; (800a2a0 <__ieee754_pow+0x3c0>)
 800a15e:	f7f6 f8a3 	bl	80002a8 <__aeabi_dsub>
 800a162:	4622      	mov	r2, r4
 800a164:	462b      	mov	r3, r5
 800a166:	4680      	mov	r8, r0
 800a168:	4689      	mov	r9, r1
 800a16a:	4620      	mov	r0, r4
 800a16c:	4629      	mov	r1, r5
 800a16e:	f7f6 fa53 	bl	8000618 <__aeabi_dmul>
 800a172:	4602      	mov	r2, r0
 800a174:	460b      	mov	r3, r1
 800a176:	4640      	mov	r0, r8
 800a178:	4649      	mov	r1, r9
 800a17a:	f7f6 fa4d 	bl	8000618 <__aeabi_dmul>
 800a17e:	a340      	add	r3, pc, #256	; (adr r3, 800a280 <__ieee754_pow+0x3a0>)
 800a180:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a184:	f7f6 fa48 	bl	8000618 <__aeabi_dmul>
 800a188:	4602      	mov	r2, r0
 800a18a:	460b      	mov	r3, r1
 800a18c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a190:	f7f6 f88a 	bl	80002a8 <__aeabi_dsub>
 800a194:	4602      	mov	r2, r0
 800a196:	460b      	mov	r3, r1
 800a198:	4604      	mov	r4, r0
 800a19a:	460d      	mov	r5, r1
 800a19c:	4630      	mov	r0, r6
 800a19e:	4639      	mov	r1, r7
 800a1a0:	f7f6 f884 	bl	80002ac <__adddf3>
 800a1a4:	2000      	movs	r0, #0
 800a1a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a1aa:	4632      	mov	r2, r6
 800a1ac:	463b      	mov	r3, r7
 800a1ae:	f7f6 f87b 	bl	80002a8 <__aeabi_dsub>
 800a1b2:	4602      	mov	r2, r0
 800a1b4:	460b      	mov	r3, r1
 800a1b6:	4620      	mov	r0, r4
 800a1b8:	4629      	mov	r1, r5
 800a1ba:	f7f6 f875 	bl	80002a8 <__aeabi_dsub>
 800a1be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a1c0:	f10b 33ff 	add.w	r3, fp, #4294967295
 800a1c4:	4313      	orrs	r3, r2
 800a1c6:	4606      	mov	r6, r0
 800a1c8:	460f      	mov	r7, r1
 800a1ca:	f040 81eb 	bne.w	800a5a4 <__ieee754_pow+0x6c4>
 800a1ce:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800a288 <__ieee754_pow+0x3a8>
 800a1d2:	e9dd 4500 	ldrd	r4, r5, [sp]
 800a1d6:	2400      	movs	r4, #0
 800a1d8:	4622      	mov	r2, r4
 800a1da:	462b      	mov	r3, r5
 800a1dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a1e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a1e4:	f7f6 f860 	bl	80002a8 <__aeabi_dsub>
 800a1e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1ec:	f7f6 fa14 	bl	8000618 <__aeabi_dmul>
 800a1f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a1f4:	4680      	mov	r8, r0
 800a1f6:	4689      	mov	r9, r1
 800a1f8:	4630      	mov	r0, r6
 800a1fa:	4639      	mov	r1, r7
 800a1fc:	f7f6 fa0c 	bl	8000618 <__aeabi_dmul>
 800a200:	4602      	mov	r2, r0
 800a202:	460b      	mov	r3, r1
 800a204:	4640      	mov	r0, r8
 800a206:	4649      	mov	r1, r9
 800a208:	f7f6 f850 	bl	80002ac <__adddf3>
 800a20c:	4622      	mov	r2, r4
 800a20e:	462b      	mov	r3, r5
 800a210:	4680      	mov	r8, r0
 800a212:	4689      	mov	r9, r1
 800a214:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a218:	f7f6 f9fe 	bl	8000618 <__aeabi_dmul>
 800a21c:	460b      	mov	r3, r1
 800a21e:	4604      	mov	r4, r0
 800a220:	460d      	mov	r5, r1
 800a222:	4602      	mov	r2, r0
 800a224:	4649      	mov	r1, r9
 800a226:	4640      	mov	r0, r8
 800a228:	e9cd 4500 	strd	r4, r5, [sp]
 800a22c:	f7f6 f83e 	bl	80002ac <__adddf3>
 800a230:	4b1c      	ldr	r3, [pc, #112]	; (800a2a4 <__ieee754_pow+0x3c4>)
 800a232:	4299      	cmp	r1, r3
 800a234:	4606      	mov	r6, r0
 800a236:	460f      	mov	r7, r1
 800a238:	468b      	mov	fp, r1
 800a23a:	f340 82f7 	ble.w	800a82c <__ieee754_pow+0x94c>
 800a23e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a242:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a246:	4303      	orrs	r3, r0
 800a248:	f000 81ea 	beq.w	800a620 <__ieee754_pow+0x740>
 800a24c:	a310      	add	r3, pc, #64	; (adr r3, 800a290 <__ieee754_pow+0x3b0>)
 800a24e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a252:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a256:	f7f6 f9df 	bl	8000618 <__aeabi_dmul>
 800a25a:	a30d      	add	r3, pc, #52	; (adr r3, 800a290 <__ieee754_pow+0x3b0>)
 800a25c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a260:	e6d5      	b.n	800a00e <__ieee754_pow+0x12e>
 800a262:	bf00      	nop
 800a264:	f3af 8000 	nop.w
 800a268:	60000000 	.word	0x60000000
 800a26c:	3ff71547 	.word	0x3ff71547
 800a270:	f85ddf44 	.word	0xf85ddf44
 800a274:	3e54ae0b 	.word	0x3e54ae0b
 800a278:	55555555 	.word	0x55555555
 800a27c:	3fd55555 	.word	0x3fd55555
 800a280:	652b82fe 	.word	0x652b82fe
 800a284:	3ff71547 	.word	0x3ff71547
 800a288:	00000000 	.word	0x00000000
 800a28c:	bff00000 	.word	0xbff00000
 800a290:	8800759c 	.word	0x8800759c
 800a294:	7e37e43c 	.word	0x7e37e43c
 800a298:	3ff00000 	.word	0x3ff00000
 800a29c:	3fd00000 	.word	0x3fd00000
 800a2a0:	3fe00000 	.word	0x3fe00000
 800a2a4:	408fffff 	.word	0x408fffff
 800a2a8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a2ac:	f04f 0200 	mov.w	r2, #0
 800a2b0:	da05      	bge.n	800a2be <__ieee754_pow+0x3de>
 800a2b2:	4bd3      	ldr	r3, [pc, #844]	; (800a600 <__ieee754_pow+0x720>)
 800a2b4:	f7f6 f9b0 	bl	8000618 <__aeabi_dmul>
 800a2b8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a2bc:	460c      	mov	r4, r1
 800a2be:	1523      	asrs	r3, r4, #20
 800a2c0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a2c4:	4413      	add	r3, r2
 800a2c6:	9309      	str	r3, [sp, #36]	; 0x24
 800a2c8:	4bce      	ldr	r3, [pc, #824]	; (800a604 <__ieee754_pow+0x724>)
 800a2ca:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a2ce:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a2d2:	429c      	cmp	r4, r3
 800a2d4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a2d8:	dd08      	ble.n	800a2ec <__ieee754_pow+0x40c>
 800a2da:	4bcb      	ldr	r3, [pc, #812]	; (800a608 <__ieee754_pow+0x728>)
 800a2dc:	429c      	cmp	r4, r3
 800a2de:	f340 815e 	ble.w	800a59e <__ieee754_pow+0x6be>
 800a2e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2e4:	3301      	adds	r3, #1
 800a2e6:	9309      	str	r3, [sp, #36]	; 0x24
 800a2e8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a2ec:	f04f 0a00 	mov.w	sl, #0
 800a2f0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800a2f4:	930c      	str	r3, [sp, #48]	; 0x30
 800a2f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a2f8:	4bc4      	ldr	r3, [pc, #784]	; (800a60c <__ieee754_pow+0x72c>)
 800a2fa:	4413      	add	r3, r2
 800a2fc:	ed93 7b00 	vldr	d7, [r3]
 800a300:	4629      	mov	r1, r5
 800a302:	ec53 2b17 	vmov	r2, r3, d7
 800a306:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a30a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a30e:	f7f5 ffcb 	bl	80002a8 <__aeabi_dsub>
 800a312:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a316:	4606      	mov	r6, r0
 800a318:	460f      	mov	r7, r1
 800a31a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a31e:	f7f5 ffc5 	bl	80002ac <__adddf3>
 800a322:	4602      	mov	r2, r0
 800a324:	460b      	mov	r3, r1
 800a326:	2000      	movs	r0, #0
 800a328:	49b9      	ldr	r1, [pc, #740]	; (800a610 <__ieee754_pow+0x730>)
 800a32a:	f7f6 fa9f 	bl	800086c <__aeabi_ddiv>
 800a32e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800a332:	4602      	mov	r2, r0
 800a334:	460b      	mov	r3, r1
 800a336:	4630      	mov	r0, r6
 800a338:	4639      	mov	r1, r7
 800a33a:	f7f6 f96d 	bl	8000618 <__aeabi_dmul>
 800a33e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a342:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a346:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a34a:	2300      	movs	r3, #0
 800a34c:	9302      	str	r3, [sp, #8]
 800a34e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a352:	106d      	asrs	r5, r5, #1
 800a354:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a358:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a35c:	2200      	movs	r2, #0
 800a35e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800a362:	4640      	mov	r0, r8
 800a364:	4649      	mov	r1, r9
 800a366:	4614      	mov	r4, r2
 800a368:	461d      	mov	r5, r3
 800a36a:	f7f6 f955 	bl	8000618 <__aeabi_dmul>
 800a36e:	4602      	mov	r2, r0
 800a370:	460b      	mov	r3, r1
 800a372:	4630      	mov	r0, r6
 800a374:	4639      	mov	r1, r7
 800a376:	f7f5 ff97 	bl	80002a8 <__aeabi_dsub>
 800a37a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a37e:	4606      	mov	r6, r0
 800a380:	460f      	mov	r7, r1
 800a382:	4620      	mov	r0, r4
 800a384:	4629      	mov	r1, r5
 800a386:	f7f5 ff8f 	bl	80002a8 <__aeabi_dsub>
 800a38a:	4602      	mov	r2, r0
 800a38c:	460b      	mov	r3, r1
 800a38e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a392:	f7f5 ff89 	bl	80002a8 <__aeabi_dsub>
 800a396:	4642      	mov	r2, r8
 800a398:	464b      	mov	r3, r9
 800a39a:	f7f6 f93d 	bl	8000618 <__aeabi_dmul>
 800a39e:	4602      	mov	r2, r0
 800a3a0:	460b      	mov	r3, r1
 800a3a2:	4630      	mov	r0, r6
 800a3a4:	4639      	mov	r1, r7
 800a3a6:	f7f5 ff7f 	bl	80002a8 <__aeabi_dsub>
 800a3aa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a3ae:	f7f6 f933 	bl	8000618 <__aeabi_dmul>
 800a3b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a3b6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a3ba:	4610      	mov	r0, r2
 800a3bc:	4619      	mov	r1, r3
 800a3be:	f7f6 f92b 	bl	8000618 <__aeabi_dmul>
 800a3c2:	a37b      	add	r3, pc, #492	; (adr r3, 800a5b0 <__ieee754_pow+0x6d0>)
 800a3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c8:	4604      	mov	r4, r0
 800a3ca:	460d      	mov	r5, r1
 800a3cc:	f7f6 f924 	bl	8000618 <__aeabi_dmul>
 800a3d0:	a379      	add	r3, pc, #484	; (adr r3, 800a5b8 <__ieee754_pow+0x6d8>)
 800a3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d6:	f7f5 ff69 	bl	80002ac <__adddf3>
 800a3da:	4622      	mov	r2, r4
 800a3dc:	462b      	mov	r3, r5
 800a3de:	f7f6 f91b 	bl	8000618 <__aeabi_dmul>
 800a3e2:	a377      	add	r3, pc, #476	; (adr r3, 800a5c0 <__ieee754_pow+0x6e0>)
 800a3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e8:	f7f5 ff60 	bl	80002ac <__adddf3>
 800a3ec:	4622      	mov	r2, r4
 800a3ee:	462b      	mov	r3, r5
 800a3f0:	f7f6 f912 	bl	8000618 <__aeabi_dmul>
 800a3f4:	a374      	add	r3, pc, #464	; (adr r3, 800a5c8 <__ieee754_pow+0x6e8>)
 800a3f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3fa:	f7f5 ff57 	bl	80002ac <__adddf3>
 800a3fe:	4622      	mov	r2, r4
 800a400:	462b      	mov	r3, r5
 800a402:	f7f6 f909 	bl	8000618 <__aeabi_dmul>
 800a406:	a372      	add	r3, pc, #456	; (adr r3, 800a5d0 <__ieee754_pow+0x6f0>)
 800a408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a40c:	f7f5 ff4e 	bl	80002ac <__adddf3>
 800a410:	4622      	mov	r2, r4
 800a412:	462b      	mov	r3, r5
 800a414:	f7f6 f900 	bl	8000618 <__aeabi_dmul>
 800a418:	a36f      	add	r3, pc, #444	; (adr r3, 800a5d8 <__ieee754_pow+0x6f8>)
 800a41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a41e:	f7f5 ff45 	bl	80002ac <__adddf3>
 800a422:	4622      	mov	r2, r4
 800a424:	4606      	mov	r6, r0
 800a426:	460f      	mov	r7, r1
 800a428:	462b      	mov	r3, r5
 800a42a:	4620      	mov	r0, r4
 800a42c:	4629      	mov	r1, r5
 800a42e:	f7f6 f8f3 	bl	8000618 <__aeabi_dmul>
 800a432:	4602      	mov	r2, r0
 800a434:	460b      	mov	r3, r1
 800a436:	4630      	mov	r0, r6
 800a438:	4639      	mov	r1, r7
 800a43a:	f7f6 f8ed 	bl	8000618 <__aeabi_dmul>
 800a43e:	4642      	mov	r2, r8
 800a440:	4604      	mov	r4, r0
 800a442:	460d      	mov	r5, r1
 800a444:	464b      	mov	r3, r9
 800a446:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a44a:	f7f5 ff2f 	bl	80002ac <__adddf3>
 800a44e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a452:	f7f6 f8e1 	bl	8000618 <__aeabi_dmul>
 800a456:	4622      	mov	r2, r4
 800a458:	462b      	mov	r3, r5
 800a45a:	f7f5 ff27 	bl	80002ac <__adddf3>
 800a45e:	4642      	mov	r2, r8
 800a460:	4606      	mov	r6, r0
 800a462:	460f      	mov	r7, r1
 800a464:	464b      	mov	r3, r9
 800a466:	4640      	mov	r0, r8
 800a468:	4649      	mov	r1, r9
 800a46a:	f7f6 f8d5 	bl	8000618 <__aeabi_dmul>
 800a46e:	2200      	movs	r2, #0
 800a470:	4b68      	ldr	r3, [pc, #416]	; (800a614 <__ieee754_pow+0x734>)
 800a472:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a476:	f7f5 ff19 	bl	80002ac <__adddf3>
 800a47a:	4632      	mov	r2, r6
 800a47c:	463b      	mov	r3, r7
 800a47e:	f7f5 ff15 	bl	80002ac <__adddf3>
 800a482:	9802      	ldr	r0, [sp, #8]
 800a484:	460d      	mov	r5, r1
 800a486:	4604      	mov	r4, r0
 800a488:	4602      	mov	r2, r0
 800a48a:	460b      	mov	r3, r1
 800a48c:	4640      	mov	r0, r8
 800a48e:	4649      	mov	r1, r9
 800a490:	f7f6 f8c2 	bl	8000618 <__aeabi_dmul>
 800a494:	2200      	movs	r2, #0
 800a496:	4680      	mov	r8, r0
 800a498:	4689      	mov	r9, r1
 800a49a:	4b5e      	ldr	r3, [pc, #376]	; (800a614 <__ieee754_pow+0x734>)
 800a49c:	4620      	mov	r0, r4
 800a49e:	4629      	mov	r1, r5
 800a4a0:	f7f5 ff02 	bl	80002a8 <__aeabi_dsub>
 800a4a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a4a8:	f7f5 fefe 	bl	80002a8 <__aeabi_dsub>
 800a4ac:	4602      	mov	r2, r0
 800a4ae:	460b      	mov	r3, r1
 800a4b0:	4630      	mov	r0, r6
 800a4b2:	4639      	mov	r1, r7
 800a4b4:	f7f5 fef8 	bl	80002a8 <__aeabi_dsub>
 800a4b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a4bc:	f7f6 f8ac 	bl	8000618 <__aeabi_dmul>
 800a4c0:	4622      	mov	r2, r4
 800a4c2:	4606      	mov	r6, r0
 800a4c4:	460f      	mov	r7, r1
 800a4c6:	462b      	mov	r3, r5
 800a4c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a4cc:	f7f6 f8a4 	bl	8000618 <__aeabi_dmul>
 800a4d0:	4602      	mov	r2, r0
 800a4d2:	460b      	mov	r3, r1
 800a4d4:	4630      	mov	r0, r6
 800a4d6:	4639      	mov	r1, r7
 800a4d8:	f7f5 fee8 	bl	80002ac <__adddf3>
 800a4dc:	4606      	mov	r6, r0
 800a4de:	460f      	mov	r7, r1
 800a4e0:	4602      	mov	r2, r0
 800a4e2:	460b      	mov	r3, r1
 800a4e4:	4640      	mov	r0, r8
 800a4e6:	4649      	mov	r1, r9
 800a4e8:	f7f5 fee0 	bl	80002ac <__adddf3>
 800a4ec:	9802      	ldr	r0, [sp, #8]
 800a4ee:	a33c      	add	r3, pc, #240	; (adr r3, 800a5e0 <__ieee754_pow+0x700>)
 800a4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4f4:	4604      	mov	r4, r0
 800a4f6:	460d      	mov	r5, r1
 800a4f8:	f7f6 f88e 	bl	8000618 <__aeabi_dmul>
 800a4fc:	4642      	mov	r2, r8
 800a4fe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a502:	464b      	mov	r3, r9
 800a504:	4620      	mov	r0, r4
 800a506:	4629      	mov	r1, r5
 800a508:	f7f5 fece 	bl	80002a8 <__aeabi_dsub>
 800a50c:	4602      	mov	r2, r0
 800a50e:	460b      	mov	r3, r1
 800a510:	4630      	mov	r0, r6
 800a512:	4639      	mov	r1, r7
 800a514:	f7f5 fec8 	bl	80002a8 <__aeabi_dsub>
 800a518:	a333      	add	r3, pc, #204	; (adr r3, 800a5e8 <__ieee754_pow+0x708>)
 800a51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a51e:	f7f6 f87b 	bl	8000618 <__aeabi_dmul>
 800a522:	a333      	add	r3, pc, #204	; (adr r3, 800a5f0 <__ieee754_pow+0x710>)
 800a524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a528:	4606      	mov	r6, r0
 800a52a:	460f      	mov	r7, r1
 800a52c:	4620      	mov	r0, r4
 800a52e:	4629      	mov	r1, r5
 800a530:	f7f6 f872 	bl	8000618 <__aeabi_dmul>
 800a534:	4602      	mov	r2, r0
 800a536:	460b      	mov	r3, r1
 800a538:	4630      	mov	r0, r6
 800a53a:	4639      	mov	r1, r7
 800a53c:	f7f5 feb6 	bl	80002ac <__adddf3>
 800a540:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a542:	4b35      	ldr	r3, [pc, #212]	; (800a618 <__ieee754_pow+0x738>)
 800a544:	4413      	add	r3, r2
 800a546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a54a:	f7f5 feaf 	bl	80002ac <__adddf3>
 800a54e:	4604      	mov	r4, r0
 800a550:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a552:	460d      	mov	r5, r1
 800a554:	f7f5 fff6 	bl	8000544 <__aeabi_i2d>
 800a558:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a55a:	4b30      	ldr	r3, [pc, #192]	; (800a61c <__ieee754_pow+0x73c>)
 800a55c:	4413      	add	r3, r2
 800a55e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a562:	4606      	mov	r6, r0
 800a564:	460f      	mov	r7, r1
 800a566:	4622      	mov	r2, r4
 800a568:	462b      	mov	r3, r5
 800a56a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a56e:	f7f5 fe9d 	bl	80002ac <__adddf3>
 800a572:	4642      	mov	r2, r8
 800a574:	464b      	mov	r3, r9
 800a576:	f7f5 fe99 	bl	80002ac <__adddf3>
 800a57a:	4632      	mov	r2, r6
 800a57c:	463b      	mov	r3, r7
 800a57e:	f7f5 fe95 	bl	80002ac <__adddf3>
 800a582:	9802      	ldr	r0, [sp, #8]
 800a584:	4632      	mov	r2, r6
 800a586:	463b      	mov	r3, r7
 800a588:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a58c:	f7f5 fe8c 	bl	80002a8 <__aeabi_dsub>
 800a590:	4642      	mov	r2, r8
 800a592:	464b      	mov	r3, r9
 800a594:	f7f5 fe88 	bl	80002a8 <__aeabi_dsub>
 800a598:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a59c:	e607      	b.n	800a1ae <__ieee754_pow+0x2ce>
 800a59e:	f04f 0a01 	mov.w	sl, #1
 800a5a2:	e6a5      	b.n	800a2f0 <__ieee754_pow+0x410>
 800a5a4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800a5f8 <__ieee754_pow+0x718>
 800a5a8:	e613      	b.n	800a1d2 <__ieee754_pow+0x2f2>
 800a5aa:	bf00      	nop
 800a5ac:	f3af 8000 	nop.w
 800a5b0:	4a454eef 	.word	0x4a454eef
 800a5b4:	3fca7e28 	.word	0x3fca7e28
 800a5b8:	93c9db65 	.word	0x93c9db65
 800a5bc:	3fcd864a 	.word	0x3fcd864a
 800a5c0:	a91d4101 	.word	0xa91d4101
 800a5c4:	3fd17460 	.word	0x3fd17460
 800a5c8:	518f264d 	.word	0x518f264d
 800a5cc:	3fd55555 	.word	0x3fd55555
 800a5d0:	db6fabff 	.word	0xdb6fabff
 800a5d4:	3fdb6db6 	.word	0x3fdb6db6
 800a5d8:	33333303 	.word	0x33333303
 800a5dc:	3fe33333 	.word	0x3fe33333
 800a5e0:	e0000000 	.word	0xe0000000
 800a5e4:	3feec709 	.word	0x3feec709
 800a5e8:	dc3a03fd 	.word	0xdc3a03fd
 800a5ec:	3feec709 	.word	0x3feec709
 800a5f0:	145b01f5 	.word	0x145b01f5
 800a5f4:	be3e2fe0 	.word	0xbe3e2fe0
 800a5f8:	00000000 	.word	0x00000000
 800a5fc:	3ff00000 	.word	0x3ff00000
 800a600:	43400000 	.word	0x43400000
 800a604:	0003988e 	.word	0x0003988e
 800a608:	000bb679 	.word	0x000bb679
 800a60c:	0800b0d0 	.word	0x0800b0d0
 800a610:	3ff00000 	.word	0x3ff00000
 800a614:	40080000 	.word	0x40080000
 800a618:	0800b0f0 	.word	0x0800b0f0
 800a61c:	0800b0e0 	.word	0x0800b0e0
 800a620:	a3b4      	add	r3, pc, #720	; (adr r3, 800a8f4 <__ieee754_pow+0xa14>)
 800a622:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a626:	4640      	mov	r0, r8
 800a628:	4649      	mov	r1, r9
 800a62a:	f7f5 fe3f 	bl	80002ac <__adddf3>
 800a62e:	4622      	mov	r2, r4
 800a630:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a634:	462b      	mov	r3, r5
 800a636:	4630      	mov	r0, r6
 800a638:	4639      	mov	r1, r7
 800a63a:	f7f5 fe35 	bl	80002a8 <__aeabi_dsub>
 800a63e:	4602      	mov	r2, r0
 800a640:	460b      	mov	r3, r1
 800a642:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a646:	f7f6 fa77 	bl	8000b38 <__aeabi_dcmpgt>
 800a64a:	2800      	cmp	r0, #0
 800a64c:	f47f adfe 	bne.w	800a24c <__ieee754_pow+0x36c>
 800a650:	4aa3      	ldr	r2, [pc, #652]	; (800a8e0 <__ieee754_pow+0xa00>)
 800a652:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a656:	4293      	cmp	r3, r2
 800a658:	f340 810a 	ble.w	800a870 <__ieee754_pow+0x990>
 800a65c:	151b      	asrs	r3, r3, #20
 800a65e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a662:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a666:	fa4a f303 	asr.w	r3, sl, r3
 800a66a:	445b      	add	r3, fp
 800a66c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a670:	4e9c      	ldr	r6, [pc, #624]	; (800a8e4 <__ieee754_pow+0xa04>)
 800a672:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a676:	4116      	asrs	r6, r2
 800a678:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a67c:	2000      	movs	r0, #0
 800a67e:	ea23 0106 	bic.w	r1, r3, r6
 800a682:	f1c2 0214 	rsb	r2, r2, #20
 800a686:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a68a:	fa4a fa02 	asr.w	sl, sl, r2
 800a68e:	f1bb 0f00 	cmp.w	fp, #0
 800a692:	4602      	mov	r2, r0
 800a694:	460b      	mov	r3, r1
 800a696:	4620      	mov	r0, r4
 800a698:	4629      	mov	r1, r5
 800a69a:	bfb8      	it	lt
 800a69c:	f1ca 0a00 	rsblt	sl, sl, #0
 800a6a0:	f7f5 fe02 	bl	80002a8 <__aeabi_dsub>
 800a6a4:	e9cd 0100 	strd	r0, r1, [sp]
 800a6a8:	4642      	mov	r2, r8
 800a6aa:	464b      	mov	r3, r9
 800a6ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a6b0:	f7f5 fdfc 	bl	80002ac <__adddf3>
 800a6b4:	2000      	movs	r0, #0
 800a6b6:	a378      	add	r3, pc, #480	; (adr r3, 800a898 <__ieee754_pow+0x9b8>)
 800a6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6bc:	4604      	mov	r4, r0
 800a6be:	460d      	mov	r5, r1
 800a6c0:	f7f5 ffaa 	bl	8000618 <__aeabi_dmul>
 800a6c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a6c8:	4606      	mov	r6, r0
 800a6ca:	460f      	mov	r7, r1
 800a6cc:	4620      	mov	r0, r4
 800a6ce:	4629      	mov	r1, r5
 800a6d0:	f7f5 fdea 	bl	80002a8 <__aeabi_dsub>
 800a6d4:	4602      	mov	r2, r0
 800a6d6:	460b      	mov	r3, r1
 800a6d8:	4640      	mov	r0, r8
 800a6da:	4649      	mov	r1, r9
 800a6dc:	f7f5 fde4 	bl	80002a8 <__aeabi_dsub>
 800a6e0:	a36f      	add	r3, pc, #444	; (adr r3, 800a8a0 <__ieee754_pow+0x9c0>)
 800a6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e6:	f7f5 ff97 	bl	8000618 <__aeabi_dmul>
 800a6ea:	a36f      	add	r3, pc, #444	; (adr r3, 800a8a8 <__ieee754_pow+0x9c8>)
 800a6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f0:	4680      	mov	r8, r0
 800a6f2:	4689      	mov	r9, r1
 800a6f4:	4620      	mov	r0, r4
 800a6f6:	4629      	mov	r1, r5
 800a6f8:	f7f5 ff8e 	bl	8000618 <__aeabi_dmul>
 800a6fc:	4602      	mov	r2, r0
 800a6fe:	460b      	mov	r3, r1
 800a700:	4640      	mov	r0, r8
 800a702:	4649      	mov	r1, r9
 800a704:	f7f5 fdd2 	bl	80002ac <__adddf3>
 800a708:	4604      	mov	r4, r0
 800a70a:	460d      	mov	r5, r1
 800a70c:	4602      	mov	r2, r0
 800a70e:	460b      	mov	r3, r1
 800a710:	4630      	mov	r0, r6
 800a712:	4639      	mov	r1, r7
 800a714:	f7f5 fdca 	bl	80002ac <__adddf3>
 800a718:	4632      	mov	r2, r6
 800a71a:	463b      	mov	r3, r7
 800a71c:	4680      	mov	r8, r0
 800a71e:	4689      	mov	r9, r1
 800a720:	f7f5 fdc2 	bl	80002a8 <__aeabi_dsub>
 800a724:	4602      	mov	r2, r0
 800a726:	460b      	mov	r3, r1
 800a728:	4620      	mov	r0, r4
 800a72a:	4629      	mov	r1, r5
 800a72c:	f7f5 fdbc 	bl	80002a8 <__aeabi_dsub>
 800a730:	4642      	mov	r2, r8
 800a732:	4606      	mov	r6, r0
 800a734:	460f      	mov	r7, r1
 800a736:	464b      	mov	r3, r9
 800a738:	4640      	mov	r0, r8
 800a73a:	4649      	mov	r1, r9
 800a73c:	f7f5 ff6c 	bl	8000618 <__aeabi_dmul>
 800a740:	a35b      	add	r3, pc, #364	; (adr r3, 800a8b0 <__ieee754_pow+0x9d0>)
 800a742:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a746:	4604      	mov	r4, r0
 800a748:	460d      	mov	r5, r1
 800a74a:	f7f5 ff65 	bl	8000618 <__aeabi_dmul>
 800a74e:	a35a      	add	r3, pc, #360	; (adr r3, 800a8b8 <__ieee754_pow+0x9d8>)
 800a750:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a754:	f7f5 fda8 	bl	80002a8 <__aeabi_dsub>
 800a758:	4622      	mov	r2, r4
 800a75a:	462b      	mov	r3, r5
 800a75c:	f7f5 ff5c 	bl	8000618 <__aeabi_dmul>
 800a760:	a357      	add	r3, pc, #348	; (adr r3, 800a8c0 <__ieee754_pow+0x9e0>)
 800a762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a766:	f7f5 fda1 	bl	80002ac <__adddf3>
 800a76a:	4622      	mov	r2, r4
 800a76c:	462b      	mov	r3, r5
 800a76e:	f7f5 ff53 	bl	8000618 <__aeabi_dmul>
 800a772:	a355      	add	r3, pc, #340	; (adr r3, 800a8c8 <__ieee754_pow+0x9e8>)
 800a774:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a778:	f7f5 fd96 	bl	80002a8 <__aeabi_dsub>
 800a77c:	4622      	mov	r2, r4
 800a77e:	462b      	mov	r3, r5
 800a780:	f7f5 ff4a 	bl	8000618 <__aeabi_dmul>
 800a784:	a352      	add	r3, pc, #328	; (adr r3, 800a8d0 <__ieee754_pow+0x9f0>)
 800a786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a78a:	f7f5 fd8f 	bl	80002ac <__adddf3>
 800a78e:	4622      	mov	r2, r4
 800a790:	462b      	mov	r3, r5
 800a792:	f7f5 ff41 	bl	8000618 <__aeabi_dmul>
 800a796:	4602      	mov	r2, r0
 800a798:	460b      	mov	r3, r1
 800a79a:	4640      	mov	r0, r8
 800a79c:	4649      	mov	r1, r9
 800a79e:	f7f5 fd83 	bl	80002a8 <__aeabi_dsub>
 800a7a2:	4604      	mov	r4, r0
 800a7a4:	460d      	mov	r5, r1
 800a7a6:	4602      	mov	r2, r0
 800a7a8:	460b      	mov	r3, r1
 800a7aa:	4640      	mov	r0, r8
 800a7ac:	4649      	mov	r1, r9
 800a7ae:	f7f5 ff33 	bl	8000618 <__aeabi_dmul>
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	e9cd 0100 	strd	r0, r1, [sp]
 800a7b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a7bc:	4620      	mov	r0, r4
 800a7be:	4629      	mov	r1, r5
 800a7c0:	f7f5 fd72 	bl	80002a8 <__aeabi_dsub>
 800a7c4:	4602      	mov	r2, r0
 800a7c6:	460b      	mov	r3, r1
 800a7c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a7cc:	f7f6 f84e 	bl	800086c <__aeabi_ddiv>
 800a7d0:	4632      	mov	r2, r6
 800a7d2:	4604      	mov	r4, r0
 800a7d4:	460d      	mov	r5, r1
 800a7d6:	463b      	mov	r3, r7
 800a7d8:	4640      	mov	r0, r8
 800a7da:	4649      	mov	r1, r9
 800a7dc:	f7f5 ff1c 	bl	8000618 <__aeabi_dmul>
 800a7e0:	4632      	mov	r2, r6
 800a7e2:	463b      	mov	r3, r7
 800a7e4:	f7f5 fd62 	bl	80002ac <__adddf3>
 800a7e8:	4602      	mov	r2, r0
 800a7ea:	460b      	mov	r3, r1
 800a7ec:	4620      	mov	r0, r4
 800a7ee:	4629      	mov	r1, r5
 800a7f0:	f7f5 fd5a 	bl	80002a8 <__aeabi_dsub>
 800a7f4:	4642      	mov	r2, r8
 800a7f6:	464b      	mov	r3, r9
 800a7f8:	f7f5 fd56 	bl	80002a8 <__aeabi_dsub>
 800a7fc:	4602      	mov	r2, r0
 800a7fe:	460b      	mov	r3, r1
 800a800:	2000      	movs	r0, #0
 800a802:	4939      	ldr	r1, [pc, #228]	; (800a8e8 <__ieee754_pow+0xa08>)
 800a804:	f7f5 fd50 	bl	80002a8 <__aeabi_dsub>
 800a808:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800a80c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a810:	4602      	mov	r2, r0
 800a812:	460b      	mov	r3, r1
 800a814:	da2f      	bge.n	800a876 <__ieee754_pow+0x996>
 800a816:	4650      	mov	r0, sl
 800a818:	ec43 2b10 	vmov	d0, r2, r3
 800a81c:	f000 f9c0 	bl	800aba0 <scalbn>
 800a820:	ec51 0b10 	vmov	r0, r1, d0
 800a824:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a828:	f7ff bbf1 	b.w	800a00e <__ieee754_pow+0x12e>
 800a82c:	4b2f      	ldr	r3, [pc, #188]	; (800a8ec <__ieee754_pow+0xa0c>)
 800a82e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a832:	429e      	cmp	r6, r3
 800a834:	f77f af0c 	ble.w	800a650 <__ieee754_pow+0x770>
 800a838:	4b2d      	ldr	r3, [pc, #180]	; (800a8f0 <__ieee754_pow+0xa10>)
 800a83a:	440b      	add	r3, r1
 800a83c:	4303      	orrs	r3, r0
 800a83e:	d00b      	beq.n	800a858 <__ieee754_pow+0x978>
 800a840:	a325      	add	r3, pc, #148	; (adr r3, 800a8d8 <__ieee754_pow+0x9f8>)
 800a842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a846:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a84a:	f7f5 fee5 	bl	8000618 <__aeabi_dmul>
 800a84e:	a322      	add	r3, pc, #136	; (adr r3, 800a8d8 <__ieee754_pow+0x9f8>)
 800a850:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a854:	f7ff bbdb 	b.w	800a00e <__ieee754_pow+0x12e>
 800a858:	4622      	mov	r2, r4
 800a85a:	462b      	mov	r3, r5
 800a85c:	f7f5 fd24 	bl	80002a8 <__aeabi_dsub>
 800a860:	4642      	mov	r2, r8
 800a862:	464b      	mov	r3, r9
 800a864:	f7f6 f95e 	bl	8000b24 <__aeabi_dcmpge>
 800a868:	2800      	cmp	r0, #0
 800a86a:	f43f aef1 	beq.w	800a650 <__ieee754_pow+0x770>
 800a86e:	e7e7      	b.n	800a840 <__ieee754_pow+0x960>
 800a870:	f04f 0a00 	mov.w	sl, #0
 800a874:	e718      	b.n	800a6a8 <__ieee754_pow+0x7c8>
 800a876:	4621      	mov	r1, r4
 800a878:	e7d4      	b.n	800a824 <__ieee754_pow+0x944>
 800a87a:	2000      	movs	r0, #0
 800a87c:	491a      	ldr	r1, [pc, #104]	; (800a8e8 <__ieee754_pow+0xa08>)
 800a87e:	f7ff bb8f 	b.w	8009fa0 <__ieee754_pow+0xc0>
 800a882:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a886:	f7ff bb8b 	b.w	8009fa0 <__ieee754_pow+0xc0>
 800a88a:	4630      	mov	r0, r6
 800a88c:	4639      	mov	r1, r7
 800a88e:	f7ff bb87 	b.w	8009fa0 <__ieee754_pow+0xc0>
 800a892:	4693      	mov	fp, r2
 800a894:	f7ff bb98 	b.w	8009fc8 <__ieee754_pow+0xe8>
 800a898:	00000000 	.word	0x00000000
 800a89c:	3fe62e43 	.word	0x3fe62e43
 800a8a0:	fefa39ef 	.word	0xfefa39ef
 800a8a4:	3fe62e42 	.word	0x3fe62e42
 800a8a8:	0ca86c39 	.word	0x0ca86c39
 800a8ac:	be205c61 	.word	0xbe205c61
 800a8b0:	72bea4d0 	.word	0x72bea4d0
 800a8b4:	3e663769 	.word	0x3e663769
 800a8b8:	c5d26bf1 	.word	0xc5d26bf1
 800a8bc:	3ebbbd41 	.word	0x3ebbbd41
 800a8c0:	af25de2c 	.word	0xaf25de2c
 800a8c4:	3f11566a 	.word	0x3f11566a
 800a8c8:	16bebd93 	.word	0x16bebd93
 800a8cc:	3f66c16c 	.word	0x3f66c16c
 800a8d0:	5555553e 	.word	0x5555553e
 800a8d4:	3fc55555 	.word	0x3fc55555
 800a8d8:	c2f8f359 	.word	0xc2f8f359
 800a8dc:	01a56e1f 	.word	0x01a56e1f
 800a8e0:	3fe00000 	.word	0x3fe00000
 800a8e4:	000fffff 	.word	0x000fffff
 800a8e8:	3ff00000 	.word	0x3ff00000
 800a8ec:	4090cbff 	.word	0x4090cbff
 800a8f0:	3f6f3400 	.word	0x3f6f3400
 800a8f4:	652b82fe 	.word	0x652b82fe
 800a8f8:	3c971547 	.word	0x3c971547

0800a8fc <__ieee754_sqrt>:
 800a8fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a900:	4955      	ldr	r1, [pc, #340]	; (800aa58 <__ieee754_sqrt+0x15c>)
 800a902:	ec55 4b10 	vmov	r4, r5, d0
 800a906:	43a9      	bics	r1, r5
 800a908:	462b      	mov	r3, r5
 800a90a:	462a      	mov	r2, r5
 800a90c:	d112      	bne.n	800a934 <__ieee754_sqrt+0x38>
 800a90e:	ee10 2a10 	vmov	r2, s0
 800a912:	ee10 0a10 	vmov	r0, s0
 800a916:	4629      	mov	r1, r5
 800a918:	f7f5 fe7e 	bl	8000618 <__aeabi_dmul>
 800a91c:	4602      	mov	r2, r0
 800a91e:	460b      	mov	r3, r1
 800a920:	4620      	mov	r0, r4
 800a922:	4629      	mov	r1, r5
 800a924:	f7f5 fcc2 	bl	80002ac <__adddf3>
 800a928:	4604      	mov	r4, r0
 800a92a:	460d      	mov	r5, r1
 800a92c:	ec45 4b10 	vmov	d0, r4, r5
 800a930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a934:	2d00      	cmp	r5, #0
 800a936:	ee10 0a10 	vmov	r0, s0
 800a93a:	4621      	mov	r1, r4
 800a93c:	dc0f      	bgt.n	800a95e <__ieee754_sqrt+0x62>
 800a93e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a942:	4330      	orrs	r0, r6
 800a944:	d0f2      	beq.n	800a92c <__ieee754_sqrt+0x30>
 800a946:	b155      	cbz	r5, 800a95e <__ieee754_sqrt+0x62>
 800a948:	ee10 2a10 	vmov	r2, s0
 800a94c:	4620      	mov	r0, r4
 800a94e:	4629      	mov	r1, r5
 800a950:	f7f5 fcaa 	bl	80002a8 <__aeabi_dsub>
 800a954:	4602      	mov	r2, r0
 800a956:	460b      	mov	r3, r1
 800a958:	f7f5 ff88 	bl	800086c <__aeabi_ddiv>
 800a95c:	e7e4      	b.n	800a928 <__ieee754_sqrt+0x2c>
 800a95e:	151b      	asrs	r3, r3, #20
 800a960:	d073      	beq.n	800aa4a <__ieee754_sqrt+0x14e>
 800a962:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a966:	07dd      	lsls	r5, r3, #31
 800a968:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800a96c:	bf48      	it	mi
 800a96e:	0fc8      	lsrmi	r0, r1, #31
 800a970:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a974:	bf44      	itt	mi
 800a976:	0049      	lslmi	r1, r1, #1
 800a978:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800a97c:	2500      	movs	r5, #0
 800a97e:	1058      	asrs	r0, r3, #1
 800a980:	0fcb      	lsrs	r3, r1, #31
 800a982:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800a986:	0049      	lsls	r1, r1, #1
 800a988:	2316      	movs	r3, #22
 800a98a:	462c      	mov	r4, r5
 800a98c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800a990:	19a7      	adds	r7, r4, r6
 800a992:	4297      	cmp	r7, r2
 800a994:	bfde      	ittt	le
 800a996:	19bc      	addle	r4, r7, r6
 800a998:	1bd2      	suble	r2, r2, r7
 800a99a:	19ad      	addle	r5, r5, r6
 800a99c:	0fcf      	lsrs	r7, r1, #31
 800a99e:	3b01      	subs	r3, #1
 800a9a0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800a9a4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a9a8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a9ac:	d1f0      	bne.n	800a990 <__ieee754_sqrt+0x94>
 800a9ae:	f04f 0c20 	mov.w	ip, #32
 800a9b2:	469e      	mov	lr, r3
 800a9b4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a9b8:	42a2      	cmp	r2, r4
 800a9ba:	eb06 070e 	add.w	r7, r6, lr
 800a9be:	dc02      	bgt.n	800a9c6 <__ieee754_sqrt+0xca>
 800a9c0:	d112      	bne.n	800a9e8 <__ieee754_sqrt+0xec>
 800a9c2:	428f      	cmp	r7, r1
 800a9c4:	d810      	bhi.n	800a9e8 <__ieee754_sqrt+0xec>
 800a9c6:	2f00      	cmp	r7, #0
 800a9c8:	eb07 0e06 	add.w	lr, r7, r6
 800a9cc:	da42      	bge.n	800aa54 <__ieee754_sqrt+0x158>
 800a9ce:	f1be 0f00 	cmp.w	lr, #0
 800a9d2:	db3f      	blt.n	800aa54 <__ieee754_sqrt+0x158>
 800a9d4:	f104 0801 	add.w	r8, r4, #1
 800a9d8:	1b12      	subs	r2, r2, r4
 800a9da:	428f      	cmp	r7, r1
 800a9dc:	bf88      	it	hi
 800a9de:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800a9e2:	1bc9      	subs	r1, r1, r7
 800a9e4:	4433      	add	r3, r6
 800a9e6:	4644      	mov	r4, r8
 800a9e8:	0052      	lsls	r2, r2, #1
 800a9ea:	f1bc 0c01 	subs.w	ip, ip, #1
 800a9ee:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800a9f2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a9f6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a9fa:	d1dd      	bne.n	800a9b8 <__ieee754_sqrt+0xbc>
 800a9fc:	430a      	orrs	r2, r1
 800a9fe:	d006      	beq.n	800aa0e <__ieee754_sqrt+0x112>
 800aa00:	1c5c      	adds	r4, r3, #1
 800aa02:	bf13      	iteet	ne
 800aa04:	3301      	addne	r3, #1
 800aa06:	3501      	addeq	r5, #1
 800aa08:	4663      	moveq	r3, ip
 800aa0a:	f023 0301 	bicne.w	r3, r3, #1
 800aa0e:	106a      	asrs	r2, r5, #1
 800aa10:	085b      	lsrs	r3, r3, #1
 800aa12:	07e9      	lsls	r1, r5, #31
 800aa14:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800aa18:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800aa1c:	bf48      	it	mi
 800aa1e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800aa22:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800aa26:	461c      	mov	r4, r3
 800aa28:	e780      	b.n	800a92c <__ieee754_sqrt+0x30>
 800aa2a:	0aca      	lsrs	r2, r1, #11
 800aa2c:	3815      	subs	r0, #21
 800aa2e:	0549      	lsls	r1, r1, #21
 800aa30:	2a00      	cmp	r2, #0
 800aa32:	d0fa      	beq.n	800aa2a <__ieee754_sqrt+0x12e>
 800aa34:	02d6      	lsls	r6, r2, #11
 800aa36:	d50a      	bpl.n	800aa4e <__ieee754_sqrt+0x152>
 800aa38:	f1c3 0420 	rsb	r4, r3, #32
 800aa3c:	fa21 f404 	lsr.w	r4, r1, r4
 800aa40:	1e5d      	subs	r5, r3, #1
 800aa42:	4099      	lsls	r1, r3
 800aa44:	4322      	orrs	r2, r4
 800aa46:	1b43      	subs	r3, r0, r5
 800aa48:	e78b      	b.n	800a962 <__ieee754_sqrt+0x66>
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	e7f0      	b.n	800aa30 <__ieee754_sqrt+0x134>
 800aa4e:	0052      	lsls	r2, r2, #1
 800aa50:	3301      	adds	r3, #1
 800aa52:	e7ef      	b.n	800aa34 <__ieee754_sqrt+0x138>
 800aa54:	46a0      	mov	r8, r4
 800aa56:	e7bf      	b.n	800a9d8 <__ieee754_sqrt+0xdc>
 800aa58:	7ff00000 	.word	0x7ff00000

0800aa5c <fabs>:
 800aa5c:	ec51 0b10 	vmov	r0, r1, d0
 800aa60:	ee10 2a10 	vmov	r2, s0
 800aa64:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800aa68:	ec43 2b10 	vmov	d0, r2, r3
 800aa6c:	4770      	bx	lr

0800aa6e <finite>:
 800aa6e:	ee10 3a90 	vmov	r3, s1
 800aa72:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800aa76:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800aa7a:	0fc0      	lsrs	r0, r0, #31
 800aa7c:	4770      	bx	lr

0800aa7e <matherr>:
 800aa7e:	2000      	movs	r0, #0
 800aa80:	4770      	bx	lr
 800aa82:	0000      	movs	r0, r0
 800aa84:	0000      	movs	r0, r0
	...

0800aa88 <nan>:
 800aa88:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800aa90 <nan+0x8>
 800aa8c:	4770      	bx	lr
 800aa8e:	bf00      	nop
 800aa90:	00000000 	.word	0x00000000
 800aa94:	7ff80000 	.word	0x7ff80000

0800aa98 <rint>:
 800aa98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa9a:	ec51 0b10 	vmov	r0, r1, d0
 800aa9e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800aaa2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800aaa6:	2e13      	cmp	r6, #19
 800aaa8:	460b      	mov	r3, r1
 800aaaa:	ee10 4a10 	vmov	r4, s0
 800aaae:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800aab2:	dc56      	bgt.n	800ab62 <rint+0xca>
 800aab4:	2e00      	cmp	r6, #0
 800aab6:	da2b      	bge.n	800ab10 <rint+0x78>
 800aab8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800aabc:	4302      	orrs	r2, r0
 800aabe:	d023      	beq.n	800ab08 <rint+0x70>
 800aac0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800aac4:	4302      	orrs	r2, r0
 800aac6:	4254      	negs	r4, r2
 800aac8:	4314      	orrs	r4, r2
 800aaca:	0c4b      	lsrs	r3, r1, #17
 800aacc:	0b24      	lsrs	r4, r4, #12
 800aace:	045b      	lsls	r3, r3, #17
 800aad0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800aad4:	ea44 0103 	orr.w	r1, r4, r3
 800aad8:	460b      	mov	r3, r1
 800aada:	492f      	ldr	r1, [pc, #188]	; (800ab98 <rint+0x100>)
 800aadc:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800aae0:	e9d1 6700 	ldrd	r6, r7, [r1]
 800aae4:	4602      	mov	r2, r0
 800aae6:	4639      	mov	r1, r7
 800aae8:	4630      	mov	r0, r6
 800aaea:	f7f5 fbdf 	bl	80002ac <__adddf3>
 800aaee:	e9cd 0100 	strd	r0, r1, [sp]
 800aaf2:	463b      	mov	r3, r7
 800aaf4:	4632      	mov	r2, r6
 800aaf6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aafa:	f7f5 fbd5 	bl	80002a8 <__aeabi_dsub>
 800aafe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ab02:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800ab06:	4639      	mov	r1, r7
 800ab08:	ec41 0b10 	vmov	d0, r0, r1
 800ab0c:	b003      	add	sp, #12
 800ab0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab10:	4a22      	ldr	r2, [pc, #136]	; (800ab9c <rint+0x104>)
 800ab12:	4132      	asrs	r2, r6
 800ab14:	ea01 0702 	and.w	r7, r1, r2
 800ab18:	4307      	orrs	r7, r0
 800ab1a:	d0f5      	beq.n	800ab08 <rint+0x70>
 800ab1c:	0852      	lsrs	r2, r2, #1
 800ab1e:	4011      	ands	r1, r2
 800ab20:	430c      	orrs	r4, r1
 800ab22:	d00b      	beq.n	800ab3c <rint+0xa4>
 800ab24:	ea23 0202 	bic.w	r2, r3, r2
 800ab28:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ab2c:	2e13      	cmp	r6, #19
 800ab2e:	fa43 f306 	asr.w	r3, r3, r6
 800ab32:	bf0c      	ite	eq
 800ab34:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800ab38:	2400      	movne	r4, #0
 800ab3a:	4313      	orrs	r3, r2
 800ab3c:	4916      	ldr	r1, [pc, #88]	; (800ab98 <rint+0x100>)
 800ab3e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800ab42:	4622      	mov	r2, r4
 800ab44:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ab48:	4620      	mov	r0, r4
 800ab4a:	4629      	mov	r1, r5
 800ab4c:	f7f5 fbae 	bl	80002ac <__adddf3>
 800ab50:	e9cd 0100 	strd	r0, r1, [sp]
 800ab54:	4622      	mov	r2, r4
 800ab56:	462b      	mov	r3, r5
 800ab58:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ab5c:	f7f5 fba4 	bl	80002a8 <__aeabi_dsub>
 800ab60:	e7d2      	b.n	800ab08 <rint+0x70>
 800ab62:	2e33      	cmp	r6, #51	; 0x33
 800ab64:	dd07      	ble.n	800ab76 <rint+0xde>
 800ab66:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ab6a:	d1cd      	bne.n	800ab08 <rint+0x70>
 800ab6c:	ee10 2a10 	vmov	r2, s0
 800ab70:	f7f5 fb9c 	bl	80002ac <__adddf3>
 800ab74:	e7c8      	b.n	800ab08 <rint+0x70>
 800ab76:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800ab7a:	f04f 32ff 	mov.w	r2, #4294967295
 800ab7e:	40f2      	lsrs	r2, r6
 800ab80:	4210      	tst	r0, r2
 800ab82:	d0c1      	beq.n	800ab08 <rint+0x70>
 800ab84:	0852      	lsrs	r2, r2, #1
 800ab86:	4210      	tst	r0, r2
 800ab88:	bf1f      	itttt	ne
 800ab8a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800ab8e:	ea20 0202 	bicne.w	r2, r0, r2
 800ab92:	4134      	asrne	r4, r6
 800ab94:	4314      	orrne	r4, r2
 800ab96:	e7d1      	b.n	800ab3c <rint+0xa4>
 800ab98:	0800b100 	.word	0x0800b100
 800ab9c:	000fffff 	.word	0x000fffff

0800aba0 <scalbn>:
 800aba0:	b570      	push	{r4, r5, r6, lr}
 800aba2:	ec55 4b10 	vmov	r4, r5, d0
 800aba6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800abaa:	4606      	mov	r6, r0
 800abac:	462b      	mov	r3, r5
 800abae:	b9aa      	cbnz	r2, 800abdc <scalbn+0x3c>
 800abb0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800abb4:	4323      	orrs	r3, r4
 800abb6:	d03b      	beq.n	800ac30 <scalbn+0x90>
 800abb8:	4b31      	ldr	r3, [pc, #196]	; (800ac80 <scalbn+0xe0>)
 800abba:	4629      	mov	r1, r5
 800abbc:	2200      	movs	r2, #0
 800abbe:	ee10 0a10 	vmov	r0, s0
 800abc2:	f7f5 fd29 	bl	8000618 <__aeabi_dmul>
 800abc6:	4b2f      	ldr	r3, [pc, #188]	; (800ac84 <scalbn+0xe4>)
 800abc8:	429e      	cmp	r6, r3
 800abca:	4604      	mov	r4, r0
 800abcc:	460d      	mov	r5, r1
 800abce:	da12      	bge.n	800abf6 <scalbn+0x56>
 800abd0:	a327      	add	r3, pc, #156	; (adr r3, 800ac70 <scalbn+0xd0>)
 800abd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd6:	f7f5 fd1f 	bl	8000618 <__aeabi_dmul>
 800abda:	e009      	b.n	800abf0 <scalbn+0x50>
 800abdc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800abe0:	428a      	cmp	r2, r1
 800abe2:	d10c      	bne.n	800abfe <scalbn+0x5e>
 800abe4:	ee10 2a10 	vmov	r2, s0
 800abe8:	4620      	mov	r0, r4
 800abea:	4629      	mov	r1, r5
 800abec:	f7f5 fb5e 	bl	80002ac <__adddf3>
 800abf0:	4604      	mov	r4, r0
 800abf2:	460d      	mov	r5, r1
 800abf4:	e01c      	b.n	800ac30 <scalbn+0x90>
 800abf6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800abfa:	460b      	mov	r3, r1
 800abfc:	3a36      	subs	r2, #54	; 0x36
 800abfe:	4432      	add	r2, r6
 800ac00:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ac04:	428a      	cmp	r2, r1
 800ac06:	dd0b      	ble.n	800ac20 <scalbn+0x80>
 800ac08:	ec45 4b11 	vmov	d1, r4, r5
 800ac0c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800ac78 <scalbn+0xd8>
 800ac10:	f000 f83c 	bl	800ac8c <copysign>
 800ac14:	a318      	add	r3, pc, #96	; (adr r3, 800ac78 <scalbn+0xd8>)
 800ac16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac1a:	ec51 0b10 	vmov	r0, r1, d0
 800ac1e:	e7da      	b.n	800abd6 <scalbn+0x36>
 800ac20:	2a00      	cmp	r2, #0
 800ac22:	dd08      	ble.n	800ac36 <scalbn+0x96>
 800ac24:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ac28:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ac2c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ac30:	ec45 4b10 	vmov	d0, r4, r5
 800ac34:	bd70      	pop	{r4, r5, r6, pc}
 800ac36:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ac3a:	da0d      	bge.n	800ac58 <scalbn+0xb8>
 800ac3c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ac40:	429e      	cmp	r6, r3
 800ac42:	ec45 4b11 	vmov	d1, r4, r5
 800ac46:	dce1      	bgt.n	800ac0c <scalbn+0x6c>
 800ac48:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800ac70 <scalbn+0xd0>
 800ac4c:	f000 f81e 	bl	800ac8c <copysign>
 800ac50:	a307      	add	r3, pc, #28	; (adr r3, 800ac70 <scalbn+0xd0>)
 800ac52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac56:	e7e0      	b.n	800ac1a <scalbn+0x7a>
 800ac58:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ac5c:	3236      	adds	r2, #54	; 0x36
 800ac5e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ac62:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ac66:	4620      	mov	r0, r4
 800ac68:	4629      	mov	r1, r5
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	4b06      	ldr	r3, [pc, #24]	; (800ac88 <scalbn+0xe8>)
 800ac6e:	e7b2      	b.n	800abd6 <scalbn+0x36>
 800ac70:	c2f8f359 	.word	0xc2f8f359
 800ac74:	01a56e1f 	.word	0x01a56e1f
 800ac78:	8800759c 	.word	0x8800759c
 800ac7c:	7e37e43c 	.word	0x7e37e43c
 800ac80:	43500000 	.word	0x43500000
 800ac84:	ffff3cb0 	.word	0xffff3cb0
 800ac88:	3c900000 	.word	0x3c900000

0800ac8c <copysign>:
 800ac8c:	ec51 0b10 	vmov	r0, r1, d0
 800ac90:	ee11 0a90 	vmov	r0, s3
 800ac94:	ee10 2a10 	vmov	r2, s0
 800ac98:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ac9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800aca0:	ea41 0300 	orr.w	r3, r1, r0
 800aca4:	ec43 2b10 	vmov	d0, r2, r3
 800aca8:	4770      	bx	lr
	...

0800acac <_init>:
 800acac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acae:	bf00      	nop
 800acb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acb2:	bc08      	pop	{r3}
 800acb4:	469e      	mov	lr, r3
 800acb6:	4770      	bx	lr

0800acb8 <_fini>:
 800acb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acba:	bf00      	nop
 800acbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acbe:	bc08      	pop	{r3}
 800acc0:	469e      	mov	lr, r3
 800acc2:	4770      	bx	lr
