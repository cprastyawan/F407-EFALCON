
F407-EFALCON.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc4c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b8  0800cde0  0800cde0  0001cde0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d398  0800d398  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d398  0800d398  0001d398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d3a0  0800d3a0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d3a0  0800d3a0  0001d3a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d3a4  0800d3a4  0001d3a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800d3a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b68  200001e0  0800d588  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d48  0800d588  00020d48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014b5d  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000028af  00000000  00000000  00034d6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011d0  00000000  00000000  00037620  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010d0  00000000  00000000  000387f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000223fe  00000000  00000000  000398c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000db34  00000000  00000000  0005bcbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ce52d  00000000  00000000  000697f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00137d1f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005848  00000000  00000000  00137d9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cdc4 	.word	0x0800cdc4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800cdc4 	.word	0x0800cdc4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_ldivmod>:
 8000c48:	b97b      	cbnz	r3, 8000c6a <__aeabi_ldivmod+0x22>
 8000c4a:	b972      	cbnz	r2, 8000c6a <__aeabi_ldivmod+0x22>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bfbe      	ittt	lt
 8000c50:	2000      	movlt	r0, #0
 8000c52:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c56:	e006      	blt.n	8000c66 <__aeabi_ldivmod+0x1e>
 8000c58:	bf08      	it	eq
 8000c5a:	2800      	cmpeq	r0, #0
 8000c5c:	bf1c      	itt	ne
 8000c5e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c62:	f04f 30ff 	movne.w	r0, #4294967295
 8000c66:	f000 b9bd 	b.w	8000fe4 <__aeabi_idiv0>
 8000c6a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c6e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c72:	2900      	cmp	r1, #0
 8000c74:	db09      	blt.n	8000c8a <__aeabi_ldivmod+0x42>
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	db1a      	blt.n	8000cb0 <__aeabi_ldivmod+0x68>
 8000c7a:	f000 f84d 	bl	8000d18 <__udivmoddi4>
 8000c7e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c86:	b004      	add	sp, #16
 8000c88:	4770      	bx	lr
 8000c8a:	4240      	negs	r0, r0
 8000c8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	db1b      	blt.n	8000ccc <__aeabi_ldivmod+0x84>
 8000c94:	f000 f840 	bl	8000d18 <__udivmoddi4>
 8000c98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca0:	b004      	add	sp, #16
 8000ca2:	4240      	negs	r0, r0
 8000ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca8:	4252      	negs	r2, r2
 8000caa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cae:	4770      	bx	lr
 8000cb0:	4252      	negs	r2, r2
 8000cb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cb6:	f000 f82f 	bl	8000d18 <__udivmoddi4>
 8000cba:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc2:	b004      	add	sp, #16
 8000cc4:	4240      	negs	r0, r0
 8000cc6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cca:	4770      	bx	lr
 8000ccc:	4252      	negs	r2, r2
 8000cce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd2:	f000 f821 	bl	8000d18 <__udivmoddi4>
 8000cd6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cde:	b004      	add	sp, #16
 8000ce0:	4252      	negs	r2, r2
 8000ce2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b972 	b.w	8000fe4 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f806 	bl	8000d18 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__udivmoddi4>:
 8000d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d1c:	9e08      	ldr	r6, [sp, #32]
 8000d1e:	4604      	mov	r4, r0
 8000d20:	4688      	mov	r8, r1
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d14b      	bne.n	8000dbe <__udivmoddi4+0xa6>
 8000d26:	428a      	cmp	r2, r1
 8000d28:	4615      	mov	r5, r2
 8000d2a:	d967      	bls.n	8000dfc <__udivmoddi4+0xe4>
 8000d2c:	fab2 f282 	clz	r2, r2
 8000d30:	b14a      	cbz	r2, 8000d46 <__udivmoddi4+0x2e>
 8000d32:	f1c2 0720 	rsb	r7, r2, #32
 8000d36:	fa01 f302 	lsl.w	r3, r1, r2
 8000d3a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d3e:	4095      	lsls	r5, r2
 8000d40:	ea47 0803 	orr.w	r8, r7, r3
 8000d44:	4094      	lsls	r4, r2
 8000d46:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d4a:	0c23      	lsrs	r3, r4, #16
 8000d4c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d50:	fa1f fc85 	uxth.w	ip, r5
 8000d54:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d58:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d5c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d60:	4299      	cmp	r1, r3
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x60>
 8000d64:	18eb      	adds	r3, r5, r3
 8000d66:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d6a:	f080 811b 	bcs.w	8000fa4 <__udivmoddi4+0x28c>
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	f240 8118 	bls.w	8000fa4 <__udivmoddi4+0x28c>
 8000d74:	3f02      	subs	r7, #2
 8000d76:	442b      	add	r3, r5
 8000d78:	1a5b      	subs	r3, r3, r1
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d88:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d8c:	45a4      	cmp	ip, r4
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x8c>
 8000d90:	192c      	adds	r4, r5, r4
 8000d92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d96:	f080 8107 	bcs.w	8000fa8 <__udivmoddi4+0x290>
 8000d9a:	45a4      	cmp	ip, r4
 8000d9c:	f240 8104 	bls.w	8000fa8 <__udivmoddi4+0x290>
 8000da0:	3802      	subs	r0, #2
 8000da2:	442c      	add	r4, r5
 8000da4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000da8:	eba4 040c 	sub.w	r4, r4, ip
 8000dac:	2700      	movs	r7, #0
 8000dae:	b11e      	cbz	r6, 8000db8 <__udivmoddi4+0xa0>
 8000db0:	40d4      	lsrs	r4, r2
 8000db2:	2300      	movs	r3, #0
 8000db4:	e9c6 4300 	strd	r4, r3, [r6]
 8000db8:	4639      	mov	r1, r7
 8000dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d909      	bls.n	8000dd6 <__udivmoddi4+0xbe>
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	f000 80eb 	beq.w	8000f9e <__udivmoddi4+0x286>
 8000dc8:	2700      	movs	r7, #0
 8000dca:	e9c6 0100 	strd	r0, r1, [r6]
 8000dce:	4638      	mov	r0, r7
 8000dd0:	4639      	mov	r1, r7
 8000dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd6:	fab3 f783 	clz	r7, r3
 8000dda:	2f00      	cmp	r7, #0
 8000ddc:	d147      	bne.n	8000e6e <__udivmoddi4+0x156>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d302      	bcc.n	8000de8 <__udivmoddi4+0xd0>
 8000de2:	4282      	cmp	r2, r0
 8000de4:	f200 80fa 	bhi.w	8000fdc <__udivmoddi4+0x2c4>
 8000de8:	1a84      	subs	r4, r0, r2
 8000dea:	eb61 0303 	sbc.w	r3, r1, r3
 8000dee:	2001      	movs	r0, #1
 8000df0:	4698      	mov	r8, r3
 8000df2:	2e00      	cmp	r6, #0
 8000df4:	d0e0      	beq.n	8000db8 <__udivmoddi4+0xa0>
 8000df6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dfa:	e7dd      	b.n	8000db8 <__udivmoddi4+0xa0>
 8000dfc:	b902      	cbnz	r2, 8000e00 <__udivmoddi4+0xe8>
 8000dfe:	deff      	udf	#255	; 0xff
 8000e00:	fab2 f282 	clz	r2, r2
 8000e04:	2a00      	cmp	r2, #0
 8000e06:	f040 808f 	bne.w	8000f28 <__udivmoddi4+0x210>
 8000e0a:	1b49      	subs	r1, r1, r5
 8000e0c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e10:	fa1f f885 	uxth.w	r8, r5
 8000e14:	2701      	movs	r7, #1
 8000e16:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e1a:	0c23      	lsrs	r3, r4, #16
 8000e1c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e24:	fb08 f10c 	mul.w	r1, r8, ip
 8000e28:	4299      	cmp	r1, r3
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x124>
 8000e2c:	18eb      	adds	r3, r5, r3
 8000e2e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e32:	d202      	bcs.n	8000e3a <__udivmoddi4+0x122>
 8000e34:	4299      	cmp	r1, r3
 8000e36:	f200 80cd 	bhi.w	8000fd4 <__udivmoddi4+0x2bc>
 8000e3a:	4684      	mov	ip, r0
 8000e3c:	1a59      	subs	r1, r3, r1
 8000e3e:	b2a3      	uxth	r3, r4
 8000e40:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e44:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e48:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e4c:	fb08 f800 	mul.w	r8, r8, r0
 8000e50:	45a0      	cmp	r8, r4
 8000e52:	d907      	bls.n	8000e64 <__udivmoddi4+0x14c>
 8000e54:	192c      	adds	r4, r5, r4
 8000e56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e5a:	d202      	bcs.n	8000e62 <__udivmoddi4+0x14a>
 8000e5c:	45a0      	cmp	r8, r4
 8000e5e:	f200 80b6 	bhi.w	8000fce <__udivmoddi4+0x2b6>
 8000e62:	4618      	mov	r0, r3
 8000e64:	eba4 0408 	sub.w	r4, r4, r8
 8000e68:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e6c:	e79f      	b.n	8000dae <__udivmoddi4+0x96>
 8000e6e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e72:	40bb      	lsls	r3, r7
 8000e74:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e78:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e7c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e80:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e84:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e88:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e8c:	4325      	orrs	r5, r4
 8000e8e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e92:	0c2c      	lsrs	r4, r5, #16
 8000e94:	fb08 3319 	mls	r3, r8, r9, r3
 8000e98:	fa1f fa8e 	uxth.w	sl, lr
 8000e9c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ea0:	fb09 f40a 	mul.w	r4, r9, sl
 8000ea4:	429c      	cmp	r4, r3
 8000ea6:	fa02 f207 	lsl.w	r2, r2, r7
 8000eaa:	fa00 f107 	lsl.w	r1, r0, r7
 8000eae:	d90b      	bls.n	8000ec8 <__udivmoddi4+0x1b0>
 8000eb0:	eb1e 0303 	adds.w	r3, lr, r3
 8000eb4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eb8:	f080 8087 	bcs.w	8000fca <__udivmoddi4+0x2b2>
 8000ebc:	429c      	cmp	r4, r3
 8000ebe:	f240 8084 	bls.w	8000fca <__udivmoddi4+0x2b2>
 8000ec2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ec6:	4473      	add	r3, lr
 8000ec8:	1b1b      	subs	r3, r3, r4
 8000eca:	b2ad      	uxth	r5, r5
 8000ecc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ed0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ed4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ed8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000edc:	45a2      	cmp	sl, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1da>
 8000ee0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ee4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ee8:	d26b      	bcs.n	8000fc2 <__udivmoddi4+0x2aa>
 8000eea:	45a2      	cmp	sl, r4
 8000eec:	d969      	bls.n	8000fc2 <__udivmoddi4+0x2aa>
 8000eee:	3802      	subs	r0, #2
 8000ef0:	4474      	add	r4, lr
 8000ef2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ef6:	fba0 8902 	umull	r8, r9, r0, r2
 8000efa:	eba4 040a 	sub.w	r4, r4, sl
 8000efe:	454c      	cmp	r4, r9
 8000f00:	46c2      	mov	sl, r8
 8000f02:	464b      	mov	r3, r9
 8000f04:	d354      	bcc.n	8000fb0 <__udivmoddi4+0x298>
 8000f06:	d051      	beq.n	8000fac <__udivmoddi4+0x294>
 8000f08:	2e00      	cmp	r6, #0
 8000f0a:	d069      	beq.n	8000fe0 <__udivmoddi4+0x2c8>
 8000f0c:	ebb1 050a 	subs.w	r5, r1, sl
 8000f10:	eb64 0403 	sbc.w	r4, r4, r3
 8000f14:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f18:	40fd      	lsrs	r5, r7
 8000f1a:	40fc      	lsrs	r4, r7
 8000f1c:	ea4c 0505 	orr.w	r5, ip, r5
 8000f20:	e9c6 5400 	strd	r5, r4, [r6]
 8000f24:	2700      	movs	r7, #0
 8000f26:	e747      	b.n	8000db8 <__udivmoddi4+0xa0>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f30:	4095      	lsls	r5, r2
 8000f32:	fa01 f002 	lsl.w	r0, r1, r2
 8000f36:	fa21 f303 	lsr.w	r3, r1, r3
 8000f3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f3e:	4338      	orrs	r0, r7
 8000f40:	0c01      	lsrs	r1, r0, #16
 8000f42:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f46:	fa1f f885 	uxth.w	r8, r5
 8000f4a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f52:	fb07 f308 	mul.w	r3, r7, r8
 8000f56:	428b      	cmp	r3, r1
 8000f58:	fa04 f402 	lsl.w	r4, r4, r2
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x256>
 8000f5e:	1869      	adds	r1, r5, r1
 8000f60:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f64:	d22f      	bcs.n	8000fc6 <__udivmoddi4+0x2ae>
 8000f66:	428b      	cmp	r3, r1
 8000f68:	d92d      	bls.n	8000fc6 <__udivmoddi4+0x2ae>
 8000f6a:	3f02      	subs	r7, #2
 8000f6c:	4429      	add	r1, r5
 8000f6e:	1acb      	subs	r3, r1, r3
 8000f70:	b281      	uxth	r1, r0
 8000f72:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f76:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb00 f308 	mul.w	r3, r0, r8
 8000f82:	428b      	cmp	r3, r1
 8000f84:	d907      	bls.n	8000f96 <__udivmoddi4+0x27e>
 8000f86:	1869      	adds	r1, r5, r1
 8000f88:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f8c:	d217      	bcs.n	8000fbe <__udivmoddi4+0x2a6>
 8000f8e:	428b      	cmp	r3, r1
 8000f90:	d915      	bls.n	8000fbe <__udivmoddi4+0x2a6>
 8000f92:	3802      	subs	r0, #2
 8000f94:	4429      	add	r1, r5
 8000f96:	1ac9      	subs	r1, r1, r3
 8000f98:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f9c:	e73b      	b.n	8000e16 <__udivmoddi4+0xfe>
 8000f9e:	4637      	mov	r7, r6
 8000fa0:	4630      	mov	r0, r6
 8000fa2:	e709      	b.n	8000db8 <__udivmoddi4+0xa0>
 8000fa4:	4607      	mov	r7, r0
 8000fa6:	e6e7      	b.n	8000d78 <__udivmoddi4+0x60>
 8000fa8:	4618      	mov	r0, r3
 8000faa:	e6fb      	b.n	8000da4 <__udivmoddi4+0x8c>
 8000fac:	4541      	cmp	r1, r8
 8000fae:	d2ab      	bcs.n	8000f08 <__udivmoddi4+0x1f0>
 8000fb0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000fb4:	eb69 020e 	sbc.w	r2, r9, lr
 8000fb8:	3801      	subs	r0, #1
 8000fba:	4613      	mov	r3, r2
 8000fbc:	e7a4      	b.n	8000f08 <__udivmoddi4+0x1f0>
 8000fbe:	4660      	mov	r0, ip
 8000fc0:	e7e9      	b.n	8000f96 <__udivmoddi4+0x27e>
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	e795      	b.n	8000ef2 <__udivmoddi4+0x1da>
 8000fc6:	4667      	mov	r7, ip
 8000fc8:	e7d1      	b.n	8000f6e <__udivmoddi4+0x256>
 8000fca:	4681      	mov	r9, r0
 8000fcc:	e77c      	b.n	8000ec8 <__udivmoddi4+0x1b0>
 8000fce:	3802      	subs	r0, #2
 8000fd0:	442c      	add	r4, r5
 8000fd2:	e747      	b.n	8000e64 <__udivmoddi4+0x14c>
 8000fd4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fd8:	442b      	add	r3, r5
 8000fda:	e72f      	b.n	8000e3c <__udivmoddi4+0x124>
 8000fdc:	4638      	mov	r0, r7
 8000fde:	e708      	b.n	8000df2 <__udivmoddi4+0xda>
 8000fe0:	4637      	mov	r7, r6
 8000fe2:	e6e9      	b.n	8000db8 <__udivmoddi4+0xa0>

08000fe4 <__aeabi_idiv0>:
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop

08000fe8 <HMC5883L_initialize>:
 * averaging, 15 Hz data output rate, normal measurement bias, a,d 1090 gain (in
 * terms of LSB/Gauss). Be sure to adjust any settings you need specifically
 * after initialization, especially the gain settings if you happen to be seeing
 * a lot of -4096 values (see the datasheet for mor information).
 */
void HMC5883L_initialize() {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
    devAddr = HMC5883L_DEFAULT_ADDRESS;
 8000fec:	4b08      	ldr	r3, [pc, #32]	; (8001010 <HMC5883L_initialize+0x28>)
 8000fee:	221e      	movs	r2, #30
 8000ff0:	701a      	strb	r2, [r3, #0]
    // write CONFIG_A register
    I2Cdev_writeByte(devAddr, HMC5883L_RA_CONFIG_A,
 8000ff2:	4b07      	ldr	r3, [pc, #28]	; (8001010 <HMC5883L_initialize+0x28>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	2270      	movs	r2, #112	; 0x70
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 f8a8 	bl	8001150 <I2Cdev_writeByte>
        (HMC5883L_AVERAGING_8 << (HMC5883L_CRA_AVERAGE_BIT - HMC5883L_CRA_AVERAGE_LENGTH + 1)) |
        (HMC5883L_RATE_15     << (HMC5883L_CRA_RATE_BIT - HMC5883L_CRA_RATE_LENGTH + 1)) |
        (HMC5883L_BIAS_NORMAL << (HMC5883L_CRA_BIAS_BIT - HMC5883L_CRA_BIAS_LENGTH + 1)));

    // write CONFIG_B register
    HMC5883L_setGain(HMC5883L_GAIN_1090);
 8001000:	2001      	movs	r0, #1
 8001002:	f000 f831 	bl	8001068 <HMC5883L_setGain>

    // write MODE register
    HMC5883L_setMode(HMC5883L_MODE_CONTINUOUS);
 8001006:	2000      	movs	r0, #0
 8001008:	f000 f842 	bl	8001090 <HMC5883L_setMode>
}
 800100c:	bf00      	nop
 800100e:	bd80      	pop	{r7, pc}
 8001010:	200001fc 	.word	0x200001fc

08001014 <HMC5883L_testConnection>:

/** Verify the I2C connection.
 * Make sure the device is connected and responds as expected.
 * @return True if connection is valid, false otherwise
 */
bool HMC5883L_testConnection() {
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af02      	add	r7, sp, #8
    if (I2Cdev_readBytes(devAddr, HMC5883L_RA_ID_A, 3, buffer, 0) == 3) {
 800101a:	4b11      	ldr	r3, [pc, #68]	; (8001060 <HMC5883L_testConnection+0x4c>)
 800101c:	7818      	ldrb	r0, [r3, #0]
 800101e:	2300      	movs	r3, #0
 8001020:	9300      	str	r3, [sp, #0]
 8001022:	4b10      	ldr	r3, [pc, #64]	; (8001064 <HMC5883L_testConnection+0x50>)
 8001024:	2203      	movs	r2, #3
 8001026:	210a      	movs	r1, #10
 8001028:	f000 f85a 	bl	80010e0 <I2Cdev_readBytes>
 800102c:	4603      	mov	r3, r0
 800102e:	2b03      	cmp	r3, #3
 8001030:	d112      	bne.n	8001058 <HMC5883L_testConnection+0x44>
        return (buffer[0] == 'H' && buffer[1] == '4' && buffer[2] == '3');
 8001032:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <HMC5883L_testConnection+0x50>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	2b48      	cmp	r3, #72	; 0x48
 8001038:	d109      	bne.n	800104e <HMC5883L_testConnection+0x3a>
 800103a:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <HMC5883L_testConnection+0x50>)
 800103c:	785b      	ldrb	r3, [r3, #1]
 800103e:	2b34      	cmp	r3, #52	; 0x34
 8001040:	d105      	bne.n	800104e <HMC5883L_testConnection+0x3a>
 8001042:	4b08      	ldr	r3, [pc, #32]	; (8001064 <HMC5883L_testConnection+0x50>)
 8001044:	789b      	ldrb	r3, [r3, #2]
 8001046:	2b33      	cmp	r3, #51	; 0x33
 8001048:	d101      	bne.n	800104e <HMC5883L_testConnection+0x3a>
 800104a:	2301      	movs	r3, #1
 800104c:	e000      	b.n	8001050 <HMC5883L_testConnection+0x3c>
 800104e:	2300      	movs	r3, #0
 8001050:	f003 0301 	and.w	r3, r3, #1
 8001054:	b2db      	uxtb	r3, r3
 8001056:	e000      	b.n	800105a <HMC5883L_testConnection+0x46>
    }
    return false;
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	200001fc 	.word	0x200001fc
 8001064:	20000200 	.word	0x20000200

08001068 <HMC5883L_setGain>:
 * @see getGain()
 * @see HMC5883L_RA_CONFIG_B
 * @see HMC5883L_CRB_GAIN_BIT
 * @see HMC5883L_CRB_GAIN_LENGTH
 */
void HMC5883L_setGain(uint8_t gain) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
    // use this method to guarantee that bits 4-0 are set to zero, which is a
    // requirement specified in the datasheet; it's actually more efficient than
    // using the I2Cdev.writeBits method
    I2Cdev_writeByte(devAddr, HMC5883L_RA_CONFIG_B, gain << (HMC5883L_CRB_GAIN_BIT - HMC5883L_CRB_GAIN_LENGTH + 1));
 8001072:	4b06      	ldr	r3, [pc, #24]	; (800108c <HMC5883L_setGain+0x24>)
 8001074:	7818      	ldrb	r0, [r3, #0]
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	015b      	lsls	r3, r3, #5
 800107a:	b2db      	uxtb	r3, r3
 800107c:	461a      	mov	r2, r3
 800107e:	2101      	movs	r1, #1
 8001080:	f000 f866 	bl	8001150 <I2Cdev_writeByte>
}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	200001fc 	.word	0x200001fc

08001090 <HMC5883L_setMode>:
 * @see HMC5883L_MODE_IDLE
 * @see HMC5883L_RA_MODE
 * @see HMC5883L_MODEREG_BIT
 * @see HMC5883L_MODEREG_LENGTH
 */
void HMC5883L_setMode(uint8_t newMode) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	71fb      	strb	r3, [r7, #7]
    // use this method to guarantee that bits 7-2 are set to zero, which is a
    // requirement specified in the datasheet; it's actually more efficient than
    // using the I2Cdev.writeBits method
    I2Cdev_writeByte(devAddr, HMC5883L_RA_MODE, newMode << (HMC5883L_MODEREG_BIT - HMC5883L_MODEREG_LENGTH + 1));
 800109a:	4b07      	ldr	r3, [pc, #28]	; (80010b8 <HMC5883L_setMode+0x28>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	79fa      	ldrb	r2, [r7, #7]
 80010a0:	2102      	movs	r1, #2
 80010a2:	4618      	mov	r0, r3
 80010a4:	f000 f854 	bl	8001150 <I2Cdev_writeByte>
    mode = newMode; // track to tell if we have to clear bit 7 after a read
 80010a8:	4a04      	ldr	r2, [pc, #16]	; (80010bc <HMC5883L_setMode+0x2c>)
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	7013      	strb	r3, [r2, #0]
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	200001fc 	.word	0x200001fc
 80010bc:	20000206 	.word	0x20000206

080010c0 <I2Cdev_init>:
uint16_t I2Cdev_readTimeout = I2CDEV_DEFAULT_READ_TIMEOUT;

/** Sets device handle to use for communications
 * You can call this function and set any other device at any moment
 */
void I2Cdev_init(I2C_HandleTypeDef * hi2c){
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	I2Cdev_hi2c = hi2c;
 80010c8:	4a04      	ldr	r2, [pc, #16]	; (80010dc <I2Cdev_init+0x1c>)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6013      	str	r3, [r2, #0]
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	20000208 	.word	0x20000208

080010e0 <I2Cdev_readBytes>:
 * @param data Buffer to store read data in
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev_readTimeout)
 * @return Number of bytes read (-1 indicates failure)
 */
uint8_t I2Cdev_readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data, uint16_t timeout)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af02      	add	r7, sp, #8
 80010e6:	603b      	str	r3, [r7, #0]
 80010e8:	4603      	mov	r3, r0
 80010ea:	71fb      	strb	r3, [r7, #7]
 80010ec:	460b      	mov	r3, r1
 80010ee:	71bb      	strb	r3, [r7, #6]
 80010f0:	4613      	mov	r3, r2
 80010f2:	717b      	strb	r3, [r7, #5]
    uint16_t tout = timeout > 0 ? timeout : I2CDEV_DEFAULT_READ_TIMEOUT;
 80010f4:	8b3b      	ldrh	r3, [r7, #24]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <I2Cdev_readBytes+0x1e>
 80010fa:	8b3b      	ldrh	r3, [r7, #24]
 80010fc:	e001      	b.n	8001102 <I2Cdev_readBytes+0x22>
 80010fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001102:	81fb      	strh	r3, [r7, #14]

    HAL_I2C_Master_Transmit(I2Cdev_hi2c, devAddr << 1, &regAddr, 1, tout);
 8001104:	4b11      	ldr	r3, [pc, #68]	; (800114c <I2Cdev_readBytes+0x6c>)
 8001106:	6818      	ldr	r0, [r3, #0]
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	b29b      	uxth	r3, r3
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	b299      	uxth	r1, r3
 8001110:	89fb      	ldrh	r3, [r7, #14]
 8001112:	1dba      	adds	r2, r7, #6
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	2301      	movs	r3, #1
 8001118:	f004 fd34 	bl	8005b84 <HAL_I2C_Master_Transmit>
    if (HAL_I2C_Master_Receive(I2Cdev_hi2c, devAddr << 1, data, length, tout) == HAL_OK) return length;
 800111c:	4b0b      	ldr	r3, [pc, #44]	; (800114c <I2Cdev_readBytes+0x6c>)
 800111e:	6818      	ldr	r0, [r3, #0]
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	b29b      	uxth	r3, r3
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	b299      	uxth	r1, r3
 8001128:	797b      	ldrb	r3, [r7, #5]
 800112a:	b29a      	uxth	r2, r3
 800112c:	89fb      	ldrh	r3, [r7, #14]
 800112e:	9300      	str	r3, [sp, #0]
 8001130:	4613      	mov	r3, r2
 8001132:	683a      	ldr	r2, [r7, #0]
 8001134:	f004 fe24 	bl	8005d80 <HAL_I2C_Master_Receive>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d101      	bne.n	8001142 <I2Cdev_readBytes+0x62>
 800113e:	797b      	ldrb	r3, [r7, #5]
 8001140:	e000      	b.n	8001144 <I2Cdev_readBytes+0x64>
    return -1;
 8001142:	23ff      	movs	r3, #255	; 0xff
}
 8001144:	4618      	mov	r0, r3
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20000208 	.word	0x20000208

08001150 <I2Cdev_writeByte>:
 * @param regAddr Register address to write to
 * @param data New byte value to write
 * @return Status of operation (true = success)
 */
uint16_t I2Cdev_writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
 800115a:	460b      	mov	r3, r1
 800115c:	71bb      	strb	r3, [r7, #6]
 800115e:	4613      	mov	r3, r2
 8001160:	717b      	strb	r3, [r7, #5]
    return I2Cdev_writeBytes(devAddr, regAddr, 1, &data);
 8001162:	1d7b      	adds	r3, r7, #5
 8001164:	79b9      	ldrb	r1, [r7, #6]
 8001166:	79f8      	ldrb	r0, [r7, #7]
 8001168:	2201      	movs	r2, #1
 800116a:	f000 f805 	bl	8001178 <I2Cdev_writeBytes>
 800116e:	4603      	mov	r3, r0
}
 8001170:	4618      	mov	r0, r3
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <I2Cdev_writeBytes>:
 * @param length Number of bytes to write
 * @param data Buffer to copy new data from
 * @return Status of operation (true = success)
 */
uint16_t I2Cdev_writeBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t* pData)
{
 8001178:	b590      	push	{r4, r7, lr}
 800117a:	b089      	sub	sp, #36	; 0x24
 800117c:	af04      	add	r7, sp, #16
 800117e:	603b      	str	r3, [r7, #0]
 8001180:	4603      	mov	r3, r0
 8001182:	71fb      	strb	r3, [r7, #7]
 8001184:	460b      	mov	r3, r1
 8001186:	71bb      	strb	r3, [r7, #6]
 8001188:	4613      	mov	r3, r2
 800118a:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef status = HAL_I2C_Mem_Write(I2Cdev_hi2c, devAddr << 1, regAddr, I2C_MEMADD_SIZE_8BIT, pData, length, 1000);
 800118c:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <I2Cdev_writeBytes+0x58>)
 800118e:	6818      	ldr	r0, [r3, #0]
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	b29b      	uxth	r3, r3
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	b299      	uxth	r1, r3
 8001198:	79bb      	ldrb	r3, [r7, #6]
 800119a:	b29c      	uxth	r4, r3
 800119c:	797b      	ldrb	r3, [r7, #5]
 800119e:	b29b      	uxth	r3, r3
 80011a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011a4:	9202      	str	r2, [sp, #8]
 80011a6:	9301      	str	r3, [sp, #4]
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	2301      	movs	r3, #1
 80011ae:	4622      	mov	r2, r4
 80011b0:	f005 f80c 	bl	80061cc <HAL_I2C_Mem_Write>
 80011b4:	4603      	mov	r3, r0
 80011b6:	73fb      	strb	r3, [r7, #15]
    return status == HAL_OK;
 80011b8:	7bfb      	ldrb	r3, [r7, #15]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	bf0c      	ite	eq
 80011be:	2301      	moveq	r3, #1
 80011c0:	2300      	movne	r3, #0
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	b29b      	uxth	r3, r3
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3714      	adds	r7, #20
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd90      	pop	{r4, r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000208 	.word	0x20000208

080011d4 <kalman_init>:
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	ed87 0a02 	vstr	s0, [r7, #8]
 80011e0:	edc7 0a01 	vstr	s1, [r7, #4]
 80011e4:	ed87 1a00 	vstr	s2, [r7]
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	683a      	ldr	r2, [r7, #0]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	bf00      	nop
 80011fc:	3714      	adds	r7, #20
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 8001206:	b480      	push	{r7}
 8001208:	b083      	sub	sp, #12
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2203      	movs	r2, #3
 8001212:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_2;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2201      	movs	r2, #1
 8001218:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_HIGH_RES;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2204      	movs	r2, #4
 800121e:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_ULTRA_LOW_POWER;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2201      	movs	r2, #1
 8001224:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_SKIPPED;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2200      	movs	r2, #0
 800122a:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_05;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	715a      	strb	r2, [r3, #5]
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 800123e:	b580      	push	{r7, lr}
 8001240:	b08a      	sub	sp, #40	; 0x28
 8001242:	af04      	add	r7, sp, #16
 8001244:	60f8      	str	r0, [r7, #12]
 8001246:	460b      	mov	r3, r1
 8001248:	607a      	str	r2, [r7, #4]
 800124a:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001258:	7afb      	ldrb	r3, [r7, #11]
 800125a:	b29a      	uxth	r2, r3
 800125c:	8af9      	ldrh	r1, [r7, #22]
 800125e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001262:	9302      	str	r3, [sp, #8]
 8001264:	2302      	movs	r3, #2
 8001266:	9301      	str	r3, [sp, #4]
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	9300      	str	r3, [sp, #0]
 800126e:	2301      	movs	r3, #1
 8001270:	f005 f8a6 	bl	80063c0 <HAL_I2C_Mem_Read>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d10b      	bne.n	8001292 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 800127a:	7d7b      	ldrb	r3, [r7, #21]
 800127c:	021b      	lsls	r3, r3, #8
 800127e:	b21a      	sxth	r2, r3
 8001280:	7d3b      	ldrb	r3, [r7, #20]
 8001282:	b21b      	sxth	r3, r3
 8001284:	4313      	orrs	r3, r2
 8001286:	b21b      	sxth	r3, r3
 8001288:	b29a      	uxth	r2, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	801a      	strh	r2, [r3, #0]
		return true;
 800128e:	2301      	movs	r3, #1
 8001290:	e000      	b.n	8001294 <read_register16+0x56>
	} else
		return false;
 8001292:	2300      	movs	r3, #0

}
 8001294:	4618      	mov	r0, r3
 8001296:	3718      	adds	r7, #24
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 800129c:	b590      	push	{r4, r7, lr}
 800129e:	b08b      	sub	sp, #44	; 0x2c
 80012a0:	af04      	add	r7, sp, #16
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	607a      	str	r2, [r7, #4]
 80012a6:	461a      	mov	r2, r3
 80012a8:	460b      	mov	r3, r1
 80012aa:	72fb      	strb	r3, [r7, #11]
 80012ac:	4613      	mov	r3, r2
 80012ae:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80012bc:	7afb      	ldrb	r3, [r7, #11]
 80012be:	b29c      	uxth	r4, r3
 80012c0:	7abb      	ldrb	r3, [r7, #10]
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	8af9      	ldrh	r1, [r7, #22]
 80012c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80012ca:	9202      	str	r2, [sp, #8]
 80012cc:	9301      	str	r3, [sp, #4]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	2301      	movs	r3, #1
 80012d4:	4622      	mov	r2, r4
 80012d6:	f005 f873 	bl	80063c0 <HAL_I2C_Mem_Read>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d101      	bne.n	80012e4 <read_data+0x48>
		return 0;
 80012e0:	2300      	movs	r3, #0
 80012e2:	e000      	b.n	80012e6 <read_data+0x4a>
	else
		return 1;
 80012e4:	2301      	movs	r3, #1

}
 80012e6:	4618      	mov	r0, r3
 80012e8:	371c      	adds	r7, #28
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd90      	pop	{r4, r7, pc}

080012ee <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b082      	sub	sp, #8
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	461a      	mov	r2, r3
 80012fa:	2188      	movs	r1, #136	; 0x88
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff ff9e 	bl	800123e <read_register16>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d06f      	beq.n	80013e8 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3302      	adds	r3, #2
 800130c:	461a      	mov	r2, r3
 800130e:	218a      	movs	r1, #138	; 0x8a
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f7ff ff94 	bl	800123e <read_register16>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d065      	beq.n	80013e8 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3304      	adds	r3, #4
 8001320:	461a      	mov	r2, r3
 8001322:	218c      	movs	r1, #140	; 0x8c
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff ff8a 	bl	800123e <read_register16>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d05b      	beq.n	80013e8 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3306      	adds	r3, #6
 8001334:	461a      	mov	r2, r3
 8001336:	218e      	movs	r1, #142	; 0x8e
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f7ff ff80 	bl	800123e <read_register16>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d051      	beq.n	80013e8 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3308      	adds	r3, #8
 8001348:	461a      	mov	r2, r3
 800134a:	2190      	movs	r1, #144	; 0x90
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f7ff ff76 	bl	800123e <read_register16>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d047      	beq.n	80013e8 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	330a      	adds	r3, #10
 800135c:	461a      	mov	r2, r3
 800135e:	2192      	movs	r1, #146	; 0x92
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff ff6c 	bl	800123e <read_register16>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d03d      	beq.n	80013e8 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	330c      	adds	r3, #12
 8001370:	461a      	mov	r2, r3
 8001372:	2194      	movs	r1, #148	; 0x94
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f7ff ff62 	bl	800123e <read_register16>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d033      	beq.n	80013e8 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	330e      	adds	r3, #14
 8001384:	461a      	mov	r2, r3
 8001386:	2196      	movs	r1, #150	; 0x96
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff ff58 	bl	800123e <read_register16>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d029      	beq.n	80013e8 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	3310      	adds	r3, #16
 8001398:	461a      	mov	r2, r3
 800139a:	2198      	movs	r1, #152	; 0x98
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f7ff ff4e 	bl	800123e <read_register16>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d01f      	beq.n	80013e8 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3312      	adds	r3, #18
 80013ac:	461a      	mov	r2, r3
 80013ae:	219a      	movs	r1, #154	; 0x9a
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f7ff ff44 	bl	800123e <read_register16>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d015      	beq.n	80013e8 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3314      	adds	r3, #20
 80013c0:	461a      	mov	r2, r3
 80013c2:	219c      	movs	r1, #156	; 0x9c
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7ff ff3a 	bl	800123e <read_register16>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d00b      	beq.n	80013e8 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 80013d4:	461a      	mov	r2, r3
 80013d6:	219e      	movs	r1, #158	; 0x9e
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f7ff ff30 	bl	800123e <read_register16>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <read_calibration_data+0xfa>

		return true;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e000      	b.n	80013ea <read_calibration_data+0xfc>
	}

	return false;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b084      	sub	sp, #16
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f103 0218 	add.w	r2, r3, #24
 8001400:	2301      	movs	r3, #1
 8001402:	21a1      	movs	r1, #161	; 0xa1
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f7ff ff49 	bl	800129c <read_data>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d14b      	bne.n	80014a8 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	331a      	adds	r3, #26
 8001414:	461a      	mov	r2, r3
 8001416:	21e1      	movs	r1, #225	; 0xe1
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f7ff ff10 	bl	800123e <read_register16>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d041      	beq.n	80014a8 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f103 021c 	add.w	r2, r3, #28
 800142a:	2301      	movs	r3, #1
 800142c:	21e3      	movs	r1, #227	; 0xe3
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f7ff ff34 	bl	800129c <read_data>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d136      	bne.n	80014a8 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 800143a:	f107 030e 	add.w	r3, r7, #14
 800143e:	461a      	mov	r2, r3
 8001440:	21e4      	movs	r1, #228	; 0xe4
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff fefb 	bl	800123e <read_register16>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d02c      	beq.n	80014a8 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 800144e:	f107 030c 	add.w	r3, r7, #12
 8001452:	461a      	mov	r2, r3
 8001454:	21e5      	movs	r1, #229	; 0xe5
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f7ff fef1 	bl	800123e <read_register16>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d022      	beq.n	80014a8 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8001468:	2301      	movs	r3, #1
 800146a:	21e7      	movs	r1, #231	; 0xe7
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f7ff ff15 	bl	800129c <read_data>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d117      	bne.n	80014a8 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8001478:	89fb      	ldrh	r3, [r7, #14]
 800147a:	011b      	lsls	r3, r3, #4
 800147c:	b21b      	sxth	r3, r3
 800147e:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 8001482:	b21a      	sxth	r2, r3
 8001484:	89fb      	ldrh	r3, [r7, #14]
 8001486:	121b      	asrs	r3, r3, #8
 8001488:	b21b      	sxth	r3, r3
 800148a:	f003 030f 	and.w	r3, r3, #15
 800148e:	b21b      	sxth	r3, r3
 8001490:	4313      	orrs	r3, r2
 8001492:	b21a      	sxth	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 8001498:	89bb      	ldrh	r3, [r7, #12]
 800149a:	091b      	lsrs	r3, r3, #4
 800149c:	b29b      	uxth	r3, r3
 800149e:	b21a      	sxth	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	841a      	strh	r2, [r3, #32]

		return true;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e000      	b.n	80014aa <read_hum_calibration_data+0xb8>
	}

	return false;
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b088      	sub	sp, #32
 80014b6:	af04      	add	r7, sp, #16
 80014b8:	6078      	str	r0, [r7, #4]
 80014ba:	460b      	mov	r3, r1
 80014bc:	70fb      	strb	r3, [r7, #3]
 80014be:	4613      	mov	r3, r2
 80014c0:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80014ce:	78fb      	ldrb	r3, [r7, #3]
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	89f9      	ldrh	r1, [r7, #14]
 80014d4:	f242 7310 	movw	r3, #10000	; 0x2710
 80014d8:	9302      	str	r3, [sp, #8]
 80014da:	2301      	movs	r3, #1
 80014dc:	9301      	str	r3, [sp, #4]
 80014de:	1cbb      	adds	r3, r7, #2
 80014e0:	9300      	str	r3, [sp, #0]
 80014e2:	2301      	movs	r3, #1
 80014e4:	f004 fe72 	bl	80061cc <HAL_I2C_Mem_Write>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d101      	bne.n	80014f2 <write_register8+0x40>
		return false;
 80014ee:	2300      	movs	r3, #0
 80014f0:	e000      	b.n	80014f4 <write_register8+0x42>
	else
		return true;
 80014f2:	2301      	movs	r3, #1
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3710      	adds	r7, #16
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800150a:	2b76      	cmp	r3, #118	; 0x76
 800150c:	d005      	beq.n	800151a <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001512:	2b77      	cmp	r3, #119	; 0x77
 8001514:	d001      	beq.n	800151a <bmp280_init+0x1e>

		return false;
 8001516:	2300      	movs	r3, #0
 8001518:	e099      	b.n	800164e <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001520:	2301      	movs	r3, #1
 8001522:	21d0      	movs	r1, #208	; 0xd0
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f7ff feb9 	bl	800129c <read_data>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <bmp280_init+0x38>
		return false;
 8001530:	2300      	movs	r3, #0
 8001532:	e08c      	b.n	800164e <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800153a:	2b58      	cmp	r3, #88	; 0x58
 800153c:	d006      	beq.n	800154c <bmp280_init+0x50>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001544:	2b60      	cmp	r3, #96	; 0x60
 8001546:	d001      	beq.n	800154c <bmp280_init+0x50>

		return false;
 8001548:	2300      	movs	r3, #0
 800154a:	e080      	b.n	800164e <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 800154c:	22b6      	movs	r2, #182	; 0xb6
 800154e:	21e0      	movs	r1, #224	; 0xe0
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7ff ffae 	bl	80014b2 <write_register8>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <bmp280_init+0x64>
		return false;
 800155c:	2300      	movs	r3, #0
 800155e:	e076      	b.n	800164e <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8001560:	f107 020c 	add.w	r2, r7, #12
 8001564:	2301      	movs	r3, #1
 8001566:	21f3      	movs	r1, #243	; 0xf3
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7ff fe97 	bl	800129c <read_data>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d1f5      	bne.n	8001560 <bmp280_init+0x64>
				&& (status & 1) == 0)
 8001574:	7b3b      	ldrb	r3, [r7, #12]
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1f0      	bne.n	8001560 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f7ff feb5 	bl	80012ee <read_calibration_data>
 8001584:	4603      	mov	r3, r0
 8001586:	f083 0301 	eor.w	r3, r3, #1
 800158a:	b2db      	uxtb	r3, r3
 800158c:	2b00      	cmp	r3, #0
 800158e:	d100      	bne.n	8001592 <bmp280_init+0x96>
 8001590:	e001      	b.n	8001596 <bmp280_init+0x9a>
		return false;
 8001592:	2300      	movs	r3, #0
 8001594:	e05b      	b.n	800164e <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800159c:	2b60      	cmp	r3, #96	; 0x60
 800159e:	d10a      	bne.n	80015b6 <bmp280_init+0xba>
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f7ff ff26 	bl	80013f2 <read_hum_calibration_data>
 80015a6:	4603      	mov	r3, r0
 80015a8:	f083 0301 	eor.w	r3, r3, #1
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <bmp280_init+0xba>
		return false;
 80015b2:	2300      	movs	r3, #0
 80015b4:	e04b      	b.n	800164e <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	795b      	ldrb	r3, [r3, #5]
 80015ba:	015b      	lsls	r3, r3, #5
 80015bc:	b25a      	sxtb	r2, r3
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	785b      	ldrb	r3, [r3, #1]
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	b25b      	sxtb	r3, r3
 80015c6:	4313      	orrs	r3, r2
 80015c8:	b25b      	sxtb	r3, r3
 80015ca:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 80015cc:	7bfb      	ldrb	r3, [r7, #15]
 80015ce:	461a      	mov	r2, r3
 80015d0:	21f5      	movs	r1, #245	; 0xf5
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7ff ff6d 	bl	80014b2 <write_register8>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <bmp280_init+0xe6>
		return false;
 80015de:	2300      	movs	r3, #0
 80015e0:	e035      	b.n	800164e <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d102      	bne.n	80015f0 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	2200      	movs	r2, #0
 80015ee:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	78db      	ldrb	r3, [r3, #3]
 80015f4:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 80015f6:	b25a      	sxtb	r2, r3
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	789b      	ldrb	r3, [r3, #2]
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	b25b      	sxtb	r3, r3
 8001600:	4313      	orrs	r3, r2
 8001602:	b25a      	sxtb	r2, r3
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	b25b      	sxtb	r3, r3
 800160a:	4313      	orrs	r3, r2
 800160c:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 800160e:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001616:	2b60      	cmp	r3, #96	; 0x60
 8001618:	d10d      	bne.n	8001636 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	791b      	ldrb	r3, [r3, #4]
 800161e:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8001620:	7b7b      	ldrb	r3, [r7, #13]
 8001622:	461a      	mov	r2, r3
 8001624:	21f2      	movs	r1, #242	; 0xf2
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f7ff ff43 	bl	80014b2 <write_register8>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <bmp280_init+0x13a>
			return false;
 8001632:	2300      	movs	r3, #0
 8001634:	e00b      	b.n	800164e <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8001636:	7bbb      	ldrb	r3, [r7, #14]
 8001638:	461a      	mov	r2, r3
 800163a:	21f4      	movs	r1, #244	; 0xf4
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f7ff ff38 	bl	80014b2 <write_register8>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <bmp280_init+0x150>
		return false;
 8001648:	2300      	movs	r3, #0
 800164a:	e000      	b.n	800164e <bmp280_init+0x152>
	}

	return true;
 800164c:	2301      	movs	r3, #1
}
 800164e:	4618      	mov	r0, r3
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <bmp280_is_measuring>:
		return false;
	}
	return true;
}

bool bmp280_is_measuring(BMP280_HandleTypedef *dev) {
 8001656:	b580      	push	{r7, lr}
 8001658:	b084      	sub	sp, #16
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
	uint8_t status;
	if (read_data(dev, BMP280_REG_STATUS, &status, 1))
 800165e:	f107 020f 	add.w	r2, r7, #15
 8001662:	2301      	movs	r3, #1
 8001664:	21f3      	movs	r1, #243	; 0xf3
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f7ff fe18 	bl	800129c <read_data>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <bmp280_is_measuring+0x20>
		return false;
 8001672:	2300      	movs	r3, #0
 8001674:	e007      	b.n	8001686 <bmp280_is_measuring+0x30>
	if (status & (1 << 3)) {
 8001676:	7bfb      	ldrb	r3, [r7, #15]
 8001678:	f003 0308 	and.w	r3, r3, #8
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <bmp280_is_measuring+0x2e>
		return true;
 8001680:	2301      	movs	r3, #1
 8001682:	e000      	b.n	8001686 <bmp280_is_measuring+0x30>
	}
	return false;
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 800168e:	b480      	push	{r7}
 8001690:	b087      	sub	sp, #28
 8001692:	af00      	add	r7, sp, #0
 8001694:	60f8      	str	r0, [r7, #12]
 8001696:	60b9      	str	r1, [r7, #8]
 8001698:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	10da      	asrs	r2, r3, #3
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	881b      	ldrh	r3, [r3, #0]
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 80016a6:	68fa      	ldr	r2, [r7, #12]
 80016a8:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80016ac:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80016b0:	12db      	asrs	r3, r3, #11
 80016b2:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	111b      	asrs	r3, r3, #4
 80016b8:	68fa      	ldr	r2, [r7, #12]
 80016ba:	8812      	ldrh	r2, [r2, #0]
 80016bc:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 80016be:	68ba      	ldr	r2, [r7, #8]
 80016c0:	1112      	asrs	r2, r2, #4
 80016c2:	68f9      	ldr	r1, [r7, #12]
 80016c4:	8809      	ldrh	r1, [r1, #0]
 80016c6:	1a52      	subs	r2, r2, r1
 80016c8:	fb02 f303 	mul.w	r3, r2, r3
 80016cc:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80016d4:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80016d8:	139b      	asrs	r3, r3, #14
 80016da:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 80016dc:	697a      	ldr	r2, [r7, #20]
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	441a      	add	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	4613      	mov	r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	4413      	add	r3, r2
 80016f0:	3380      	adds	r3, #128	; 0x80
 80016f2:	121b      	asrs	r3, r3, #8
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	371c      	adds	r7, #28
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8001700:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8001704:	b08a      	sub	sp, #40	; 0x28
 8001706:	af00      	add	r7, sp, #0
 8001708:	60f8      	str	r0, [r7, #12]
 800170a:	60b9      	str	r1, [r7, #8]
 800170c:	607a      	str	r2, [r7, #4]
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4619      	mov	r1, r3
 8001712:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001716:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 800171a:	f142 34ff 	adc.w	r4, r2, #4294967295
 800171e:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8001722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001724:	6a3a      	ldr	r2, [r7, #32]
 8001726:	fb02 f203 	mul.w	r2, r2, r3
 800172a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172c:	6a39      	ldr	r1, [r7, #32]
 800172e:	fb01 f303 	mul.w	r3, r1, r3
 8001732:	441a      	add	r2, r3
 8001734:	6a39      	ldr	r1, [r7, #32]
 8001736:	6a3b      	ldr	r3, [r7, #32]
 8001738:	fba1 3403 	umull	r3, r4, r1, r3
 800173c:	4422      	add	r2, r4
 800173e:	4614      	mov	r4, r2
 8001740:	68fa      	ldr	r2, [r7, #12]
 8001742:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8001746:	b211      	sxth	r1, r2
 8001748:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800174c:	fb01 f504 	mul.w	r5, r1, r4
 8001750:	fb03 f002 	mul.w	r0, r3, r2
 8001754:	4428      	add	r0, r5
 8001756:	fba3 3401 	umull	r3, r4, r3, r1
 800175a:	1902      	adds	r2, r0, r4
 800175c:	4614      	mov	r4, r2
 800175e:	e9c7 3406 	strd	r3, r4, [r7, #24]
 8001762:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800176c:	b21b      	sxth	r3, r3
 800176e:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001772:	6a3a      	ldr	r2, [r7, #32]
 8001774:	fb04 f102 	mul.w	r1, r4, r2
 8001778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800177a:	fb03 f202 	mul.w	r2, r3, r2
 800177e:	1888      	adds	r0, r1, r2
 8001780:	6a3a      	ldr	r2, [r7, #32]
 8001782:	fba2 1203 	umull	r1, r2, r2, r3
 8001786:	1883      	adds	r3, r0, r2
 8001788:	461a      	mov	r2, r3
 800178a:	f04f 0500 	mov.w	r5, #0
 800178e:	f04f 0600 	mov.w	r6, #0
 8001792:	0456      	lsls	r6, r2, #17
 8001794:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 8001798:	044d      	lsls	r5, r1, #17
 800179a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800179e:	186b      	adds	r3, r5, r1
 80017a0:	eb46 0402 	adc.w	r4, r6, r2
 80017a4:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80017ae:	b219      	sxth	r1, r3
 80017b0:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80017b4:	f04f 0500 	mov.w	r5, #0
 80017b8:	f04f 0600 	mov.w	r6, #0
 80017bc:	00ce      	lsls	r6, r1, #3
 80017be:	2500      	movs	r5, #0
 80017c0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80017c4:	186b      	adds	r3, r5, r1
 80017c6:	eb46 0402 	adc.w	r4, r6, r2
 80017ca:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80017ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d0:	6a3a      	ldr	r2, [r7, #32]
 80017d2:	fb02 f203 	mul.w	r2, r2, r3
 80017d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d8:	6a39      	ldr	r1, [r7, #32]
 80017da:	fb01 f303 	mul.w	r3, r1, r3
 80017de:	441a      	add	r2, r3
 80017e0:	6a39      	ldr	r1, [r7, #32]
 80017e2:	6a3b      	ldr	r3, [r7, #32]
 80017e4:	fba1 3403 	umull	r3, r4, r1, r3
 80017e8:	4422      	add	r2, r4
 80017ea:	4614      	mov	r4, r2
 80017ec:	68fa      	ldr	r2, [r7, #12]
 80017ee:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 80017f2:	b211      	sxth	r1, r2
 80017f4:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80017f8:	fb01 f504 	mul.w	r5, r1, r4
 80017fc:	fb03 f002 	mul.w	r0, r3, r2
 8001800:	4428      	add	r0, r5
 8001802:	fba3 3401 	umull	r3, r4, r3, r1
 8001806:	1902      	adds	r2, r0, r4
 8001808:	4614      	mov	r4, r2
 800180a:	f04f 0100 	mov.w	r1, #0
 800180e:	f04f 0200 	mov.w	r2, #0
 8001812:	0a19      	lsrs	r1, r3, #8
 8001814:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 8001818:	1222      	asrs	r2, r4, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001820:	b21b      	sxth	r3, r3
 8001822:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001826:	6a38      	ldr	r0, [r7, #32]
 8001828:	fb04 f500 	mul.w	r5, r4, r0
 800182c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800182e:	fb03 f000 	mul.w	r0, r3, r0
 8001832:	4428      	add	r0, r5
 8001834:	6a3d      	ldr	r5, [r7, #32]
 8001836:	fba5 5603 	umull	r5, r6, r5, r3
 800183a:	1983      	adds	r3, r0, r6
 800183c:	461e      	mov	r6, r3
 800183e:	f04f 0b00 	mov.w	fp, #0
 8001842:	f04f 0c00 	mov.w	ip, #0
 8001846:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 800184a:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 800184e:	ea4f 3b05 	mov.w	fp, r5, lsl #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001852:	eb1b 0301 	adds.w	r3, fp, r1
 8001856:	eb4c 0402 	adc.w	r4, ip, r2
 800185a:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 800185e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001862:	1c19      	adds	r1, r3, #0
 8001864:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	88db      	ldrh	r3, [r3, #6]
 800186c:	b29b      	uxth	r3, r3
 800186e:	f04f 0400 	mov.w	r4, #0
 8001872:	fb03 f502 	mul.w	r5, r3, r2
 8001876:	fb01 f004 	mul.w	r0, r1, r4
 800187a:	4428      	add	r0, r5
 800187c:	fba1 3403 	umull	r3, r4, r1, r3
 8001880:	1902      	adds	r2, r0, r4
 8001882:	4614      	mov	r4, r2
 8001884:	f04f 0100 	mov.w	r1, #0
 8001888:	f04f 0200 	mov.w	r2, #0
 800188c:	1061      	asrs	r1, r4, #1
 800188e:	17e2      	asrs	r2, r4, #31
 8001890:	e9c7 1208 	strd	r1, r2, [r7, #32]

	if (var1 == 0) {
 8001894:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001898:	4323      	orrs	r3, r4
 800189a:	d101      	bne.n	80018a0 <compensate_pressure+0x1a0>
		return 0;  // avoid exception caused by division by zero
 800189c:	2300      	movs	r3, #0
 800189e:	e0d4      	b.n	8001a4a <compensate_pressure+0x34a>
	}

	p = 1048576 - adc_press;
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80018a6:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80018aa:	e9c7 3404 	strd	r3, r4, [r7, #16]
	p = (((p << 31) - var2) * 3125) / var1;
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	ea4f 0963 	mov.w	r9, r3, asr #1
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	ea4f 78c3 	mov.w	r8, r3, lsl #31
 80018ba:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80018be:	4645      	mov	r5, r8
 80018c0:	464e      	mov	r6, r9
 80018c2:	1aed      	subs	r5, r5, r3
 80018c4:	eb66 0604 	sbc.w	r6, r6, r4
 80018c8:	46a8      	mov	r8, r5
 80018ca:	46b1      	mov	r9, r6
 80018cc:	eb18 0308 	adds.w	r3, r8, r8
 80018d0:	eb49 0409 	adc.w	r4, r9, r9
 80018d4:	4698      	mov	r8, r3
 80018d6:	46a1      	mov	r9, r4
 80018d8:	eb18 0805 	adds.w	r8, r8, r5
 80018dc:	eb49 0906 	adc.w	r9, r9, r6
 80018e0:	f04f 0100 	mov.w	r1, #0
 80018e4:	f04f 0200 	mov.w	r2, #0
 80018e8:	ea4f 1289 	mov.w	r2, r9, lsl #6
 80018ec:	ea42 6298 	orr.w	r2, r2, r8, lsr #26
 80018f0:	ea4f 1188 	mov.w	r1, r8, lsl #6
 80018f4:	eb18 0801 	adds.w	r8, r8, r1
 80018f8:	eb49 0902 	adc.w	r9, r9, r2
 80018fc:	f04f 0100 	mov.w	r1, #0
 8001900:	f04f 0200 	mov.w	r2, #0
 8001904:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8001908:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 800190c:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8001910:	4688      	mov	r8, r1
 8001912:	4691      	mov	r9, r2
 8001914:	eb18 0805 	adds.w	r8, r8, r5
 8001918:	eb49 0906 	adc.w	r9, r9, r6
 800191c:	f04f 0100 	mov.w	r1, #0
 8001920:	f04f 0200 	mov.w	r2, #0
 8001924:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8001928:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 800192c:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8001930:	4688      	mov	r8, r1
 8001932:	4691      	mov	r9, r2
 8001934:	eb18 0005 	adds.w	r0, r8, r5
 8001938:	eb49 0106 	adc.w	r1, r9, r6
 800193c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001940:	f7ff f982 	bl	8000c48 <__aeabi_ldivmod>
 8001944:	4603      	mov	r3, r0
 8001946:	460c      	mov	r4, r1
 8001948:	e9c7 3404 	strd	r3, r4, [r7, #16]
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001952:	b219      	sxth	r1, r3
 8001954:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001958:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 800195c:	f04f 0300 	mov.w	r3, #0
 8001960:	f04f 0400 	mov.w	r4, #0
 8001964:	0b6b      	lsrs	r3, r5, #13
 8001966:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 800196a:	1374      	asrs	r4, r6, #13
 800196c:	fb03 f502 	mul.w	r5, r3, r2
 8001970:	fb01 f004 	mul.w	r0, r1, r4
 8001974:	4428      	add	r0, r5
 8001976:	fba1 1203 	umull	r1, r2, r1, r3
 800197a:	1883      	adds	r3, r0, r2
 800197c:	461a      	mov	r2, r3
 800197e:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 8001982:	f04f 0300 	mov.w	r3, #0
 8001986:	f04f 0400 	mov.w	r4, #0
 800198a:	0b6b      	lsrs	r3, r5, #13
 800198c:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8001990:	1374      	asrs	r4, r6, #13
 8001992:	fb03 f502 	mul.w	r5, r3, r2
 8001996:	fb01 f004 	mul.w	r0, r1, r4
 800199a:	4428      	add	r0, r5
 800199c:	fba1 1203 	umull	r1, r2, r1, r3
 80019a0:	1883      	adds	r3, r0, r2
 80019a2:	461a      	mov	r2, r3
 80019a4:	f04f 0300 	mov.w	r3, #0
 80019a8:	f04f 0400 	mov.w	r4, #0
 80019ac:	0e4b      	lsrs	r3, r1, #25
 80019ae:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80019b2:	1654      	asrs	r4, r2, #25
 80019b4:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80019be:	b21b      	sxth	r3, r3
 80019c0:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	fb04 f102 	mul.w	r1, r4, r2
 80019ca:	697a      	ldr	r2, [r7, #20]
 80019cc:	fb03 f202 	mul.w	r2, r3, r2
 80019d0:	1888      	adds	r0, r1, r2
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	fba2 1203 	umull	r1, r2, r2, r3
 80019d8:	1883      	adds	r3, r0, r2
 80019da:	461a      	mov	r2, r3
 80019dc:	f04f 0300 	mov.w	r3, #0
 80019e0:	f04f 0400 	mov.w	r4, #0
 80019e4:	0ccb      	lsrs	r3, r1, #19
 80019e6:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 80019ea:	14d4      	asrs	r4, r2, #19
 80019ec:	e9c7 3406 	strd	r3, r4, [r7, #24]

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 80019f0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80019f4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80019f8:	eb11 0803 	adds.w	r8, r1, r3
 80019fc:	eb42 0904 	adc.w	r9, r2, r4
 8001a00:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001a04:	eb13 0508 	adds.w	r5, r3, r8
 8001a08:	eb44 0609 	adc.w	r6, r4, r9
 8001a0c:	f04f 0100 	mov.w	r1, #0
 8001a10:	f04f 0200 	mov.w	r2, #0
 8001a14:	0a29      	lsrs	r1, r5, #8
 8001a16:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 8001a1a:	1232      	asrs	r2, r6, #8
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001a22:	b21d      	sxth	r5, r3
 8001a24:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8001a28:	f04f 0800 	mov.w	r8, #0
 8001a2c:	f04f 0900 	mov.w	r9, #0
 8001a30:	ea4f 1906 	mov.w	r9, r6, lsl #4
 8001a34:	ea49 7915 	orr.w	r9, r9, r5, lsr #28
 8001a38:	ea4f 1805 	mov.w	r8, r5, lsl #4
 8001a3c:	eb18 0301 	adds.w	r3, r8, r1
 8001a40:	eb49 0402 	adc.w	r4, r9, r2
 8001a44:	e9c7 3404 	strd	r3, r4, [r7, #16]
	return p;
 8001a48:	693b      	ldr	r3, [r7, #16]
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3728      	adds	r7, #40	; 0x28
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}

08001a54 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8001a54:	b480      	push	{r7}
 8001a56:	b087      	sub	sp, #28
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001a66:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	039a      	lsls	r2, r3, #14
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001a72:	051b      	lsls	r3, r3, #20
 8001a74:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	fb03 f301 	mul.w	r3, r3, r1
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001a8a:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8001a8c:	68fa      	ldr	r2, [r7, #12]
 8001a8e:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 8001a92:	4611      	mov	r1, r2
 8001a94:	697a      	ldr	r2, [r7, #20]
 8001a96:	fb02 f201 	mul.w	r2, r2, r1
 8001a9a:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001a9c:	68f9      	ldr	r1, [r7, #12]
 8001a9e:	7f09      	ldrb	r1, [r1, #28]
 8001aa0:	4608      	mov	r0, r1
 8001aa2:	6979      	ldr	r1, [r7, #20]
 8001aa4:	fb01 f100 	mul.w	r1, r1, r0
 8001aa8:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001aaa:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001aae:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001ab2:	1292      	asrs	r2, r2, #10
 8001ab4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001ab8:	68f9      	ldr	r1, [r7, #12]
 8001aba:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001abe:	fb01 f202 	mul.w	r2, r1, r2
 8001ac2:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001ac6:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001ac8:	fb02 f303 	mul.w	r3, r2, r3
 8001acc:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	13db      	asrs	r3, r3, #15
 8001ad2:	697a      	ldr	r2, [r7, #20]
 8001ad4:	13d2      	asrs	r2, r2, #15
 8001ad6:	fb02 f303 	mul.w	r3, r2, r3
 8001ada:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8001adc:	68fa      	ldr	r2, [r7, #12]
 8001ade:	7e12      	ldrb	r2, [r2, #24]
 8001ae0:	fb02 f303 	mul.w	r3, r2, r3
 8001ae4:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001af2:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001afa:	bfa8      	it	ge
 8001afc:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001b00:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	131b      	asrs	r3, r3, #12
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	371c      	adds	r7, #28
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b08c      	sub	sp, #48	; 0x30
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	60f8      	str	r0, [r7, #12]
 8001b1a:	60b9      	str	r1, [r7, #8]
 8001b1c:	607a      	str	r2, [r7, #4]
 8001b1e:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001b26:	2b60      	cmp	r3, #96	; 0x60
 8001b28:	d007      	beq.n	8001b3a <bmp280_read_fixed+0x28>
		if (humidity)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d002      	beq.n	8001b36 <bmp280_read_fixed+0x24>
			*humidity = 0;
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <bmp280_read_fixed+0x32>
 8001b40:	2308      	movs	r3, #8
 8001b42:	e000      	b.n	8001b46 <bmp280_read_fixed+0x34>
 8001b44:	2306      	movs	r3, #6
 8001b46:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8001b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	f107 0218 	add.w	r2, r7, #24
 8001b50:	21f7      	movs	r1, #247	; 0xf7
 8001b52:	68f8      	ldr	r0, [r7, #12]
 8001b54:	f7ff fba2 	bl	800129c <read_data>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <bmp280_read_fixed+0x50>
		return false;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	e038      	b.n	8001bd4 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001b62:	7e3b      	ldrb	r3, [r7, #24]
 8001b64:	031a      	lsls	r2, r3, #12
 8001b66:	7e7b      	ldrb	r3, [r7, #25]
 8001b68:	011b      	lsls	r3, r3, #4
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	7eba      	ldrb	r2, [r7, #26]
 8001b6e:	0912      	lsrs	r2, r2, #4
 8001b70:	b2d2      	uxtb	r2, r2
 8001b72:	4313      	orrs	r3, r2
 8001b74:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001b76:	7efb      	ldrb	r3, [r7, #27]
 8001b78:	031a      	lsls	r2, r3, #12
 8001b7a:	7f3b      	ldrb	r3, [r7, #28]
 8001b7c:	011b      	lsls	r3, r3, #4
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	7f7a      	ldrb	r2, [r7, #29]
 8001b82:	0912      	lsrs	r2, r2, #4
 8001b84:	b2d2      	uxtb	r2, r2
 8001b86:	4313      	orrs	r3, r2
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8001b8a:	f107 0314 	add.w	r3, r7, #20
 8001b8e:	461a      	mov	r2, r3
 8001b90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b92:	68f8      	ldr	r0, [r7, #12]
 8001b94:	f7ff fd7b 	bl	800168e <compensate_temperature>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ba4:	68f8      	ldr	r0, [r7, #12]
 8001ba6:	f7ff fdab 	bl	8001700 <compensate_pressure>
 8001baa:	4602      	mov	r2, r0
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d00d      	beq.n	8001bd2 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001bb6:	7fbb      	ldrb	r3, [r7, #30]
 8001bb8:	021b      	lsls	r3, r3, #8
 8001bba:	7ffa      	ldrb	r2, [r7, #31]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	6a39      	ldr	r1, [r7, #32]
 8001bc6:	68f8      	ldr	r0, [r7, #12]
 8001bc8:	f7ff ff44 	bl	8001a54 <compensate_humidity>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001bd2:	2301      	movs	r3, #1
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3730      	adds	r7, #48	; 0x30
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b088      	sub	sp, #32
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
 8001be8:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d002      	beq.n	8001bf6 <bmp280_read_float+0x1a>
 8001bf0:	f107 0314 	add.w	r3, r7, #20
 8001bf4:	e000      	b.n	8001bf8 <bmp280_read_float+0x1c>
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	f107 0218 	add.w	r2, r7, #24
 8001bfc:	f107 011c 	add.w	r1, r7, #28
 8001c00:	68f8      	ldr	r0, [r7, #12]
 8001c02:	f7ff ff86 	bl	8001b12 <bmp280_read_fixed>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d028      	beq.n	8001c5e <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	ee07 3a90 	vmov	s15, r3
 8001c12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c16:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001c68 <bmp280_read_float+0x8c>
 8001c1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	ee07 3a90 	vmov	s15, r3
 8001c2a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c2e:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001c6c <bmp280_read_float+0x90>
 8001c32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d00b      	beq.n	8001c5a <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	ee07 3a90 	vmov	s15, r3
 8001c48:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c4c:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001c70 <bmp280_read_float+0x94>
 8001c50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e000      	b.n	8001c60 <bmp280_read_float+0x84>
	}

	return false;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3720      	adds	r7, #32
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	42c80000 	.word	0x42c80000
 8001c6c:	43800000 	.word	0x43800000
 8001c70:	44800000 	.word	0x44800000
 8001c74:	00000000 	.word	0x00000000

08001c78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c78:	b5b0      	push	{r4, r5, r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c7c:	f002 ff84 	bl	8004b88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c80:	f000 f930 	bl	8001ee4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c84:	f000 fd7a 	bl	800277c <MX_GPIO_Init>
  MX_DMA_Init();
 8001c88:	f000 fd50 	bl	800272c <MX_DMA_Init>
  MX_I2C1_Init();
 8001c8c:	f000 f994 	bl	8001fb8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001c90:	f000 fcce 	bl	8002630 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001c94:	f000 fd20 	bl	80026d8 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8001c98:	f000 fcf4 	bl	8002684 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001c9c:	f000 fa80 	bl	80021a0 <MX_TIM3_Init>
  MX_I2C3_Init();
 8001ca0:	f000 f9b8 	bl	8002014 <MX_I2C3_Init>
  MX_TIM2_Init();
 8001ca4:	f000 f9e4 	bl	8002070 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001ca8:	f000 faf6 	bl	8002298 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001cac:	f000 fb64 	bl	8002378 <MX_TIM5_Init>
  MX_TIM9_Init();
 8001cb0:	f000 fc3e 	bl	8002530 <MX_TIM9_Init>
  MX_TIM7_Init();
 8001cb4:	f000 fc06 	bl	80024c4 <MX_TIM7_Init>
  MX_TIM6_Init();
 8001cb8:	f000 fbce 	bl	8002458 <MX_TIM6_Init>
  MX_TIM10_Init();
 8001cbc:	f000 fc94 	bl	80025e8 <MX_TIM10_Init>
  PIDControl(&PIDPitch, (float)IMU_Data->PITCH, RC_CH1.DutyCycleVal);
  PIDControl(&PIDYaw, (float)IMU_Data->YAW, RC_CH4.DutyCycleVal);*/

  //init sensor

  CompassInit();
 8001cc0:	f001 f806 	bl	8002cd0 <CompassInit>
  BMPInit();
 8001cc4:	f000 fede 	bl	8002a84 <BMPInit>
  GPSInit();
 8001cc8:	f000 ffca 	bl	8002c60 <GPSInit>
  IMUInit();
 8001ccc:	f001 f8e0 	bl	8002e90 <IMUInit>

  //Remote init
  RemoteInit();
 8001cd0:	f001 f856 	bl	8002d80 <RemoteInit>

  //Inisialisasi PID
  //ROLL
  PIDInit(&PIDRoll, 1.5f, 0.0f, 3.5f, 0.01); //kp = 1, kd = 1, ki = 1, timesampling = 0.04
 8001cd4:	ed9f 3b68 	vldr	d3, [pc, #416]	; 8001e78 <main+0x200>
 8001cd8:	ed9f 2b69 	vldr	d2, [pc, #420]	; 8001e80 <main+0x208>
 8001cdc:	ed9f 1b6a 	vldr	d1, [pc, #424]	; 8001e88 <main+0x210>
 8001ce0:	ed9f 0b6b 	vldr	d0, [pc, #428]	; 8001e90 <main+0x218>
 8001ce4:	486c      	ldr	r0, [pc, #432]	; (8001e98 <main+0x220>)
 8001ce6:	f001 feeb 	bl	8003ac0 <PIDInit>

  //PITCH
  PIDInit(&PIDPitch, 0.0f, 0.0f, 0.0f, 0.01); //kp = 1, kd = 1, ki = 1, timesampling = 0.04
 8001cea:	ed9f 3b63 	vldr	d3, [pc, #396]	; 8001e78 <main+0x200>
 8001cee:	ed9f 2b66 	vldr	d2, [pc, #408]	; 8001e88 <main+0x210>
 8001cf2:	ed9f 1b65 	vldr	d1, [pc, #404]	; 8001e88 <main+0x210>
 8001cf6:	ed9f 0b64 	vldr	d0, [pc, #400]	; 8001e88 <main+0x210>
 8001cfa:	4868      	ldr	r0, [pc, #416]	; (8001e9c <main+0x224>)
 8001cfc:	f001 fee0 	bl	8003ac0 <PIDInit>

  //YAW
  PIDInit(&PIDYaw, 0.0f, 0.0f, 0.0f, 0.01); //kp = 1, kd = 1, ki = 1, timesampling = 0.04
 8001d00:	ed9f 3b5d 	vldr	d3, [pc, #372]	; 8001e78 <main+0x200>
 8001d04:	ed9f 2b60 	vldr	d2, [pc, #384]	; 8001e88 <main+0x210>
 8001d08:	ed9f 1b5f 	vldr	d1, [pc, #380]	; 8001e88 <main+0x210>
 8001d0c:	ed9f 0b5e 	vldr	d0, [pc, #376]	; 8001e88 <main+0x210>
 8001d10:	4863      	ldr	r0, [pc, #396]	; (8001ea0 <main+0x228>)
 8001d12:	f001 fed5 	bl	8003ac0 <PIDInit>

  ESCInit();
 8001d16:	f000 fdeb 	bl	80028f0 <ESCInit>

  HAL_TIM_Base_Start_IT(&htim10);
 8001d1a:	4862      	ldr	r0, [pc, #392]	; (8001ea4 <main+0x22c>)
 8001d1c:	f005 fecb 	bl	8007ab6 <HAL_TIM_Base_Start_IT>

  strSize = sprintf((char*)buffer, "Mulai\r\n");
 8001d20:	4a61      	ldr	r2, [pc, #388]	; (8001ea8 <main+0x230>)
 8001d22:	4b62      	ldr	r3, [pc, #392]	; (8001eac <main+0x234>)
 8001d24:	cb03      	ldmia	r3!, {r0, r1}
 8001d26:	6010      	str	r0, [r2, #0]
 8001d28:	6051      	str	r1, [r2, #4]
 8001d2a:	2307      	movs	r3, #7
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	4b60      	ldr	r3, [pc, #384]	; (8001eb0 <main+0x238>)
 8001d30:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart1, buffer, strSize, 10);
 8001d32:	4b5f      	ldr	r3, [pc, #380]	; (8001eb0 <main+0x238>)
 8001d34:	881a      	ldrh	r2, [r3, #0]
 8001d36:	230a      	movs	r3, #10
 8001d38:	495b      	ldr	r1, [pc, #364]	; (8001ea8 <main+0x230>)
 8001d3a:	485e      	ldr	r0, [pc, #376]	; (8001eb4 <main+0x23c>)
 8001d3c:	f007 f8b7 	bl	8008eae <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  if(inputFlyMode >= 1000 && inputFlyMode <= 1050 && fly_mode != FLY_MODE_OFF){
 8001d40:	4b5d      	ldr	r3, [pc, #372]	; (8001eb8 <main+0x240>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d48:	db39      	blt.n	8001dbe <main+0x146>
 8001d4a:	4b5b      	ldr	r3, [pc, #364]	; (8001eb8 <main+0x240>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f240 421a 	movw	r2, #1050	; 0x41a
 8001d52:	4293      	cmp	r3, r2
 8001d54:	dc33      	bgt.n	8001dbe <main+0x146>
 8001d56:	4b59      	ldr	r3, [pc, #356]	; (8001ebc <main+0x244>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d02f      	beq.n	8001dbe <main+0x146>
		  HAL_TIM_Base_Stop_IT(&htim7);
 8001d5e:	4858      	ldr	r0, [pc, #352]	; (8001ec0 <main+0x248>)
 8001d60:	f005 fecd 	bl	8007afe <HAL_TIM_Base_Stop_IT>
		  fly_mode = FLY_MODE_OFF;
 8001d64:	4b55      	ldr	r3, [pc, #340]	; (8001ebc <main+0x244>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	701a      	strb	r2, [r3, #0]
		  PIDReset(&PIDRoll);
 8001d6a:	484b      	ldr	r0, [pc, #300]	; (8001e98 <main+0x220>)
 8001d6c:	f001 fe80 	bl	8003a70 <PIDReset>
		  PIDReset(&PIDPitch);
 8001d70:	484a      	ldr	r0, [pc, #296]	; (8001e9c <main+0x224>)
 8001d72:	f001 fe7d 	bl	8003a70 <PIDReset>
		  PIDReset(&PIDYaw);
 8001d76:	484a      	ldr	r0, [pc, #296]	; (8001ea0 <main+0x228>)
 8001d78:	f001 fe7a 	bl	8003a70 <PIDReset>
		  pulseESC1 = pulseESC2 = pulseESC3 = pulseESC4 = 1000;
 8001d7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d80:	4a50      	ldr	r2, [pc, #320]	; (8001ec4 <main+0x24c>)
 8001d82:	6013      	str	r3, [r2, #0]
 8001d84:	4a50      	ldr	r2, [pc, #320]	; (8001ec8 <main+0x250>)
 8001d86:	6013      	str	r3, [r2, #0]
 8001d88:	4a50      	ldr	r2, [pc, #320]	; (8001ecc <main+0x254>)
 8001d8a:	6013      	str	r3, [r2, #0]
 8001d8c:	4a50      	ldr	r2, [pc, #320]	; (8001ed0 <main+0x258>)
 8001d8e:	6013      	str	r3, [r2, #0]
		  strSize = sprintf((char*)buffer, "Wahana Mode Off\r\n");
 8001d90:	4a45      	ldr	r2, [pc, #276]	; (8001ea8 <main+0x230>)
 8001d92:	4b50      	ldr	r3, [pc, #320]	; (8001ed4 <main+0x25c>)
 8001d94:	4615      	mov	r5, r2
 8001d96:	461c      	mov	r4, r3
 8001d98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d9a:	6028      	str	r0, [r5, #0]
 8001d9c:	6069      	str	r1, [r5, #4]
 8001d9e:	60aa      	str	r2, [r5, #8]
 8001da0:	60eb      	str	r3, [r5, #12]
 8001da2:	8823      	ldrh	r3, [r4, #0]
 8001da4:	822b      	strh	r3, [r5, #16]
 8001da6:	2311      	movs	r3, #17
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	4b41      	ldr	r3, [pc, #260]	; (8001eb0 <main+0x238>)
 8001dac:	801a      	strh	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1, buffer, strSize, 10);
 8001dae:	4b40      	ldr	r3, [pc, #256]	; (8001eb0 <main+0x238>)
 8001db0:	881a      	ldrh	r2, [r3, #0]
 8001db2:	230a      	movs	r3, #10
 8001db4:	493c      	ldr	r1, [pc, #240]	; (8001ea8 <main+0x230>)
 8001db6:	483f      	ldr	r0, [pc, #252]	; (8001eb4 <main+0x23c>)
 8001db8:	f007 f879 	bl	8008eae <HAL_UART_Transmit>
 8001dbc:	e057      	b.n	8001e6e <main+0x1f6>
	  } else if(inputFlyMode >= 1450 && inputFlyMode <= 1550 && fly_mode != FLY_MODE_ON){
 8001dbe:	4b3e      	ldr	r3, [pc, #248]	; (8001eb8 <main+0x240>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f240 52a9 	movw	r2, #1449	; 0x5a9
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	dd26      	ble.n	8001e18 <main+0x1a0>
 8001dca:	4b3b      	ldr	r3, [pc, #236]	; (8001eb8 <main+0x240>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f240 620e 	movw	r2, #1550	; 0x60e
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	dc20      	bgt.n	8001e18 <main+0x1a0>
 8001dd6:	4b39      	ldr	r3, [pc, #228]	; (8001ebc <main+0x244>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d01c      	beq.n	8001e18 <main+0x1a0>
		  fly_mode = FLY_MODE_ON;
 8001dde:	4b37      	ldr	r3, [pc, #220]	; (8001ebc <main+0x244>)
 8001de0:	2201      	movs	r2, #1
 8001de2:	701a      	strb	r2, [r3, #0]
		  strSize = sprintf((char*)buffer, "Wahana Mode On\r\n");
 8001de4:	4a30      	ldr	r2, [pc, #192]	; (8001ea8 <main+0x230>)
 8001de6:	4b3c      	ldr	r3, [pc, #240]	; (8001ed8 <main+0x260>)
 8001de8:	4615      	mov	r5, r2
 8001dea:	461c      	mov	r4, r3
 8001dec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dee:	6028      	str	r0, [r5, #0]
 8001df0:	6069      	str	r1, [r5, #4]
 8001df2:	60aa      	str	r2, [r5, #8]
 8001df4:	60eb      	str	r3, [r5, #12]
 8001df6:	7823      	ldrb	r3, [r4, #0]
 8001df8:	742b      	strb	r3, [r5, #16]
 8001dfa:	2310      	movs	r3, #16
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	4b2c      	ldr	r3, [pc, #176]	; (8001eb0 <main+0x238>)
 8001e00:	801a      	strh	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1, buffer, strSize, 10);
 8001e02:	4b2b      	ldr	r3, [pc, #172]	; (8001eb0 <main+0x238>)
 8001e04:	881a      	ldrh	r2, [r3, #0]
 8001e06:	230a      	movs	r3, #10
 8001e08:	4927      	ldr	r1, [pc, #156]	; (8001ea8 <main+0x230>)
 8001e0a:	482a      	ldr	r0, [pc, #168]	; (8001eb4 <main+0x23c>)
 8001e0c:	f007 f84f 	bl	8008eae <HAL_UART_Transmit>
		  HAL_TIM_Base_Start_IT(&htim7);
 8001e10:	482b      	ldr	r0, [pc, #172]	; (8001ec0 <main+0x248>)
 8001e12:	f005 fe50 	bl	8007ab6 <HAL_TIM_Base_Start_IT>
 8001e16:	e02a      	b.n	8001e6e <main+0x1f6>
	  } else if(inputFlyMode >= 1900 && inputFlyMode <= 2000 && fly_mode != FLY_MODE_HOLD){
 8001e18:	4b27      	ldr	r3, [pc, #156]	; (8001eb8 <main+0x240>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f240 726b 	movw	r2, #1899	; 0x76b
 8001e20:	4293      	cmp	r3, r2
 8001e22:	dd24      	ble.n	8001e6e <main+0x1f6>
 8001e24:	4b24      	ldr	r3, [pc, #144]	; (8001eb8 <main+0x240>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001e2c:	dc1f      	bgt.n	8001e6e <main+0x1f6>
 8001e2e:	4b23      	ldr	r3, [pc, #140]	; (8001ebc <main+0x244>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d01b      	beq.n	8001e6e <main+0x1f6>
		  fly_mode = FLY_MODE_HOLD;
 8001e36:	4b21      	ldr	r3, [pc, #132]	; (8001ebc <main+0x244>)
 8001e38:	2202      	movs	r2, #2
 8001e3a:	701a      	strb	r2, [r3, #0]
		  strSize = sprintf((char*)buffer, "Wahana Mode Hold\r\n");
 8001e3c:	4a1a      	ldr	r2, [pc, #104]	; (8001ea8 <main+0x230>)
 8001e3e:	4b27      	ldr	r3, [pc, #156]	; (8001edc <main+0x264>)
 8001e40:	4615      	mov	r5, r2
 8001e42:	461c      	mov	r4, r3
 8001e44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e46:	6028      	str	r0, [r5, #0]
 8001e48:	6069      	str	r1, [r5, #4]
 8001e4a:	60aa      	str	r2, [r5, #8]
 8001e4c:	60eb      	str	r3, [r5, #12]
 8001e4e:	8823      	ldrh	r3, [r4, #0]
 8001e50:	78a2      	ldrb	r2, [r4, #2]
 8001e52:	822b      	strh	r3, [r5, #16]
 8001e54:	4613      	mov	r3, r2
 8001e56:	74ab      	strb	r3, [r5, #18]
 8001e58:	2312      	movs	r3, #18
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	4b14      	ldr	r3, [pc, #80]	; (8001eb0 <main+0x238>)
 8001e5e:	801a      	strh	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1, buffer, strSize, 10);
 8001e60:	4b13      	ldr	r3, [pc, #76]	; (8001eb0 <main+0x238>)
 8001e62:	881a      	ldrh	r2, [r3, #0]
 8001e64:	230a      	movs	r3, #10
 8001e66:	4910      	ldr	r1, [pc, #64]	; (8001ea8 <main+0x230>)
 8001e68:	4812      	ldr	r0, [pc, #72]	; (8001eb4 <main+0x23c>)
 8001e6a:	f007 f820 	bl	8008eae <HAL_UART_Transmit>
	  //HAL_UART_Transmit(&huart1, buffer, strSize, 100);

	  //strSize = sprintf((char*)buffer, "YAW: %f\tPITCH: %f\tROLL: %f\r\n", sensorYaw, sensorPitch, sensorRoll);
	  //HAL_UART_Transmit(&huart1, buffer, strSize, 10);

	  getIMUData(&IMU_Data);
 8001e6e:	481c      	ldr	r0, [pc, #112]	; (8001ee0 <main+0x268>)
 8001e70:	f001 f8e6 	bl	8003040 <getIMUData>
	  if(inputFlyMode >= 1000 && inputFlyMode <= 1050 && fly_mode != FLY_MODE_OFF){
 8001e74:	e764      	b.n	8001d40 <main+0xc8>
 8001e76:	bf00      	nop
 8001e78:	47ae147b 	.word	0x47ae147b
 8001e7c:	3f847ae1 	.word	0x3f847ae1
 8001e80:	00000000 	.word	0x00000000
 8001e84:	400c0000 	.word	0x400c0000
	...
 8001e94:	3ff80000 	.word	0x3ff80000
 8001e98:	20000b38 	.word	0x20000b38
 8001e9c:	20000228 	.word	0x20000228
 8001ea0:	20000778 	.word	0x20000778
 8001ea4:	20000460 	.word	0x20000460
 8001ea8:	200007e4 	.word	0x200007e4
 8001eac:	0800cde0 	.word	0x0800cde0
 8001eb0:	20000d20 	.word	0x20000d20
 8001eb4:	200007a4 	.word	0x200007a4
 8001eb8:	20000254 	.word	0x20000254
 8001ebc:	20000bbc 	.word	0x20000bbc
 8001ec0:	20000ca4 	.word	0x20000ca4
 8001ec4:	200008ac 	.word	0x200008ac
 8001ec8:	20000d00 	.word	0x20000d00
 8001ecc:	20000250 	.word	0x20000250
 8001ed0:	20000ce4 	.word	0x20000ce4
 8001ed4:	0800cde8 	.word	0x0800cde8
 8001ed8:	0800cdfc 	.word	0x0800cdfc
 8001edc:	0800ce10 	.word	0x0800ce10
 8001ee0:	200006cc 	.word	0x200006cc

08001ee4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b094      	sub	sp, #80	; 0x50
 8001ee8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001eea:	f107 0320 	add.w	r3, r7, #32
 8001eee:	2230      	movs	r2, #48	; 0x30
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f007 fdc3 	bl	8009a7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ef8:	f107 030c 	add.w	r3, r7, #12
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	60da      	str	r2, [r3, #12]
 8001f06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f08:	2300      	movs	r3, #0
 8001f0a:	60bb      	str	r3, [r7, #8]
 8001f0c:	4b28      	ldr	r3, [pc, #160]	; (8001fb0 <SystemClock_Config+0xcc>)
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f10:	4a27      	ldr	r2, [pc, #156]	; (8001fb0 <SystemClock_Config+0xcc>)
 8001f12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f16:	6413      	str	r3, [r2, #64]	; 0x40
 8001f18:	4b25      	ldr	r3, [pc, #148]	; (8001fb0 <SystemClock_Config+0xcc>)
 8001f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f20:	60bb      	str	r3, [r7, #8]
 8001f22:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f24:	2300      	movs	r3, #0
 8001f26:	607b      	str	r3, [r7, #4]
 8001f28:	4b22      	ldr	r3, [pc, #136]	; (8001fb4 <SystemClock_Config+0xd0>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a21      	ldr	r2, [pc, #132]	; (8001fb4 <SystemClock_Config+0xd0>)
 8001f2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f32:	6013      	str	r3, [r2, #0]
 8001f34:	4b1f      	ldr	r3, [pc, #124]	; (8001fb4 <SystemClock_Config+0xd0>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f3c:	607b      	str	r3, [r7, #4]
 8001f3e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f40:	2302      	movs	r3, #2
 8001f42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f44:	2301      	movs	r3, #1
 8001f46:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f48:	2310      	movs	r3, #16
 8001f4a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f50:	2300      	movs	r3, #0
 8001f52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001f54:	2308      	movs	r3, #8
 8001f56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001f58:	23a8      	movs	r3, #168	; 0xa8
 8001f5a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f60:	2304      	movs	r3, #4
 8001f62:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f64:	f107 0320 	add.w	r3, r7, #32
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f005 f8f5 	bl	8007158 <HAL_RCC_OscConfig>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001f74:	f001 fca8 	bl	80038c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f78:	230f      	movs	r3, #15
 8001f7a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f80:	2300      	movs	r3, #0
 8001f82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001f84:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001f88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 8001f8a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001f8e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f90:	f107 030c 	add.w	r3, r7, #12
 8001f94:	2105      	movs	r1, #5
 8001f96:	4618      	mov	r0, r3
 8001f98:	f005 fb4e 	bl	8007638 <HAL_RCC_ClockConfig>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001fa2:	f001 fc91 	bl	80038c8 <Error_Handler>
  }
}
 8001fa6:	bf00      	nop
 8001fa8:	3750      	adds	r7, #80	; 0x50
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	40007000 	.word	0x40007000

08001fb8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001fbc:	4b12      	ldr	r3, [pc, #72]	; (8002008 <MX_I2C1_Init+0x50>)
 8001fbe:	4a13      	ldr	r2, [pc, #76]	; (800200c <MX_I2C1_Init+0x54>)
 8001fc0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001fc2:	4b11      	ldr	r3, [pc, #68]	; (8002008 <MX_I2C1_Init+0x50>)
 8001fc4:	4a12      	ldr	r2, [pc, #72]	; (8002010 <MX_I2C1_Init+0x58>)
 8001fc6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001fc8:	4b0f      	ldr	r3, [pc, #60]	; (8002008 <MX_I2C1_Init+0x50>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001fce:	4b0e      	ldr	r3, [pc, #56]	; (8002008 <MX_I2C1_Init+0x50>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fd4:	4b0c      	ldr	r3, [pc, #48]	; (8002008 <MX_I2C1_Init+0x50>)
 8001fd6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fda:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fdc:	4b0a      	ldr	r3, [pc, #40]	; (8002008 <MX_I2C1_Init+0x50>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001fe2:	4b09      	ldr	r3, [pc, #36]	; (8002008 <MX_I2C1_Init+0x50>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fe8:	4b07      	ldr	r3, [pc, #28]	; (8002008 <MX_I2C1_Init+0x50>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fee:	4b06      	ldr	r3, [pc, #24]	; (8002008 <MX_I2C1_Init+0x50>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ff4:	4804      	ldr	r0, [pc, #16]	; (8002008 <MX_I2C1_Init+0x50>)
 8001ff6:	f003 fc8d 	bl	8005914 <HAL_I2C_Init>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002000:	f001 fc62 	bl	80038c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002004:	bf00      	nop
 8002006:	bd80      	pop	{r7, pc}
 8002008:	2000040c 	.word	0x2000040c
 800200c:	40005400 	.word	0x40005400
 8002010:	000186a0 	.word	0x000186a0

08002014 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002018:	4b12      	ldr	r3, [pc, #72]	; (8002064 <MX_I2C3_Init+0x50>)
 800201a:	4a13      	ldr	r2, [pc, #76]	; (8002068 <MX_I2C3_Init+0x54>)
 800201c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800201e:	4b11      	ldr	r3, [pc, #68]	; (8002064 <MX_I2C3_Init+0x50>)
 8002020:	4a12      	ldr	r2, [pc, #72]	; (800206c <MX_I2C3_Init+0x58>)
 8002022:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002024:	4b0f      	ldr	r3, [pc, #60]	; (8002064 <MX_I2C3_Init+0x50>)
 8002026:	2200      	movs	r2, #0
 8002028:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800202a:	4b0e      	ldr	r3, [pc, #56]	; (8002064 <MX_I2C3_Init+0x50>)
 800202c:	2200      	movs	r2, #0
 800202e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002030:	4b0c      	ldr	r3, [pc, #48]	; (8002064 <MX_I2C3_Init+0x50>)
 8002032:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002036:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002038:	4b0a      	ldr	r3, [pc, #40]	; (8002064 <MX_I2C3_Init+0x50>)
 800203a:	2200      	movs	r2, #0
 800203c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800203e:	4b09      	ldr	r3, [pc, #36]	; (8002064 <MX_I2C3_Init+0x50>)
 8002040:	2200      	movs	r2, #0
 8002042:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002044:	4b07      	ldr	r3, [pc, #28]	; (8002064 <MX_I2C3_Init+0x50>)
 8002046:	2200      	movs	r2, #0
 8002048:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800204a:	4b06      	ldr	r3, [pc, #24]	; (8002064 <MX_I2C3_Init+0x50>)
 800204c:	2200      	movs	r2, #0
 800204e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002050:	4804      	ldr	r0, [pc, #16]	; (8002064 <MX_I2C3_Init+0x50>)
 8002052:	f003 fc5f 	bl	8005914 <HAL_I2C_Init>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800205c:	f001 fc34 	bl	80038c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002060:	bf00      	nop
 8002062:	bd80      	pop	{r7, pc}
 8002064:	200002b8 	.word	0x200002b8
 8002068:	40005c00 	.word	0x40005c00
 800206c:	000186a0 	.word	0x000186a0

08002070 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b08e      	sub	sp, #56	; 0x38
 8002074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002076:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	605a      	str	r2, [r3, #4]
 8002080:	609a      	str	r2, [r3, #8]
 8002082:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002084:	f107 0320 	add.w	r3, r7, #32
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800208e:	1d3b      	adds	r3, r7, #4
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	605a      	str	r2, [r3, #4]
 8002096:	609a      	str	r2, [r3, #8]
 8002098:	60da      	str	r2, [r3, #12]
 800209a:	611a      	str	r2, [r3, #16]
 800209c:	615a      	str	r2, [r3, #20]
 800209e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020a0:	4b3e      	ldr	r3, [pc, #248]	; (800219c <MX_TIM2_Init+0x12c>)
 80020a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 42 - 1;
 80020a8:	4b3c      	ldr	r3, [pc, #240]	; (800219c <MX_TIM2_Init+0x12c>)
 80020aa:	2229      	movs	r2, #41	; 0x29
 80020ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ae:	4b3b      	ldr	r3, [pc, #236]	; (800219c <MX_TIM2_Init+0x12c>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000 - 1;
 80020b4:	4b39      	ldr	r3, [pc, #228]	; (800219c <MX_TIM2_Init+0x12c>)
 80020b6:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80020ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020bc:	4b37      	ldr	r3, [pc, #220]	; (800219c <MX_TIM2_Init+0x12c>)
 80020be:	2200      	movs	r2, #0
 80020c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020c2:	4b36      	ldr	r3, [pc, #216]	; (800219c <MX_TIM2_Init+0x12c>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020c8:	4834      	ldr	r0, [pc, #208]	; (800219c <MX_TIM2_Init+0x12c>)
 80020ca:	f005 fca5 	bl	8007a18 <HAL_TIM_Base_Init>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80020d4:	f001 fbf8 	bl	80038c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020dc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020e2:	4619      	mov	r1, r3
 80020e4:	482d      	ldr	r0, [pc, #180]	; (800219c <MX_TIM2_Init+0x12c>)
 80020e6:	f006 f8b1 	bl	800824c <HAL_TIM_ConfigClockSource>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80020f0:	f001 fbea 	bl	80038c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80020f4:	4829      	ldr	r0, [pc, #164]	; (800219c <MX_TIM2_Init+0x12c>)
 80020f6:	f005 fd2d 	bl	8007b54 <HAL_TIM_PWM_Init>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002100:	f001 fbe2 	bl	80038c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002104:	2300      	movs	r3, #0
 8002106:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002108:	2300      	movs	r3, #0
 800210a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800210c:	f107 0320 	add.w	r3, r7, #32
 8002110:	4619      	mov	r1, r3
 8002112:	4822      	ldr	r0, [pc, #136]	; (800219c <MX_TIM2_Init+0x12c>)
 8002114:	f006 fdee 	bl	8008cf4 <HAL_TIMEx_MasterConfigSynchronization>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800211e:	f001 fbd3 	bl	80038c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002122:	2360      	movs	r3, #96	; 0x60
 8002124:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2000 - 1;
 8002126:	f240 73cf 	movw	r3, #1999	; 0x7cf
 800212a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800212c:	2300      	movs	r3, #0
 800212e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002130:	2300      	movs	r3, #0
 8002132:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002134:	1d3b      	adds	r3, r7, #4
 8002136:	2200      	movs	r2, #0
 8002138:	4619      	mov	r1, r3
 800213a:	4818      	ldr	r0, [pc, #96]	; (800219c <MX_TIM2_Init+0x12c>)
 800213c:	f005 ffc0 	bl	80080c0 <HAL_TIM_PWM_ConfigChannel>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002146:	f001 fbbf 	bl	80038c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800214a:	1d3b      	adds	r3, r7, #4
 800214c:	2204      	movs	r2, #4
 800214e:	4619      	mov	r1, r3
 8002150:	4812      	ldr	r0, [pc, #72]	; (800219c <MX_TIM2_Init+0x12c>)
 8002152:	f005 ffb5 	bl	80080c0 <HAL_TIM_PWM_ConfigChannel>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 800215c:	f001 fbb4 	bl	80038c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002160:	1d3b      	adds	r3, r7, #4
 8002162:	2208      	movs	r2, #8
 8002164:	4619      	mov	r1, r3
 8002166:	480d      	ldr	r0, [pc, #52]	; (800219c <MX_TIM2_Init+0x12c>)
 8002168:	f005 ffaa 	bl	80080c0 <HAL_TIM_PWM_ConfigChannel>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8002172:	f001 fba9 	bl	80038c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002176:	1d3b      	adds	r3, r7, #4
 8002178:	220c      	movs	r2, #12
 800217a:	4619      	mov	r1, r3
 800217c:	4807      	ldr	r0, [pc, #28]	; (800219c <MX_TIM2_Init+0x12c>)
 800217e:	f005 ff9f 	bl	80080c0 <HAL_TIM_PWM_ConfigChannel>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8002188:	f001 fb9e 	bl	80038c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800218c:	4803      	ldr	r0, [pc, #12]	; (800219c <MX_TIM2_Init+0x12c>)
 800218e:	f002 faab 	bl	80046e8 <HAL_TIM_MspPostInit>

}
 8002192:	bf00      	nop
 8002194:	3738      	adds	r7, #56	; 0x38
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	20000bc4 	.word	0x20000bc4

080021a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b08a      	sub	sp, #40	; 0x28
 80021a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021a6:	f107 0318 	add.w	r3, r7, #24
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	605a      	str	r2, [r3, #4]
 80021b0:	609a      	str	r2, [r3, #8]
 80021b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021b4:	f107 0310 	add.w	r3, r7, #16
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80021be:	463b      	mov	r3, r7
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	605a      	str	r2, [r3, #4]
 80021c6:	609a      	str	r2, [r3, #8]
 80021c8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80021ca:	4b31      	ldr	r3, [pc, #196]	; (8002290 <MX_TIM3_Init+0xf0>)
 80021cc:	4a31      	ldr	r2, [pc, #196]	; (8002294 <MX_TIM3_Init+0xf4>)
 80021ce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42 - 1;
 80021d0:	4b2f      	ldr	r3, [pc, #188]	; (8002290 <MX_TIM3_Init+0xf0>)
 80021d2:	2229      	movs	r2, #41	; 0x29
 80021d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021d6:	4b2e      	ldr	r3, [pc, #184]	; (8002290 <MX_TIM3_Init+0xf0>)
 80021d8:	2200      	movs	r2, #0
 80021da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF;
 80021dc:	4b2c      	ldr	r3, [pc, #176]	; (8002290 <MX_TIM3_Init+0xf0>)
 80021de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021e4:	4b2a      	ldr	r3, [pc, #168]	; (8002290 <MX_TIM3_Init+0xf0>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ea:	4b29      	ldr	r3, [pc, #164]	; (8002290 <MX_TIM3_Init+0xf0>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80021f0:	4827      	ldr	r0, [pc, #156]	; (8002290 <MX_TIM3_Init+0xf0>)
 80021f2:	f005 fc11 	bl	8007a18 <HAL_TIM_Base_Init>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 80021fc:	f001 fb64 	bl	80038c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002200:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002204:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002206:	f107 0318 	add.w	r3, r7, #24
 800220a:	4619      	mov	r1, r3
 800220c:	4820      	ldr	r0, [pc, #128]	; (8002290 <MX_TIM3_Init+0xf0>)
 800220e:	f006 f81d 	bl	800824c <HAL_TIM_ConfigClockSource>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002218:	f001 fb56 	bl	80038c8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800221c:	481c      	ldr	r0, [pc, #112]	; (8002290 <MX_TIM3_Init+0xf0>)
 800221e:	f005 fd0d 	bl	8007c3c <HAL_TIM_IC_Init>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002228:	f001 fb4e 	bl	80038c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800222c:	2300      	movs	r3, #0
 800222e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002230:	2300      	movs	r3, #0
 8002232:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002234:	f107 0310 	add.w	r3, r7, #16
 8002238:	4619      	mov	r1, r3
 800223a:	4815      	ldr	r0, [pc, #84]	; (8002290 <MX_TIM3_Init+0xf0>)
 800223c:	f006 fd5a 	bl	8008cf4 <HAL_TIMEx_MasterConfigSynchronization>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8002246:	f001 fb3f 	bl	80038c8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800224a:	2300      	movs	r3, #0
 800224c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800224e:	2301      	movs	r3, #1
 8002250:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002252:	2300      	movs	r3, #0
 8002254:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002256:	2300      	movs	r3, #0
 8002258:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800225a:	463b      	mov	r3, r7
 800225c:	2200      	movs	r2, #0
 800225e:	4619      	mov	r1, r3
 8002260:	480b      	ldr	r0, [pc, #44]	; (8002290 <MX_TIM3_Init+0xf0>)
 8002262:	f005 fe91 	bl	8007f88 <HAL_TIM_IC_ConfigChannel>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 800226c:	f001 fb2c 	bl	80038c8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002270:	463b      	mov	r3, r7
 8002272:	2204      	movs	r2, #4
 8002274:	4619      	mov	r1, r3
 8002276:	4806      	ldr	r0, [pc, #24]	; (8002290 <MX_TIM3_Init+0xf0>)
 8002278:	f005 fe86 	bl	8007f88 <HAL_TIM_IC_ConfigChannel>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8002282:	f001 fb21 	bl	80038c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002286:	bf00      	nop
 8002288:	3728      	adds	r7, #40	; 0x28
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	20000734 	.word	0x20000734
 8002294:	40000400 	.word	0x40000400

08002298 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b08a      	sub	sp, #40	; 0x28
 800229c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800229e:	f107 0318 	add.w	r3, r7, #24
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	605a      	str	r2, [r3, #4]
 80022a8:	609a      	str	r2, [r3, #8]
 80022aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022ac:	f107 0310 	add.w	r3, r7, #16
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80022b6:	463b      	mov	r3, r7
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	609a      	str	r2, [r3, #8]
 80022c0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80022c2:	4b2b      	ldr	r3, [pc, #172]	; (8002370 <MX_TIM4_Init+0xd8>)
 80022c4:	4a2b      	ldr	r2, [pc, #172]	; (8002374 <MX_TIM4_Init+0xdc>)
 80022c6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 42 - 1;
 80022c8:	4b29      	ldr	r3, [pc, #164]	; (8002370 <MX_TIM4_Init+0xd8>)
 80022ca:	2229      	movs	r2, #41	; 0x29
 80022cc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ce:	4b28      	ldr	r3, [pc, #160]	; (8002370 <MX_TIM4_Init+0xd8>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xFFFF;
 80022d4:	4b26      	ldr	r3, [pc, #152]	; (8002370 <MX_TIM4_Init+0xd8>)
 80022d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022da:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022dc:	4b24      	ldr	r3, [pc, #144]	; (8002370 <MX_TIM4_Init+0xd8>)
 80022de:	2200      	movs	r2, #0
 80022e0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022e2:	4b23      	ldr	r3, [pc, #140]	; (8002370 <MX_TIM4_Init+0xd8>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80022e8:	4821      	ldr	r0, [pc, #132]	; (8002370 <MX_TIM4_Init+0xd8>)
 80022ea:	f005 fb95 	bl	8007a18 <HAL_TIM_Base_Init>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 80022f4:	f001 fae8 	bl	80038c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022fc:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80022fe:	f107 0318 	add.w	r3, r7, #24
 8002302:	4619      	mov	r1, r3
 8002304:	481a      	ldr	r0, [pc, #104]	; (8002370 <MX_TIM4_Init+0xd8>)
 8002306:	f005 ffa1 	bl	800824c <HAL_TIM_ConfigClockSource>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002310:	f001 fada 	bl	80038c8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002314:	4816      	ldr	r0, [pc, #88]	; (8002370 <MX_TIM4_Init+0xd8>)
 8002316:	f005 fc91 	bl	8007c3c <HAL_TIM_IC_Init>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002320:	f001 fad2 	bl	80038c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002324:	2300      	movs	r3, #0
 8002326:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002328:	2300      	movs	r3, #0
 800232a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800232c:	f107 0310 	add.w	r3, r7, #16
 8002330:	4619      	mov	r1, r3
 8002332:	480f      	ldr	r0, [pc, #60]	; (8002370 <MX_TIM4_Init+0xd8>)
 8002334:	f006 fcde 	bl	8008cf4 <HAL_TIMEx_MasterConfigSynchronization>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 800233e:	f001 fac3 	bl	80038c8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002342:	2300      	movs	r3, #0
 8002344:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002346:	2301      	movs	r3, #1
 8002348:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800234a:	2300      	movs	r3, #0
 800234c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800234e:	2300      	movs	r3, #0
 8002350:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002352:	463b      	mov	r3, r7
 8002354:	2200      	movs	r2, #0
 8002356:	4619      	mov	r1, r3
 8002358:	4805      	ldr	r0, [pc, #20]	; (8002370 <MX_TIM4_Init+0xd8>)
 800235a:	f005 fe15 	bl	8007f88 <HAL_TIM_IC_ConfigChannel>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8002364:	f001 fab0 	bl	80038c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002368:	bf00      	nop
 800236a:	3728      	adds	r7, #40	; 0x28
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	2000030c 	.word	0x2000030c
 8002374:	40000800 	.word	0x40000800

08002378 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b08a      	sub	sp, #40	; 0x28
 800237c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800237e:	f107 0318 	add.w	r3, r7, #24
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	605a      	str	r2, [r3, #4]
 8002388:	609a      	str	r2, [r3, #8]
 800238a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800238c:	f107 0310 	add.w	r3, r7, #16
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002396:	463b      	mov	r3, r7
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	605a      	str	r2, [r3, #4]
 800239e:	609a      	str	r2, [r3, #8]
 80023a0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80023a2:	4b2b      	ldr	r3, [pc, #172]	; (8002450 <MX_TIM5_Init+0xd8>)
 80023a4:	4a2b      	ldr	r2, [pc, #172]	; (8002454 <MX_TIM5_Init+0xdc>)
 80023a6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 42 - 1;
 80023a8:	4b29      	ldr	r3, [pc, #164]	; (8002450 <MX_TIM5_Init+0xd8>)
 80023aa:	2229      	movs	r2, #41	; 0x29
 80023ac:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023ae:	4b28      	ldr	r3, [pc, #160]	; (8002450 <MX_TIM5_Init+0xd8>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xFFFF;
 80023b4:	4b26      	ldr	r3, [pc, #152]	; (8002450 <MX_TIM5_Init+0xd8>)
 80023b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023ba:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023bc:	4b24      	ldr	r3, [pc, #144]	; (8002450 <MX_TIM5_Init+0xd8>)
 80023be:	2200      	movs	r2, #0
 80023c0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023c2:	4b23      	ldr	r3, [pc, #140]	; (8002450 <MX_TIM5_Init+0xd8>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80023c8:	4821      	ldr	r0, [pc, #132]	; (8002450 <MX_TIM5_Init+0xd8>)
 80023ca:	f005 fb25 	bl	8007a18 <HAL_TIM_Base_Init>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <MX_TIM5_Init+0x60>
  {
    Error_Handler();
 80023d4:	f001 fa78 	bl	80038c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023dc:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80023de:	f107 0318 	add.w	r3, r7, #24
 80023e2:	4619      	mov	r1, r3
 80023e4:	481a      	ldr	r0, [pc, #104]	; (8002450 <MX_TIM5_Init+0xd8>)
 80023e6:	f005 ff31 	bl	800824c <HAL_TIM_ConfigClockSource>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80023f0:	f001 fa6a 	bl	80038c8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 80023f4:	4816      	ldr	r0, [pc, #88]	; (8002450 <MX_TIM5_Init+0xd8>)
 80023f6:	f005 fc21 	bl	8007c3c <HAL_TIM_IC_Init>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002400:	f001 fa62 	bl	80038c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002404:	2300      	movs	r3, #0
 8002406:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002408:	2300      	movs	r3, #0
 800240a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800240c:	f107 0310 	add.w	r3, r7, #16
 8002410:	4619      	mov	r1, r3
 8002412:	480f      	ldr	r0, [pc, #60]	; (8002450 <MX_TIM5_Init+0xd8>)
 8002414:	f006 fc6e 	bl	8008cf4 <HAL_TIMEx_MasterConfigSynchronization>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <MX_TIM5_Init+0xaa>
  {
    Error_Handler();
 800241e:	f001 fa53 	bl	80038c8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002422:	2300      	movs	r3, #0
 8002424:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002426:	2301      	movs	r3, #1
 8002428:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800242a:	2300      	movs	r3, #0
 800242c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800242e:	2300      	movs	r3, #0
 8002430:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002432:	463b      	mov	r3, r7
 8002434:	2200      	movs	r2, #0
 8002436:	4619      	mov	r1, r3
 8002438:	4805      	ldr	r0, [pc, #20]	; (8002450 <MX_TIM5_Init+0xd8>)
 800243a:	f005 fda5 	bl	8007f88 <HAL_TIM_IC_ConfigChannel>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <MX_TIM5_Init+0xd0>
  {
    Error_Handler();
 8002444:	f001 fa40 	bl	80038c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002448:	bf00      	nop
 800244a:	3728      	adds	r7, #40	; 0x28
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	200006d8 	.word	0x200006d8
 8002454:	40000c00 	.word	0x40000c00

08002458 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800245e:	463b      	mov	r3, r7
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002466:	4b15      	ldr	r3, [pc, #84]	; (80024bc <MX_TIM6_Init+0x64>)
 8002468:	4a15      	ldr	r2, [pc, #84]	; (80024c0 <MX_TIM6_Init+0x68>)
 800246a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 42 - 1;
 800246c:	4b13      	ldr	r3, [pc, #76]	; (80024bc <MX_TIM6_Init+0x64>)
 800246e:	2229      	movs	r2, #41	; 0x29
 8002470:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002472:	4b12      	ldr	r3, [pc, #72]	; (80024bc <MX_TIM6_Init+0x64>)
 8002474:	2200      	movs	r2, #0
 8002476:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xFFFF;
 8002478:	4b10      	ldr	r3, [pc, #64]	; (80024bc <MX_TIM6_Init+0x64>)
 800247a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800247e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002480:	4b0e      	ldr	r3, [pc, #56]	; (80024bc <MX_TIM6_Init+0x64>)
 8002482:	2200      	movs	r2, #0
 8002484:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002486:	480d      	ldr	r0, [pc, #52]	; (80024bc <MX_TIM6_Init+0x64>)
 8002488:	f005 fac6 	bl	8007a18 <HAL_TIM_Base_Init>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002492:	f001 fa19 	bl	80038c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002496:	2300      	movs	r3, #0
 8002498:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800249a:	2300      	movs	r3, #0
 800249c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800249e:	463b      	mov	r3, r7
 80024a0:	4619      	mov	r1, r3
 80024a2:	4806      	ldr	r0, [pc, #24]	; (80024bc <MX_TIM6_Init+0x64>)
 80024a4:	f006 fc26 	bl	8008cf4 <HAL_TIMEx_MasterConfigSynchronization>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80024ae:	f001 fa0b 	bl	80038c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80024b2:	bf00      	nop
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	20000ad8 	.word	0x20000ad8
 80024c0:	40001000 	.word	0x40001000

080024c4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024ca:	463b      	mov	r3, r7
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80024d2:	4b15      	ldr	r3, [pc, #84]	; (8002528 <MX_TIM7_Init+0x64>)
 80024d4:	4a15      	ldr	r2, [pc, #84]	; (800252c <MX_TIM7_Init+0x68>)
 80024d6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 42000 - 1;
 80024d8:	4b13      	ldr	r3, [pc, #76]	; (8002528 <MX_TIM7_Init+0x64>)
 80024da:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80024de:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024e0:	4b11      	ldr	r3, [pc, #68]	; (8002528 <MX_TIM7_Init+0x64>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10;
 80024e6:	4b10      	ldr	r3, [pc, #64]	; (8002528 <MX_TIM7_Init+0x64>)
 80024e8:	220a      	movs	r2, #10
 80024ea:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024ec:	4b0e      	ldr	r3, [pc, #56]	; (8002528 <MX_TIM7_Init+0x64>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80024f2:	480d      	ldr	r0, [pc, #52]	; (8002528 <MX_TIM7_Init+0x64>)
 80024f4:	f005 fa90 	bl	8007a18 <HAL_TIM_Base_Init>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80024fe:	f001 f9e3 	bl	80038c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002502:	2300      	movs	r3, #0
 8002504:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002506:	2300      	movs	r3, #0
 8002508:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800250a:	463b      	mov	r3, r7
 800250c:	4619      	mov	r1, r3
 800250e:	4806      	ldr	r0, [pc, #24]	; (8002528 <MX_TIM7_Init+0x64>)
 8002510:	f006 fbf0 	bl	8008cf4 <HAL_TIMEx_MasterConfigSynchronization>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800251a:	f001 f9d5 	bl	80038c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800251e:	bf00      	nop
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	20000ca4 	.word	0x20000ca4
 800252c:	40001400 	.word	0x40001400

08002530 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b088      	sub	sp, #32
 8002534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002536:	f107 0310 	add.w	r3, r7, #16
 800253a:	2200      	movs	r2, #0
 800253c:	601a      	str	r2, [r3, #0]
 800253e:	605a      	str	r2, [r3, #4]
 8002540:	609a      	str	r2, [r3, #8]
 8002542:	60da      	str	r2, [r3, #12]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002544:	463b      	mov	r3, r7
 8002546:	2200      	movs	r2, #0
 8002548:	601a      	str	r2, [r3, #0]
 800254a:	605a      	str	r2, [r3, #4]
 800254c:	609a      	str	r2, [r3, #8]
 800254e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002550:	4b23      	ldr	r3, [pc, #140]	; (80025e0 <MX_TIM9_Init+0xb0>)
 8002552:	4a24      	ldr	r2, [pc, #144]	; (80025e4 <MX_TIM9_Init+0xb4>)
 8002554:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 42 - 1;
 8002556:	4b22      	ldr	r3, [pc, #136]	; (80025e0 <MX_TIM9_Init+0xb0>)
 8002558:	2229      	movs	r2, #41	; 0x29
 800255a:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800255c:	4b20      	ldr	r3, [pc, #128]	; (80025e0 <MX_TIM9_Init+0xb0>)
 800255e:	2200      	movs	r2, #0
 8002560:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 0xFFFF;
 8002562:	4b1f      	ldr	r3, [pc, #124]	; (80025e0 <MX_TIM9_Init+0xb0>)
 8002564:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002568:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800256a:	4b1d      	ldr	r3, [pc, #116]	; (80025e0 <MX_TIM9_Init+0xb0>)
 800256c:	2200      	movs	r2, #0
 800256e:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002570:	4b1b      	ldr	r3, [pc, #108]	; (80025e0 <MX_TIM9_Init+0xb0>)
 8002572:	2200      	movs	r2, #0
 8002574:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002576:	481a      	ldr	r0, [pc, #104]	; (80025e0 <MX_TIM9_Init+0xb0>)
 8002578:	f005 fa4e 	bl	8007a18 <HAL_TIM_Base_Init>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <MX_TIM9_Init+0x56>
  {
    Error_Handler();
 8002582:	f001 f9a1 	bl	80038c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002586:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800258a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800258c:	f107 0310 	add.w	r3, r7, #16
 8002590:	4619      	mov	r1, r3
 8002592:	4813      	ldr	r0, [pc, #76]	; (80025e0 <MX_TIM9_Init+0xb0>)
 8002594:	f005 fe5a 	bl	800824c <HAL_TIM_ConfigClockSource>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <MX_TIM9_Init+0x72>
  {
    Error_Handler();
 800259e:	f001 f993 	bl	80038c8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim9) != HAL_OK)
 80025a2:	480f      	ldr	r0, [pc, #60]	; (80025e0 <MX_TIM9_Init+0xb0>)
 80025a4:	f005 fb4a 	bl	8007c3c <HAL_TIM_IC_Init>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <MX_TIM9_Init+0x82>
  {
    Error_Handler();
 80025ae:	f001 f98b 	bl	80038c8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80025b2:	2300      	movs	r3, #0
 80025b4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80025b6:	2301      	movs	r3, #1
 80025b8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80025ba:	2300      	movs	r3, #0
 80025bc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80025be:	2300      	movs	r3, #0
 80025c0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80025c2:	463b      	mov	r3, r7
 80025c4:	2204      	movs	r2, #4
 80025c6:	4619      	mov	r1, r3
 80025c8:	4805      	ldr	r0, [pc, #20]	; (80025e0 <MX_TIM9_Init+0xb0>)
 80025ca:	f005 fcdd 	bl	8007f88 <HAL_TIM_IC_ConfigChannel>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <MX_TIM9_Init+0xa8>
  {
    Error_Handler();
 80025d4:	f001 f978 	bl	80038c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80025d8:	bf00      	nop
 80025da:	3720      	adds	r7, #32
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	20000b60 	.word	0x20000b60
 80025e4:	40014000 	.word	0x40014000

080025e8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80025ec:	4b0e      	ldr	r3, [pc, #56]	; (8002628 <MX_TIM10_Init+0x40>)
 80025ee:	4a0f      	ldr	r2, [pc, #60]	; (800262c <MX_TIM10_Init+0x44>)
 80025f0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 42000 - 1;
 80025f2:	4b0d      	ldr	r3, [pc, #52]	; (8002628 <MX_TIM10_Init+0x40>)
 80025f4:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80025f8:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025fa:	4b0b      	ldr	r3, [pc, #44]	; (8002628 <MX_TIM10_Init+0x40>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 100 - 1;
 8002600:	4b09      	ldr	r3, [pc, #36]	; (8002628 <MX_TIM10_Init+0x40>)
 8002602:	2263      	movs	r2, #99	; 0x63
 8002604:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002606:	4b08      	ldr	r3, [pc, #32]	; (8002628 <MX_TIM10_Init+0x40>)
 8002608:	2200      	movs	r2, #0
 800260a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800260c:	4b06      	ldr	r3, [pc, #24]	; (8002628 <MX_TIM10_Init+0x40>)
 800260e:	2200      	movs	r2, #0
 8002610:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002612:	4805      	ldr	r0, [pc, #20]	; (8002628 <MX_TIM10_Init+0x40>)
 8002614:	f005 fa00 	bl	8007a18 <HAL_TIM_Base_Init>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800261e:	f001 f953 	bl	80038c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002622:	bf00      	nop
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	20000460 	.word	0x20000460
 800262c:	40014400 	.word	0x40014400

08002630 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002634:	4b11      	ldr	r3, [pc, #68]	; (800267c <MX_USART1_UART_Init+0x4c>)
 8002636:	4a12      	ldr	r2, [pc, #72]	; (8002680 <MX_USART1_UART_Init+0x50>)
 8002638:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800263a:	4b10      	ldr	r3, [pc, #64]	; (800267c <MX_USART1_UART_Init+0x4c>)
 800263c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002640:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002642:	4b0e      	ldr	r3, [pc, #56]	; (800267c <MX_USART1_UART_Init+0x4c>)
 8002644:	2200      	movs	r2, #0
 8002646:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002648:	4b0c      	ldr	r3, [pc, #48]	; (800267c <MX_USART1_UART_Init+0x4c>)
 800264a:	2200      	movs	r2, #0
 800264c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800264e:	4b0b      	ldr	r3, [pc, #44]	; (800267c <MX_USART1_UART_Init+0x4c>)
 8002650:	2200      	movs	r2, #0
 8002652:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002654:	4b09      	ldr	r3, [pc, #36]	; (800267c <MX_USART1_UART_Init+0x4c>)
 8002656:	220c      	movs	r2, #12
 8002658:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800265a:	4b08      	ldr	r3, [pc, #32]	; (800267c <MX_USART1_UART_Init+0x4c>)
 800265c:	2200      	movs	r2, #0
 800265e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002660:	4b06      	ldr	r3, [pc, #24]	; (800267c <MX_USART1_UART_Init+0x4c>)
 8002662:	2200      	movs	r2, #0
 8002664:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002666:	4805      	ldr	r0, [pc, #20]	; (800267c <MX_USART1_UART_Init+0x4c>)
 8002668:	f006 fbd4 	bl	8008e14 <HAL_UART_Init>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002672:	f001 f929 	bl	80038c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002676:	bf00      	nop
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	200007a4 	.word	0x200007a4
 8002680:	40011000 	.word	0x40011000

08002684 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002688:	4b11      	ldr	r3, [pc, #68]	; (80026d0 <MX_USART2_UART_Init+0x4c>)
 800268a:	4a12      	ldr	r2, [pc, #72]	; (80026d4 <MX_USART2_UART_Init+0x50>)
 800268c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800268e:	4b10      	ldr	r3, [pc, #64]	; (80026d0 <MX_USART2_UART_Init+0x4c>)
 8002690:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002694:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002696:	4b0e      	ldr	r3, [pc, #56]	; (80026d0 <MX_USART2_UART_Init+0x4c>)
 8002698:	2200      	movs	r2, #0
 800269a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800269c:	4b0c      	ldr	r3, [pc, #48]	; (80026d0 <MX_USART2_UART_Init+0x4c>)
 800269e:	2200      	movs	r2, #0
 80026a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80026a2:	4b0b      	ldr	r3, [pc, #44]	; (80026d0 <MX_USART2_UART_Init+0x4c>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80026a8:	4b09      	ldr	r3, [pc, #36]	; (80026d0 <MX_USART2_UART_Init+0x4c>)
 80026aa:	220c      	movs	r2, #12
 80026ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026ae:	4b08      	ldr	r3, [pc, #32]	; (80026d0 <MX_USART2_UART_Init+0x4c>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80026b4:	4b06      	ldr	r3, [pc, #24]	; (80026d0 <MX_USART2_UART_Init+0x4c>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80026ba:	4805      	ldr	r0, [pc, #20]	; (80026d0 <MX_USART2_UART_Init+0x4c>)
 80026bc:	f006 fbaa 	bl	8008e14 <HAL_UART_Init>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80026c6:	f001 f8ff 	bl	80038c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80026ca:	bf00      	nop
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	20000c64 	.word	0x20000c64
 80026d4:	40004400 	.word	0x40004400

080026d8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80026dc:	4b11      	ldr	r3, [pc, #68]	; (8002724 <MX_USART3_UART_Init+0x4c>)
 80026de:	4a12      	ldr	r2, [pc, #72]	; (8002728 <MX_USART3_UART_Init+0x50>)
 80026e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80026e2:	4b10      	ldr	r3, [pc, #64]	; (8002724 <MX_USART3_UART_Init+0x4c>)
 80026e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80026ea:	4b0e      	ldr	r3, [pc, #56]	; (8002724 <MX_USART3_UART_Init+0x4c>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80026f0:	4b0c      	ldr	r3, [pc, #48]	; (8002724 <MX_USART3_UART_Init+0x4c>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80026f6:	4b0b      	ldr	r3, [pc, #44]	; (8002724 <MX_USART3_UART_Init+0x4c>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80026fc:	4b09      	ldr	r3, [pc, #36]	; (8002724 <MX_USART3_UART_Init+0x4c>)
 80026fe:	220c      	movs	r2, #12
 8002700:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002702:	4b08      	ldr	r3, [pc, #32]	; (8002724 <MX_USART3_UART_Init+0x4c>)
 8002704:	2200      	movs	r2, #0
 8002706:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002708:	4b06      	ldr	r3, [pc, #24]	; (8002724 <MX_USART3_UART_Init+0x4c>)
 800270a:	2200      	movs	r2, #0
 800270c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800270e:	4805      	ldr	r0, [pc, #20]	; (8002724 <MX_USART3_UART_Init+0x4c>)
 8002710:	f006 fb80 	bl	8008e14 <HAL_UART_Init>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800271a:	f001 f8d5 	bl	80038c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800271e:	bf00      	nop
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	200003b0 	.word	0x200003b0
 8002728:	40004800 	.word	0x40004800

0800272c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002732:	2300      	movs	r3, #0
 8002734:	607b      	str	r3, [r7, #4]
 8002736:	4b10      	ldr	r3, [pc, #64]	; (8002778 <MX_DMA_Init+0x4c>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	4a0f      	ldr	r2, [pc, #60]	; (8002778 <MX_DMA_Init+0x4c>)
 800273c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002740:	6313      	str	r3, [r2, #48]	; 0x30
 8002742:	4b0d      	ldr	r3, [pc, #52]	; (8002778 <MX_DMA_Init+0x4c>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002746:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800274a:	607b      	str	r3, [r7, #4]
 800274c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800274e:	2200      	movs	r2, #0
 8002750:	2100      	movs	r1, #0
 8002752:	200c      	movs	r0, #12
 8002754:	f002 fb87 	bl	8004e66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002758:	200c      	movs	r0, #12
 800275a:	f002 fba0 	bl	8004e9e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800275e:	2200      	movs	r2, #0
 8002760:	2100      	movs	r1, #0
 8002762:	2010      	movs	r0, #16
 8002764:	f002 fb7f 	bl	8004e66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002768:	2010      	movs	r0, #16
 800276a:	f002 fb98 	bl	8004e9e <HAL_NVIC_EnableIRQ>

}
 800276e:	bf00      	nop
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	40023800 	.word	0x40023800

0800277c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b08c      	sub	sp, #48	; 0x30
 8002780:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002782:	f107 031c 	add.w	r3, r7, #28
 8002786:	2200      	movs	r2, #0
 8002788:	601a      	str	r2, [r3, #0]
 800278a:	605a      	str	r2, [r3, #4]
 800278c:	609a      	str	r2, [r3, #8]
 800278e:	60da      	str	r2, [r3, #12]
 8002790:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002792:	2300      	movs	r3, #0
 8002794:	61bb      	str	r3, [r7, #24]
 8002796:	4b35      	ldr	r3, [pc, #212]	; (800286c <MX_GPIO_Init+0xf0>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	4a34      	ldr	r2, [pc, #208]	; (800286c <MX_GPIO_Init+0xf0>)
 800279c:	f043 0310 	orr.w	r3, r3, #16
 80027a0:	6313      	str	r3, [r2, #48]	; 0x30
 80027a2:	4b32      	ldr	r3, [pc, #200]	; (800286c <MX_GPIO_Init+0xf0>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	f003 0310 	and.w	r3, r3, #16
 80027aa:	61bb      	str	r3, [r7, #24]
 80027ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80027ae:	2300      	movs	r3, #0
 80027b0:	617b      	str	r3, [r7, #20]
 80027b2:	4b2e      	ldr	r3, [pc, #184]	; (800286c <MX_GPIO_Init+0xf0>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b6:	4a2d      	ldr	r2, [pc, #180]	; (800286c <MX_GPIO_Init+0xf0>)
 80027b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027bc:	6313      	str	r3, [r2, #48]	; 0x30
 80027be:	4b2b      	ldr	r3, [pc, #172]	; (800286c <MX_GPIO_Init+0xf0>)
 80027c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027c6:	617b      	str	r3, [r7, #20]
 80027c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ca:	2300      	movs	r3, #0
 80027cc:	613b      	str	r3, [r7, #16]
 80027ce:	4b27      	ldr	r3, [pc, #156]	; (800286c <MX_GPIO_Init+0xf0>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d2:	4a26      	ldr	r2, [pc, #152]	; (800286c <MX_GPIO_Init+0xf0>)
 80027d4:	f043 0301 	orr.w	r3, r3, #1
 80027d8:	6313      	str	r3, [r2, #48]	; 0x30
 80027da:	4b24      	ldr	r3, [pc, #144]	; (800286c <MX_GPIO_Init+0xf0>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	613b      	str	r3, [r7, #16]
 80027e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027e6:	2300      	movs	r3, #0
 80027e8:	60fb      	str	r3, [r7, #12]
 80027ea:	4b20      	ldr	r3, [pc, #128]	; (800286c <MX_GPIO_Init+0xf0>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ee:	4a1f      	ldr	r2, [pc, #124]	; (800286c <MX_GPIO_Init+0xf0>)
 80027f0:	f043 0308 	orr.w	r3, r3, #8
 80027f4:	6313      	str	r3, [r2, #48]	; 0x30
 80027f6:	4b1d      	ldr	r3, [pc, #116]	; (800286c <MX_GPIO_Init+0xf0>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	60fb      	str	r3, [r7, #12]
 8002800:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	60bb      	str	r3, [r7, #8]
 8002806:	4b19      	ldr	r3, [pc, #100]	; (800286c <MX_GPIO_Init+0xf0>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	4a18      	ldr	r2, [pc, #96]	; (800286c <MX_GPIO_Init+0xf0>)
 800280c:	f043 0304 	orr.w	r3, r3, #4
 8002810:	6313      	str	r3, [r2, #48]	; 0x30
 8002812:	4b16      	ldr	r3, [pc, #88]	; (800286c <MX_GPIO_Init+0xf0>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	f003 0304 	and.w	r3, r3, #4
 800281a:	60bb      	str	r3, [r7, #8]
 800281c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	607b      	str	r3, [r7, #4]
 8002822:	4b12      	ldr	r3, [pc, #72]	; (800286c <MX_GPIO_Init+0xf0>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	4a11      	ldr	r2, [pc, #68]	; (800286c <MX_GPIO_Init+0xf0>)
 8002828:	f043 0302 	orr.w	r3, r3, #2
 800282c:	6313      	str	r3, [r2, #48]	; 0x30
 800282e:	4b0f      	ldr	r3, [pc, #60]	; (800286c <MX_GPIO_Init+0xf0>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	607b      	str	r3, [r7, #4]
 8002838:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : RC_CH6_Pin */
  GPIO_InitStruct.Pin = RC_CH6_Pin;
 800283a:	2308      	movs	r3, #8
 800283c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800283e:	4b0c      	ldr	r3, [pc, #48]	; (8002870 <MX_GPIO_Init+0xf4>)
 8002840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002842:	2302      	movs	r3, #2
 8002844:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(RC_CH6_GPIO_Port, &GPIO_InitStruct);
 8002846:	f107 031c 	add.w	r3, r7, #28
 800284a:	4619      	mov	r1, r3
 800284c:	4809      	ldr	r0, [pc, #36]	; (8002874 <MX_GPIO_Init+0xf8>)
 800284e:	f002 feaf 	bl	80055b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002852:	2200      	movs	r2, #0
 8002854:	2100      	movs	r1, #0
 8002856:	2009      	movs	r0, #9
 8002858:	f002 fb05 	bl	8004e66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800285c:	2009      	movs	r0, #9
 800285e:	f002 fb1e 	bl	8004e9e <HAL_NVIC_EnableIRQ>

}
 8002862:	bf00      	nop
 8002864:	3730      	adds	r7, #48	; 0x30
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	40023800 	.word	0x40023800
 8002870:	10310000 	.word	0x10310000
 8002874:	40020c00 	.word	0x40020c00

08002878 <initPWM_DATA>:

/* USER CODE BEGIN 4 */



void initPWM_DATA(PWM_DATA* pwm_data, TIM_HandleTypeDef *htim, uint32_t channel){
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
	pwm_data->onFallingEdge = false;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2200      	movs	r2, #0
 8002888:	765a      	strb	r2, [r3, #25]
	pwm_data->onRisingEdge = true;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2201      	movs	r2, #1
 800288e:	761a      	strb	r2, [r3, #24]
	pwm_data->channel = channel;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	605a      	str	r2, [r3, #4]
	pwm_data->htim = htim;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	68ba      	ldr	r2, [r7, #8]
 800289a:	601a      	str	r2, [r3, #0]
}
 800289c:	bf00      	nop
 800289e:	3714      	adds	r7, #20
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <setPWM>:

void setPWM(TIM_HandleTypeDef htim, uint32_t channel, uint32_t dutyCycle){
 80028a8:	b084      	sub	sp, #16
 80028aa:	b490      	push	{r4, r7}
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	f107 0408 	add.w	r4, r7, #8
 80028b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	__HAL_TIM_SET_COMPARE(&htim, channel, dutyCycle);
 80028b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d103      	bne.n	80028c4 <setPWM+0x1c>
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80028c0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80028c2:	e010      	b.n	80028e6 <setPWM+0x3e>
	__HAL_TIM_SET_COMPARE(&htim, channel, dutyCycle);
 80028c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028c6:	2b04      	cmp	r3, #4
 80028c8:	d103      	bne.n	80028d2 <setPWM+0x2a>
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80028ce:	639a      	str	r2, [r3, #56]	; 0x38
}
 80028d0:	e009      	b.n	80028e6 <setPWM+0x3e>
	__HAL_TIM_SET_COMPARE(&htim, channel, dutyCycle);
 80028d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028d4:	2b08      	cmp	r3, #8
 80028d6:	d103      	bne.n	80028e0 <setPWM+0x38>
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80028dc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80028de:	e002      	b.n	80028e6 <setPWM+0x3e>
	__HAL_TIM_SET_COMPARE(&htim, channel, dutyCycle);
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80028e4:	641a      	str	r2, [r3, #64]	; 0x40
}
 80028e6:	bf00      	nop
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bc90      	pop	{r4, r7}
 80028ec:	b004      	add	sp, #16
 80028ee:	4770      	bx	lr

080028f0 <ESCInit>:

void ESCInit(){
 80028f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028f2:	b08f      	sub	sp, #60	; 0x3c
 80028f4:	af0e      	add	r7, sp, #56	; 0x38
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80028f6:	2100      	movs	r1, #0
 80028f8:	4861      	ldr	r0, [pc, #388]	; (8002a80 <ESCInit+0x190>)
 80028fa:	f005 f961 	bl	8007bc0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80028fe:	2104      	movs	r1, #4
 8002900:	485f      	ldr	r0, [pc, #380]	; (8002a80 <ESCInit+0x190>)
 8002902:	f005 f95d 	bl	8007bc0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002906:	2108      	movs	r1, #8
 8002908:	485d      	ldr	r0, [pc, #372]	; (8002a80 <ESCInit+0x190>)
 800290a:	f005 f959 	bl	8007bc0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800290e:	210c      	movs	r1, #12
 8002910:	485b      	ldr	r0, [pc, #364]	; (8002a80 <ESCInit+0x190>)
 8002912:	f005 f955 	bl	8007bc0 <HAL_TIM_PWM_Start>
	setPWM(htim2, TIM_CHANNEL_1, ESC_PWM_MAX);
 8002916:	4e5a      	ldr	r6, [pc, #360]	; (8002a80 <ESCInit+0x190>)
 8002918:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800291c:	930d      	str	r3, [sp, #52]	; 0x34
 800291e:	2300      	movs	r3, #0
 8002920:	930c      	str	r3, [sp, #48]	; 0x30
 8002922:	466d      	mov	r5, sp
 8002924:	f106 0410 	add.w	r4, r6, #16
 8002928:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800292a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800292c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800292e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002930:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002934:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002938:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800293c:	f7ff ffb4 	bl	80028a8 <setPWM>
	setPWM(htim2, TIM_CHANNEL_2, ESC_PWM_MAX);
 8002940:	4e4f      	ldr	r6, [pc, #316]	; (8002a80 <ESCInit+0x190>)
 8002942:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002946:	930d      	str	r3, [sp, #52]	; 0x34
 8002948:	2304      	movs	r3, #4
 800294a:	930c      	str	r3, [sp, #48]	; 0x30
 800294c:	466d      	mov	r5, sp
 800294e:	f106 0410 	add.w	r4, r6, #16
 8002952:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002954:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002956:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002958:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800295a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800295e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002962:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002966:	f7ff ff9f 	bl	80028a8 <setPWM>
	setPWM(htim2, TIM_CHANNEL_3, ESC_PWM_MAX);
 800296a:	4e45      	ldr	r6, [pc, #276]	; (8002a80 <ESCInit+0x190>)
 800296c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002970:	930d      	str	r3, [sp, #52]	; 0x34
 8002972:	2308      	movs	r3, #8
 8002974:	930c      	str	r3, [sp, #48]	; 0x30
 8002976:	466d      	mov	r5, sp
 8002978:	f106 0410 	add.w	r4, r6, #16
 800297c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800297e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002980:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002982:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002984:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002988:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800298c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002990:	f7ff ff8a 	bl	80028a8 <setPWM>
	setPWM(htim2, TIM_CHANNEL_4, ESC_PWM_MAX);
 8002994:	4e3a      	ldr	r6, [pc, #232]	; (8002a80 <ESCInit+0x190>)
 8002996:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800299a:	930d      	str	r3, [sp, #52]	; 0x34
 800299c:	230c      	movs	r3, #12
 800299e:	930c      	str	r3, [sp, #48]	; 0x30
 80029a0:	466d      	mov	r5, sp
 80029a2:	f106 0410 	add.w	r4, r6, #16
 80029a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029ae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80029b2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80029b6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80029ba:	f7ff ff75 	bl	80028a8 <setPWM>
	HAL_Delay(2000);
 80029be:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80029c2:	f002 f953 	bl	8004c6c <HAL_Delay>
	setPWM(htim2, TIM_CHANNEL_1, ESC_PWM_MIN);
 80029c6:	4e2e      	ldr	r6, [pc, #184]	; (8002a80 <ESCInit+0x190>)
 80029c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029cc:	930d      	str	r3, [sp, #52]	; 0x34
 80029ce:	2300      	movs	r3, #0
 80029d0:	930c      	str	r3, [sp, #48]	; 0x30
 80029d2:	466d      	mov	r5, sp
 80029d4:	f106 0410 	add.w	r4, r6, #16
 80029d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029e0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80029e4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80029e8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80029ec:	f7ff ff5c 	bl	80028a8 <setPWM>
	setPWM(htim2, TIM_CHANNEL_2, ESC_PWM_MIN);
 80029f0:	4e23      	ldr	r6, [pc, #140]	; (8002a80 <ESCInit+0x190>)
 80029f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029f6:	930d      	str	r3, [sp, #52]	; 0x34
 80029f8:	2304      	movs	r3, #4
 80029fa:	930c      	str	r3, [sp, #48]	; 0x30
 80029fc:	466d      	mov	r5, sp
 80029fe:	f106 0410 	add.w	r4, r6, #16
 8002a02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a0a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002a0e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002a12:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002a16:	f7ff ff47 	bl	80028a8 <setPWM>
	setPWM(htim2, TIM_CHANNEL_3, ESC_PWM_MIN);
 8002a1a:	4e19      	ldr	r6, [pc, #100]	; (8002a80 <ESCInit+0x190>)
 8002a1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a20:	930d      	str	r3, [sp, #52]	; 0x34
 8002a22:	2308      	movs	r3, #8
 8002a24:	930c      	str	r3, [sp, #48]	; 0x30
 8002a26:	466d      	mov	r5, sp
 8002a28:	f106 0410 	add.w	r4, r6, #16
 8002a2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a34:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002a38:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002a3c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002a40:	f7ff ff32 	bl	80028a8 <setPWM>
	setPWM(htim2, TIM_CHANNEL_4, ESC_PWM_MIN);
 8002a44:	4e0e      	ldr	r6, [pc, #56]	; (8002a80 <ESCInit+0x190>)
 8002a46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a4a:	930d      	str	r3, [sp, #52]	; 0x34
 8002a4c:	230c      	movs	r3, #12
 8002a4e:	930c      	str	r3, [sp, #48]	; 0x30
 8002a50:	466d      	mov	r5, sp
 8002a52:	f106 0410 	add.w	r4, r6, #16
 8002a56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a5e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002a62:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002a66:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002a6a:	f7ff ff1d 	bl	80028a8 <setPWM>
	HAL_Delay(2000);
 8002a6e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002a72:	f002 f8fb 	bl	8004c6c <HAL_Delay>
}
 8002a76:	bf00      	nop
 8002a78:	3704      	adds	r7, #4
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	20000bc4 	.word	0x20000bc4

08002a84 <BMPInit>:

void BMPInit(){
 8002a84:	b5b0      	push	{r4, r5, r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
	kalman_init(&kalman_altitude, 0.1, 0.1, 0.03);
 8002a8a:	ed9f 1a62 	vldr	s2, [pc, #392]	; 8002c14 <BMPInit+0x190>
 8002a8e:	eddf 0a62 	vldr	s1, [pc, #392]	; 8002c18 <BMPInit+0x194>
 8002a92:	ed9f 0a61 	vldr	s0, [pc, #388]	; 8002c18 <BMPInit+0x194>
 8002a96:	4861      	ldr	r0, [pc, #388]	; (8002c1c <BMPInit+0x198>)
 8002a98:	f7fe fb9c 	bl	80011d4 <kalman_init>
	bmp280_init_default_params(&bmp280.params);
 8002a9c:	4860      	ldr	r0, [pc, #384]	; (8002c20 <BMPInit+0x19c>)
 8002a9e:	f7fe fbb2 	bl	8001206 <bmp280_init_default_params>
	bmp280.addr = BMP280_I2C_ADDRESS_0;
 8002aa2:	4b60      	ldr	r3, [pc, #384]	; (8002c24 <BMPInit+0x1a0>)
 8002aa4:	2276      	movs	r2, #118	; 0x76
 8002aa6:	849a      	strh	r2, [r3, #36]	; 0x24
	bmp280.i2c = &hi2c1;
 8002aa8:	4b5e      	ldr	r3, [pc, #376]	; (8002c24 <BMPInit+0x1a0>)
 8002aaa:	4a5f      	ldr	r2, [pc, #380]	; (8002c28 <BMPInit+0x1a4>)
 8002aac:	629a      	str	r2, [r3, #40]	; 0x28

	while(!bmp280_init(&bmp280, &bmp280.params)){
 8002aae:	e020      	b.n	8002af2 <BMPInit+0x6e>
		strSize = sprintf((char*)buffer, "BMP280 initialization failed\r\n");
 8002ab0:	4a5e      	ldr	r2, [pc, #376]	; (8002c2c <BMPInit+0x1a8>)
 8002ab2:	4b5f      	ldr	r3, [pc, #380]	; (8002c30 <BMPInit+0x1ac>)
 8002ab4:	4615      	mov	r5, r2
 8002ab6:	461c      	mov	r4, r3
 8002ab8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002aba:	6028      	str	r0, [r5, #0]
 8002abc:	6069      	str	r1, [r5, #4]
 8002abe:	60aa      	str	r2, [r5, #8]
 8002ac0:	60eb      	str	r3, [r5, #12]
 8002ac2:	cc07      	ldmia	r4!, {r0, r1, r2}
 8002ac4:	6128      	str	r0, [r5, #16]
 8002ac6:	6169      	str	r1, [r5, #20]
 8002ac8:	61aa      	str	r2, [r5, #24]
 8002aca:	8823      	ldrh	r3, [r4, #0]
 8002acc:	78a2      	ldrb	r2, [r4, #2]
 8002ace:	83ab      	strh	r3, [r5, #28]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	77ab      	strb	r3, [r5, #30]
 8002ad4:	231e      	movs	r3, #30
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	4b56      	ldr	r3, [pc, #344]	; (8002c34 <BMPInit+0x1b0>)
 8002ada:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, buffer, strSize, 1000);
 8002adc:	4b55      	ldr	r3, [pc, #340]	; (8002c34 <BMPInit+0x1b0>)
 8002ade:	881a      	ldrh	r2, [r3, #0]
 8002ae0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ae4:	4951      	ldr	r1, [pc, #324]	; (8002c2c <BMPInit+0x1a8>)
 8002ae6:	4854      	ldr	r0, [pc, #336]	; (8002c38 <BMPInit+0x1b4>)
 8002ae8:	f006 f9e1 	bl	8008eae <HAL_UART_Transmit>
		HAL_Delay(50);
 8002aec:	2032      	movs	r0, #50	; 0x32
 8002aee:	f002 f8bd 	bl	8004c6c <HAL_Delay>
	while(!bmp280_init(&bmp280, &bmp280.params)){
 8002af2:	494b      	ldr	r1, [pc, #300]	; (8002c20 <BMPInit+0x19c>)
 8002af4:	484b      	ldr	r0, [pc, #300]	; (8002c24 <BMPInit+0x1a0>)
 8002af6:	f7fe fd01 	bl	80014fc <bmp280_init>
 8002afa:	4603      	mov	r3, r0
 8002afc:	f083 0301 	eor.w	r3, r3, #1
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1d4      	bne.n	8002ab0 <BMPInit+0x2c>
	}
	HAL_Delay(1000);
 8002b06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b0a:	f002 f8af 	bl	8004c6c <HAL_Delay>
	bme280p = bmp280.id == BME280_CHIP_ID;
 8002b0e:	4b45      	ldr	r3, [pc, #276]	; (8002c24 <BMPInit+0x1a0>)
 8002b10:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002b14:	2b60      	cmp	r3, #96	; 0x60
 8002b16:	bf0c      	ite	eq
 8002b18:	2301      	moveq	r3, #1
 8002b1a:	2300      	movne	r3, #0
 8002b1c:	b2da      	uxtb	r2, r3
 8002b1e:	4b47      	ldr	r3, [pc, #284]	; (8002c3c <BMPInit+0x1b8>)
 8002b20:	701a      	strb	r2, [r3, #0]
	strSize = sprintf((char*)buffer, "BMP280: found %s\r\n", bme280p ? "BME280" : "BMP280");
 8002b22:	4b46      	ldr	r3, [pc, #280]	; (8002c3c <BMPInit+0x1b8>)
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <BMPInit+0xaa>
 8002b2a:	4b45      	ldr	r3, [pc, #276]	; (8002c40 <BMPInit+0x1bc>)
 8002b2c:	e000      	b.n	8002b30 <BMPInit+0xac>
 8002b2e:	4b45      	ldr	r3, [pc, #276]	; (8002c44 <BMPInit+0x1c0>)
 8002b30:	461a      	mov	r2, r3
 8002b32:	4945      	ldr	r1, [pc, #276]	; (8002c48 <BMPInit+0x1c4>)
 8002b34:	483d      	ldr	r0, [pc, #244]	; (8002c2c <BMPInit+0x1a8>)
 8002b36:	f007 fc07 	bl	800a348 <siprintf>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	4b3d      	ldr	r3, [pc, #244]	; (8002c34 <BMPInit+0x1b0>)
 8002b40:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, buffer, strSize, 1000);
 8002b42:	4b3c      	ldr	r3, [pc, #240]	; (8002c34 <BMPInit+0x1b0>)
 8002b44:	881a      	ldrh	r2, [r3, #0]
 8002b46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b4a:	4938      	ldr	r1, [pc, #224]	; (8002c2c <BMPInit+0x1a8>)
 8002b4c:	483a      	ldr	r0, [pc, #232]	; (8002c38 <BMPInit+0x1b4>)
 8002b4e:	f006 f9ae 	bl	8008eae <HAL_UART_Transmit>

	strSize = sprintf((char*)buffer, "Calibrating.\r\n");
 8002b52:	4a36      	ldr	r2, [pc, #216]	; (8002c2c <BMPInit+0x1a8>)
 8002b54:	4b3d      	ldr	r3, [pc, #244]	; (8002c4c <BMPInit+0x1c8>)
 8002b56:	4614      	mov	r4, r2
 8002b58:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002b5a:	6020      	str	r0, [r4, #0]
 8002b5c:	6061      	str	r1, [r4, #4]
 8002b5e:	60a2      	str	r2, [r4, #8]
 8002b60:	881a      	ldrh	r2, [r3, #0]
 8002b62:	789b      	ldrb	r3, [r3, #2]
 8002b64:	81a2      	strh	r2, [r4, #12]
 8002b66:	73a3      	strb	r3, [r4, #14]
 8002b68:	230e      	movs	r3, #14
 8002b6a:	b29a      	uxth	r2, r3
 8002b6c:	4b31      	ldr	r3, [pc, #196]	; (8002c34 <BMPInit+0x1b0>)
 8002b6e:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, buffer, strSize, 10);
 8002b70:	4b30      	ldr	r3, [pc, #192]	; (8002c34 <BMPInit+0x1b0>)
 8002b72:	881a      	ldrh	r2, [r3, #0]
 8002b74:	230a      	movs	r3, #10
 8002b76:	492d      	ldr	r1, [pc, #180]	; (8002c2c <BMPInit+0x1a8>)
 8002b78:	482f      	ldr	r0, [pc, #188]	; (8002c38 <BMPInit+0x1b4>)
 8002b7a:	f006 f998 	bl	8008eae <HAL_UART_Transmit>

	float pres_total = 0;
 8002b7e:	f04f 0300 	mov.w	r3, #0
 8002b82:	617b      	str	r3, [r7, #20]
	float pressure, temperature, humidity;

	for(int i = 0; i < 100; ++i){
 8002b84:	2300      	movs	r3, #0
 8002b86:	613b      	str	r3, [r7, #16]
 8002b88:	e01f      	b.n	8002bca <BMPInit+0x146>
		while(bmp280_is_measuring(&bmp280)) continue;
 8002b8a:	bf00      	nop
 8002b8c:	4825      	ldr	r0, [pc, #148]	; (8002c24 <BMPInit+0x1a0>)
 8002b8e:	f7fe fd62 	bl	8001656 <bmp280_is_measuring>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d1f8      	bne.n	8002b8a <BMPInit+0x106>
		bmp280_read_float(&bmp280, &temperature, &pressure, &humidity);
 8002b98:	1d3b      	adds	r3, r7, #4
 8002b9a:	f107 020c 	add.w	r2, r7, #12
 8002b9e:	f107 0108 	add.w	r1, r7, #8
 8002ba2:	4820      	ldr	r0, [pc, #128]	; (8002c24 <BMPInit+0x1a0>)
 8002ba4:	f7ff f81a 	bl	8001bdc <bmp280_read_float>
		HAL_UART_Transmit(&huart1, (uint8_t*)".", 1, 10);
 8002ba8:	230a      	movs	r3, #10
 8002baa:	2201      	movs	r2, #1
 8002bac:	4928      	ldr	r1, [pc, #160]	; (8002c50 <BMPInit+0x1cc>)
 8002bae:	4822      	ldr	r0, [pc, #136]	; (8002c38 <BMPInit+0x1b4>)
 8002bb0:	f006 f97d 	bl	8008eae <HAL_UART_Transmit>
		pres_total = pres_total + pressure;
 8002bb4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bb8:	ed97 7a05 	vldr	s14, [r7, #20]
 8002bbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bc0:	edc7 7a05 	vstr	s15, [r7, #20]
	for(int i = 0; i < 100; ++i){
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	613b      	str	r3, [r7, #16]
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	2b63      	cmp	r3, #99	; 0x63
 8002bce:	dddd      	ble.n	8002b8c <BMPInit+0x108>
	}

	pressureRef = pres_total / 100;
 8002bd0:	ed97 7a05 	vldr	s14, [r7, #20]
 8002bd4:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8002c54 <BMPInit+0x1d0>
 8002bd8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bdc:	4b1e      	ldr	r3, [pc, #120]	; (8002c58 <BMPInit+0x1d4>)
 8002bde:	edc3 7a00 	vstr	s15, [r3]
	strSize = sprintf((char*)buffer,"Done!\r\n");
 8002be2:	4a12      	ldr	r2, [pc, #72]	; (8002c2c <BMPInit+0x1a8>)
 8002be4:	4b1d      	ldr	r3, [pc, #116]	; (8002c5c <BMPInit+0x1d8>)
 8002be6:	cb03      	ldmia	r3!, {r0, r1}
 8002be8:	6010      	str	r0, [r2, #0]
 8002bea:	6051      	str	r1, [r2, #4]
 8002bec:	2307      	movs	r3, #7
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	4b10      	ldr	r3, [pc, #64]	; (8002c34 <BMPInit+0x1b0>)
 8002bf2:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, buffer, strSize, 10);
 8002bf4:	4b0f      	ldr	r3, [pc, #60]	; (8002c34 <BMPInit+0x1b0>)
 8002bf6:	881a      	ldrh	r2, [r3, #0]
 8002bf8:	230a      	movs	r3, #10
 8002bfa:	490c      	ldr	r1, [pc, #48]	; (8002c2c <BMPInit+0x1a8>)
 8002bfc:	480e      	ldr	r0, [pc, #56]	; (8002c38 <BMPInit+0x1b4>)
 8002bfe:	f006 f956 	bl	8008eae <HAL_UART_Transmit>
	HAL_Delay(1000);
 8002c02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c06:	f002 f831 	bl	8004c6c <HAL_Delay>
}
 8002c0a:	bf00      	nop
 8002c0c:	3718      	adds	r7, #24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bdb0      	pop	{r4, r5, r7, pc}
 8002c12:	bf00      	nop
 8002c14:	3cf5c28f 	.word	0x3cf5c28f
 8002c18:	3dcccccd 	.word	0x3dcccccd
 8002c1c:	200006b0 	.word	0x200006b0
 8002c20:	20000c5c 	.word	0x20000c5c
 8002c24:	20000c30 	.word	0x20000c30
 8002c28:	2000040c 	.word	0x2000040c
 8002c2c:	200007e4 	.word	0x200007e4
 8002c30:	0800ce24 	.word	0x0800ce24
 8002c34:	20000d20 	.word	0x20000d20
 8002c38:	200007a4 	.word	0x200007a4
 8002c3c:	20000774 	.word	0x20000774
 8002c40:	0800ce44 	.word	0x0800ce44
 8002c44:	0800ce4c 	.word	0x0800ce4c
 8002c48:	0800ce54 	.word	0x0800ce54
 8002c4c:	0800ce68 	.word	0x0800ce68
 8002c50:	0800ce78 	.word	0x0800ce78
 8002c54:	42c80000 	.word	0x42c80000
 8002c58:	2000020c 	.word	0x2000020c
 8002c5c:	0800ce7c 	.word	0x0800ce7c

08002c60 <GPSInit>:

void GPSInit(){
 8002c60:	b598      	push	{r3, r4, r7, lr}
 8002c62:	af00      	add	r7, sp, #0
	  //__HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);

	  if(HAL_UART_Receive_DMA(&huart3, gps_rx_buf, GPS_BUF_SIZE) != HAL_OK){
 8002c64:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002c68:	4913      	ldr	r1, [pc, #76]	; (8002cb8 <GPSInit+0x58>)
 8002c6a:	4814      	ldr	r0, [pc, #80]	; (8002cbc <GPSInit+0x5c>)
 8002c6c:	f006 f9b8 	bl	8008fe0 <HAL_UART_Receive_DMA>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <GPSInit+0x1a>
		  Error_Handler();
 8002c76:	f000 fe27 	bl	80038c8 <Error_Handler>
	  }

	  __HAL_DMA_DISABLE_IT(huart3.hdmarx, DMA_IT_HT);
 8002c7a:	4b10      	ldr	r3, [pc, #64]	; (8002cbc <GPSInit+0x5c>)
 8002c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	4b0e      	ldr	r3, [pc, #56]	; (8002cbc <GPSInit+0x5c>)
 8002c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 0208 	bic.w	r2, r2, #8
 8002c8c:	601a      	str	r2, [r3, #0]

	  strSize = sprintf((char*)buffer, "GPS Done!\r\n");
 8002c8e:	4a0c      	ldr	r2, [pc, #48]	; (8002cc0 <GPSInit+0x60>)
 8002c90:	4b0c      	ldr	r3, [pc, #48]	; (8002cc4 <GPSInit+0x64>)
 8002c92:	4614      	mov	r4, r2
 8002c94:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002c96:	6020      	str	r0, [r4, #0]
 8002c98:	6061      	str	r1, [r4, #4]
 8002c9a:	60a2      	str	r2, [r4, #8]
 8002c9c:	230b      	movs	r3, #11
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	4b09      	ldr	r3, [pc, #36]	; (8002cc8 <GPSInit+0x68>)
 8002ca2:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1, buffer, strSize, 10);
 8002ca4:	4b08      	ldr	r3, [pc, #32]	; (8002cc8 <GPSInit+0x68>)
 8002ca6:	881a      	ldrh	r2, [r3, #0]
 8002ca8:	230a      	movs	r3, #10
 8002caa:	4905      	ldr	r1, [pc, #20]	; (8002cc0 <GPSInit+0x60>)
 8002cac:	4807      	ldr	r0, [pc, #28]	; (8002ccc <GPSInit+0x6c>)
 8002cae:	f006 f8fe 	bl	8008eae <HAL_UART_Transmit>
}
 8002cb2:	bf00      	nop
 8002cb4:	bd98      	pop	{r3, r4, r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	200008b8 	.word	0x200008b8
 8002cbc:	200003b0 	.word	0x200003b0
 8002cc0:	200007e4 	.word	0x200007e4
 8002cc4:	0800ce84 	.word	0x0800ce84
 8002cc8:	20000d20 	.word	0x20000d20
 8002ccc:	200007a4 	.word	0x200007a4

08002cd0 <CompassInit>:

void CompassInit(){
 8002cd0:	b5b0      	push	{r4, r5, r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
	I2Cdev_init(&hi2c3);
 8002cd4:	4824      	ldr	r0, [pc, #144]	; (8002d68 <CompassInit+0x98>)
 8002cd6:	f7fe f9f3 	bl	80010c0 <I2Cdev_init>

	HMC5883L_initialize();
 8002cda:	f7fe f985 	bl	8000fe8 <HMC5883L_initialize>
	while(!HMC5883L_testConnection()){
 8002cde:	e01f      	b.n	8002d20 <CompassInit+0x50>
		strSize = sprintf((char*)buffer, "Inisialisasi HMC5883L gagal!\r\n");
 8002ce0:	4a22      	ldr	r2, [pc, #136]	; (8002d6c <CompassInit+0x9c>)
 8002ce2:	4b23      	ldr	r3, [pc, #140]	; (8002d70 <CompassInit+0xa0>)
 8002ce4:	4615      	mov	r5, r2
 8002ce6:	461c      	mov	r4, r3
 8002ce8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cea:	6028      	str	r0, [r5, #0]
 8002cec:	6069      	str	r1, [r5, #4]
 8002cee:	60aa      	str	r2, [r5, #8]
 8002cf0:	60eb      	str	r3, [r5, #12]
 8002cf2:	cc07      	ldmia	r4!, {r0, r1, r2}
 8002cf4:	6128      	str	r0, [r5, #16]
 8002cf6:	6169      	str	r1, [r5, #20]
 8002cf8:	61aa      	str	r2, [r5, #24]
 8002cfa:	8823      	ldrh	r3, [r4, #0]
 8002cfc:	78a2      	ldrb	r2, [r4, #2]
 8002cfe:	83ab      	strh	r3, [r5, #28]
 8002d00:	4613      	mov	r3, r2
 8002d02:	77ab      	strb	r3, [r5, #30]
 8002d04:	231e      	movs	r3, #30
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	4b1a      	ldr	r3, [pc, #104]	; (8002d74 <CompassInit+0xa4>)
 8002d0a:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, buffer, strSize, 10);
 8002d0c:	4b19      	ldr	r3, [pc, #100]	; (8002d74 <CompassInit+0xa4>)
 8002d0e:	881a      	ldrh	r2, [r3, #0]
 8002d10:	230a      	movs	r3, #10
 8002d12:	4916      	ldr	r1, [pc, #88]	; (8002d6c <CompassInit+0x9c>)
 8002d14:	4818      	ldr	r0, [pc, #96]	; (8002d78 <CompassInit+0xa8>)
 8002d16:	f006 f8ca 	bl	8008eae <HAL_UART_Transmit>
		HAL_Delay(10);
 8002d1a:	200a      	movs	r0, #10
 8002d1c:	f001 ffa6 	bl	8004c6c <HAL_Delay>
	while(!HMC5883L_testConnection()){
 8002d20:	f7fe f978 	bl	8001014 <HMC5883L_testConnection>
 8002d24:	4603      	mov	r3, r0
 8002d26:	f083 0301 	eor.w	r3, r3, #1
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1d7      	bne.n	8002ce0 <CompassInit+0x10>
	}
	strSize = sprintf((char*)buffer, "HMC5883L Sukses!\r\n");
 8002d30:	4a0e      	ldr	r2, [pc, #56]	; (8002d6c <CompassInit+0x9c>)
 8002d32:	4b12      	ldr	r3, [pc, #72]	; (8002d7c <CompassInit+0xac>)
 8002d34:	4615      	mov	r5, r2
 8002d36:	461c      	mov	r4, r3
 8002d38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d3a:	6028      	str	r0, [r5, #0]
 8002d3c:	6069      	str	r1, [r5, #4]
 8002d3e:	60aa      	str	r2, [r5, #8]
 8002d40:	60eb      	str	r3, [r5, #12]
 8002d42:	8823      	ldrh	r3, [r4, #0]
 8002d44:	78a2      	ldrb	r2, [r4, #2]
 8002d46:	822b      	strh	r3, [r5, #16]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	74ab      	strb	r3, [r5, #18]
 8002d4c:	2312      	movs	r3, #18
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	4b08      	ldr	r3, [pc, #32]	; (8002d74 <CompassInit+0xa4>)
 8002d52:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, buffer, strSize, 10);
 8002d54:	4b07      	ldr	r3, [pc, #28]	; (8002d74 <CompassInit+0xa4>)
 8002d56:	881a      	ldrh	r2, [r3, #0]
 8002d58:	230a      	movs	r3, #10
 8002d5a:	4904      	ldr	r1, [pc, #16]	; (8002d6c <CompassInit+0x9c>)
 8002d5c:	4806      	ldr	r0, [pc, #24]	; (8002d78 <CompassInit+0xa8>)
 8002d5e:	f006 f8a6 	bl	8008eae <HAL_UART_Transmit>
}
 8002d62:	bf00      	nop
 8002d64:	bdb0      	pop	{r4, r5, r7, pc}
 8002d66:	bf00      	nop
 8002d68:	200002b8 	.word	0x200002b8
 8002d6c:	200007e4 	.word	0x200007e4
 8002d70:	0800ce90 	.word	0x0800ce90
 8002d74:	20000d20 	.word	0x20000d20
 8002d78:	200007a4 	.word	0x200007a4
 8002d7c:	0800ceb0 	.word	0x0800ceb0

08002d80 <RemoteInit>:

void RemoteInit(){
 8002d80:	b5b0      	push	{r4, r5, r7, lr}
 8002d82:	af00      	add	r7, sp, #0
	  fly_mode = FLY_MODE_OFF;
 8002d84:	4b32      	ldr	r3, [pc, #200]	; (8002e50 <RemoteInit+0xd0>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	701a      	strb	r2, [r3, #0]
	  strSize = sprintf((char*)buffer, "Wahana Mode Off\r\n");
 8002d8a:	4a32      	ldr	r2, [pc, #200]	; (8002e54 <RemoteInit+0xd4>)
 8002d8c:	4b32      	ldr	r3, [pc, #200]	; (8002e58 <RemoteInit+0xd8>)
 8002d8e:	4615      	mov	r5, r2
 8002d90:	461c      	mov	r4, r3
 8002d92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d94:	6028      	str	r0, [r5, #0]
 8002d96:	6069      	str	r1, [r5, #4]
 8002d98:	60aa      	str	r2, [r5, #8]
 8002d9a:	60eb      	str	r3, [r5, #12]
 8002d9c:	8823      	ldrh	r3, [r4, #0]
 8002d9e:	822b      	strh	r3, [r5, #16]
 8002da0:	2311      	movs	r3, #17
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	4b2d      	ldr	r3, [pc, #180]	; (8002e5c <RemoteInit+0xdc>)
 8002da6:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1, buffer, strSize, 10);
 8002da8:	4b2c      	ldr	r3, [pc, #176]	; (8002e5c <RemoteInit+0xdc>)
 8002daa:	881a      	ldrh	r2, [r3, #0]
 8002dac:	230a      	movs	r3, #10
 8002dae:	4929      	ldr	r1, [pc, #164]	; (8002e54 <RemoteInit+0xd4>)
 8002db0:	482b      	ldr	r0, [pc, #172]	; (8002e60 <RemoteInit+0xe0>)
 8002db2:	f006 f87c 	bl	8008eae <HAL_UART_Transmit>

	  initPWM_DATA(&RC_CH1, &htim3, TIM_CHANNEL_2);
 8002db6:	2204      	movs	r2, #4
 8002db8:	492a      	ldr	r1, [pc, #168]	; (8002e64 <RemoteInit+0xe4>)
 8002dba:	482b      	ldr	r0, [pc, #172]	; (8002e68 <RemoteInit+0xe8>)
 8002dbc:	f7ff fd5c 	bl	8002878 <initPWM_DATA>
	  initPWM_DATA(&RC_CH2, &htim9, TIM_CHANNEL_2);
 8002dc0:	2204      	movs	r2, #4
 8002dc2:	492a      	ldr	r1, [pc, #168]	; (8002e6c <RemoteInit+0xec>)
 8002dc4:	482a      	ldr	r0, [pc, #168]	; (8002e70 <RemoteInit+0xf0>)
 8002dc6:	f7ff fd57 	bl	8002878 <initPWM_DATA>
	  initPWM_DATA(&RC_CH3, &htim5, TIM_CHANNEL_1);
 8002dca:	2200      	movs	r2, #0
 8002dcc:	4929      	ldr	r1, [pc, #164]	; (8002e74 <RemoteInit+0xf4>)
 8002dce:	482a      	ldr	r0, [pc, #168]	; (8002e78 <RemoteInit+0xf8>)
 8002dd0:	f7ff fd52 	bl	8002878 <initPWM_DATA>
	  initPWM_DATA(&RC_CH4, &htim3, TIM_CHANNEL_1);
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	4923      	ldr	r1, [pc, #140]	; (8002e64 <RemoteInit+0xe4>)
 8002dd8:	4828      	ldr	r0, [pc, #160]	; (8002e7c <RemoteInit+0xfc>)
 8002dda:	f7ff fd4d 	bl	8002878 <initPWM_DATA>
	  initPWM_DATA(&RC_CH5, &htim4, TIM_CHANNEL_1);
 8002dde:	2200      	movs	r2, #0
 8002de0:	4927      	ldr	r1, [pc, #156]	; (8002e80 <RemoteInit+0x100>)
 8002de2:	4828      	ldr	r0, [pc, #160]	; (8002e84 <RemoteInit+0x104>)
 8002de4:	f7ff fd48 	bl	8002878 <initPWM_DATA>
	  initPWM_DATA(&RC_CH6, &htim6, 0);
 8002de8:	2200      	movs	r2, #0
 8002dea:	4927      	ldr	r1, [pc, #156]	; (8002e88 <RemoteInit+0x108>)
 8002dec:	4827      	ldr	r0, [pc, #156]	; (8002e8c <RemoteInit+0x10c>)
 8002dee:	f7ff fd43 	bl	8002878 <initPWM_DATA>

	  HAL_TIM_IC_Start_IT(RC_CH1.htim, RC_CH1.channel);
 8002df2:	4b1d      	ldr	r3, [pc, #116]	; (8002e68 <RemoteInit+0xe8>)
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	4b1c      	ldr	r3, [pc, #112]	; (8002e68 <RemoteInit+0xe8>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	4610      	mov	r0, r2
 8002dfe:	f004 ff53 	bl	8007ca8 <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(RC_CH2.htim, RC_CH2.channel);
 8002e02:	4b1b      	ldr	r3, [pc, #108]	; (8002e70 <RemoteInit+0xf0>)
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	4b1a      	ldr	r3, [pc, #104]	; (8002e70 <RemoteInit+0xf0>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	4610      	mov	r0, r2
 8002e0e:	f004 ff4b 	bl	8007ca8 <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(RC_CH3.htim, RC_CH3.channel);
 8002e12:	4b19      	ldr	r3, [pc, #100]	; (8002e78 <RemoteInit+0xf8>)
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	4b18      	ldr	r3, [pc, #96]	; (8002e78 <RemoteInit+0xf8>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	4610      	mov	r0, r2
 8002e1e:	f004 ff43 	bl	8007ca8 <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(RC_CH4.htim, RC_CH4.channel);
 8002e22:	4b16      	ldr	r3, [pc, #88]	; (8002e7c <RemoteInit+0xfc>)
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	4b15      	ldr	r3, [pc, #84]	; (8002e7c <RemoteInit+0xfc>)
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	4610      	mov	r0, r2
 8002e2e:	f004 ff3b 	bl	8007ca8 <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(RC_CH5.htim, RC_CH5.channel);
 8002e32:	4b14      	ldr	r3, [pc, #80]	; (8002e84 <RemoteInit+0x104>)
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	4b13      	ldr	r3, [pc, #76]	; (8002e84 <RemoteInit+0x104>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	4610      	mov	r0, r2
 8002e3e:	f004 ff33 	bl	8007ca8 <HAL_TIM_IC_Start_IT>
	  HAL_TIM_Base_Start(RC_CH6.htim);
 8002e42:	4b12      	ldr	r3, [pc, #72]	; (8002e8c <RemoteInit+0x10c>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f004 fe11 	bl	8007a6e <HAL_TIM_Base_Start>
}
 8002e4c:	bf00      	nop
 8002e4e:	bdb0      	pop	{r4, r5, r7, pc}
 8002e50:	20000bbc 	.word	0x20000bbc
 8002e54:	200007e4 	.word	0x200007e4
 8002e58:	0800cde8 	.word	0x0800cde8
 8002e5c:	20000d20 	.word	0x20000d20
 8002e60:	200007a4 	.word	0x200007a4
 8002e64:	20000734 	.word	0x20000734
 8002e68:	20000718 	.word	0x20000718
 8002e6c:	20000b60 	.word	0x20000b60
 8002e70:	20000d24 	.word	0x20000d24
 8002e74:	200006d8 	.word	0x200006d8
 8002e78:	20000c04 	.word	0x20000c04
 8002e7c:	200003f0 	.word	0x200003f0
 8002e80:	2000030c 	.word	0x2000030c
 8002e84:	20000d04 	.word	0x20000d04
 8002e88:	20000ad8 	.word	0x20000ad8
 8002e8c:	20000b18 	.word	0x20000b18

08002e90 <IMUInit>:

void IMUInit(){
 8002e90:	b5b0      	push	{r4, r5, r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
	  HAL_UART_Transmit(&huart2, (u_char*)0xA5, 1, 10);
 8002e96:	230a      	movs	r3, #10
 8002e98:	2201      	movs	r2, #1
 8002e9a:	21a5      	movs	r1, #165	; 0xa5
 8002e9c:	485b      	ldr	r0, [pc, #364]	; (800300c <IMUInit+0x17c>)
 8002e9e:	f006 f806 	bl	8008eae <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, (u_char*)0x54, 1, 10);
 8002ea2:	230a      	movs	r3, #10
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	2154      	movs	r1, #84	; 0x54
 8002ea8:	4858      	ldr	r0, [pc, #352]	; (800300c <IMUInit+0x17c>)
 8002eaa:	f006 f800 	bl	8008eae <HAL_UART_Transmit>

	  HAL_Delay(3000);
 8002eae:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002eb2:	f001 fedb 	bl	8004c6c <HAL_Delay>
	  strSize = sprintf((char*)buffer,"Kalibrasi tilt done\r\n");
 8002eb6:	4a56      	ldr	r2, [pc, #344]	; (8003010 <IMUInit+0x180>)
 8002eb8:	4b56      	ldr	r3, [pc, #344]	; (8003014 <IMUInit+0x184>)
 8002eba:	4615      	mov	r5, r2
 8002ebc:	461c      	mov	r4, r3
 8002ebe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ec0:	6028      	str	r0, [r5, #0]
 8002ec2:	6069      	str	r1, [r5, #4]
 8002ec4:	60aa      	str	r2, [r5, #8]
 8002ec6:	60eb      	str	r3, [r5, #12]
 8002ec8:	6820      	ldr	r0, [r4, #0]
 8002eca:	6128      	str	r0, [r5, #16]
 8002ecc:	88a3      	ldrh	r3, [r4, #4]
 8002ece:	82ab      	strh	r3, [r5, #20]
 8002ed0:	2315      	movs	r3, #21
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	4b50      	ldr	r3, [pc, #320]	; (8003018 <IMUInit+0x188>)
 8002ed6:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1, buffer, strSize, 100);
 8002ed8:	4b4f      	ldr	r3, [pc, #316]	; (8003018 <IMUInit+0x188>)
 8002eda:	881a      	ldrh	r2, [r3, #0]
 8002edc:	2364      	movs	r3, #100	; 0x64
 8002ede:	494c      	ldr	r1, [pc, #304]	; (8003010 <IMUInit+0x180>)
 8002ee0:	484e      	ldr	r0, [pc, #312]	; (800301c <IMUInit+0x18c>)
 8002ee2:	f005 ffe4 	bl	8008eae <HAL_UART_Transmit>

	  //Kalibrasi heading
	  HAL_UART_Transmit(&huart2, (u_char*)0xA5, 1, 10);
 8002ee6:	230a      	movs	r3, #10
 8002ee8:	2201      	movs	r2, #1
 8002eea:	21a5      	movs	r1, #165	; 0xa5
 8002eec:	4847      	ldr	r0, [pc, #284]	; (800300c <IMUInit+0x17c>)
 8002eee:	f005 ffde 	bl	8008eae <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, (u_char*)0x55, 1, 10);
 8002ef2:	230a      	movs	r3, #10
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	2155      	movs	r1, #85	; 0x55
 8002ef8:	4844      	ldr	r0, [pc, #272]	; (800300c <IMUInit+0x17c>)
 8002efa:	f005 ffd8 	bl	8008eae <HAL_UART_Transmit>
	  HAL_Delay(3000);
 8002efe:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002f02:	f001 feb3 	bl	8004c6c <HAL_Delay>

	  strSize = sprintf((char*)buffer,"Kalibrasi heading done\r\n");
 8002f06:	4a42      	ldr	r2, [pc, #264]	; (8003010 <IMUInit+0x180>)
 8002f08:	4b45      	ldr	r3, [pc, #276]	; (8003020 <IMUInit+0x190>)
 8002f0a:	4615      	mov	r5, r2
 8002f0c:	461c      	mov	r4, r3
 8002f0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f10:	6028      	str	r0, [r5, #0]
 8002f12:	6069      	str	r1, [r5, #4]
 8002f14:	60aa      	str	r2, [r5, #8]
 8002f16:	60eb      	str	r3, [r5, #12]
 8002f18:	cc03      	ldmia	r4!, {r0, r1}
 8002f1a:	6128      	str	r0, [r5, #16]
 8002f1c:	6169      	str	r1, [r5, #20]
 8002f1e:	7823      	ldrb	r3, [r4, #0]
 8002f20:	762b      	strb	r3, [r5, #24]
 8002f22:	2318      	movs	r3, #24
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	4b3c      	ldr	r3, [pc, #240]	; (8003018 <IMUInit+0x188>)
 8002f28:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1, buffer, strSize, 100);
 8002f2a:	4b3b      	ldr	r3, [pc, #236]	; (8003018 <IMUInit+0x188>)
 8002f2c:	881a      	ldrh	r2, [r3, #0]
 8002f2e:	2364      	movs	r3, #100	; 0x64
 8002f30:	4937      	ldr	r1, [pc, #220]	; (8003010 <IMUInit+0x180>)
 8002f32:	483a      	ldr	r0, [pc, #232]	; (800301c <IMUInit+0x18c>)
 8002f34:	f005 ffbb 	bl	8008eae <HAL_UART_Transmit>

	  //Konfigurasi Output ASCII
	  HAL_UART_Transmit(&huart2, (u_char*)0xA5, 1, 10);
 8002f38:	230a      	movs	r3, #10
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	21a5      	movs	r1, #165	; 0xa5
 8002f3e:	4833      	ldr	r0, [pc, #204]	; (800300c <IMUInit+0x17c>)
 8002f40:	f005 ffb5 	bl	8008eae <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, (u_char*)0x52, 1, 10);
 8002f44:	230a      	movs	r3, #10
 8002f46:	2201      	movs	r2, #1
 8002f48:	2152      	movs	r1, #82	; 0x52
 8002f4a:	4830      	ldr	r0, [pc, #192]	; (800300c <IMUInit+0x17c>)
 8002f4c:	f005 ffaf 	bl	8008eae <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8002f50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002f54:	f001 fe8a 	bl	8004c6c <HAL_Delay>

	  HAL_UART_Receive_DMA(&huart2, IMUBuffer, 16);
 8002f58:	2210      	movs	r2, #16
 8002f5a:	4932      	ldr	r1, [pc, #200]	; (8003024 <IMUInit+0x194>)
 8002f5c:	482b      	ldr	r0, [pc, #172]	; (800300c <IMUInit+0x17c>)
 8002f5e:	f006 f83f 	bl	8008fe0 <HAL_UART_Receive_DMA>

	  float pitchTotal = 0, yawTotal = 0, rollTotal = 0;
 8002f62:	f04f 0300 	mov.w	r3, #0
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	f04f 0300 	mov.w	r3, #0
 8002f6c:	60bb      	str	r3, [r7, #8]
 8002f6e:	f04f 0300 	mov.w	r3, #0
 8002f72:	607b      	str	r3, [r7, #4]

	  int i = 0;
 8002f74:	2300      	movs	r3, #0
 8002f76:	603b      	str	r3, [r7, #0]
	  while(i < 100){
 8002f78:	e026      	b.n	8002fc8 <IMUInit+0x138>
		  if(IMUDataStatus){
 8002f7a:	4b2b      	ldr	r3, [pc, #172]	; (8003028 <IMUInit+0x198>)
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d021      	beq.n	8002fc6 <IMUInit+0x136>
			  i += 1;
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	3301      	adds	r3, #1
 8002f86:	603b      	str	r3, [r7, #0]
			  getIMUData(&IMU_Data);
 8002f88:	4828      	ldr	r0, [pc, #160]	; (800302c <IMUInit+0x19c>)
 8002f8a:	f000 f859 	bl	8003040 <getIMUData>
			  pitchTotal += IMU_Data.PITCH;
 8002f8e:	4b27      	ldr	r3, [pc, #156]	; (800302c <IMUInit+0x19c>)
 8002f90:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f94:	ed97 7a03 	vldr	s14, [r7, #12]
 8002f98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f9c:	edc7 7a03 	vstr	s15, [r7, #12]
			  yawTotal += IMU_Data.YAW;
 8002fa0:	4b22      	ldr	r3, [pc, #136]	; (800302c <IMUInit+0x19c>)
 8002fa2:	edd3 7a00 	vldr	s15, [r3]
 8002fa6:	ed97 7a02 	vldr	s14, [r7, #8]
 8002faa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fae:	edc7 7a02 	vstr	s15, [r7, #8]
			  rollTotal += IMU_Data.ROLL;
 8002fb2:	4b1e      	ldr	r3, [pc, #120]	; (800302c <IMUInit+0x19c>)
 8002fb4:	edd3 7a02 	vldr	s15, [r3, #8]
 8002fb8:	ed97 7a01 	vldr	s14, [r7, #4]
 8002fbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fc0:	edc7 7a01 	vstr	s15, [r7, #4]
 8002fc4:	e000      	b.n	8002fc8 <IMUInit+0x138>
		  } else continue;
 8002fc6:	bf00      	nop
	  while(i < 100){
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	2b63      	cmp	r3, #99	; 0x63
 8002fcc:	ddd5      	ble.n	8002f7a <IMUInit+0xea>
	  }
	  pitchRef = pitchTotal / 100;
 8002fce:	ed97 7a03 	vldr	s14, [r7, #12]
 8002fd2:	eddf 6a17 	vldr	s13, [pc, #92]	; 8003030 <IMUInit+0x1a0>
 8002fd6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002fda:	4b16      	ldr	r3, [pc, #88]	; (8003034 <IMUInit+0x1a4>)
 8002fdc:	edc3 7a00 	vstr	s15, [r3]
	  yawRef = yawTotal / 100;
 8002fe0:	ed97 7a02 	vldr	s14, [r7, #8]
 8002fe4:	eddf 6a12 	vldr	s13, [pc, #72]	; 8003030 <IMUInit+0x1a0>
 8002fe8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002fec:	4b12      	ldr	r3, [pc, #72]	; (8003038 <IMUInit+0x1a8>)
 8002fee:	edc3 7a00 	vstr	s15, [r3]
	  rollRef = rollTotal / 100;
 8002ff2:	ed97 7a01 	vldr	s14, [r7, #4]
 8002ff6:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8003030 <IMUInit+0x1a0>
 8002ffa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ffe:	4b0f      	ldr	r3, [pc, #60]	; (800303c <IMUInit+0x1ac>)
 8003000:	edc3 7a00 	vstr	s15, [r3]
}
 8003004:	bf00      	nop
 8003006:	3710      	adds	r7, #16
 8003008:	46bd      	mov	sp, r7
 800300a:	bdb0      	pop	{r4, r5, r7, pc}
 800300c:	20000c64 	.word	0x20000c64
 8003010:	200007e4 	.word	0x200007e4
 8003014:	0800cec4 	.word	0x0800cec4
 8003018:	20000d20 	.word	0x20000d20
 800301c:	200007a4 	.word	0x200007a4
 8003020:	0800cedc 	.word	0x0800cedc
 8003024:	20000c20 	.word	0x20000c20
 8003028:	200004b8 	.word	0x200004b8
 800302c:	200006cc 	.word	0x200006cc
 8003030:	42c80000 	.word	0x42c80000
 8003034:	20000210 	.word	0x20000210
 8003038:	20000214 	.word	0x20000214
 800303c:	20000218 	.word	0x20000218

08003040 <getIMUData>:
		  while(pointer != NULL);
		  GPSDataStatus = false;
	  }
}

void getIMUData(IMU_DATA *IMU_Data){
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
	if(IMUDataStatus){
 8003048:	4b59      	ldr	r3, [pc, #356]	; (80031b0 <getIMUData+0x170>)
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	f000 80aa 	beq.w	80031a6 <getIMUData+0x166>
		  uint8_t YPR[8];
		  IMU_Data->YAW = 1000.0f, IMU_Data->PITCH = 1000.0f, IMU_Data->ROLL = 1000.0f;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a57      	ldr	r2, [pc, #348]	; (80031b4 <getIMUData+0x174>)
 8003056:	601a      	str	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a56      	ldr	r2, [pc, #344]	; (80031b4 <getIMUData+0x174>)
 800305c:	605a      	str	r2, [r3, #4]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a54      	ldr	r2, [pc, #336]	; (80031b4 <getIMUData+0x174>)
 8003062:	609a      	str	r2, [r3, #8]
		  char* buf;
		  buf = memchr(IMUBuffer, 0xAA, 16);
 8003064:	2210      	movs	r2, #16
 8003066:	21aa      	movs	r1, #170	; 0xaa
 8003068:	4853      	ldr	r0, [pc, #332]	; (80031b8 <getIMUData+0x178>)
 800306a:	f7fd f8b1 	bl	80001d0 <memchr>
 800306e:	6178      	str	r0, [r7, #20]
		  memcpy(YPR, buf, 8);
 8003070:	697a      	ldr	r2, [r7, #20]
 8003072:	f107 030c 	add.w	r3, r7, #12
 8003076:	6810      	ldr	r0, [r2, #0]
 8003078:	6851      	ldr	r1, [r2, #4]
 800307a:	c303      	stmia	r3!, {r0, r1}
		  if(YPR[0] == 0xAA && YPR[7] == 0x55){
 800307c:	7b3b      	ldrb	r3, [r7, #12]
 800307e:	2baa      	cmp	r3, #170	; 0xaa
 8003080:	f040 808e 	bne.w	80031a0 <getIMUData+0x160>
 8003084:	7cfb      	ldrb	r3, [r7, #19]
 8003086:	2b55      	cmp	r3, #85	; 0x55
 8003088:	f040 808a 	bne.w	80031a0 <getIMUData+0x160>
			  IMU_Data->YAW = (float)((YPR[1] << 8 | YPR[2]) * 0.01f);
 800308c:	7b7b      	ldrb	r3, [r7, #13]
 800308e:	021b      	lsls	r3, r3, #8
 8003090:	7bba      	ldrb	r2, [r7, #14]
 8003092:	4313      	orrs	r3, r2
 8003094:	ee07 3a90 	vmov	s15, r3
 8003098:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800309c:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80031bc <getIMUData+0x17c>
 80030a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	edc3 7a00 	vstr	s15, [r3]
			  if(IMU_Data->YAW > 179) IMU_Data->YAW = IMU_Data->YAW - 655;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	edd3 7a00 	vldr	s15, [r3]
 80030b0:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80031c0 <getIMUData+0x180>
 80030b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030bc:	dd09      	ble.n	80030d2 <getIMUData+0x92>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	edd3 7a00 	vldr	s15, [r3]
 80030c4:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80031c4 <getIMUData+0x184>
 80030c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	edc3 7a00 	vstr	s15, [r3]

			  sensorYaw = IMU_Data->YAW - yawRef;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	ed93 7a00 	vldr	s14, [r3]
 80030d8:	4b3b      	ldr	r3, [pc, #236]	; (80031c8 <getIMUData+0x188>)
 80030da:	edd3 7a00 	vldr	s15, [r3]
 80030de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030e2:	4b3a      	ldr	r3, [pc, #232]	; (80031cc <getIMUData+0x18c>)
 80030e4:	edc3 7a00 	vstr	s15, [r3]

			  IMU_Data->PITCH = (float)((YPR[3] << 8 | YPR[4]) * 0.01f);
 80030e8:	7bfb      	ldrb	r3, [r7, #15]
 80030ea:	021b      	lsls	r3, r3, #8
 80030ec:	7c3a      	ldrb	r2, [r7, #16]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	ee07 3a90 	vmov	s15, r3
 80030f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030f8:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80031bc <getIMUData+0x17c>
 80030fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	edc3 7a01 	vstr	s15, [r3, #4]
			  if(IMU_Data->PITCH > 179) IMU_Data->PITCH = IMU_Data->PITCH - 655;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	edd3 7a01 	vldr	s15, [r3, #4]
 800310c:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80031c0 <getIMUData+0x180>
 8003110:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003118:	dd09      	ble.n	800312e <getIMUData+0xee>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003120:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80031c4 <getIMUData+0x184>
 8003124:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	edc3 7a01 	vstr	s15, [r3, #4]

			  sensorPitch = IMU_Data->PITCH - pitchRef;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	ed93 7a01 	vldr	s14, [r3, #4]
 8003134:	4b26      	ldr	r3, [pc, #152]	; (80031d0 <getIMUData+0x190>)
 8003136:	edd3 7a00 	vldr	s15, [r3]
 800313a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800313e:	4b25      	ldr	r3, [pc, #148]	; (80031d4 <getIMUData+0x194>)
 8003140:	edc3 7a00 	vstr	s15, [r3]

			  IMU_Data->ROLL = (float)((YPR[5] << 8 | YPR[6]) * 0.01f);
 8003144:	7c7b      	ldrb	r3, [r7, #17]
 8003146:	021b      	lsls	r3, r3, #8
 8003148:	7cba      	ldrb	r2, [r7, #18]
 800314a:	4313      	orrs	r3, r2
 800314c:	ee07 3a90 	vmov	s15, r3
 8003150:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003154:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80031bc <getIMUData+0x17c>
 8003158:	ee67 7a87 	vmul.f32	s15, s15, s14
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	edc3 7a02 	vstr	s15, [r3, #8]
			  if(IMU_Data->ROLL > 179) IMU_Data->ROLL = IMU_Data->ROLL - 655;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	edd3 7a02 	vldr	s15, [r3, #8]
 8003168:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80031c0 <getIMUData+0x180>
 800316c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003174:	dd09      	ble.n	800318a <getIMUData+0x14a>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	edd3 7a02 	vldr	s15, [r3, #8]
 800317c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80031c4 <getIMUData+0x184>
 8003180:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	edc3 7a02 	vstr	s15, [r3, #8]

			  sensorRoll = IMU_Data->ROLL - rollRef;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	ed93 7a02 	vldr	s14, [r3, #8]
 8003190:	4b11      	ldr	r3, [pc, #68]	; (80031d8 <getIMUData+0x198>)
 8003192:	edd3 7a00 	vldr	s15, [r3]
 8003196:	ee77 7a67 	vsub.f32	s15, s14, s15
 800319a:	4b10      	ldr	r3, [pc, #64]	; (80031dc <getIMUData+0x19c>)
 800319c:	edc3 7a00 	vstr	s15, [r3]

			  //strSize = sprintf((char*)buffer, "Y: %f, P: %f, R: %f\r\n", sensorYaw, sensorPitch, sensorRoll);
			  //HAL_UART_Transmit(&huart1, buffer, strSize, 100);
		  }
		  IMUDataStatus = false;
 80031a0:	4b03      	ldr	r3, [pc, #12]	; (80031b0 <getIMUData+0x170>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	701a      	strb	r2, [r3, #0]
	}

}
 80031a6:	bf00      	nop
 80031a8:	3718      	adds	r7, #24
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	200004b8 	.word	0x200004b8
 80031b4:	447a0000 	.word	0x447a0000
 80031b8:	20000c20 	.word	0x20000c20
 80031bc:	3c23d70a 	.word	0x3c23d70a
 80031c0:	43330000 	.word	0x43330000
 80031c4:	4423c000 	.word	0x4423c000
 80031c8:	20000214 	.word	0x20000214
 80031cc:	20000aac 	.word	0x20000aac
 80031d0:	20000210 	.word	0x20000210
 80031d4:	20000bc0 	.word	0x20000bc0
 80031d8:	20000218 	.word	0x20000218
 80031dc:	200004a4 	.word	0x200004a4

080031e0 <setPWM_DATA>:

void setPWM_DATA(PWM_DATA* pwm_data){
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
	if(pwm_data->onRisingEdge && !pwm_data->onFallingEdge){
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	7e1b      	ldrb	r3, [r3, #24]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f000 8087 	beq.w	8003300 <setPWM_DATA+0x120>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	7e5b      	ldrb	r3, [r3, #25]
 80031f6:	f083 0301 	eor.w	r3, r3, #1
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d07f      	beq.n	8003300 <setPWM_DATA+0x120>
		pwm_data->onRisingEdge = false;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	761a      	strb	r2, [r3, #24]
		pwm_data->onFallingEdge = true;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	765a      	strb	r2, [r3, #25]
		pwm_data->RisingEdgeVal = HAL_TIM_ReadCapturedValue(pwm_data->htim, pwm_data->channel);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	4619      	mov	r1, r3
 8003216:	4610      	mov	r0, r2
 8003218:	f005 f8d0 	bl	80083bc <HAL_TIM_ReadCapturedValue>
 800321c:	4602      	mov	r2, r0
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	609a      	str	r2, [r3, #8]
		__HAL_TIM_SET_CAPTUREPOLARITY(pwm_data->htim, pwm_data->channel, TIM_INPUTCHANNELPOLARITY_FALLING);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10a      	bne.n	8003240 <setPWM_DATA+0x60>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	6a1a      	ldr	r2, [r3, #32]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 020a 	bic.w	r2, r2, #10
 800323c:	621a      	str	r2, [r3, #32]
 800323e:	e027      	b.n	8003290 <setPWM_DATA+0xb0>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	2b04      	cmp	r3, #4
 8003246:	d10a      	bne.n	800325e <setPWM_DATA+0x7e>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	6a1a      	ldr	r2, [r3, #32]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800325a:	621a      	str	r2, [r3, #32]
 800325c:	e018      	b.n	8003290 <setPWM_DATA+0xb0>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	2b08      	cmp	r3, #8
 8003264:	d10a      	bne.n	800327c <setPWM_DATA+0x9c>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	6a1a      	ldr	r2, [r3, #32]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8003278:	621a      	str	r2, [r3, #32]
 800327a:	e009      	b.n	8003290 <setPWM_DATA+0xb0>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	6a1a      	ldr	r2, [r3, #32]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 800328e:	621a      	str	r2, [r3, #32]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d10a      	bne.n	80032ae <setPWM_DATA+0xce>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6a1a      	ldr	r2, [r3, #32]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f042 0202 	orr.w	r2, r2, #2
 80032aa:	621a      	str	r2, [r3, #32]
 80032ac:	e0aa      	b.n	8003404 <setPWM_DATA+0x224>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	d10a      	bne.n	80032cc <setPWM_DATA+0xec>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6a1a      	ldr	r2, [r3, #32]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f042 0220 	orr.w	r2, r2, #32
 80032c8:	621a      	str	r2, [r3, #32]
 80032ca:	e09b      	b.n	8003404 <setPWM_DATA+0x224>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	2b08      	cmp	r3, #8
 80032d2:	d10a      	bne.n	80032ea <setPWM_DATA+0x10a>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	6a1a      	ldr	r2, [r3, #32]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032e6:	621a      	str	r2, [r3, #32]
 80032e8:	e08c      	b.n	8003404 <setPWM_DATA+0x224>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	6a1a      	ldr	r2, [r3, #32]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032fc:	621a      	str	r2, [r3, #32]
 80032fe:	e081      	b.n	8003404 <setPWM_DATA+0x224>

	} else if(pwm_data->onFallingEdge && !pwm_data->onRisingEdge) {
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	7e5b      	ldrb	r3, [r3, #25]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d07d      	beq.n	8003404 <setPWM_DATA+0x224>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	7e1b      	ldrb	r3, [r3, #24]
 800330c:	f083 0301 	eor.w	r3, r3, #1
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d076      	beq.n	8003404 <setPWM_DATA+0x224>
		pwm_data->onFallingEdge = false;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	765a      	strb	r2, [r3, #25]
		pwm_data->onRisingEdge =  true;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	761a      	strb	r2, [r3, #24]
		pwm_data->FallingEdgeVal = HAL_TIM_ReadCapturedValue(pwm_data->htim, pwm_data->channel);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	4619      	mov	r1, r3
 800332c:	4610      	mov	r0, r2
 800332e:	f005 f845 	bl	80083bc <HAL_TIM_ReadCapturedValue>
 8003332:	4602      	mov	r2, r0
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_CAPTUREPOLARITY(pwm_data->htim, pwm_data->channel, TIM_INPUTCHANNELPOLARITY_RISING);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d10a      	bne.n	8003356 <setPWM_DATA+0x176>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	6a1a      	ldr	r2, [r3, #32]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 020a 	bic.w	r2, r2, #10
 8003352:	621a      	str	r2, [r3, #32]
 8003354:	e027      	b.n	80033a6 <setPWM_DATA+0x1c6>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	2b04      	cmp	r3, #4
 800335c:	d10a      	bne.n	8003374 <setPWM_DATA+0x194>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6a1a      	ldr	r2, [r3, #32]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003370:	621a      	str	r2, [r3, #32]
 8003372:	e018      	b.n	80033a6 <setPWM_DATA+0x1c6>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	2b08      	cmp	r3, #8
 800337a:	d10a      	bne.n	8003392 <setPWM_DATA+0x1b2>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6a1a      	ldr	r2, [r3, #32]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 800338e:	621a      	str	r2, [r3, #32]
 8003390:	e009      	b.n	80033a6 <setPWM_DATA+0x1c6>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6a1a      	ldr	r2, [r3, #32]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 80033a4:	621a      	str	r2, [r3, #32]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d108      	bne.n	80033c0 <setPWM_DATA+0x1e0>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	6a12      	ldr	r2, [r2, #32]
 80033bc:	621a      	str	r2, [r3, #32]
 80033be:	e021      	b.n	8003404 <setPWM_DATA+0x224>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	2b04      	cmp	r3, #4
 80033c6:	d108      	bne.n	80033da <setPWM_DATA+0x1fa>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6a12      	ldr	r2, [r2, #32]
 80033d6:	621a      	str	r2, [r3, #32]
 80033d8:	e014      	b.n	8003404 <setPWM_DATA+0x224>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	2b08      	cmp	r3, #8
 80033e0:	d108      	bne.n	80033f4 <setPWM_DATA+0x214>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	6a12      	ldr	r2, [r2, #32]
 80033f0:	621a      	str	r2, [r3, #32]
 80033f2:	e007      	b.n	8003404 <setPWM_DATA+0x224>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	6a12      	ldr	r2, [r2, #32]
 8003402:	621a      	str	r2, [r3, #32]
	}
	if(pwm_data->FallingEdgeVal >= pwm_data->RisingEdgeVal){
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68da      	ldr	r2, [r3, #12]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	429a      	cmp	r2, r3
 800340e:	d30c      	bcc.n	800342a <setPWM_DATA+0x24a>
		pwm_data->DutyCycleVal = pwm_data->FallingEdgeVal - pwm_data->RisingEdgeVal;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	68da      	ldr	r2, [r3, #12]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	1ad2      	subs	r2, r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	611a      	str	r2, [r3, #16]
		pwm_data->FallingEdgeVal = 0;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	60da      	str	r2, [r3, #12]
		pwm_data->RisingEdgeVal = 0;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	609a      	str	r2, [r3, #8]
	}
}
 800342a:	bf00      	nop
 800342c:	3708      	adds	r7, #8
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
	...

08003434 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
  //HAL_UART_Transmit(&huart3, RxBuffer, 8, 100);
  if(huart->Instance == USART2 && !IMUDataStatus)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a10      	ldr	r2, [pc, #64]	; (8003484 <HAL_UART_RxCpltCallback+0x50>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d109      	bne.n	800345a <HAL_UART_RxCpltCallback+0x26>
 8003446:	4b10      	ldr	r3, [pc, #64]	; (8003488 <HAL_UART_RxCpltCallback+0x54>)
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	f083 0301 	eor.w	r3, r3, #1
 800344e:	b2db      	uxtb	r3, r3
 8003450:	2b00      	cmp	r3, #0
 8003452:	d002      	beq.n	800345a <HAL_UART_RxCpltCallback+0x26>
	  IMUDataStatus = true;
 8003454:	4b0c      	ldr	r3, [pc, #48]	; (8003488 <HAL_UART_RxCpltCallback+0x54>)
 8003456:	2201      	movs	r2, #1
 8003458:	701a      	strb	r2, [r3, #0]

  if(huart->Instance == USART3){
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a0b      	ldr	r2, [pc, #44]	; (800348c <HAL_UART_RxCpltCallback+0x58>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d10b      	bne.n	800347c <HAL_UART_RxCpltCallback+0x48>
	  memcpy(GPSBuffer, gps_rx_buf, GPS_BUF_SIZE);
 8003464:	4a0a      	ldr	r2, [pc, #40]	; (8003490 <HAL_UART_RxCpltCallback+0x5c>)
 8003466:	4b0b      	ldr	r3, [pc, #44]	; (8003494 <HAL_UART_RxCpltCallback+0x60>)
 8003468:	4610      	mov	r0, r2
 800346a:	4619      	mov	r1, r3
 800346c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003470:	461a      	mov	r2, r3
 8003472:	f006 faf9 	bl	8009a68 <memcpy>
	  GPSDataStatus = true;
 8003476:	4b08      	ldr	r3, [pc, #32]	; (8003498 <HAL_UART_RxCpltCallback+0x64>)
 8003478:	2201      	movs	r2, #1
 800347a:	701a      	strb	r2, [r3, #0]
  }
 }
 800347c:	bf00      	nop
 800347e:	3708      	adds	r7, #8
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	40004400 	.word	0x40004400
 8003488:	200004b8 	.word	0x200004b8
 800348c:	40004800 	.word	0x40004800
 8003490:	200004bc 	.word	0x200004bc
 8003494:	200008b8 	.word	0x200008b8
 8003498:	20000ba0 	.word	0x20000ba0

0800349c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800349c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80034a0:	b088      	sub	sp, #32
 80034a2:	af06      	add	r7, sp, #24
 80034a4:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7 && (fly_mode == FLY_MODE_ON || fly_mode == FLY_MODE_HOLD)){
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a3b      	ldr	r2, [pc, #236]	; (8003598 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d13c      	bne.n	800352a <HAL_TIM_PeriodElapsedCallback+0x8e>
 80034b0:	4b3a      	ldr	r3, [pc, #232]	; (800359c <HAL_TIM_PeriodElapsedCallback+0x100>)
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d003      	beq.n	80034c0 <HAL_TIM_PeriodElapsedCallback+0x24>
 80034b8:	4b38      	ldr	r3, [pc, #224]	; (800359c <HAL_TIM_PeriodElapsedCallback+0x100>)
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d134      	bne.n	800352a <HAL_TIM_PeriodElapsedCallback+0x8e>
		PIDRoll.timesampling = PIDYaw.timesampling = PIDPitch.timesampling = 0.01;
 80034c0:	4b37      	ldr	r3, [pc, #220]	; (80035a0 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80034c2:	4a38      	ldr	r2, [pc, #224]	; (80035a4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80034c4:	625a      	str	r2, [r3, #36]	; 0x24
 80034c6:	4b36      	ldr	r3, [pc, #216]	; (80035a0 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80034c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ca:	4a37      	ldr	r2, [pc, #220]	; (80035a8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80034cc:	6253      	str	r3, [r2, #36]	; 0x24
 80034ce:	4b36      	ldr	r3, [pc, #216]	; (80035a8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80034d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d2:	4a36      	ldr	r2, [pc, #216]	; (80035ac <HAL_TIM_PeriodElapsedCallback+0x110>)
 80034d4:	6253      	str	r3, [r2, #36]	; 0x24
		PIDControl(&PIDRoll, sensorRoll, inputRoll);
 80034d6:	4b36      	ldr	r3, [pc, #216]	; (80035b0 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80034d8:	edd3 7a00 	vldr	s15, [r3]
 80034dc:	4b35      	ldr	r3, [pc, #212]	; (80035b4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80034de:	ed93 7a00 	vldr	s14, [r3]
 80034e2:	eef0 0a47 	vmov.f32	s1, s14
 80034e6:	eeb0 0a67 	vmov.f32	s0, s15
 80034ea:	4830      	ldr	r0, [pc, #192]	; (80035ac <HAL_TIM_PeriodElapsedCallback+0x110>)
 80034ec:	f000 f9f4 	bl	80038d8 <PIDControl>
		PIDControl(&PIDPitch, sensorPitch, inputPitch);
 80034f0:	4b31      	ldr	r3, [pc, #196]	; (80035b8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80034f2:	edd3 7a00 	vldr	s15, [r3]
 80034f6:	4b31      	ldr	r3, [pc, #196]	; (80035bc <HAL_TIM_PeriodElapsedCallback+0x120>)
 80034f8:	ed93 7a00 	vldr	s14, [r3]
 80034fc:	eef0 0a47 	vmov.f32	s1, s14
 8003500:	eeb0 0a67 	vmov.f32	s0, s15
 8003504:	4826      	ldr	r0, [pc, #152]	; (80035a0 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8003506:	f000 f9e7 	bl	80038d8 <PIDControl>
		PIDControl(&PIDYaw, sensorYaw, inputYaw);
 800350a:	4b2d      	ldr	r3, [pc, #180]	; (80035c0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800350c:	edd3 7a00 	vldr	s15, [r3]
 8003510:	4b2c      	ldr	r3, [pc, #176]	; (80035c4 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8003512:	ed93 7a00 	vldr	s14, [r3]
 8003516:	eef0 0a47 	vmov.f32	s1, s14
 800351a:	eeb0 0a67 	vmov.f32	s0, s15
 800351e:	4822      	ldr	r0, [pc, #136]	; (80035a8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8003520:	f000 f9da 	bl	80038d8 <PIDControl>
		trustControl();
 8003524:	f000 fafc 	bl	8003b20 <trustControl>
				 // RC_CH1.DutyCycleVal, RC_CH2.DutyCycleVal, RC_CH3.DutyCycleVal, RC_CH4.DutyCycleVal, RC_CH5.DutyCycleVal, RC_CH6.DutyCycleVal);
		  //HAL_UART_Transmit(&huart1, buffer, strSize, 100);
		  //strSize = sprintf((char*)buffer, "ESC1: %d\tESC2: %d\tESC3: %d\tESC4: %d\r\n", pulseESC1, pulseESC2, pulseESC3, pulseESC4);
		  //HAL_UART_Transmit(&huart1, buffer, strSize, 100);
	}
}
 8003528:	e031      	b.n	800358e <HAL_TIM_PeriodElapsedCallback+0xf2>
	}else if(htim->Instance == TIM10){
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a26      	ldr	r2, [pc, #152]	; (80035c8 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d12c      	bne.n	800358e <HAL_TIM_PeriodElapsedCallback+0xf2>
		  strSize = sprintf((char*)buffer, "YAW: %f\tPitch: %f\tRoll: %f\tThrottle: %d\r\n", inputYaw, inputPitch, inputRoll, inputThrottle);
 8003534:	4b23      	ldr	r3, [pc, #140]	; (80035c4 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4618      	mov	r0, r3
 800353a:	f7fd f805 	bl	8000548 <__aeabi_f2d>
 800353e:	4680      	mov	r8, r0
 8003540:	4689      	mov	r9, r1
 8003542:	4b1e      	ldr	r3, [pc, #120]	; (80035bc <HAL_TIM_PeriodElapsedCallback+0x120>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4618      	mov	r0, r3
 8003548:	f7fc fffe 	bl	8000548 <__aeabi_f2d>
 800354c:	4604      	mov	r4, r0
 800354e:	460d      	mov	r5, r1
 8003550:	4b18      	ldr	r3, [pc, #96]	; (80035b4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4618      	mov	r0, r3
 8003556:	f7fc fff7 	bl	8000548 <__aeabi_f2d>
 800355a:	4602      	mov	r2, r0
 800355c:	460b      	mov	r3, r1
 800355e:	491b      	ldr	r1, [pc, #108]	; (80035cc <HAL_TIM_PeriodElapsedCallback+0x130>)
 8003560:	6809      	ldr	r1, [r1, #0]
 8003562:	9104      	str	r1, [sp, #16]
 8003564:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003568:	e9cd 4500 	strd	r4, r5, [sp]
 800356c:	4642      	mov	r2, r8
 800356e:	464b      	mov	r3, r9
 8003570:	4917      	ldr	r1, [pc, #92]	; (80035d0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003572:	4818      	ldr	r0, [pc, #96]	; (80035d4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8003574:	f006 fee8 	bl	800a348 <siprintf>
 8003578:	4603      	mov	r3, r0
 800357a:	b29a      	uxth	r2, r3
 800357c:	4b16      	ldr	r3, [pc, #88]	; (80035d8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800357e:	801a      	strh	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1, buffer, strSize, 100);
 8003580:	4b15      	ldr	r3, [pc, #84]	; (80035d8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8003582:	881a      	ldrh	r2, [r3, #0]
 8003584:	2364      	movs	r3, #100	; 0x64
 8003586:	4913      	ldr	r1, [pc, #76]	; (80035d4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8003588:	4814      	ldr	r0, [pc, #80]	; (80035dc <HAL_TIM_PeriodElapsedCallback+0x140>)
 800358a:	f005 fc90 	bl	8008eae <HAL_UART_Transmit>
}
 800358e:	bf00      	nop
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003598:	40001400 	.word	0x40001400
 800359c:	20000bbc 	.word	0x20000bbc
 80035a0:	20000228 	.word	0x20000228
 80035a4:	3c23d70a 	.word	0x3c23d70a
 80035a8:	20000778 	.word	0x20000778
 80035ac:	20000b38 	.word	0x20000b38
 80035b0:	200004a4 	.word	0x200004a4
 80035b4:	200008b0 	.word	0x200008b0
 80035b8:	20000bc0 	.word	0x20000bc0
 80035bc:	200007a0 	.word	0x200007a0
 80035c0:	20000aac 	.word	0x20000aac
 80035c4:	20000ba4 	.word	0x20000ba4
 80035c8:	40014400 	.word	0x40014400
 80035cc:	200003ac 	.word	0x200003ac
 80035d0:	0800cf10 	.word	0x0800cf10
 80035d4:	200007e4 	.word	0x200007e4
 80035d8:	20000d20 	.word	0x20000d20
 80035dc:	200007a4 	.word	0x200007a4

080035e0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
	if(htim == RC_CH1.htim){
 80035e8:	4b81      	ldr	r3, [pc, #516]	; (80037f0 <HAL_TIM_IC_CaptureCallback+0x210>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d17a      	bne.n	80036e8 <HAL_TIM_IC_CaptureCallback+0x108>
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2){
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	7f1b      	ldrb	r3, [r3, #28]
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d138      	bne.n	800366c <HAL_TIM_IC_CaptureCallback+0x8c>
			setPWM_DATA(&RC_CH1);
 80035fa:	487d      	ldr	r0, [pc, #500]	; (80037f0 <HAL_TIM_IC_CaptureCallback+0x210>)
 80035fc:	f7ff fdf0 	bl	80031e0 <setPWM_DATA>
			inputRoll = map((float)RC_CH1.DutyCycleVal, 1000, 2000, -30, 30);
 8003600:	4b7b      	ldr	r3, [pc, #492]	; (80037f0 <HAL_TIM_IC_CaptureCallback+0x210>)
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	ee07 3a90 	vmov	s15, r3
 8003608:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800360c:	ed9f 7a79 	vldr	s14, [pc, #484]	; 80037f4 <HAL_TIM_IC_CaptureCallback+0x214>
 8003610:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003614:	ed9f 7a78 	vldr	s14, [pc, #480]	; 80037f8 <HAL_TIM_IC_CaptureCallback+0x218>
 8003618:	ee27 7a87 	vmul.f32	s14, s15, s14
 800361c:	eddf 6a75 	vldr	s13, [pc, #468]	; 80037f4 <HAL_TIM_IC_CaptureCallback+0x214>
 8003620:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003624:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003628:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800362c:	4b73      	ldr	r3, [pc, #460]	; (80037fc <HAL_TIM_IC_CaptureCallback+0x21c>)
 800362e:	edc3 7a00 	vstr	s15, [r3]
			inputRoll = constrain(inputRoll, -30, 30);
 8003632:	4b72      	ldr	r3, [pc, #456]	; (80037fc <HAL_TIM_IC_CaptureCallback+0x21c>)
 8003634:	edd3 7a00 	vldr	s15, [r3]
 8003638:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 800363c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003644:	d501      	bpl.n	800364a <HAL_TIM_IC_CaptureCallback+0x6a>
 8003646:	4b6e      	ldr	r3, [pc, #440]	; (8003800 <HAL_TIM_IC_CaptureCallback+0x220>)
 8003648:	e00d      	b.n	8003666 <HAL_TIM_IC_CaptureCallback+0x86>
 800364a:	4b6c      	ldr	r3, [pc, #432]	; (80037fc <HAL_TIM_IC_CaptureCallback+0x21c>)
 800364c:	edd3 7a00 	vldr	s15, [r3]
 8003650:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003654:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800365c:	dd01      	ble.n	8003662 <HAL_TIM_IC_CaptureCallback+0x82>
 800365e:	4b69      	ldr	r3, [pc, #420]	; (8003804 <HAL_TIM_IC_CaptureCallback+0x224>)
 8003660:	e001      	b.n	8003666 <HAL_TIM_IC_CaptureCallback+0x86>
 8003662:	4b66      	ldr	r3, [pc, #408]	; (80037fc <HAL_TIM_IC_CaptureCallback+0x21c>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a65      	ldr	r2, [pc, #404]	; (80037fc <HAL_TIM_IC_CaptureCallback+0x21c>)
 8003668:	6013      	str	r3, [r2, #0]
	}
	else if(htim == RC_CH5.htim) {
		setPWM_DATA(&RC_CH5);
		inputFlyMode = constrain(RC_CH5.DutyCycleVal, 1000, 2000);
	}
}
 800366a:	e0bd      	b.n	80037e8 <HAL_TIM_IC_CaptureCallback+0x208>
		} else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	7f1b      	ldrb	r3, [r3, #28]
 8003670:	2b01      	cmp	r3, #1
 8003672:	f040 80b9 	bne.w	80037e8 <HAL_TIM_IC_CaptureCallback+0x208>
			setPWM_DATA(&RC_CH4);
 8003676:	4864      	ldr	r0, [pc, #400]	; (8003808 <HAL_TIM_IC_CaptureCallback+0x228>)
 8003678:	f7ff fdb2 	bl	80031e0 <setPWM_DATA>
			inputYaw = map((float)RC_CH4.DutyCycleVal, 1000, 2000, -30, 30);
 800367c:	4b62      	ldr	r3, [pc, #392]	; (8003808 <HAL_TIM_IC_CaptureCallback+0x228>)
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	ee07 3a90 	vmov	s15, r3
 8003684:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003688:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 80037f4 <HAL_TIM_IC_CaptureCallback+0x214>
 800368c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003690:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80037f8 <HAL_TIM_IC_CaptureCallback+0x218>
 8003694:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003698:	eddf 6a56 	vldr	s13, [pc, #344]	; 80037f4 <HAL_TIM_IC_CaptureCallback+0x214>
 800369c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80036a0:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80036a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80036a8:	4b58      	ldr	r3, [pc, #352]	; (800380c <HAL_TIM_IC_CaptureCallback+0x22c>)
 80036aa:	edc3 7a00 	vstr	s15, [r3]
			inputYaw = constrain(inputYaw, -30, 30);
 80036ae:	4b57      	ldr	r3, [pc, #348]	; (800380c <HAL_TIM_IC_CaptureCallback+0x22c>)
 80036b0:	edd3 7a00 	vldr	s15, [r3]
 80036b4:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 80036b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036c0:	d501      	bpl.n	80036c6 <HAL_TIM_IC_CaptureCallback+0xe6>
 80036c2:	4b4f      	ldr	r3, [pc, #316]	; (8003800 <HAL_TIM_IC_CaptureCallback+0x220>)
 80036c4:	e00d      	b.n	80036e2 <HAL_TIM_IC_CaptureCallback+0x102>
 80036c6:	4b51      	ldr	r3, [pc, #324]	; (800380c <HAL_TIM_IC_CaptureCallback+0x22c>)
 80036c8:	edd3 7a00 	vldr	s15, [r3]
 80036cc:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80036d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036d8:	dd01      	ble.n	80036de <HAL_TIM_IC_CaptureCallback+0xfe>
 80036da:	4b4a      	ldr	r3, [pc, #296]	; (8003804 <HAL_TIM_IC_CaptureCallback+0x224>)
 80036dc:	e001      	b.n	80036e2 <HAL_TIM_IC_CaptureCallback+0x102>
 80036de:	4b4b      	ldr	r3, [pc, #300]	; (800380c <HAL_TIM_IC_CaptureCallback+0x22c>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a4a      	ldr	r2, [pc, #296]	; (800380c <HAL_TIM_IC_CaptureCallback+0x22c>)
 80036e4:	6013      	str	r3, [r2, #0]
}
 80036e6:	e07f      	b.n	80037e8 <HAL_TIM_IC_CaptureCallback+0x208>
	else if(htim == RC_CH2.htim){
 80036e8:	4b49      	ldr	r3, [pc, #292]	; (8003810 <HAL_TIM_IC_CaptureCallback+0x230>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d138      	bne.n	8003764 <HAL_TIM_IC_CaptureCallback+0x184>
		setPWM_DATA(&RC_CH2);
 80036f2:	4847      	ldr	r0, [pc, #284]	; (8003810 <HAL_TIM_IC_CaptureCallback+0x230>)
 80036f4:	f7ff fd74 	bl	80031e0 <setPWM_DATA>
		inputPitch = map((float)RC_CH2.DutyCycleVal, 1000, 2000, -30, 30);
 80036f8:	4b45      	ldr	r3, [pc, #276]	; (8003810 <HAL_TIM_IC_CaptureCallback+0x230>)
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	ee07 3a90 	vmov	s15, r3
 8003700:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003704:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80037f4 <HAL_TIM_IC_CaptureCallback+0x214>
 8003708:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800370c:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80037f8 <HAL_TIM_IC_CaptureCallback+0x218>
 8003710:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003714:	eddf 6a37 	vldr	s13, [pc, #220]	; 80037f4 <HAL_TIM_IC_CaptureCallback+0x214>
 8003718:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800371c:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003720:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003724:	4b3b      	ldr	r3, [pc, #236]	; (8003814 <HAL_TIM_IC_CaptureCallback+0x234>)
 8003726:	edc3 7a00 	vstr	s15, [r3]
		inputPitch = constrain(inputPitch, -30, 30);
 800372a:	4b3a      	ldr	r3, [pc, #232]	; (8003814 <HAL_TIM_IC_CaptureCallback+0x234>)
 800372c:	edd3 7a00 	vldr	s15, [r3]
 8003730:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 8003734:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800373c:	d501      	bpl.n	8003742 <HAL_TIM_IC_CaptureCallback+0x162>
 800373e:	4b30      	ldr	r3, [pc, #192]	; (8003800 <HAL_TIM_IC_CaptureCallback+0x220>)
 8003740:	e00d      	b.n	800375e <HAL_TIM_IC_CaptureCallback+0x17e>
 8003742:	4b34      	ldr	r3, [pc, #208]	; (8003814 <HAL_TIM_IC_CaptureCallback+0x234>)
 8003744:	edd3 7a00 	vldr	s15, [r3]
 8003748:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800374c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003754:	dd01      	ble.n	800375a <HAL_TIM_IC_CaptureCallback+0x17a>
 8003756:	4b2b      	ldr	r3, [pc, #172]	; (8003804 <HAL_TIM_IC_CaptureCallback+0x224>)
 8003758:	e001      	b.n	800375e <HAL_TIM_IC_CaptureCallback+0x17e>
 800375a:	4b2e      	ldr	r3, [pc, #184]	; (8003814 <HAL_TIM_IC_CaptureCallback+0x234>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a2d      	ldr	r2, [pc, #180]	; (8003814 <HAL_TIM_IC_CaptureCallback+0x234>)
 8003760:	6013      	str	r3, [r2, #0]
}
 8003762:	e041      	b.n	80037e8 <HAL_TIM_IC_CaptureCallback+0x208>
	else if(htim == RC_CH3.htim) {
 8003764:	4b2c      	ldr	r3, [pc, #176]	; (8003818 <HAL_TIM_IC_CaptureCallback+0x238>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	429a      	cmp	r2, r3
 800376c:	d123      	bne.n	80037b6 <HAL_TIM_IC_CaptureCallback+0x1d6>
		setPWM_DATA(&RC_CH3);
 800376e:	482a      	ldr	r0, [pc, #168]	; (8003818 <HAL_TIM_IC_CaptureCallback+0x238>)
 8003770:	f7ff fd36 	bl	80031e0 <setPWM_DATA>
		if(RC_CH3.DutyCycleVal >= 1150){
 8003774:	4b28      	ldr	r3, [pc, #160]	; (8003818 <HAL_TIM_IC_CaptureCallback+0x238>)
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	f240 427d 	movw	r2, #1149	; 0x47d
 800377c:	4293      	cmp	r3, r2
 800377e:	d911      	bls.n	80037a4 <HAL_TIM_IC_CaptureCallback+0x1c4>
			inputThrottle = constrain(RC_CH3.DutyCycleVal, 1000, 2000);
 8003780:	4b25      	ldr	r3, [pc, #148]	; (8003818 <HAL_TIM_IC_CaptureCallback+0x238>)
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003788:	d307      	bcc.n	800379a <HAL_TIM_IC_CaptureCallback+0x1ba>
 800378a:	4b23      	ldr	r3, [pc, #140]	; (8003818 <HAL_TIM_IC_CaptureCallback+0x238>)
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003792:	bf28      	it	cs
 8003794:	f44f 63fa 	movcs.w	r3, #2000	; 0x7d0
 8003798:	e001      	b.n	800379e <HAL_TIM_IC_CaptureCallback+0x1be>
 800379a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800379e:	4a1f      	ldr	r2, [pc, #124]	; (800381c <HAL_TIM_IC_CaptureCallback+0x23c>)
 80037a0:	6013      	str	r3, [r2, #0]
}
 80037a2:	e021      	b.n	80037e8 <HAL_TIM_IC_CaptureCallback+0x208>
			RC_CH3.DutyCycleVal = 1000;
 80037a4:	4b1c      	ldr	r3, [pc, #112]	; (8003818 <HAL_TIM_IC_CaptureCallback+0x238>)
 80037a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80037aa:	611a      	str	r2, [r3, #16]
			inputThrottle = 1000;
 80037ac:	4b1b      	ldr	r3, [pc, #108]	; (800381c <HAL_TIM_IC_CaptureCallback+0x23c>)
 80037ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80037b2:	601a      	str	r2, [r3, #0]
}
 80037b4:	e018      	b.n	80037e8 <HAL_TIM_IC_CaptureCallback+0x208>
	else if(htim == RC_CH5.htim) {
 80037b6:	4b1a      	ldr	r3, [pc, #104]	; (8003820 <HAL_TIM_IC_CaptureCallback+0x240>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d113      	bne.n	80037e8 <HAL_TIM_IC_CaptureCallback+0x208>
		setPWM_DATA(&RC_CH5);
 80037c0:	4817      	ldr	r0, [pc, #92]	; (8003820 <HAL_TIM_IC_CaptureCallback+0x240>)
 80037c2:	f7ff fd0d 	bl	80031e0 <setPWM_DATA>
		inputFlyMode = constrain(RC_CH5.DutyCycleVal, 1000, 2000);
 80037c6:	4b16      	ldr	r3, [pc, #88]	; (8003820 <HAL_TIM_IC_CaptureCallback+0x240>)
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037ce:	d307      	bcc.n	80037e0 <HAL_TIM_IC_CaptureCallback+0x200>
 80037d0:	4b13      	ldr	r3, [pc, #76]	; (8003820 <HAL_TIM_IC_CaptureCallback+0x240>)
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80037d8:	bf28      	it	cs
 80037da:	f44f 63fa 	movcs.w	r3, #2000	; 0x7d0
 80037de:	e001      	b.n	80037e4 <HAL_TIM_IC_CaptureCallback+0x204>
 80037e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037e4:	4a0f      	ldr	r2, [pc, #60]	; (8003824 <HAL_TIM_IC_CaptureCallback+0x244>)
 80037e6:	6013      	str	r3, [r2, #0]
}
 80037e8:	bf00      	nop
 80037ea:	3708      	adds	r7, #8
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	20000718 	.word	0x20000718
 80037f4:	447a0000 	.word	0x447a0000
 80037f8:	42700000 	.word	0x42700000
 80037fc:	200008b0 	.word	0x200008b0
 8003800:	c1f00000 	.word	0xc1f00000
 8003804:	41f00000 	.word	0x41f00000
 8003808:	200003f0 	.word	0x200003f0
 800380c:	20000ba4 	.word	0x20000ba4
 8003810:	20000d24 	.word	0x20000d24
 8003814:	200007a0 	.word	0x200007a0
 8003818:	20000c04 	.word	0x20000c04
 800381c:	200003ac 	.word	0x200003ac
 8003820:	20000d04 	.word	0x20000d04
 8003824:	20000254 	.word	0x20000254

08003828 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	4603      	mov	r3, r0
 8003830:	80fb      	strh	r3, [r7, #6]
	if(RC_CH6.onRisingEdge && !RC_CH6.onFallingEdge){
 8003832:	4b24      	ldr	r3, [pc, #144]	; (80038c4 <HAL_GPIO_EXTI_Callback+0x9c>)
 8003834:	7e1b      	ldrb	r3, [r3, #24]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d013      	beq.n	8003862 <HAL_GPIO_EXTI_Callback+0x3a>
 800383a:	4b22      	ldr	r3, [pc, #136]	; (80038c4 <HAL_GPIO_EXTI_Callback+0x9c>)
 800383c:	7e5b      	ldrb	r3, [r3, #25]
 800383e:	f083 0301 	eor.w	r3, r3, #1
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00c      	beq.n	8003862 <HAL_GPIO_EXTI_Callback+0x3a>
		RC_CH6.onRisingEdge = false;
 8003848:	4b1e      	ldr	r3, [pc, #120]	; (80038c4 <HAL_GPIO_EXTI_Callback+0x9c>)
 800384a:	2200      	movs	r2, #0
 800384c:	761a      	strb	r2, [r3, #24]
		RC_CH6.onFallingEdge = true;
 800384e:	4b1d      	ldr	r3, [pc, #116]	; (80038c4 <HAL_GPIO_EXTI_Callback+0x9c>)
 8003850:	2201      	movs	r2, #1
 8003852:	765a      	strb	r2, [r3, #25]
		RC_CH6.RisingEdgeVal = __HAL_TIM_GET_COUNTER(RC_CH6.htim);
 8003854:	4b1b      	ldr	r3, [pc, #108]	; (80038c4 <HAL_GPIO_EXTI_Callback+0x9c>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385c:	4a19      	ldr	r2, [pc, #100]	; (80038c4 <HAL_GPIO_EXTI_Callback+0x9c>)
 800385e:	6093      	str	r3, [r2, #8]
 8003860:	e016      	b.n	8003890 <HAL_GPIO_EXTI_Callback+0x68>

	} else if(RC_CH6.onFallingEdge && !RC_CH6.onRisingEdge) {
 8003862:	4b18      	ldr	r3, [pc, #96]	; (80038c4 <HAL_GPIO_EXTI_Callback+0x9c>)
 8003864:	7e5b      	ldrb	r3, [r3, #25]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d012      	beq.n	8003890 <HAL_GPIO_EXTI_Callback+0x68>
 800386a:	4b16      	ldr	r3, [pc, #88]	; (80038c4 <HAL_GPIO_EXTI_Callback+0x9c>)
 800386c:	7e1b      	ldrb	r3, [r3, #24]
 800386e:	f083 0301 	eor.w	r3, r3, #1
 8003872:	b2db      	uxtb	r3, r3
 8003874:	2b00      	cmp	r3, #0
 8003876:	d00b      	beq.n	8003890 <HAL_GPIO_EXTI_Callback+0x68>
		RC_CH6.onFallingEdge = false;
 8003878:	4b12      	ldr	r3, [pc, #72]	; (80038c4 <HAL_GPIO_EXTI_Callback+0x9c>)
 800387a:	2200      	movs	r2, #0
 800387c:	765a      	strb	r2, [r3, #25]
		RC_CH6.onRisingEdge =  true;
 800387e:	4b11      	ldr	r3, [pc, #68]	; (80038c4 <HAL_GPIO_EXTI_Callback+0x9c>)
 8003880:	2201      	movs	r2, #1
 8003882:	761a      	strb	r2, [r3, #24]
		RC_CH6.FallingEdgeVal = __HAL_TIM_GET_COUNTER(RC_CH6.htim);
 8003884:	4b0f      	ldr	r3, [pc, #60]	; (80038c4 <HAL_GPIO_EXTI_Callback+0x9c>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388c:	4a0d      	ldr	r2, [pc, #52]	; (80038c4 <HAL_GPIO_EXTI_Callback+0x9c>)
 800388e:	60d3      	str	r3, [r2, #12]
	}
	if(RC_CH6.FallingEdgeVal >= RC_CH6.RisingEdgeVal){
 8003890:	4b0c      	ldr	r3, [pc, #48]	; (80038c4 <HAL_GPIO_EXTI_Callback+0x9c>)
 8003892:	68da      	ldr	r2, [r3, #12]
 8003894:	4b0b      	ldr	r3, [pc, #44]	; (80038c4 <HAL_GPIO_EXTI_Callback+0x9c>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	429a      	cmp	r2, r3
 800389a:	d30c      	bcc.n	80038b6 <HAL_GPIO_EXTI_Callback+0x8e>
		RC_CH6.DutyCycleVal = RC_CH6.FallingEdgeVal - RC_CH6.RisingEdgeVal;
 800389c:	4b09      	ldr	r3, [pc, #36]	; (80038c4 <HAL_GPIO_EXTI_Callback+0x9c>)
 800389e:	68da      	ldr	r2, [r3, #12]
 80038a0:	4b08      	ldr	r3, [pc, #32]	; (80038c4 <HAL_GPIO_EXTI_Callback+0x9c>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	4a07      	ldr	r2, [pc, #28]	; (80038c4 <HAL_GPIO_EXTI_Callback+0x9c>)
 80038a8:	6113      	str	r3, [r2, #16]
		RC_CH6.FallingEdgeVal = 0;
 80038aa:	4b06      	ldr	r3, [pc, #24]	; (80038c4 <HAL_GPIO_EXTI_Callback+0x9c>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	60da      	str	r2, [r3, #12]
		RC_CH6.RisingEdgeVal = 0;
 80038b0:	4b04      	ldr	r3, [pc, #16]	; (80038c4 <HAL_GPIO_EXTI_Callback+0x9c>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	609a      	str	r2, [r3, #8]
	}
}
 80038b6:	bf00      	nop
 80038b8:	370c      	adds	r7, #12
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	20000b18 	.word	0x20000b18

080038c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80038c8:	b480      	push	{r7}
 80038ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80038cc:	bf00      	nop
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
	...

080038d8 <PIDControl>:

#include "pid.h"

extern TIM_HandleTypeDef htim2;

void PIDControl(PIDType_t *pidtype, float dataSensor, float setPoint){
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	ed87 0a02 	vstr	s0, [r7, #8]
 80038e4:	edc7 0a01 	vstr	s1, [r7, #4]
	pidtype->setPoint = constrain(setPoint, -30, 30);
 80038e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80038ec:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 80038f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038f8:	d501      	bpl.n	80038fe <PIDControl+0x26>
 80038fa:	4b54      	ldr	r3, [pc, #336]	; (8003a4c <PIDControl+0x174>)
 80038fc:	e00b      	b.n	8003916 <PIDControl+0x3e>
 80038fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8003902:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003906:	eef4 7ac7 	vcmpe.f32	s15, s14
 800390a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800390e:	dd01      	ble.n	8003914 <PIDControl+0x3c>
 8003910:	4b4f      	ldr	r3, [pc, #316]	; (8003a50 <PIDControl+0x178>)
 8003912:	e000      	b.n	8003916 <PIDControl+0x3e>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	6113      	str	r3, [r2, #16]
	pidtype->error = pidtype->setPoint - dataSensor;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	ed93 7a04 	vldr	s14, [r3, #16]
 8003920:	edd7 7a02 	vldr	s15, [r7, #8]
 8003924:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	edc3 7a00 	vstr	s15, [r3]

	if(pidtype->error >= 180) pidtype->error -= 360;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	edd3 7a00 	vldr	s15, [r3]
 8003934:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8003a54 <PIDControl+0x17c>
 8003938:	eef4 7ac7 	vcmpe.f32	s15, s14
 800393c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003940:	db0a      	blt.n	8003958 <PIDControl+0x80>
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	edd3 7a00 	vldr	s15, [r3]
 8003948:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8003a58 <PIDControl+0x180>
 800394c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	edc3 7a00 	vstr	s15, [r3]
 8003956:	e013      	b.n	8003980 <PIDControl+0xa8>
	else if(pidtype->error < -180) pidtype->error += 360;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	edd3 7a00 	vldr	s15, [r3]
 800395e:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8003a5c <PIDControl+0x184>
 8003962:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800396a:	d509      	bpl.n	8003980 <PIDControl+0xa8>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	edd3 7a00 	vldr	s15, [r3]
 8003972:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8003a58 <PIDControl+0x180>
 8003976:	ee77 7a87 	vadd.f32	s15, s15, s14
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	edc3 7a00 	vstr	s15, [r3]

	pidtype->sumIntegral += pidtype->error * pidtype->timesampling;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	ed93 7a03 	vldr	s14, [r3, #12]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	edd3 6a00 	vldr	s13, [r3]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003992:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003996:	ee77 7a27 	vadd.f32	s15, s14, s15
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	edc3 7a03 	vstr	s15, [r3, #12]
	pidtype->sumIntegral = constrain(pidtype->sumIntegral, -500, 500);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	edd3 7a03 	vldr	s15, [r3, #12]
 80039a6:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8003a60 <PIDControl+0x188>
 80039aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039b2:	d501      	bpl.n	80039b8 <PIDControl+0xe0>
 80039b4:	4b2b      	ldr	r3, [pc, #172]	; (8003a64 <PIDControl+0x18c>)
 80039b6:	e00d      	b.n	80039d4 <PIDControl+0xfc>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	edd3 7a03 	vldr	s15, [r3, #12]
 80039be:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8003a68 <PIDControl+0x190>
 80039c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039ca:	dd01      	ble.n	80039d0 <PIDControl+0xf8>
 80039cc:	4b27      	ldr	r3, [pc, #156]	; (8003a6c <PIDControl+0x194>)
 80039ce:	e001      	b.n	80039d4 <PIDControl+0xfc>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	68fa      	ldr	r2, [r7, #12]
 80039d6:	60d3      	str	r3, [r2, #12]

	pidtype->derivative = (pidtype->error - pidtype->preverror) / pidtype->timesampling;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	ed93 7a00 	vldr	s14, [r3]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	edd3 7a01 	vldr	s15, [r3, #4]
 80039e4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80039ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	edc3 7a02 	vstr	s15, [r3, #8]
	pidtype->preverror = pidtype->error;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	605a      	str	r2, [r3, #4]

	pidtype->output = (pidtype->kp * pidtype->error) + (pidtype->kd * pidtype->derivative) + (pidtype->ki * pidtype->sumIntegral);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	ed93 7a06 	vldr	s14, [r3, #24]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	edd3 7a00 	vldr	s15, [r3]
 8003a0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	edd3 6a07 	vldr	s13, [r3, #28]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	edd3 7a02 	vldr	s15, [r3, #8]
 8003a1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	edd3 6a08 	vldr	s13, [r3, #32]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003a30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8003a3e:	bf00      	nop
 8003a40:	3714      	adds	r7, #20
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	c1f00000 	.word	0xc1f00000
 8003a50:	41f00000 	.word	0x41f00000
 8003a54:	43340000 	.word	0x43340000
 8003a58:	43b40000 	.word	0x43b40000
 8003a5c:	c3340000 	.word	0xc3340000
 8003a60:	c3fa0000 	.word	0xc3fa0000
 8003a64:	c3fa0000 	.word	0xc3fa0000
 8003a68:	43fa0000 	.word	0x43fa0000
 8003a6c:	43fa0000 	.word	0x43fa0000

08003a70 <PIDReset>:

}
void PIDControlPITCH(PIDType_t *pidtype, float dataPitch){

}*/
void PIDReset(PIDType_t *pidtype){
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
	pidtype->sumIntegral = 0;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f04f 0200 	mov.w	r2, #0
 8003a7e:	60da      	str	r2, [r3, #12]
	pidtype->output = 0;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f04f 0200 	mov.w	r2, #0
 8003a86:	615a      	str	r2, [r3, #20]

	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,1000);
 8003a88:	4b0c      	ldr	r3, [pc, #48]	; (8003abc <PIDReset+0x4c>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a90:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,1000);
 8003a92:	4b0a      	ldr	r3, [pc, #40]	; (8003abc <PIDReset+0x4c>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a9a:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,1000);
 8003a9c:	4b07      	ldr	r3, [pc, #28]	; (8003abc <PIDReset+0x4c>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003aa4:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,1000);
 8003aa6:	4b05      	ldr	r3, [pc, #20]	; (8003abc <PIDReset+0x4c>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003aae:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003ab0:	bf00      	nop
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr
 8003abc:	20000bc4 	.word	0x20000bc4

08003ac0 <PIDInit>:
void PIDInit(PIDType_t *pidtype, double kp, double ki, double kd, double timesampling){
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b08a      	sub	sp, #40	; 0x28
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6278      	str	r0, [r7, #36]	; 0x24
 8003ac8:	ed87 0b06 	vstr	d0, [r7, #24]
 8003acc:	ed87 1b04 	vstr	d1, [r7, #16]
 8003ad0:	ed87 2b02 	vstr	d2, [r7, #8]
 8003ad4:	ed87 3b00 	vstr	d3, [r7]
	PIDReset(pidtype);
 8003ad8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ada:	f7ff ffc9 	bl	8003a70 <PIDReset>

	pidtype->kp = kp;
 8003ade:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003ae2:	f7fd f861 	bl	8000ba8 <__aeabi_d2f>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aea:	619a      	str	r2, [r3, #24]
	pidtype->kd = kd;
 8003aec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003af0:	f7fd f85a 	bl	8000ba8 <__aeabi_d2f>
 8003af4:	4602      	mov	r2, r0
 8003af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af8:	61da      	str	r2, [r3, #28]
	pidtype->ki = ki;
 8003afa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003afe:	f7fd f853 	bl	8000ba8 <__aeabi_d2f>
 8003b02:	4602      	mov	r2, r0
 8003b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b06:	621a      	str	r2, [r3, #32]

	pidtype->timesampling = timesampling;
 8003b08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003b0c:	f7fd f84c 	bl	8000ba8 <__aeabi_d2f>
 8003b10:	4602      	mov	r2, r0
 8003b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b14:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003b16:	bf00      	nop
 8003b18:	3728      	adds	r7, #40	; 0x28
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
	...

08003b20 <trustControl>:
void trustControl(){
 8003b20:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003b24:	b094      	sub	sp, #80	; 0x50
 8003b26:	af00      	add	r7, sp, #0
	float motor1Thrust,motor2Thrust,motor3Thrust,motor4Thrust;
	float motor1Torque,motor2Torque,motor3Torque,motor4Torque;
	float thrust;
	int RPMmotor1,RPMmotor2,RPMmotor3,RPMmotor4;

	const float RADS = 57.29577795;
 8003b28:	4be1      	ldr	r3, [pc, #900]	; (8003eb0 <trustControl+0x390>)
 8003b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
	const float angleMotor1 = 45;
 8003b2c:	4be1      	ldr	r3, [pc, #900]	; (8003eb4 <trustControl+0x394>)
 8003b2e:	64bb      	str	r3, [r7, #72]	; 0x48
	const float angleMotor2 = 135;
 8003b30:	4be1      	ldr	r3, [pc, #900]	; (8003eb8 <trustControl+0x398>)
 8003b32:	647b      	str	r3, [r7, #68]	; 0x44
	const float angleMotor3 = 225;
 8003b34:	4be1      	ldr	r3, [pc, #900]	; (8003ebc <trustControl+0x39c>)
 8003b36:	643b      	str	r3, [r7, #64]	; 0x40
	const float angleMotor4 = 315;
 8003b38:	4be1      	ldr	r3, [pc, #900]	; (8003ec0 <trustControl+0x3a0>)
 8003b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
	const float L = 0.225;
 8003b3c:	4be1      	ldr	r3, [pc, #900]	; (8003ec4 <trustControl+0x3a4>)
 8003b3e:	63bb      	str	r3, [r7, #56]	; 0x38

	thrust = map(inputThrottle, 1000, 2000, 0, 49.663985);
 8003b40:	4be1      	ldr	r3, [pc, #900]	; (8003ec8 <trustControl+0x3a8>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7fc fceb 	bl	8000524 <__aeabi_i2d>
 8003b4e:	a3d6      	add	r3, pc, #856	; (adr r3, 8003ea8 <trustControl+0x388>)
 8003b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b54:	f7fc fd50 	bl	80005f8 <__aeabi_dmul>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	460c      	mov	r4, r1
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	4621      	mov	r1, r4
 8003b60:	f04f 0200 	mov.w	r2, #0
 8003b64:	4bd9      	ldr	r3, [pc, #868]	; (8003ecc <trustControl+0x3ac>)
 8003b66:	f7fc fe71 	bl	800084c <__aeabi_ddiv>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	460c      	mov	r4, r1
 8003b6e:	4618      	mov	r0, r3
 8003b70:	4621      	mov	r1, r4
 8003b72:	f04f 0200 	mov.w	r2, #0
 8003b76:	f04f 0300 	mov.w	r3, #0
 8003b7a:	f7fc fb87 	bl	800028c <__adddf3>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	460c      	mov	r4, r1
 8003b82:	4618      	mov	r0, r3
 8003b84:	4621      	mov	r1, r4
 8003b86:	f7fd f80f 	bl	8000ba8 <__aeabi_d2f>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	637b      	str	r3, [r7, #52]	; 0x34

	motor1Torque = (thrust/4 + PIDPitch.output * sin(angleMotor1/RADS) + PIDRoll.output * cos(angleMotor1 / RADS) - PIDYaw.output) * L;
 8003b8e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003b92:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003b96:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003b9a:	ee16 0a90 	vmov	r0, s13
 8003b9e:	f7fc fcd3 	bl	8000548 <__aeabi_f2d>
 8003ba2:	4604      	mov	r4, r0
 8003ba4:	460d      	mov	r5, r1
 8003ba6:	4bca      	ldr	r3, [pc, #808]	; (8003ed0 <trustControl+0x3b0>)
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7fc fccc 	bl	8000548 <__aeabi_f2d>
 8003bb0:	4680      	mov	r8, r0
 8003bb2:	4689      	mov	r9, r1
 8003bb4:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8003bb8:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003bbc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003bc0:	ee16 0a90 	vmov	r0, s13
 8003bc4:	f7fc fcc0 	bl	8000548 <__aeabi_f2d>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	460b      	mov	r3, r1
 8003bcc:	ec43 2b10 	vmov	d0, r2, r3
 8003bd0:	f007 ffd6 	bl	800bb80 <sin>
 8003bd4:	ec53 2b10 	vmov	r2, r3, d0
 8003bd8:	4640      	mov	r0, r8
 8003bda:	4649      	mov	r1, r9
 8003bdc:	f7fc fd0c 	bl	80005f8 <__aeabi_dmul>
 8003be0:	4602      	mov	r2, r0
 8003be2:	460b      	mov	r3, r1
 8003be4:	4620      	mov	r0, r4
 8003be6:	4629      	mov	r1, r5
 8003be8:	f7fc fb50 	bl	800028c <__adddf3>
 8003bec:	4603      	mov	r3, r0
 8003bee:	460c      	mov	r4, r1
 8003bf0:	4625      	mov	r5, r4
 8003bf2:	461c      	mov	r4, r3
 8003bf4:	4bb7      	ldr	r3, [pc, #732]	; (8003ed4 <trustControl+0x3b4>)
 8003bf6:	695b      	ldr	r3, [r3, #20]
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7fc fca5 	bl	8000548 <__aeabi_f2d>
 8003bfe:	4680      	mov	r8, r0
 8003c00:	4689      	mov	r9, r1
 8003c02:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8003c06:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003c0a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003c0e:	ee16 0a90 	vmov	r0, s13
 8003c12:	f7fc fc99 	bl	8000548 <__aeabi_f2d>
 8003c16:	4602      	mov	r2, r0
 8003c18:	460b      	mov	r3, r1
 8003c1a:	ec43 2b10 	vmov	d0, r2, r3
 8003c1e:	f007 ff6b 	bl	800baf8 <cos>
 8003c22:	ec53 2b10 	vmov	r2, r3, d0
 8003c26:	4640      	mov	r0, r8
 8003c28:	4649      	mov	r1, r9
 8003c2a:	f7fc fce5 	bl	80005f8 <__aeabi_dmul>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	460b      	mov	r3, r1
 8003c32:	4620      	mov	r0, r4
 8003c34:	4629      	mov	r1, r5
 8003c36:	f7fc fb29 	bl	800028c <__adddf3>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	460c      	mov	r4, r1
 8003c3e:	4625      	mov	r5, r4
 8003c40:	461c      	mov	r4, r3
 8003c42:	4ba5      	ldr	r3, [pc, #660]	; (8003ed8 <trustControl+0x3b8>)
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7fc fc7e 	bl	8000548 <__aeabi_f2d>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	460b      	mov	r3, r1
 8003c50:	4620      	mov	r0, r4
 8003c52:	4629      	mov	r1, r5
 8003c54:	f7fc fb18 	bl	8000288 <__aeabi_dsub>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	460c      	mov	r4, r1
 8003c5c:	4625      	mov	r5, r4
 8003c5e:	461c      	mov	r4, r3
 8003c60:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003c62:	f7fc fc71 	bl	8000548 <__aeabi_f2d>
 8003c66:	4602      	mov	r2, r0
 8003c68:	460b      	mov	r3, r1
 8003c6a:	4620      	mov	r0, r4
 8003c6c:	4629      	mov	r1, r5
 8003c6e:	f7fc fcc3 	bl	80005f8 <__aeabi_dmul>
 8003c72:	4603      	mov	r3, r0
 8003c74:	460c      	mov	r4, r1
 8003c76:	4618      	mov	r0, r3
 8003c78:	4621      	mov	r1, r4
 8003c7a:	f7fc ff95 	bl	8000ba8 <__aeabi_d2f>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	633b      	str	r3, [r7, #48]	; 0x30
	motor2Torque = (thrust/4 + PIDPitch.output * sin(angleMotor2/RADS) + PIDRoll.output * cos(angleMotor2 / RADS) + PIDYaw.output) * L;
 8003c82:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003c86:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003c8a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003c8e:	ee16 0a90 	vmov	r0, s13
 8003c92:	f7fc fc59 	bl	8000548 <__aeabi_f2d>
 8003c96:	4604      	mov	r4, r0
 8003c98:	460d      	mov	r5, r1
 8003c9a:	4b8d      	ldr	r3, [pc, #564]	; (8003ed0 <trustControl+0x3b0>)
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7fc fc52 	bl	8000548 <__aeabi_f2d>
 8003ca4:	4680      	mov	r8, r0
 8003ca6:	4689      	mov	r9, r1
 8003ca8:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003cac:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003cb0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003cb4:	ee16 0a90 	vmov	r0, s13
 8003cb8:	f7fc fc46 	bl	8000548 <__aeabi_f2d>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	ec43 2b10 	vmov	d0, r2, r3
 8003cc4:	f007 ff5c 	bl	800bb80 <sin>
 8003cc8:	ec53 2b10 	vmov	r2, r3, d0
 8003ccc:	4640      	mov	r0, r8
 8003cce:	4649      	mov	r1, r9
 8003cd0:	f7fc fc92 	bl	80005f8 <__aeabi_dmul>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	4620      	mov	r0, r4
 8003cda:	4629      	mov	r1, r5
 8003cdc:	f7fc fad6 	bl	800028c <__adddf3>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	460c      	mov	r4, r1
 8003ce4:	4625      	mov	r5, r4
 8003ce6:	461c      	mov	r4, r3
 8003ce8:	4b7a      	ldr	r3, [pc, #488]	; (8003ed4 <trustControl+0x3b4>)
 8003cea:	695b      	ldr	r3, [r3, #20]
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7fc fc2b 	bl	8000548 <__aeabi_f2d>
 8003cf2:	4680      	mov	r8, r0
 8003cf4:	4689      	mov	r9, r1
 8003cf6:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003cfa:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003cfe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003d02:	ee16 0a90 	vmov	r0, s13
 8003d06:	f7fc fc1f 	bl	8000548 <__aeabi_f2d>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	ec43 2b10 	vmov	d0, r2, r3
 8003d12:	f007 fef1 	bl	800baf8 <cos>
 8003d16:	ec53 2b10 	vmov	r2, r3, d0
 8003d1a:	4640      	mov	r0, r8
 8003d1c:	4649      	mov	r1, r9
 8003d1e:	f7fc fc6b 	bl	80005f8 <__aeabi_dmul>
 8003d22:	4602      	mov	r2, r0
 8003d24:	460b      	mov	r3, r1
 8003d26:	4620      	mov	r0, r4
 8003d28:	4629      	mov	r1, r5
 8003d2a:	f7fc faaf 	bl	800028c <__adddf3>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	460c      	mov	r4, r1
 8003d32:	4625      	mov	r5, r4
 8003d34:	461c      	mov	r4, r3
 8003d36:	4b68      	ldr	r3, [pc, #416]	; (8003ed8 <trustControl+0x3b8>)
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7fc fc04 	bl	8000548 <__aeabi_f2d>
 8003d40:	4602      	mov	r2, r0
 8003d42:	460b      	mov	r3, r1
 8003d44:	4620      	mov	r0, r4
 8003d46:	4629      	mov	r1, r5
 8003d48:	f7fc faa0 	bl	800028c <__adddf3>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	460c      	mov	r4, r1
 8003d50:	4625      	mov	r5, r4
 8003d52:	461c      	mov	r4, r3
 8003d54:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003d56:	f7fc fbf7 	bl	8000548 <__aeabi_f2d>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	4620      	mov	r0, r4
 8003d60:	4629      	mov	r1, r5
 8003d62:	f7fc fc49 	bl	80005f8 <__aeabi_dmul>
 8003d66:	4603      	mov	r3, r0
 8003d68:	460c      	mov	r4, r1
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	4621      	mov	r1, r4
 8003d6e:	f7fc ff1b 	bl	8000ba8 <__aeabi_d2f>
 8003d72:	4603      	mov	r3, r0
 8003d74:	62fb      	str	r3, [r7, #44]	; 0x2c
	motor3Torque = (thrust/4 + PIDPitch.output * sin(angleMotor3/RADS) + PIDRoll.output * cos(angleMotor3 / RADS) - PIDYaw.output) * L;
 8003d76:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003d7a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003d7e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003d82:	ee16 0a90 	vmov	r0, s13
 8003d86:	f7fc fbdf 	bl	8000548 <__aeabi_f2d>
 8003d8a:	4604      	mov	r4, r0
 8003d8c:	460d      	mov	r5, r1
 8003d8e:	4b50      	ldr	r3, [pc, #320]	; (8003ed0 <trustControl+0x3b0>)
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7fc fbd8 	bl	8000548 <__aeabi_f2d>
 8003d98:	4680      	mov	r8, r0
 8003d9a:	4689      	mov	r9, r1
 8003d9c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003da0:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003da4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003da8:	ee16 0a90 	vmov	r0, s13
 8003dac:	f7fc fbcc 	bl	8000548 <__aeabi_f2d>
 8003db0:	4602      	mov	r2, r0
 8003db2:	460b      	mov	r3, r1
 8003db4:	ec43 2b10 	vmov	d0, r2, r3
 8003db8:	f007 fee2 	bl	800bb80 <sin>
 8003dbc:	ec53 2b10 	vmov	r2, r3, d0
 8003dc0:	4640      	mov	r0, r8
 8003dc2:	4649      	mov	r1, r9
 8003dc4:	f7fc fc18 	bl	80005f8 <__aeabi_dmul>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	460b      	mov	r3, r1
 8003dcc:	4620      	mov	r0, r4
 8003dce:	4629      	mov	r1, r5
 8003dd0:	f7fc fa5c 	bl	800028c <__adddf3>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	460c      	mov	r4, r1
 8003dd8:	4625      	mov	r5, r4
 8003dda:	461c      	mov	r4, r3
 8003ddc:	4b3d      	ldr	r3, [pc, #244]	; (8003ed4 <trustControl+0x3b4>)
 8003dde:	695b      	ldr	r3, [r3, #20]
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7fc fbb1 	bl	8000548 <__aeabi_f2d>
 8003de6:	4680      	mov	r8, r0
 8003de8:	4689      	mov	r9, r1
 8003dea:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003dee:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003df2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003df6:	ee16 0a90 	vmov	r0, s13
 8003dfa:	f7fc fba5 	bl	8000548 <__aeabi_f2d>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	460b      	mov	r3, r1
 8003e02:	ec43 2b10 	vmov	d0, r2, r3
 8003e06:	f007 fe77 	bl	800baf8 <cos>
 8003e0a:	ec53 2b10 	vmov	r2, r3, d0
 8003e0e:	4640      	mov	r0, r8
 8003e10:	4649      	mov	r1, r9
 8003e12:	f7fc fbf1 	bl	80005f8 <__aeabi_dmul>
 8003e16:	4602      	mov	r2, r0
 8003e18:	460b      	mov	r3, r1
 8003e1a:	4620      	mov	r0, r4
 8003e1c:	4629      	mov	r1, r5
 8003e1e:	f7fc fa35 	bl	800028c <__adddf3>
 8003e22:	4603      	mov	r3, r0
 8003e24:	460c      	mov	r4, r1
 8003e26:	4625      	mov	r5, r4
 8003e28:	461c      	mov	r4, r3
 8003e2a:	4b2b      	ldr	r3, [pc, #172]	; (8003ed8 <trustControl+0x3b8>)
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7fc fb8a 	bl	8000548 <__aeabi_f2d>
 8003e34:	4602      	mov	r2, r0
 8003e36:	460b      	mov	r3, r1
 8003e38:	4620      	mov	r0, r4
 8003e3a:	4629      	mov	r1, r5
 8003e3c:	f7fc fa24 	bl	8000288 <__aeabi_dsub>
 8003e40:	4603      	mov	r3, r0
 8003e42:	460c      	mov	r4, r1
 8003e44:	4625      	mov	r5, r4
 8003e46:	461c      	mov	r4, r3
 8003e48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003e4a:	f7fc fb7d 	bl	8000548 <__aeabi_f2d>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	460b      	mov	r3, r1
 8003e52:	4620      	mov	r0, r4
 8003e54:	4629      	mov	r1, r5
 8003e56:	f7fc fbcf 	bl	80005f8 <__aeabi_dmul>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	460c      	mov	r4, r1
 8003e5e:	4618      	mov	r0, r3
 8003e60:	4621      	mov	r1, r4
 8003e62:	f7fc fea1 	bl	8000ba8 <__aeabi_d2f>
 8003e66:	4603      	mov	r3, r0
 8003e68:	62bb      	str	r3, [r7, #40]	; 0x28
	motor4Torque = (thrust/4 + PIDPitch.output * sin(angleMotor4/RADS) + PIDRoll.output * cos(angleMotor4 / RADS) + PIDYaw.output) * L;
 8003e6a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003e6e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003e72:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003e76:	ee16 0a90 	vmov	r0, s13
 8003e7a:	f7fc fb65 	bl	8000548 <__aeabi_f2d>
 8003e7e:	4604      	mov	r4, r0
 8003e80:	460d      	mov	r5, r1
 8003e82:	4b13      	ldr	r3, [pc, #76]	; (8003ed0 <trustControl+0x3b0>)
 8003e84:	695b      	ldr	r3, [r3, #20]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7fc fb5e 	bl	8000548 <__aeabi_f2d>
 8003e8c:	4680      	mov	r8, r0
 8003e8e:	4689      	mov	r9, r1
 8003e90:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003e94:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003e98:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003e9c:	ee16 0a90 	vmov	r0, s13
 8003ea0:	e01c      	b.n	8003edc <trustControl+0x3bc>
 8003ea2:	bf00      	nop
 8003ea4:	f3af 8000 	nop.w
 8003ea8:	75e2046c 	.word	0x75e2046c
 8003eac:	4048d4fd 	.word	0x4048d4fd
 8003eb0:	42652ee0 	.word	0x42652ee0
 8003eb4:	42340000 	.word	0x42340000
 8003eb8:	43070000 	.word	0x43070000
 8003ebc:	43610000 	.word	0x43610000
 8003ec0:	439d8000 	.word	0x439d8000
 8003ec4:	3e666666 	.word	0x3e666666
 8003ec8:	200003ac 	.word	0x200003ac
 8003ecc:	408f4000 	.word	0x408f4000
 8003ed0:	20000228 	.word	0x20000228
 8003ed4:	20000b38 	.word	0x20000b38
 8003ed8:	20000778 	.word	0x20000778
 8003edc:	f7fc fb34 	bl	8000548 <__aeabi_f2d>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	ec43 2b10 	vmov	d0, r2, r3
 8003ee8:	f007 fe4a 	bl	800bb80 <sin>
 8003eec:	ec53 2b10 	vmov	r2, r3, d0
 8003ef0:	4640      	mov	r0, r8
 8003ef2:	4649      	mov	r1, r9
 8003ef4:	f7fc fb80 	bl	80005f8 <__aeabi_dmul>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	460b      	mov	r3, r1
 8003efc:	4620      	mov	r0, r4
 8003efe:	4629      	mov	r1, r5
 8003f00:	f7fc f9c4 	bl	800028c <__adddf3>
 8003f04:	4603      	mov	r3, r0
 8003f06:	460c      	mov	r4, r1
 8003f08:	4625      	mov	r5, r4
 8003f0a:	461c      	mov	r4, r3
 8003f0c:	4bbc      	ldr	r3, [pc, #752]	; (8004200 <trustControl+0x6e0>)
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7fc fb19 	bl	8000548 <__aeabi_f2d>
 8003f16:	4680      	mov	r8, r0
 8003f18:	4689      	mov	r9, r1
 8003f1a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003f1e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003f22:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003f26:	ee16 0a90 	vmov	r0, s13
 8003f2a:	f7fc fb0d 	bl	8000548 <__aeabi_f2d>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	460b      	mov	r3, r1
 8003f32:	ec43 2b10 	vmov	d0, r2, r3
 8003f36:	f007 fddf 	bl	800baf8 <cos>
 8003f3a:	ec53 2b10 	vmov	r2, r3, d0
 8003f3e:	4640      	mov	r0, r8
 8003f40:	4649      	mov	r1, r9
 8003f42:	f7fc fb59 	bl	80005f8 <__aeabi_dmul>
 8003f46:	4602      	mov	r2, r0
 8003f48:	460b      	mov	r3, r1
 8003f4a:	4620      	mov	r0, r4
 8003f4c:	4629      	mov	r1, r5
 8003f4e:	f7fc f99d 	bl	800028c <__adddf3>
 8003f52:	4603      	mov	r3, r0
 8003f54:	460c      	mov	r4, r1
 8003f56:	4625      	mov	r5, r4
 8003f58:	461c      	mov	r4, r3
 8003f5a:	4baa      	ldr	r3, [pc, #680]	; (8004204 <trustControl+0x6e4>)
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7fc faf2 	bl	8000548 <__aeabi_f2d>
 8003f64:	4602      	mov	r2, r0
 8003f66:	460b      	mov	r3, r1
 8003f68:	4620      	mov	r0, r4
 8003f6a:	4629      	mov	r1, r5
 8003f6c:	f7fc f98e 	bl	800028c <__adddf3>
 8003f70:	4603      	mov	r3, r0
 8003f72:	460c      	mov	r4, r1
 8003f74:	4625      	mov	r5, r4
 8003f76:	461c      	mov	r4, r3
 8003f78:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003f7a:	f7fc fae5 	bl	8000548 <__aeabi_f2d>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	460b      	mov	r3, r1
 8003f82:	4620      	mov	r0, r4
 8003f84:	4629      	mov	r1, r5
 8003f86:	f7fc fb37 	bl	80005f8 <__aeabi_dmul>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	460c      	mov	r4, r1
 8003f8e:	4618      	mov	r0, r3
 8003f90:	4621      	mov	r1, r4
 8003f92:	f7fc fe09 	bl	8000ba8 <__aeabi_d2f>
 8003f96:	4603      	mov	r3, r0
 8003f98:	627b      	str	r3, [r7, #36]	; 0x24

	motor1Thrust = motor1Torque/L;
 8003f9a:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8003f9e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003fa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fa6:	edc7 7a08 	vstr	s15, [r7, #32]
	motor2Thrust = motor2Torque/L;
 8003faa:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8003fae:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003fb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fb6:	edc7 7a07 	vstr	s15, [r7, #28]
	motor3Thrust = motor3Torque/L;
 8003fba:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8003fbe:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003fc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fc6:	edc7 7a06 	vstr	s15, [r7, #24]
	motor4Thrust = motor4Torque/L;
 8003fca:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8003fce:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003fd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fd6:	edc7 7a05 	vstr	s15, [r7, #20]

	RPMmotor1 = sqrt(motor1Thrust/ 0.0449289729)/0.0019896667;
 8003fda:	6a38      	ldr	r0, [r7, #32]
 8003fdc:	f7fc fab4 	bl	8000548 <__aeabi_f2d>
 8003fe0:	a383      	add	r3, pc, #524	; (adr r3, 80041f0 <trustControl+0x6d0>)
 8003fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe6:	f7fc fc31 	bl	800084c <__aeabi_ddiv>
 8003fea:	4603      	mov	r3, r0
 8003fec:	460c      	mov	r4, r1
 8003fee:	ec44 3b17 	vmov	d7, r3, r4
 8003ff2:	eeb0 0a47 	vmov.f32	s0, s14
 8003ff6:	eef0 0a67 	vmov.f32	s1, s15
 8003ffa:	f007 fe09 	bl	800bc10 <sqrt>
 8003ffe:	ec51 0b10 	vmov	r0, r1, d0
 8004002:	a37d      	add	r3, pc, #500	; (adr r3, 80041f8 <trustControl+0x6d8>)
 8004004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004008:	f7fc fc20 	bl	800084c <__aeabi_ddiv>
 800400c:	4603      	mov	r3, r0
 800400e:	460c      	mov	r4, r1
 8004010:	4618      	mov	r0, r3
 8004012:	4621      	mov	r1, r4
 8004014:	f7fc fda0 	bl	8000b58 <__aeabi_d2iz>
 8004018:	4603      	mov	r3, r0
 800401a:	613b      	str	r3, [r7, #16]
	RPMmotor2 = sqrt(motor2Thrust/ 0.0449289729)/0.0019896667;
 800401c:	69f8      	ldr	r0, [r7, #28]
 800401e:	f7fc fa93 	bl	8000548 <__aeabi_f2d>
 8004022:	a373      	add	r3, pc, #460	; (adr r3, 80041f0 <trustControl+0x6d0>)
 8004024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004028:	f7fc fc10 	bl	800084c <__aeabi_ddiv>
 800402c:	4603      	mov	r3, r0
 800402e:	460c      	mov	r4, r1
 8004030:	ec44 3b17 	vmov	d7, r3, r4
 8004034:	eeb0 0a47 	vmov.f32	s0, s14
 8004038:	eef0 0a67 	vmov.f32	s1, s15
 800403c:	f007 fde8 	bl	800bc10 <sqrt>
 8004040:	ec51 0b10 	vmov	r0, r1, d0
 8004044:	a36c      	add	r3, pc, #432	; (adr r3, 80041f8 <trustControl+0x6d8>)
 8004046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800404a:	f7fc fbff 	bl	800084c <__aeabi_ddiv>
 800404e:	4603      	mov	r3, r0
 8004050:	460c      	mov	r4, r1
 8004052:	4618      	mov	r0, r3
 8004054:	4621      	mov	r1, r4
 8004056:	f7fc fd7f 	bl	8000b58 <__aeabi_d2iz>
 800405a:	4603      	mov	r3, r0
 800405c:	60fb      	str	r3, [r7, #12]
	RPMmotor3 = sqrt(motor3Thrust/ 0.0449289729)/0.0019896667;
 800405e:	69b8      	ldr	r0, [r7, #24]
 8004060:	f7fc fa72 	bl	8000548 <__aeabi_f2d>
 8004064:	a362      	add	r3, pc, #392	; (adr r3, 80041f0 <trustControl+0x6d0>)
 8004066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800406a:	f7fc fbef 	bl	800084c <__aeabi_ddiv>
 800406e:	4603      	mov	r3, r0
 8004070:	460c      	mov	r4, r1
 8004072:	ec44 3b17 	vmov	d7, r3, r4
 8004076:	eeb0 0a47 	vmov.f32	s0, s14
 800407a:	eef0 0a67 	vmov.f32	s1, s15
 800407e:	f007 fdc7 	bl	800bc10 <sqrt>
 8004082:	ec51 0b10 	vmov	r0, r1, d0
 8004086:	a35c      	add	r3, pc, #368	; (adr r3, 80041f8 <trustControl+0x6d8>)
 8004088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800408c:	f7fc fbde 	bl	800084c <__aeabi_ddiv>
 8004090:	4603      	mov	r3, r0
 8004092:	460c      	mov	r4, r1
 8004094:	4618      	mov	r0, r3
 8004096:	4621      	mov	r1, r4
 8004098:	f7fc fd5e 	bl	8000b58 <__aeabi_d2iz>
 800409c:	4603      	mov	r3, r0
 800409e:	60bb      	str	r3, [r7, #8]
	RPMmotor4 = sqrt(motor4Thrust/ 0.0449289729)/0.0019896667;
 80040a0:	6978      	ldr	r0, [r7, #20]
 80040a2:	f7fc fa51 	bl	8000548 <__aeabi_f2d>
 80040a6:	a352      	add	r3, pc, #328	; (adr r3, 80041f0 <trustControl+0x6d0>)
 80040a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ac:	f7fc fbce 	bl	800084c <__aeabi_ddiv>
 80040b0:	4603      	mov	r3, r0
 80040b2:	460c      	mov	r4, r1
 80040b4:	ec44 3b17 	vmov	d7, r3, r4
 80040b8:	eeb0 0a47 	vmov.f32	s0, s14
 80040bc:	eef0 0a67 	vmov.f32	s1, s15
 80040c0:	f007 fda6 	bl	800bc10 <sqrt>
 80040c4:	ec51 0b10 	vmov	r0, r1, d0
 80040c8:	a34b      	add	r3, pc, #300	; (adr r3, 80041f8 <trustControl+0x6d8>)
 80040ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ce:	f7fc fbbd 	bl	800084c <__aeabi_ddiv>
 80040d2:	4603      	mov	r3, r0
 80040d4:	460c      	mov	r4, r1
 80040d6:	4618      	mov	r0, r3
 80040d8:	4621      	mov	r1, r4
 80040da:	f7fc fd3d 	bl	8000b58 <__aeabi_d2iz>
 80040de:	4603      	mov	r3, r0
 80040e0:	607b      	str	r3, [r7, #4]

	RPMmotor1 = constrain(RPMmotor1,0,12000);
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	db06      	blt.n	80040f6 <trustControl+0x5d6>
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 80040ee:	4293      	cmp	r3, r2
 80040f0:	bfa8      	it	ge
 80040f2:	4613      	movge	r3, r2
 80040f4:	e000      	b.n	80040f8 <trustControl+0x5d8>
 80040f6:	2300      	movs	r3, #0
 80040f8:	613b      	str	r3, [r7, #16]
	RPMmotor2 = constrain(RPMmotor2,0,12000);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	db06      	blt.n	800410e <trustControl+0x5ee>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8004106:	4293      	cmp	r3, r2
 8004108:	bfa8      	it	ge
 800410a:	4613      	movge	r3, r2
 800410c:	e000      	b.n	8004110 <trustControl+0x5f0>
 800410e:	2300      	movs	r3, #0
 8004110:	60fb      	str	r3, [r7, #12]
	RPMmotor3 = constrain(RPMmotor3,0,12000);
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	2b00      	cmp	r3, #0
 8004116:	db06      	blt.n	8004126 <trustControl+0x606>
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 800411e:	4293      	cmp	r3, r2
 8004120:	bfa8      	it	ge
 8004122:	4613      	movge	r3, r2
 8004124:	e000      	b.n	8004128 <trustControl+0x608>
 8004126:	2300      	movs	r3, #0
 8004128:	60bb      	str	r3, [r7, #8]
	RPMmotor4 = constrain(RPMmotor4,0,12000);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2b00      	cmp	r3, #0
 800412e:	db06      	blt.n	800413e <trustControl+0x61e>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8004136:	4293      	cmp	r3, r2
 8004138:	bfa8      	it	ge
 800413a:	4613      	movge	r3, r2
 800413c:	e000      	b.n	8004140 <trustControl+0x620>
 800413e:	2300      	movs	r3, #0
 8004140:	607b      	str	r3, [r7, #4]

	pulseESC1 = map(RPMmotor1,0,12000,1000,2000);
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004148:	fb02 f303 	mul.w	r3, r2, r3
 800414c:	4a2e      	ldr	r2, [pc, #184]	; (8004208 <trustControl+0x6e8>)
 800414e:	fb82 1203 	smull	r1, r2, r2, r3
 8004152:	1212      	asrs	r2, r2, #8
 8004154:	17db      	asrs	r3, r3, #31
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800415c:	4a2b      	ldr	r2, [pc, #172]	; (800420c <trustControl+0x6ec>)
 800415e:	6013      	str	r3, [r2, #0]
	pulseESC2 = map(RPMmotor2,0,12000,1000,2000);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004166:	fb02 f303 	mul.w	r3, r2, r3
 800416a:	4a27      	ldr	r2, [pc, #156]	; (8004208 <trustControl+0x6e8>)
 800416c:	fb82 1203 	smull	r1, r2, r2, r3
 8004170:	1212      	asrs	r2, r2, #8
 8004172:	17db      	asrs	r3, r3, #31
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800417a:	4a25      	ldr	r2, [pc, #148]	; (8004210 <trustControl+0x6f0>)
 800417c:	6013      	str	r3, [r2, #0]
	pulseESC3 = map(RPMmotor3,0,12000,1000,2000);
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004184:	fb02 f303 	mul.w	r3, r2, r3
 8004188:	4a1f      	ldr	r2, [pc, #124]	; (8004208 <trustControl+0x6e8>)
 800418a:	fb82 1203 	smull	r1, r2, r2, r3
 800418e:	1212      	asrs	r2, r2, #8
 8004190:	17db      	asrs	r3, r3, #31
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8004198:	4a1e      	ldr	r2, [pc, #120]	; (8004214 <trustControl+0x6f4>)
 800419a:	6013      	str	r3, [r2, #0]
	pulseESC4 = map(RPMmotor4,0,12000,1000,2000);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80041a2:	fb02 f303 	mul.w	r3, r2, r3
 80041a6:	4a18      	ldr	r2, [pc, #96]	; (8004208 <trustControl+0x6e8>)
 80041a8:	fb82 1203 	smull	r1, r2, r2, r3
 80041ac:	1212      	asrs	r2, r2, #8
 80041ae:	17db      	asrs	r3, r3, #31
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80041b6:	4a18      	ldr	r2, [pc, #96]	; (8004218 <trustControl+0x6f8>)
 80041b8:	6013      	str	r3, [r2, #0]

	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,pulseESC1);
 80041ba:	4b14      	ldr	r3, [pc, #80]	; (800420c <trustControl+0x6ec>)
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	4b17      	ldr	r3, [pc, #92]	; (800421c <trustControl+0x6fc>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,pulseESC2);
 80041c4:	4b12      	ldr	r3, [pc, #72]	; (8004210 <trustControl+0x6f0>)
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	4b14      	ldr	r3, [pc, #80]	; (800421c <trustControl+0x6fc>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,pulseESC3);
 80041ce:	4b11      	ldr	r3, [pc, #68]	; (8004214 <trustControl+0x6f4>)
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	4b12      	ldr	r3, [pc, #72]	; (800421c <trustControl+0x6fc>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,pulseESC4);
 80041d8:	4b0f      	ldr	r3, [pc, #60]	; (8004218 <trustControl+0x6f8>)
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	4b0f      	ldr	r3, [pc, #60]	; (800421c <trustControl+0x6fc>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	641a      	str	r2, [r3, #64]	; 0x40

}
 80041e2:	bf00      	nop
 80041e4:	3750      	adds	r7, #80	; 0x50
 80041e6:	46bd      	mov	sp, r7
 80041e8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80041ec:	f3af 8000 	nop.w
 80041f0:	2a7f2a64 	.word	0x2a7f2a64
 80041f4:	3fa700ee 	.word	0x3fa700ee
 80041f8:	2d018ef8 	.word	0x2d018ef8
 80041fc:	3f604ca2 	.word	0x3f604ca2
 8004200:	20000b38 	.word	0x20000b38
 8004204:	20000778 	.word	0x20000778
 8004208:	057619f1 	.word	0x057619f1
 800420c:	20000ce4 	.word	0x20000ce4
 8004210:	20000250 	.word	0x20000250
 8004214:	20000d00 	.word	0x20000d00
 8004218:	200008ac 	.word	0x200008ac
 800421c:	20000bc4 	.word	0x20000bc4

08004220 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004226:	2300      	movs	r3, #0
 8004228:	607b      	str	r3, [r7, #4]
 800422a:	4b10      	ldr	r3, [pc, #64]	; (800426c <HAL_MspInit+0x4c>)
 800422c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800422e:	4a0f      	ldr	r2, [pc, #60]	; (800426c <HAL_MspInit+0x4c>)
 8004230:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004234:	6453      	str	r3, [r2, #68]	; 0x44
 8004236:	4b0d      	ldr	r3, [pc, #52]	; (800426c <HAL_MspInit+0x4c>)
 8004238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800423e:	607b      	str	r3, [r7, #4]
 8004240:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004242:	2300      	movs	r3, #0
 8004244:	603b      	str	r3, [r7, #0]
 8004246:	4b09      	ldr	r3, [pc, #36]	; (800426c <HAL_MspInit+0x4c>)
 8004248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424a:	4a08      	ldr	r2, [pc, #32]	; (800426c <HAL_MspInit+0x4c>)
 800424c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004250:	6413      	str	r3, [r2, #64]	; 0x40
 8004252:	4b06      	ldr	r3, [pc, #24]	; (800426c <HAL_MspInit+0x4c>)
 8004254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800425a:	603b      	str	r3, [r7, #0]
 800425c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800425e:	bf00      	nop
 8004260:	370c      	adds	r7, #12
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	40023800 	.word	0x40023800

08004270 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b08c      	sub	sp, #48	; 0x30
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004278:	f107 031c 	add.w	r3, r7, #28
 800427c:	2200      	movs	r2, #0
 800427e:	601a      	str	r2, [r3, #0]
 8004280:	605a      	str	r2, [r3, #4]
 8004282:	609a      	str	r2, [r3, #8]
 8004284:	60da      	str	r2, [r3, #12]
 8004286:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a42      	ldr	r2, [pc, #264]	; (8004398 <HAL_I2C_MspInit+0x128>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d12d      	bne.n	80042ee <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004292:	2300      	movs	r3, #0
 8004294:	61bb      	str	r3, [r7, #24]
 8004296:	4b41      	ldr	r3, [pc, #260]	; (800439c <HAL_I2C_MspInit+0x12c>)
 8004298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429a:	4a40      	ldr	r2, [pc, #256]	; (800439c <HAL_I2C_MspInit+0x12c>)
 800429c:	f043 0302 	orr.w	r3, r3, #2
 80042a0:	6313      	str	r3, [r2, #48]	; 0x30
 80042a2:	4b3e      	ldr	r3, [pc, #248]	; (800439c <HAL_I2C_MspInit+0x12c>)
 80042a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	61bb      	str	r3, [r7, #24]
 80042ac:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80042ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80042b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80042b4:	2312      	movs	r3, #18
 80042b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80042b8:	2301      	movs	r3, #1
 80042ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042bc:	2303      	movs	r3, #3
 80042be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80042c0:	2304      	movs	r3, #4
 80042c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042c4:	f107 031c 	add.w	r3, r7, #28
 80042c8:	4619      	mov	r1, r3
 80042ca:	4835      	ldr	r0, [pc, #212]	; (80043a0 <HAL_I2C_MspInit+0x130>)
 80042cc:	f001 f970 	bl	80055b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80042d0:	2300      	movs	r3, #0
 80042d2:	617b      	str	r3, [r7, #20]
 80042d4:	4b31      	ldr	r3, [pc, #196]	; (800439c <HAL_I2C_MspInit+0x12c>)
 80042d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d8:	4a30      	ldr	r2, [pc, #192]	; (800439c <HAL_I2C_MspInit+0x12c>)
 80042da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80042de:	6413      	str	r3, [r2, #64]	; 0x40
 80042e0:	4b2e      	ldr	r3, [pc, #184]	; (800439c <HAL_I2C_MspInit+0x12c>)
 80042e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042e8:	617b      	str	r3, [r7, #20]
 80042ea:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80042ec:	e050      	b.n	8004390 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a2c      	ldr	r2, [pc, #176]	; (80043a4 <HAL_I2C_MspInit+0x134>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d14b      	bne.n	8004390 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80042f8:	2300      	movs	r3, #0
 80042fa:	613b      	str	r3, [r7, #16]
 80042fc:	4b27      	ldr	r3, [pc, #156]	; (800439c <HAL_I2C_MspInit+0x12c>)
 80042fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004300:	4a26      	ldr	r2, [pc, #152]	; (800439c <HAL_I2C_MspInit+0x12c>)
 8004302:	f043 0304 	orr.w	r3, r3, #4
 8004306:	6313      	str	r3, [r2, #48]	; 0x30
 8004308:	4b24      	ldr	r3, [pc, #144]	; (800439c <HAL_I2C_MspInit+0x12c>)
 800430a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430c:	f003 0304 	and.w	r3, r3, #4
 8004310:	613b      	str	r3, [r7, #16]
 8004312:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004314:	2300      	movs	r3, #0
 8004316:	60fb      	str	r3, [r7, #12]
 8004318:	4b20      	ldr	r3, [pc, #128]	; (800439c <HAL_I2C_MspInit+0x12c>)
 800431a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431c:	4a1f      	ldr	r2, [pc, #124]	; (800439c <HAL_I2C_MspInit+0x12c>)
 800431e:	f043 0301 	orr.w	r3, r3, #1
 8004322:	6313      	str	r3, [r2, #48]	; 0x30
 8004324:	4b1d      	ldr	r3, [pc, #116]	; (800439c <HAL_I2C_MspInit+0x12c>)
 8004326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004328:	f003 0301 	and.w	r3, r3, #1
 800432c:	60fb      	str	r3, [r7, #12]
 800432e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004330:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004334:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004336:	2312      	movs	r3, #18
 8004338:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800433a:	2301      	movs	r3, #1
 800433c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800433e:	2303      	movs	r3, #3
 8004340:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004342:	2304      	movs	r3, #4
 8004344:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004346:	f107 031c 	add.w	r3, r7, #28
 800434a:	4619      	mov	r1, r3
 800434c:	4816      	ldr	r0, [pc, #88]	; (80043a8 <HAL_I2C_MspInit+0x138>)
 800434e:	f001 f92f 	bl	80055b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004352:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004356:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004358:	2312      	movs	r3, #18
 800435a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800435c:	2301      	movs	r3, #1
 800435e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004360:	2303      	movs	r3, #3
 8004362:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004364:	2304      	movs	r3, #4
 8004366:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004368:	f107 031c 	add.w	r3, r7, #28
 800436c:	4619      	mov	r1, r3
 800436e:	480f      	ldr	r0, [pc, #60]	; (80043ac <HAL_I2C_MspInit+0x13c>)
 8004370:	f001 f91e 	bl	80055b0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004374:	2300      	movs	r3, #0
 8004376:	60bb      	str	r3, [r7, #8]
 8004378:	4b08      	ldr	r3, [pc, #32]	; (800439c <HAL_I2C_MspInit+0x12c>)
 800437a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437c:	4a07      	ldr	r2, [pc, #28]	; (800439c <HAL_I2C_MspInit+0x12c>)
 800437e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004382:	6413      	str	r3, [r2, #64]	; 0x40
 8004384:	4b05      	ldr	r3, [pc, #20]	; (800439c <HAL_I2C_MspInit+0x12c>)
 8004386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004388:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800438c:	60bb      	str	r3, [r7, #8]
 800438e:	68bb      	ldr	r3, [r7, #8]
}
 8004390:	bf00      	nop
 8004392:	3730      	adds	r7, #48	; 0x30
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	40005400 	.word	0x40005400
 800439c:	40023800 	.word	0x40023800
 80043a0:	40020400 	.word	0x40020400
 80043a4:	40005c00 	.word	0x40005c00
 80043a8:	40020800 	.word	0x40020800
 80043ac:	40020000 	.word	0x40020000

080043b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b094      	sub	sp, #80	; 0x50
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80043bc:	2200      	movs	r2, #0
 80043be:	601a      	str	r2, [r3, #0]
 80043c0:	605a      	str	r2, [r3, #4]
 80043c2:	609a      	str	r2, [r3, #8]
 80043c4:	60da      	str	r2, [r3, #12]
 80043c6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043d0:	d116      	bne.n	8004400 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80043d2:	2300      	movs	r3, #0
 80043d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80043d6:	4ba6      	ldr	r3, [pc, #664]	; (8004670 <HAL_TIM_Base_MspInit+0x2c0>)
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	4aa5      	ldr	r2, [pc, #660]	; (8004670 <HAL_TIM_Base_MspInit+0x2c0>)
 80043dc:	f043 0301 	orr.w	r3, r3, #1
 80043e0:	6413      	str	r3, [r2, #64]	; 0x40
 80043e2:	4ba3      	ldr	r3, [pc, #652]	; (8004670 <HAL_TIM_Base_MspInit+0x2c0>)
 80043e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80043ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80043ee:	2200      	movs	r2, #0
 80043f0:	2100      	movs	r1, #0
 80043f2:	201c      	movs	r0, #28
 80043f4:	f000 fd37 	bl	8004e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80043f8:	201c      	movs	r0, #28
 80043fa:	f000 fd50 	bl	8004e9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80043fe:	e16a      	b.n	80046d6 <HAL_TIM_Base_MspInit+0x326>
  else if(htim_base->Instance==TIM3)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a9b      	ldr	r2, [pc, #620]	; (8004674 <HAL_TIM_Base_MspInit+0x2c4>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d152      	bne.n	80044b0 <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800440a:	2300      	movs	r3, #0
 800440c:	637b      	str	r3, [r7, #52]	; 0x34
 800440e:	4b98      	ldr	r3, [pc, #608]	; (8004670 <HAL_TIM_Base_MspInit+0x2c0>)
 8004410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004412:	4a97      	ldr	r2, [pc, #604]	; (8004670 <HAL_TIM_Base_MspInit+0x2c0>)
 8004414:	f043 0302 	orr.w	r3, r3, #2
 8004418:	6413      	str	r3, [r2, #64]	; 0x40
 800441a:	4b95      	ldr	r3, [pc, #596]	; (8004670 <HAL_TIM_Base_MspInit+0x2c0>)
 800441c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	637b      	str	r3, [r7, #52]	; 0x34
 8004424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004426:	2300      	movs	r3, #0
 8004428:	633b      	str	r3, [r7, #48]	; 0x30
 800442a:	4b91      	ldr	r3, [pc, #580]	; (8004670 <HAL_TIM_Base_MspInit+0x2c0>)
 800442c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442e:	4a90      	ldr	r2, [pc, #576]	; (8004670 <HAL_TIM_Base_MspInit+0x2c0>)
 8004430:	f043 0304 	orr.w	r3, r3, #4
 8004434:	6313      	str	r3, [r2, #48]	; 0x30
 8004436:	4b8e      	ldr	r3, [pc, #568]	; (8004670 <HAL_TIM_Base_MspInit+0x2c0>)
 8004438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443a:	f003 0304 	and.w	r3, r3, #4
 800443e:	633b      	str	r3, [r7, #48]	; 0x30
 8004440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004442:	2300      	movs	r3, #0
 8004444:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004446:	4b8a      	ldr	r3, [pc, #552]	; (8004670 <HAL_TIM_Base_MspInit+0x2c0>)
 8004448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444a:	4a89      	ldr	r2, [pc, #548]	; (8004670 <HAL_TIM_Base_MspInit+0x2c0>)
 800444c:	f043 0302 	orr.w	r3, r3, #2
 8004450:	6313      	str	r3, [r2, #48]	; 0x30
 8004452:	4b87      	ldr	r3, [pc, #540]	; (8004670 <HAL_TIM_Base_MspInit+0x2c0>)
 8004454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800445c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800445e:	2380      	movs	r3, #128	; 0x80
 8004460:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004462:	2302      	movs	r3, #2
 8004464:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004466:	2300      	movs	r3, #0
 8004468:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800446a:	2300      	movs	r3, #0
 800446c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800446e:	2302      	movs	r3, #2
 8004470:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004472:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004476:	4619      	mov	r1, r3
 8004478:	487f      	ldr	r0, [pc, #508]	; (8004678 <HAL_TIM_Base_MspInit+0x2c8>)
 800447a:	f001 f899 	bl	80055b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800447e:	2310      	movs	r3, #16
 8004480:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004482:	2302      	movs	r3, #2
 8004484:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004486:	2300      	movs	r3, #0
 8004488:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800448a:	2300      	movs	r3, #0
 800448c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800448e:	2302      	movs	r3, #2
 8004490:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004492:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004496:	4619      	mov	r1, r3
 8004498:	4878      	ldr	r0, [pc, #480]	; (800467c <HAL_TIM_Base_MspInit+0x2cc>)
 800449a:	f001 f889 	bl	80055b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800449e:	2200      	movs	r2, #0
 80044a0:	2100      	movs	r1, #0
 80044a2:	201d      	movs	r0, #29
 80044a4:	f000 fcdf 	bl	8004e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80044a8:	201d      	movs	r0, #29
 80044aa:	f000 fcf8 	bl	8004e9e <HAL_NVIC_EnableIRQ>
}
 80044ae:	e112      	b.n	80046d6 <HAL_TIM_Base_MspInit+0x326>
  else if(htim_base->Instance==TIM4)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a72      	ldr	r2, [pc, #456]	; (8004680 <HAL_TIM_Base_MspInit+0x2d0>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d135      	bne.n	8004526 <HAL_TIM_Base_MspInit+0x176>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80044ba:	2300      	movs	r3, #0
 80044bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80044be:	4b6c      	ldr	r3, [pc, #432]	; (8004670 <HAL_TIM_Base_MspInit+0x2c0>)
 80044c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c2:	4a6b      	ldr	r2, [pc, #428]	; (8004670 <HAL_TIM_Base_MspInit+0x2c0>)
 80044c4:	f043 0304 	orr.w	r3, r3, #4
 80044c8:	6413      	str	r3, [r2, #64]	; 0x40
 80044ca:	4b69      	ldr	r3, [pc, #420]	; (8004670 <HAL_TIM_Base_MspInit+0x2c0>)
 80044cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ce:	f003 0304 	and.w	r3, r3, #4
 80044d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80044d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80044d6:	2300      	movs	r3, #0
 80044d8:	627b      	str	r3, [r7, #36]	; 0x24
 80044da:	4b65      	ldr	r3, [pc, #404]	; (8004670 <HAL_TIM_Base_MspInit+0x2c0>)
 80044dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044de:	4a64      	ldr	r2, [pc, #400]	; (8004670 <HAL_TIM_Base_MspInit+0x2c0>)
 80044e0:	f043 0308 	orr.w	r3, r3, #8
 80044e4:	6313      	str	r3, [r2, #48]	; 0x30
 80044e6:	4b62      	ldr	r3, [pc, #392]	; (8004670 <HAL_TIM_Base_MspInit+0x2c0>)
 80044e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ea:	f003 0308 	and.w	r3, r3, #8
 80044ee:	627b      	str	r3, [r7, #36]	; 0x24
 80044f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80044f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044f6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044f8:	2302      	movs	r3, #2
 80044fa:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044fc:	2300      	movs	r3, #0
 80044fe:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004500:	2300      	movs	r3, #0
 8004502:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004504:	2302      	movs	r3, #2
 8004506:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004508:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800450c:	4619      	mov	r1, r3
 800450e:	485d      	ldr	r0, [pc, #372]	; (8004684 <HAL_TIM_Base_MspInit+0x2d4>)
 8004510:	f001 f84e 	bl	80055b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004514:	2200      	movs	r2, #0
 8004516:	2100      	movs	r1, #0
 8004518:	201e      	movs	r0, #30
 800451a:	f000 fca4 	bl	8004e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800451e:	201e      	movs	r0, #30
 8004520:	f000 fcbd 	bl	8004e9e <HAL_NVIC_EnableIRQ>
}
 8004524:	e0d7      	b.n	80046d6 <HAL_TIM_Base_MspInit+0x326>
  else if(htim_base->Instance==TIM5)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a57      	ldr	r2, [pc, #348]	; (8004688 <HAL_TIM_Base_MspInit+0x2d8>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d134      	bne.n	800459a <HAL_TIM_Base_MspInit+0x1ea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004530:	2300      	movs	r3, #0
 8004532:	623b      	str	r3, [r7, #32]
 8004534:	4b4e      	ldr	r3, [pc, #312]	; (8004670 <HAL_TIM_Base_MspInit+0x2c0>)
 8004536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004538:	4a4d      	ldr	r2, [pc, #308]	; (8004670 <HAL_TIM_Base_MspInit+0x2c0>)
 800453a:	f043 0308 	orr.w	r3, r3, #8
 800453e:	6413      	str	r3, [r2, #64]	; 0x40
 8004540:	4b4b      	ldr	r3, [pc, #300]	; (8004670 <HAL_TIM_Base_MspInit+0x2c0>)
 8004542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004544:	f003 0308 	and.w	r3, r3, #8
 8004548:	623b      	str	r3, [r7, #32]
 800454a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800454c:	2300      	movs	r3, #0
 800454e:	61fb      	str	r3, [r7, #28]
 8004550:	4b47      	ldr	r3, [pc, #284]	; (8004670 <HAL_TIM_Base_MspInit+0x2c0>)
 8004552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004554:	4a46      	ldr	r2, [pc, #280]	; (8004670 <HAL_TIM_Base_MspInit+0x2c0>)
 8004556:	f043 0301 	orr.w	r3, r3, #1
 800455a:	6313      	str	r3, [r2, #48]	; 0x30
 800455c:	4b44      	ldr	r3, [pc, #272]	; (8004670 <HAL_TIM_Base_MspInit+0x2c0>)
 800455e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004560:	f003 0301 	and.w	r3, r3, #1
 8004564:	61fb      	str	r3, [r7, #28]
 8004566:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004568:	2301      	movs	r3, #1
 800456a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800456c:	2302      	movs	r3, #2
 800456e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004570:	2300      	movs	r3, #0
 8004572:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004574:	2300      	movs	r3, #0
 8004576:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004578:	2302      	movs	r3, #2
 800457a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800457c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004580:	4619      	mov	r1, r3
 8004582:	4842      	ldr	r0, [pc, #264]	; (800468c <HAL_TIM_Base_MspInit+0x2dc>)
 8004584:	f001 f814 	bl	80055b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8004588:	2200      	movs	r2, #0
 800458a:	2100      	movs	r1, #0
 800458c:	2032      	movs	r0, #50	; 0x32
 800458e:	f000 fc6a 	bl	8004e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004592:	2032      	movs	r0, #50	; 0x32
 8004594:	f000 fc83 	bl	8004e9e <HAL_NVIC_EnableIRQ>
}
 8004598:	e09d      	b.n	80046d6 <HAL_TIM_Base_MspInit+0x326>
  else if(htim_base->Instance==TIM6)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a3c      	ldr	r2, [pc, #240]	; (8004690 <HAL_TIM_Base_MspInit+0x2e0>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d10e      	bne.n	80045c2 <HAL_TIM_Base_MspInit+0x212>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80045a4:	2300      	movs	r3, #0
 80045a6:	61bb      	str	r3, [r7, #24]
 80045a8:	4b31      	ldr	r3, [pc, #196]	; (8004670 <HAL_TIM_Base_MspInit+0x2c0>)
 80045aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ac:	4a30      	ldr	r2, [pc, #192]	; (8004670 <HAL_TIM_Base_MspInit+0x2c0>)
 80045ae:	f043 0310 	orr.w	r3, r3, #16
 80045b2:	6413      	str	r3, [r2, #64]	; 0x40
 80045b4:	4b2e      	ldr	r3, [pc, #184]	; (8004670 <HAL_TIM_Base_MspInit+0x2c0>)
 80045b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b8:	f003 0310 	and.w	r3, r3, #16
 80045bc:	61bb      	str	r3, [r7, #24]
 80045be:	69bb      	ldr	r3, [r7, #24]
}
 80045c0:	e089      	b.n	80046d6 <HAL_TIM_Base_MspInit+0x326>
  else if(htim_base->Instance==TIM7)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a33      	ldr	r2, [pc, #204]	; (8004694 <HAL_TIM_Base_MspInit+0x2e4>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d116      	bne.n	80045fa <HAL_TIM_Base_MspInit+0x24a>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80045cc:	2300      	movs	r3, #0
 80045ce:	617b      	str	r3, [r7, #20]
 80045d0:	4b27      	ldr	r3, [pc, #156]	; (8004670 <HAL_TIM_Base_MspInit+0x2c0>)
 80045d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d4:	4a26      	ldr	r2, [pc, #152]	; (8004670 <HAL_TIM_Base_MspInit+0x2c0>)
 80045d6:	f043 0320 	orr.w	r3, r3, #32
 80045da:	6413      	str	r3, [r2, #64]	; 0x40
 80045dc:	4b24      	ldr	r3, [pc, #144]	; (8004670 <HAL_TIM_Base_MspInit+0x2c0>)
 80045de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e0:	f003 0320 	and.w	r3, r3, #32
 80045e4:	617b      	str	r3, [r7, #20]
 80045e6:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 80045e8:	2200      	movs	r2, #0
 80045ea:	2101      	movs	r1, #1
 80045ec:	2037      	movs	r0, #55	; 0x37
 80045ee:	f000 fc3a 	bl	8004e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80045f2:	2037      	movs	r0, #55	; 0x37
 80045f4:	f000 fc53 	bl	8004e9e <HAL_NVIC_EnableIRQ>
}
 80045f8:	e06d      	b.n	80046d6 <HAL_TIM_Base_MspInit+0x326>
  else if(htim_base->Instance==TIM9)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a26      	ldr	r2, [pc, #152]	; (8004698 <HAL_TIM_Base_MspInit+0x2e8>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d14d      	bne.n	80046a0 <HAL_TIM_Base_MspInit+0x2f0>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8004604:	2300      	movs	r3, #0
 8004606:	613b      	str	r3, [r7, #16]
 8004608:	4b19      	ldr	r3, [pc, #100]	; (8004670 <HAL_TIM_Base_MspInit+0x2c0>)
 800460a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800460c:	4a18      	ldr	r2, [pc, #96]	; (8004670 <HAL_TIM_Base_MspInit+0x2c0>)
 800460e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004612:	6453      	str	r3, [r2, #68]	; 0x44
 8004614:	4b16      	ldr	r3, [pc, #88]	; (8004670 <HAL_TIM_Base_MspInit+0x2c0>)
 8004616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004618:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800461c:	613b      	str	r3, [r7, #16]
 800461e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004620:	2300      	movs	r3, #0
 8004622:	60fb      	str	r3, [r7, #12]
 8004624:	4b12      	ldr	r3, [pc, #72]	; (8004670 <HAL_TIM_Base_MspInit+0x2c0>)
 8004626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004628:	4a11      	ldr	r2, [pc, #68]	; (8004670 <HAL_TIM_Base_MspInit+0x2c0>)
 800462a:	f043 0310 	orr.w	r3, r3, #16
 800462e:	6313      	str	r3, [r2, #48]	; 0x30
 8004630:	4b0f      	ldr	r3, [pc, #60]	; (8004670 <HAL_TIM_Base_MspInit+0x2c0>)
 8004632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004634:	f003 0310 	and.w	r3, r3, #16
 8004638:	60fb      	str	r3, [r7, #12]
 800463a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800463c:	2340      	movs	r3, #64	; 0x40
 800463e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004640:	2302      	movs	r3, #2
 8004642:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004644:	2300      	movs	r3, #0
 8004646:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004648:	2300      	movs	r3, #0
 800464a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800464c:	2303      	movs	r3, #3
 800464e:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004650:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004654:	4619      	mov	r1, r3
 8004656:	4811      	ldr	r0, [pc, #68]	; (800469c <HAL_TIM_Base_MspInit+0x2ec>)
 8004658:	f000 ffaa 	bl	80055b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800465c:	2200      	movs	r2, #0
 800465e:	2100      	movs	r1, #0
 8004660:	2018      	movs	r0, #24
 8004662:	f000 fc00 	bl	8004e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8004666:	2018      	movs	r0, #24
 8004668:	f000 fc19 	bl	8004e9e <HAL_NVIC_EnableIRQ>
}
 800466c:	e033      	b.n	80046d6 <HAL_TIM_Base_MspInit+0x326>
 800466e:	bf00      	nop
 8004670:	40023800 	.word	0x40023800
 8004674:	40000400 	.word	0x40000400
 8004678:	40020800 	.word	0x40020800
 800467c:	40020400 	.word	0x40020400
 8004680:	40000800 	.word	0x40000800
 8004684:	40020c00 	.word	0x40020c00
 8004688:	40000c00 	.word	0x40000c00
 800468c:	40020000 	.word	0x40020000
 8004690:	40001000 	.word	0x40001000
 8004694:	40001400 	.word	0x40001400
 8004698:	40014000 	.word	0x40014000
 800469c:	40021000 	.word	0x40021000
  else if(htim_base->Instance==TIM10)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a0e      	ldr	r2, [pc, #56]	; (80046e0 <HAL_TIM_Base_MspInit+0x330>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d115      	bne.n	80046d6 <HAL_TIM_Base_MspInit+0x326>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80046aa:	2300      	movs	r3, #0
 80046ac:	60bb      	str	r3, [r7, #8]
 80046ae:	4b0d      	ldr	r3, [pc, #52]	; (80046e4 <HAL_TIM_Base_MspInit+0x334>)
 80046b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b2:	4a0c      	ldr	r2, [pc, #48]	; (80046e4 <HAL_TIM_Base_MspInit+0x334>)
 80046b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046b8:	6453      	str	r3, [r2, #68]	; 0x44
 80046ba:	4b0a      	ldr	r3, [pc, #40]	; (80046e4 <HAL_TIM_Base_MspInit+0x334>)
 80046bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046c2:	60bb      	str	r3, [r7, #8]
 80046c4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 2, 0);
 80046c6:	2200      	movs	r2, #0
 80046c8:	2102      	movs	r1, #2
 80046ca:	2019      	movs	r0, #25
 80046cc:	f000 fbcb 	bl	8004e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80046d0:	2019      	movs	r0, #25
 80046d2:	f000 fbe4 	bl	8004e9e <HAL_NVIC_EnableIRQ>
}
 80046d6:	bf00      	nop
 80046d8:	3750      	adds	r7, #80	; 0x50
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	40014400 	.word	0x40014400
 80046e4:	40023800 	.word	0x40023800

080046e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b088      	sub	sp, #32
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046f0:	f107 030c 	add.w	r3, r7, #12
 80046f4:	2200      	movs	r2, #0
 80046f6:	601a      	str	r2, [r3, #0]
 80046f8:	605a      	str	r2, [r3, #4]
 80046fa:	609a      	str	r2, [r3, #8]
 80046fc:	60da      	str	r2, [r3, #12]
 80046fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004708:	d11e      	bne.n	8004748 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800470a:	2300      	movs	r3, #0
 800470c:	60bb      	str	r3, [r7, #8]
 800470e:	4b10      	ldr	r3, [pc, #64]	; (8004750 <HAL_TIM_MspPostInit+0x68>)
 8004710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004712:	4a0f      	ldr	r2, [pc, #60]	; (8004750 <HAL_TIM_MspPostInit+0x68>)
 8004714:	f043 0301 	orr.w	r3, r3, #1
 8004718:	6313      	str	r3, [r2, #48]	; 0x30
 800471a:	4b0d      	ldr	r3, [pc, #52]	; (8004750 <HAL_TIM_MspPostInit+0x68>)
 800471c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	60bb      	str	r3, [r7, #8]
 8004724:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 8004726:	f248 030e 	movw	r3, #32782	; 0x800e
 800472a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800472c:	2302      	movs	r3, #2
 800472e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004730:	2300      	movs	r3, #0
 8004732:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004734:	2300      	movs	r3, #0
 8004736:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004738:	2301      	movs	r3, #1
 800473a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800473c:	f107 030c 	add.w	r3, r7, #12
 8004740:	4619      	mov	r1, r3
 8004742:	4804      	ldr	r0, [pc, #16]	; (8004754 <HAL_TIM_MspPostInit+0x6c>)
 8004744:	f000 ff34 	bl	80055b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004748:	bf00      	nop
 800474a:	3720      	adds	r7, #32
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	40023800 	.word	0x40023800
 8004754:	40020000 	.word	0x40020000

08004758 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b08e      	sub	sp, #56	; 0x38
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004760:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004764:	2200      	movs	r2, #0
 8004766:	601a      	str	r2, [r3, #0]
 8004768:	605a      	str	r2, [r3, #4]
 800476a:	609a      	str	r2, [r3, #8]
 800476c:	60da      	str	r2, [r3, #12]
 800476e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a7b      	ldr	r2, [pc, #492]	; (8004964 <HAL_UART_MspInit+0x20c>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d12d      	bne.n	80047d6 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800477a:	2300      	movs	r3, #0
 800477c:	623b      	str	r3, [r7, #32]
 800477e:	4b7a      	ldr	r3, [pc, #488]	; (8004968 <HAL_UART_MspInit+0x210>)
 8004780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004782:	4a79      	ldr	r2, [pc, #484]	; (8004968 <HAL_UART_MspInit+0x210>)
 8004784:	f043 0310 	orr.w	r3, r3, #16
 8004788:	6453      	str	r3, [r2, #68]	; 0x44
 800478a:	4b77      	ldr	r3, [pc, #476]	; (8004968 <HAL_UART_MspInit+0x210>)
 800478c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800478e:	f003 0310 	and.w	r3, r3, #16
 8004792:	623b      	str	r3, [r7, #32]
 8004794:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004796:	2300      	movs	r3, #0
 8004798:	61fb      	str	r3, [r7, #28]
 800479a:	4b73      	ldr	r3, [pc, #460]	; (8004968 <HAL_UART_MspInit+0x210>)
 800479c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479e:	4a72      	ldr	r2, [pc, #456]	; (8004968 <HAL_UART_MspInit+0x210>)
 80047a0:	f043 0301 	orr.w	r3, r3, #1
 80047a4:	6313      	str	r3, [r2, #48]	; 0x30
 80047a6:	4b70      	ldr	r3, [pc, #448]	; (8004968 <HAL_UART_MspInit+0x210>)
 80047a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047aa:	f003 0301 	and.w	r3, r3, #1
 80047ae:	61fb      	str	r3, [r7, #28]
 80047b0:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80047b2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80047b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047b8:	2302      	movs	r3, #2
 80047ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047bc:	2300      	movs	r3, #0
 80047be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047c0:	2303      	movs	r3, #3
 80047c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80047c4:	2307      	movs	r3, #7
 80047c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047cc:	4619      	mov	r1, r3
 80047ce:	4867      	ldr	r0, [pc, #412]	; (800496c <HAL_UART_MspInit+0x214>)
 80047d0:	f000 feee 	bl	80055b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80047d4:	e0c1      	b.n	800495a <HAL_UART_MspInit+0x202>
  else if(huart->Instance==USART2)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a65      	ldr	r2, [pc, #404]	; (8004970 <HAL_UART_MspInit+0x218>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d15b      	bne.n	8004898 <HAL_UART_MspInit+0x140>
    __HAL_RCC_USART2_CLK_ENABLE();
 80047e0:	2300      	movs	r3, #0
 80047e2:	61bb      	str	r3, [r7, #24]
 80047e4:	4b60      	ldr	r3, [pc, #384]	; (8004968 <HAL_UART_MspInit+0x210>)
 80047e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e8:	4a5f      	ldr	r2, [pc, #380]	; (8004968 <HAL_UART_MspInit+0x210>)
 80047ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047ee:	6413      	str	r3, [r2, #64]	; 0x40
 80047f0:	4b5d      	ldr	r3, [pc, #372]	; (8004968 <HAL_UART_MspInit+0x210>)
 80047f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047f8:	61bb      	str	r3, [r7, #24]
 80047fa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80047fc:	2300      	movs	r3, #0
 80047fe:	617b      	str	r3, [r7, #20]
 8004800:	4b59      	ldr	r3, [pc, #356]	; (8004968 <HAL_UART_MspInit+0x210>)
 8004802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004804:	4a58      	ldr	r2, [pc, #352]	; (8004968 <HAL_UART_MspInit+0x210>)
 8004806:	f043 0308 	orr.w	r3, r3, #8
 800480a:	6313      	str	r3, [r2, #48]	; 0x30
 800480c:	4b56      	ldr	r3, [pc, #344]	; (8004968 <HAL_UART_MspInit+0x210>)
 800480e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004810:	f003 0308 	and.w	r3, r3, #8
 8004814:	617b      	str	r3, [r7, #20]
 8004816:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8004818:	2360      	movs	r3, #96	; 0x60
 800481a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800481c:	2302      	movs	r3, #2
 800481e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004820:	2300      	movs	r3, #0
 8004822:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004824:	2303      	movs	r3, #3
 8004826:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004828:	2307      	movs	r3, #7
 800482a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800482c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004830:	4619      	mov	r1, r3
 8004832:	4850      	ldr	r0, [pc, #320]	; (8004974 <HAL_UART_MspInit+0x21c>)
 8004834:	f000 febc 	bl	80055b0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004838:	4b4f      	ldr	r3, [pc, #316]	; (8004978 <HAL_UART_MspInit+0x220>)
 800483a:	4a50      	ldr	r2, [pc, #320]	; (800497c <HAL_UART_MspInit+0x224>)
 800483c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800483e:	4b4e      	ldr	r3, [pc, #312]	; (8004978 <HAL_UART_MspInit+0x220>)
 8004840:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004844:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004846:	4b4c      	ldr	r3, [pc, #304]	; (8004978 <HAL_UART_MspInit+0x220>)
 8004848:	2200      	movs	r2, #0
 800484a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800484c:	4b4a      	ldr	r3, [pc, #296]	; (8004978 <HAL_UART_MspInit+0x220>)
 800484e:	2200      	movs	r2, #0
 8004850:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004852:	4b49      	ldr	r3, [pc, #292]	; (8004978 <HAL_UART_MspInit+0x220>)
 8004854:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004858:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800485a:	4b47      	ldr	r3, [pc, #284]	; (8004978 <HAL_UART_MspInit+0x220>)
 800485c:	2200      	movs	r2, #0
 800485e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004860:	4b45      	ldr	r3, [pc, #276]	; (8004978 <HAL_UART_MspInit+0x220>)
 8004862:	2200      	movs	r2, #0
 8004864:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8004866:	4b44      	ldr	r3, [pc, #272]	; (8004978 <HAL_UART_MspInit+0x220>)
 8004868:	f44f 7280 	mov.w	r2, #256	; 0x100
 800486c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800486e:	4b42      	ldr	r3, [pc, #264]	; (8004978 <HAL_UART_MspInit+0x220>)
 8004870:	2200      	movs	r2, #0
 8004872:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004874:	4b40      	ldr	r3, [pc, #256]	; (8004978 <HAL_UART_MspInit+0x220>)
 8004876:	2200      	movs	r2, #0
 8004878:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800487a:	483f      	ldr	r0, [pc, #252]	; (8004978 <HAL_UART_MspInit+0x220>)
 800487c:	f000 fb2a 	bl	8004ed4 <HAL_DMA_Init>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d001      	beq.n	800488a <HAL_UART_MspInit+0x132>
      Error_Handler();
 8004886:	f7ff f81f 	bl	80038c8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a3a      	ldr	r2, [pc, #232]	; (8004978 <HAL_UART_MspInit+0x220>)
 800488e:	635a      	str	r2, [r3, #52]	; 0x34
 8004890:	4a39      	ldr	r2, [pc, #228]	; (8004978 <HAL_UART_MspInit+0x220>)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6393      	str	r3, [r2, #56]	; 0x38
}
 8004896:	e060      	b.n	800495a <HAL_UART_MspInit+0x202>
  else if(huart->Instance==USART3)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a38      	ldr	r2, [pc, #224]	; (8004980 <HAL_UART_MspInit+0x228>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d15b      	bne.n	800495a <HAL_UART_MspInit+0x202>
    __HAL_RCC_USART3_CLK_ENABLE();
 80048a2:	2300      	movs	r3, #0
 80048a4:	613b      	str	r3, [r7, #16]
 80048a6:	4b30      	ldr	r3, [pc, #192]	; (8004968 <HAL_UART_MspInit+0x210>)
 80048a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048aa:	4a2f      	ldr	r2, [pc, #188]	; (8004968 <HAL_UART_MspInit+0x210>)
 80048ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048b0:	6413      	str	r3, [r2, #64]	; 0x40
 80048b2:	4b2d      	ldr	r3, [pc, #180]	; (8004968 <HAL_UART_MspInit+0x210>)
 80048b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048ba:	613b      	str	r3, [r7, #16]
 80048bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80048be:	2300      	movs	r3, #0
 80048c0:	60fb      	str	r3, [r7, #12]
 80048c2:	4b29      	ldr	r3, [pc, #164]	; (8004968 <HAL_UART_MspInit+0x210>)
 80048c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c6:	4a28      	ldr	r2, [pc, #160]	; (8004968 <HAL_UART_MspInit+0x210>)
 80048c8:	f043 0304 	orr.w	r3, r3, #4
 80048cc:	6313      	str	r3, [r2, #48]	; 0x30
 80048ce:	4b26      	ldr	r3, [pc, #152]	; (8004968 <HAL_UART_MspInit+0x210>)
 80048d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d2:	f003 0304 	and.w	r3, r3, #4
 80048d6:	60fb      	str	r3, [r7, #12]
 80048d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80048da:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80048de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048e0:	2302      	movs	r3, #2
 80048e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048e4:	2300      	movs	r3, #0
 80048e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048e8:	2303      	movs	r3, #3
 80048ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80048ec:	2307      	movs	r3, #7
 80048ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048f4:	4619      	mov	r1, r3
 80048f6:	4823      	ldr	r0, [pc, #140]	; (8004984 <HAL_UART_MspInit+0x22c>)
 80048f8:	f000 fe5a 	bl	80055b0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80048fc:	4b22      	ldr	r3, [pc, #136]	; (8004988 <HAL_UART_MspInit+0x230>)
 80048fe:	4a23      	ldr	r2, [pc, #140]	; (800498c <HAL_UART_MspInit+0x234>)
 8004900:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8004902:	4b21      	ldr	r3, [pc, #132]	; (8004988 <HAL_UART_MspInit+0x230>)
 8004904:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004908:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800490a:	4b1f      	ldr	r3, [pc, #124]	; (8004988 <HAL_UART_MspInit+0x230>)
 800490c:	2200      	movs	r2, #0
 800490e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004910:	4b1d      	ldr	r3, [pc, #116]	; (8004988 <HAL_UART_MspInit+0x230>)
 8004912:	2200      	movs	r2, #0
 8004914:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004916:	4b1c      	ldr	r3, [pc, #112]	; (8004988 <HAL_UART_MspInit+0x230>)
 8004918:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800491c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800491e:	4b1a      	ldr	r3, [pc, #104]	; (8004988 <HAL_UART_MspInit+0x230>)
 8004920:	2200      	movs	r2, #0
 8004922:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004924:	4b18      	ldr	r3, [pc, #96]	; (8004988 <HAL_UART_MspInit+0x230>)
 8004926:	2200      	movs	r2, #0
 8004928:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800492a:	4b17      	ldr	r3, [pc, #92]	; (8004988 <HAL_UART_MspInit+0x230>)
 800492c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004930:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004932:	4b15      	ldr	r3, [pc, #84]	; (8004988 <HAL_UART_MspInit+0x230>)
 8004934:	2200      	movs	r2, #0
 8004936:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004938:	4b13      	ldr	r3, [pc, #76]	; (8004988 <HAL_UART_MspInit+0x230>)
 800493a:	2200      	movs	r2, #0
 800493c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800493e:	4812      	ldr	r0, [pc, #72]	; (8004988 <HAL_UART_MspInit+0x230>)
 8004940:	f000 fac8 	bl	8004ed4 <HAL_DMA_Init>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d001      	beq.n	800494e <HAL_UART_MspInit+0x1f6>
      Error_Handler();
 800494a:	f7fe ffbd 	bl	80038c8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a0d      	ldr	r2, [pc, #52]	; (8004988 <HAL_UART_MspInit+0x230>)
 8004952:	635a      	str	r2, [r3, #52]	; 0x34
 8004954:	4a0c      	ldr	r2, [pc, #48]	; (8004988 <HAL_UART_MspInit+0x230>)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6393      	str	r3, [r2, #56]	; 0x38
}
 800495a:	bf00      	nop
 800495c:	3738      	adds	r7, #56	; 0x38
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	40011000 	.word	0x40011000
 8004968:	40023800 	.word	0x40023800
 800496c:	40020000 	.word	0x40020000
 8004970:	40004400 	.word	0x40004400
 8004974:	40020c00 	.word	0x40020c00
 8004978:	20000258 	.word	0x20000258
 800497c:	40026088 	.word	0x40026088
 8004980:	40004800 	.word	0x40004800
 8004984:	40020800 	.word	0x40020800
 8004988:	2000034c 	.word	0x2000034c
 800498c:	40026028 	.word	0x40026028

08004990 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004990:	b480      	push	{r7}
 8004992:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004994:	bf00      	nop
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr

0800499e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800499e:	b480      	push	{r7}
 80049a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80049a2:	e7fe      	b.n	80049a2 <HardFault_Handler+0x4>

080049a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80049a4:	b480      	push	{r7}
 80049a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80049a8:	e7fe      	b.n	80049a8 <MemManage_Handler+0x4>

080049aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80049aa:	b480      	push	{r7}
 80049ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80049ae:	e7fe      	b.n	80049ae <BusFault_Handler+0x4>

080049b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80049b0:	b480      	push	{r7}
 80049b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80049b4:	e7fe      	b.n	80049b4 <UsageFault_Handler+0x4>

080049b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80049b6:	b480      	push	{r7}
 80049b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80049ba:	bf00      	nop
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80049c4:	b480      	push	{r7}
 80049c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80049c8:	bf00      	nop
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr

080049d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80049d2:	b480      	push	{r7}
 80049d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80049d6:	bf00      	nop
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	HAL_IncTick();
 80049e4:	f000 f922 	bl	8004c2c <HAL_IncTick>
  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80049e8:	bf00      	nop
 80049ea:	bd80      	pop	{r7, pc}

080049ec <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80049f0:	2008      	movs	r0, #8
 80049f2:	f000 ff77 	bl	80058e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80049f6:	bf00      	nop
 80049f8:	bd80      	pop	{r7, pc}
	...

080049fc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004a00:	4802      	ldr	r0, [pc, #8]	; (8004a0c <DMA1_Stream1_IRQHandler+0x10>)
 8004a02:	f000 fb6d 	bl	80050e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004a06:	bf00      	nop
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	2000034c 	.word	0x2000034c

08004a10 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004a14:	4802      	ldr	r0, [pc, #8]	; (8004a20 <DMA1_Stream5_IRQHandler+0x10>)
 8004a16:	f000 fb63 	bl	80050e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004a1a:	bf00      	nop
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	20000258 	.word	0x20000258

08004a24 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8004a28:	4802      	ldr	r0, [pc, #8]	; (8004a34 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8004a2a:	f003 f9a5 	bl	8007d78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8004a2e:	bf00      	nop
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	20000b60 	.word	0x20000b60

08004a38 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8004a3c:	4802      	ldr	r0, [pc, #8]	; (8004a48 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004a3e:	f003 f99b 	bl	8007d78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004a42:	bf00      	nop
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	20000460 	.word	0x20000460

08004a4c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004a50:	4802      	ldr	r0, [pc, #8]	; (8004a5c <TIM2_IRQHandler+0x10>)
 8004a52:	f003 f991 	bl	8007d78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004a56:	bf00      	nop
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	20000bc4 	.word	0x20000bc4

08004a60 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004a64:	4802      	ldr	r0, [pc, #8]	; (8004a70 <TIM3_IRQHandler+0x10>)
 8004a66:	f003 f987 	bl	8007d78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004a6a:	bf00      	nop
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	20000734 	.word	0x20000734

08004a74 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004a78:	4802      	ldr	r0, [pc, #8]	; (8004a84 <TIM4_IRQHandler+0x10>)
 8004a7a:	f003 f97d 	bl	8007d78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004a7e:	bf00      	nop
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	2000030c 	.word	0x2000030c

08004a88 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004a8c:	4802      	ldr	r0, [pc, #8]	; (8004a98 <TIM5_IRQHandler+0x10>)
 8004a8e:	f003 f973 	bl	8007d78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004a92:	bf00      	nop
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	200006d8 	.word	0x200006d8

08004a9c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004aa0:	4802      	ldr	r0, [pc, #8]	; (8004aac <TIM7_IRQHandler+0x10>)
 8004aa2:	f003 f969 	bl	8007d78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004aa6:	bf00      	nop
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	20000ca4 	.word	0x20000ca4

08004ab0 <_sbrk>:
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	4b11      	ldr	r3, [pc, #68]	; (8004b00 <_sbrk+0x50>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d102      	bne.n	8004ac6 <_sbrk+0x16>
 8004ac0:	4b0f      	ldr	r3, [pc, #60]	; (8004b00 <_sbrk+0x50>)
 8004ac2:	4a10      	ldr	r2, [pc, #64]	; (8004b04 <_sbrk+0x54>)
 8004ac4:	601a      	str	r2, [r3, #0]
 8004ac6:	4b0e      	ldr	r3, [pc, #56]	; (8004b00 <_sbrk+0x50>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	60fb      	str	r3, [r7, #12]
 8004acc:	4b0c      	ldr	r3, [pc, #48]	; (8004b00 <_sbrk+0x50>)
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	466a      	mov	r2, sp
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d907      	bls.n	8004aea <_sbrk+0x3a>
 8004ada:	f004 ff9b 	bl	8009a14 <__errno>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	230c      	movs	r3, #12
 8004ae2:	6013      	str	r3, [r2, #0]
 8004ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8004ae8:	e006      	b.n	8004af8 <_sbrk+0x48>
 8004aea:	4b05      	ldr	r3, [pc, #20]	; (8004b00 <_sbrk+0x50>)
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4413      	add	r3, r2
 8004af2:	4a03      	ldr	r2, [pc, #12]	; (8004b00 <_sbrk+0x50>)
 8004af4:	6013      	str	r3, [r2, #0]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	4618      	mov	r0, r3
 8004afa:	3710      	adds	r7, #16
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	2000021c 	.word	0x2000021c
 8004b04:	20000d48 	.word	0x20000d48

08004b08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004b0c:	4b08      	ldr	r3, [pc, #32]	; (8004b30 <SystemInit+0x28>)
 8004b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b12:	4a07      	ldr	r2, [pc, #28]	; (8004b30 <SystemInit+0x28>)
 8004b14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004b1c:	4b04      	ldr	r3, [pc, #16]	; (8004b30 <SystemInit+0x28>)
 8004b1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004b22:	609a      	str	r2, [r3, #8]
#endif
}
 8004b24:	bf00      	nop
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	e000ed00 	.word	0xe000ed00

08004b34 <Reset_Handler>:
 8004b34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004b6c <LoopFillZerobss+0x14>
 8004b38:	2100      	movs	r1, #0
 8004b3a:	e003      	b.n	8004b44 <LoopCopyDataInit>

08004b3c <CopyDataInit>:
 8004b3c:	4b0c      	ldr	r3, [pc, #48]	; (8004b70 <LoopFillZerobss+0x18>)
 8004b3e:	585b      	ldr	r3, [r3, r1]
 8004b40:	5043      	str	r3, [r0, r1]
 8004b42:	3104      	adds	r1, #4

08004b44 <LoopCopyDataInit>:
 8004b44:	480b      	ldr	r0, [pc, #44]	; (8004b74 <LoopFillZerobss+0x1c>)
 8004b46:	4b0c      	ldr	r3, [pc, #48]	; (8004b78 <LoopFillZerobss+0x20>)
 8004b48:	1842      	adds	r2, r0, r1
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d3f6      	bcc.n	8004b3c <CopyDataInit>
 8004b4e:	4a0b      	ldr	r2, [pc, #44]	; (8004b7c <LoopFillZerobss+0x24>)
 8004b50:	e002      	b.n	8004b58 <LoopFillZerobss>

08004b52 <FillZerobss>:
 8004b52:	2300      	movs	r3, #0
 8004b54:	f842 3b04 	str.w	r3, [r2], #4

08004b58 <LoopFillZerobss>:
 8004b58:	4b09      	ldr	r3, [pc, #36]	; (8004b80 <LoopFillZerobss+0x28>)
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d3f9      	bcc.n	8004b52 <FillZerobss>
 8004b5e:	f7ff ffd3 	bl	8004b08 <SystemInit>
 8004b62:	f004 ff5d 	bl	8009a20 <__libc_init_array>
 8004b66:	f7fd f887 	bl	8001c78 <main>
 8004b6a:	4770      	bx	lr
 8004b6c:	20020000 	.word	0x20020000
 8004b70:	0800d3a8 	.word	0x0800d3a8
 8004b74:	20000000 	.word	0x20000000
 8004b78:	200001e0 	.word	0x200001e0
 8004b7c:	200001e0 	.word	0x200001e0
 8004b80:	20000d48 	.word	0x20000d48

08004b84 <ADC_IRQHandler>:
 8004b84:	e7fe      	b.n	8004b84 <ADC_IRQHandler>
	...

08004b88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004b8c:	4b0e      	ldr	r3, [pc, #56]	; (8004bc8 <HAL_Init+0x40>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a0d      	ldr	r2, [pc, #52]	; (8004bc8 <HAL_Init+0x40>)
 8004b92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004b98:	4b0b      	ldr	r3, [pc, #44]	; (8004bc8 <HAL_Init+0x40>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a0a      	ldr	r2, [pc, #40]	; (8004bc8 <HAL_Init+0x40>)
 8004b9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ba2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004ba4:	4b08      	ldr	r3, [pc, #32]	; (8004bc8 <HAL_Init+0x40>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a07      	ldr	r2, [pc, #28]	; (8004bc8 <HAL_Init+0x40>)
 8004baa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004bb0:	2003      	movs	r0, #3
 8004bb2:	f000 f94d 	bl	8004e50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004bb6:	2000      	movs	r0, #0
 8004bb8:	f000 f808 	bl	8004bcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004bbc:	f7ff fb30 	bl	8004220 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	40023c00 	.word	0x40023c00

08004bcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004bd4:	4b12      	ldr	r3, [pc, #72]	; (8004c20 <HAL_InitTick+0x54>)
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	4b12      	ldr	r3, [pc, #72]	; (8004c24 <HAL_InitTick+0x58>)
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	4619      	mov	r1, r3
 8004bde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004be2:	fbb3 f3f1 	udiv	r3, r3, r1
 8004be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bea:	4618      	mov	r0, r3
 8004bec:	f000 f965 	bl	8004eba <HAL_SYSTICK_Config>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d001      	beq.n	8004bfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e00e      	b.n	8004c18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2b0f      	cmp	r3, #15
 8004bfe:	d80a      	bhi.n	8004c16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004c00:	2200      	movs	r2, #0
 8004c02:	6879      	ldr	r1, [r7, #4]
 8004c04:	f04f 30ff 	mov.w	r0, #4294967295
 8004c08:	f000 f92d 	bl	8004e66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004c0c:	4a06      	ldr	r2, [pc, #24]	; (8004c28 <HAL_InitTick+0x5c>)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004c12:	2300      	movs	r3, #0
 8004c14:	e000      	b.n	8004c18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3708      	adds	r7, #8
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	20000000 	.word	0x20000000
 8004c24:	20000008 	.word	0x20000008
 8004c28:	20000004 	.word	0x20000004

08004c2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004c30:	4b06      	ldr	r3, [pc, #24]	; (8004c4c <HAL_IncTick+0x20>)
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	461a      	mov	r2, r3
 8004c36:	4b06      	ldr	r3, [pc, #24]	; (8004c50 <HAL_IncTick+0x24>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	4a04      	ldr	r2, [pc, #16]	; (8004c50 <HAL_IncTick+0x24>)
 8004c3e:	6013      	str	r3, [r2, #0]
}
 8004c40:	bf00      	nop
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	20000008 	.word	0x20000008
 8004c50:	20000d40 	.word	0x20000d40

08004c54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c54:	b480      	push	{r7}
 8004c56:	af00      	add	r7, sp, #0
  return uwTick;
 8004c58:	4b03      	ldr	r3, [pc, #12]	; (8004c68 <HAL_GetTick+0x14>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop
 8004c68:	20000d40 	.word	0x20000d40

08004c6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004c74:	f7ff ffee 	bl	8004c54 <HAL_GetTick>
 8004c78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c84:	d005      	beq.n	8004c92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004c86:	4b09      	ldr	r3, [pc, #36]	; (8004cac <HAL_Delay+0x40>)
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	4413      	add	r3, r2
 8004c90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004c92:	bf00      	nop
 8004c94:	f7ff ffde 	bl	8004c54 <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	68fa      	ldr	r2, [r7, #12]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d8f7      	bhi.n	8004c94 <HAL_Delay+0x28>
  {
  }
}
 8004ca4:	bf00      	nop
 8004ca6:	3710      	adds	r7, #16
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	20000008 	.word	0x20000008

08004cb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f003 0307 	and.w	r3, r3, #7
 8004cbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004cc0:	4b0c      	ldr	r3, [pc, #48]	; (8004cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004cc6:	68ba      	ldr	r2, [r7, #8]
 8004cc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ccc:	4013      	ands	r3, r2
 8004cce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004cd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004cdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ce0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ce2:	4a04      	ldr	r2, [pc, #16]	; (8004cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	60d3      	str	r3, [r2, #12]
}
 8004ce8:	bf00      	nop
 8004cea:	3714      	adds	r7, #20
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr
 8004cf4:	e000ed00 	.word	0xe000ed00

08004cf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004cfc:	4b04      	ldr	r3, [pc, #16]	; (8004d10 <__NVIC_GetPriorityGrouping+0x18>)
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	0a1b      	lsrs	r3, r3, #8
 8004d02:	f003 0307 	and.w	r3, r3, #7
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr
 8004d10:	e000ed00 	.word	0xe000ed00

08004d14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	db0b      	blt.n	8004d3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d26:	79fb      	ldrb	r3, [r7, #7]
 8004d28:	f003 021f 	and.w	r2, r3, #31
 8004d2c:	4907      	ldr	r1, [pc, #28]	; (8004d4c <__NVIC_EnableIRQ+0x38>)
 8004d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d32:	095b      	lsrs	r3, r3, #5
 8004d34:	2001      	movs	r0, #1
 8004d36:	fa00 f202 	lsl.w	r2, r0, r2
 8004d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004d3e:	bf00      	nop
 8004d40:	370c      	adds	r7, #12
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr
 8004d4a:	bf00      	nop
 8004d4c:	e000e100 	.word	0xe000e100

08004d50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	4603      	mov	r3, r0
 8004d58:	6039      	str	r1, [r7, #0]
 8004d5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	db0a      	blt.n	8004d7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	b2da      	uxtb	r2, r3
 8004d68:	490c      	ldr	r1, [pc, #48]	; (8004d9c <__NVIC_SetPriority+0x4c>)
 8004d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d6e:	0112      	lsls	r2, r2, #4
 8004d70:	b2d2      	uxtb	r2, r2
 8004d72:	440b      	add	r3, r1
 8004d74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d78:	e00a      	b.n	8004d90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	b2da      	uxtb	r2, r3
 8004d7e:	4908      	ldr	r1, [pc, #32]	; (8004da0 <__NVIC_SetPriority+0x50>)
 8004d80:	79fb      	ldrb	r3, [r7, #7]
 8004d82:	f003 030f 	and.w	r3, r3, #15
 8004d86:	3b04      	subs	r3, #4
 8004d88:	0112      	lsls	r2, r2, #4
 8004d8a:	b2d2      	uxtb	r2, r2
 8004d8c:	440b      	add	r3, r1
 8004d8e:	761a      	strb	r2, [r3, #24]
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr
 8004d9c:	e000e100 	.word	0xe000e100
 8004da0:	e000ed00 	.word	0xe000ed00

08004da4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b089      	sub	sp, #36	; 0x24
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f003 0307 	and.w	r3, r3, #7
 8004db6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	f1c3 0307 	rsb	r3, r3, #7
 8004dbe:	2b04      	cmp	r3, #4
 8004dc0:	bf28      	it	cs
 8004dc2:	2304      	movcs	r3, #4
 8004dc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	3304      	adds	r3, #4
 8004dca:	2b06      	cmp	r3, #6
 8004dcc:	d902      	bls.n	8004dd4 <NVIC_EncodePriority+0x30>
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	3b03      	subs	r3, #3
 8004dd2:	e000      	b.n	8004dd6 <NVIC_EncodePriority+0x32>
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	fa02 f303 	lsl.w	r3, r2, r3
 8004de2:	43da      	mvns	r2, r3
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	401a      	ands	r2, r3
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004dec:	f04f 31ff 	mov.w	r1, #4294967295
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	fa01 f303 	lsl.w	r3, r1, r3
 8004df6:	43d9      	mvns	r1, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004dfc:	4313      	orrs	r3, r2
         );
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3724      	adds	r7, #36	; 0x24
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
	...

08004e0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	3b01      	subs	r3, #1
 8004e18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e1c:	d301      	bcc.n	8004e22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e00f      	b.n	8004e42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e22:	4a0a      	ldr	r2, [pc, #40]	; (8004e4c <SysTick_Config+0x40>)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	3b01      	subs	r3, #1
 8004e28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e2a:	210f      	movs	r1, #15
 8004e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e30:	f7ff ff8e 	bl	8004d50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e34:	4b05      	ldr	r3, [pc, #20]	; (8004e4c <SysTick_Config+0x40>)
 8004e36:	2200      	movs	r2, #0
 8004e38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e3a:	4b04      	ldr	r3, [pc, #16]	; (8004e4c <SysTick_Config+0x40>)
 8004e3c:	2207      	movs	r2, #7
 8004e3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3708      	adds	r7, #8
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	e000e010 	.word	0xe000e010

08004e50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f7ff ff29 	bl	8004cb0 <__NVIC_SetPriorityGrouping>
}
 8004e5e:	bf00      	nop
 8004e60:	3708      	adds	r7, #8
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004e66:	b580      	push	{r7, lr}
 8004e68:	b086      	sub	sp, #24
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	60b9      	str	r1, [r7, #8]
 8004e70:	607a      	str	r2, [r7, #4]
 8004e72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004e74:	2300      	movs	r3, #0
 8004e76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004e78:	f7ff ff3e 	bl	8004cf8 <__NVIC_GetPriorityGrouping>
 8004e7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	68b9      	ldr	r1, [r7, #8]
 8004e82:	6978      	ldr	r0, [r7, #20]
 8004e84:	f7ff ff8e 	bl	8004da4 <NVIC_EncodePriority>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e8e:	4611      	mov	r1, r2
 8004e90:	4618      	mov	r0, r3
 8004e92:	f7ff ff5d 	bl	8004d50 <__NVIC_SetPriority>
}
 8004e96:	bf00      	nop
 8004e98:	3718      	adds	r7, #24
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}

08004e9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e9e:	b580      	push	{r7, lr}
 8004ea0:	b082      	sub	sp, #8
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eac:	4618      	mov	r0, r3
 8004eae:	f7ff ff31 	bl	8004d14 <__NVIC_EnableIRQ>
}
 8004eb2:	bf00      	nop
 8004eb4:	3708      	adds	r7, #8
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004eba:	b580      	push	{r7, lr}
 8004ebc:	b082      	sub	sp, #8
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f7ff ffa2 	bl	8004e0c <SysTick_Config>
 8004ec8:	4603      	mov	r3, r0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3708      	adds	r7, #8
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
	...

08004ed4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b086      	sub	sp, #24
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004edc:	2300      	movs	r3, #0
 8004ede:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004ee0:	f7ff feb8 	bl	8004c54 <HAL_GetTick>
 8004ee4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d101      	bne.n	8004ef0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e099      	b.n	8005024 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2202      	movs	r2, #2
 8004efc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f022 0201 	bic.w	r2, r2, #1
 8004f0e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f10:	e00f      	b.n	8004f32 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f12:	f7ff fe9f 	bl	8004c54 <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	2b05      	cmp	r3, #5
 8004f1e:	d908      	bls.n	8004f32 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2220      	movs	r2, #32
 8004f24:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2203      	movs	r2, #3
 8004f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e078      	b.n	8005024 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0301 	and.w	r3, r3, #1
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d1e8      	bne.n	8004f12 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004f48:	697a      	ldr	r2, [r7, #20]
 8004f4a:	4b38      	ldr	r3, [pc, #224]	; (800502c <HAL_DMA_Init+0x158>)
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685a      	ldr	r2, [r3, #4]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	691b      	ldr	r3, [r3, #16]
 8004f64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a1b      	ldr	r3, [r3, #32]
 8004f7c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f88:	2b04      	cmp	r3, #4
 8004f8a:	d107      	bne.n	8004f9c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f94:	4313      	orrs	r3, r2
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	697a      	ldr	r2, [r7, #20]
 8004fa2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	f023 0307 	bic.w	r3, r3, #7
 8004fb2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb8:	697a      	ldr	r2, [r7, #20]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc2:	2b04      	cmp	r3, #4
 8004fc4:	d117      	bne.n	8004ff6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d00e      	beq.n	8004ff6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f000 fa6f 	bl	80054bc <DMA_CheckFifoParam>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d008      	beq.n	8004ff6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2240      	movs	r2, #64	; 0x40
 8004fe8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2201      	movs	r2, #1
 8004fee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e016      	b.n	8005024 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 fa26 	bl	8005450 <DMA_CalcBaseAndBitshift>
 8005004:	4603      	mov	r3, r0
 8005006:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800500c:	223f      	movs	r2, #63	; 0x3f
 800500e:	409a      	lsls	r2, r3
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2201      	movs	r2, #1
 800501e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	3718      	adds	r7, #24
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}
 800502c:	f010803f 	.word	0xf010803f

08005030 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b086      	sub	sp, #24
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	607a      	str	r2, [r7, #4]
 800503c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800503e:	2300      	movs	r3, #0
 8005040:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005046:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800504e:	2b01      	cmp	r3, #1
 8005050:	d101      	bne.n	8005056 <HAL_DMA_Start_IT+0x26>
 8005052:	2302      	movs	r3, #2
 8005054:	e040      	b.n	80050d8 <HAL_DMA_Start_IT+0xa8>
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2201      	movs	r2, #1
 800505a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005064:	b2db      	uxtb	r3, r3
 8005066:	2b01      	cmp	r3, #1
 8005068:	d12f      	bne.n	80050ca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2202      	movs	r2, #2
 800506e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2200      	movs	r2, #0
 8005076:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	68b9      	ldr	r1, [r7, #8]
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	f000 f9b8 	bl	80053f4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005088:	223f      	movs	r2, #63	; 0x3f
 800508a:	409a      	lsls	r2, r3
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f042 0216 	orr.w	r2, r2, #22
 800509e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d007      	beq.n	80050b8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f042 0208 	orr.w	r2, r2, #8
 80050b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f042 0201 	orr.w	r2, r2, #1
 80050c6:	601a      	str	r2, [r3, #0]
 80050c8:	e005      	b.n	80050d6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80050d2:	2302      	movs	r3, #2
 80050d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80050d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3718      	adds	r7, #24
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b086      	sub	sp, #24
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80050e8:	2300      	movs	r3, #0
 80050ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80050ec:	4b92      	ldr	r3, [pc, #584]	; (8005338 <HAL_DMA_IRQHandler+0x258>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a92      	ldr	r2, [pc, #584]	; (800533c <HAL_DMA_IRQHandler+0x25c>)
 80050f2:	fba2 2303 	umull	r2, r3, r2, r3
 80050f6:	0a9b      	lsrs	r3, r3, #10
 80050f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800510a:	2208      	movs	r2, #8
 800510c:	409a      	lsls	r2, r3
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	4013      	ands	r3, r2
 8005112:	2b00      	cmp	r3, #0
 8005114:	d01a      	beq.n	800514c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0304 	and.w	r3, r3, #4
 8005120:	2b00      	cmp	r3, #0
 8005122:	d013      	beq.n	800514c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f022 0204 	bic.w	r2, r2, #4
 8005132:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005138:	2208      	movs	r2, #8
 800513a:	409a      	lsls	r2, r3
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005144:	f043 0201 	orr.w	r2, r3, #1
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005150:	2201      	movs	r2, #1
 8005152:	409a      	lsls	r2, r3
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	4013      	ands	r3, r2
 8005158:	2b00      	cmp	r3, #0
 800515a:	d012      	beq.n	8005182 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	695b      	ldr	r3, [r3, #20]
 8005162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00b      	beq.n	8005182 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800516e:	2201      	movs	r2, #1
 8005170:	409a      	lsls	r2, r3
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800517a:	f043 0202 	orr.w	r2, r3, #2
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005186:	2204      	movs	r2, #4
 8005188:	409a      	lsls	r2, r3
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	4013      	ands	r3, r2
 800518e:	2b00      	cmp	r3, #0
 8005190:	d012      	beq.n	80051b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0302 	and.w	r3, r3, #2
 800519c:	2b00      	cmp	r3, #0
 800519e:	d00b      	beq.n	80051b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051a4:	2204      	movs	r2, #4
 80051a6:	409a      	lsls	r2, r3
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b0:	f043 0204 	orr.w	r2, r3, #4
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051bc:	2210      	movs	r2, #16
 80051be:	409a      	lsls	r2, r3
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	4013      	ands	r3, r2
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d043      	beq.n	8005250 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0308 	and.w	r3, r3, #8
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d03c      	beq.n	8005250 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051da:	2210      	movs	r2, #16
 80051dc:	409a      	lsls	r2, r3
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d018      	beq.n	8005222 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d108      	bne.n	8005210 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005202:	2b00      	cmp	r3, #0
 8005204:	d024      	beq.n	8005250 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	4798      	blx	r3
 800520e:	e01f      	b.n	8005250 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005214:	2b00      	cmp	r3, #0
 8005216:	d01b      	beq.n	8005250 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	4798      	blx	r3
 8005220:	e016      	b.n	8005250 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800522c:	2b00      	cmp	r3, #0
 800522e:	d107      	bne.n	8005240 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f022 0208 	bic.w	r2, r2, #8
 800523e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005244:	2b00      	cmp	r3, #0
 8005246:	d003      	beq.n	8005250 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005254:	2220      	movs	r2, #32
 8005256:	409a      	lsls	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	4013      	ands	r3, r2
 800525c:	2b00      	cmp	r3, #0
 800525e:	f000 808e 	beq.w	800537e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0310 	and.w	r3, r3, #16
 800526c:	2b00      	cmp	r3, #0
 800526e:	f000 8086 	beq.w	800537e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005276:	2220      	movs	r2, #32
 8005278:	409a      	lsls	r2, r3
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005284:	b2db      	uxtb	r3, r3
 8005286:	2b05      	cmp	r3, #5
 8005288:	d136      	bne.n	80052f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f022 0216 	bic.w	r2, r2, #22
 8005298:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	695a      	ldr	r2, [r3, #20]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d103      	bne.n	80052ba <HAL_DMA_IRQHandler+0x1da>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d007      	beq.n	80052ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f022 0208 	bic.w	r2, r2, #8
 80052c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052ce:	223f      	movs	r2, #63	; 0x3f
 80052d0:	409a      	lsls	r2, r3
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d07d      	beq.n	80053ea <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	4798      	blx	r3
        }
        return;
 80052f6:	e078      	b.n	80053ea <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d01c      	beq.n	8005340 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005310:	2b00      	cmp	r3, #0
 8005312:	d108      	bne.n	8005326 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005318:	2b00      	cmp	r3, #0
 800531a:	d030      	beq.n	800537e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	4798      	blx	r3
 8005324:	e02b      	b.n	800537e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800532a:	2b00      	cmp	r3, #0
 800532c:	d027      	beq.n	800537e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	4798      	blx	r3
 8005336:	e022      	b.n	800537e <HAL_DMA_IRQHandler+0x29e>
 8005338:	20000000 	.word	0x20000000
 800533c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800534a:	2b00      	cmp	r3, #0
 800534c:	d10f      	bne.n	800536e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f022 0210 	bic.w	r2, r2, #16
 800535c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2201      	movs	r2, #1
 800536a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005372:	2b00      	cmp	r3, #0
 8005374:	d003      	beq.n	800537e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005382:	2b00      	cmp	r3, #0
 8005384:	d032      	beq.n	80053ec <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800538a:	f003 0301 	and.w	r3, r3, #1
 800538e:	2b00      	cmp	r3, #0
 8005390:	d022      	beq.n	80053d8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2205      	movs	r2, #5
 8005396:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f022 0201 	bic.w	r2, r2, #1
 80053a8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	3301      	adds	r3, #1
 80053ae:	60bb      	str	r3, [r7, #8]
 80053b0:	697a      	ldr	r2, [r7, #20]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d307      	bcc.n	80053c6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0301 	and.w	r3, r3, #1
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d1f2      	bne.n	80053aa <HAL_DMA_IRQHandler+0x2ca>
 80053c4:	e000      	b.n	80053c8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80053c6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d005      	beq.n	80053ec <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	4798      	blx	r3
 80053e8:	e000      	b.n	80053ec <HAL_DMA_IRQHandler+0x30c>
        return;
 80053ea:	bf00      	nop
    }
  }
}
 80053ec:	3718      	adds	r7, #24
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop

080053f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	607a      	str	r2, [r7, #4]
 8005400:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005410:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	683a      	ldr	r2, [r7, #0]
 8005418:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	2b40      	cmp	r3, #64	; 0x40
 8005420:	d108      	bne.n	8005434 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	68ba      	ldr	r2, [r7, #8]
 8005430:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005432:	e007      	b.n	8005444 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68ba      	ldr	r2, [r7, #8]
 800543a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	60da      	str	r2, [r3, #12]
}
 8005444:	bf00      	nop
 8005446:	3714      	adds	r7, #20
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005450:	b480      	push	{r7}
 8005452:	b085      	sub	sp, #20
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	b2db      	uxtb	r3, r3
 800545e:	3b10      	subs	r3, #16
 8005460:	4a14      	ldr	r2, [pc, #80]	; (80054b4 <DMA_CalcBaseAndBitshift+0x64>)
 8005462:	fba2 2303 	umull	r2, r3, r2, r3
 8005466:	091b      	lsrs	r3, r3, #4
 8005468:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800546a:	4a13      	ldr	r2, [pc, #76]	; (80054b8 <DMA_CalcBaseAndBitshift+0x68>)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	4413      	add	r3, r2
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	461a      	mov	r2, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2b03      	cmp	r3, #3
 800547c:	d909      	bls.n	8005492 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005486:	f023 0303 	bic.w	r3, r3, #3
 800548a:	1d1a      	adds	r2, r3, #4
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	659a      	str	r2, [r3, #88]	; 0x58
 8005490:	e007      	b.n	80054a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800549a:	f023 0303 	bic.w	r3, r3, #3
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3714      	adds	r7, #20
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop
 80054b4:	aaaaaaab 	.word	0xaaaaaaab
 80054b8:	0800cf54 	.word	0x0800cf54

080054bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80054bc:	b480      	push	{r7}
 80054be:	b085      	sub	sp, #20
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054c4:	2300      	movs	r3, #0
 80054c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d11f      	bne.n	8005516 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	2b03      	cmp	r3, #3
 80054da:	d855      	bhi.n	8005588 <DMA_CheckFifoParam+0xcc>
 80054dc:	a201      	add	r2, pc, #4	; (adr r2, 80054e4 <DMA_CheckFifoParam+0x28>)
 80054de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e2:	bf00      	nop
 80054e4:	080054f5 	.word	0x080054f5
 80054e8:	08005507 	.word	0x08005507
 80054ec:	080054f5 	.word	0x080054f5
 80054f0:	08005589 	.word	0x08005589
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d045      	beq.n	800558c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005504:	e042      	b.n	800558c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800550a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800550e:	d13f      	bne.n	8005590 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005514:	e03c      	b.n	8005590 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	699b      	ldr	r3, [r3, #24]
 800551a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800551e:	d121      	bne.n	8005564 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	2b03      	cmp	r3, #3
 8005524:	d836      	bhi.n	8005594 <DMA_CheckFifoParam+0xd8>
 8005526:	a201      	add	r2, pc, #4	; (adr r2, 800552c <DMA_CheckFifoParam+0x70>)
 8005528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800552c:	0800553d 	.word	0x0800553d
 8005530:	08005543 	.word	0x08005543
 8005534:	0800553d 	.word	0x0800553d
 8005538:	08005555 	.word	0x08005555
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	73fb      	strb	r3, [r7, #15]
      break;
 8005540:	e02f      	b.n	80055a2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005546:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800554a:	2b00      	cmp	r3, #0
 800554c:	d024      	beq.n	8005598 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005552:	e021      	b.n	8005598 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005558:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800555c:	d11e      	bne.n	800559c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005562:	e01b      	b.n	800559c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	2b02      	cmp	r3, #2
 8005568:	d902      	bls.n	8005570 <DMA_CheckFifoParam+0xb4>
 800556a:	2b03      	cmp	r3, #3
 800556c:	d003      	beq.n	8005576 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800556e:	e018      	b.n	80055a2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	73fb      	strb	r3, [r7, #15]
      break;
 8005574:	e015      	b.n	80055a2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800557a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00e      	beq.n	80055a0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	73fb      	strb	r3, [r7, #15]
      break;
 8005586:	e00b      	b.n	80055a0 <DMA_CheckFifoParam+0xe4>
      break;
 8005588:	bf00      	nop
 800558a:	e00a      	b.n	80055a2 <DMA_CheckFifoParam+0xe6>
      break;
 800558c:	bf00      	nop
 800558e:	e008      	b.n	80055a2 <DMA_CheckFifoParam+0xe6>
      break;
 8005590:	bf00      	nop
 8005592:	e006      	b.n	80055a2 <DMA_CheckFifoParam+0xe6>
      break;
 8005594:	bf00      	nop
 8005596:	e004      	b.n	80055a2 <DMA_CheckFifoParam+0xe6>
      break;
 8005598:	bf00      	nop
 800559a:	e002      	b.n	80055a2 <DMA_CheckFifoParam+0xe6>
      break;   
 800559c:	bf00      	nop
 800559e:	e000      	b.n	80055a2 <DMA_CheckFifoParam+0xe6>
      break;
 80055a0:	bf00      	nop
    }
  } 
  
  return status; 
 80055a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3714      	adds	r7, #20
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b089      	sub	sp, #36	; 0x24
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80055ba:	2300      	movs	r3, #0
 80055bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80055be:	2300      	movs	r3, #0
 80055c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80055c2:	2300      	movs	r3, #0
 80055c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80055c6:	2300      	movs	r3, #0
 80055c8:	61fb      	str	r3, [r7, #28]
 80055ca:	e16b      	b.n	80058a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80055cc:	2201      	movs	r2, #1
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	fa02 f303 	lsl.w	r3, r2, r3
 80055d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	4013      	ands	r3, r2
 80055de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80055e0:	693a      	ldr	r2, [r7, #16]
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	f040 815a 	bne.w	800589e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d00b      	beq.n	800560a <HAL_GPIO_Init+0x5a>
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d007      	beq.n	800560a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80055fe:	2b11      	cmp	r3, #17
 8005600:	d003      	beq.n	800560a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	2b12      	cmp	r3, #18
 8005608:	d130      	bne.n	800566c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	005b      	lsls	r3, r3, #1
 8005614:	2203      	movs	r2, #3
 8005616:	fa02 f303 	lsl.w	r3, r2, r3
 800561a:	43db      	mvns	r3, r3
 800561c:	69ba      	ldr	r2, [r7, #24]
 800561e:	4013      	ands	r3, r2
 8005620:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	68da      	ldr	r2, [r3, #12]
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	005b      	lsls	r3, r3, #1
 800562a:	fa02 f303 	lsl.w	r3, r2, r3
 800562e:	69ba      	ldr	r2, [r7, #24]
 8005630:	4313      	orrs	r3, r2
 8005632:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	69ba      	ldr	r2, [r7, #24]
 8005638:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005640:	2201      	movs	r2, #1
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	fa02 f303 	lsl.w	r3, r2, r3
 8005648:	43db      	mvns	r3, r3
 800564a:	69ba      	ldr	r2, [r7, #24]
 800564c:	4013      	ands	r3, r2
 800564e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	091b      	lsrs	r3, r3, #4
 8005656:	f003 0201 	and.w	r2, r3, #1
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	fa02 f303 	lsl.w	r3, r2, r3
 8005660:	69ba      	ldr	r2, [r7, #24]
 8005662:	4313      	orrs	r3, r2
 8005664:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	69ba      	ldr	r2, [r7, #24]
 800566a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	005b      	lsls	r3, r3, #1
 8005676:	2203      	movs	r2, #3
 8005678:	fa02 f303 	lsl.w	r3, r2, r3
 800567c:	43db      	mvns	r3, r3
 800567e:	69ba      	ldr	r2, [r7, #24]
 8005680:	4013      	ands	r3, r2
 8005682:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	689a      	ldr	r2, [r3, #8]
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	005b      	lsls	r3, r3, #1
 800568c:	fa02 f303 	lsl.w	r3, r2, r3
 8005690:	69ba      	ldr	r2, [r7, #24]
 8005692:	4313      	orrs	r3, r2
 8005694:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	69ba      	ldr	r2, [r7, #24]
 800569a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	d003      	beq.n	80056ac <HAL_GPIO_Init+0xfc>
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	2b12      	cmp	r3, #18
 80056aa:	d123      	bne.n	80056f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	08da      	lsrs	r2, r3, #3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	3208      	adds	r2, #8
 80056b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	f003 0307 	and.w	r3, r3, #7
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	220f      	movs	r2, #15
 80056c4:	fa02 f303 	lsl.w	r3, r2, r3
 80056c8:	43db      	mvns	r3, r3
 80056ca:	69ba      	ldr	r2, [r7, #24]
 80056cc:	4013      	ands	r3, r2
 80056ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	691a      	ldr	r2, [r3, #16]
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	f003 0307 	and.w	r3, r3, #7
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	fa02 f303 	lsl.w	r3, r2, r3
 80056e0:	69ba      	ldr	r2, [r7, #24]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	08da      	lsrs	r2, r3, #3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	3208      	adds	r2, #8
 80056ee:	69b9      	ldr	r1, [r7, #24]
 80056f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	005b      	lsls	r3, r3, #1
 80056fe:	2203      	movs	r2, #3
 8005700:	fa02 f303 	lsl.w	r3, r2, r3
 8005704:	43db      	mvns	r3, r3
 8005706:	69ba      	ldr	r2, [r7, #24]
 8005708:	4013      	ands	r3, r2
 800570a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	f003 0203 	and.w	r2, r3, #3
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	005b      	lsls	r3, r3, #1
 8005718:	fa02 f303 	lsl.w	r3, r2, r3
 800571c:	69ba      	ldr	r2, [r7, #24]
 800571e:	4313      	orrs	r3, r2
 8005720:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	69ba      	ldr	r2, [r7, #24]
 8005726:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005730:	2b00      	cmp	r3, #0
 8005732:	f000 80b4 	beq.w	800589e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005736:	2300      	movs	r3, #0
 8005738:	60fb      	str	r3, [r7, #12]
 800573a:	4b5f      	ldr	r3, [pc, #380]	; (80058b8 <HAL_GPIO_Init+0x308>)
 800573c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800573e:	4a5e      	ldr	r2, [pc, #376]	; (80058b8 <HAL_GPIO_Init+0x308>)
 8005740:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005744:	6453      	str	r3, [r2, #68]	; 0x44
 8005746:	4b5c      	ldr	r3, [pc, #368]	; (80058b8 <HAL_GPIO_Init+0x308>)
 8005748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800574a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800574e:	60fb      	str	r3, [r7, #12]
 8005750:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005752:	4a5a      	ldr	r2, [pc, #360]	; (80058bc <HAL_GPIO_Init+0x30c>)
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	089b      	lsrs	r3, r3, #2
 8005758:	3302      	adds	r3, #2
 800575a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800575e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	f003 0303 	and.w	r3, r3, #3
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	220f      	movs	r2, #15
 800576a:	fa02 f303 	lsl.w	r3, r2, r3
 800576e:	43db      	mvns	r3, r3
 8005770:	69ba      	ldr	r2, [r7, #24]
 8005772:	4013      	ands	r3, r2
 8005774:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a51      	ldr	r2, [pc, #324]	; (80058c0 <HAL_GPIO_Init+0x310>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d02b      	beq.n	80057d6 <HAL_GPIO_Init+0x226>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a50      	ldr	r2, [pc, #320]	; (80058c4 <HAL_GPIO_Init+0x314>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d025      	beq.n	80057d2 <HAL_GPIO_Init+0x222>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a4f      	ldr	r2, [pc, #316]	; (80058c8 <HAL_GPIO_Init+0x318>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d01f      	beq.n	80057ce <HAL_GPIO_Init+0x21e>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a4e      	ldr	r2, [pc, #312]	; (80058cc <HAL_GPIO_Init+0x31c>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d019      	beq.n	80057ca <HAL_GPIO_Init+0x21a>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a4d      	ldr	r2, [pc, #308]	; (80058d0 <HAL_GPIO_Init+0x320>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d013      	beq.n	80057c6 <HAL_GPIO_Init+0x216>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a4c      	ldr	r2, [pc, #304]	; (80058d4 <HAL_GPIO_Init+0x324>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d00d      	beq.n	80057c2 <HAL_GPIO_Init+0x212>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a4b      	ldr	r2, [pc, #300]	; (80058d8 <HAL_GPIO_Init+0x328>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d007      	beq.n	80057be <HAL_GPIO_Init+0x20e>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a4a      	ldr	r2, [pc, #296]	; (80058dc <HAL_GPIO_Init+0x32c>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d101      	bne.n	80057ba <HAL_GPIO_Init+0x20a>
 80057b6:	2307      	movs	r3, #7
 80057b8:	e00e      	b.n	80057d8 <HAL_GPIO_Init+0x228>
 80057ba:	2308      	movs	r3, #8
 80057bc:	e00c      	b.n	80057d8 <HAL_GPIO_Init+0x228>
 80057be:	2306      	movs	r3, #6
 80057c0:	e00a      	b.n	80057d8 <HAL_GPIO_Init+0x228>
 80057c2:	2305      	movs	r3, #5
 80057c4:	e008      	b.n	80057d8 <HAL_GPIO_Init+0x228>
 80057c6:	2304      	movs	r3, #4
 80057c8:	e006      	b.n	80057d8 <HAL_GPIO_Init+0x228>
 80057ca:	2303      	movs	r3, #3
 80057cc:	e004      	b.n	80057d8 <HAL_GPIO_Init+0x228>
 80057ce:	2302      	movs	r3, #2
 80057d0:	e002      	b.n	80057d8 <HAL_GPIO_Init+0x228>
 80057d2:	2301      	movs	r3, #1
 80057d4:	e000      	b.n	80057d8 <HAL_GPIO_Init+0x228>
 80057d6:	2300      	movs	r3, #0
 80057d8:	69fa      	ldr	r2, [r7, #28]
 80057da:	f002 0203 	and.w	r2, r2, #3
 80057de:	0092      	lsls	r2, r2, #2
 80057e0:	4093      	lsls	r3, r2
 80057e2:	69ba      	ldr	r2, [r7, #24]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80057e8:	4934      	ldr	r1, [pc, #208]	; (80058bc <HAL_GPIO_Init+0x30c>)
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	089b      	lsrs	r3, r3, #2
 80057ee:	3302      	adds	r3, #2
 80057f0:	69ba      	ldr	r2, [r7, #24]
 80057f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80057f6:	4b3a      	ldr	r3, [pc, #232]	; (80058e0 <HAL_GPIO_Init+0x330>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	43db      	mvns	r3, r3
 8005800:	69ba      	ldr	r2, [r7, #24]
 8005802:	4013      	ands	r3, r2
 8005804:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800580e:	2b00      	cmp	r3, #0
 8005810:	d003      	beq.n	800581a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005812:	69ba      	ldr	r2, [r7, #24]
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	4313      	orrs	r3, r2
 8005818:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800581a:	4a31      	ldr	r2, [pc, #196]	; (80058e0 <HAL_GPIO_Init+0x330>)
 800581c:	69bb      	ldr	r3, [r7, #24]
 800581e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005820:	4b2f      	ldr	r3, [pc, #188]	; (80058e0 <HAL_GPIO_Init+0x330>)
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	43db      	mvns	r3, r3
 800582a:	69ba      	ldr	r2, [r7, #24]
 800582c:	4013      	ands	r3, r2
 800582e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005838:	2b00      	cmp	r3, #0
 800583a:	d003      	beq.n	8005844 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800583c:	69ba      	ldr	r2, [r7, #24]
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	4313      	orrs	r3, r2
 8005842:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005844:	4a26      	ldr	r2, [pc, #152]	; (80058e0 <HAL_GPIO_Init+0x330>)
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800584a:	4b25      	ldr	r3, [pc, #148]	; (80058e0 <HAL_GPIO_Init+0x330>)
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	43db      	mvns	r3, r3
 8005854:	69ba      	ldr	r2, [r7, #24]
 8005856:	4013      	ands	r3, r2
 8005858:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005862:	2b00      	cmp	r3, #0
 8005864:	d003      	beq.n	800586e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005866:	69ba      	ldr	r2, [r7, #24]
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	4313      	orrs	r3, r2
 800586c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800586e:	4a1c      	ldr	r2, [pc, #112]	; (80058e0 <HAL_GPIO_Init+0x330>)
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005874:	4b1a      	ldr	r3, [pc, #104]	; (80058e0 <HAL_GPIO_Init+0x330>)
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	43db      	mvns	r3, r3
 800587e:	69ba      	ldr	r2, [r7, #24]
 8005880:	4013      	ands	r3, r2
 8005882:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800588c:	2b00      	cmp	r3, #0
 800588e:	d003      	beq.n	8005898 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005890:	69ba      	ldr	r2, [r7, #24]
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	4313      	orrs	r3, r2
 8005896:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005898:	4a11      	ldr	r2, [pc, #68]	; (80058e0 <HAL_GPIO_Init+0x330>)
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	3301      	adds	r3, #1
 80058a2:	61fb      	str	r3, [r7, #28]
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	2b0f      	cmp	r3, #15
 80058a8:	f67f ae90 	bls.w	80055cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80058ac:	bf00      	nop
 80058ae:	3724      	adds	r7, #36	; 0x24
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr
 80058b8:	40023800 	.word	0x40023800
 80058bc:	40013800 	.word	0x40013800
 80058c0:	40020000 	.word	0x40020000
 80058c4:	40020400 	.word	0x40020400
 80058c8:	40020800 	.word	0x40020800
 80058cc:	40020c00 	.word	0x40020c00
 80058d0:	40021000 	.word	0x40021000
 80058d4:	40021400 	.word	0x40021400
 80058d8:	40021800 	.word	0x40021800
 80058dc:	40021c00 	.word	0x40021c00
 80058e0:	40013c00 	.word	0x40013c00

080058e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	4603      	mov	r3, r0
 80058ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80058ee:	4b08      	ldr	r3, [pc, #32]	; (8005910 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80058f0:	695a      	ldr	r2, [r3, #20]
 80058f2:	88fb      	ldrh	r3, [r7, #6]
 80058f4:	4013      	ands	r3, r2
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d006      	beq.n	8005908 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80058fa:	4a05      	ldr	r2, [pc, #20]	; (8005910 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80058fc:	88fb      	ldrh	r3, [r7, #6]
 80058fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005900:	88fb      	ldrh	r3, [r7, #6]
 8005902:	4618      	mov	r0, r3
 8005904:	f7fd ff90 	bl	8003828 <HAL_GPIO_EXTI_Callback>
  }
}
 8005908:	bf00      	nop
 800590a:	3708      	adds	r7, #8
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}
 8005910:	40013c00 	.word	0x40013c00

08005914 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d101      	bne.n	8005926 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e11f      	b.n	8005b66 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800592c:	b2db      	uxtb	r3, r3
 800592e:	2b00      	cmp	r3, #0
 8005930:	d106      	bne.n	8005940 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f7fe fc98 	bl	8004270 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2224      	movs	r2, #36	; 0x24
 8005944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f022 0201 	bic.w	r2, r2, #1
 8005956:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005966:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005976:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005978:	f002 f826 	bl	80079c8 <HAL_RCC_GetPCLK1Freq>
 800597c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	4a7b      	ldr	r2, [pc, #492]	; (8005b70 <HAL_I2C_Init+0x25c>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d807      	bhi.n	8005998 <HAL_I2C_Init+0x84>
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	4a7a      	ldr	r2, [pc, #488]	; (8005b74 <HAL_I2C_Init+0x260>)
 800598c:	4293      	cmp	r3, r2
 800598e:	bf94      	ite	ls
 8005990:	2301      	movls	r3, #1
 8005992:	2300      	movhi	r3, #0
 8005994:	b2db      	uxtb	r3, r3
 8005996:	e006      	b.n	80059a6 <HAL_I2C_Init+0x92>
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	4a77      	ldr	r2, [pc, #476]	; (8005b78 <HAL_I2C_Init+0x264>)
 800599c:	4293      	cmp	r3, r2
 800599e:	bf94      	ite	ls
 80059a0:	2301      	movls	r3, #1
 80059a2:	2300      	movhi	r3, #0
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d001      	beq.n	80059ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e0db      	b.n	8005b66 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	4a72      	ldr	r2, [pc, #456]	; (8005b7c <HAL_I2C_Init+0x268>)
 80059b2:	fba2 2303 	umull	r2, r3, r2, r3
 80059b6:	0c9b      	lsrs	r3, r3, #18
 80059b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68ba      	ldr	r2, [r7, #8]
 80059ca:	430a      	orrs	r2, r1
 80059cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	6a1b      	ldr	r3, [r3, #32]
 80059d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	4a64      	ldr	r2, [pc, #400]	; (8005b70 <HAL_I2C_Init+0x25c>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d802      	bhi.n	80059e8 <HAL_I2C_Init+0xd4>
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	3301      	adds	r3, #1
 80059e6:	e009      	b.n	80059fc <HAL_I2C_Init+0xe8>
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80059ee:	fb02 f303 	mul.w	r3, r2, r3
 80059f2:	4a63      	ldr	r2, [pc, #396]	; (8005b80 <HAL_I2C_Init+0x26c>)
 80059f4:	fba2 2303 	umull	r2, r3, r2, r3
 80059f8:	099b      	lsrs	r3, r3, #6
 80059fa:	3301      	adds	r3, #1
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	6812      	ldr	r2, [r2, #0]
 8005a00:	430b      	orrs	r3, r1
 8005a02:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	69db      	ldr	r3, [r3, #28]
 8005a0a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005a0e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	4956      	ldr	r1, [pc, #344]	; (8005b70 <HAL_I2C_Init+0x25c>)
 8005a18:	428b      	cmp	r3, r1
 8005a1a:	d80d      	bhi.n	8005a38 <HAL_I2C_Init+0x124>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	1e59      	subs	r1, r3, #1
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	005b      	lsls	r3, r3, #1
 8005a26:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a30:	2b04      	cmp	r3, #4
 8005a32:	bf38      	it	cc
 8005a34:	2304      	movcc	r3, #4
 8005a36:	e04f      	b.n	8005ad8 <HAL_I2C_Init+0x1c4>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d111      	bne.n	8005a64 <HAL_I2C_Init+0x150>
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	1e58      	subs	r0, r3, #1
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6859      	ldr	r1, [r3, #4]
 8005a48:	460b      	mov	r3, r1
 8005a4a:	005b      	lsls	r3, r3, #1
 8005a4c:	440b      	add	r3, r1
 8005a4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a52:	3301      	adds	r3, #1
 8005a54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	bf0c      	ite	eq
 8005a5c:	2301      	moveq	r3, #1
 8005a5e:	2300      	movne	r3, #0
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	e012      	b.n	8005a8a <HAL_I2C_Init+0x176>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	1e58      	subs	r0, r3, #1
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6859      	ldr	r1, [r3, #4]
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	440b      	add	r3, r1
 8005a72:	0099      	lsls	r1, r3, #2
 8005a74:	440b      	add	r3, r1
 8005a76:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	bf0c      	ite	eq
 8005a84:	2301      	moveq	r3, #1
 8005a86:	2300      	movne	r3, #0
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d001      	beq.n	8005a92 <HAL_I2C_Init+0x17e>
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e022      	b.n	8005ad8 <HAL_I2C_Init+0x1c4>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d10e      	bne.n	8005ab8 <HAL_I2C_Init+0x1a4>
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	1e58      	subs	r0, r3, #1
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6859      	ldr	r1, [r3, #4]
 8005aa2:	460b      	mov	r3, r1
 8005aa4:	005b      	lsls	r3, r3, #1
 8005aa6:	440b      	add	r3, r1
 8005aa8:	fbb0 f3f3 	udiv	r3, r0, r3
 8005aac:	3301      	adds	r3, #1
 8005aae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ab2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ab6:	e00f      	b.n	8005ad8 <HAL_I2C_Init+0x1c4>
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	1e58      	subs	r0, r3, #1
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6859      	ldr	r1, [r3, #4]
 8005ac0:	460b      	mov	r3, r1
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	440b      	add	r3, r1
 8005ac6:	0099      	lsls	r1, r3, #2
 8005ac8:	440b      	add	r3, r1
 8005aca:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ace:	3301      	adds	r3, #1
 8005ad0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ad4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ad8:	6879      	ldr	r1, [r7, #4]
 8005ada:	6809      	ldr	r1, [r1, #0]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	69da      	ldr	r2, [r3, #28]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	431a      	orrs	r2, r3
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	430a      	orrs	r2, r1
 8005afa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005b06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	6911      	ldr	r1, [r2, #16]
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	68d2      	ldr	r2, [r2, #12]
 8005b12:	4311      	orrs	r1, r2
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	6812      	ldr	r2, [r2, #0]
 8005b18:	430b      	orrs	r3, r1
 8005b1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	695a      	ldr	r2, [r3, #20]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	699b      	ldr	r3, [r3, #24]
 8005b2e:	431a      	orrs	r2, r3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	430a      	orrs	r2, r1
 8005b36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f042 0201 	orr.w	r2, r2, #1
 8005b46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2220      	movs	r2, #32
 8005b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3710      	adds	r7, #16
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	000186a0 	.word	0x000186a0
 8005b74:	001e847f 	.word	0x001e847f
 8005b78:	003d08ff 	.word	0x003d08ff
 8005b7c:	431bde83 	.word	0x431bde83
 8005b80:	10624dd3 	.word	0x10624dd3

08005b84 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b088      	sub	sp, #32
 8005b88:	af02      	add	r7, sp, #8
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	607a      	str	r2, [r7, #4]
 8005b8e:	461a      	mov	r2, r3
 8005b90:	460b      	mov	r3, r1
 8005b92:	817b      	strh	r3, [r7, #10]
 8005b94:	4613      	mov	r3, r2
 8005b96:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005b98:	f7ff f85c 	bl	8004c54 <HAL_GetTick>
 8005b9c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	2b20      	cmp	r3, #32
 8005ba8:	f040 80e0 	bne.w	8005d6c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	9300      	str	r3, [sp, #0]
 8005bb0:	2319      	movs	r3, #25
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	4970      	ldr	r1, [pc, #448]	; (8005d78 <HAL_I2C_Master_Transmit+0x1f4>)
 8005bb6:	68f8      	ldr	r0, [r7, #12]
 8005bb8:	f001 f8f0 	bl	8006d9c <I2C_WaitOnFlagUntilTimeout>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d001      	beq.n	8005bc6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005bc2:	2302      	movs	r3, #2
 8005bc4:	e0d3      	b.n	8005d6e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d101      	bne.n	8005bd4 <HAL_I2C_Master_Transmit+0x50>
 8005bd0:	2302      	movs	r3, #2
 8005bd2:	e0cc      	b.n	8005d6e <HAL_I2C_Master_Transmit+0x1ea>
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 0301 	and.w	r3, r3, #1
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d007      	beq.n	8005bfa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f042 0201 	orr.w	r2, r2, #1
 8005bf8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c08:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2221      	movs	r2, #33	; 0x21
 8005c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2210      	movs	r2, #16
 8005c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	893a      	ldrh	r2, [r7, #8]
 8005c2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c30:	b29a      	uxth	r2, r3
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	4a50      	ldr	r2, [pc, #320]	; (8005d7c <HAL_I2C_Master_Transmit+0x1f8>)
 8005c3a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005c3c:	8979      	ldrh	r1, [r7, #10]
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	6a3a      	ldr	r2, [r7, #32]
 8005c42:	68f8      	ldr	r0, [r7, #12]
 8005c44:	f000 fde2 	bl	800680c <I2C_MasterRequestWrite>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d001      	beq.n	8005c52 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e08d      	b.n	8005d6e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c52:	2300      	movs	r3, #0
 8005c54:	613b      	str	r3, [r7, #16]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	695b      	ldr	r3, [r3, #20]
 8005c5c:	613b      	str	r3, [r7, #16]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	699b      	ldr	r3, [r3, #24]
 8005c64:	613b      	str	r3, [r7, #16]
 8005c66:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005c68:	e066      	b.n	8005d38 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c6a:	697a      	ldr	r2, [r7, #20]
 8005c6c:	6a39      	ldr	r1, [r7, #32]
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	f001 f96a 	bl	8006f48 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d00d      	beq.n	8005c96 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7e:	2b04      	cmp	r3, #4
 8005c80:	d107      	bne.n	8005c92 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c90:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e06b      	b.n	8005d6e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9a:	781a      	ldrb	r2, [r3, #0]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca6:	1c5a      	adds	r2, r3, #1
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	b29a      	uxth	r2, r3
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	b29a      	uxth	r2, r3
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	695b      	ldr	r3, [r3, #20]
 8005ccc:	f003 0304 	and.w	r3, r3, #4
 8005cd0:	2b04      	cmp	r3, #4
 8005cd2:	d11b      	bne.n	8005d0c <HAL_I2C_Master_Transmit+0x188>
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d017      	beq.n	8005d0c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce0:	781a      	ldrb	r2, [r3, #0]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cec:	1c5a      	adds	r2, r3, #1
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d04:	3b01      	subs	r3, #1
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d0c:	697a      	ldr	r2, [r7, #20]
 8005d0e:	6a39      	ldr	r1, [r7, #32]
 8005d10:	68f8      	ldr	r0, [r7, #12]
 8005d12:	f001 f95a 	bl	8006fca <I2C_WaitOnBTFFlagUntilTimeout>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d00d      	beq.n	8005d38 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d20:	2b04      	cmp	r3, #4
 8005d22:	d107      	bne.n	8005d34 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d32:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e01a      	b.n	8005d6e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d194      	bne.n	8005c6a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2220      	movs	r2, #32
 8005d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	e000      	b.n	8005d6e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005d6c:	2302      	movs	r3, #2
  }
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3718      	adds	r7, #24
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	00100002 	.word	0x00100002
 8005d7c:	ffff0000 	.word	0xffff0000

08005d80 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b08c      	sub	sp, #48	; 0x30
 8005d84:	af02      	add	r7, sp, #8
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	607a      	str	r2, [r7, #4]
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	460b      	mov	r3, r1
 8005d8e:	817b      	strh	r3, [r7, #10]
 8005d90:	4613      	mov	r3, r2
 8005d92:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005d94:	f7fe ff5e 	bl	8004c54 <HAL_GetTick>
 8005d98:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	2b20      	cmp	r3, #32
 8005da4:	f040 820b 	bne.w	80061be <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005daa:	9300      	str	r3, [sp, #0]
 8005dac:	2319      	movs	r3, #25
 8005dae:	2201      	movs	r2, #1
 8005db0:	497c      	ldr	r1, [pc, #496]	; (8005fa4 <HAL_I2C_Master_Receive+0x224>)
 8005db2:	68f8      	ldr	r0, [r7, #12]
 8005db4:	f000 fff2 	bl	8006d9c <I2C_WaitOnFlagUntilTimeout>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d001      	beq.n	8005dc2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005dbe:	2302      	movs	r3, #2
 8005dc0:	e1fe      	b.n	80061c0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d101      	bne.n	8005dd0 <HAL_I2C_Master_Receive+0x50>
 8005dcc:	2302      	movs	r3, #2
 8005dce:	e1f7      	b.n	80061c0 <HAL_I2C_Master_Receive+0x440>
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 0301 	and.w	r3, r3, #1
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d007      	beq.n	8005df6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f042 0201 	orr.w	r2, r2, #1
 8005df4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e04:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2222      	movs	r2, #34	; 0x22
 8005e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2210      	movs	r2, #16
 8005e12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	893a      	ldrh	r2, [r7, #8]
 8005e26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e2c:	b29a      	uxth	r2, r3
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	4a5c      	ldr	r2, [pc, #368]	; (8005fa8 <HAL_I2C_Master_Receive+0x228>)
 8005e36:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005e38:	8979      	ldrh	r1, [r7, #10]
 8005e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e3e:	68f8      	ldr	r0, [r7, #12]
 8005e40:	f000 fd66 	bl	8006910 <I2C_MasterRequestRead>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d001      	beq.n	8005e4e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e1b8      	b.n	80061c0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d113      	bne.n	8005e7e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e56:	2300      	movs	r3, #0
 8005e58:	623b      	str	r3, [r7, #32]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	695b      	ldr	r3, [r3, #20]
 8005e60:	623b      	str	r3, [r7, #32]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	699b      	ldr	r3, [r3, #24]
 8005e68:	623b      	str	r3, [r7, #32]
 8005e6a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e7a:	601a      	str	r2, [r3, #0]
 8005e7c:	e18c      	b.n	8006198 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d11b      	bne.n	8005ebe <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e96:	2300      	movs	r3, #0
 8005e98:	61fb      	str	r3, [r7, #28]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	695b      	ldr	r3, [r3, #20]
 8005ea0:	61fb      	str	r3, [r7, #28]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	699b      	ldr	r3, [r3, #24]
 8005ea8:	61fb      	str	r3, [r7, #28]
 8005eaa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005eba:	601a      	str	r2, [r3, #0]
 8005ebc:	e16c      	b.n	8006198 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ec2:	2b02      	cmp	r3, #2
 8005ec4:	d11b      	bne.n	8005efe <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ed4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ee4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	61bb      	str	r3, [r7, #24]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	695b      	ldr	r3, [r3, #20]
 8005ef0:	61bb      	str	r3, [r7, #24]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	699b      	ldr	r3, [r3, #24]
 8005ef8:	61bb      	str	r3, [r7, #24]
 8005efa:	69bb      	ldr	r3, [r7, #24]
 8005efc:	e14c      	b.n	8006198 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f0e:	2300      	movs	r3, #0
 8005f10:	617b      	str	r3, [r7, #20]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	695b      	ldr	r3, [r3, #20]
 8005f18:	617b      	str	r3, [r7, #20]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	699b      	ldr	r3, [r3, #24]
 8005f20:	617b      	str	r3, [r7, #20]
 8005f22:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005f24:	e138      	b.n	8006198 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f2a:	2b03      	cmp	r3, #3
 8005f2c:	f200 80f1 	bhi.w	8006112 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d123      	bne.n	8005f80 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f3c:	68f8      	ldr	r0, [r7, #12]
 8005f3e:	f001 f885 	bl	800704c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d001      	beq.n	8005f4c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e139      	b.n	80061c0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	691a      	ldr	r2, [r3, #16]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f56:	b2d2      	uxtb	r2, r2
 8005f58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5e:	1c5a      	adds	r2, r3, #1
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f68:	3b01      	subs	r3, #1
 8005f6a:	b29a      	uxth	r2, r3
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	3b01      	subs	r3, #1
 8005f78:	b29a      	uxth	r2, r3
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f7e:	e10b      	b.n	8006198 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f84:	2b02      	cmp	r3, #2
 8005f86:	d14e      	bne.n	8006026 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8a:	9300      	str	r3, [sp, #0]
 8005f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8e:	2200      	movs	r2, #0
 8005f90:	4906      	ldr	r1, [pc, #24]	; (8005fac <HAL_I2C_Master_Receive+0x22c>)
 8005f92:	68f8      	ldr	r0, [r7, #12]
 8005f94:	f000 ff02 	bl	8006d9c <I2C_WaitOnFlagUntilTimeout>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d008      	beq.n	8005fb0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e10e      	b.n	80061c0 <HAL_I2C_Master_Receive+0x440>
 8005fa2:	bf00      	nop
 8005fa4:	00100002 	.word	0x00100002
 8005fa8:	ffff0000 	.word	0xffff0000
 8005fac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	691a      	ldr	r2, [r3, #16]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fca:	b2d2      	uxtb	r2, r2
 8005fcc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd2:	1c5a      	adds	r2, r3, #1
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fdc:	3b01      	subs	r3, #1
 8005fde:	b29a      	uxth	r2, r3
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	3b01      	subs	r3, #1
 8005fec:	b29a      	uxth	r2, r3
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	691a      	ldr	r2, [r3, #16]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffc:	b2d2      	uxtb	r2, r2
 8005ffe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006004:	1c5a      	adds	r2, r3, #1
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800600e:	3b01      	subs	r3, #1
 8006010:	b29a      	uxth	r2, r3
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800601a:	b29b      	uxth	r3, r3
 800601c:	3b01      	subs	r3, #1
 800601e:	b29a      	uxth	r2, r3
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006024:	e0b8      	b.n	8006198 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006028:	9300      	str	r3, [sp, #0]
 800602a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602c:	2200      	movs	r2, #0
 800602e:	4966      	ldr	r1, [pc, #408]	; (80061c8 <HAL_I2C_Master_Receive+0x448>)
 8006030:	68f8      	ldr	r0, [r7, #12]
 8006032:	f000 feb3 	bl	8006d9c <I2C_WaitOnFlagUntilTimeout>
 8006036:	4603      	mov	r3, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	d001      	beq.n	8006040 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e0bf      	b.n	80061c0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800604e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	691a      	ldr	r2, [r3, #16]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605a:	b2d2      	uxtb	r2, r2
 800605c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006062:	1c5a      	adds	r2, r3, #1
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800606c:	3b01      	subs	r3, #1
 800606e:	b29a      	uxth	r2, r3
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006078:	b29b      	uxth	r3, r3
 800607a:	3b01      	subs	r3, #1
 800607c:	b29a      	uxth	r2, r3
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006084:	9300      	str	r3, [sp, #0]
 8006086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006088:	2200      	movs	r2, #0
 800608a:	494f      	ldr	r1, [pc, #316]	; (80061c8 <HAL_I2C_Master_Receive+0x448>)
 800608c:	68f8      	ldr	r0, [r7, #12]
 800608e:	f000 fe85 	bl	8006d9c <I2C_WaitOnFlagUntilTimeout>
 8006092:	4603      	mov	r3, r0
 8006094:	2b00      	cmp	r3, #0
 8006096:	d001      	beq.n	800609c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	e091      	b.n	80061c0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	691a      	ldr	r2, [r3, #16]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b6:	b2d2      	uxtb	r2, r2
 80060b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060be:	1c5a      	adds	r2, r3, #1
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060c8:	3b01      	subs	r3, #1
 80060ca:	b29a      	uxth	r2, r3
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	3b01      	subs	r3, #1
 80060d8:	b29a      	uxth	r2, r3
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	691a      	ldr	r2, [r3, #16]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e8:	b2d2      	uxtb	r2, r2
 80060ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f0:	1c5a      	adds	r2, r3, #1
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060fa:	3b01      	subs	r3, #1
 80060fc:	b29a      	uxth	r2, r3
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006106:	b29b      	uxth	r3, r3
 8006108:	3b01      	subs	r3, #1
 800610a:	b29a      	uxth	r2, r3
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006110:	e042      	b.n	8006198 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006114:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006116:	68f8      	ldr	r0, [r7, #12]
 8006118:	f000 ff98 	bl	800704c <I2C_WaitOnRXNEFlagUntilTimeout>
 800611c:	4603      	mov	r3, r0
 800611e:	2b00      	cmp	r3, #0
 8006120:	d001      	beq.n	8006126 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e04c      	b.n	80061c0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	691a      	ldr	r2, [r3, #16]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006130:	b2d2      	uxtb	r2, r2
 8006132:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006138:	1c5a      	adds	r2, r3, #1
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006142:	3b01      	subs	r3, #1
 8006144:	b29a      	uxth	r2, r3
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800614e:	b29b      	uxth	r3, r3
 8006150:	3b01      	subs	r3, #1
 8006152:	b29a      	uxth	r2, r3
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	695b      	ldr	r3, [r3, #20]
 800615e:	f003 0304 	and.w	r3, r3, #4
 8006162:	2b04      	cmp	r3, #4
 8006164:	d118      	bne.n	8006198 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	691a      	ldr	r2, [r3, #16]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006170:	b2d2      	uxtb	r2, r2
 8006172:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006178:	1c5a      	adds	r2, r3, #1
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006182:	3b01      	subs	r3, #1
 8006184:	b29a      	uxth	r2, r3
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800618e:	b29b      	uxth	r3, r3
 8006190:	3b01      	subs	r3, #1
 8006192:	b29a      	uxth	r2, r3
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800619c:	2b00      	cmp	r3, #0
 800619e:	f47f aec2 	bne.w	8005f26 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2220      	movs	r2, #32
 80061a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2200      	movs	r2, #0
 80061ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2200      	movs	r2, #0
 80061b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80061ba:	2300      	movs	r3, #0
 80061bc:	e000      	b.n	80061c0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80061be:	2302      	movs	r3, #2
  }
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3728      	adds	r7, #40	; 0x28
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	00010004 	.word	0x00010004

080061cc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b088      	sub	sp, #32
 80061d0:	af02      	add	r7, sp, #8
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	4608      	mov	r0, r1
 80061d6:	4611      	mov	r1, r2
 80061d8:	461a      	mov	r2, r3
 80061da:	4603      	mov	r3, r0
 80061dc:	817b      	strh	r3, [r7, #10]
 80061de:	460b      	mov	r3, r1
 80061e0:	813b      	strh	r3, [r7, #8]
 80061e2:	4613      	mov	r3, r2
 80061e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80061e6:	f7fe fd35 	bl	8004c54 <HAL_GetTick>
 80061ea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	2b20      	cmp	r3, #32
 80061f6:	f040 80d9 	bne.w	80063ac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	9300      	str	r3, [sp, #0]
 80061fe:	2319      	movs	r3, #25
 8006200:	2201      	movs	r2, #1
 8006202:	496d      	ldr	r1, [pc, #436]	; (80063b8 <HAL_I2C_Mem_Write+0x1ec>)
 8006204:	68f8      	ldr	r0, [r7, #12]
 8006206:	f000 fdc9 	bl	8006d9c <I2C_WaitOnFlagUntilTimeout>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d001      	beq.n	8006214 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006210:	2302      	movs	r3, #2
 8006212:	e0cc      	b.n	80063ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800621a:	2b01      	cmp	r3, #1
 800621c:	d101      	bne.n	8006222 <HAL_I2C_Mem_Write+0x56>
 800621e:	2302      	movs	r3, #2
 8006220:	e0c5      	b.n	80063ae <HAL_I2C_Mem_Write+0x1e2>
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2201      	movs	r2, #1
 8006226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 0301 	and.w	r3, r3, #1
 8006234:	2b01      	cmp	r3, #1
 8006236:	d007      	beq.n	8006248 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f042 0201 	orr.w	r2, r2, #1
 8006246:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006256:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2221      	movs	r2, #33	; 0x21
 800625c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2240      	movs	r2, #64	; 0x40
 8006264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2200      	movs	r2, #0
 800626c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6a3a      	ldr	r2, [r7, #32]
 8006272:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006278:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800627e:	b29a      	uxth	r2, r3
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	4a4d      	ldr	r2, [pc, #308]	; (80063bc <HAL_I2C_Mem_Write+0x1f0>)
 8006288:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800628a:	88f8      	ldrh	r0, [r7, #6]
 800628c:	893a      	ldrh	r2, [r7, #8]
 800628e:	8979      	ldrh	r1, [r7, #10]
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	9301      	str	r3, [sp, #4]
 8006294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006296:	9300      	str	r3, [sp, #0]
 8006298:	4603      	mov	r3, r0
 800629a:	68f8      	ldr	r0, [r7, #12]
 800629c:	f000 fc04 	bl	8006aa8 <I2C_RequestMemoryWrite>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d052      	beq.n	800634c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e081      	b.n	80063ae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062aa:	697a      	ldr	r2, [r7, #20]
 80062ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062ae:	68f8      	ldr	r0, [r7, #12]
 80062b0:	f000 fe4a 	bl	8006f48 <I2C_WaitOnTXEFlagUntilTimeout>
 80062b4:	4603      	mov	r3, r0
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d00d      	beq.n	80062d6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062be:	2b04      	cmp	r3, #4
 80062c0:	d107      	bne.n	80062d2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e06b      	b.n	80063ae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062da:	781a      	ldrb	r2, [r3, #0]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e6:	1c5a      	adds	r2, r3, #1
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062f0:	3b01      	subs	r3, #1
 80062f2:	b29a      	uxth	r2, r3
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	3b01      	subs	r3, #1
 8006300:	b29a      	uxth	r2, r3
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	695b      	ldr	r3, [r3, #20]
 800630c:	f003 0304 	and.w	r3, r3, #4
 8006310:	2b04      	cmp	r3, #4
 8006312:	d11b      	bne.n	800634c <HAL_I2C_Mem_Write+0x180>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006318:	2b00      	cmp	r3, #0
 800631a:	d017      	beq.n	800634c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006320:	781a      	ldrb	r2, [r3, #0]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632c:	1c5a      	adds	r2, r3, #1
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006336:	3b01      	subs	r3, #1
 8006338:	b29a      	uxth	r2, r3
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006342:	b29b      	uxth	r3, r3
 8006344:	3b01      	subs	r3, #1
 8006346:	b29a      	uxth	r2, r3
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006350:	2b00      	cmp	r3, #0
 8006352:	d1aa      	bne.n	80062aa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006354:	697a      	ldr	r2, [r7, #20]
 8006356:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006358:	68f8      	ldr	r0, [r7, #12]
 800635a:	f000 fe36 	bl	8006fca <I2C_WaitOnBTFFlagUntilTimeout>
 800635e:	4603      	mov	r3, r0
 8006360:	2b00      	cmp	r3, #0
 8006362:	d00d      	beq.n	8006380 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006368:	2b04      	cmp	r3, #4
 800636a:	d107      	bne.n	800637c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800637a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	e016      	b.n	80063ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800638e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2220      	movs	r2, #32
 8006394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2200      	movs	r2, #0
 800639c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80063a8:	2300      	movs	r3, #0
 80063aa:	e000      	b.n	80063ae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80063ac:	2302      	movs	r3, #2
  }
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3718      	adds	r7, #24
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop
 80063b8:	00100002 	.word	0x00100002
 80063bc:	ffff0000 	.word	0xffff0000

080063c0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b08c      	sub	sp, #48	; 0x30
 80063c4:	af02      	add	r7, sp, #8
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	4608      	mov	r0, r1
 80063ca:	4611      	mov	r1, r2
 80063cc:	461a      	mov	r2, r3
 80063ce:	4603      	mov	r3, r0
 80063d0:	817b      	strh	r3, [r7, #10]
 80063d2:	460b      	mov	r3, r1
 80063d4:	813b      	strh	r3, [r7, #8]
 80063d6:	4613      	mov	r3, r2
 80063d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80063da:	f7fe fc3b 	bl	8004c54 <HAL_GetTick>
 80063de:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	2b20      	cmp	r3, #32
 80063ea:	f040 8208 	bne.w	80067fe <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80063ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f0:	9300      	str	r3, [sp, #0]
 80063f2:	2319      	movs	r3, #25
 80063f4:	2201      	movs	r2, #1
 80063f6:	497b      	ldr	r1, [pc, #492]	; (80065e4 <HAL_I2C_Mem_Read+0x224>)
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	f000 fccf 	bl	8006d9c <I2C_WaitOnFlagUntilTimeout>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d001      	beq.n	8006408 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006404:	2302      	movs	r3, #2
 8006406:	e1fb      	b.n	8006800 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800640e:	2b01      	cmp	r3, #1
 8006410:	d101      	bne.n	8006416 <HAL_I2C_Mem_Read+0x56>
 8006412:	2302      	movs	r3, #2
 8006414:	e1f4      	b.n	8006800 <HAL_I2C_Mem_Read+0x440>
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2201      	movs	r2, #1
 800641a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f003 0301 	and.w	r3, r3, #1
 8006428:	2b01      	cmp	r3, #1
 800642a:	d007      	beq.n	800643c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f042 0201 	orr.w	r2, r2, #1
 800643a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800644a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2222      	movs	r2, #34	; 0x22
 8006450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2240      	movs	r2, #64	; 0x40
 8006458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2200      	movs	r2, #0
 8006460:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006466:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800646c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006472:	b29a      	uxth	r2, r3
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	4a5b      	ldr	r2, [pc, #364]	; (80065e8 <HAL_I2C_Mem_Read+0x228>)
 800647c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800647e:	88f8      	ldrh	r0, [r7, #6]
 8006480:	893a      	ldrh	r2, [r7, #8]
 8006482:	8979      	ldrh	r1, [r7, #10]
 8006484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006486:	9301      	str	r3, [sp, #4]
 8006488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800648a:	9300      	str	r3, [sp, #0]
 800648c:	4603      	mov	r3, r0
 800648e:	68f8      	ldr	r0, [r7, #12]
 8006490:	f000 fb9e 	bl	8006bd0 <I2C_RequestMemoryRead>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d001      	beq.n	800649e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e1b0      	b.n	8006800 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d113      	bne.n	80064ce <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064a6:	2300      	movs	r3, #0
 80064a8:	623b      	str	r3, [r7, #32]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	695b      	ldr	r3, [r3, #20]
 80064b0:	623b      	str	r3, [r7, #32]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	699b      	ldr	r3, [r3, #24]
 80064b8:	623b      	str	r3, [r7, #32]
 80064ba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064ca:	601a      	str	r2, [r3, #0]
 80064cc:	e184      	b.n	80067d8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d11b      	bne.n	800650e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064e6:	2300      	movs	r3, #0
 80064e8:	61fb      	str	r3, [r7, #28]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	695b      	ldr	r3, [r3, #20]
 80064f0:	61fb      	str	r3, [r7, #28]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	699b      	ldr	r3, [r3, #24]
 80064f8:	61fb      	str	r3, [r7, #28]
 80064fa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800650a:	601a      	str	r2, [r3, #0]
 800650c:	e164      	b.n	80067d8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006512:	2b02      	cmp	r3, #2
 8006514:	d11b      	bne.n	800654e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006524:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006534:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006536:	2300      	movs	r3, #0
 8006538:	61bb      	str	r3, [r7, #24]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	695b      	ldr	r3, [r3, #20]
 8006540:	61bb      	str	r3, [r7, #24]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	699b      	ldr	r3, [r3, #24]
 8006548:	61bb      	str	r3, [r7, #24]
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	e144      	b.n	80067d8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800654e:	2300      	movs	r3, #0
 8006550:	617b      	str	r3, [r7, #20]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	695b      	ldr	r3, [r3, #20]
 8006558:	617b      	str	r3, [r7, #20]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	699b      	ldr	r3, [r3, #24]
 8006560:	617b      	str	r3, [r7, #20]
 8006562:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006564:	e138      	b.n	80067d8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800656a:	2b03      	cmp	r3, #3
 800656c:	f200 80f1 	bhi.w	8006752 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006574:	2b01      	cmp	r3, #1
 8006576:	d123      	bne.n	80065c0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800657a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800657c:	68f8      	ldr	r0, [r7, #12]
 800657e:	f000 fd65 	bl	800704c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006582:	4603      	mov	r3, r0
 8006584:	2b00      	cmp	r3, #0
 8006586:	d001      	beq.n	800658c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	e139      	b.n	8006800 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	691a      	ldr	r2, [r3, #16]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006596:	b2d2      	uxtb	r2, r2
 8006598:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800659e:	1c5a      	adds	r2, r3, #1
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065a8:	3b01      	subs	r3, #1
 80065aa:	b29a      	uxth	r2, r3
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	3b01      	subs	r3, #1
 80065b8:	b29a      	uxth	r2, r3
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80065be:	e10b      	b.n	80067d8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065c4:	2b02      	cmp	r3, #2
 80065c6:	d14e      	bne.n	8006666 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80065c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ca:	9300      	str	r3, [sp, #0]
 80065cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ce:	2200      	movs	r2, #0
 80065d0:	4906      	ldr	r1, [pc, #24]	; (80065ec <HAL_I2C_Mem_Read+0x22c>)
 80065d2:	68f8      	ldr	r0, [r7, #12]
 80065d4:	f000 fbe2 	bl	8006d9c <I2C_WaitOnFlagUntilTimeout>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d008      	beq.n	80065f0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	e10e      	b.n	8006800 <HAL_I2C_Mem_Read+0x440>
 80065e2:	bf00      	nop
 80065e4:	00100002 	.word	0x00100002
 80065e8:	ffff0000 	.word	0xffff0000
 80065ec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	691a      	ldr	r2, [r3, #16]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660a:	b2d2      	uxtb	r2, r2
 800660c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006612:	1c5a      	adds	r2, r3, #1
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800661c:	3b01      	subs	r3, #1
 800661e:	b29a      	uxth	r2, r3
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006628:	b29b      	uxth	r3, r3
 800662a:	3b01      	subs	r3, #1
 800662c:	b29a      	uxth	r2, r3
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	691a      	ldr	r2, [r3, #16]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663c:	b2d2      	uxtb	r2, r2
 800663e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006644:	1c5a      	adds	r2, r3, #1
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800664e:	3b01      	subs	r3, #1
 8006650:	b29a      	uxth	r2, r3
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800665a:	b29b      	uxth	r3, r3
 800665c:	3b01      	subs	r3, #1
 800665e:	b29a      	uxth	r2, r3
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006664:	e0b8      	b.n	80067d8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006668:	9300      	str	r3, [sp, #0]
 800666a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800666c:	2200      	movs	r2, #0
 800666e:	4966      	ldr	r1, [pc, #408]	; (8006808 <HAL_I2C_Mem_Read+0x448>)
 8006670:	68f8      	ldr	r0, [r7, #12]
 8006672:	f000 fb93 	bl	8006d9c <I2C_WaitOnFlagUntilTimeout>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d001      	beq.n	8006680 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	e0bf      	b.n	8006800 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800668e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	691a      	ldr	r2, [r3, #16]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669a:	b2d2      	uxtb	r2, r2
 800669c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a2:	1c5a      	adds	r2, r3, #1
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066ac:	3b01      	subs	r3, #1
 80066ae:	b29a      	uxth	r2, r3
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	3b01      	subs	r3, #1
 80066bc:	b29a      	uxth	r2, r3
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80066c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c4:	9300      	str	r3, [sp, #0]
 80066c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c8:	2200      	movs	r2, #0
 80066ca:	494f      	ldr	r1, [pc, #316]	; (8006808 <HAL_I2C_Mem_Read+0x448>)
 80066cc:	68f8      	ldr	r0, [r7, #12]
 80066ce:	f000 fb65 	bl	8006d9c <I2C_WaitOnFlagUntilTimeout>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d001      	beq.n	80066dc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	e091      	b.n	8006800 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	691a      	ldr	r2, [r3, #16]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f6:	b2d2      	uxtb	r2, r2
 80066f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fe:	1c5a      	adds	r2, r3, #1
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006708:	3b01      	subs	r3, #1
 800670a:	b29a      	uxth	r2, r3
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006714:	b29b      	uxth	r3, r3
 8006716:	3b01      	subs	r3, #1
 8006718:	b29a      	uxth	r2, r3
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	691a      	ldr	r2, [r3, #16]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006728:	b2d2      	uxtb	r2, r2
 800672a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006730:	1c5a      	adds	r2, r3, #1
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800673a:	3b01      	subs	r3, #1
 800673c:	b29a      	uxth	r2, r3
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006746:	b29b      	uxth	r3, r3
 8006748:	3b01      	subs	r3, #1
 800674a:	b29a      	uxth	r2, r3
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006750:	e042      	b.n	80067d8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006754:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006756:	68f8      	ldr	r0, [r7, #12]
 8006758:	f000 fc78 	bl	800704c <I2C_WaitOnRXNEFlagUntilTimeout>
 800675c:	4603      	mov	r3, r0
 800675e:	2b00      	cmp	r3, #0
 8006760:	d001      	beq.n	8006766 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	e04c      	b.n	8006800 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	691a      	ldr	r2, [r3, #16]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006770:	b2d2      	uxtb	r2, r2
 8006772:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006778:	1c5a      	adds	r2, r3, #1
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006782:	3b01      	subs	r3, #1
 8006784:	b29a      	uxth	r2, r3
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800678e:	b29b      	uxth	r3, r3
 8006790:	3b01      	subs	r3, #1
 8006792:	b29a      	uxth	r2, r3
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	695b      	ldr	r3, [r3, #20]
 800679e:	f003 0304 	and.w	r3, r3, #4
 80067a2:	2b04      	cmp	r3, #4
 80067a4:	d118      	bne.n	80067d8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	691a      	ldr	r2, [r3, #16]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b0:	b2d2      	uxtb	r2, r2
 80067b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b8:	1c5a      	adds	r2, r3, #1
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067c2:	3b01      	subs	r3, #1
 80067c4:	b29a      	uxth	r2, r3
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	3b01      	subs	r3, #1
 80067d2:	b29a      	uxth	r2, r3
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f47f aec2 	bne.w	8006566 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2220      	movs	r2, #32
 80067e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80067fa:	2300      	movs	r3, #0
 80067fc:	e000      	b.n	8006800 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80067fe:	2302      	movs	r3, #2
  }
}
 8006800:	4618      	mov	r0, r3
 8006802:	3728      	adds	r7, #40	; 0x28
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}
 8006808:	00010004 	.word	0x00010004

0800680c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b088      	sub	sp, #32
 8006810:	af02      	add	r7, sp, #8
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	607a      	str	r2, [r7, #4]
 8006816:	603b      	str	r3, [r7, #0]
 8006818:	460b      	mov	r3, r1
 800681a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006820:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	2b08      	cmp	r3, #8
 8006826:	d006      	beq.n	8006836 <I2C_MasterRequestWrite+0x2a>
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	2b01      	cmp	r3, #1
 800682c:	d003      	beq.n	8006836 <I2C_MasterRequestWrite+0x2a>
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006834:	d108      	bne.n	8006848 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006844:	601a      	str	r2, [r3, #0]
 8006846:	e00b      	b.n	8006860 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800684c:	2b12      	cmp	r3, #18
 800684e:	d107      	bne.n	8006860 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800685e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	9300      	str	r3, [sp, #0]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800686c:	68f8      	ldr	r0, [r7, #12]
 800686e:	f000 fa95 	bl	8006d9c <I2C_WaitOnFlagUntilTimeout>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00c      	beq.n	8006892 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006882:	2b00      	cmp	r3, #0
 8006884:	d003      	beq.n	800688e <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f44f 7200 	mov.w	r2, #512	; 0x200
 800688c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800688e:	2303      	movs	r3, #3
 8006890:	e035      	b.n	80068fe <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	691b      	ldr	r3, [r3, #16]
 8006896:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800689a:	d108      	bne.n	80068ae <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800689c:	897b      	ldrh	r3, [r7, #10]
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	461a      	mov	r2, r3
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80068aa:	611a      	str	r2, [r3, #16]
 80068ac:	e01b      	b.n	80068e6 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80068ae:	897b      	ldrh	r3, [r7, #10]
 80068b0:	11db      	asrs	r3, r3, #7
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	f003 0306 	and.w	r3, r3, #6
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	f063 030f 	orn	r3, r3, #15
 80068be:	b2da      	uxtb	r2, r3
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	490f      	ldr	r1, [pc, #60]	; (8006908 <I2C_MasterRequestWrite+0xfc>)
 80068cc:	68f8      	ldr	r0, [r7, #12]
 80068ce:	f000 fabc 	bl	8006e4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80068d2:	4603      	mov	r3, r0
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d001      	beq.n	80068dc <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	e010      	b.n	80068fe <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80068dc:	897b      	ldrh	r3, [r7, #10]
 80068de:	b2da      	uxtb	r2, r3
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	4908      	ldr	r1, [pc, #32]	; (800690c <I2C_MasterRequestWrite+0x100>)
 80068ec:	68f8      	ldr	r0, [r7, #12]
 80068ee:	f000 faac 	bl	8006e4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80068f2:	4603      	mov	r3, r0
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d001      	beq.n	80068fc <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	e000      	b.n	80068fe <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 80068fc:	2300      	movs	r3, #0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3718      	adds	r7, #24
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	00010008 	.word	0x00010008
 800690c:	00010002 	.word	0x00010002

08006910 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b088      	sub	sp, #32
 8006914:	af02      	add	r7, sp, #8
 8006916:	60f8      	str	r0, [r7, #12]
 8006918:	607a      	str	r2, [r7, #4]
 800691a:	603b      	str	r3, [r7, #0]
 800691c:	460b      	mov	r3, r1
 800691e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006924:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006934:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	2b08      	cmp	r3, #8
 800693a:	d006      	beq.n	800694a <I2C_MasterRequestRead+0x3a>
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	2b01      	cmp	r3, #1
 8006940:	d003      	beq.n	800694a <I2C_MasterRequestRead+0x3a>
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006948:	d108      	bne.n	800695c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006958:	601a      	str	r2, [r3, #0]
 800695a:	e00b      	b.n	8006974 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006960:	2b11      	cmp	r3, #17
 8006962:	d107      	bne.n	8006974 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006972:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	9300      	str	r3, [sp, #0]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006980:	68f8      	ldr	r0, [r7, #12]
 8006982:	f000 fa0b 	bl	8006d9c <I2C_WaitOnFlagUntilTimeout>
 8006986:	4603      	mov	r3, r0
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00c      	beq.n	80069a6 <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006996:	2b00      	cmp	r3, #0
 8006998:	d003      	beq.n	80069a2 <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80069a2:	2303      	movs	r3, #3
 80069a4:	e078      	b.n	8006a98 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069ae:	d108      	bne.n	80069c2 <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80069b0:	897b      	ldrh	r3, [r7, #10]
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	f043 0301 	orr.w	r3, r3, #1
 80069b8:	b2da      	uxtb	r2, r3
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	611a      	str	r2, [r3, #16]
 80069c0:	e05e      	b.n	8006a80 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80069c2:	897b      	ldrh	r3, [r7, #10]
 80069c4:	11db      	asrs	r3, r3, #7
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	f003 0306 	and.w	r3, r3, #6
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	f063 030f 	orn	r3, r3, #15
 80069d2:	b2da      	uxtb	r2, r3
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	4930      	ldr	r1, [pc, #192]	; (8006aa0 <I2C_MasterRequestRead+0x190>)
 80069e0:	68f8      	ldr	r0, [r7, #12]
 80069e2:	f000 fa32 	bl	8006e4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80069e6:	4603      	mov	r3, r0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d001      	beq.n	80069f0 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	e053      	b.n	8006a98 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80069f0:	897b      	ldrh	r3, [r7, #10]
 80069f2:	b2da      	uxtb	r2, r3
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	4929      	ldr	r1, [pc, #164]	; (8006aa4 <I2C_MasterRequestRead+0x194>)
 8006a00:	68f8      	ldr	r0, [r7, #12]
 8006a02:	f000 fa22 	bl	8006e4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d001      	beq.n	8006a10 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e043      	b.n	8006a98 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a10:	2300      	movs	r3, #0
 8006a12:	613b      	str	r3, [r7, #16]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	695b      	ldr	r3, [r3, #20]
 8006a1a:	613b      	str	r3, [r7, #16]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	699b      	ldr	r3, [r3, #24]
 8006a22:	613b      	str	r3, [r7, #16]
 8006a24:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a34:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	9300      	str	r3, [sp, #0]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006a42:	68f8      	ldr	r0, [r7, #12]
 8006a44:	f000 f9aa 	bl	8006d9c <I2C_WaitOnFlagUntilTimeout>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d00c      	beq.n	8006a68 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d003      	beq.n	8006a64 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a62:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006a64:	2303      	movs	r3, #3
 8006a66:	e017      	b.n	8006a98 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006a68:	897b      	ldrh	r3, [r7, #10]
 8006a6a:	11db      	asrs	r3, r3, #7
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	f003 0306 	and.w	r3, r3, #6
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	f063 030e 	orn	r3, r3, #14
 8006a78:	b2da      	uxtb	r2, r3
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	4907      	ldr	r1, [pc, #28]	; (8006aa4 <I2C_MasterRequestRead+0x194>)
 8006a86:	68f8      	ldr	r0, [r7, #12]
 8006a88:	f000 f9df 	bl	8006e4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d001      	beq.n	8006a96 <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	e000      	b.n	8006a98 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 8006a96:	2300      	movs	r3, #0
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3718      	adds	r7, #24
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}
 8006aa0:	00010008 	.word	0x00010008
 8006aa4:	00010002 	.word	0x00010002

08006aa8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b088      	sub	sp, #32
 8006aac:	af02      	add	r7, sp, #8
 8006aae:	60f8      	str	r0, [r7, #12]
 8006ab0:	4608      	mov	r0, r1
 8006ab2:	4611      	mov	r1, r2
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	817b      	strh	r3, [r7, #10]
 8006aba:	460b      	mov	r3, r1
 8006abc:	813b      	strh	r3, [r7, #8]
 8006abe:	4613      	mov	r3, r2
 8006ac0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ad0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad4:	9300      	str	r3, [sp, #0]
 8006ad6:	6a3b      	ldr	r3, [r7, #32]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006ade:	68f8      	ldr	r0, [r7, #12]
 8006ae0:	f000 f95c 	bl	8006d9c <I2C_WaitOnFlagUntilTimeout>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d00c      	beq.n	8006b04 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d003      	beq.n	8006b00 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006afe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006b00:	2303      	movs	r3, #3
 8006b02:	e05f      	b.n	8006bc4 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006b04:	897b      	ldrh	r3, [r7, #10]
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	461a      	mov	r2, r3
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006b12:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b16:	6a3a      	ldr	r2, [r7, #32]
 8006b18:	492c      	ldr	r1, [pc, #176]	; (8006bcc <I2C_RequestMemoryWrite+0x124>)
 8006b1a:	68f8      	ldr	r0, [r7, #12]
 8006b1c:	f000 f995 	bl	8006e4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b20:	4603      	mov	r3, r0
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d001      	beq.n	8006b2a <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	e04c      	b.n	8006bc4 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	617b      	str	r3, [r7, #20]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	695b      	ldr	r3, [r3, #20]
 8006b34:	617b      	str	r3, [r7, #20]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	699b      	ldr	r3, [r3, #24]
 8006b3c:	617b      	str	r3, [r7, #20]
 8006b3e:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b42:	6a39      	ldr	r1, [r7, #32]
 8006b44:	68f8      	ldr	r0, [r7, #12]
 8006b46:	f000 f9ff 	bl	8006f48 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d00d      	beq.n	8006b6c <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b54:	2b04      	cmp	r3, #4
 8006b56:	d107      	bne.n	8006b68 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b66:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	e02b      	b.n	8006bc4 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b6c:	88fb      	ldrh	r3, [r7, #6]
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d105      	bne.n	8006b7e <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b72:	893b      	ldrh	r3, [r7, #8]
 8006b74:	b2da      	uxtb	r2, r3
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	611a      	str	r2, [r3, #16]
 8006b7c:	e021      	b.n	8006bc2 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006b7e:	893b      	ldrh	r3, [r7, #8]
 8006b80:	0a1b      	lsrs	r3, r3, #8
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	b2da      	uxtb	r2, r3
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b8e:	6a39      	ldr	r1, [r7, #32]
 8006b90:	68f8      	ldr	r0, [r7, #12]
 8006b92:	f000 f9d9 	bl	8006f48 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b96:	4603      	mov	r3, r0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d00d      	beq.n	8006bb8 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba0:	2b04      	cmp	r3, #4
 8006ba2:	d107      	bne.n	8006bb4 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bb2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e005      	b.n	8006bc4 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006bb8:	893b      	ldrh	r3, [r7, #8]
 8006bba:	b2da      	uxtb	r2, r3
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006bc2:	2300      	movs	r3, #0
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3718      	adds	r7, #24
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}
 8006bcc:	00010002 	.word	0x00010002

08006bd0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b088      	sub	sp, #32
 8006bd4:	af02      	add	r7, sp, #8
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	4608      	mov	r0, r1
 8006bda:	4611      	mov	r1, r2
 8006bdc:	461a      	mov	r2, r3
 8006bde:	4603      	mov	r3, r0
 8006be0:	817b      	strh	r3, [r7, #10]
 8006be2:	460b      	mov	r3, r1
 8006be4:	813b      	strh	r3, [r7, #8]
 8006be6:	4613      	mov	r3, r2
 8006be8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	681a      	ldr	r2, [r3, #0]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006bf8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c08:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0c:	9300      	str	r3, [sp, #0]
 8006c0e:	6a3b      	ldr	r3, [r7, #32]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006c16:	68f8      	ldr	r0, [r7, #12]
 8006c18:	f000 f8c0 	bl	8006d9c <I2C_WaitOnFlagUntilTimeout>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d00c      	beq.n	8006c3c <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d003      	beq.n	8006c38 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c36:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006c38:	2303      	movs	r3, #3
 8006c3a:	e0a9      	b.n	8006d90 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006c3c:	897b      	ldrh	r3, [r7, #10]
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	461a      	mov	r2, r3
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006c4a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4e:	6a3a      	ldr	r2, [r7, #32]
 8006c50:	4951      	ldr	r1, [pc, #324]	; (8006d98 <I2C_RequestMemoryRead+0x1c8>)
 8006c52:	68f8      	ldr	r0, [r7, #12]
 8006c54:	f000 f8f9 	bl	8006e4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d001      	beq.n	8006c62 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e096      	b.n	8006d90 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c62:	2300      	movs	r3, #0
 8006c64:	617b      	str	r3, [r7, #20]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	695b      	ldr	r3, [r3, #20]
 8006c6c:	617b      	str	r3, [r7, #20]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	699b      	ldr	r3, [r3, #24]
 8006c74:	617b      	str	r3, [r7, #20]
 8006c76:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c7a:	6a39      	ldr	r1, [r7, #32]
 8006c7c:	68f8      	ldr	r0, [r7, #12]
 8006c7e:	f000 f963 	bl	8006f48 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c82:	4603      	mov	r3, r0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d00d      	beq.n	8006ca4 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8c:	2b04      	cmp	r3, #4
 8006c8e:	d107      	bne.n	8006ca0 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c9e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e075      	b.n	8006d90 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006ca4:	88fb      	ldrh	r3, [r7, #6]
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d105      	bne.n	8006cb6 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006caa:	893b      	ldrh	r3, [r7, #8]
 8006cac:	b2da      	uxtb	r2, r3
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	611a      	str	r2, [r3, #16]
 8006cb4:	e021      	b.n	8006cfa <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006cb6:	893b      	ldrh	r3, [r7, #8]
 8006cb8:	0a1b      	lsrs	r3, r3, #8
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	b2da      	uxtb	r2, r3
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cc6:	6a39      	ldr	r1, [r7, #32]
 8006cc8:	68f8      	ldr	r0, [r7, #12]
 8006cca:	f000 f93d 	bl	8006f48 <I2C_WaitOnTXEFlagUntilTimeout>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d00d      	beq.n	8006cf0 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd8:	2b04      	cmp	r3, #4
 8006cda:	d107      	bne.n	8006cec <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	e04f      	b.n	8006d90 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006cf0:	893b      	ldrh	r3, [r7, #8]
 8006cf2:	b2da      	uxtb	r2, r3
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cfc:	6a39      	ldr	r1, [r7, #32]
 8006cfe:	68f8      	ldr	r0, [r7, #12]
 8006d00:	f000 f922 	bl	8006f48 <I2C_WaitOnTXEFlagUntilTimeout>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d00d      	beq.n	8006d26 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0e:	2b04      	cmp	r3, #4
 8006d10:	d107      	bne.n	8006d22 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d20:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	e034      	b.n	8006d90 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d34:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d38:	9300      	str	r3, [sp, #0]
 8006d3a:	6a3b      	ldr	r3, [r7, #32]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006d42:	68f8      	ldr	r0, [r7, #12]
 8006d44:	f000 f82a 	bl	8006d9c <I2C_WaitOnFlagUntilTimeout>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d00c      	beq.n	8006d68 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d003      	beq.n	8006d64 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d62:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006d64:	2303      	movs	r3, #3
 8006d66:	e013      	b.n	8006d90 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006d68:	897b      	ldrh	r3, [r7, #10]
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	f043 0301 	orr.w	r3, r3, #1
 8006d70:	b2da      	uxtb	r2, r3
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7a:	6a3a      	ldr	r2, [r7, #32]
 8006d7c:	4906      	ldr	r1, [pc, #24]	; (8006d98 <I2C_RequestMemoryRead+0x1c8>)
 8006d7e:	68f8      	ldr	r0, [r7, #12]
 8006d80:	f000 f863 	bl	8006e4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d001      	beq.n	8006d8e <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e000      	b.n	8006d90 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8006d8e:	2300      	movs	r3, #0
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3718      	adds	r7, #24
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}
 8006d98:	00010002 	.word	0x00010002

08006d9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b084      	sub	sp, #16
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	60b9      	str	r1, [r7, #8]
 8006da6:	603b      	str	r3, [r7, #0]
 8006da8:	4613      	mov	r3, r2
 8006daa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006dac:	e025      	b.n	8006dfa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006db4:	d021      	beq.n	8006dfa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006db6:	f7fd ff4d 	bl	8004c54 <HAL_GetTick>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	69bb      	ldr	r3, [r7, #24]
 8006dbe:	1ad3      	subs	r3, r2, r3
 8006dc0:	683a      	ldr	r2, [r7, #0]
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d302      	bcc.n	8006dcc <I2C_WaitOnFlagUntilTimeout+0x30>
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d116      	bne.n	8006dfa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2220      	movs	r2, #32
 8006dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de6:	f043 0220 	orr.w	r2, r3, #32
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2200      	movs	r2, #0
 8006df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	e023      	b.n	8006e42 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	0c1b      	lsrs	r3, r3, #16
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d10d      	bne.n	8006e20 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	695b      	ldr	r3, [r3, #20]
 8006e0a:	43da      	mvns	r2, r3
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	4013      	ands	r3, r2
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	bf0c      	ite	eq
 8006e16:	2301      	moveq	r3, #1
 8006e18:	2300      	movne	r3, #0
 8006e1a:	b2db      	uxtb	r3, r3
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	e00c      	b.n	8006e3a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	699b      	ldr	r3, [r3, #24]
 8006e26:	43da      	mvns	r2, r3
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	4013      	ands	r3, r2
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	bf0c      	ite	eq
 8006e32:	2301      	moveq	r3, #1
 8006e34:	2300      	movne	r3, #0
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	461a      	mov	r2, r3
 8006e3a:	79fb      	ldrb	r3, [r7, #7]
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d0b6      	beq.n	8006dae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006e40:	2300      	movs	r3, #0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3710      	adds	r7, #16
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}

08006e4a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006e4a:	b580      	push	{r7, lr}
 8006e4c:	b084      	sub	sp, #16
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	60f8      	str	r0, [r7, #12]
 8006e52:	60b9      	str	r1, [r7, #8]
 8006e54:	607a      	str	r2, [r7, #4]
 8006e56:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006e58:	e051      	b.n	8006efe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	695b      	ldr	r3, [r3, #20]
 8006e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e68:	d123      	bne.n	8006eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e78:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006e82:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2200      	movs	r2, #0
 8006e88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2220      	movs	r2, #32
 8006e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e9e:	f043 0204 	orr.w	r2, r3, #4
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e046      	b.n	8006f40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eb8:	d021      	beq.n	8006efe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006eba:	f7fd fecb 	bl	8004c54 <HAL_GetTick>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	1ad3      	subs	r3, r2, r3
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d302      	bcc.n	8006ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d116      	bne.n	8006efe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2220      	movs	r2, #32
 8006eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eea:	f043 0220 	orr.w	r2, r3, #32
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	e020      	b.n	8006f40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	0c1b      	lsrs	r3, r3, #16
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d10c      	bne.n	8006f22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	695b      	ldr	r3, [r3, #20]
 8006f0e:	43da      	mvns	r2, r3
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	4013      	ands	r3, r2
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	bf14      	ite	ne
 8006f1a:	2301      	movne	r3, #1
 8006f1c:	2300      	moveq	r3, #0
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	e00b      	b.n	8006f3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	699b      	ldr	r3, [r3, #24]
 8006f28:	43da      	mvns	r2, r3
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	4013      	ands	r3, r2
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	bf14      	ite	ne
 8006f34:	2301      	movne	r3, #1
 8006f36:	2300      	moveq	r3, #0
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d18d      	bne.n	8006e5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006f3e:	2300      	movs	r3, #0
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3710      	adds	r7, #16
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	60b9      	str	r1, [r7, #8]
 8006f52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006f54:	e02d      	b.n	8006fb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006f56:	68f8      	ldr	r0, [r7, #12]
 8006f58:	f000 f8ce 	bl	80070f8 <I2C_IsAcknowledgeFailed>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d001      	beq.n	8006f66 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	e02d      	b.n	8006fc2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f6c:	d021      	beq.n	8006fb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f6e:	f7fd fe71 	bl	8004c54 <HAL_GetTick>
 8006f72:	4602      	mov	r2, r0
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	1ad3      	subs	r3, r2, r3
 8006f78:	68ba      	ldr	r2, [r7, #8]
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d302      	bcc.n	8006f84 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d116      	bne.n	8006fb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2200      	movs	r2, #0
 8006f88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2220      	movs	r2, #32
 8006f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f9e:	f043 0220 	orr.w	r2, r3, #32
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e007      	b.n	8006fc2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	695b      	ldr	r3, [r3, #20]
 8006fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fbc:	2b80      	cmp	r3, #128	; 0x80
 8006fbe:	d1ca      	bne.n	8006f56 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3710      	adds	r7, #16
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b084      	sub	sp, #16
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	60f8      	str	r0, [r7, #12]
 8006fd2:	60b9      	str	r1, [r7, #8]
 8006fd4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006fd6:	e02d      	b.n	8007034 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006fd8:	68f8      	ldr	r0, [r7, #12]
 8006fda:	f000 f88d 	bl	80070f8 <I2C_IsAcknowledgeFailed>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d001      	beq.n	8006fe8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	e02d      	b.n	8007044 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fee:	d021      	beq.n	8007034 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ff0:	f7fd fe30 	bl	8004c54 <HAL_GetTick>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	1ad3      	subs	r3, r2, r3
 8006ffa:	68ba      	ldr	r2, [r7, #8]
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d302      	bcc.n	8007006 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d116      	bne.n	8007034 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2200      	movs	r2, #0
 800700a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2220      	movs	r2, #32
 8007010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2200      	movs	r2, #0
 8007018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007020:	f043 0220 	orr.w	r2, r3, #32
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2200      	movs	r2, #0
 800702c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	e007      	b.n	8007044 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	695b      	ldr	r3, [r3, #20]
 800703a:	f003 0304 	and.w	r3, r3, #4
 800703e:	2b04      	cmp	r3, #4
 8007040:	d1ca      	bne.n	8006fd8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007042:	2300      	movs	r3, #0
}
 8007044:	4618      	mov	r0, r3
 8007046:	3710      	adds	r7, #16
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}

0800704c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b084      	sub	sp, #16
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007058:	e042      	b.n	80070e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	695b      	ldr	r3, [r3, #20]
 8007060:	f003 0310 	and.w	r3, r3, #16
 8007064:	2b10      	cmp	r3, #16
 8007066:	d119      	bne.n	800709c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f06f 0210 	mvn.w	r2, #16
 8007070:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2200      	movs	r2, #0
 8007076:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2220      	movs	r2, #32
 800707c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2200      	movs	r2, #0
 8007084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2200      	movs	r2, #0
 8007094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007098:	2301      	movs	r3, #1
 800709a:	e029      	b.n	80070f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800709c:	f7fd fdda 	bl	8004c54 <HAL_GetTick>
 80070a0:	4602      	mov	r2, r0
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	1ad3      	subs	r3, r2, r3
 80070a6:	68ba      	ldr	r2, [r7, #8]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d302      	bcc.n	80070b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d116      	bne.n	80070e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2200      	movs	r2, #0
 80070b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2220      	movs	r2, #32
 80070bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2200      	movs	r2, #0
 80070c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070cc:	f043 0220 	orr.w	r2, r3, #32
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2200      	movs	r2, #0
 80070d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	e007      	b.n	80070f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	695b      	ldr	r3, [r3, #20]
 80070e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ea:	2b40      	cmp	r3, #64	; 0x40
 80070ec:	d1b5      	bne.n	800705a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80070ee:	2300      	movs	r3, #0
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3710      	adds	r7, #16
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b083      	sub	sp, #12
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	695b      	ldr	r3, [r3, #20]
 8007106:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800710a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800710e:	d11b      	bne.n	8007148 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007118:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2200      	movs	r2, #0
 800711e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2220      	movs	r2, #32
 8007124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007134:	f043 0204 	orr.w	r2, r3, #4
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2200      	movs	r2, #0
 8007140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007144:	2301      	movs	r3, #1
 8007146:	e000      	b.n	800714a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007148:	2300      	movs	r3, #0
}
 800714a:	4618      	mov	r0, r3
 800714c:	370c      	adds	r7, #12
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr
	...

08007158 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b086      	sub	sp, #24
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d101      	bne.n	800716a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	e25b      	b.n	8007622 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f003 0301 	and.w	r3, r3, #1
 8007172:	2b00      	cmp	r3, #0
 8007174:	d075      	beq.n	8007262 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007176:	4ba3      	ldr	r3, [pc, #652]	; (8007404 <HAL_RCC_OscConfig+0x2ac>)
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	f003 030c 	and.w	r3, r3, #12
 800717e:	2b04      	cmp	r3, #4
 8007180:	d00c      	beq.n	800719c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007182:	4ba0      	ldr	r3, [pc, #640]	; (8007404 <HAL_RCC_OscConfig+0x2ac>)
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800718a:	2b08      	cmp	r3, #8
 800718c:	d112      	bne.n	80071b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800718e:	4b9d      	ldr	r3, [pc, #628]	; (8007404 <HAL_RCC_OscConfig+0x2ac>)
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007196:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800719a:	d10b      	bne.n	80071b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800719c:	4b99      	ldr	r3, [pc, #612]	; (8007404 <HAL_RCC_OscConfig+0x2ac>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d05b      	beq.n	8007260 <HAL_RCC_OscConfig+0x108>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d157      	bne.n	8007260 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	e236      	b.n	8007622 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071bc:	d106      	bne.n	80071cc <HAL_RCC_OscConfig+0x74>
 80071be:	4b91      	ldr	r3, [pc, #580]	; (8007404 <HAL_RCC_OscConfig+0x2ac>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a90      	ldr	r2, [pc, #576]	; (8007404 <HAL_RCC_OscConfig+0x2ac>)
 80071c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071c8:	6013      	str	r3, [r2, #0]
 80071ca:	e01d      	b.n	8007208 <HAL_RCC_OscConfig+0xb0>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80071d4:	d10c      	bne.n	80071f0 <HAL_RCC_OscConfig+0x98>
 80071d6:	4b8b      	ldr	r3, [pc, #556]	; (8007404 <HAL_RCC_OscConfig+0x2ac>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a8a      	ldr	r2, [pc, #552]	; (8007404 <HAL_RCC_OscConfig+0x2ac>)
 80071dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80071e0:	6013      	str	r3, [r2, #0]
 80071e2:	4b88      	ldr	r3, [pc, #544]	; (8007404 <HAL_RCC_OscConfig+0x2ac>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a87      	ldr	r2, [pc, #540]	; (8007404 <HAL_RCC_OscConfig+0x2ac>)
 80071e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071ec:	6013      	str	r3, [r2, #0]
 80071ee:	e00b      	b.n	8007208 <HAL_RCC_OscConfig+0xb0>
 80071f0:	4b84      	ldr	r3, [pc, #528]	; (8007404 <HAL_RCC_OscConfig+0x2ac>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a83      	ldr	r2, [pc, #524]	; (8007404 <HAL_RCC_OscConfig+0x2ac>)
 80071f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071fa:	6013      	str	r3, [r2, #0]
 80071fc:	4b81      	ldr	r3, [pc, #516]	; (8007404 <HAL_RCC_OscConfig+0x2ac>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a80      	ldr	r2, [pc, #512]	; (8007404 <HAL_RCC_OscConfig+0x2ac>)
 8007202:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007206:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d013      	beq.n	8007238 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007210:	f7fd fd20 	bl	8004c54 <HAL_GetTick>
 8007214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007216:	e008      	b.n	800722a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007218:	f7fd fd1c 	bl	8004c54 <HAL_GetTick>
 800721c:	4602      	mov	r2, r0
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	1ad3      	subs	r3, r2, r3
 8007222:	2b64      	cmp	r3, #100	; 0x64
 8007224:	d901      	bls.n	800722a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007226:	2303      	movs	r3, #3
 8007228:	e1fb      	b.n	8007622 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800722a:	4b76      	ldr	r3, [pc, #472]	; (8007404 <HAL_RCC_OscConfig+0x2ac>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007232:	2b00      	cmp	r3, #0
 8007234:	d0f0      	beq.n	8007218 <HAL_RCC_OscConfig+0xc0>
 8007236:	e014      	b.n	8007262 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007238:	f7fd fd0c 	bl	8004c54 <HAL_GetTick>
 800723c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800723e:	e008      	b.n	8007252 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007240:	f7fd fd08 	bl	8004c54 <HAL_GetTick>
 8007244:	4602      	mov	r2, r0
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	1ad3      	subs	r3, r2, r3
 800724a:	2b64      	cmp	r3, #100	; 0x64
 800724c:	d901      	bls.n	8007252 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800724e:	2303      	movs	r3, #3
 8007250:	e1e7      	b.n	8007622 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007252:	4b6c      	ldr	r3, [pc, #432]	; (8007404 <HAL_RCC_OscConfig+0x2ac>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800725a:	2b00      	cmp	r3, #0
 800725c:	d1f0      	bne.n	8007240 <HAL_RCC_OscConfig+0xe8>
 800725e:	e000      	b.n	8007262 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007260:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f003 0302 	and.w	r3, r3, #2
 800726a:	2b00      	cmp	r3, #0
 800726c:	d063      	beq.n	8007336 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800726e:	4b65      	ldr	r3, [pc, #404]	; (8007404 <HAL_RCC_OscConfig+0x2ac>)
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	f003 030c 	and.w	r3, r3, #12
 8007276:	2b00      	cmp	r3, #0
 8007278:	d00b      	beq.n	8007292 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800727a:	4b62      	ldr	r3, [pc, #392]	; (8007404 <HAL_RCC_OscConfig+0x2ac>)
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007282:	2b08      	cmp	r3, #8
 8007284:	d11c      	bne.n	80072c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007286:	4b5f      	ldr	r3, [pc, #380]	; (8007404 <HAL_RCC_OscConfig+0x2ac>)
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800728e:	2b00      	cmp	r3, #0
 8007290:	d116      	bne.n	80072c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007292:	4b5c      	ldr	r3, [pc, #368]	; (8007404 <HAL_RCC_OscConfig+0x2ac>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f003 0302 	and.w	r3, r3, #2
 800729a:	2b00      	cmp	r3, #0
 800729c:	d005      	beq.n	80072aa <HAL_RCC_OscConfig+0x152>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	68db      	ldr	r3, [r3, #12]
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d001      	beq.n	80072aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	e1bb      	b.n	8007622 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072aa:	4b56      	ldr	r3, [pc, #344]	; (8007404 <HAL_RCC_OscConfig+0x2ac>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	691b      	ldr	r3, [r3, #16]
 80072b6:	00db      	lsls	r3, r3, #3
 80072b8:	4952      	ldr	r1, [pc, #328]	; (8007404 <HAL_RCC_OscConfig+0x2ac>)
 80072ba:	4313      	orrs	r3, r2
 80072bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80072be:	e03a      	b.n	8007336 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	68db      	ldr	r3, [r3, #12]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d020      	beq.n	800730a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80072c8:	4b4f      	ldr	r3, [pc, #316]	; (8007408 <HAL_RCC_OscConfig+0x2b0>)
 80072ca:	2201      	movs	r2, #1
 80072cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072ce:	f7fd fcc1 	bl	8004c54 <HAL_GetTick>
 80072d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072d4:	e008      	b.n	80072e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80072d6:	f7fd fcbd 	bl	8004c54 <HAL_GetTick>
 80072da:	4602      	mov	r2, r0
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	1ad3      	subs	r3, r2, r3
 80072e0:	2b02      	cmp	r3, #2
 80072e2:	d901      	bls.n	80072e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80072e4:	2303      	movs	r3, #3
 80072e6:	e19c      	b.n	8007622 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072e8:	4b46      	ldr	r3, [pc, #280]	; (8007404 <HAL_RCC_OscConfig+0x2ac>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f003 0302 	and.w	r3, r3, #2
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d0f0      	beq.n	80072d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072f4:	4b43      	ldr	r3, [pc, #268]	; (8007404 <HAL_RCC_OscConfig+0x2ac>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	691b      	ldr	r3, [r3, #16]
 8007300:	00db      	lsls	r3, r3, #3
 8007302:	4940      	ldr	r1, [pc, #256]	; (8007404 <HAL_RCC_OscConfig+0x2ac>)
 8007304:	4313      	orrs	r3, r2
 8007306:	600b      	str	r3, [r1, #0]
 8007308:	e015      	b.n	8007336 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800730a:	4b3f      	ldr	r3, [pc, #252]	; (8007408 <HAL_RCC_OscConfig+0x2b0>)
 800730c:	2200      	movs	r2, #0
 800730e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007310:	f7fd fca0 	bl	8004c54 <HAL_GetTick>
 8007314:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007316:	e008      	b.n	800732a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007318:	f7fd fc9c 	bl	8004c54 <HAL_GetTick>
 800731c:	4602      	mov	r2, r0
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	1ad3      	subs	r3, r2, r3
 8007322:	2b02      	cmp	r3, #2
 8007324:	d901      	bls.n	800732a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007326:	2303      	movs	r3, #3
 8007328:	e17b      	b.n	8007622 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800732a:	4b36      	ldr	r3, [pc, #216]	; (8007404 <HAL_RCC_OscConfig+0x2ac>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f003 0302 	and.w	r3, r3, #2
 8007332:	2b00      	cmp	r3, #0
 8007334:	d1f0      	bne.n	8007318 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f003 0308 	and.w	r3, r3, #8
 800733e:	2b00      	cmp	r3, #0
 8007340:	d030      	beq.n	80073a4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	695b      	ldr	r3, [r3, #20]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d016      	beq.n	8007378 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800734a:	4b30      	ldr	r3, [pc, #192]	; (800740c <HAL_RCC_OscConfig+0x2b4>)
 800734c:	2201      	movs	r2, #1
 800734e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007350:	f7fd fc80 	bl	8004c54 <HAL_GetTick>
 8007354:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007356:	e008      	b.n	800736a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007358:	f7fd fc7c 	bl	8004c54 <HAL_GetTick>
 800735c:	4602      	mov	r2, r0
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	1ad3      	subs	r3, r2, r3
 8007362:	2b02      	cmp	r3, #2
 8007364:	d901      	bls.n	800736a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007366:	2303      	movs	r3, #3
 8007368:	e15b      	b.n	8007622 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800736a:	4b26      	ldr	r3, [pc, #152]	; (8007404 <HAL_RCC_OscConfig+0x2ac>)
 800736c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800736e:	f003 0302 	and.w	r3, r3, #2
 8007372:	2b00      	cmp	r3, #0
 8007374:	d0f0      	beq.n	8007358 <HAL_RCC_OscConfig+0x200>
 8007376:	e015      	b.n	80073a4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007378:	4b24      	ldr	r3, [pc, #144]	; (800740c <HAL_RCC_OscConfig+0x2b4>)
 800737a:	2200      	movs	r2, #0
 800737c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800737e:	f7fd fc69 	bl	8004c54 <HAL_GetTick>
 8007382:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007384:	e008      	b.n	8007398 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007386:	f7fd fc65 	bl	8004c54 <HAL_GetTick>
 800738a:	4602      	mov	r2, r0
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	1ad3      	subs	r3, r2, r3
 8007390:	2b02      	cmp	r3, #2
 8007392:	d901      	bls.n	8007398 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007394:	2303      	movs	r3, #3
 8007396:	e144      	b.n	8007622 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007398:	4b1a      	ldr	r3, [pc, #104]	; (8007404 <HAL_RCC_OscConfig+0x2ac>)
 800739a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800739c:	f003 0302 	and.w	r3, r3, #2
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d1f0      	bne.n	8007386 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f003 0304 	and.w	r3, r3, #4
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	f000 80a0 	beq.w	80074f2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80073b2:	2300      	movs	r3, #0
 80073b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80073b6:	4b13      	ldr	r3, [pc, #76]	; (8007404 <HAL_RCC_OscConfig+0x2ac>)
 80073b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d10f      	bne.n	80073e2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80073c2:	2300      	movs	r3, #0
 80073c4:	60bb      	str	r3, [r7, #8]
 80073c6:	4b0f      	ldr	r3, [pc, #60]	; (8007404 <HAL_RCC_OscConfig+0x2ac>)
 80073c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ca:	4a0e      	ldr	r2, [pc, #56]	; (8007404 <HAL_RCC_OscConfig+0x2ac>)
 80073cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073d0:	6413      	str	r3, [r2, #64]	; 0x40
 80073d2:	4b0c      	ldr	r3, [pc, #48]	; (8007404 <HAL_RCC_OscConfig+0x2ac>)
 80073d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073da:	60bb      	str	r3, [r7, #8]
 80073dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80073de:	2301      	movs	r3, #1
 80073e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073e2:	4b0b      	ldr	r3, [pc, #44]	; (8007410 <HAL_RCC_OscConfig+0x2b8>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d121      	bne.n	8007432 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80073ee:	4b08      	ldr	r3, [pc, #32]	; (8007410 <HAL_RCC_OscConfig+0x2b8>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a07      	ldr	r2, [pc, #28]	; (8007410 <HAL_RCC_OscConfig+0x2b8>)
 80073f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80073fa:	f7fd fc2b 	bl	8004c54 <HAL_GetTick>
 80073fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007400:	e011      	b.n	8007426 <HAL_RCC_OscConfig+0x2ce>
 8007402:	bf00      	nop
 8007404:	40023800 	.word	0x40023800
 8007408:	42470000 	.word	0x42470000
 800740c:	42470e80 	.word	0x42470e80
 8007410:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007414:	f7fd fc1e 	bl	8004c54 <HAL_GetTick>
 8007418:	4602      	mov	r2, r0
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	1ad3      	subs	r3, r2, r3
 800741e:	2b02      	cmp	r3, #2
 8007420:	d901      	bls.n	8007426 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007422:	2303      	movs	r3, #3
 8007424:	e0fd      	b.n	8007622 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007426:	4b81      	ldr	r3, [pc, #516]	; (800762c <HAL_RCC_OscConfig+0x4d4>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800742e:	2b00      	cmp	r3, #0
 8007430:	d0f0      	beq.n	8007414 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	2b01      	cmp	r3, #1
 8007438:	d106      	bne.n	8007448 <HAL_RCC_OscConfig+0x2f0>
 800743a:	4b7d      	ldr	r3, [pc, #500]	; (8007630 <HAL_RCC_OscConfig+0x4d8>)
 800743c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800743e:	4a7c      	ldr	r2, [pc, #496]	; (8007630 <HAL_RCC_OscConfig+0x4d8>)
 8007440:	f043 0301 	orr.w	r3, r3, #1
 8007444:	6713      	str	r3, [r2, #112]	; 0x70
 8007446:	e01c      	b.n	8007482 <HAL_RCC_OscConfig+0x32a>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	2b05      	cmp	r3, #5
 800744e:	d10c      	bne.n	800746a <HAL_RCC_OscConfig+0x312>
 8007450:	4b77      	ldr	r3, [pc, #476]	; (8007630 <HAL_RCC_OscConfig+0x4d8>)
 8007452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007454:	4a76      	ldr	r2, [pc, #472]	; (8007630 <HAL_RCC_OscConfig+0x4d8>)
 8007456:	f043 0304 	orr.w	r3, r3, #4
 800745a:	6713      	str	r3, [r2, #112]	; 0x70
 800745c:	4b74      	ldr	r3, [pc, #464]	; (8007630 <HAL_RCC_OscConfig+0x4d8>)
 800745e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007460:	4a73      	ldr	r2, [pc, #460]	; (8007630 <HAL_RCC_OscConfig+0x4d8>)
 8007462:	f043 0301 	orr.w	r3, r3, #1
 8007466:	6713      	str	r3, [r2, #112]	; 0x70
 8007468:	e00b      	b.n	8007482 <HAL_RCC_OscConfig+0x32a>
 800746a:	4b71      	ldr	r3, [pc, #452]	; (8007630 <HAL_RCC_OscConfig+0x4d8>)
 800746c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800746e:	4a70      	ldr	r2, [pc, #448]	; (8007630 <HAL_RCC_OscConfig+0x4d8>)
 8007470:	f023 0301 	bic.w	r3, r3, #1
 8007474:	6713      	str	r3, [r2, #112]	; 0x70
 8007476:	4b6e      	ldr	r3, [pc, #440]	; (8007630 <HAL_RCC_OscConfig+0x4d8>)
 8007478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800747a:	4a6d      	ldr	r2, [pc, #436]	; (8007630 <HAL_RCC_OscConfig+0x4d8>)
 800747c:	f023 0304 	bic.w	r3, r3, #4
 8007480:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d015      	beq.n	80074b6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800748a:	f7fd fbe3 	bl	8004c54 <HAL_GetTick>
 800748e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007490:	e00a      	b.n	80074a8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007492:	f7fd fbdf 	bl	8004c54 <HAL_GetTick>
 8007496:	4602      	mov	r2, r0
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	1ad3      	subs	r3, r2, r3
 800749c:	f241 3288 	movw	r2, #5000	; 0x1388
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d901      	bls.n	80074a8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80074a4:	2303      	movs	r3, #3
 80074a6:	e0bc      	b.n	8007622 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074a8:	4b61      	ldr	r3, [pc, #388]	; (8007630 <HAL_RCC_OscConfig+0x4d8>)
 80074aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ac:	f003 0302 	and.w	r3, r3, #2
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d0ee      	beq.n	8007492 <HAL_RCC_OscConfig+0x33a>
 80074b4:	e014      	b.n	80074e0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80074b6:	f7fd fbcd 	bl	8004c54 <HAL_GetTick>
 80074ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80074bc:	e00a      	b.n	80074d4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80074be:	f7fd fbc9 	bl	8004c54 <HAL_GetTick>
 80074c2:	4602      	mov	r2, r0
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	1ad3      	subs	r3, r2, r3
 80074c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d901      	bls.n	80074d4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80074d0:	2303      	movs	r3, #3
 80074d2:	e0a6      	b.n	8007622 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80074d4:	4b56      	ldr	r3, [pc, #344]	; (8007630 <HAL_RCC_OscConfig+0x4d8>)
 80074d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074d8:	f003 0302 	and.w	r3, r3, #2
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d1ee      	bne.n	80074be <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80074e0:	7dfb      	ldrb	r3, [r7, #23]
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d105      	bne.n	80074f2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074e6:	4b52      	ldr	r3, [pc, #328]	; (8007630 <HAL_RCC_OscConfig+0x4d8>)
 80074e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ea:	4a51      	ldr	r2, [pc, #324]	; (8007630 <HAL_RCC_OscConfig+0x4d8>)
 80074ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074f0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	699b      	ldr	r3, [r3, #24]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	f000 8092 	beq.w	8007620 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80074fc:	4b4c      	ldr	r3, [pc, #304]	; (8007630 <HAL_RCC_OscConfig+0x4d8>)
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	f003 030c 	and.w	r3, r3, #12
 8007504:	2b08      	cmp	r3, #8
 8007506:	d05c      	beq.n	80075c2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	699b      	ldr	r3, [r3, #24]
 800750c:	2b02      	cmp	r3, #2
 800750e:	d141      	bne.n	8007594 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007510:	4b48      	ldr	r3, [pc, #288]	; (8007634 <HAL_RCC_OscConfig+0x4dc>)
 8007512:	2200      	movs	r2, #0
 8007514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007516:	f7fd fb9d 	bl	8004c54 <HAL_GetTick>
 800751a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800751c:	e008      	b.n	8007530 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800751e:	f7fd fb99 	bl	8004c54 <HAL_GetTick>
 8007522:	4602      	mov	r2, r0
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	1ad3      	subs	r3, r2, r3
 8007528:	2b02      	cmp	r3, #2
 800752a:	d901      	bls.n	8007530 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800752c:	2303      	movs	r3, #3
 800752e:	e078      	b.n	8007622 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007530:	4b3f      	ldr	r3, [pc, #252]	; (8007630 <HAL_RCC_OscConfig+0x4d8>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007538:	2b00      	cmp	r3, #0
 800753a:	d1f0      	bne.n	800751e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	69da      	ldr	r2, [r3, #28]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6a1b      	ldr	r3, [r3, #32]
 8007544:	431a      	orrs	r2, r3
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754a:	019b      	lsls	r3, r3, #6
 800754c:	431a      	orrs	r2, r3
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007552:	085b      	lsrs	r3, r3, #1
 8007554:	3b01      	subs	r3, #1
 8007556:	041b      	lsls	r3, r3, #16
 8007558:	431a      	orrs	r2, r3
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800755e:	061b      	lsls	r3, r3, #24
 8007560:	4933      	ldr	r1, [pc, #204]	; (8007630 <HAL_RCC_OscConfig+0x4d8>)
 8007562:	4313      	orrs	r3, r2
 8007564:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007566:	4b33      	ldr	r3, [pc, #204]	; (8007634 <HAL_RCC_OscConfig+0x4dc>)
 8007568:	2201      	movs	r2, #1
 800756a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800756c:	f7fd fb72 	bl	8004c54 <HAL_GetTick>
 8007570:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007572:	e008      	b.n	8007586 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007574:	f7fd fb6e 	bl	8004c54 <HAL_GetTick>
 8007578:	4602      	mov	r2, r0
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	1ad3      	subs	r3, r2, r3
 800757e:	2b02      	cmp	r3, #2
 8007580:	d901      	bls.n	8007586 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007582:	2303      	movs	r3, #3
 8007584:	e04d      	b.n	8007622 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007586:	4b2a      	ldr	r3, [pc, #168]	; (8007630 <HAL_RCC_OscConfig+0x4d8>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800758e:	2b00      	cmp	r3, #0
 8007590:	d0f0      	beq.n	8007574 <HAL_RCC_OscConfig+0x41c>
 8007592:	e045      	b.n	8007620 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007594:	4b27      	ldr	r3, [pc, #156]	; (8007634 <HAL_RCC_OscConfig+0x4dc>)
 8007596:	2200      	movs	r2, #0
 8007598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800759a:	f7fd fb5b 	bl	8004c54 <HAL_GetTick>
 800759e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075a0:	e008      	b.n	80075b4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80075a2:	f7fd fb57 	bl	8004c54 <HAL_GetTick>
 80075a6:	4602      	mov	r2, r0
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	1ad3      	subs	r3, r2, r3
 80075ac:	2b02      	cmp	r3, #2
 80075ae:	d901      	bls.n	80075b4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80075b0:	2303      	movs	r3, #3
 80075b2:	e036      	b.n	8007622 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075b4:	4b1e      	ldr	r3, [pc, #120]	; (8007630 <HAL_RCC_OscConfig+0x4d8>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d1f0      	bne.n	80075a2 <HAL_RCC_OscConfig+0x44a>
 80075c0:	e02e      	b.n	8007620 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	699b      	ldr	r3, [r3, #24]
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d101      	bne.n	80075ce <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	e029      	b.n	8007622 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80075ce:	4b18      	ldr	r3, [pc, #96]	; (8007630 <HAL_RCC_OscConfig+0x4d8>)
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	69db      	ldr	r3, [r3, #28]
 80075de:	429a      	cmp	r2, r3
 80075e0:	d11c      	bne.n	800761c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d115      	bne.n	800761c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80075f0:	68fa      	ldr	r2, [r7, #12]
 80075f2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80075f6:	4013      	ands	r3, r2
 80075f8:	687a      	ldr	r2, [r7, #4]
 80075fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d10d      	bne.n	800761c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800760a:	429a      	cmp	r2, r3
 800760c:	d106      	bne.n	800761c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007618:	429a      	cmp	r2, r3
 800761a:	d001      	beq.n	8007620 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	e000      	b.n	8007622 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8007620:	2300      	movs	r3, #0
}
 8007622:	4618      	mov	r0, r3
 8007624:	3718      	adds	r7, #24
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}
 800762a:	bf00      	nop
 800762c:	40007000 	.word	0x40007000
 8007630:	40023800 	.word	0x40023800
 8007634:	42470060 	.word	0x42470060

08007638 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b084      	sub	sp, #16
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d101      	bne.n	800764c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007648:	2301      	movs	r3, #1
 800764a:	e0cc      	b.n	80077e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800764c:	4b68      	ldr	r3, [pc, #416]	; (80077f0 <HAL_RCC_ClockConfig+0x1b8>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f003 030f 	and.w	r3, r3, #15
 8007654:	683a      	ldr	r2, [r7, #0]
 8007656:	429a      	cmp	r2, r3
 8007658:	d90c      	bls.n	8007674 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800765a:	4b65      	ldr	r3, [pc, #404]	; (80077f0 <HAL_RCC_ClockConfig+0x1b8>)
 800765c:	683a      	ldr	r2, [r7, #0]
 800765e:	b2d2      	uxtb	r2, r2
 8007660:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007662:	4b63      	ldr	r3, [pc, #396]	; (80077f0 <HAL_RCC_ClockConfig+0x1b8>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f003 030f 	and.w	r3, r3, #15
 800766a:	683a      	ldr	r2, [r7, #0]
 800766c:	429a      	cmp	r2, r3
 800766e:	d001      	beq.n	8007674 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007670:	2301      	movs	r3, #1
 8007672:	e0b8      	b.n	80077e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f003 0302 	and.w	r3, r3, #2
 800767c:	2b00      	cmp	r3, #0
 800767e:	d020      	beq.n	80076c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f003 0304 	and.w	r3, r3, #4
 8007688:	2b00      	cmp	r3, #0
 800768a:	d005      	beq.n	8007698 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800768c:	4b59      	ldr	r3, [pc, #356]	; (80077f4 <HAL_RCC_ClockConfig+0x1bc>)
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	4a58      	ldr	r2, [pc, #352]	; (80077f4 <HAL_RCC_ClockConfig+0x1bc>)
 8007692:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007696:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f003 0308 	and.w	r3, r3, #8
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d005      	beq.n	80076b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80076a4:	4b53      	ldr	r3, [pc, #332]	; (80077f4 <HAL_RCC_ClockConfig+0x1bc>)
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	4a52      	ldr	r2, [pc, #328]	; (80077f4 <HAL_RCC_ClockConfig+0x1bc>)
 80076aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80076ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80076b0:	4b50      	ldr	r3, [pc, #320]	; (80077f4 <HAL_RCC_ClockConfig+0x1bc>)
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	494d      	ldr	r1, [pc, #308]	; (80077f4 <HAL_RCC_ClockConfig+0x1bc>)
 80076be:	4313      	orrs	r3, r2
 80076c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f003 0301 	and.w	r3, r3, #1
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d044      	beq.n	8007758 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d107      	bne.n	80076e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076d6:	4b47      	ldr	r3, [pc, #284]	; (80077f4 <HAL_RCC_ClockConfig+0x1bc>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d119      	bne.n	8007716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	e07f      	b.n	80077e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	2b02      	cmp	r3, #2
 80076ec:	d003      	beq.n	80076f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80076f2:	2b03      	cmp	r3, #3
 80076f4:	d107      	bne.n	8007706 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076f6:	4b3f      	ldr	r3, [pc, #252]	; (80077f4 <HAL_RCC_ClockConfig+0x1bc>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d109      	bne.n	8007716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007702:	2301      	movs	r3, #1
 8007704:	e06f      	b.n	80077e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007706:	4b3b      	ldr	r3, [pc, #236]	; (80077f4 <HAL_RCC_ClockConfig+0x1bc>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f003 0302 	and.w	r3, r3, #2
 800770e:	2b00      	cmp	r3, #0
 8007710:	d101      	bne.n	8007716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007712:	2301      	movs	r3, #1
 8007714:	e067      	b.n	80077e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007716:	4b37      	ldr	r3, [pc, #220]	; (80077f4 <HAL_RCC_ClockConfig+0x1bc>)
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	f023 0203 	bic.w	r2, r3, #3
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	4934      	ldr	r1, [pc, #208]	; (80077f4 <HAL_RCC_ClockConfig+0x1bc>)
 8007724:	4313      	orrs	r3, r2
 8007726:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007728:	f7fd fa94 	bl	8004c54 <HAL_GetTick>
 800772c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800772e:	e00a      	b.n	8007746 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007730:	f7fd fa90 	bl	8004c54 <HAL_GetTick>
 8007734:	4602      	mov	r2, r0
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	1ad3      	subs	r3, r2, r3
 800773a:	f241 3288 	movw	r2, #5000	; 0x1388
 800773e:	4293      	cmp	r3, r2
 8007740:	d901      	bls.n	8007746 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007742:	2303      	movs	r3, #3
 8007744:	e04f      	b.n	80077e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007746:	4b2b      	ldr	r3, [pc, #172]	; (80077f4 <HAL_RCC_ClockConfig+0x1bc>)
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	f003 020c 	and.w	r2, r3, #12
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	009b      	lsls	r3, r3, #2
 8007754:	429a      	cmp	r2, r3
 8007756:	d1eb      	bne.n	8007730 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007758:	4b25      	ldr	r3, [pc, #148]	; (80077f0 <HAL_RCC_ClockConfig+0x1b8>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f003 030f 	and.w	r3, r3, #15
 8007760:	683a      	ldr	r2, [r7, #0]
 8007762:	429a      	cmp	r2, r3
 8007764:	d20c      	bcs.n	8007780 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007766:	4b22      	ldr	r3, [pc, #136]	; (80077f0 <HAL_RCC_ClockConfig+0x1b8>)
 8007768:	683a      	ldr	r2, [r7, #0]
 800776a:	b2d2      	uxtb	r2, r2
 800776c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800776e:	4b20      	ldr	r3, [pc, #128]	; (80077f0 <HAL_RCC_ClockConfig+0x1b8>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f003 030f 	and.w	r3, r3, #15
 8007776:	683a      	ldr	r2, [r7, #0]
 8007778:	429a      	cmp	r2, r3
 800777a:	d001      	beq.n	8007780 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800777c:	2301      	movs	r3, #1
 800777e:	e032      	b.n	80077e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f003 0304 	and.w	r3, r3, #4
 8007788:	2b00      	cmp	r3, #0
 800778a:	d008      	beq.n	800779e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800778c:	4b19      	ldr	r3, [pc, #100]	; (80077f4 <HAL_RCC_ClockConfig+0x1bc>)
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	68db      	ldr	r3, [r3, #12]
 8007798:	4916      	ldr	r1, [pc, #88]	; (80077f4 <HAL_RCC_ClockConfig+0x1bc>)
 800779a:	4313      	orrs	r3, r2
 800779c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f003 0308 	and.w	r3, r3, #8
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d009      	beq.n	80077be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80077aa:	4b12      	ldr	r3, [pc, #72]	; (80077f4 <HAL_RCC_ClockConfig+0x1bc>)
 80077ac:	689b      	ldr	r3, [r3, #8]
 80077ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	691b      	ldr	r3, [r3, #16]
 80077b6:	00db      	lsls	r3, r3, #3
 80077b8:	490e      	ldr	r1, [pc, #56]	; (80077f4 <HAL_RCC_ClockConfig+0x1bc>)
 80077ba:	4313      	orrs	r3, r2
 80077bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80077be:	f000 f821 	bl	8007804 <HAL_RCC_GetSysClockFreq>
 80077c2:	4601      	mov	r1, r0
 80077c4:	4b0b      	ldr	r3, [pc, #44]	; (80077f4 <HAL_RCC_ClockConfig+0x1bc>)
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	091b      	lsrs	r3, r3, #4
 80077ca:	f003 030f 	and.w	r3, r3, #15
 80077ce:	4a0a      	ldr	r2, [pc, #40]	; (80077f8 <HAL_RCC_ClockConfig+0x1c0>)
 80077d0:	5cd3      	ldrb	r3, [r2, r3]
 80077d2:	fa21 f303 	lsr.w	r3, r1, r3
 80077d6:	4a09      	ldr	r2, [pc, #36]	; (80077fc <HAL_RCC_ClockConfig+0x1c4>)
 80077d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80077da:	4b09      	ldr	r3, [pc, #36]	; (8007800 <HAL_RCC_ClockConfig+0x1c8>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4618      	mov	r0, r3
 80077e0:	f7fd f9f4 	bl	8004bcc <HAL_InitTick>

  return HAL_OK;
 80077e4:	2300      	movs	r3, #0
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3710      	adds	r7, #16
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
 80077ee:	bf00      	nop
 80077f0:	40023c00 	.word	0x40023c00
 80077f4:	40023800 	.word	0x40023800
 80077f8:	0800cf3c 	.word	0x0800cf3c
 80077fc:	20000000 	.word	0x20000000
 8007800:	20000004 	.word	0x20000004

08007804 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007806:	b085      	sub	sp, #20
 8007808:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800780a:	2300      	movs	r3, #0
 800780c:	607b      	str	r3, [r7, #4]
 800780e:	2300      	movs	r3, #0
 8007810:	60fb      	str	r3, [r7, #12]
 8007812:	2300      	movs	r3, #0
 8007814:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007816:	2300      	movs	r3, #0
 8007818:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800781a:	4b63      	ldr	r3, [pc, #396]	; (80079a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	f003 030c 	and.w	r3, r3, #12
 8007822:	2b04      	cmp	r3, #4
 8007824:	d007      	beq.n	8007836 <HAL_RCC_GetSysClockFreq+0x32>
 8007826:	2b08      	cmp	r3, #8
 8007828:	d008      	beq.n	800783c <HAL_RCC_GetSysClockFreq+0x38>
 800782a:	2b00      	cmp	r3, #0
 800782c:	f040 80b4 	bne.w	8007998 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007830:	4b5e      	ldr	r3, [pc, #376]	; (80079ac <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007832:	60bb      	str	r3, [r7, #8]
       break;
 8007834:	e0b3      	b.n	800799e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007836:	4b5d      	ldr	r3, [pc, #372]	; (80079ac <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007838:	60bb      	str	r3, [r7, #8]
      break;
 800783a:	e0b0      	b.n	800799e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800783c:	4b5a      	ldr	r3, [pc, #360]	; (80079a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007844:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007846:	4b58      	ldr	r3, [pc, #352]	; (80079a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800784e:	2b00      	cmp	r3, #0
 8007850:	d04a      	beq.n	80078e8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007852:	4b55      	ldr	r3, [pc, #340]	; (80079a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	099b      	lsrs	r3, r3, #6
 8007858:	f04f 0400 	mov.w	r4, #0
 800785c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007860:	f04f 0200 	mov.w	r2, #0
 8007864:	ea03 0501 	and.w	r5, r3, r1
 8007868:	ea04 0602 	and.w	r6, r4, r2
 800786c:	4629      	mov	r1, r5
 800786e:	4632      	mov	r2, r6
 8007870:	f04f 0300 	mov.w	r3, #0
 8007874:	f04f 0400 	mov.w	r4, #0
 8007878:	0154      	lsls	r4, r2, #5
 800787a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800787e:	014b      	lsls	r3, r1, #5
 8007880:	4619      	mov	r1, r3
 8007882:	4622      	mov	r2, r4
 8007884:	1b49      	subs	r1, r1, r5
 8007886:	eb62 0206 	sbc.w	r2, r2, r6
 800788a:	f04f 0300 	mov.w	r3, #0
 800788e:	f04f 0400 	mov.w	r4, #0
 8007892:	0194      	lsls	r4, r2, #6
 8007894:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007898:	018b      	lsls	r3, r1, #6
 800789a:	1a5b      	subs	r3, r3, r1
 800789c:	eb64 0402 	sbc.w	r4, r4, r2
 80078a0:	f04f 0100 	mov.w	r1, #0
 80078a4:	f04f 0200 	mov.w	r2, #0
 80078a8:	00e2      	lsls	r2, r4, #3
 80078aa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80078ae:	00d9      	lsls	r1, r3, #3
 80078b0:	460b      	mov	r3, r1
 80078b2:	4614      	mov	r4, r2
 80078b4:	195b      	adds	r3, r3, r5
 80078b6:	eb44 0406 	adc.w	r4, r4, r6
 80078ba:	f04f 0100 	mov.w	r1, #0
 80078be:	f04f 0200 	mov.w	r2, #0
 80078c2:	02a2      	lsls	r2, r4, #10
 80078c4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80078c8:	0299      	lsls	r1, r3, #10
 80078ca:	460b      	mov	r3, r1
 80078cc:	4614      	mov	r4, r2
 80078ce:	4618      	mov	r0, r3
 80078d0:	4621      	mov	r1, r4
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f04f 0400 	mov.w	r4, #0
 80078d8:	461a      	mov	r2, r3
 80078da:	4623      	mov	r3, r4
 80078dc:	f7f9 fa04 	bl	8000ce8 <__aeabi_uldivmod>
 80078e0:	4603      	mov	r3, r0
 80078e2:	460c      	mov	r4, r1
 80078e4:	60fb      	str	r3, [r7, #12]
 80078e6:	e049      	b.n	800797c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80078e8:	4b2f      	ldr	r3, [pc, #188]	; (80079a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	099b      	lsrs	r3, r3, #6
 80078ee:	f04f 0400 	mov.w	r4, #0
 80078f2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80078f6:	f04f 0200 	mov.w	r2, #0
 80078fa:	ea03 0501 	and.w	r5, r3, r1
 80078fe:	ea04 0602 	and.w	r6, r4, r2
 8007902:	4629      	mov	r1, r5
 8007904:	4632      	mov	r2, r6
 8007906:	f04f 0300 	mov.w	r3, #0
 800790a:	f04f 0400 	mov.w	r4, #0
 800790e:	0154      	lsls	r4, r2, #5
 8007910:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007914:	014b      	lsls	r3, r1, #5
 8007916:	4619      	mov	r1, r3
 8007918:	4622      	mov	r2, r4
 800791a:	1b49      	subs	r1, r1, r5
 800791c:	eb62 0206 	sbc.w	r2, r2, r6
 8007920:	f04f 0300 	mov.w	r3, #0
 8007924:	f04f 0400 	mov.w	r4, #0
 8007928:	0194      	lsls	r4, r2, #6
 800792a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800792e:	018b      	lsls	r3, r1, #6
 8007930:	1a5b      	subs	r3, r3, r1
 8007932:	eb64 0402 	sbc.w	r4, r4, r2
 8007936:	f04f 0100 	mov.w	r1, #0
 800793a:	f04f 0200 	mov.w	r2, #0
 800793e:	00e2      	lsls	r2, r4, #3
 8007940:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007944:	00d9      	lsls	r1, r3, #3
 8007946:	460b      	mov	r3, r1
 8007948:	4614      	mov	r4, r2
 800794a:	195b      	adds	r3, r3, r5
 800794c:	eb44 0406 	adc.w	r4, r4, r6
 8007950:	f04f 0100 	mov.w	r1, #0
 8007954:	f04f 0200 	mov.w	r2, #0
 8007958:	02a2      	lsls	r2, r4, #10
 800795a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800795e:	0299      	lsls	r1, r3, #10
 8007960:	460b      	mov	r3, r1
 8007962:	4614      	mov	r4, r2
 8007964:	4618      	mov	r0, r3
 8007966:	4621      	mov	r1, r4
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f04f 0400 	mov.w	r4, #0
 800796e:	461a      	mov	r2, r3
 8007970:	4623      	mov	r3, r4
 8007972:	f7f9 f9b9 	bl	8000ce8 <__aeabi_uldivmod>
 8007976:	4603      	mov	r3, r0
 8007978:	460c      	mov	r4, r1
 800797a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800797c:	4b0a      	ldr	r3, [pc, #40]	; (80079a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	0c1b      	lsrs	r3, r3, #16
 8007982:	f003 0303 	and.w	r3, r3, #3
 8007986:	3301      	adds	r3, #1
 8007988:	005b      	lsls	r3, r3, #1
 800798a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800798c:	68fa      	ldr	r2, [r7, #12]
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	fbb2 f3f3 	udiv	r3, r2, r3
 8007994:	60bb      	str	r3, [r7, #8]
      break;
 8007996:	e002      	b.n	800799e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007998:	4b04      	ldr	r3, [pc, #16]	; (80079ac <HAL_RCC_GetSysClockFreq+0x1a8>)
 800799a:	60bb      	str	r3, [r7, #8]
      break;
 800799c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800799e:	68bb      	ldr	r3, [r7, #8]
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3714      	adds	r7, #20
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079a8:	40023800 	.word	0x40023800
 80079ac:	00f42400 	.word	0x00f42400

080079b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80079b0:	b480      	push	{r7}
 80079b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80079b4:	4b03      	ldr	r3, [pc, #12]	; (80079c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80079b6:	681b      	ldr	r3, [r3, #0]
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr
 80079c2:	bf00      	nop
 80079c4:	20000000 	.word	0x20000000

080079c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80079cc:	f7ff fff0 	bl	80079b0 <HAL_RCC_GetHCLKFreq>
 80079d0:	4601      	mov	r1, r0
 80079d2:	4b05      	ldr	r3, [pc, #20]	; (80079e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	0a9b      	lsrs	r3, r3, #10
 80079d8:	f003 0307 	and.w	r3, r3, #7
 80079dc:	4a03      	ldr	r2, [pc, #12]	; (80079ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80079de:	5cd3      	ldrb	r3, [r2, r3]
 80079e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	bd80      	pop	{r7, pc}
 80079e8:	40023800 	.word	0x40023800
 80079ec:	0800cf4c 	.word	0x0800cf4c

080079f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80079f4:	f7ff ffdc 	bl	80079b0 <HAL_RCC_GetHCLKFreq>
 80079f8:	4601      	mov	r1, r0
 80079fa:	4b05      	ldr	r3, [pc, #20]	; (8007a10 <HAL_RCC_GetPCLK2Freq+0x20>)
 80079fc:	689b      	ldr	r3, [r3, #8]
 80079fe:	0b5b      	lsrs	r3, r3, #13
 8007a00:	f003 0307 	and.w	r3, r3, #7
 8007a04:	4a03      	ldr	r2, [pc, #12]	; (8007a14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a06:	5cd3      	ldrb	r3, [r2, r3]
 8007a08:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	bd80      	pop	{r7, pc}
 8007a10:	40023800 	.word	0x40023800
 8007a14:	0800cf4c 	.word	0x0800cf4c

08007a18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d101      	bne.n	8007a2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a26:	2301      	movs	r3, #1
 8007a28:	e01d      	b.n	8007a66 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d106      	bne.n	8007a44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f7fc fcb6 	bl	80043b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2202      	movs	r2, #2
 8007a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681a      	ldr	r2, [r3, #0]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	3304      	adds	r3, #4
 8007a54:	4619      	mov	r1, r3
 8007a56:	4610      	mov	r0, r2
 8007a58:	f000 fd12 	bl	8008480 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a64:	2300      	movs	r3, #0
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3708      	adds	r7, #8
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}

08007a6e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007a6e:	b480      	push	{r7}
 8007a70:	b085      	sub	sp, #20
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2202      	movs	r2, #2
 8007a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	689b      	ldr	r3, [r3, #8]
 8007a84:	f003 0307 	and.w	r3, r3, #7
 8007a88:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2b06      	cmp	r3, #6
 8007a8e:	d007      	beq.n	8007aa0 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f042 0201 	orr.w	r2, r2, #1
 8007a9e:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007aa8:	2300      	movs	r3, #0
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3714      	adds	r7, #20
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr

08007ab6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ab6:	b480      	push	{r7}
 8007ab8:	b085      	sub	sp, #20
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	68da      	ldr	r2, [r3, #12]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f042 0201 	orr.w	r2, r2, #1
 8007acc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	f003 0307 	and.w	r3, r3, #7
 8007ad8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2b06      	cmp	r3, #6
 8007ade:	d007      	beq.n	8007af0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f042 0201 	orr.w	r2, r2, #1
 8007aee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007af0:	2300      	movs	r3, #0
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3714      	adds	r7, #20
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr

08007afe <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007afe:	b480      	push	{r7}
 8007b00:	b083      	sub	sp, #12
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	68da      	ldr	r2, [r3, #12]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f022 0201 	bic.w	r2, r2, #1
 8007b14:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	6a1a      	ldr	r2, [r3, #32]
 8007b1c:	f241 1311 	movw	r3, #4369	; 0x1111
 8007b20:	4013      	ands	r3, r2
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d10f      	bne.n	8007b46 <HAL_TIM_Base_Stop_IT+0x48>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	6a1a      	ldr	r2, [r3, #32]
 8007b2c:	f240 4344 	movw	r3, #1092	; 0x444
 8007b30:	4013      	ands	r3, r2
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d107      	bne.n	8007b46 <HAL_TIM_Base_Stop_IT+0x48>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f022 0201 	bic.w	r2, r2, #1
 8007b44:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007b46:	2300      	movs	r3, #0
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	370c      	adds	r7, #12
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr

08007b54 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b082      	sub	sp, #8
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d101      	bne.n	8007b66 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007b62:	2301      	movs	r3, #1
 8007b64:	e01d      	b.n	8007ba2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d106      	bne.n	8007b80 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2200      	movs	r2, #0
 8007b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 f815 	bl	8007baa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2202      	movs	r2, #2
 8007b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681a      	ldr	r2, [r3, #0]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	3304      	adds	r3, #4
 8007b90:	4619      	mov	r1, r3
 8007b92:	4610      	mov	r0, r2
 8007b94:	f000 fc74 	bl	8008480 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ba0:	2300      	movs	r3, #0
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3708      	adds	r7, #8
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}

08007baa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007baa:	b480      	push	{r7}
 8007bac:	b083      	sub	sp, #12
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007bb2:	bf00      	nop
 8007bb4:	370c      	adds	r7, #12
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr
	...

08007bc0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b084      	sub	sp, #16
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	6839      	ldr	r1, [r7, #0]
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f001 f868 	bl	8008ca8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a15      	ldr	r2, [pc, #84]	; (8007c34 <HAL_TIM_PWM_Start+0x74>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d004      	beq.n	8007bec <HAL_TIM_PWM_Start+0x2c>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a14      	ldr	r2, [pc, #80]	; (8007c38 <HAL_TIM_PWM_Start+0x78>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d101      	bne.n	8007bf0 <HAL_TIM_PWM_Start+0x30>
 8007bec:	2301      	movs	r3, #1
 8007bee:	e000      	b.n	8007bf2 <HAL_TIM_PWM_Start+0x32>
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d007      	beq.n	8007c06 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c04:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	689b      	ldr	r3, [r3, #8]
 8007c0c:	f003 0307 	and.w	r3, r3, #7
 8007c10:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2b06      	cmp	r3, #6
 8007c16:	d007      	beq.n	8007c28 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	681a      	ldr	r2, [r3, #0]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f042 0201 	orr.w	r2, r2, #1
 8007c26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007c28:	2300      	movs	r3, #0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3710      	adds	r7, #16
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
 8007c32:	bf00      	nop
 8007c34:	40010000 	.word	0x40010000
 8007c38:	40010400 	.word	0x40010400

08007c3c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b082      	sub	sp, #8
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d101      	bne.n	8007c4e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	e01d      	b.n	8007c8a <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c54:	b2db      	uxtb	r3, r3
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d106      	bne.n	8007c68 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 f815 	bl	8007c92 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2202      	movs	r2, #2
 8007c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	3304      	adds	r3, #4
 8007c78:	4619      	mov	r1, r3
 8007c7a:	4610      	mov	r0, r2
 8007c7c:	f000 fc00 	bl	8008480 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2201      	movs	r2, #1
 8007c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c88:	2300      	movs	r3, #0
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3708      	adds	r7, #8
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}

08007c92 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007c92:	b480      	push	{r7}
 8007c94:	b083      	sub	sp, #12
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007c9a:	bf00      	nop
 8007c9c:	370c      	adds	r7, #12
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca4:	4770      	bx	lr
	...

08007ca8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b084      	sub	sp, #16
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	2b0c      	cmp	r3, #12
 8007cb6:	d841      	bhi.n	8007d3c <HAL_TIM_IC_Start_IT+0x94>
 8007cb8:	a201      	add	r2, pc, #4	; (adr r2, 8007cc0 <HAL_TIM_IC_Start_IT+0x18>)
 8007cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cbe:	bf00      	nop
 8007cc0:	08007cf5 	.word	0x08007cf5
 8007cc4:	08007d3d 	.word	0x08007d3d
 8007cc8:	08007d3d 	.word	0x08007d3d
 8007ccc:	08007d3d 	.word	0x08007d3d
 8007cd0:	08007d07 	.word	0x08007d07
 8007cd4:	08007d3d 	.word	0x08007d3d
 8007cd8:	08007d3d 	.word	0x08007d3d
 8007cdc:	08007d3d 	.word	0x08007d3d
 8007ce0:	08007d19 	.word	0x08007d19
 8007ce4:	08007d3d 	.word	0x08007d3d
 8007ce8:	08007d3d 	.word	0x08007d3d
 8007cec:	08007d3d 	.word	0x08007d3d
 8007cf0:	08007d2b 	.word	0x08007d2b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	68da      	ldr	r2, [r3, #12]
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f042 0202 	orr.w	r2, r2, #2
 8007d02:	60da      	str	r2, [r3, #12]
      break;
 8007d04:	e01b      	b.n	8007d3e <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	68da      	ldr	r2, [r3, #12]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f042 0204 	orr.w	r2, r2, #4
 8007d14:	60da      	str	r2, [r3, #12]
      break;
 8007d16:	e012      	b.n	8007d3e <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	68da      	ldr	r2, [r3, #12]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f042 0208 	orr.w	r2, r2, #8
 8007d26:	60da      	str	r2, [r3, #12]
      break;
 8007d28:	e009      	b.n	8007d3e <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	68da      	ldr	r2, [r3, #12]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f042 0210 	orr.w	r2, r2, #16
 8007d38:	60da      	str	r2, [r3, #12]
      break;
 8007d3a:	e000      	b.n	8007d3e <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8007d3c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	2201      	movs	r2, #1
 8007d44:	6839      	ldr	r1, [r7, #0]
 8007d46:	4618      	mov	r0, r3
 8007d48:	f000 ffae 	bl	8008ca8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	f003 0307 	and.w	r3, r3, #7
 8007d56:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2b06      	cmp	r3, #6
 8007d5c:	d007      	beq.n	8007d6e <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f042 0201 	orr.w	r2, r2, #1
 8007d6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007d6e:	2300      	movs	r3, #0
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3710      	adds	r7, #16
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b082      	sub	sp, #8
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	691b      	ldr	r3, [r3, #16]
 8007d86:	f003 0302 	and.w	r3, r3, #2
 8007d8a:	2b02      	cmp	r3, #2
 8007d8c:	d122      	bne.n	8007dd4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	68db      	ldr	r3, [r3, #12]
 8007d94:	f003 0302 	and.w	r3, r3, #2
 8007d98:	2b02      	cmp	r3, #2
 8007d9a:	d11b      	bne.n	8007dd4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f06f 0202 	mvn.w	r2, #2
 8007da4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2201      	movs	r2, #1
 8007daa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	699b      	ldr	r3, [r3, #24]
 8007db2:	f003 0303 	and.w	r3, r3, #3
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d003      	beq.n	8007dc2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f7fb fc10 	bl	80035e0 <HAL_TIM_IC_CaptureCallback>
 8007dc0:	e005      	b.n	8007dce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 fb3e 	bl	8008444 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 fb45 	bl	8008458 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	691b      	ldr	r3, [r3, #16]
 8007dda:	f003 0304 	and.w	r3, r3, #4
 8007dde:	2b04      	cmp	r3, #4
 8007de0:	d122      	bne.n	8007e28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	68db      	ldr	r3, [r3, #12]
 8007de8:	f003 0304 	and.w	r3, r3, #4
 8007dec:	2b04      	cmp	r3, #4
 8007dee:	d11b      	bne.n	8007e28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f06f 0204 	mvn.w	r2, #4
 8007df8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2202      	movs	r2, #2
 8007dfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	699b      	ldr	r3, [r3, #24]
 8007e06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d003      	beq.n	8007e16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f7fb fbe6 	bl	80035e0 <HAL_TIM_IC_CaptureCallback>
 8007e14:	e005      	b.n	8007e22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f000 fb14 	bl	8008444 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 fb1b 	bl	8008458 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2200      	movs	r2, #0
 8007e26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	691b      	ldr	r3, [r3, #16]
 8007e2e:	f003 0308 	and.w	r3, r3, #8
 8007e32:	2b08      	cmp	r3, #8
 8007e34:	d122      	bne.n	8007e7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	68db      	ldr	r3, [r3, #12]
 8007e3c:	f003 0308 	and.w	r3, r3, #8
 8007e40:	2b08      	cmp	r3, #8
 8007e42:	d11b      	bne.n	8007e7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f06f 0208 	mvn.w	r2, #8
 8007e4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2204      	movs	r2, #4
 8007e52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	69db      	ldr	r3, [r3, #28]
 8007e5a:	f003 0303 	and.w	r3, r3, #3
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d003      	beq.n	8007e6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f7fb fbbc 	bl	80035e0 <HAL_TIM_IC_CaptureCallback>
 8007e68:	e005      	b.n	8007e76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 faea 	bl	8008444 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 faf1 	bl	8008458 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	691b      	ldr	r3, [r3, #16]
 8007e82:	f003 0310 	and.w	r3, r3, #16
 8007e86:	2b10      	cmp	r3, #16
 8007e88:	d122      	bne.n	8007ed0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	f003 0310 	and.w	r3, r3, #16
 8007e94:	2b10      	cmp	r3, #16
 8007e96:	d11b      	bne.n	8007ed0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f06f 0210 	mvn.w	r2, #16
 8007ea0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2208      	movs	r2, #8
 8007ea6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	69db      	ldr	r3, [r3, #28]
 8007eae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d003      	beq.n	8007ebe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f7fb fb92 	bl	80035e0 <HAL_TIM_IC_CaptureCallback>
 8007ebc:	e005      	b.n	8007eca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 fac0 	bl	8008444 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 fac7 	bl	8008458 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	691b      	ldr	r3, [r3, #16]
 8007ed6:	f003 0301 	and.w	r3, r3, #1
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d10e      	bne.n	8007efc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	68db      	ldr	r3, [r3, #12]
 8007ee4:	f003 0301 	and.w	r3, r3, #1
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d107      	bne.n	8007efc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f06f 0201 	mvn.w	r2, #1
 8007ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f7fb fad0 	bl	800349c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	691b      	ldr	r3, [r3, #16]
 8007f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f06:	2b80      	cmp	r3, #128	; 0x80
 8007f08:	d10e      	bne.n	8007f28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	68db      	ldr	r3, [r3, #12]
 8007f10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f14:	2b80      	cmp	r3, #128	; 0x80
 8007f16:	d107      	bne.n	8007f28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 ff6c 	bl	8008e00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	691b      	ldr	r3, [r3, #16]
 8007f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f32:	2b40      	cmp	r3, #64	; 0x40
 8007f34:	d10e      	bne.n	8007f54 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	68db      	ldr	r3, [r3, #12]
 8007f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f40:	2b40      	cmp	r3, #64	; 0x40
 8007f42:	d107      	bne.n	8007f54 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007f4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 fa8c 	bl	800846c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	691b      	ldr	r3, [r3, #16]
 8007f5a:	f003 0320 	and.w	r3, r3, #32
 8007f5e:	2b20      	cmp	r3, #32
 8007f60:	d10e      	bne.n	8007f80 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	68db      	ldr	r3, [r3, #12]
 8007f68:	f003 0320 	and.w	r3, r3, #32
 8007f6c:	2b20      	cmp	r3, #32
 8007f6e:	d107      	bne.n	8007f80 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f06f 0220 	mvn.w	r2, #32
 8007f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 ff36 	bl	8008dec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f80:	bf00      	nop
 8007f82:	3708      	adds	r7, #8
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	60f8      	str	r0, [r7, #12]
 8007f90:	60b9      	str	r1, [r7, #8]
 8007f92:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d101      	bne.n	8007fa2 <HAL_TIM_IC_ConfigChannel+0x1a>
 8007f9e:	2302      	movs	r3, #2
 8007fa0:	e08a      	b.n	80080b8 <HAL_TIM_IC_ConfigChannel+0x130>
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2202      	movs	r2, #2
 8007fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d11b      	bne.n	8007ff0 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	6818      	ldr	r0, [r3, #0]
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	6819      	ldr	r1, [r3, #0]
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	685a      	ldr	r2, [r3, #4]
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	68db      	ldr	r3, [r3, #12]
 8007fc8:	f000 fcaa 	bl	8008920 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	699a      	ldr	r2, [r3, #24]
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f022 020c 	bic.w	r2, r2, #12
 8007fda:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	6999      	ldr	r1, [r3, #24]
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	689a      	ldr	r2, [r3, #8]
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	430a      	orrs	r2, r1
 8007fec:	619a      	str	r2, [r3, #24]
 8007fee:	e05a      	b.n	80080a6 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2b04      	cmp	r3, #4
 8007ff4:	d11c      	bne.n	8008030 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	6818      	ldr	r0, [r3, #0]
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	6819      	ldr	r1, [r3, #0]
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	685a      	ldr	r2, [r3, #4]
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	68db      	ldr	r3, [r3, #12]
 8008006:	f000 fd2e 	bl	8008a66 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	699a      	ldr	r2, [r3, #24]
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008018:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	6999      	ldr	r1, [r3, #24]
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	689b      	ldr	r3, [r3, #8]
 8008024:	021a      	lsls	r2, r3, #8
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	430a      	orrs	r2, r1
 800802c:	619a      	str	r2, [r3, #24]
 800802e:	e03a      	b.n	80080a6 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2b08      	cmp	r3, #8
 8008034:	d11b      	bne.n	800806e <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	6818      	ldr	r0, [r3, #0]
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	6819      	ldr	r1, [r3, #0]
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	685a      	ldr	r2, [r3, #4]
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	68db      	ldr	r3, [r3, #12]
 8008046:	f000 fd7b 	bl	8008b40 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	69da      	ldr	r2, [r3, #28]
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f022 020c 	bic.w	r2, r2, #12
 8008058:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	69d9      	ldr	r1, [r3, #28]
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	689a      	ldr	r2, [r3, #8]
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	430a      	orrs	r2, r1
 800806a:	61da      	str	r2, [r3, #28]
 800806c:	e01b      	b.n	80080a6 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	6818      	ldr	r0, [r3, #0]
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	6819      	ldr	r1, [r3, #0]
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	685a      	ldr	r2, [r3, #4]
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	68db      	ldr	r3, [r3, #12]
 800807e:	f000 fd9b 	bl	8008bb8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	69da      	ldr	r2, [r3, #28]
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008090:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	69d9      	ldr	r1, [r3, #28]
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	689b      	ldr	r3, [r3, #8]
 800809c:	021a      	lsls	r2, r3, #8
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	430a      	orrs	r2, r1
 80080a4:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2201      	movs	r2, #1
 80080aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2200      	movs	r2, #0
 80080b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80080b6:	2300      	movs	r3, #0
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3710      	adds	r7, #16
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}

080080c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b084      	sub	sp, #16
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	60f8      	str	r0, [r7, #12]
 80080c8:	60b9      	str	r1, [r7, #8]
 80080ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	d101      	bne.n	80080da <HAL_TIM_PWM_ConfigChannel+0x1a>
 80080d6:	2302      	movs	r3, #2
 80080d8:	e0b4      	b.n	8008244 <HAL_TIM_PWM_ConfigChannel+0x184>
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2201      	movs	r2, #1
 80080de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2202      	movs	r2, #2
 80080e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2b0c      	cmp	r3, #12
 80080ee:	f200 809f 	bhi.w	8008230 <HAL_TIM_PWM_ConfigChannel+0x170>
 80080f2:	a201      	add	r2, pc, #4	; (adr r2, 80080f8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80080f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f8:	0800812d 	.word	0x0800812d
 80080fc:	08008231 	.word	0x08008231
 8008100:	08008231 	.word	0x08008231
 8008104:	08008231 	.word	0x08008231
 8008108:	0800816d 	.word	0x0800816d
 800810c:	08008231 	.word	0x08008231
 8008110:	08008231 	.word	0x08008231
 8008114:	08008231 	.word	0x08008231
 8008118:	080081af 	.word	0x080081af
 800811c:	08008231 	.word	0x08008231
 8008120:	08008231 	.word	0x08008231
 8008124:	08008231 	.word	0x08008231
 8008128:	080081ef 	.word	0x080081ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	68b9      	ldr	r1, [r7, #8]
 8008132:	4618      	mov	r0, r3
 8008134:	f000 fa44 	bl	80085c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	699a      	ldr	r2, [r3, #24]
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f042 0208 	orr.w	r2, r2, #8
 8008146:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	699a      	ldr	r2, [r3, #24]
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f022 0204 	bic.w	r2, r2, #4
 8008156:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	6999      	ldr	r1, [r3, #24]
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	691a      	ldr	r2, [r3, #16]
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	430a      	orrs	r2, r1
 8008168:	619a      	str	r2, [r3, #24]
      break;
 800816a:	e062      	b.n	8008232 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	68b9      	ldr	r1, [r7, #8]
 8008172:	4618      	mov	r0, r3
 8008174:	f000 fa94 	bl	80086a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	699a      	ldr	r2, [r3, #24]
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008186:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	699a      	ldr	r2, [r3, #24]
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008196:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	6999      	ldr	r1, [r3, #24]
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	691b      	ldr	r3, [r3, #16]
 80081a2:	021a      	lsls	r2, r3, #8
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	430a      	orrs	r2, r1
 80081aa:	619a      	str	r2, [r3, #24]
      break;
 80081ac:	e041      	b.n	8008232 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	68b9      	ldr	r1, [r7, #8]
 80081b4:	4618      	mov	r0, r3
 80081b6:	f000 fae9 	bl	800878c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	69da      	ldr	r2, [r3, #28]
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f042 0208 	orr.w	r2, r2, #8
 80081c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	69da      	ldr	r2, [r3, #28]
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f022 0204 	bic.w	r2, r2, #4
 80081d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	69d9      	ldr	r1, [r3, #28]
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	691a      	ldr	r2, [r3, #16]
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	430a      	orrs	r2, r1
 80081ea:	61da      	str	r2, [r3, #28]
      break;
 80081ec:	e021      	b.n	8008232 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	68b9      	ldr	r1, [r7, #8]
 80081f4:	4618      	mov	r0, r3
 80081f6:	f000 fb3d 	bl	8008874 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	69da      	ldr	r2, [r3, #28]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008208:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	69da      	ldr	r2, [r3, #28]
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008218:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	69d9      	ldr	r1, [r3, #28]
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	691b      	ldr	r3, [r3, #16]
 8008224:	021a      	lsls	r2, r3, #8
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	430a      	orrs	r2, r1
 800822c:	61da      	str	r2, [r3, #28]
      break;
 800822e:	e000      	b.n	8008232 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8008230:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2201      	movs	r2, #1
 8008236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2200      	movs	r2, #0
 800823e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008242:	2300      	movs	r3, #0
}
 8008244:	4618      	mov	r0, r3
 8008246:	3710      	adds	r7, #16
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b084      	sub	sp, #16
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800825c:	2b01      	cmp	r3, #1
 800825e:	d101      	bne.n	8008264 <HAL_TIM_ConfigClockSource+0x18>
 8008260:	2302      	movs	r3, #2
 8008262:	e0a6      	b.n	80083b2 <HAL_TIM_ConfigClockSource+0x166>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2201      	movs	r2, #1
 8008268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2202      	movs	r2, #2
 8008270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	689b      	ldr	r3, [r3, #8]
 800827a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008282:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800828a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	68fa      	ldr	r2, [r7, #12]
 8008292:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	2b40      	cmp	r3, #64	; 0x40
 800829a:	d067      	beq.n	800836c <HAL_TIM_ConfigClockSource+0x120>
 800829c:	2b40      	cmp	r3, #64	; 0x40
 800829e:	d80b      	bhi.n	80082b8 <HAL_TIM_ConfigClockSource+0x6c>
 80082a0:	2b10      	cmp	r3, #16
 80082a2:	d073      	beq.n	800838c <HAL_TIM_ConfigClockSource+0x140>
 80082a4:	2b10      	cmp	r3, #16
 80082a6:	d802      	bhi.n	80082ae <HAL_TIM_ConfigClockSource+0x62>
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d06f      	beq.n	800838c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80082ac:	e078      	b.n	80083a0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80082ae:	2b20      	cmp	r3, #32
 80082b0:	d06c      	beq.n	800838c <HAL_TIM_ConfigClockSource+0x140>
 80082b2:	2b30      	cmp	r3, #48	; 0x30
 80082b4:	d06a      	beq.n	800838c <HAL_TIM_ConfigClockSource+0x140>
      break;
 80082b6:	e073      	b.n	80083a0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80082b8:	2b70      	cmp	r3, #112	; 0x70
 80082ba:	d00d      	beq.n	80082d8 <HAL_TIM_ConfigClockSource+0x8c>
 80082bc:	2b70      	cmp	r3, #112	; 0x70
 80082be:	d804      	bhi.n	80082ca <HAL_TIM_ConfigClockSource+0x7e>
 80082c0:	2b50      	cmp	r3, #80	; 0x50
 80082c2:	d033      	beq.n	800832c <HAL_TIM_ConfigClockSource+0xe0>
 80082c4:	2b60      	cmp	r3, #96	; 0x60
 80082c6:	d041      	beq.n	800834c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80082c8:	e06a      	b.n	80083a0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80082ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082ce:	d066      	beq.n	800839e <HAL_TIM_ConfigClockSource+0x152>
 80082d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082d4:	d017      	beq.n	8008306 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80082d6:	e063      	b.n	80083a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6818      	ldr	r0, [r3, #0]
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	6899      	ldr	r1, [r3, #8]
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	685a      	ldr	r2, [r3, #4]
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	68db      	ldr	r3, [r3, #12]
 80082e8:	f000 fcbe 	bl	8008c68 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80082fa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	68fa      	ldr	r2, [r7, #12]
 8008302:	609a      	str	r2, [r3, #8]
      break;
 8008304:	e04c      	b.n	80083a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6818      	ldr	r0, [r3, #0]
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	6899      	ldr	r1, [r3, #8]
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	685a      	ldr	r2, [r3, #4]
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	68db      	ldr	r3, [r3, #12]
 8008316:	f000 fca7 	bl	8008c68 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	689a      	ldr	r2, [r3, #8]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008328:	609a      	str	r2, [r3, #8]
      break;
 800832a:	e039      	b.n	80083a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6818      	ldr	r0, [r3, #0]
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	6859      	ldr	r1, [r3, #4]
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	68db      	ldr	r3, [r3, #12]
 8008338:	461a      	mov	r2, r3
 800833a:	f000 fb65 	bl	8008a08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	2150      	movs	r1, #80	; 0x50
 8008344:	4618      	mov	r0, r3
 8008346:	f000 fc74 	bl	8008c32 <TIM_ITRx_SetConfig>
      break;
 800834a:	e029      	b.n	80083a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6818      	ldr	r0, [r3, #0]
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	6859      	ldr	r1, [r3, #4]
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	68db      	ldr	r3, [r3, #12]
 8008358:	461a      	mov	r2, r3
 800835a:	f000 fbc1 	bl	8008ae0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	2160      	movs	r1, #96	; 0x60
 8008364:	4618      	mov	r0, r3
 8008366:	f000 fc64 	bl	8008c32 <TIM_ITRx_SetConfig>
      break;
 800836a:	e019      	b.n	80083a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6818      	ldr	r0, [r3, #0]
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	6859      	ldr	r1, [r3, #4]
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	68db      	ldr	r3, [r3, #12]
 8008378:	461a      	mov	r2, r3
 800837a:	f000 fb45 	bl	8008a08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	2140      	movs	r1, #64	; 0x40
 8008384:	4618      	mov	r0, r3
 8008386:	f000 fc54 	bl	8008c32 <TIM_ITRx_SetConfig>
      break;
 800838a:	e009      	b.n	80083a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681a      	ldr	r2, [r3, #0]
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4619      	mov	r1, r3
 8008396:	4610      	mov	r0, r2
 8008398:	f000 fc4b 	bl	8008c32 <TIM_ITRx_SetConfig>
      break;
 800839c:	e000      	b.n	80083a0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800839e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2201      	movs	r2, #1
 80083a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2200      	movs	r2, #0
 80083ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80083b0:	2300      	movs	r3, #0
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3710      	adds	r7, #16
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}
	...

080083bc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80083bc:	b480      	push	{r7}
 80083be:	b085      	sub	sp, #20
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80083c6:	2300      	movs	r3, #0
 80083c8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	2b0c      	cmp	r3, #12
 80083ce:	d831      	bhi.n	8008434 <HAL_TIM_ReadCapturedValue+0x78>
 80083d0:	a201      	add	r2, pc, #4	; (adr r2, 80083d8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80083d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083d6:	bf00      	nop
 80083d8:	0800840d 	.word	0x0800840d
 80083dc:	08008435 	.word	0x08008435
 80083e0:	08008435 	.word	0x08008435
 80083e4:	08008435 	.word	0x08008435
 80083e8:	08008417 	.word	0x08008417
 80083ec:	08008435 	.word	0x08008435
 80083f0:	08008435 	.word	0x08008435
 80083f4:	08008435 	.word	0x08008435
 80083f8:	08008421 	.word	0x08008421
 80083fc:	08008435 	.word	0x08008435
 8008400:	08008435 	.word	0x08008435
 8008404:	08008435 	.word	0x08008435
 8008408:	0800842b 	.word	0x0800842b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008412:	60fb      	str	r3, [r7, #12]

      break;
 8008414:	e00f      	b.n	8008436 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800841c:	60fb      	str	r3, [r7, #12]

      break;
 800841e:	e00a      	b.n	8008436 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008426:	60fb      	str	r3, [r7, #12]

      break;
 8008428:	e005      	b.n	8008436 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008430:	60fb      	str	r3, [r7, #12]

      break;
 8008432:	e000      	b.n	8008436 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8008434:	bf00      	nop
  }

  return tmpreg;
 8008436:	68fb      	ldr	r3, [r7, #12]
}
 8008438:	4618      	mov	r0, r3
 800843a:	3714      	adds	r7, #20
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr

08008444 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008444:	b480      	push	{r7}
 8008446:	b083      	sub	sp, #12
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800844c:	bf00      	nop
 800844e:	370c      	adds	r7, #12
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr

08008458 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008458:	b480      	push	{r7}
 800845a:	b083      	sub	sp, #12
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008460:	bf00      	nop
 8008462:	370c      	adds	r7, #12
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr

0800846c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800846c:	b480      	push	{r7}
 800846e:	b083      	sub	sp, #12
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008474:	bf00      	nop
 8008476:	370c      	adds	r7, #12
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr

08008480 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008480:	b480      	push	{r7}
 8008482:	b085      	sub	sp, #20
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	4a40      	ldr	r2, [pc, #256]	; (8008594 <TIM_Base_SetConfig+0x114>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d013      	beq.n	80084c0 <TIM_Base_SetConfig+0x40>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800849e:	d00f      	beq.n	80084c0 <TIM_Base_SetConfig+0x40>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	4a3d      	ldr	r2, [pc, #244]	; (8008598 <TIM_Base_SetConfig+0x118>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d00b      	beq.n	80084c0 <TIM_Base_SetConfig+0x40>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	4a3c      	ldr	r2, [pc, #240]	; (800859c <TIM_Base_SetConfig+0x11c>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d007      	beq.n	80084c0 <TIM_Base_SetConfig+0x40>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	4a3b      	ldr	r2, [pc, #236]	; (80085a0 <TIM_Base_SetConfig+0x120>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d003      	beq.n	80084c0 <TIM_Base_SetConfig+0x40>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	4a3a      	ldr	r2, [pc, #232]	; (80085a4 <TIM_Base_SetConfig+0x124>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d108      	bne.n	80084d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	685b      	ldr	r3, [r3, #4]
 80084cc:	68fa      	ldr	r2, [r7, #12]
 80084ce:	4313      	orrs	r3, r2
 80084d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	4a2f      	ldr	r2, [pc, #188]	; (8008594 <TIM_Base_SetConfig+0x114>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d02b      	beq.n	8008532 <TIM_Base_SetConfig+0xb2>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084e0:	d027      	beq.n	8008532 <TIM_Base_SetConfig+0xb2>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	4a2c      	ldr	r2, [pc, #176]	; (8008598 <TIM_Base_SetConfig+0x118>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d023      	beq.n	8008532 <TIM_Base_SetConfig+0xb2>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	4a2b      	ldr	r2, [pc, #172]	; (800859c <TIM_Base_SetConfig+0x11c>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d01f      	beq.n	8008532 <TIM_Base_SetConfig+0xb2>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	4a2a      	ldr	r2, [pc, #168]	; (80085a0 <TIM_Base_SetConfig+0x120>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d01b      	beq.n	8008532 <TIM_Base_SetConfig+0xb2>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	4a29      	ldr	r2, [pc, #164]	; (80085a4 <TIM_Base_SetConfig+0x124>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d017      	beq.n	8008532 <TIM_Base_SetConfig+0xb2>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	4a28      	ldr	r2, [pc, #160]	; (80085a8 <TIM_Base_SetConfig+0x128>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d013      	beq.n	8008532 <TIM_Base_SetConfig+0xb2>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	4a27      	ldr	r2, [pc, #156]	; (80085ac <TIM_Base_SetConfig+0x12c>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d00f      	beq.n	8008532 <TIM_Base_SetConfig+0xb2>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	4a26      	ldr	r2, [pc, #152]	; (80085b0 <TIM_Base_SetConfig+0x130>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d00b      	beq.n	8008532 <TIM_Base_SetConfig+0xb2>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	4a25      	ldr	r2, [pc, #148]	; (80085b4 <TIM_Base_SetConfig+0x134>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d007      	beq.n	8008532 <TIM_Base_SetConfig+0xb2>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	4a24      	ldr	r2, [pc, #144]	; (80085b8 <TIM_Base_SetConfig+0x138>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d003      	beq.n	8008532 <TIM_Base_SetConfig+0xb2>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	4a23      	ldr	r2, [pc, #140]	; (80085bc <TIM_Base_SetConfig+0x13c>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d108      	bne.n	8008544 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008538:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	68db      	ldr	r3, [r3, #12]
 800853e:	68fa      	ldr	r2, [r7, #12]
 8008540:	4313      	orrs	r3, r2
 8008542:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	695b      	ldr	r3, [r3, #20]
 800854e:	4313      	orrs	r3, r2
 8008550:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	68fa      	ldr	r2, [r7, #12]
 8008556:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	689a      	ldr	r2, [r3, #8]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	4a0a      	ldr	r2, [pc, #40]	; (8008594 <TIM_Base_SetConfig+0x114>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d003      	beq.n	8008578 <TIM_Base_SetConfig+0xf8>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	4a0c      	ldr	r2, [pc, #48]	; (80085a4 <TIM_Base_SetConfig+0x124>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d103      	bne.n	8008580 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	691a      	ldr	r2, [r3, #16]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2201      	movs	r2, #1
 8008584:	615a      	str	r2, [r3, #20]
}
 8008586:	bf00      	nop
 8008588:	3714      	adds	r7, #20
 800858a:	46bd      	mov	sp, r7
 800858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008590:	4770      	bx	lr
 8008592:	bf00      	nop
 8008594:	40010000 	.word	0x40010000
 8008598:	40000400 	.word	0x40000400
 800859c:	40000800 	.word	0x40000800
 80085a0:	40000c00 	.word	0x40000c00
 80085a4:	40010400 	.word	0x40010400
 80085a8:	40014000 	.word	0x40014000
 80085ac:	40014400 	.word	0x40014400
 80085b0:	40014800 	.word	0x40014800
 80085b4:	40001800 	.word	0x40001800
 80085b8:	40001c00 	.word	0x40001c00
 80085bc:	40002000 	.word	0x40002000

080085c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b087      	sub	sp, #28
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6a1b      	ldr	r3, [r3, #32]
 80085ce:	f023 0201 	bic.w	r2, r3, #1
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6a1b      	ldr	r3, [r3, #32]
 80085da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	699b      	ldr	r3, [r3, #24]
 80085e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f023 0303 	bic.w	r3, r3, #3
 80085f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	68fa      	ldr	r2, [r7, #12]
 80085fe:	4313      	orrs	r3, r2
 8008600:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	f023 0302 	bic.w	r3, r3, #2
 8008608:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	689b      	ldr	r3, [r3, #8]
 800860e:	697a      	ldr	r2, [r7, #20]
 8008610:	4313      	orrs	r3, r2
 8008612:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	4a20      	ldr	r2, [pc, #128]	; (8008698 <TIM_OC1_SetConfig+0xd8>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d003      	beq.n	8008624 <TIM_OC1_SetConfig+0x64>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	4a1f      	ldr	r2, [pc, #124]	; (800869c <TIM_OC1_SetConfig+0xdc>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d10c      	bne.n	800863e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	f023 0308 	bic.w	r3, r3, #8
 800862a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	68db      	ldr	r3, [r3, #12]
 8008630:	697a      	ldr	r2, [r7, #20]
 8008632:	4313      	orrs	r3, r2
 8008634:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	f023 0304 	bic.w	r3, r3, #4
 800863c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	4a15      	ldr	r2, [pc, #84]	; (8008698 <TIM_OC1_SetConfig+0xd8>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d003      	beq.n	800864e <TIM_OC1_SetConfig+0x8e>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	4a14      	ldr	r2, [pc, #80]	; (800869c <TIM_OC1_SetConfig+0xdc>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d111      	bne.n	8008672 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008654:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800865c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	695b      	ldr	r3, [r3, #20]
 8008662:	693a      	ldr	r2, [r7, #16]
 8008664:	4313      	orrs	r3, r2
 8008666:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	699b      	ldr	r3, [r3, #24]
 800866c:	693a      	ldr	r2, [r7, #16]
 800866e:	4313      	orrs	r3, r2
 8008670:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	693a      	ldr	r2, [r7, #16]
 8008676:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	68fa      	ldr	r2, [r7, #12]
 800867c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	685a      	ldr	r2, [r3, #4]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	697a      	ldr	r2, [r7, #20]
 800868a:	621a      	str	r2, [r3, #32]
}
 800868c:	bf00      	nop
 800868e:	371c      	adds	r7, #28
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr
 8008698:	40010000 	.word	0x40010000
 800869c:	40010400 	.word	0x40010400

080086a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b087      	sub	sp, #28
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6a1b      	ldr	r3, [r3, #32]
 80086ae:	f023 0210 	bic.w	r2, r3, #16
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6a1b      	ldr	r3, [r3, #32]
 80086ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	699b      	ldr	r3, [r3, #24]
 80086c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	021b      	lsls	r3, r3, #8
 80086de:	68fa      	ldr	r2, [r7, #12]
 80086e0:	4313      	orrs	r3, r2
 80086e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	f023 0320 	bic.w	r3, r3, #32
 80086ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	689b      	ldr	r3, [r3, #8]
 80086f0:	011b      	lsls	r3, r3, #4
 80086f2:	697a      	ldr	r2, [r7, #20]
 80086f4:	4313      	orrs	r3, r2
 80086f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	4a22      	ldr	r2, [pc, #136]	; (8008784 <TIM_OC2_SetConfig+0xe4>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d003      	beq.n	8008708 <TIM_OC2_SetConfig+0x68>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	4a21      	ldr	r2, [pc, #132]	; (8008788 <TIM_OC2_SetConfig+0xe8>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d10d      	bne.n	8008724 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800870e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	68db      	ldr	r3, [r3, #12]
 8008714:	011b      	lsls	r3, r3, #4
 8008716:	697a      	ldr	r2, [r7, #20]
 8008718:	4313      	orrs	r3, r2
 800871a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008722:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	4a17      	ldr	r2, [pc, #92]	; (8008784 <TIM_OC2_SetConfig+0xe4>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d003      	beq.n	8008734 <TIM_OC2_SetConfig+0x94>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	4a16      	ldr	r2, [pc, #88]	; (8008788 <TIM_OC2_SetConfig+0xe8>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d113      	bne.n	800875c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008734:	693b      	ldr	r3, [r7, #16]
 8008736:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800873a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008742:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	695b      	ldr	r3, [r3, #20]
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	693a      	ldr	r2, [r7, #16]
 800874c:	4313      	orrs	r3, r2
 800874e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	699b      	ldr	r3, [r3, #24]
 8008754:	009b      	lsls	r3, r3, #2
 8008756:	693a      	ldr	r2, [r7, #16]
 8008758:	4313      	orrs	r3, r2
 800875a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	693a      	ldr	r2, [r7, #16]
 8008760:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	68fa      	ldr	r2, [r7, #12]
 8008766:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	685a      	ldr	r2, [r3, #4]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	697a      	ldr	r2, [r7, #20]
 8008774:	621a      	str	r2, [r3, #32]
}
 8008776:	bf00      	nop
 8008778:	371c      	adds	r7, #28
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr
 8008782:	bf00      	nop
 8008784:	40010000 	.word	0x40010000
 8008788:	40010400 	.word	0x40010400

0800878c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800878c:	b480      	push	{r7}
 800878e:	b087      	sub	sp, #28
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6a1b      	ldr	r3, [r3, #32]
 800879a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6a1b      	ldr	r3, [r3, #32]
 80087a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	69db      	ldr	r3, [r3, #28]
 80087b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	f023 0303 	bic.w	r3, r3, #3
 80087c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	68fa      	ldr	r2, [r7, #12]
 80087ca:	4313      	orrs	r3, r2
 80087cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80087d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	689b      	ldr	r3, [r3, #8]
 80087da:	021b      	lsls	r3, r3, #8
 80087dc:	697a      	ldr	r2, [r7, #20]
 80087de:	4313      	orrs	r3, r2
 80087e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	4a21      	ldr	r2, [pc, #132]	; (800886c <TIM_OC3_SetConfig+0xe0>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d003      	beq.n	80087f2 <TIM_OC3_SetConfig+0x66>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	4a20      	ldr	r2, [pc, #128]	; (8008870 <TIM_OC3_SetConfig+0xe4>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d10d      	bne.n	800880e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80087f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	68db      	ldr	r3, [r3, #12]
 80087fe:	021b      	lsls	r3, r3, #8
 8008800:	697a      	ldr	r2, [r7, #20]
 8008802:	4313      	orrs	r3, r2
 8008804:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800880c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	4a16      	ldr	r2, [pc, #88]	; (800886c <TIM_OC3_SetConfig+0xe0>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d003      	beq.n	800881e <TIM_OC3_SetConfig+0x92>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	4a15      	ldr	r2, [pc, #84]	; (8008870 <TIM_OC3_SetConfig+0xe4>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d113      	bne.n	8008846 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008824:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800882c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	695b      	ldr	r3, [r3, #20]
 8008832:	011b      	lsls	r3, r3, #4
 8008834:	693a      	ldr	r2, [r7, #16]
 8008836:	4313      	orrs	r3, r2
 8008838:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	699b      	ldr	r3, [r3, #24]
 800883e:	011b      	lsls	r3, r3, #4
 8008840:	693a      	ldr	r2, [r7, #16]
 8008842:	4313      	orrs	r3, r2
 8008844:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	693a      	ldr	r2, [r7, #16]
 800884a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	68fa      	ldr	r2, [r7, #12]
 8008850:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	685a      	ldr	r2, [r3, #4]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	697a      	ldr	r2, [r7, #20]
 800885e:	621a      	str	r2, [r3, #32]
}
 8008860:	bf00      	nop
 8008862:	371c      	adds	r7, #28
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr
 800886c:	40010000 	.word	0x40010000
 8008870:	40010400 	.word	0x40010400

08008874 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008874:	b480      	push	{r7}
 8008876:	b087      	sub	sp, #28
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6a1b      	ldr	r3, [r3, #32]
 8008882:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6a1b      	ldr	r3, [r3, #32]
 800888e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	69db      	ldr	r3, [r3, #28]
 800889a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	021b      	lsls	r3, r3, #8
 80088b2:	68fa      	ldr	r2, [r7, #12]
 80088b4:	4313      	orrs	r3, r2
 80088b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80088be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	689b      	ldr	r3, [r3, #8]
 80088c4:	031b      	lsls	r3, r3, #12
 80088c6:	693a      	ldr	r2, [r7, #16]
 80088c8:	4313      	orrs	r3, r2
 80088ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	4a12      	ldr	r2, [pc, #72]	; (8008918 <TIM_OC4_SetConfig+0xa4>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d003      	beq.n	80088dc <TIM_OC4_SetConfig+0x68>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	4a11      	ldr	r2, [pc, #68]	; (800891c <TIM_OC4_SetConfig+0xa8>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d109      	bne.n	80088f0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80088e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	695b      	ldr	r3, [r3, #20]
 80088e8:	019b      	lsls	r3, r3, #6
 80088ea:	697a      	ldr	r2, [r7, #20]
 80088ec:	4313      	orrs	r3, r2
 80088ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	697a      	ldr	r2, [r7, #20]
 80088f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	68fa      	ldr	r2, [r7, #12]
 80088fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	685a      	ldr	r2, [r3, #4]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	693a      	ldr	r2, [r7, #16]
 8008908:	621a      	str	r2, [r3, #32]
}
 800890a:	bf00      	nop
 800890c:	371c      	adds	r7, #28
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop
 8008918:	40010000 	.word	0x40010000
 800891c:	40010400 	.word	0x40010400

08008920 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008920:	b480      	push	{r7}
 8008922:	b087      	sub	sp, #28
 8008924:	af00      	add	r7, sp, #0
 8008926:	60f8      	str	r0, [r7, #12]
 8008928:	60b9      	str	r1, [r7, #8]
 800892a:	607a      	str	r2, [r7, #4]
 800892c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	6a1b      	ldr	r3, [r3, #32]
 8008932:	f023 0201 	bic.w	r2, r3, #1
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	699b      	ldr	r3, [r3, #24]
 800893e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	6a1b      	ldr	r3, [r3, #32]
 8008944:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	4a28      	ldr	r2, [pc, #160]	; (80089ec <TIM_TI1_SetConfig+0xcc>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d01b      	beq.n	8008986 <TIM_TI1_SetConfig+0x66>
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008954:	d017      	beq.n	8008986 <TIM_TI1_SetConfig+0x66>
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	4a25      	ldr	r2, [pc, #148]	; (80089f0 <TIM_TI1_SetConfig+0xd0>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d013      	beq.n	8008986 <TIM_TI1_SetConfig+0x66>
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	4a24      	ldr	r2, [pc, #144]	; (80089f4 <TIM_TI1_SetConfig+0xd4>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d00f      	beq.n	8008986 <TIM_TI1_SetConfig+0x66>
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	4a23      	ldr	r2, [pc, #140]	; (80089f8 <TIM_TI1_SetConfig+0xd8>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d00b      	beq.n	8008986 <TIM_TI1_SetConfig+0x66>
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	4a22      	ldr	r2, [pc, #136]	; (80089fc <TIM_TI1_SetConfig+0xdc>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d007      	beq.n	8008986 <TIM_TI1_SetConfig+0x66>
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	4a21      	ldr	r2, [pc, #132]	; (8008a00 <TIM_TI1_SetConfig+0xe0>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d003      	beq.n	8008986 <TIM_TI1_SetConfig+0x66>
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	4a20      	ldr	r2, [pc, #128]	; (8008a04 <TIM_TI1_SetConfig+0xe4>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d101      	bne.n	800898a <TIM_TI1_SetConfig+0x6a>
 8008986:	2301      	movs	r3, #1
 8008988:	e000      	b.n	800898c <TIM_TI1_SetConfig+0x6c>
 800898a:	2300      	movs	r3, #0
 800898c:	2b00      	cmp	r3, #0
 800898e:	d008      	beq.n	80089a2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	f023 0303 	bic.w	r3, r3, #3
 8008996:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008998:	697a      	ldr	r2, [r7, #20]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	4313      	orrs	r3, r2
 800899e:	617b      	str	r3, [r7, #20]
 80089a0:	e003      	b.n	80089aa <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	f043 0301 	orr.w	r3, r3, #1
 80089a8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80089b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	011b      	lsls	r3, r3, #4
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	697a      	ldr	r2, [r7, #20]
 80089ba:	4313      	orrs	r3, r2
 80089bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	f023 030a 	bic.w	r3, r3, #10
 80089c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	f003 030a 	and.w	r3, r3, #10
 80089cc:	693a      	ldr	r2, [r7, #16]
 80089ce:	4313      	orrs	r3, r2
 80089d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	697a      	ldr	r2, [r7, #20]
 80089d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	693a      	ldr	r2, [r7, #16]
 80089dc:	621a      	str	r2, [r3, #32]
}
 80089de:	bf00      	nop
 80089e0:	371c      	adds	r7, #28
 80089e2:	46bd      	mov	sp, r7
 80089e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e8:	4770      	bx	lr
 80089ea:	bf00      	nop
 80089ec:	40010000 	.word	0x40010000
 80089f0:	40000400 	.word	0x40000400
 80089f4:	40000800 	.word	0x40000800
 80089f8:	40000c00 	.word	0x40000c00
 80089fc:	40010400 	.word	0x40010400
 8008a00:	40014000 	.word	0x40014000
 8008a04:	40001800 	.word	0x40001800

08008a08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b087      	sub	sp, #28
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	60f8      	str	r0, [r7, #12]
 8008a10:	60b9      	str	r1, [r7, #8]
 8008a12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	6a1b      	ldr	r3, [r3, #32]
 8008a18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	6a1b      	ldr	r3, [r3, #32]
 8008a1e:	f023 0201 	bic.w	r2, r3, #1
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	699b      	ldr	r3, [r3, #24]
 8008a2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008a32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	011b      	lsls	r3, r3, #4
 8008a38:	693a      	ldr	r2, [r7, #16]
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	f023 030a 	bic.w	r3, r3, #10
 8008a44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008a46:	697a      	ldr	r2, [r7, #20]
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	693a      	ldr	r2, [r7, #16]
 8008a52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	697a      	ldr	r2, [r7, #20]
 8008a58:	621a      	str	r2, [r3, #32]
}
 8008a5a:	bf00      	nop
 8008a5c:	371c      	adds	r7, #28
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a64:	4770      	bx	lr

08008a66 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008a66:	b480      	push	{r7}
 8008a68:	b087      	sub	sp, #28
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	60f8      	str	r0, [r7, #12]
 8008a6e:	60b9      	str	r1, [r7, #8]
 8008a70:	607a      	str	r2, [r7, #4]
 8008a72:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	6a1b      	ldr	r3, [r3, #32]
 8008a78:	f023 0210 	bic.w	r2, r3, #16
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	699b      	ldr	r3, [r3, #24]
 8008a84:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	6a1b      	ldr	r3, [r3, #32]
 8008a8a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a92:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	021b      	lsls	r3, r3, #8
 8008a98:	697a      	ldr	r2, [r7, #20]
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008aa4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	031b      	lsls	r3, r3, #12
 8008aaa:	b29b      	uxth	r3, r3
 8008aac:	697a      	ldr	r2, [r7, #20]
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008ab8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	011b      	lsls	r3, r3, #4
 8008abe:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008ac2:	693a      	ldr	r2, [r7, #16]
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	697a      	ldr	r2, [r7, #20]
 8008acc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	693a      	ldr	r2, [r7, #16]
 8008ad2:	621a      	str	r2, [r3, #32]
}
 8008ad4:	bf00      	nop
 8008ad6:	371c      	adds	r7, #28
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr

08008ae0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b087      	sub	sp, #28
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	60f8      	str	r0, [r7, #12]
 8008ae8:	60b9      	str	r1, [r7, #8]
 8008aea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	6a1b      	ldr	r3, [r3, #32]
 8008af0:	f023 0210 	bic.w	r2, r3, #16
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	699b      	ldr	r3, [r3, #24]
 8008afc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	6a1b      	ldr	r3, [r3, #32]
 8008b02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008b0a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	031b      	lsls	r3, r3, #12
 8008b10:	697a      	ldr	r2, [r7, #20]
 8008b12:	4313      	orrs	r3, r2
 8008b14:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008b1c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	011b      	lsls	r3, r3, #4
 8008b22:	693a      	ldr	r2, [r7, #16]
 8008b24:	4313      	orrs	r3, r2
 8008b26:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	697a      	ldr	r2, [r7, #20]
 8008b2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	693a      	ldr	r2, [r7, #16]
 8008b32:	621a      	str	r2, [r3, #32]
}
 8008b34:	bf00      	nop
 8008b36:	371c      	adds	r7, #28
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr

08008b40 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b087      	sub	sp, #28
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	60f8      	str	r0, [r7, #12]
 8008b48:	60b9      	str	r1, [r7, #8]
 8008b4a:	607a      	str	r2, [r7, #4]
 8008b4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	6a1b      	ldr	r3, [r3, #32]
 8008b52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	69db      	ldr	r3, [r3, #28]
 8008b5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	6a1b      	ldr	r3, [r3, #32]
 8008b64:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	f023 0303 	bic.w	r3, r3, #3
 8008b6c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008b6e:	697a      	ldr	r2, [r7, #20]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	4313      	orrs	r3, r2
 8008b74:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008b7c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	011b      	lsls	r3, r3, #4
 8008b82:	b2db      	uxtb	r3, r3
 8008b84:	697a      	ldr	r2, [r7, #20]
 8008b86:	4313      	orrs	r3, r2
 8008b88:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008b90:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	021b      	lsls	r3, r3, #8
 8008b96:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008b9a:	693a      	ldr	r2, [r7, #16]
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	697a      	ldr	r2, [r7, #20]
 8008ba4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	693a      	ldr	r2, [r7, #16]
 8008baa:	621a      	str	r2, [r3, #32]
}
 8008bac:	bf00      	nop
 8008bae:	371c      	adds	r7, #28
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr

08008bb8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b087      	sub	sp, #28
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	60f8      	str	r0, [r7, #12]
 8008bc0:	60b9      	str	r1, [r7, #8]
 8008bc2:	607a      	str	r2, [r7, #4]
 8008bc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	6a1b      	ldr	r3, [r3, #32]
 8008bca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	69db      	ldr	r3, [r3, #28]
 8008bd6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	6a1b      	ldr	r3, [r3, #32]
 8008bdc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008be4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	021b      	lsls	r3, r3, #8
 8008bea:	697a      	ldr	r2, [r7, #20]
 8008bec:	4313      	orrs	r3, r2
 8008bee:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008bf6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	031b      	lsls	r3, r3, #12
 8008bfc:	b29b      	uxth	r3, r3
 8008bfe:	697a      	ldr	r2, [r7, #20]
 8008c00:	4313      	orrs	r3, r2
 8008c02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008c0a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	031b      	lsls	r3, r3, #12
 8008c10:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008c14:	693a      	ldr	r2, [r7, #16]
 8008c16:	4313      	orrs	r3, r2
 8008c18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	697a      	ldr	r2, [r7, #20]
 8008c1e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	693a      	ldr	r2, [r7, #16]
 8008c24:	621a      	str	r2, [r3, #32]
}
 8008c26:	bf00      	nop
 8008c28:	371c      	adds	r7, #28
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c30:	4770      	bx	lr

08008c32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008c32:	b480      	push	{r7}
 8008c34:	b085      	sub	sp, #20
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
 8008c3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	689b      	ldr	r3, [r3, #8]
 8008c40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008c4a:	683a      	ldr	r2, [r7, #0]
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	f043 0307 	orr.w	r3, r3, #7
 8008c54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	68fa      	ldr	r2, [r7, #12]
 8008c5a:	609a      	str	r2, [r3, #8]
}
 8008c5c:	bf00      	nop
 8008c5e:	3714      	adds	r7, #20
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr

08008c68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b087      	sub	sp, #28
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	60f8      	str	r0, [r7, #12]
 8008c70:	60b9      	str	r1, [r7, #8]
 8008c72:	607a      	str	r2, [r7, #4]
 8008c74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	689b      	ldr	r3, [r3, #8]
 8008c7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	021a      	lsls	r2, r3, #8
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	431a      	orrs	r2, r3
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	697a      	ldr	r2, [r7, #20]
 8008c92:	4313      	orrs	r3, r2
 8008c94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	697a      	ldr	r2, [r7, #20]
 8008c9a:	609a      	str	r2, [r3, #8]
}
 8008c9c:	bf00      	nop
 8008c9e:	371c      	adds	r7, #28
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr

08008ca8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b087      	sub	sp, #28
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	60f8      	str	r0, [r7, #12]
 8008cb0:	60b9      	str	r1, [r7, #8]
 8008cb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	f003 031f 	and.w	r3, r3, #31
 8008cba:	2201      	movs	r2, #1
 8008cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8008cc0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	6a1a      	ldr	r2, [r3, #32]
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	43db      	mvns	r3, r3
 8008cca:	401a      	ands	r2, r3
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	6a1a      	ldr	r2, [r3, #32]
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	f003 031f 	and.w	r3, r3, #31
 8008cda:	6879      	ldr	r1, [r7, #4]
 8008cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8008ce0:	431a      	orrs	r2, r3
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	621a      	str	r2, [r3, #32]
}
 8008ce6:	bf00      	nop
 8008ce8:	371c      	adds	r7, #28
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr
	...

08008cf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b085      	sub	sp, #20
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d101      	bne.n	8008d0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008d08:	2302      	movs	r3, #2
 8008d0a:	e05a      	b.n	8008dc2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2201      	movs	r2, #1
 8008d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2202      	movs	r2, #2
 8008d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	689b      	ldr	r3, [r3, #8]
 8008d2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	68fa      	ldr	r2, [r7, #12]
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	68fa      	ldr	r2, [r7, #12]
 8008d44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4a21      	ldr	r2, [pc, #132]	; (8008dd0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d022      	beq.n	8008d96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d58:	d01d      	beq.n	8008d96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4a1d      	ldr	r2, [pc, #116]	; (8008dd4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d018      	beq.n	8008d96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4a1b      	ldr	r2, [pc, #108]	; (8008dd8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d013      	beq.n	8008d96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4a1a      	ldr	r2, [pc, #104]	; (8008ddc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d00e      	beq.n	8008d96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4a18      	ldr	r2, [pc, #96]	; (8008de0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d009      	beq.n	8008d96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4a17      	ldr	r2, [pc, #92]	; (8008de4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d004      	beq.n	8008d96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a15      	ldr	r2, [pc, #84]	; (8008de8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d10c      	bne.n	8008db0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	685b      	ldr	r3, [r3, #4]
 8008da2:	68ba      	ldr	r2, [r7, #8]
 8008da4:	4313      	orrs	r3, r2
 8008da6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	68ba      	ldr	r2, [r7, #8]
 8008dae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2201      	movs	r2, #1
 8008db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008dc0:	2300      	movs	r3, #0
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3714      	adds	r7, #20
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dcc:	4770      	bx	lr
 8008dce:	bf00      	nop
 8008dd0:	40010000 	.word	0x40010000
 8008dd4:	40000400 	.word	0x40000400
 8008dd8:	40000800 	.word	0x40000800
 8008ddc:	40000c00 	.word	0x40000c00
 8008de0:	40010400 	.word	0x40010400
 8008de4:	40014000 	.word	0x40014000
 8008de8:	40001800 	.word	0x40001800

08008dec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b083      	sub	sp, #12
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008df4:	bf00      	nop
 8008df6:	370c      	adds	r7, #12
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr

08008e00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b083      	sub	sp, #12
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008e08:	bf00      	nop
 8008e0a:	370c      	adds	r7, #12
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr

08008e14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b082      	sub	sp, #8
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d101      	bne.n	8008e26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e22:	2301      	movs	r3, #1
 8008e24:	e03f      	b.n	8008ea6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008e2c:	b2db      	uxtb	r3, r3
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d106      	bne.n	8008e40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2200      	movs	r2, #0
 8008e36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f7fb fc8c 	bl	8004758 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2224      	movs	r2, #36	; 0x24
 8008e44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	68da      	ldr	r2, [r3, #12]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008e56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f000 fa5f 	bl	800931c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	691a      	ldr	r2, [r3, #16]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008e6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	695a      	ldr	r2, [r3, #20]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008e7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	68da      	ldr	r2, [r3, #12]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008e8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2200      	movs	r2, #0
 8008e92:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2220      	movs	r2, #32
 8008e98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2220      	movs	r2, #32
 8008ea0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008ea4:	2300      	movs	r3, #0
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3708      	adds	r7, #8
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}

08008eae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008eae:	b580      	push	{r7, lr}
 8008eb0:	b088      	sub	sp, #32
 8008eb2:	af02      	add	r7, sp, #8
 8008eb4:	60f8      	str	r0, [r7, #12]
 8008eb6:	60b9      	str	r1, [r7, #8]
 8008eb8:	603b      	str	r3, [r7, #0]
 8008eba:	4613      	mov	r3, r2
 8008ebc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008ec8:	b2db      	uxtb	r3, r3
 8008eca:	2b20      	cmp	r3, #32
 8008ecc:	f040 8083 	bne.w	8008fd6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d002      	beq.n	8008edc <HAL_UART_Transmit+0x2e>
 8008ed6:	88fb      	ldrh	r3, [r7, #6]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d101      	bne.n	8008ee0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8008edc:	2301      	movs	r3, #1
 8008ede:	e07b      	b.n	8008fd8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008ee6:	2b01      	cmp	r3, #1
 8008ee8:	d101      	bne.n	8008eee <HAL_UART_Transmit+0x40>
 8008eea:	2302      	movs	r3, #2
 8008eec:	e074      	b.n	8008fd8 <HAL_UART_Transmit+0x12a>
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	2201      	movs	r2, #1
 8008ef2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2221      	movs	r2, #33	; 0x21
 8008f00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008f04:	f7fb fea6 	bl	8004c54 <HAL_GetTick>
 8008f08:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	88fa      	ldrh	r2, [r7, #6]
 8008f0e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	88fa      	ldrh	r2, [r7, #6]
 8008f14:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8008f1e:	e042      	b.n	8008fa6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008f24:	b29b      	uxth	r3, r3
 8008f26:	3b01      	subs	r3, #1
 8008f28:	b29a      	uxth	r2, r3
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	689b      	ldr	r3, [r3, #8]
 8008f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f36:	d122      	bne.n	8008f7e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	9300      	str	r3, [sp, #0]
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	2180      	movs	r1, #128	; 0x80
 8008f42:	68f8      	ldr	r0, [r7, #12]
 8008f44:	f000 f96c 	bl	8009220 <UART_WaitOnFlagUntilTimeout>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d001      	beq.n	8008f52 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8008f4e:	2303      	movs	r3, #3
 8008f50:	e042      	b.n	8008fd8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	881b      	ldrh	r3, [r3, #0]
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008f64:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	691b      	ldr	r3, [r3, #16]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d103      	bne.n	8008f76 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	3302      	adds	r3, #2
 8008f72:	60bb      	str	r3, [r7, #8]
 8008f74:	e017      	b.n	8008fa6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	3301      	adds	r3, #1
 8008f7a:	60bb      	str	r3, [r7, #8]
 8008f7c:	e013      	b.n	8008fa6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	9300      	str	r3, [sp, #0]
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	2200      	movs	r2, #0
 8008f86:	2180      	movs	r1, #128	; 0x80
 8008f88:	68f8      	ldr	r0, [r7, #12]
 8008f8a:	f000 f949 	bl	8009220 <UART_WaitOnFlagUntilTimeout>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d001      	beq.n	8008f98 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8008f94:	2303      	movs	r3, #3
 8008f96:	e01f      	b.n	8008fd8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	1c5a      	adds	r2, r3, #1
 8008f9c:	60ba      	str	r2, [r7, #8]
 8008f9e:	781a      	ldrb	r2, [r3, #0]
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008faa:	b29b      	uxth	r3, r3
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d1b7      	bne.n	8008f20 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	9300      	str	r3, [sp, #0]
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	2140      	movs	r1, #64	; 0x40
 8008fba:	68f8      	ldr	r0, [r7, #12]
 8008fbc:	f000 f930 	bl	8009220 <UART_WaitOnFlagUntilTimeout>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d001      	beq.n	8008fca <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8008fc6:	2303      	movs	r3, #3
 8008fc8:	e006      	b.n	8008fd8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2220      	movs	r2, #32
 8008fce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	e000      	b.n	8008fd8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8008fd6:	2302      	movs	r3, #2
  }
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3718      	adds	r7, #24
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b086      	sub	sp, #24
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	60f8      	str	r0, [r7, #12]
 8008fe8:	60b9      	str	r1, [r7, #8]
 8008fea:	4613      	mov	r3, r2
 8008fec:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008ff4:	b2db      	uxtb	r3, r3
 8008ff6:	2b20      	cmp	r3, #32
 8008ff8:	d166      	bne.n	80090c8 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d002      	beq.n	8009006 <HAL_UART_Receive_DMA+0x26>
 8009000:	88fb      	ldrh	r3, [r7, #6]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d101      	bne.n	800900a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8009006:	2301      	movs	r3, #1
 8009008:	e05f      	b.n	80090ca <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009010:	2b01      	cmp	r3, #1
 8009012:	d101      	bne.n	8009018 <HAL_UART_Receive_DMA+0x38>
 8009014:	2302      	movs	r3, #2
 8009016:	e058      	b.n	80090ca <HAL_UART_Receive_DMA+0xea>
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2201      	movs	r2, #1
 800901c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8009020:	68ba      	ldr	r2, [r7, #8]
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	88fa      	ldrh	r2, [r7, #6]
 800902a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2200      	movs	r2, #0
 8009030:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	2222      	movs	r2, #34	; 0x22
 8009036:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800903e:	4a25      	ldr	r2, [pc, #148]	; (80090d4 <HAL_UART_Receive_DMA+0xf4>)
 8009040:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009046:	4a24      	ldr	r2, [pc, #144]	; (80090d8 <HAL_UART_Receive_DMA+0xf8>)
 8009048:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800904e:	4a23      	ldr	r2, [pc, #140]	; (80090dc <HAL_UART_Receive_DMA+0xfc>)
 8009050:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009056:	2200      	movs	r2, #0
 8009058:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800905a:	f107 0308 	add.w	r3, r7, #8
 800905e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	3304      	adds	r3, #4
 800906a:	4619      	mov	r1, r3
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	681a      	ldr	r2, [r3, #0]
 8009070:	88fb      	ldrh	r3, [r7, #6]
 8009072:	f7fb ffdd 	bl	8005030 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8009076:	2300      	movs	r3, #0
 8009078:	613b      	str	r3, [r7, #16]
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	613b      	str	r3, [r7, #16]
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	685b      	ldr	r3, [r3, #4]
 8009088:	613b      	str	r3, [r7, #16]
 800908a:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2200      	movs	r2, #0
 8009090:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	68da      	ldr	r2, [r3, #12]
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80090a2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	695a      	ldr	r2, [r3, #20]
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f042 0201 	orr.w	r2, r2, #1
 80090b2:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	695a      	ldr	r2, [r3, #20]
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80090c2:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80090c4:	2300      	movs	r3, #0
 80090c6:	e000      	b.n	80090ca <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80090c8:	2302      	movs	r3, #2
  }
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3718      	adds	r7, #24
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}
 80090d2:	bf00      	nop
 80090d4:	08009109 	.word	0x08009109
 80090d8:	08009171 	.word	0x08009171
 80090dc:	0800918d 	.word	0x0800918d

080090e0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80090e0:	b480      	push	{r7}
 80090e2:	b083      	sub	sp, #12
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80090e8:	bf00      	nop
 80090ea:	370c      	adds	r7, #12
 80090ec:	46bd      	mov	sp, r7
 80090ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f2:	4770      	bx	lr

080090f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b083      	sub	sp, #12
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80090fc:	bf00      	nop
 80090fe:	370c      	adds	r7, #12
 8009100:	46bd      	mov	sp, r7
 8009102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009106:	4770      	bx	lr

08009108 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b084      	sub	sp, #16
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009114:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009120:	2b00      	cmp	r3, #0
 8009122:	d11e      	bne.n	8009162 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2200      	movs	r2, #0
 8009128:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	68da      	ldr	r2, [r3, #12]
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009138:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	695a      	ldr	r2, [r3, #20]
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f022 0201 	bic.w	r2, r2, #1
 8009148:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	695a      	ldr	r2, [r3, #20]
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009158:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2220      	movs	r2, #32
 800915e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8009162:	68f8      	ldr	r0, [r7, #12]
 8009164:	f7fa f966 	bl	8003434 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009168:	bf00      	nop
 800916a:	3710      	adds	r7, #16
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}

08009170 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b084      	sub	sp, #16
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800917c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800917e:	68f8      	ldr	r0, [r7, #12]
 8009180:	f7ff ffae 	bl	80090e0 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009184:	bf00      	nop
 8009186:	3710      	adds	r7, #16
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}

0800918c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b084      	sub	sp, #16
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009194:	2300      	movs	r3, #0
 8009196:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800919c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	695b      	ldr	r3, [r3, #20]
 80091a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091a8:	2b80      	cmp	r3, #128	; 0x80
 80091aa:	bf0c      	ite	eq
 80091ac:	2301      	moveq	r3, #1
 80091ae:	2300      	movne	r3, #0
 80091b0:	b2db      	uxtb	r3, r3
 80091b2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80091ba:	b2db      	uxtb	r3, r3
 80091bc:	2b21      	cmp	r3, #33	; 0x21
 80091be:	d108      	bne.n	80091d2 <UART_DMAError+0x46>
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d005      	beq.n	80091d2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	2200      	movs	r2, #0
 80091ca:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80091cc:	68b8      	ldr	r0, [r7, #8]
 80091ce:	f000 f871 	bl	80092b4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	695b      	ldr	r3, [r3, #20]
 80091d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091dc:	2b40      	cmp	r3, #64	; 0x40
 80091de:	bf0c      	ite	eq
 80091e0:	2301      	moveq	r3, #1
 80091e2:	2300      	movne	r3, #0
 80091e4:	b2db      	uxtb	r3, r3
 80091e6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80091ee:	b2db      	uxtb	r3, r3
 80091f0:	2b22      	cmp	r3, #34	; 0x22
 80091f2:	d108      	bne.n	8009206 <UART_DMAError+0x7a>
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d005      	beq.n	8009206 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	2200      	movs	r2, #0
 80091fe:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009200:	68b8      	ldr	r0, [r7, #8]
 8009202:	f000 f86d 	bl	80092e0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800920a:	f043 0210 	orr.w	r2, r3, #16
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009212:	68b8      	ldr	r0, [r7, #8]
 8009214:	f7ff ff6e 	bl	80090f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009218:	bf00      	nop
 800921a:	3710      	adds	r7, #16
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}

08009220 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b084      	sub	sp, #16
 8009224:	af00      	add	r7, sp, #0
 8009226:	60f8      	str	r0, [r7, #12]
 8009228:	60b9      	str	r1, [r7, #8]
 800922a:	603b      	str	r3, [r7, #0]
 800922c:	4613      	mov	r3, r2
 800922e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009230:	e02c      	b.n	800928c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009232:	69bb      	ldr	r3, [r7, #24]
 8009234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009238:	d028      	beq.n	800928c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800923a:	69bb      	ldr	r3, [r7, #24]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d007      	beq.n	8009250 <UART_WaitOnFlagUntilTimeout+0x30>
 8009240:	f7fb fd08 	bl	8004c54 <HAL_GetTick>
 8009244:	4602      	mov	r2, r0
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	1ad3      	subs	r3, r2, r3
 800924a:	69ba      	ldr	r2, [r7, #24]
 800924c:	429a      	cmp	r2, r3
 800924e:	d21d      	bcs.n	800928c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	68da      	ldr	r2, [r3, #12]
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800925e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	695a      	ldr	r2, [r3, #20]
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f022 0201 	bic.w	r2, r2, #1
 800926e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2220      	movs	r2, #32
 8009274:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2220      	movs	r2, #32
 800927c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2200      	movs	r2, #0
 8009284:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8009288:	2303      	movs	r3, #3
 800928a:	e00f      	b.n	80092ac <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	681a      	ldr	r2, [r3, #0]
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	4013      	ands	r3, r2
 8009296:	68ba      	ldr	r2, [r7, #8]
 8009298:	429a      	cmp	r2, r3
 800929a:	bf0c      	ite	eq
 800929c:	2301      	moveq	r3, #1
 800929e:	2300      	movne	r3, #0
 80092a0:	b2db      	uxtb	r3, r3
 80092a2:	461a      	mov	r2, r3
 80092a4:	79fb      	ldrb	r3, [r7, #7]
 80092a6:	429a      	cmp	r2, r3
 80092a8:	d0c3      	beq.n	8009232 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80092aa:	2300      	movs	r3, #0
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3710      	adds	r7, #16
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}

080092b4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b083      	sub	sp, #12
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	68da      	ldr	r2, [r3, #12]
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80092ca:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2220      	movs	r2, #32
 80092d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80092d4:	bf00      	nop
 80092d6:	370c      	adds	r7, #12
 80092d8:	46bd      	mov	sp, r7
 80092da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092de:	4770      	bx	lr

080092e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b083      	sub	sp, #12
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	68da      	ldr	r2, [r3, #12]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80092f6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	695a      	ldr	r2, [r3, #20]
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f022 0201 	bic.w	r2, r2, #1
 8009306:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2220      	movs	r2, #32
 800930c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8009310:	bf00      	nop
 8009312:	370c      	adds	r7, #12
 8009314:	46bd      	mov	sp, r7
 8009316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931a:	4770      	bx	lr

0800931c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800931c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009320:	b085      	sub	sp, #20
 8009322:	af00      	add	r7, sp, #0
 8009324:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	691b      	ldr	r3, [r3, #16]
 800932c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	68da      	ldr	r2, [r3, #12]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	430a      	orrs	r2, r1
 800933a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	689a      	ldr	r2, [r3, #8]
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	691b      	ldr	r3, [r3, #16]
 8009344:	431a      	orrs	r2, r3
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	695b      	ldr	r3, [r3, #20]
 800934a:	431a      	orrs	r2, r3
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	69db      	ldr	r3, [r3, #28]
 8009350:	4313      	orrs	r3, r2
 8009352:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	68db      	ldr	r3, [r3, #12]
 800935a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800935e:	f023 030c 	bic.w	r3, r3, #12
 8009362:	687a      	ldr	r2, [r7, #4]
 8009364:	6812      	ldr	r2, [r2, #0]
 8009366:	68f9      	ldr	r1, [r7, #12]
 8009368:	430b      	orrs	r3, r1
 800936a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	695b      	ldr	r3, [r3, #20]
 8009372:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	699a      	ldr	r2, [r3, #24]
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	430a      	orrs	r2, r1
 8009380:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	69db      	ldr	r3, [r3, #28]
 8009386:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800938a:	f040 818b 	bne.w	80096a4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	4ac1      	ldr	r2, [pc, #772]	; (8009698 <UART_SetConfig+0x37c>)
 8009394:	4293      	cmp	r3, r2
 8009396:	d005      	beq.n	80093a4 <UART_SetConfig+0x88>
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	4abf      	ldr	r2, [pc, #764]	; (800969c <UART_SetConfig+0x380>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	f040 80bd 	bne.w	800951e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80093a4:	f7fe fb24 	bl	80079f0 <HAL_RCC_GetPCLK2Freq>
 80093a8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	461d      	mov	r5, r3
 80093ae:	f04f 0600 	mov.w	r6, #0
 80093b2:	46a8      	mov	r8, r5
 80093b4:	46b1      	mov	r9, r6
 80093b6:	eb18 0308 	adds.w	r3, r8, r8
 80093ba:	eb49 0409 	adc.w	r4, r9, r9
 80093be:	4698      	mov	r8, r3
 80093c0:	46a1      	mov	r9, r4
 80093c2:	eb18 0805 	adds.w	r8, r8, r5
 80093c6:	eb49 0906 	adc.w	r9, r9, r6
 80093ca:	f04f 0100 	mov.w	r1, #0
 80093ce:	f04f 0200 	mov.w	r2, #0
 80093d2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80093d6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80093da:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80093de:	4688      	mov	r8, r1
 80093e0:	4691      	mov	r9, r2
 80093e2:	eb18 0005 	adds.w	r0, r8, r5
 80093e6:	eb49 0106 	adc.w	r1, r9, r6
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	685b      	ldr	r3, [r3, #4]
 80093ee:	461d      	mov	r5, r3
 80093f0:	f04f 0600 	mov.w	r6, #0
 80093f4:	196b      	adds	r3, r5, r5
 80093f6:	eb46 0406 	adc.w	r4, r6, r6
 80093fa:	461a      	mov	r2, r3
 80093fc:	4623      	mov	r3, r4
 80093fe:	f7f7 fc73 	bl	8000ce8 <__aeabi_uldivmod>
 8009402:	4603      	mov	r3, r0
 8009404:	460c      	mov	r4, r1
 8009406:	461a      	mov	r2, r3
 8009408:	4ba5      	ldr	r3, [pc, #660]	; (80096a0 <UART_SetConfig+0x384>)
 800940a:	fba3 2302 	umull	r2, r3, r3, r2
 800940e:	095b      	lsrs	r3, r3, #5
 8009410:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	461d      	mov	r5, r3
 8009418:	f04f 0600 	mov.w	r6, #0
 800941c:	46a9      	mov	r9, r5
 800941e:	46b2      	mov	sl, r6
 8009420:	eb19 0309 	adds.w	r3, r9, r9
 8009424:	eb4a 040a 	adc.w	r4, sl, sl
 8009428:	4699      	mov	r9, r3
 800942a:	46a2      	mov	sl, r4
 800942c:	eb19 0905 	adds.w	r9, r9, r5
 8009430:	eb4a 0a06 	adc.w	sl, sl, r6
 8009434:	f04f 0100 	mov.w	r1, #0
 8009438:	f04f 0200 	mov.w	r2, #0
 800943c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009440:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009444:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009448:	4689      	mov	r9, r1
 800944a:	4692      	mov	sl, r2
 800944c:	eb19 0005 	adds.w	r0, r9, r5
 8009450:	eb4a 0106 	adc.w	r1, sl, r6
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	685b      	ldr	r3, [r3, #4]
 8009458:	461d      	mov	r5, r3
 800945a:	f04f 0600 	mov.w	r6, #0
 800945e:	196b      	adds	r3, r5, r5
 8009460:	eb46 0406 	adc.w	r4, r6, r6
 8009464:	461a      	mov	r2, r3
 8009466:	4623      	mov	r3, r4
 8009468:	f7f7 fc3e 	bl	8000ce8 <__aeabi_uldivmod>
 800946c:	4603      	mov	r3, r0
 800946e:	460c      	mov	r4, r1
 8009470:	461a      	mov	r2, r3
 8009472:	4b8b      	ldr	r3, [pc, #556]	; (80096a0 <UART_SetConfig+0x384>)
 8009474:	fba3 1302 	umull	r1, r3, r3, r2
 8009478:	095b      	lsrs	r3, r3, #5
 800947a:	2164      	movs	r1, #100	; 0x64
 800947c:	fb01 f303 	mul.w	r3, r1, r3
 8009480:	1ad3      	subs	r3, r2, r3
 8009482:	00db      	lsls	r3, r3, #3
 8009484:	3332      	adds	r3, #50	; 0x32
 8009486:	4a86      	ldr	r2, [pc, #536]	; (80096a0 <UART_SetConfig+0x384>)
 8009488:	fba2 2303 	umull	r2, r3, r2, r3
 800948c:	095b      	lsrs	r3, r3, #5
 800948e:	005b      	lsls	r3, r3, #1
 8009490:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009494:	4498      	add	r8, r3
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	461d      	mov	r5, r3
 800949a:	f04f 0600 	mov.w	r6, #0
 800949e:	46a9      	mov	r9, r5
 80094a0:	46b2      	mov	sl, r6
 80094a2:	eb19 0309 	adds.w	r3, r9, r9
 80094a6:	eb4a 040a 	adc.w	r4, sl, sl
 80094aa:	4699      	mov	r9, r3
 80094ac:	46a2      	mov	sl, r4
 80094ae:	eb19 0905 	adds.w	r9, r9, r5
 80094b2:	eb4a 0a06 	adc.w	sl, sl, r6
 80094b6:	f04f 0100 	mov.w	r1, #0
 80094ba:	f04f 0200 	mov.w	r2, #0
 80094be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80094c2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80094c6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80094ca:	4689      	mov	r9, r1
 80094cc:	4692      	mov	sl, r2
 80094ce:	eb19 0005 	adds.w	r0, r9, r5
 80094d2:	eb4a 0106 	adc.w	r1, sl, r6
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	685b      	ldr	r3, [r3, #4]
 80094da:	461d      	mov	r5, r3
 80094dc:	f04f 0600 	mov.w	r6, #0
 80094e0:	196b      	adds	r3, r5, r5
 80094e2:	eb46 0406 	adc.w	r4, r6, r6
 80094e6:	461a      	mov	r2, r3
 80094e8:	4623      	mov	r3, r4
 80094ea:	f7f7 fbfd 	bl	8000ce8 <__aeabi_uldivmod>
 80094ee:	4603      	mov	r3, r0
 80094f0:	460c      	mov	r4, r1
 80094f2:	461a      	mov	r2, r3
 80094f4:	4b6a      	ldr	r3, [pc, #424]	; (80096a0 <UART_SetConfig+0x384>)
 80094f6:	fba3 1302 	umull	r1, r3, r3, r2
 80094fa:	095b      	lsrs	r3, r3, #5
 80094fc:	2164      	movs	r1, #100	; 0x64
 80094fe:	fb01 f303 	mul.w	r3, r1, r3
 8009502:	1ad3      	subs	r3, r2, r3
 8009504:	00db      	lsls	r3, r3, #3
 8009506:	3332      	adds	r3, #50	; 0x32
 8009508:	4a65      	ldr	r2, [pc, #404]	; (80096a0 <UART_SetConfig+0x384>)
 800950a:	fba2 2303 	umull	r2, r3, r2, r3
 800950e:	095b      	lsrs	r3, r3, #5
 8009510:	f003 0207 	and.w	r2, r3, #7
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	4442      	add	r2, r8
 800951a:	609a      	str	r2, [r3, #8]
 800951c:	e26f      	b.n	80099fe <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800951e:	f7fe fa53 	bl	80079c8 <HAL_RCC_GetPCLK1Freq>
 8009522:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	461d      	mov	r5, r3
 8009528:	f04f 0600 	mov.w	r6, #0
 800952c:	46a8      	mov	r8, r5
 800952e:	46b1      	mov	r9, r6
 8009530:	eb18 0308 	adds.w	r3, r8, r8
 8009534:	eb49 0409 	adc.w	r4, r9, r9
 8009538:	4698      	mov	r8, r3
 800953a:	46a1      	mov	r9, r4
 800953c:	eb18 0805 	adds.w	r8, r8, r5
 8009540:	eb49 0906 	adc.w	r9, r9, r6
 8009544:	f04f 0100 	mov.w	r1, #0
 8009548:	f04f 0200 	mov.w	r2, #0
 800954c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009550:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009554:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009558:	4688      	mov	r8, r1
 800955a:	4691      	mov	r9, r2
 800955c:	eb18 0005 	adds.w	r0, r8, r5
 8009560:	eb49 0106 	adc.w	r1, r9, r6
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	685b      	ldr	r3, [r3, #4]
 8009568:	461d      	mov	r5, r3
 800956a:	f04f 0600 	mov.w	r6, #0
 800956e:	196b      	adds	r3, r5, r5
 8009570:	eb46 0406 	adc.w	r4, r6, r6
 8009574:	461a      	mov	r2, r3
 8009576:	4623      	mov	r3, r4
 8009578:	f7f7 fbb6 	bl	8000ce8 <__aeabi_uldivmod>
 800957c:	4603      	mov	r3, r0
 800957e:	460c      	mov	r4, r1
 8009580:	461a      	mov	r2, r3
 8009582:	4b47      	ldr	r3, [pc, #284]	; (80096a0 <UART_SetConfig+0x384>)
 8009584:	fba3 2302 	umull	r2, r3, r3, r2
 8009588:	095b      	lsrs	r3, r3, #5
 800958a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	461d      	mov	r5, r3
 8009592:	f04f 0600 	mov.w	r6, #0
 8009596:	46a9      	mov	r9, r5
 8009598:	46b2      	mov	sl, r6
 800959a:	eb19 0309 	adds.w	r3, r9, r9
 800959e:	eb4a 040a 	adc.w	r4, sl, sl
 80095a2:	4699      	mov	r9, r3
 80095a4:	46a2      	mov	sl, r4
 80095a6:	eb19 0905 	adds.w	r9, r9, r5
 80095aa:	eb4a 0a06 	adc.w	sl, sl, r6
 80095ae:	f04f 0100 	mov.w	r1, #0
 80095b2:	f04f 0200 	mov.w	r2, #0
 80095b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80095ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80095be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80095c2:	4689      	mov	r9, r1
 80095c4:	4692      	mov	sl, r2
 80095c6:	eb19 0005 	adds.w	r0, r9, r5
 80095ca:	eb4a 0106 	adc.w	r1, sl, r6
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	685b      	ldr	r3, [r3, #4]
 80095d2:	461d      	mov	r5, r3
 80095d4:	f04f 0600 	mov.w	r6, #0
 80095d8:	196b      	adds	r3, r5, r5
 80095da:	eb46 0406 	adc.w	r4, r6, r6
 80095de:	461a      	mov	r2, r3
 80095e0:	4623      	mov	r3, r4
 80095e2:	f7f7 fb81 	bl	8000ce8 <__aeabi_uldivmod>
 80095e6:	4603      	mov	r3, r0
 80095e8:	460c      	mov	r4, r1
 80095ea:	461a      	mov	r2, r3
 80095ec:	4b2c      	ldr	r3, [pc, #176]	; (80096a0 <UART_SetConfig+0x384>)
 80095ee:	fba3 1302 	umull	r1, r3, r3, r2
 80095f2:	095b      	lsrs	r3, r3, #5
 80095f4:	2164      	movs	r1, #100	; 0x64
 80095f6:	fb01 f303 	mul.w	r3, r1, r3
 80095fa:	1ad3      	subs	r3, r2, r3
 80095fc:	00db      	lsls	r3, r3, #3
 80095fe:	3332      	adds	r3, #50	; 0x32
 8009600:	4a27      	ldr	r2, [pc, #156]	; (80096a0 <UART_SetConfig+0x384>)
 8009602:	fba2 2303 	umull	r2, r3, r2, r3
 8009606:	095b      	lsrs	r3, r3, #5
 8009608:	005b      	lsls	r3, r3, #1
 800960a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800960e:	4498      	add	r8, r3
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	461d      	mov	r5, r3
 8009614:	f04f 0600 	mov.w	r6, #0
 8009618:	46a9      	mov	r9, r5
 800961a:	46b2      	mov	sl, r6
 800961c:	eb19 0309 	adds.w	r3, r9, r9
 8009620:	eb4a 040a 	adc.w	r4, sl, sl
 8009624:	4699      	mov	r9, r3
 8009626:	46a2      	mov	sl, r4
 8009628:	eb19 0905 	adds.w	r9, r9, r5
 800962c:	eb4a 0a06 	adc.w	sl, sl, r6
 8009630:	f04f 0100 	mov.w	r1, #0
 8009634:	f04f 0200 	mov.w	r2, #0
 8009638:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800963c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009640:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009644:	4689      	mov	r9, r1
 8009646:	4692      	mov	sl, r2
 8009648:	eb19 0005 	adds.w	r0, r9, r5
 800964c:	eb4a 0106 	adc.w	r1, sl, r6
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	685b      	ldr	r3, [r3, #4]
 8009654:	461d      	mov	r5, r3
 8009656:	f04f 0600 	mov.w	r6, #0
 800965a:	196b      	adds	r3, r5, r5
 800965c:	eb46 0406 	adc.w	r4, r6, r6
 8009660:	461a      	mov	r2, r3
 8009662:	4623      	mov	r3, r4
 8009664:	f7f7 fb40 	bl	8000ce8 <__aeabi_uldivmod>
 8009668:	4603      	mov	r3, r0
 800966a:	460c      	mov	r4, r1
 800966c:	461a      	mov	r2, r3
 800966e:	4b0c      	ldr	r3, [pc, #48]	; (80096a0 <UART_SetConfig+0x384>)
 8009670:	fba3 1302 	umull	r1, r3, r3, r2
 8009674:	095b      	lsrs	r3, r3, #5
 8009676:	2164      	movs	r1, #100	; 0x64
 8009678:	fb01 f303 	mul.w	r3, r1, r3
 800967c:	1ad3      	subs	r3, r2, r3
 800967e:	00db      	lsls	r3, r3, #3
 8009680:	3332      	adds	r3, #50	; 0x32
 8009682:	4a07      	ldr	r2, [pc, #28]	; (80096a0 <UART_SetConfig+0x384>)
 8009684:	fba2 2303 	umull	r2, r3, r2, r3
 8009688:	095b      	lsrs	r3, r3, #5
 800968a:	f003 0207 	and.w	r2, r3, #7
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	4442      	add	r2, r8
 8009694:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8009696:	e1b2      	b.n	80099fe <UART_SetConfig+0x6e2>
 8009698:	40011000 	.word	0x40011000
 800969c:	40011400 	.word	0x40011400
 80096a0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4ad7      	ldr	r2, [pc, #860]	; (8009a08 <UART_SetConfig+0x6ec>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d005      	beq.n	80096ba <UART_SetConfig+0x39e>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4ad6      	ldr	r2, [pc, #856]	; (8009a0c <UART_SetConfig+0x6f0>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	f040 80d1 	bne.w	800985c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80096ba:	f7fe f999 	bl	80079f0 <HAL_RCC_GetPCLK2Freq>
 80096be:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	469a      	mov	sl, r3
 80096c4:	f04f 0b00 	mov.w	fp, #0
 80096c8:	46d0      	mov	r8, sl
 80096ca:	46d9      	mov	r9, fp
 80096cc:	eb18 0308 	adds.w	r3, r8, r8
 80096d0:	eb49 0409 	adc.w	r4, r9, r9
 80096d4:	4698      	mov	r8, r3
 80096d6:	46a1      	mov	r9, r4
 80096d8:	eb18 080a 	adds.w	r8, r8, sl
 80096dc:	eb49 090b 	adc.w	r9, r9, fp
 80096e0:	f04f 0100 	mov.w	r1, #0
 80096e4:	f04f 0200 	mov.w	r2, #0
 80096e8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80096ec:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80096f0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80096f4:	4688      	mov	r8, r1
 80096f6:	4691      	mov	r9, r2
 80096f8:	eb1a 0508 	adds.w	r5, sl, r8
 80096fc:	eb4b 0609 	adc.w	r6, fp, r9
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	685b      	ldr	r3, [r3, #4]
 8009704:	4619      	mov	r1, r3
 8009706:	f04f 0200 	mov.w	r2, #0
 800970a:	f04f 0300 	mov.w	r3, #0
 800970e:	f04f 0400 	mov.w	r4, #0
 8009712:	0094      	lsls	r4, r2, #2
 8009714:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009718:	008b      	lsls	r3, r1, #2
 800971a:	461a      	mov	r2, r3
 800971c:	4623      	mov	r3, r4
 800971e:	4628      	mov	r0, r5
 8009720:	4631      	mov	r1, r6
 8009722:	f7f7 fae1 	bl	8000ce8 <__aeabi_uldivmod>
 8009726:	4603      	mov	r3, r0
 8009728:	460c      	mov	r4, r1
 800972a:	461a      	mov	r2, r3
 800972c:	4bb8      	ldr	r3, [pc, #736]	; (8009a10 <UART_SetConfig+0x6f4>)
 800972e:	fba3 2302 	umull	r2, r3, r3, r2
 8009732:	095b      	lsrs	r3, r3, #5
 8009734:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	469b      	mov	fp, r3
 800973c:	f04f 0c00 	mov.w	ip, #0
 8009740:	46d9      	mov	r9, fp
 8009742:	46e2      	mov	sl, ip
 8009744:	eb19 0309 	adds.w	r3, r9, r9
 8009748:	eb4a 040a 	adc.w	r4, sl, sl
 800974c:	4699      	mov	r9, r3
 800974e:	46a2      	mov	sl, r4
 8009750:	eb19 090b 	adds.w	r9, r9, fp
 8009754:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009758:	f04f 0100 	mov.w	r1, #0
 800975c:	f04f 0200 	mov.w	r2, #0
 8009760:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009764:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009768:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800976c:	4689      	mov	r9, r1
 800976e:	4692      	mov	sl, r2
 8009770:	eb1b 0509 	adds.w	r5, fp, r9
 8009774:	eb4c 060a 	adc.w	r6, ip, sl
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	685b      	ldr	r3, [r3, #4]
 800977c:	4619      	mov	r1, r3
 800977e:	f04f 0200 	mov.w	r2, #0
 8009782:	f04f 0300 	mov.w	r3, #0
 8009786:	f04f 0400 	mov.w	r4, #0
 800978a:	0094      	lsls	r4, r2, #2
 800978c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009790:	008b      	lsls	r3, r1, #2
 8009792:	461a      	mov	r2, r3
 8009794:	4623      	mov	r3, r4
 8009796:	4628      	mov	r0, r5
 8009798:	4631      	mov	r1, r6
 800979a:	f7f7 faa5 	bl	8000ce8 <__aeabi_uldivmod>
 800979e:	4603      	mov	r3, r0
 80097a0:	460c      	mov	r4, r1
 80097a2:	461a      	mov	r2, r3
 80097a4:	4b9a      	ldr	r3, [pc, #616]	; (8009a10 <UART_SetConfig+0x6f4>)
 80097a6:	fba3 1302 	umull	r1, r3, r3, r2
 80097aa:	095b      	lsrs	r3, r3, #5
 80097ac:	2164      	movs	r1, #100	; 0x64
 80097ae:	fb01 f303 	mul.w	r3, r1, r3
 80097b2:	1ad3      	subs	r3, r2, r3
 80097b4:	011b      	lsls	r3, r3, #4
 80097b6:	3332      	adds	r3, #50	; 0x32
 80097b8:	4a95      	ldr	r2, [pc, #596]	; (8009a10 <UART_SetConfig+0x6f4>)
 80097ba:	fba2 2303 	umull	r2, r3, r2, r3
 80097be:	095b      	lsrs	r3, r3, #5
 80097c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80097c4:	4498      	add	r8, r3
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	469b      	mov	fp, r3
 80097ca:	f04f 0c00 	mov.w	ip, #0
 80097ce:	46d9      	mov	r9, fp
 80097d0:	46e2      	mov	sl, ip
 80097d2:	eb19 0309 	adds.w	r3, r9, r9
 80097d6:	eb4a 040a 	adc.w	r4, sl, sl
 80097da:	4699      	mov	r9, r3
 80097dc:	46a2      	mov	sl, r4
 80097de:	eb19 090b 	adds.w	r9, r9, fp
 80097e2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80097e6:	f04f 0100 	mov.w	r1, #0
 80097ea:	f04f 0200 	mov.w	r2, #0
 80097ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80097f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80097f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80097fa:	4689      	mov	r9, r1
 80097fc:	4692      	mov	sl, r2
 80097fe:	eb1b 0509 	adds.w	r5, fp, r9
 8009802:	eb4c 060a 	adc.w	r6, ip, sl
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	685b      	ldr	r3, [r3, #4]
 800980a:	4619      	mov	r1, r3
 800980c:	f04f 0200 	mov.w	r2, #0
 8009810:	f04f 0300 	mov.w	r3, #0
 8009814:	f04f 0400 	mov.w	r4, #0
 8009818:	0094      	lsls	r4, r2, #2
 800981a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800981e:	008b      	lsls	r3, r1, #2
 8009820:	461a      	mov	r2, r3
 8009822:	4623      	mov	r3, r4
 8009824:	4628      	mov	r0, r5
 8009826:	4631      	mov	r1, r6
 8009828:	f7f7 fa5e 	bl	8000ce8 <__aeabi_uldivmod>
 800982c:	4603      	mov	r3, r0
 800982e:	460c      	mov	r4, r1
 8009830:	461a      	mov	r2, r3
 8009832:	4b77      	ldr	r3, [pc, #476]	; (8009a10 <UART_SetConfig+0x6f4>)
 8009834:	fba3 1302 	umull	r1, r3, r3, r2
 8009838:	095b      	lsrs	r3, r3, #5
 800983a:	2164      	movs	r1, #100	; 0x64
 800983c:	fb01 f303 	mul.w	r3, r1, r3
 8009840:	1ad3      	subs	r3, r2, r3
 8009842:	011b      	lsls	r3, r3, #4
 8009844:	3332      	adds	r3, #50	; 0x32
 8009846:	4a72      	ldr	r2, [pc, #456]	; (8009a10 <UART_SetConfig+0x6f4>)
 8009848:	fba2 2303 	umull	r2, r3, r2, r3
 800984c:	095b      	lsrs	r3, r3, #5
 800984e:	f003 020f 	and.w	r2, r3, #15
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	4442      	add	r2, r8
 8009858:	609a      	str	r2, [r3, #8]
 800985a:	e0d0      	b.n	80099fe <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800985c:	f7fe f8b4 	bl	80079c8 <HAL_RCC_GetPCLK1Freq>
 8009860:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	469a      	mov	sl, r3
 8009866:	f04f 0b00 	mov.w	fp, #0
 800986a:	46d0      	mov	r8, sl
 800986c:	46d9      	mov	r9, fp
 800986e:	eb18 0308 	adds.w	r3, r8, r8
 8009872:	eb49 0409 	adc.w	r4, r9, r9
 8009876:	4698      	mov	r8, r3
 8009878:	46a1      	mov	r9, r4
 800987a:	eb18 080a 	adds.w	r8, r8, sl
 800987e:	eb49 090b 	adc.w	r9, r9, fp
 8009882:	f04f 0100 	mov.w	r1, #0
 8009886:	f04f 0200 	mov.w	r2, #0
 800988a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800988e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009892:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009896:	4688      	mov	r8, r1
 8009898:	4691      	mov	r9, r2
 800989a:	eb1a 0508 	adds.w	r5, sl, r8
 800989e:	eb4b 0609 	adc.w	r6, fp, r9
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	685b      	ldr	r3, [r3, #4]
 80098a6:	4619      	mov	r1, r3
 80098a8:	f04f 0200 	mov.w	r2, #0
 80098ac:	f04f 0300 	mov.w	r3, #0
 80098b0:	f04f 0400 	mov.w	r4, #0
 80098b4:	0094      	lsls	r4, r2, #2
 80098b6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80098ba:	008b      	lsls	r3, r1, #2
 80098bc:	461a      	mov	r2, r3
 80098be:	4623      	mov	r3, r4
 80098c0:	4628      	mov	r0, r5
 80098c2:	4631      	mov	r1, r6
 80098c4:	f7f7 fa10 	bl	8000ce8 <__aeabi_uldivmod>
 80098c8:	4603      	mov	r3, r0
 80098ca:	460c      	mov	r4, r1
 80098cc:	461a      	mov	r2, r3
 80098ce:	4b50      	ldr	r3, [pc, #320]	; (8009a10 <UART_SetConfig+0x6f4>)
 80098d0:	fba3 2302 	umull	r2, r3, r3, r2
 80098d4:	095b      	lsrs	r3, r3, #5
 80098d6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	469b      	mov	fp, r3
 80098de:	f04f 0c00 	mov.w	ip, #0
 80098e2:	46d9      	mov	r9, fp
 80098e4:	46e2      	mov	sl, ip
 80098e6:	eb19 0309 	adds.w	r3, r9, r9
 80098ea:	eb4a 040a 	adc.w	r4, sl, sl
 80098ee:	4699      	mov	r9, r3
 80098f0:	46a2      	mov	sl, r4
 80098f2:	eb19 090b 	adds.w	r9, r9, fp
 80098f6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80098fa:	f04f 0100 	mov.w	r1, #0
 80098fe:	f04f 0200 	mov.w	r2, #0
 8009902:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009906:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800990a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800990e:	4689      	mov	r9, r1
 8009910:	4692      	mov	sl, r2
 8009912:	eb1b 0509 	adds.w	r5, fp, r9
 8009916:	eb4c 060a 	adc.w	r6, ip, sl
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	685b      	ldr	r3, [r3, #4]
 800991e:	4619      	mov	r1, r3
 8009920:	f04f 0200 	mov.w	r2, #0
 8009924:	f04f 0300 	mov.w	r3, #0
 8009928:	f04f 0400 	mov.w	r4, #0
 800992c:	0094      	lsls	r4, r2, #2
 800992e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009932:	008b      	lsls	r3, r1, #2
 8009934:	461a      	mov	r2, r3
 8009936:	4623      	mov	r3, r4
 8009938:	4628      	mov	r0, r5
 800993a:	4631      	mov	r1, r6
 800993c:	f7f7 f9d4 	bl	8000ce8 <__aeabi_uldivmod>
 8009940:	4603      	mov	r3, r0
 8009942:	460c      	mov	r4, r1
 8009944:	461a      	mov	r2, r3
 8009946:	4b32      	ldr	r3, [pc, #200]	; (8009a10 <UART_SetConfig+0x6f4>)
 8009948:	fba3 1302 	umull	r1, r3, r3, r2
 800994c:	095b      	lsrs	r3, r3, #5
 800994e:	2164      	movs	r1, #100	; 0x64
 8009950:	fb01 f303 	mul.w	r3, r1, r3
 8009954:	1ad3      	subs	r3, r2, r3
 8009956:	011b      	lsls	r3, r3, #4
 8009958:	3332      	adds	r3, #50	; 0x32
 800995a:	4a2d      	ldr	r2, [pc, #180]	; (8009a10 <UART_SetConfig+0x6f4>)
 800995c:	fba2 2303 	umull	r2, r3, r2, r3
 8009960:	095b      	lsrs	r3, r3, #5
 8009962:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009966:	4498      	add	r8, r3
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	469b      	mov	fp, r3
 800996c:	f04f 0c00 	mov.w	ip, #0
 8009970:	46d9      	mov	r9, fp
 8009972:	46e2      	mov	sl, ip
 8009974:	eb19 0309 	adds.w	r3, r9, r9
 8009978:	eb4a 040a 	adc.w	r4, sl, sl
 800997c:	4699      	mov	r9, r3
 800997e:	46a2      	mov	sl, r4
 8009980:	eb19 090b 	adds.w	r9, r9, fp
 8009984:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009988:	f04f 0100 	mov.w	r1, #0
 800998c:	f04f 0200 	mov.w	r2, #0
 8009990:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009994:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009998:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800999c:	4689      	mov	r9, r1
 800999e:	4692      	mov	sl, r2
 80099a0:	eb1b 0509 	adds.w	r5, fp, r9
 80099a4:	eb4c 060a 	adc.w	r6, ip, sl
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	685b      	ldr	r3, [r3, #4]
 80099ac:	4619      	mov	r1, r3
 80099ae:	f04f 0200 	mov.w	r2, #0
 80099b2:	f04f 0300 	mov.w	r3, #0
 80099b6:	f04f 0400 	mov.w	r4, #0
 80099ba:	0094      	lsls	r4, r2, #2
 80099bc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80099c0:	008b      	lsls	r3, r1, #2
 80099c2:	461a      	mov	r2, r3
 80099c4:	4623      	mov	r3, r4
 80099c6:	4628      	mov	r0, r5
 80099c8:	4631      	mov	r1, r6
 80099ca:	f7f7 f98d 	bl	8000ce8 <__aeabi_uldivmod>
 80099ce:	4603      	mov	r3, r0
 80099d0:	460c      	mov	r4, r1
 80099d2:	461a      	mov	r2, r3
 80099d4:	4b0e      	ldr	r3, [pc, #56]	; (8009a10 <UART_SetConfig+0x6f4>)
 80099d6:	fba3 1302 	umull	r1, r3, r3, r2
 80099da:	095b      	lsrs	r3, r3, #5
 80099dc:	2164      	movs	r1, #100	; 0x64
 80099de:	fb01 f303 	mul.w	r3, r1, r3
 80099e2:	1ad3      	subs	r3, r2, r3
 80099e4:	011b      	lsls	r3, r3, #4
 80099e6:	3332      	adds	r3, #50	; 0x32
 80099e8:	4a09      	ldr	r2, [pc, #36]	; (8009a10 <UART_SetConfig+0x6f4>)
 80099ea:	fba2 2303 	umull	r2, r3, r2, r3
 80099ee:	095b      	lsrs	r3, r3, #5
 80099f0:	f003 020f 	and.w	r2, r3, #15
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	4442      	add	r2, r8
 80099fa:	609a      	str	r2, [r3, #8]
}
 80099fc:	e7ff      	b.n	80099fe <UART_SetConfig+0x6e2>
 80099fe:	bf00      	nop
 8009a00:	3714      	adds	r7, #20
 8009a02:	46bd      	mov	sp, r7
 8009a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a08:	40011000 	.word	0x40011000
 8009a0c:	40011400 	.word	0x40011400
 8009a10:	51eb851f 	.word	0x51eb851f

08009a14 <__errno>:
 8009a14:	4b01      	ldr	r3, [pc, #4]	; (8009a1c <__errno+0x8>)
 8009a16:	6818      	ldr	r0, [r3, #0]
 8009a18:	4770      	bx	lr
 8009a1a:	bf00      	nop
 8009a1c:	2000000c 	.word	0x2000000c

08009a20 <__libc_init_array>:
 8009a20:	b570      	push	{r4, r5, r6, lr}
 8009a22:	4e0d      	ldr	r6, [pc, #52]	; (8009a58 <__libc_init_array+0x38>)
 8009a24:	4c0d      	ldr	r4, [pc, #52]	; (8009a5c <__libc_init_array+0x3c>)
 8009a26:	1ba4      	subs	r4, r4, r6
 8009a28:	10a4      	asrs	r4, r4, #2
 8009a2a:	2500      	movs	r5, #0
 8009a2c:	42a5      	cmp	r5, r4
 8009a2e:	d109      	bne.n	8009a44 <__libc_init_array+0x24>
 8009a30:	4e0b      	ldr	r6, [pc, #44]	; (8009a60 <__libc_init_array+0x40>)
 8009a32:	4c0c      	ldr	r4, [pc, #48]	; (8009a64 <__libc_init_array+0x44>)
 8009a34:	f003 f9c6 	bl	800cdc4 <_init>
 8009a38:	1ba4      	subs	r4, r4, r6
 8009a3a:	10a4      	asrs	r4, r4, #2
 8009a3c:	2500      	movs	r5, #0
 8009a3e:	42a5      	cmp	r5, r4
 8009a40:	d105      	bne.n	8009a4e <__libc_init_array+0x2e>
 8009a42:	bd70      	pop	{r4, r5, r6, pc}
 8009a44:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009a48:	4798      	blx	r3
 8009a4a:	3501      	adds	r5, #1
 8009a4c:	e7ee      	b.n	8009a2c <__libc_init_array+0xc>
 8009a4e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009a52:	4798      	blx	r3
 8009a54:	3501      	adds	r5, #1
 8009a56:	e7f2      	b.n	8009a3e <__libc_init_array+0x1e>
 8009a58:	0800d3a0 	.word	0x0800d3a0
 8009a5c:	0800d3a0 	.word	0x0800d3a0
 8009a60:	0800d3a0 	.word	0x0800d3a0
 8009a64:	0800d3a4 	.word	0x0800d3a4

08009a68 <memcpy>:
 8009a68:	b510      	push	{r4, lr}
 8009a6a:	1e43      	subs	r3, r0, #1
 8009a6c:	440a      	add	r2, r1
 8009a6e:	4291      	cmp	r1, r2
 8009a70:	d100      	bne.n	8009a74 <memcpy+0xc>
 8009a72:	bd10      	pop	{r4, pc}
 8009a74:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a78:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a7c:	e7f7      	b.n	8009a6e <memcpy+0x6>

08009a7e <memset>:
 8009a7e:	4402      	add	r2, r0
 8009a80:	4603      	mov	r3, r0
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d100      	bne.n	8009a88 <memset+0xa>
 8009a86:	4770      	bx	lr
 8009a88:	f803 1b01 	strb.w	r1, [r3], #1
 8009a8c:	e7f9      	b.n	8009a82 <memset+0x4>

08009a8e <__cvt>:
 8009a8e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a92:	ec55 4b10 	vmov	r4, r5, d0
 8009a96:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009a98:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009a9c:	2d00      	cmp	r5, #0
 8009a9e:	460e      	mov	r6, r1
 8009aa0:	4691      	mov	r9, r2
 8009aa2:	4619      	mov	r1, r3
 8009aa4:	bfb8      	it	lt
 8009aa6:	4622      	movlt	r2, r4
 8009aa8:	462b      	mov	r3, r5
 8009aaa:	f027 0720 	bic.w	r7, r7, #32
 8009aae:	bfbb      	ittet	lt
 8009ab0:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009ab4:	461d      	movlt	r5, r3
 8009ab6:	2300      	movge	r3, #0
 8009ab8:	232d      	movlt	r3, #45	; 0x2d
 8009aba:	bfb8      	it	lt
 8009abc:	4614      	movlt	r4, r2
 8009abe:	2f46      	cmp	r7, #70	; 0x46
 8009ac0:	700b      	strb	r3, [r1, #0]
 8009ac2:	d004      	beq.n	8009ace <__cvt+0x40>
 8009ac4:	2f45      	cmp	r7, #69	; 0x45
 8009ac6:	d100      	bne.n	8009aca <__cvt+0x3c>
 8009ac8:	3601      	adds	r6, #1
 8009aca:	2102      	movs	r1, #2
 8009acc:	e000      	b.n	8009ad0 <__cvt+0x42>
 8009ace:	2103      	movs	r1, #3
 8009ad0:	ab03      	add	r3, sp, #12
 8009ad2:	9301      	str	r3, [sp, #4]
 8009ad4:	ab02      	add	r3, sp, #8
 8009ad6:	9300      	str	r3, [sp, #0]
 8009ad8:	4632      	mov	r2, r6
 8009ada:	4653      	mov	r3, sl
 8009adc:	ec45 4b10 	vmov	d0, r4, r5
 8009ae0:	f000 fcde 	bl	800a4a0 <_dtoa_r>
 8009ae4:	2f47      	cmp	r7, #71	; 0x47
 8009ae6:	4680      	mov	r8, r0
 8009ae8:	d102      	bne.n	8009af0 <__cvt+0x62>
 8009aea:	f019 0f01 	tst.w	r9, #1
 8009aee:	d026      	beq.n	8009b3e <__cvt+0xb0>
 8009af0:	2f46      	cmp	r7, #70	; 0x46
 8009af2:	eb08 0906 	add.w	r9, r8, r6
 8009af6:	d111      	bne.n	8009b1c <__cvt+0x8e>
 8009af8:	f898 3000 	ldrb.w	r3, [r8]
 8009afc:	2b30      	cmp	r3, #48	; 0x30
 8009afe:	d10a      	bne.n	8009b16 <__cvt+0x88>
 8009b00:	2200      	movs	r2, #0
 8009b02:	2300      	movs	r3, #0
 8009b04:	4620      	mov	r0, r4
 8009b06:	4629      	mov	r1, r5
 8009b08:	f7f6 ffde 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b0c:	b918      	cbnz	r0, 8009b16 <__cvt+0x88>
 8009b0e:	f1c6 0601 	rsb	r6, r6, #1
 8009b12:	f8ca 6000 	str.w	r6, [sl]
 8009b16:	f8da 3000 	ldr.w	r3, [sl]
 8009b1a:	4499      	add	r9, r3
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	2300      	movs	r3, #0
 8009b20:	4620      	mov	r0, r4
 8009b22:	4629      	mov	r1, r5
 8009b24:	f7f6 ffd0 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b28:	b938      	cbnz	r0, 8009b3a <__cvt+0xac>
 8009b2a:	2230      	movs	r2, #48	; 0x30
 8009b2c:	9b03      	ldr	r3, [sp, #12]
 8009b2e:	454b      	cmp	r3, r9
 8009b30:	d205      	bcs.n	8009b3e <__cvt+0xb0>
 8009b32:	1c59      	adds	r1, r3, #1
 8009b34:	9103      	str	r1, [sp, #12]
 8009b36:	701a      	strb	r2, [r3, #0]
 8009b38:	e7f8      	b.n	8009b2c <__cvt+0x9e>
 8009b3a:	f8cd 900c 	str.w	r9, [sp, #12]
 8009b3e:	9b03      	ldr	r3, [sp, #12]
 8009b40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b42:	eba3 0308 	sub.w	r3, r3, r8
 8009b46:	4640      	mov	r0, r8
 8009b48:	6013      	str	r3, [r2, #0]
 8009b4a:	b004      	add	sp, #16
 8009b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009b50 <__exponent>:
 8009b50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b52:	2900      	cmp	r1, #0
 8009b54:	4604      	mov	r4, r0
 8009b56:	bfba      	itte	lt
 8009b58:	4249      	neglt	r1, r1
 8009b5a:	232d      	movlt	r3, #45	; 0x2d
 8009b5c:	232b      	movge	r3, #43	; 0x2b
 8009b5e:	2909      	cmp	r1, #9
 8009b60:	f804 2b02 	strb.w	r2, [r4], #2
 8009b64:	7043      	strb	r3, [r0, #1]
 8009b66:	dd20      	ble.n	8009baa <__exponent+0x5a>
 8009b68:	f10d 0307 	add.w	r3, sp, #7
 8009b6c:	461f      	mov	r7, r3
 8009b6e:	260a      	movs	r6, #10
 8009b70:	fb91 f5f6 	sdiv	r5, r1, r6
 8009b74:	fb06 1115 	mls	r1, r6, r5, r1
 8009b78:	3130      	adds	r1, #48	; 0x30
 8009b7a:	2d09      	cmp	r5, #9
 8009b7c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009b80:	f103 32ff 	add.w	r2, r3, #4294967295
 8009b84:	4629      	mov	r1, r5
 8009b86:	dc09      	bgt.n	8009b9c <__exponent+0x4c>
 8009b88:	3130      	adds	r1, #48	; 0x30
 8009b8a:	3b02      	subs	r3, #2
 8009b8c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009b90:	42bb      	cmp	r3, r7
 8009b92:	4622      	mov	r2, r4
 8009b94:	d304      	bcc.n	8009ba0 <__exponent+0x50>
 8009b96:	1a10      	subs	r0, r2, r0
 8009b98:	b003      	add	sp, #12
 8009b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b9c:	4613      	mov	r3, r2
 8009b9e:	e7e7      	b.n	8009b70 <__exponent+0x20>
 8009ba0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ba4:	f804 2b01 	strb.w	r2, [r4], #1
 8009ba8:	e7f2      	b.n	8009b90 <__exponent+0x40>
 8009baa:	2330      	movs	r3, #48	; 0x30
 8009bac:	4419      	add	r1, r3
 8009bae:	7083      	strb	r3, [r0, #2]
 8009bb0:	1d02      	adds	r2, r0, #4
 8009bb2:	70c1      	strb	r1, [r0, #3]
 8009bb4:	e7ef      	b.n	8009b96 <__exponent+0x46>
	...

08009bb8 <_printf_float>:
 8009bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bbc:	b08d      	sub	sp, #52	; 0x34
 8009bbe:	460c      	mov	r4, r1
 8009bc0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8009bc4:	4616      	mov	r6, r2
 8009bc6:	461f      	mov	r7, r3
 8009bc8:	4605      	mov	r5, r0
 8009bca:	f001 fa21 	bl	800b010 <_localeconv_r>
 8009bce:	6803      	ldr	r3, [r0, #0]
 8009bd0:	9304      	str	r3, [sp, #16]
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f7f6 fb4c 	bl	8000270 <strlen>
 8009bd8:	2300      	movs	r3, #0
 8009bda:	930a      	str	r3, [sp, #40]	; 0x28
 8009bdc:	f8d8 3000 	ldr.w	r3, [r8]
 8009be0:	9005      	str	r0, [sp, #20]
 8009be2:	3307      	adds	r3, #7
 8009be4:	f023 0307 	bic.w	r3, r3, #7
 8009be8:	f103 0208 	add.w	r2, r3, #8
 8009bec:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009bf0:	f8d4 b000 	ldr.w	fp, [r4]
 8009bf4:	f8c8 2000 	str.w	r2, [r8]
 8009bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bfc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009c00:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009c04:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009c08:	9307      	str	r3, [sp, #28]
 8009c0a:	f8cd 8018 	str.w	r8, [sp, #24]
 8009c0e:	f04f 32ff 	mov.w	r2, #4294967295
 8009c12:	4ba7      	ldr	r3, [pc, #668]	; (8009eb0 <_printf_float+0x2f8>)
 8009c14:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c18:	f7f6 ff88 	bl	8000b2c <__aeabi_dcmpun>
 8009c1c:	bb70      	cbnz	r0, 8009c7c <_printf_float+0xc4>
 8009c1e:	f04f 32ff 	mov.w	r2, #4294967295
 8009c22:	4ba3      	ldr	r3, [pc, #652]	; (8009eb0 <_printf_float+0x2f8>)
 8009c24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c28:	f7f6 ff62 	bl	8000af0 <__aeabi_dcmple>
 8009c2c:	bb30      	cbnz	r0, 8009c7c <_printf_float+0xc4>
 8009c2e:	2200      	movs	r2, #0
 8009c30:	2300      	movs	r3, #0
 8009c32:	4640      	mov	r0, r8
 8009c34:	4649      	mov	r1, r9
 8009c36:	f7f6 ff51 	bl	8000adc <__aeabi_dcmplt>
 8009c3a:	b110      	cbz	r0, 8009c42 <_printf_float+0x8a>
 8009c3c:	232d      	movs	r3, #45	; 0x2d
 8009c3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c42:	4a9c      	ldr	r2, [pc, #624]	; (8009eb4 <_printf_float+0x2fc>)
 8009c44:	4b9c      	ldr	r3, [pc, #624]	; (8009eb8 <_printf_float+0x300>)
 8009c46:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009c4a:	bf8c      	ite	hi
 8009c4c:	4690      	movhi	r8, r2
 8009c4e:	4698      	movls	r8, r3
 8009c50:	2303      	movs	r3, #3
 8009c52:	f02b 0204 	bic.w	r2, fp, #4
 8009c56:	6123      	str	r3, [r4, #16]
 8009c58:	6022      	str	r2, [r4, #0]
 8009c5a:	f04f 0900 	mov.w	r9, #0
 8009c5e:	9700      	str	r7, [sp, #0]
 8009c60:	4633      	mov	r3, r6
 8009c62:	aa0b      	add	r2, sp, #44	; 0x2c
 8009c64:	4621      	mov	r1, r4
 8009c66:	4628      	mov	r0, r5
 8009c68:	f000 f9e6 	bl	800a038 <_printf_common>
 8009c6c:	3001      	adds	r0, #1
 8009c6e:	f040 808d 	bne.w	8009d8c <_printf_float+0x1d4>
 8009c72:	f04f 30ff 	mov.w	r0, #4294967295
 8009c76:	b00d      	add	sp, #52	; 0x34
 8009c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c7c:	4642      	mov	r2, r8
 8009c7e:	464b      	mov	r3, r9
 8009c80:	4640      	mov	r0, r8
 8009c82:	4649      	mov	r1, r9
 8009c84:	f7f6 ff52 	bl	8000b2c <__aeabi_dcmpun>
 8009c88:	b110      	cbz	r0, 8009c90 <_printf_float+0xd8>
 8009c8a:	4a8c      	ldr	r2, [pc, #560]	; (8009ebc <_printf_float+0x304>)
 8009c8c:	4b8c      	ldr	r3, [pc, #560]	; (8009ec0 <_printf_float+0x308>)
 8009c8e:	e7da      	b.n	8009c46 <_printf_float+0x8e>
 8009c90:	6861      	ldr	r1, [r4, #4]
 8009c92:	1c4b      	adds	r3, r1, #1
 8009c94:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8009c98:	a80a      	add	r0, sp, #40	; 0x28
 8009c9a:	d13e      	bne.n	8009d1a <_printf_float+0x162>
 8009c9c:	2306      	movs	r3, #6
 8009c9e:	6063      	str	r3, [r4, #4]
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009ca6:	ab09      	add	r3, sp, #36	; 0x24
 8009ca8:	9300      	str	r3, [sp, #0]
 8009caa:	ec49 8b10 	vmov	d0, r8, r9
 8009cae:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009cb2:	6022      	str	r2, [r4, #0]
 8009cb4:	f8cd a004 	str.w	sl, [sp, #4]
 8009cb8:	6861      	ldr	r1, [r4, #4]
 8009cba:	4628      	mov	r0, r5
 8009cbc:	f7ff fee7 	bl	8009a8e <__cvt>
 8009cc0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8009cc4:	2b47      	cmp	r3, #71	; 0x47
 8009cc6:	4680      	mov	r8, r0
 8009cc8:	d109      	bne.n	8009cde <_printf_float+0x126>
 8009cca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ccc:	1cd8      	adds	r0, r3, #3
 8009cce:	db02      	blt.n	8009cd6 <_printf_float+0x11e>
 8009cd0:	6862      	ldr	r2, [r4, #4]
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	dd47      	ble.n	8009d66 <_printf_float+0x1ae>
 8009cd6:	f1aa 0a02 	sub.w	sl, sl, #2
 8009cda:	fa5f fa8a 	uxtb.w	sl, sl
 8009cde:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009ce2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009ce4:	d824      	bhi.n	8009d30 <_printf_float+0x178>
 8009ce6:	3901      	subs	r1, #1
 8009ce8:	4652      	mov	r2, sl
 8009cea:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009cee:	9109      	str	r1, [sp, #36]	; 0x24
 8009cf0:	f7ff ff2e 	bl	8009b50 <__exponent>
 8009cf4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009cf6:	1813      	adds	r3, r2, r0
 8009cf8:	2a01      	cmp	r2, #1
 8009cfa:	4681      	mov	r9, r0
 8009cfc:	6123      	str	r3, [r4, #16]
 8009cfe:	dc02      	bgt.n	8009d06 <_printf_float+0x14e>
 8009d00:	6822      	ldr	r2, [r4, #0]
 8009d02:	07d1      	lsls	r1, r2, #31
 8009d04:	d501      	bpl.n	8009d0a <_printf_float+0x152>
 8009d06:	3301      	adds	r3, #1
 8009d08:	6123      	str	r3, [r4, #16]
 8009d0a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d0a5      	beq.n	8009c5e <_printf_float+0xa6>
 8009d12:	232d      	movs	r3, #45	; 0x2d
 8009d14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d18:	e7a1      	b.n	8009c5e <_printf_float+0xa6>
 8009d1a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8009d1e:	f000 8177 	beq.w	800a010 <_printf_float+0x458>
 8009d22:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009d26:	d1bb      	bne.n	8009ca0 <_printf_float+0xe8>
 8009d28:	2900      	cmp	r1, #0
 8009d2a:	d1b9      	bne.n	8009ca0 <_printf_float+0xe8>
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	e7b6      	b.n	8009c9e <_printf_float+0xe6>
 8009d30:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8009d34:	d119      	bne.n	8009d6a <_printf_float+0x1b2>
 8009d36:	2900      	cmp	r1, #0
 8009d38:	6863      	ldr	r3, [r4, #4]
 8009d3a:	dd0c      	ble.n	8009d56 <_printf_float+0x19e>
 8009d3c:	6121      	str	r1, [r4, #16]
 8009d3e:	b913      	cbnz	r3, 8009d46 <_printf_float+0x18e>
 8009d40:	6822      	ldr	r2, [r4, #0]
 8009d42:	07d2      	lsls	r2, r2, #31
 8009d44:	d502      	bpl.n	8009d4c <_printf_float+0x194>
 8009d46:	3301      	adds	r3, #1
 8009d48:	440b      	add	r3, r1
 8009d4a:	6123      	str	r3, [r4, #16]
 8009d4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d4e:	65a3      	str	r3, [r4, #88]	; 0x58
 8009d50:	f04f 0900 	mov.w	r9, #0
 8009d54:	e7d9      	b.n	8009d0a <_printf_float+0x152>
 8009d56:	b913      	cbnz	r3, 8009d5e <_printf_float+0x1a6>
 8009d58:	6822      	ldr	r2, [r4, #0]
 8009d5a:	07d0      	lsls	r0, r2, #31
 8009d5c:	d501      	bpl.n	8009d62 <_printf_float+0x1aa>
 8009d5e:	3302      	adds	r3, #2
 8009d60:	e7f3      	b.n	8009d4a <_printf_float+0x192>
 8009d62:	2301      	movs	r3, #1
 8009d64:	e7f1      	b.n	8009d4a <_printf_float+0x192>
 8009d66:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8009d6a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	db05      	blt.n	8009d7e <_printf_float+0x1c6>
 8009d72:	6822      	ldr	r2, [r4, #0]
 8009d74:	6123      	str	r3, [r4, #16]
 8009d76:	07d1      	lsls	r1, r2, #31
 8009d78:	d5e8      	bpl.n	8009d4c <_printf_float+0x194>
 8009d7a:	3301      	adds	r3, #1
 8009d7c:	e7e5      	b.n	8009d4a <_printf_float+0x192>
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	bfd4      	ite	le
 8009d82:	f1c3 0302 	rsble	r3, r3, #2
 8009d86:	2301      	movgt	r3, #1
 8009d88:	4413      	add	r3, r2
 8009d8a:	e7de      	b.n	8009d4a <_printf_float+0x192>
 8009d8c:	6823      	ldr	r3, [r4, #0]
 8009d8e:	055a      	lsls	r2, r3, #21
 8009d90:	d407      	bmi.n	8009da2 <_printf_float+0x1ea>
 8009d92:	6923      	ldr	r3, [r4, #16]
 8009d94:	4642      	mov	r2, r8
 8009d96:	4631      	mov	r1, r6
 8009d98:	4628      	mov	r0, r5
 8009d9a:	47b8      	blx	r7
 8009d9c:	3001      	adds	r0, #1
 8009d9e:	d12b      	bne.n	8009df8 <_printf_float+0x240>
 8009da0:	e767      	b.n	8009c72 <_printf_float+0xba>
 8009da2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009da6:	f240 80dc 	bls.w	8009f62 <_printf_float+0x3aa>
 8009daa:	2200      	movs	r2, #0
 8009dac:	2300      	movs	r3, #0
 8009dae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009db2:	f7f6 fe89 	bl	8000ac8 <__aeabi_dcmpeq>
 8009db6:	2800      	cmp	r0, #0
 8009db8:	d033      	beq.n	8009e22 <_printf_float+0x26a>
 8009dba:	2301      	movs	r3, #1
 8009dbc:	4a41      	ldr	r2, [pc, #260]	; (8009ec4 <_printf_float+0x30c>)
 8009dbe:	4631      	mov	r1, r6
 8009dc0:	4628      	mov	r0, r5
 8009dc2:	47b8      	blx	r7
 8009dc4:	3001      	adds	r0, #1
 8009dc6:	f43f af54 	beq.w	8009c72 <_printf_float+0xba>
 8009dca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009dce:	429a      	cmp	r2, r3
 8009dd0:	db02      	blt.n	8009dd8 <_printf_float+0x220>
 8009dd2:	6823      	ldr	r3, [r4, #0]
 8009dd4:	07d8      	lsls	r0, r3, #31
 8009dd6:	d50f      	bpl.n	8009df8 <_printf_float+0x240>
 8009dd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ddc:	4631      	mov	r1, r6
 8009dde:	4628      	mov	r0, r5
 8009de0:	47b8      	blx	r7
 8009de2:	3001      	adds	r0, #1
 8009de4:	f43f af45 	beq.w	8009c72 <_printf_float+0xba>
 8009de8:	f04f 0800 	mov.w	r8, #0
 8009dec:	f104 091a 	add.w	r9, r4, #26
 8009df0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009df2:	3b01      	subs	r3, #1
 8009df4:	4543      	cmp	r3, r8
 8009df6:	dc09      	bgt.n	8009e0c <_printf_float+0x254>
 8009df8:	6823      	ldr	r3, [r4, #0]
 8009dfa:	079b      	lsls	r3, r3, #30
 8009dfc:	f100 8103 	bmi.w	800a006 <_printf_float+0x44e>
 8009e00:	68e0      	ldr	r0, [r4, #12]
 8009e02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e04:	4298      	cmp	r0, r3
 8009e06:	bfb8      	it	lt
 8009e08:	4618      	movlt	r0, r3
 8009e0a:	e734      	b.n	8009c76 <_printf_float+0xbe>
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	464a      	mov	r2, r9
 8009e10:	4631      	mov	r1, r6
 8009e12:	4628      	mov	r0, r5
 8009e14:	47b8      	blx	r7
 8009e16:	3001      	adds	r0, #1
 8009e18:	f43f af2b 	beq.w	8009c72 <_printf_float+0xba>
 8009e1c:	f108 0801 	add.w	r8, r8, #1
 8009e20:	e7e6      	b.n	8009df0 <_printf_float+0x238>
 8009e22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	dc2b      	bgt.n	8009e80 <_printf_float+0x2c8>
 8009e28:	2301      	movs	r3, #1
 8009e2a:	4a26      	ldr	r2, [pc, #152]	; (8009ec4 <_printf_float+0x30c>)
 8009e2c:	4631      	mov	r1, r6
 8009e2e:	4628      	mov	r0, r5
 8009e30:	47b8      	blx	r7
 8009e32:	3001      	adds	r0, #1
 8009e34:	f43f af1d 	beq.w	8009c72 <_printf_float+0xba>
 8009e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e3a:	b923      	cbnz	r3, 8009e46 <_printf_float+0x28e>
 8009e3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e3e:	b913      	cbnz	r3, 8009e46 <_printf_float+0x28e>
 8009e40:	6823      	ldr	r3, [r4, #0]
 8009e42:	07d9      	lsls	r1, r3, #31
 8009e44:	d5d8      	bpl.n	8009df8 <_printf_float+0x240>
 8009e46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e4a:	4631      	mov	r1, r6
 8009e4c:	4628      	mov	r0, r5
 8009e4e:	47b8      	blx	r7
 8009e50:	3001      	adds	r0, #1
 8009e52:	f43f af0e 	beq.w	8009c72 <_printf_float+0xba>
 8009e56:	f04f 0900 	mov.w	r9, #0
 8009e5a:	f104 0a1a 	add.w	sl, r4, #26
 8009e5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e60:	425b      	negs	r3, r3
 8009e62:	454b      	cmp	r3, r9
 8009e64:	dc01      	bgt.n	8009e6a <_printf_float+0x2b2>
 8009e66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e68:	e794      	b.n	8009d94 <_printf_float+0x1dc>
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	4652      	mov	r2, sl
 8009e6e:	4631      	mov	r1, r6
 8009e70:	4628      	mov	r0, r5
 8009e72:	47b8      	blx	r7
 8009e74:	3001      	adds	r0, #1
 8009e76:	f43f aefc 	beq.w	8009c72 <_printf_float+0xba>
 8009e7a:	f109 0901 	add.w	r9, r9, #1
 8009e7e:	e7ee      	b.n	8009e5e <_printf_float+0x2a6>
 8009e80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009e84:	429a      	cmp	r2, r3
 8009e86:	bfa8      	it	ge
 8009e88:	461a      	movge	r2, r3
 8009e8a:	2a00      	cmp	r2, #0
 8009e8c:	4691      	mov	r9, r2
 8009e8e:	dd07      	ble.n	8009ea0 <_printf_float+0x2e8>
 8009e90:	4613      	mov	r3, r2
 8009e92:	4631      	mov	r1, r6
 8009e94:	4642      	mov	r2, r8
 8009e96:	4628      	mov	r0, r5
 8009e98:	47b8      	blx	r7
 8009e9a:	3001      	adds	r0, #1
 8009e9c:	f43f aee9 	beq.w	8009c72 <_printf_float+0xba>
 8009ea0:	f104 031a 	add.w	r3, r4, #26
 8009ea4:	f04f 0b00 	mov.w	fp, #0
 8009ea8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009eac:	9306      	str	r3, [sp, #24]
 8009eae:	e015      	b.n	8009edc <_printf_float+0x324>
 8009eb0:	7fefffff 	.word	0x7fefffff
 8009eb4:	0800cf60 	.word	0x0800cf60
 8009eb8:	0800cf5c 	.word	0x0800cf5c
 8009ebc:	0800cf68 	.word	0x0800cf68
 8009ec0:	0800cf64 	.word	0x0800cf64
 8009ec4:	0800cf6c 	.word	0x0800cf6c
 8009ec8:	2301      	movs	r3, #1
 8009eca:	9a06      	ldr	r2, [sp, #24]
 8009ecc:	4631      	mov	r1, r6
 8009ece:	4628      	mov	r0, r5
 8009ed0:	47b8      	blx	r7
 8009ed2:	3001      	adds	r0, #1
 8009ed4:	f43f aecd 	beq.w	8009c72 <_printf_float+0xba>
 8009ed8:	f10b 0b01 	add.w	fp, fp, #1
 8009edc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009ee0:	ebaa 0309 	sub.w	r3, sl, r9
 8009ee4:	455b      	cmp	r3, fp
 8009ee6:	dcef      	bgt.n	8009ec8 <_printf_float+0x310>
 8009ee8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009eec:	429a      	cmp	r2, r3
 8009eee:	44d0      	add	r8, sl
 8009ef0:	db15      	blt.n	8009f1e <_printf_float+0x366>
 8009ef2:	6823      	ldr	r3, [r4, #0]
 8009ef4:	07da      	lsls	r2, r3, #31
 8009ef6:	d412      	bmi.n	8009f1e <_printf_float+0x366>
 8009ef8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009efa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009efc:	eba3 020a 	sub.w	r2, r3, sl
 8009f00:	eba3 0a01 	sub.w	sl, r3, r1
 8009f04:	4592      	cmp	sl, r2
 8009f06:	bfa8      	it	ge
 8009f08:	4692      	movge	sl, r2
 8009f0a:	f1ba 0f00 	cmp.w	sl, #0
 8009f0e:	dc0e      	bgt.n	8009f2e <_printf_float+0x376>
 8009f10:	f04f 0800 	mov.w	r8, #0
 8009f14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009f18:	f104 091a 	add.w	r9, r4, #26
 8009f1c:	e019      	b.n	8009f52 <_printf_float+0x39a>
 8009f1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f22:	4631      	mov	r1, r6
 8009f24:	4628      	mov	r0, r5
 8009f26:	47b8      	blx	r7
 8009f28:	3001      	adds	r0, #1
 8009f2a:	d1e5      	bne.n	8009ef8 <_printf_float+0x340>
 8009f2c:	e6a1      	b.n	8009c72 <_printf_float+0xba>
 8009f2e:	4653      	mov	r3, sl
 8009f30:	4642      	mov	r2, r8
 8009f32:	4631      	mov	r1, r6
 8009f34:	4628      	mov	r0, r5
 8009f36:	47b8      	blx	r7
 8009f38:	3001      	adds	r0, #1
 8009f3a:	d1e9      	bne.n	8009f10 <_printf_float+0x358>
 8009f3c:	e699      	b.n	8009c72 <_printf_float+0xba>
 8009f3e:	2301      	movs	r3, #1
 8009f40:	464a      	mov	r2, r9
 8009f42:	4631      	mov	r1, r6
 8009f44:	4628      	mov	r0, r5
 8009f46:	47b8      	blx	r7
 8009f48:	3001      	adds	r0, #1
 8009f4a:	f43f ae92 	beq.w	8009c72 <_printf_float+0xba>
 8009f4e:	f108 0801 	add.w	r8, r8, #1
 8009f52:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f56:	1a9b      	subs	r3, r3, r2
 8009f58:	eba3 030a 	sub.w	r3, r3, sl
 8009f5c:	4543      	cmp	r3, r8
 8009f5e:	dcee      	bgt.n	8009f3e <_printf_float+0x386>
 8009f60:	e74a      	b.n	8009df8 <_printf_float+0x240>
 8009f62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f64:	2a01      	cmp	r2, #1
 8009f66:	dc01      	bgt.n	8009f6c <_printf_float+0x3b4>
 8009f68:	07db      	lsls	r3, r3, #31
 8009f6a:	d53a      	bpl.n	8009fe2 <_printf_float+0x42a>
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	4642      	mov	r2, r8
 8009f70:	4631      	mov	r1, r6
 8009f72:	4628      	mov	r0, r5
 8009f74:	47b8      	blx	r7
 8009f76:	3001      	adds	r0, #1
 8009f78:	f43f ae7b 	beq.w	8009c72 <_printf_float+0xba>
 8009f7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f80:	4631      	mov	r1, r6
 8009f82:	4628      	mov	r0, r5
 8009f84:	47b8      	blx	r7
 8009f86:	3001      	adds	r0, #1
 8009f88:	f108 0801 	add.w	r8, r8, #1
 8009f8c:	f43f ae71 	beq.w	8009c72 <_printf_float+0xba>
 8009f90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f92:	2200      	movs	r2, #0
 8009f94:	f103 3aff 	add.w	sl, r3, #4294967295
 8009f98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	f7f6 fd93 	bl	8000ac8 <__aeabi_dcmpeq>
 8009fa2:	b9c8      	cbnz	r0, 8009fd8 <_printf_float+0x420>
 8009fa4:	4653      	mov	r3, sl
 8009fa6:	4642      	mov	r2, r8
 8009fa8:	4631      	mov	r1, r6
 8009faa:	4628      	mov	r0, r5
 8009fac:	47b8      	blx	r7
 8009fae:	3001      	adds	r0, #1
 8009fb0:	d10e      	bne.n	8009fd0 <_printf_float+0x418>
 8009fb2:	e65e      	b.n	8009c72 <_printf_float+0xba>
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	4652      	mov	r2, sl
 8009fb8:	4631      	mov	r1, r6
 8009fba:	4628      	mov	r0, r5
 8009fbc:	47b8      	blx	r7
 8009fbe:	3001      	adds	r0, #1
 8009fc0:	f43f ae57 	beq.w	8009c72 <_printf_float+0xba>
 8009fc4:	f108 0801 	add.w	r8, r8, #1
 8009fc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fca:	3b01      	subs	r3, #1
 8009fcc:	4543      	cmp	r3, r8
 8009fce:	dcf1      	bgt.n	8009fb4 <_printf_float+0x3fc>
 8009fd0:	464b      	mov	r3, r9
 8009fd2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009fd6:	e6de      	b.n	8009d96 <_printf_float+0x1de>
 8009fd8:	f04f 0800 	mov.w	r8, #0
 8009fdc:	f104 0a1a 	add.w	sl, r4, #26
 8009fe0:	e7f2      	b.n	8009fc8 <_printf_float+0x410>
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	e7df      	b.n	8009fa6 <_printf_float+0x3ee>
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	464a      	mov	r2, r9
 8009fea:	4631      	mov	r1, r6
 8009fec:	4628      	mov	r0, r5
 8009fee:	47b8      	blx	r7
 8009ff0:	3001      	adds	r0, #1
 8009ff2:	f43f ae3e 	beq.w	8009c72 <_printf_float+0xba>
 8009ff6:	f108 0801 	add.w	r8, r8, #1
 8009ffa:	68e3      	ldr	r3, [r4, #12]
 8009ffc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009ffe:	1a9b      	subs	r3, r3, r2
 800a000:	4543      	cmp	r3, r8
 800a002:	dcf0      	bgt.n	8009fe6 <_printf_float+0x42e>
 800a004:	e6fc      	b.n	8009e00 <_printf_float+0x248>
 800a006:	f04f 0800 	mov.w	r8, #0
 800a00a:	f104 0919 	add.w	r9, r4, #25
 800a00e:	e7f4      	b.n	8009ffa <_printf_float+0x442>
 800a010:	2900      	cmp	r1, #0
 800a012:	f43f ae8b 	beq.w	8009d2c <_printf_float+0x174>
 800a016:	2300      	movs	r3, #0
 800a018:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a01c:	ab09      	add	r3, sp, #36	; 0x24
 800a01e:	9300      	str	r3, [sp, #0]
 800a020:	ec49 8b10 	vmov	d0, r8, r9
 800a024:	6022      	str	r2, [r4, #0]
 800a026:	f8cd a004 	str.w	sl, [sp, #4]
 800a02a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a02e:	4628      	mov	r0, r5
 800a030:	f7ff fd2d 	bl	8009a8e <__cvt>
 800a034:	4680      	mov	r8, r0
 800a036:	e648      	b.n	8009cca <_printf_float+0x112>

0800a038 <_printf_common>:
 800a038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a03c:	4691      	mov	r9, r2
 800a03e:	461f      	mov	r7, r3
 800a040:	688a      	ldr	r2, [r1, #8]
 800a042:	690b      	ldr	r3, [r1, #16]
 800a044:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a048:	4293      	cmp	r3, r2
 800a04a:	bfb8      	it	lt
 800a04c:	4613      	movlt	r3, r2
 800a04e:	f8c9 3000 	str.w	r3, [r9]
 800a052:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a056:	4606      	mov	r6, r0
 800a058:	460c      	mov	r4, r1
 800a05a:	b112      	cbz	r2, 800a062 <_printf_common+0x2a>
 800a05c:	3301      	adds	r3, #1
 800a05e:	f8c9 3000 	str.w	r3, [r9]
 800a062:	6823      	ldr	r3, [r4, #0]
 800a064:	0699      	lsls	r1, r3, #26
 800a066:	bf42      	ittt	mi
 800a068:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a06c:	3302      	addmi	r3, #2
 800a06e:	f8c9 3000 	strmi.w	r3, [r9]
 800a072:	6825      	ldr	r5, [r4, #0]
 800a074:	f015 0506 	ands.w	r5, r5, #6
 800a078:	d107      	bne.n	800a08a <_printf_common+0x52>
 800a07a:	f104 0a19 	add.w	sl, r4, #25
 800a07e:	68e3      	ldr	r3, [r4, #12]
 800a080:	f8d9 2000 	ldr.w	r2, [r9]
 800a084:	1a9b      	subs	r3, r3, r2
 800a086:	42ab      	cmp	r3, r5
 800a088:	dc28      	bgt.n	800a0dc <_printf_common+0xa4>
 800a08a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a08e:	6822      	ldr	r2, [r4, #0]
 800a090:	3300      	adds	r3, #0
 800a092:	bf18      	it	ne
 800a094:	2301      	movne	r3, #1
 800a096:	0692      	lsls	r2, r2, #26
 800a098:	d42d      	bmi.n	800a0f6 <_printf_common+0xbe>
 800a09a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a09e:	4639      	mov	r1, r7
 800a0a0:	4630      	mov	r0, r6
 800a0a2:	47c0      	blx	r8
 800a0a4:	3001      	adds	r0, #1
 800a0a6:	d020      	beq.n	800a0ea <_printf_common+0xb2>
 800a0a8:	6823      	ldr	r3, [r4, #0]
 800a0aa:	68e5      	ldr	r5, [r4, #12]
 800a0ac:	f8d9 2000 	ldr.w	r2, [r9]
 800a0b0:	f003 0306 	and.w	r3, r3, #6
 800a0b4:	2b04      	cmp	r3, #4
 800a0b6:	bf08      	it	eq
 800a0b8:	1aad      	subeq	r5, r5, r2
 800a0ba:	68a3      	ldr	r3, [r4, #8]
 800a0bc:	6922      	ldr	r2, [r4, #16]
 800a0be:	bf0c      	ite	eq
 800a0c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a0c4:	2500      	movne	r5, #0
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	bfc4      	itt	gt
 800a0ca:	1a9b      	subgt	r3, r3, r2
 800a0cc:	18ed      	addgt	r5, r5, r3
 800a0ce:	f04f 0900 	mov.w	r9, #0
 800a0d2:	341a      	adds	r4, #26
 800a0d4:	454d      	cmp	r5, r9
 800a0d6:	d11a      	bne.n	800a10e <_printf_common+0xd6>
 800a0d8:	2000      	movs	r0, #0
 800a0da:	e008      	b.n	800a0ee <_printf_common+0xb6>
 800a0dc:	2301      	movs	r3, #1
 800a0de:	4652      	mov	r2, sl
 800a0e0:	4639      	mov	r1, r7
 800a0e2:	4630      	mov	r0, r6
 800a0e4:	47c0      	blx	r8
 800a0e6:	3001      	adds	r0, #1
 800a0e8:	d103      	bne.n	800a0f2 <_printf_common+0xba>
 800a0ea:	f04f 30ff 	mov.w	r0, #4294967295
 800a0ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0f2:	3501      	adds	r5, #1
 800a0f4:	e7c3      	b.n	800a07e <_printf_common+0x46>
 800a0f6:	18e1      	adds	r1, r4, r3
 800a0f8:	1c5a      	adds	r2, r3, #1
 800a0fa:	2030      	movs	r0, #48	; 0x30
 800a0fc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a100:	4422      	add	r2, r4
 800a102:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a106:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a10a:	3302      	adds	r3, #2
 800a10c:	e7c5      	b.n	800a09a <_printf_common+0x62>
 800a10e:	2301      	movs	r3, #1
 800a110:	4622      	mov	r2, r4
 800a112:	4639      	mov	r1, r7
 800a114:	4630      	mov	r0, r6
 800a116:	47c0      	blx	r8
 800a118:	3001      	adds	r0, #1
 800a11a:	d0e6      	beq.n	800a0ea <_printf_common+0xb2>
 800a11c:	f109 0901 	add.w	r9, r9, #1
 800a120:	e7d8      	b.n	800a0d4 <_printf_common+0x9c>
	...

0800a124 <_printf_i>:
 800a124:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a128:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a12c:	460c      	mov	r4, r1
 800a12e:	7e09      	ldrb	r1, [r1, #24]
 800a130:	b085      	sub	sp, #20
 800a132:	296e      	cmp	r1, #110	; 0x6e
 800a134:	4617      	mov	r7, r2
 800a136:	4606      	mov	r6, r0
 800a138:	4698      	mov	r8, r3
 800a13a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a13c:	f000 80b3 	beq.w	800a2a6 <_printf_i+0x182>
 800a140:	d822      	bhi.n	800a188 <_printf_i+0x64>
 800a142:	2963      	cmp	r1, #99	; 0x63
 800a144:	d036      	beq.n	800a1b4 <_printf_i+0x90>
 800a146:	d80a      	bhi.n	800a15e <_printf_i+0x3a>
 800a148:	2900      	cmp	r1, #0
 800a14a:	f000 80b9 	beq.w	800a2c0 <_printf_i+0x19c>
 800a14e:	2958      	cmp	r1, #88	; 0x58
 800a150:	f000 8083 	beq.w	800a25a <_printf_i+0x136>
 800a154:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a158:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a15c:	e032      	b.n	800a1c4 <_printf_i+0xa0>
 800a15e:	2964      	cmp	r1, #100	; 0x64
 800a160:	d001      	beq.n	800a166 <_printf_i+0x42>
 800a162:	2969      	cmp	r1, #105	; 0x69
 800a164:	d1f6      	bne.n	800a154 <_printf_i+0x30>
 800a166:	6820      	ldr	r0, [r4, #0]
 800a168:	6813      	ldr	r3, [r2, #0]
 800a16a:	0605      	lsls	r5, r0, #24
 800a16c:	f103 0104 	add.w	r1, r3, #4
 800a170:	d52a      	bpl.n	800a1c8 <_printf_i+0xa4>
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	6011      	str	r1, [r2, #0]
 800a176:	2b00      	cmp	r3, #0
 800a178:	da03      	bge.n	800a182 <_printf_i+0x5e>
 800a17a:	222d      	movs	r2, #45	; 0x2d
 800a17c:	425b      	negs	r3, r3
 800a17e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a182:	486f      	ldr	r0, [pc, #444]	; (800a340 <_printf_i+0x21c>)
 800a184:	220a      	movs	r2, #10
 800a186:	e039      	b.n	800a1fc <_printf_i+0xd8>
 800a188:	2973      	cmp	r1, #115	; 0x73
 800a18a:	f000 809d 	beq.w	800a2c8 <_printf_i+0x1a4>
 800a18e:	d808      	bhi.n	800a1a2 <_printf_i+0x7e>
 800a190:	296f      	cmp	r1, #111	; 0x6f
 800a192:	d020      	beq.n	800a1d6 <_printf_i+0xb2>
 800a194:	2970      	cmp	r1, #112	; 0x70
 800a196:	d1dd      	bne.n	800a154 <_printf_i+0x30>
 800a198:	6823      	ldr	r3, [r4, #0]
 800a19a:	f043 0320 	orr.w	r3, r3, #32
 800a19e:	6023      	str	r3, [r4, #0]
 800a1a0:	e003      	b.n	800a1aa <_printf_i+0x86>
 800a1a2:	2975      	cmp	r1, #117	; 0x75
 800a1a4:	d017      	beq.n	800a1d6 <_printf_i+0xb2>
 800a1a6:	2978      	cmp	r1, #120	; 0x78
 800a1a8:	d1d4      	bne.n	800a154 <_printf_i+0x30>
 800a1aa:	2378      	movs	r3, #120	; 0x78
 800a1ac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a1b0:	4864      	ldr	r0, [pc, #400]	; (800a344 <_printf_i+0x220>)
 800a1b2:	e055      	b.n	800a260 <_printf_i+0x13c>
 800a1b4:	6813      	ldr	r3, [r2, #0]
 800a1b6:	1d19      	adds	r1, r3, #4
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	6011      	str	r1, [r2, #0]
 800a1bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a1c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	e08c      	b.n	800a2e2 <_printf_i+0x1be>
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	6011      	str	r1, [r2, #0]
 800a1cc:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a1d0:	bf18      	it	ne
 800a1d2:	b21b      	sxthne	r3, r3
 800a1d4:	e7cf      	b.n	800a176 <_printf_i+0x52>
 800a1d6:	6813      	ldr	r3, [r2, #0]
 800a1d8:	6825      	ldr	r5, [r4, #0]
 800a1da:	1d18      	adds	r0, r3, #4
 800a1dc:	6010      	str	r0, [r2, #0]
 800a1de:	0628      	lsls	r0, r5, #24
 800a1e0:	d501      	bpl.n	800a1e6 <_printf_i+0xc2>
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	e002      	b.n	800a1ec <_printf_i+0xc8>
 800a1e6:	0668      	lsls	r0, r5, #25
 800a1e8:	d5fb      	bpl.n	800a1e2 <_printf_i+0xbe>
 800a1ea:	881b      	ldrh	r3, [r3, #0]
 800a1ec:	4854      	ldr	r0, [pc, #336]	; (800a340 <_printf_i+0x21c>)
 800a1ee:	296f      	cmp	r1, #111	; 0x6f
 800a1f0:	bf14      	ite	ne
 800a1f2:	220a      	movne	r2, #10
 800a1f4:	2208      	moveq	r2, #8
 800a1f6:	2100      	movs	r1, #0
 800a1f8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a1fc:	6865      	ldr	r5, [r4, #4]
 800a1fe:	60a5      	str	r5, [r4, #8]
 800a200:	2d00      	cmp	r5, #0
 800a202:	f2c0 8095 	blt.w	800a330 <_printf_i+0x20c>
 800a206:	6821      	ldr	r1, [r4, #0]
 800a208:	f021 0104 	bic.w	r1, r1, #4
 800a20c:	6021      	str	r1, [r4, #0]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d13d      	bne.n	800a28e <_printf_i+0x16a>
 800a212:	2d00      	cmp	r5, #0
 800a214:	f040 808e 	bne.w	800a334 <_printf_i+0x210>
 800a218:	4665      	mov	r5, ip
 800a21a:	2a08      	cmp	r2, #8
 800a21c:	d10b      	bne.n	800a236 <_printf_i+0x112>
 800a21e:	6823      	ldr	r3, [r4, #0]
 800a220:	07db      	lsls	r3, r3, #31
 800a222:	d508      	bpl.n	800a236 <_printf_i+0x112>
 800a224:	6923      	ldr	r3, [r4, #16]
 800a226:	6862      	ldr	r2, [r4, #4]
 800a228:	429a      	cmp	r2, r3
 800a22a:	bfde      	ittt	le
 800a22c:	2330      	movle	r3, #48	; 0x30
 800a22e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a232:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a236:	ebac 0305 	sub.w	r3, ip, r5
 800a23a:	6123      	str	r3, [r4, #16]
 800a23c:	f8cd 8000 	str.w	r8, [sp]
 800a240:	463b      	mov	r3, r7
 800a242:	aa03      	add	r2, sp, #12
 800a244:	4621      	mov	r1, r4
 800a246:	4630      	mov	r0, r6
 800a248:	f7ff fef6 	bl	800a038 <_printf_common>
 800a24c:	3001      	adds	r0, #1
 800a24e:	d14d      	bne.n	800a2ec <_printf_i+0x1c8>
 800a250:	f04f 30ff 	mov.w	r0, #4294967295
 800a254:	b005      	add	sp, #20
 800a256:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a25a:	4839      	ldr	r0, [pc, #228]	; (800a340 <_printf_i+0x21c>)
 800a25c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a260:	6813      	ldr	r3, [r2, #0]
 800a262:	6821      	ldr	r1, [r4, #0]
 800a264:	1d1d      	adds	r5, r3, #4
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	6015      	str	r5, [r2, #0]
 800a26a:	060a      	lsls	r2, r1, #24
 800a26c:	d50b      	bpl.n	800a286 <_printf_i+0x162>
 800a26e:	07ca      	lsls	r2, r1, #31
 800a270:	bf44      	itt	mi
 800a272:	f041 0120 	orrmi.w	r1, r1, #32
 800a276:	6021      	strmi	r1, [r4, #0]
 800a278:	b91b      	cbnz	r3, 800a282 <_printf_i+0x15e>
 800a27a:	6822      	ldr	r2, [r4, #0]
 800a27c:	f022 0220 	bic.w	r2, r2, #32
 800a280:	6022      	str	r2, [r4, #0]
 800a282:	2210      	movs	r2, #16
 800a284:	e7b7      	b.n	800a1f6 <_printf_i+0xd2>
 800a286:	064d      	lsls	r5, r1, #25
 800a288:	bf48      	it	mi
 800a28a:	b29b      	uxthmi	r3, r3
 800a28c:	e7ef      	b.n	800a26e <_printf_i+0x14a>
 800a28e:	4665      	mov	r5, ip
 800a290:	fbb3 f1f2 	udiv	r1, r3, r2
 800a294:	fb02 3311 	mls	r3, r2, r1, r3
 800a298:	5cc3      	ldrb	r3, [r0, r3]
 800a29a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a29e:	460b      	mov	r3, r1
 800a2a0:	2900      	cmp	r1, #0
 800a2a2:	d1f5      	bne.n	800a290 <_printf_i+0x16c>
 800a2a4:	e7b9      	b.n	800a21a <_printf_i+0xf6>
 800a2a6:	6813      	ldr	r3, [r2, #0]
 800a2a8:	6825      	ldr	r5, [r4, #0]
 800a2aa:	6961      	ldr	r1, [r4, #20]
 800a2ac:	1d18      	adds	r0, r3, #4
 800a2ae:	6010      	str	r0, [r2, #0]
 800a2b0:	0628      	lsls	r0, r5, #24
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	d501      	bpl.n	800a2ba <_printf_i+0x196>
 800a2b6:	6019      	str	r1, [r3, #0]
 800a2b8:	e002      	b.n	800a2c0 <_printf_i+0x19c>
 800a2ba:	066a      	lsls	r2, r5, #25
 800a2bc:	d5fb      	bpl.n	800a2b6 <_printf_i+0x192>
 800a2be:	8019      	strh	r1, [r3, #0]
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	6123      	str	r3, [r4, #16]
 800a2c4:	4665      	mov	r5, ip
 800a2c6:	e7b9      	b.n	800a23c <_printf_i+0x118>
 800a2c8:	6813      	ldr	r3, [r2, #0]
 800a2ca:	1d19      	adds	r1, r3, #4
 800a2cc:	6011      	str	r1, [r2, #0]
 800a2ce:	681d      	ldr	r5, [r3, #0]
 800a2d0:	6862      	ldr	r2, [r4, #4]
 800a2d2:	2100      	movs	r1, #0
 800a2d4:	4628      	mov	r0, r5
 800a2d6:	f7f5 ff7b 	bl	80001d0 <memchr>
 800a2da:	b108      	cbz	r0, 800a2e0 <_printf_i+0x1bc>
 800a2dc:	1b40      	subs	r0, r0, r5
 800a2de:	6060      	str	r0, [r4, #4]
 800a2e0:	6863      	ldr	r3, [r4, #4]
 800a2e2:	6123      	str	r3, [r4, #16]
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2ea:	e7a7      	b.n	800a23c <_printf_i+0x118>
 800a2ec:	6923      	ldr	r3, [r4, #16]
 800a2ee:	462a      	mov	r2, r5
 800a2f0:	4639      	mov	r1, r7
 800a2f2:	4630      	mov	r0, r6
 800a2f4:	47c0      	blx	r8
 800a2f6:	3001      	adds	r0, #1
 800a2f8:	d0aa      	beq.n	800a250 <_printf_i+0x12c>
 800a2fa:	6823      	ldr	r3, [r4, #0]
 800a2fc:	079b      	lsls	r3, r3, #30
 800a2fe:	d413      	bmi.n	800a328 <_printf_i+0x204>
 800a300:	68e0      	ldr	r0, [r4, #12]
 800a302:	9b03      	ldr	r3, [sp, #12]
 800a304:	4298      	cmp	r0, r3
 800a306:	bfb8      	it	lt
 800a308:	4618      	movlt	r0, r3
 800a30a:	e7a3      	b.n	800a254 <_printf_i+0x130>
 800a30c:	2301      	movs	r3, #1
 800a30e:	464a      	mov	r2, r9
 800a310:	4639      	mov	r1, r7
 800a312:	4630      	mov	r0, r6
 800a314:	47c0      	blx	r8
 800a316:	3001      	adds	r0, #1
 800a318:	d09a      	beq.n	800a250 <_printf_i+0x12c>
 800a31a:	3501      	adds	r5, #1
 800a31c:	68e3      	ldr	r3, [r4, #12]
 800a31e:	9a03      	ldr	r2, [sp, #12]
 800a320:	1a9b      	subs	r3, r3, r2
 800a322:	42ab      	cmp	r3, r5
 800a324:	dcf2      	bgt.n	800a30c <_printf_i+0x1e8>
 800a326:	e7eb      	b.n	800a300 <_printf_i+0x1dc>
 800a328:	2500      	movs	r5, #0
 800a32a:	f104 0919 	add.w	r9, r4, #25
 800a32e:	e7f5      	b.n	800a31c <_printf_i+0x1f8>
 800a330:	2b00      	cmp	r3, #0
 800a332:	d1ac      	bne.n	800a28e <_printf_i+0x16a>
 800a334:	7803      	ldrb	r3, [r0, #0]
 800a336:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a33a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a33e:	e76c      	b.n	800a21a <_printf_i+0xf6>
 800a340:	0800cf6e 	.word	0x0800cf6e
 800a344:	0800cf7f 	.word	0x0800cf7f

0800a348 <siprintf>:
 800a348:	b40e      	push	{r1, r2, r3}
 800a34a:	b500      	push	{lr}
 800a34c:	b09c      	sub	sp, #112	; 0x70
 800a34e:	ab1d      	add	r3, sp, #116	; 0x74
 800a350:	9002      	str	r0, [sp, #8]
 800a352:	9006      	str	r0, [sp, #24]
 800a354:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a358:	4809      	ldr	r0, [pc, #36]	; (800a380 <siprintf+0x38>)
 800a35a:	9107      	str	r1, [sp, #28]
 800a35c:	9104      	str	r1, [sp, #16]
 800a35e:	4909      	ldr	r1, [pc, #36]	; (800a384 <siprintf+0x3c>)
 800a360:	f853 2b04 	ldr.w	r2, [r3], #4
 800a364:	9105      	str	r1, [sp, #20]
 800a366:	6800      	ldr	r0, [r0, #0]
 800a368:	9301      	str	r3, [sp, #4]
 800a36a:	a902      	add	r1, sp, #8
 800a36c:	f001 fa52 	bl	800b814 <_svfiprintf_r>
 800a370:	9b02      	ldr	r3, [sp, #8]
 800a372:	2200      	movs	r2, #0
 800a374:	701a      	strb	r2, [r3, #0]
 800a376:	b01c      	add	sp, #112	; 0x70
 800a378:	f85d eb04 	ldr.w	lr, [sp], #4
 800a37c:	b003      	add	sp, #12
 800a37e:	4770      	bx	lr
 800a380:	2000000c 	.word	0x2000000c
 800a384:	ffff0208 	.word	0xffff0208

0800a388 <quorem>:
 800a388:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a38c:	6903      	ldr	r3, [r0, #16]
 800a38e:	690c      	ldr	r4, [r1, #16]
 800a390:	42a3      	cmp	r3, r4
 800a392:	4680      	mov	r8, r0
 800a394:	f2c0 8082 	blt.w	800a49c <quorem+0x114>
 800a398:	3c01      	subs	r4, #1
 800a39a:	f101 0714 	add.w	r7, r1, #20
 800a39e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800a3a2:	f100 0614 	add.w	r6, r0, #20
 800a3a6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a3aa:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800a3ae:	eb06 030c 	add.w	r3, r6, ip
 800a3b2:	3501      	adds	r5, #1
 800a3b4:	eb07 090c 	add.w	r9, r7, ip
 800a3b8:	9301      	str	r3, [sp, #4]
 800a3ba:	fbb0 f5f5 	udiv	r5, r0, r5
 800a3be:	b395      	cbz	r5, 800a426 <quorem+0x9e>
 800a3c0:	f04f 0a00 	mov.w	sl, #0
 800a3c4:	4638      	mov	r0, r7
 800a3c6:	46b6      	mov	lr, r6
 800a3c8:	46d3      	mov	fp, sl
 800a3ca:	f850 2b04 	ldr.w	r2, [r0], #4
 800a3ce:	b293      	uxth	r3, r2
 800a3d0:	fb05 a303 	mla	r3, r5, r3, sl
 800a3d4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a3d8:	b29b      	uxth	r3, r3
 800a3da:	ebab 0303 	sub.w	r3, fp, r3
 800a3de:	0c12      	lsrs	r2, r2, #16
 800a3e0:	f8de b000 	ldr.w	fp, [lr]
 800a3e4:	fb05 a202 	mla	r2, r5, r2, sl
 800a3e8:	fa13 f38b 	uxtah	r3, r3, fp
 800a3ec:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a3f0:	fa1f fb82 	uxth.w	fp, r2
 800a3f4:	f8de 2000 	ldr.w	r2, [lr]
 800a3f8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800a3fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a400:	b29b      	uxth	r3, r3
 800a402:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a406:	4581      	cmp	r9, r0
 800a408:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800a40c:	f84e 3b04 	str.w	r3, [lr], #4
 800a410:	d2db      	bcs.n	800a3ca <quorem+0x42>
 800a412:	f856 300c 	ldr.w	r3, [r6, ip]
 800a416:	b933      	cbnz	r3, 800a426 <quorem+0x9e>
 800a418:	9b01      	ldr	r3, [sp, #4]
 800a41a:	3b04      	subs	r3, #4
 800a41c:	429e      	cmp	r6, r3
 800a41e:	461a      	mov	r2, r3
 800a420:	d330      	bcc.n	800a484 <quorem+0xfc>
 800a422:	f8c8 4010 	str.w	r4, [r8, #16]
 800a426:	4640      	mov	r0, r8
 800a428:	f001 f81e 	bl	800b468 <__mcmp>
 800a42c:	2800      	cmp	r0, #0
 800a42e:	db25      	blt.n	800a47c <quorem+0xf4>
 800a430:	3501      	adds	r5, #1
 800a432:	4630      	mov	r0, r6
 800a434:	f04f 0c00 	mov.w	ip, #0
 800a438:	f857 2b04 	ldr.w	r2, [r7], #4
 800a43c:	f8d0 e000 	ldr.w	lr, [r0]
 800a440:	b293      	uxth	r3, r2
 800a442:	ebac 0303 	sub.w	r3, ip, r3
 800a446:	0c12      	lsrs	r2, r2, #16
 800a448:	fa13 f38e 	uxtah	r3, r3, lr
 800a44c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a450:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a454:	b29b      	uxth	r3, r3
 800a456:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a45a:	45b9      	cmp	r9, r7
 800a45c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a460:	f840 3b04 	str.w	r3, [r0], #4
 800a464:	d2e8      	bcs.n	800a438 <quorem+0xb0>
 800a466:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a46a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a46e:	b92a      	cbnz	r2, 800a47c <quorem+0xf4>
 800a470:	3b04      	subs	r3, #4
 800a472:	429e      	cmp	r6, r3
 800a474:	461a      	mov	r2, r3
 800a476:	d30b      	bcc.n	800a490 <quorem+0x108>
 800a478:	f8c8 4010 	str.w	r4, [r8, #16]
 800a47c:	4628      	mov	r0, r5
 800a47e:	b003      	add	sp, #12
 800a480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a484:	6812      	ldr	r2, [r2, #0]
 800a486:	3b04      	subs	r3, #4
 800a488:	2a00      	cmp	r2, #0
 800a48a:	d1ca      	bne.n	800a422 <quorem+0x9a>
 800a48c:	3c01      	subs	r4, #1
 800a48e:	e7c5      	b.n	800a41c <quorem+0x94>
 800a490:	6812      	ldr	r2, [r2, #0]
 800a492:	3b04      	subs	r3, #4
 800a494:	2a00      	cmp	r2, #0
 800a496:	d1ef      	bne.n	800a478 <quorem+0xf0>
 800a498:	3c01      	subs	r4, #1
 800a49a:	e7ea      	b.n	800a472 <quorem+0xea>
 800a49c:	2000      	movs	r0, #0
 800a49e:	e7ee      	b.n	800a47e <quorem+0xf6>

0800a4a0 <_dtoa_r>:
 800a4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4a4:	ec57 6b10 	vmov	r6, r7, d0
 800a4a8:	b097      	sub	sp, #92	; 0x5c
 800a4aa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a4ac:	9106      	str	r1, [sp, #24]
 800a4ae:	4604      	mov	r4, r0
 800a4b0:	920b      	str	r2, [sp, #44]	; 0x2c
 800a4b2:	9312      	str	r3, [sp, #72]	; 0x48
 800a4b4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a4b8:	e9cd 6700 	strd	r6, r7, [sp]
 800a4bc:	b93d      	cbnz	r5, 800a4ce <_dtoa_r+0x2e>
 800a4be:	2010      	movs	r0, #16
 800a4c0:	f000 fdb4 	bl	800b02c <malloc>
 800a4c4:	6260      	str	r0, [r4, #36]	; 0x24
 800a4c6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a4ca:	6005      	str	r5, [r0, #0]
 800a4cc:	60c5      	str	r5, [r0, #12]
 800a4ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a4d0:	6819      	ldr	r1, [r3, #0]
 800a4d2:	b151      	cbz	r1, 800a4ea <_dtoa_r+0x4a>
 800a4d4:	685a      	ldr	r2, [r3, #4]
 800a4d6:	604a      	str	r2, [r1, #4]
 800a4d8:	2301      	movs	r3, #1
 800a4da:	4093      	lsls	r3, r2
 800a4dc:	608b      	str	r3, [r1, #8]
 800a4de:	4620      	mov	r0, r4
 800a4e0:	f000 fde0 	bl	800b0a4 <_Bfree>
 800a4e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	601a      	str	r2, [r3, #0]
 800a4ea:	1e3b      	subs	r3, r7, #0
 800a4ec:	bfbb      	ittet	lt
 800a4ee:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a4f2:	9301      	strlt	r3, [sp, #4]
 800a4f4:	2300      	movge	r3, #0
 800a4f6:	2201      	movlt	r2, #1
 800a4f8:	bfac      	ite	ge
 800a4fa:	f8c8 3000 	strge.w	r3, [r8]
 800a4fe:	f8c8 2000 	strlt.w	r2, [r8]
 800a502:	4baf      	ldr	r3, [pc, #700]	; (800a7c0 <_dtoa_r+0x320>)
 800a504:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a508:	ea33 0308 	bics.w	r3, r3, r8
 800a50c:	d114      	bne.n	800a538 <_dtoa_r+0x98>
 800a50e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a510:	f242 730f 	movw	r3, #9999	; 0x270f
 800a514:	6013      	str	r3, [r2, #0]
 800a516:	9b00      	ldr	r3, [sp, #0]
 800a518:	b923      	cbnz	r3, 800a524 <_dtoa_r+0x84>
 800a51a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800a51e:	2800      	cmp	r0, #0
 800a520:	f000 8542 	beq.w	800afa8 <_dtoa_r+0xb08>
 800a524:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a526:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800a7d4 <_dtoa_r+0x334>
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	f000 8544 	beq.w	800afb8 <_dtoa_r+0xb18>
 800a530:	f10b 0303 	add.w	r3, fp, #3
 800a534:	f000 bd3e 	b.w	800afb4 <_dtoa_r+0xb14>
 800a538:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a53c:	2200      	movs	r2, #0
 800a53e:	2300      	movs	r3, #0
 800a540:	4630      	mov	r0, r6
 800a542:	4639      	mov	r1, r7
 800a544:	f7f6 fac0 	bl	8000ac8 <__aeabi_dcmpeq>
 800a548:	4681      	mov	r9, r0
 800a54a:	b168      	cbz	r0, 800a568 <_dtoa_r+0xc8>
 800a54c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a54e:	2301      	movs	r3, #1
 800a550:	6013      	str	r3, [r2, #0]
 800a552:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a554:	2b00      	cmp	r3, #0
 800a556:	f000 8524 	beq.w	800afa2 <_dtoa_r+0xb02>
 800a55a:	4b9a      	ldr	r3, [pc, #616]	; (800a7c4 <_dtoa_r+0x324>)
 800a55c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a55e:	f103 3bff 	add.w	fp, r3, #4294967295
 800a562:	6013      	str	r3, [r2, #0]
 800a564:	f000 bd28 	b.w	800afb8 <_dtoa_r+0xb18>
 800a568:	aa14      	add	r2, sp, #80	; 0x50
 800a56a:	a915      	add	r1, sp, #84	; 0x54
 800a56c:	ec47 6b10 	vmov	d0, r6, r7
 800a570:	4620      	mov	r0, r4
 800a572:	f000 fff0 	bl	800b556 <__d2b>
 800a576:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a57a:	9004      	str	r0, [sp, #16]
 800a57c:	2d00      	cmp	r5, #0
 800a57e:	d07c      	beq.n	800a67a <_dtoa_r+0x1da>
 800a580:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a584:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800a588:	46b2      	mov	sl, r6
 800a58a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800a58e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a592:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800a596:	2200      	movs	r2, #0
 800a598:	4b8b      	ldr	r3, [pc, #556]	; (800a7c8 <_dtoa_r+0x328>)
 800a59a:	4650      	mov	r0, sl
 800a59c:	4659      	mov	r1, fp
 800a59e:	f7f5 fe73 	bl	8000288 <__aeabi_dsub>
 800a5a2:	a381      	add	r3, pc, #516	; (adr r3, 800a7a8 <_dtoa_r+0x308>)
 800a5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a8:	f7f6 f826 	bl	80005f8 <__aeabi_dmul>
 800a5ac:	a380      	add	r3, pc, #512	; (adr r3, 800a7b0 <_dtoa_r+0x310>)
 800a5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b2:	f7f5 fe6b 	bl	800028c <__adddf3>
 800a5b6:	4606      	mov	r6, r0
 800a5b8:	4628      	mov	r0, r5
 800a5ba:	460f      	mov	r7, r1
 800a5bc:	f7f5 ffb2 	bl	8000524 <__aeabi_i2d>
 800a5c0:	a37d      	add	r3, pc, #500	; (adr r3, 800a7b8 <_dtoa_r+0x318>)
 800a5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c6:	f7f6 f817 	bl	80005f8 <__aeabi_dmul>
 800a5ca:	4602      	mov	r2, r0
 800a5cc:	460b      	mov	r3, r1
 800a5ce:	4630      	mov	r0, r6
 800a5d0:	4639      	mov	r1, r7
 800a5d2:	f7f5 fe5b 	bl	800028c <__adddf3>
 800a5d6:	4606      	mov	r6, r0
 800a5d8:	460f      	mov	r7, r1
 800a5da:	f7f6 fabd 	bl	8000b58 <__aeabi_d2iz>
 800a5de:	2200      	movs	r2, #0
 800a5e0:	4682      	mov	sl, r0
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	4630      	mov	r0, r6
 800a5e6:	4639      	mov	r1, r7
 800a5e8:	f7f6 fa78 	bl	8000adc <__aeabi_dcmplt>
 800a5ec:	b148      	cbz	r0, 800a602 <_dtoa_r+0x162>
 800a5ee:	4650      	mov	r0, sl
 800a5f0:	f7f5 ff98 	bl	8000524 <__aeabi_i2d>
 800a5f4:	4632      	mov	r2, r6
 800a5f6:	463b      	mov	r3, r7
 800a5f8:	f7f6 fa66 	bl	8000ac8 <__aeabi_dcmpeq>
 800a5fc:	b908      	cbnz	r0, 800a602 <_dtoa_r+0x162>
 800a5fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a602:	f1ba 0f16 	cmp.w	sl, #22
 800a606:	d859      	bhi.n	800a6bc <_dtoa_r+0x21c>
 800a608:	4970      	ldr	r1, [pc, #448]	; (800a7cc <_dtoa_r+0x32c>)
 800a60a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a60e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a612:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a616:	f7f6 fa7f 	bl	8000b18 <__aeabi_dcmpgt>
 800a61a:	2800      	cmp	r0, #0
 800a61c:	d050      	beq.n	800a6c0 <_dtoa_r+0x220>
 800a61e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a622:	2300      	movs	r3, #0
 800a624:	930f      	str	r3, [sp, #60]	; 0x3c
 800a626:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a628:	1b5d      	subs	r5, r3, r5
 800a62a:	f1b5 0801 	subs.w	r8, r5, #1
 800a62e:	bf49      	itett	mi
 800a630:	f1c5 0301 	rsbmi	r3, r5, #1
 800a634:	2300      	movpl	r3, #0
 800a636:	9305      	strmi	r3, [sp, #20]
 800a638:	f04f 0800 	movmi.w	r8, #0
 800a63c:	bf58      	it	pl
 800a63e:	9305      	strpl	r3, [sp, #20]
 800a640:	f1ba 0f00 	cmp.w	sl, #0
 800a644:	db3e      	blt.n	800a6c4 <_dtoa_r+0x224>
 800a646:	2300      	movs	r3, #0
 800a648:	44d0      	add	r8, sl
 800a64a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a64e:	9307      	str	r3, [sp, #28]
 800a650:	9b06      	ldr	r3, [sp, #24]
 800a652:	2b09      	cmp	r3, #9
 800a654:	f200 8090 	bhi.w	800a778 <_dtoa_r+0x2d8>
 800a658:	2b05      	cmp	r3, #5
 800a65a:	bfc4      	itt	gt
 800a65c:	3b04      	subgt	r3, #4
 800a65e:	9306      	strgt	r3, [sp, #24]
 800a660:	9b06      	ldr	r3, [sp, #24]
 800a662:	f1a3 0302 	sub.w	r3, r3, #2
 800a666:	bfcc      	ite	gt
 800a668:	2500      	movgt	r5, #0
 800a66a:	2501      	movle	r5, #1
 800a66c:	2b03      	cmp	r3, #3
 800a66e:	f200 808f 	bhi.w	800a790 <_dtoa_r+0x2f0>
 800a672:	e8df f003 	tbb	[pc, r3]
 800a676:	7f7d      	.short	0x7f7d
 800a678:	7131      	.short	0x7131
 800a67a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800a67e:	441d      	add	r5, r3
 800a680:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800a684:	2820      	cmp	r0, #32
 800a686:	dd13      	ble.n	800a6b0 <_dtoa_r+0x210>
 800a688:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800a68c:	9b00      	ldr	r3, [sp, #0]
 800a68e:	fa08 f800 	lsl.w	r8, r8, r0
 800a692:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800a696:	fa23 f000 	lsr.w	r0, r3, r0
 800a69a:	ea48 0000 	orr.w	r0, r8, r0
 800a69e:	f7f5 ff31 	bl	8000504 <__aeabi_ui2d>
 800a6a2:	2301      	movs	r3, #1
 800a6a4:	4682      	mov	sl, r0
 800a6a6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800a6aa:	3d01      	subs	r5, #1
 800a6ac:	9313      	str	r3, [sp, #76]	; 0x4c
 800a6ae:	e772      	b.n	800a596 <_dtoa_r+0xf6>
 800a6b0:	9b00      	ldr	r3, [sp, #0]
 800a6b2:	f1c0 0020 	rsb	r0, r0, #32
 800a6b6:	fa03 f000 	lsl.w	r0, r3, r0
 800a6ba:	e7f0      	b.n	800a69e <_dtoa_r+0x1fe>
 800a6bc:	2301      	movs	r3, #1
 800a6be:	e7b1      	b.n	800a624 <_dtoa_r+0x184>
 800a6c0:	900f      	str	r0, [sp, #60]	; 0x3c
 800a6c2:	e7b0      	b.n	800a626 <_dtoa_r+0x186>
 800a6c4:	9b05      	ldr	r3, [sp, #20]
 800a6c6:	eba3 030a 	sub.w	r3, r3, sl
 800a6ca:	9305      	str	r3, [sp, #20]
 800a6cc:	f1ca 0300 	rsb	r3, sl, #0
 800a6d0:	9307      	str	r3, [sp, #28]
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	930e      	str	r3, [sp, #56]	; 0x38
 800a6d6:	e7bb      	b.n	800a650 <_dtoa_r+0x1b0>
 800a6d8:	2301      	movs	r3, #1
 800a6da:	930a      	str	r3, [sp, #40]	; 0x28
 800a6dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	dd59      	ble.n	800a796 <_dtoa_r+0x2f6>
 800a6e2:	9302      	str	r3, [sp, #8]
 800a6e4:	4699      	mov	r9, r3
 800a6e6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	6072      	str	r2, [r6, #4]
 800a6ec:	2204      	movs	r2, #4
 800a6ee:	f102 0014 	add.w	r0, r2, #20
 800a6f2:	4298      	cmp	r0, r3
 800a6f4:	6871      	ldr	r1, [r6, #4]
 800a6f6:	d953      	bls.n	800a7a0 <_dtoa_r+0x300>
 800a6f8:	4620      	mov	r0, r4
 800a6fa:	f000 fc9f 	bl	800b03c <_Balloc>
 800a6fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a700:	6030      	str	r0, [r6, #0]
 800a702:	f1b9 0f0e 	cmp.w	r9, #14
 800a706:	f8d3 b000 	ldr.w	fp, [r3]
 800a70a:	f200 80e6 	bhi.w	800a8da <_dtoa_r+0x43a>
 800a70e:	2d00      	cmp	r5, #0
 800a710:	f000 80e3 	beq.w	800a8da <_dtoa_r+0x43a>
 800a714:	ed9d 7b00 	vldr	d7, [sp]
 800a718:	f1ba 0f00 	cmp.w	sl, #0
 800a71c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800a720:	dd74      	ble.n	800a80c <_dtoa_r+0x36c>
 800a722:	4a2a      	ldr	r2, [pc, #168]	; (800a7cc <_dtoa_r+0x32c>)
 800a724:	f00a 030f 	and.w	r3, sl, #15
 800a728:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a72c:	ed93 7b00 	vldr	d7, [r3]
 800a730:	ea4f 162a 	mov.w	r6, sl, asr #4
 800a734:	06f0      	lsls	r0, r6, #27
 800a736:	ed8d 7b08 	vstr	d7, [sp, #32]
 800a73a:	d565      	bpl.n	800a808 <_dtoa_r+0x368>
 800a73c:	4b24      	ldr	r3, [pc, #144]	; (800a7d0 <_dtoa_r+0x330>)
 800a73e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a742:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a746:	f7f6 f881 	bl	800084c <__aeabi_ddiv>
 800a74a:	e9cd 0100 	strd	r0, r1, [sp]
 800a74e:	f006 060f 	and.w	r6, r6, #15
 800a752:	2503      	movs	r5, #3
 800a754:	4f1e      	ldr	r7, [pc, #120]	; (800a7d0 <_dtoa_r+0x330>)
 800a756:	e04c      	b.n	800a7f2 <_dtoa_r+0x352>
 800a758:	2301      	movs	r3, #1
 800a75a:	930a      	str	r3, [sp, #40]	; 0x28
 800a75c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a75e:	4453      	add	r3, sl
 800a760:	f103 0901 	add.w	r9, r3, #1
 800a764:	9302      	str	r3, [sp, #8]
 800a766:	464b      	mov	r3, r9
 800a768:	2b01      	cmp	r3, #1
 800a76a:	bfb8      	it	lt
 800a76c:	2301      	movlt	r3, #1
 800a76e:	e7ba      	b.n	800a6e6 <_dtoa_r+0x246>
 800a770:	2300      	movs	r3, #0
 800a772:	e7b2      	b.n	800a6da <_dtoa_r+0x23a>
 800a774:	2300      	movs	r3, #0
 800a776:	e7f0      	b.n	800a75a <_dtoa_r+0x2ba>
 800a778:	2501      	movs	r5, #1
 800a77a:	2300      	movs	r3, #0
 800a77c:	9306      	str	r3, [sp, #24]
 800a77e:	950a      	str	r5, [sp, #40]	; 0x28
 800a780:	f04f 33ff 	mov.w	r3, #4294967295
 800a784:	9302      	str	r3, [sp, #8]
 800a786:	4699      	mov	r9, r3
 800a788:	2200      	movs	r2, #0
 800a78a:	2312      	movs	r3, #18
 800a78c:	920b      	str	r2, [sp, #44]	; 0x2c
 800a78e:	e7aa      	b.n	800a6e6 <_dtoa_r+0x246>
 800a790:	2301      	movs	r3, #1
 800a792:	930a      	str	r3, [sp, #40]	; 0x28
 800a794:	e7f4      	b.n	800a780 <_dtoa_r+0x2e0>
 800a796:	2301      	movs	r3, #1
 800a798:	9302      	str	r3, [sp, #8]
 800a79a:	4699      	mov	r9, r3
 800a79c:	461a      	mov	r2, r3
 800a79e:	e7f5      	b.n	800a78c <_dtoa_r+0x2ec>
 800a7a0:	3101      	adds	r1, #1
 800a7a2:	6071      	str	r1, [r6, #4]
 800a7a4:	0052      	lsls	r2, r2, #1
 800a7a6:	e7a2      	b.n	800a6ee <_dtoa_r+0x24e>
 800a7a8:	636f4361 	.word	0x636f4361
 800a7ac:	3fd287a7 	.word	0x3fd287a7
 800a7b0:	8b60c8b3 	.word	0x8b60c8b3
 800a7b4:	3fc68a28 	.word	0x3fc68a28
 800a7b8:	509f79fb 	.word	0x509f79fb
 800a7bc:	3fd34413 	.word	0x3fd34413
 800a7c0:	7ff00000 	.word	0x7ff00000
 800a7c4:	0800cf6d 	.word	0x0800cf6d
 800a7c8:	3ff80000 	.word	0x3ff80000
 800a7cc:	0800cfc8 	.word	0x0800cfc8
 800a7d0:	0800cfa0 	.word	0x0800cfa0
 800a7d4:	0800cf99 	.word	0x0800cf99
 800a7d8:	07f1      	lsls	r1, r6, #31
 800a7da:	d508      	bpl.n	800a7ee <_dtoa_r+0x34e>
 800a7dc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a7e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7e4:	f7f5 ff08 	bl	80005f8 <__aeabi_dmul>
 800a7e8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a7ec:	3501      	adds	r5, #1
 800a7ee:	1076      	asrs	r6, r6, #1
 800a7f0:	3708      	adds	r7, #8
 800a7f2:	2e00      	cmp	r6, #0
 800a7f4:	d1f0      	bne.n	800a7d8 <_dtoa_r+0x338>
 800a7f6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a7fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a7fe:	f7f6 f825 	bl	800084c <__aeabi_ddiv>
 800a802:	e9cd 0100 	strd	r0, r1, [sp]
 800a806:	e01a      	b.n	800a83e <_dtoa_r+0x39e>
 800a808:	2502      	movs	r5, #2
 800a80a:	e7a3      	b.n	800a754 <_dtoa_r+0x2b4>
 800a80c:	f000 80a0 	beq.w	800a950 <_dtoa_r+0x4b0>
 800a810:	f1ca 0600 	rsb	r6, sl, #0
 800a814:	4b9f      	ldr	r3, [pc, #636]	; (800aa94 <_dtoa_r+0x5f4>)
 800a816:	4fa0      	ldr	r7, [pc, #640]	; (800aa98 <_dtoa_r+0x5f8>)
 800a818:	f006 020f 	and.w	r2, r6, #15
 800a81c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a824:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a828:	f7f5 fee6 	bl	80005f8 <__aeabi_dmul>
 800a82c:	e9cd 0100 	strd	r0, r1, [sp]
 800a830:	1136      	asrs	r6, r6, #4
 800a832:	2300      	movs	r3, #0
 800a834:	2502      	movs	r5, #2
 800a836:	2e00      	cmp	r6, #0
 800a838:	d17f      	bne.n	800a93a <_dtoa_r+0x49a>
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d1e1      	bne.n	800a802 <_dtoa_r+0x362>
 800a83e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a840:	2b00      	cmp	r3, #0
 800a842:	f000 8087 	beq.w	800a954 <_dtoa_r+0x4b4>
 800a846:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a84a:	2200      	movs	r2, #0
 800a84c:	4b93      	ldr	r3, [pc, #588]	; (800aa9c <_dtoa_r+0x5fc>)
 800a84e:	4630      	mov	r0, r6
 800a850:	4639      	mov	r1, r7
 800a852:	f7f6 f943 	bl	8000adc <__aeabi_dcmplt>
 800a856:	2800      	cmp	r0, #0
 800a858:	d07c      	beq.n	800a954 <_dtoa_r+0x4b4>
 800a85a:	f1b9 0f00 	cmp.w	r9, #0
 800a85e:	d079      	beq.n	800a954 <_dtoa_r+0x4b4>
 800a860:	9b02      	ldr	r3, [sp, #8]
 800a862:	2b00      	cmp	r3, #0
 800a864:	dd35      	ble.n	800a8d2 <_dtoa_r+0x432>
 800a866:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a86a:	9308      	str	r3, [sp, #32]
 800a86c:	4639      	mov	r1, r7
 800a86e:	2200      	movs	r2, #0
 800a870:	4b8b      	ldr	r3, [pc, #556]	; (800aaa0 <_dtoa_r+0x600>)
 800a872:	4630      	mov	r0, r6
 800a874:	f7f5 fec0 	bl	80005f8 <__aeabi_dmul>
 800a878:	e9cd 0100 	strd	r0, r1, [sp]
 800a87c:	9f02      	ldr	r7, [sp, #8]
 800a87e:	3501      	adds	r5, #1
 800a880:	4628      	mov	r0, r5
 800a882:	f7f5 fe4f 	bl	8000524 <__aeabi_i2d>
 800a886:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a88a:	f7f5 feb5 	bl	80005f8 <__aeabi_dmul>
 800a88e:	2200      	movs	r2, #0
 800a890:	4b84      	ldr	r3, [pc, #528]	; (800aaa4 <_dtoa_r+0x604>)
 800a892:	f7f5 fcfb 	bl	800028c <__adddf3>
 800a896:	4605      	mov	r5, r0
 800a898:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a89c:	2f00      	cmp	r7, #0
 800a89e:	d15d      	bne.n	800a95c <_dtoa_r+0x4bc>
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	4b81      	ldr	r3, [pc, #516]	; (800aaa8 <_dtoa_r+0x608>)
 800a8a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a8a8:	f7f5 fcee 	bl	8000288 <__aeabi_dsub>
 800a8ac:	462a      	mov	r2, r5
 800a8ae:	4633      	mov	r3, r6
 800a8b0:	e9cd 0100 	strd	r0, r1, [sp]
 800a8b4:	f7f6 f930 	bl	8000b18 <__aeabi_dcmpgt>
 800a8b8:	2800      	cmp	r0, #0
 800a8ba:	f040 8288 	bne.w	800adce <_dtoa_r+0x92e>
 800a8be:	462a      	mov	r2, r5
 800a8c0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a8c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a8c8:	f7f6 f908 	bl	8000adc <__aeabi_dcmplt>
 800a8cc:	2800      	cmp	r0, #0
 800a8ce:	f040 827c 	bne.w	800adca <_dtoa_r+0x92a>
 800a8d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a8d6:	e9cd 2300 	strd	r2, r3, [sp]
 800a8da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	f2c0 8150 	blt.w	800ab82 <_dtoa_r+0x6e2>
 800a8e2:	f1ba 0f0e 	cmp.w	sl, #14
 800a8e6:	f300 814c 	bgt.w	800ab82 <_dtoa_r+0x6e2>
 800a8ea:	4b6a      	ldr	r3, [pc, #424]	; (800aa94 <_dtoa_r+0x5f4>)
 800a8ec:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a8f0:	ed93 7b00 	vldr	d7, [r3]
 800a8f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a8fc:	f280 80d8 	bge.w	800aab0 <_dtoa_r+0x610>
 800a900:	f1b9 0f00 	cmp.w	r9, #0
 800a904:	f300 80d4 	bgt.w	800aab0 <_dtoa_r+0x610>
 800a908:	f040 825e 	bne.w	800adc8 <_dtoa_r+0x928>
 800a90c:	2200      	movs	r2, #0
 800a90e:	4b66      	ldr	r3, [pc, #408]	; (800aaa8 <_dtoa_r+0x608>)
 800a910:	ec51 0b17 	vmov	r0, r1, d7
 800a914:	f7f5 fe70 	bl	80005f8 <__aeabi_dmul>
 800a918:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a91c:	f7f6 f8f2 	bl	8000b04 <__aeabi_dcmpge>
 800a920:	464f      	mov	r7, r9
 800a922:	464e      	mov	r6, r9
 800a924:	2800      	cmp	r0, #0
 800a926:	f040 8234 	bne.w	800ad92 <_dtoa_r+0x8f2>
 800a92a:	2331      	movs	r3, #49	; 0x31
 800a92c:	f10b 0501 	add.w	r5, fp, #1
 800a930:	f88b 3000 	strb.w	r3, [fp]
 800a934:	f10a 0a01 	add.w	sl, sl, #1
 800a938:	e22f      	b.n	800ad9a <_dtoa_r+0x8fa>
 800a93a:	07f2      	lsls	r2, r6, #31
 800a93c:	d505      	bpl.n	800a94a <_dtoa_r+0x4aa>
 800a93e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a942:	f7f5 fe59 	bl	80005f8 <__aeabi_dmul>
 800a946:	3501      	adds	r5, #1
 800a948:	2301      	movs	r3, #1
 800a94a:	1076      	asrs	r6, r6, #1
 800a94c:	3708      	adds	r7, #8
 800a94e:	e772      	b.n	800a836 <_dtoa_r+0x396>
 800a950:	2502      	movs	r5, #2
 800a952:	e774      	b.n	800a83e <_dtoa_r+0x39e>
 800a954:	f8cd a020 	str.w	sl, [sp, #32]
 800a958:	464f      	mov	r7, r9
 800a95a:	e791      	b.n	800a880 <_dtoa_r+0x3e0>
 800a95c:	4b4d      	ldr	r3, [pc, #308]	; (800aa94 <_dtoa_r+0x5f4>)
 800a95e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a962:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d047      	beq.n	800a9fc <_dtoa_r+0x55c>
 800a96c:	4602      	mov	r2, r0
 800a96e:	460b      	mov	r3, r1
 800a970:	2000      	movs	r0, #0
 800a972:	494e      	ldr	r1, [pc, #312]	; (800aaac <_dtoa_r+0x60c>)
 800a974:	f7f5 ff6a 	bl	800084c <__aeabi_ddiv>
 800a978:	462a      	mov	r2, r5
 800a97a:	4633      	mov	r3, r6
 800a97c:	f7f5 fc84 	bl	8000288 <__aeabi_dsub>
 800a980:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a984:	465d      	mov	r5, fp
 800a986:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a98a:	f7f6 f8e5 	bl	8000b58 <__aeabi_d2iz>
 800a98e:	4606      	mov	r6, r0
 800a990:	f7f5 fdc8 	bl	8000524 <__aeabi_i2d>
 800a994:	4602      	mov	r2, r0
 800a996:	460b      	mov	r3, r1
 800a998:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a99c:	f7f5 fc74 	bl	8000288 <__aeabi_dsub>
 800a9a0:	3630      	adds	r6, #48	; 0x30
 800a9a2:	f805 6b01 	strb.w	r6, [r5], #1
 800a9a6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a9aa:	e9cd 0100 	strd	r0, r1, [sp]
 800a9ae:	f7f6 f895 	bl	8000adc <__aeabi_dcmplt>
 800a9b2:	2800      	cmp	r0, #0
 800a9b4:	d163      	bne.n	800aa7e <_dtoa_r+0x5de>
 800a9b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a9ba:	2000      	movs	r0, #0
 800a9bc:	4937      	ldr	r1, [pc, #220]	; (800aa9c <_dtoa_r+0x5fc>)
 800a9be:	f7f5 fc63 	bl	8000288 <__aeabi_dsub>
 800a9c2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a9c6:	f7f6 f889 	bl	8000adc <__aeabi_dcmplt>
 800a9ca:	2800      	cmp	r0, #0
 800a9cc:	f040 80b7 	bne.w	800ab3e <_dtoa_r+0x69e>
 800a9d0:	eba5 030b 	sub.w	r3, r5, fp
 800a9d4:	429f      	cmp	r7, r3
 800a9d6:	f77f af7c 	ble.w	800a8d2 <_dtoa_r+0x432>
 800a9da:	2200      	movs	r2, #0
 800a9dc:	4b30      	ldr	r3, [pc, #192]	; (800aaa0 <_dtoa_r+0x600>)
 800a9de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a9e2:	f7f5 fe09 	bl	80005f8 <__aeabi_dmul>
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a9ec:	4b2c      	ldr	r3, [pc, #176]	; (800aaa0 <_dtoa_r+0x600>)
 800a9ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a9f2:	f7f5 fe01 	bl	80005f8 <__aeabi_dmul>
 800a9f6:	e9cd 0100 	strd	r0, r1, [sp]
 800a9fa:	e7c4      	b.n	800a986 <_dtoa_r+0x4e6>
 800a9fc:	462a      	mov	r2, r5
 800a9fe:	4633      	mov	r3, r6
 800aa00:	f7f5 fdfa 	bl	80005f8 <__aeabi_dmul>
 800aa04:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800aa08:	eb0b 0507 	add.w	r5, fp, r7
 800aa0c:	465e      	mov	r6, fp
 800aa0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa12:	f7f6 f8a1 	bl	8000b58 <__aeabi_d2iz>
 800aa16:	4607      	mov	r7, r0
 800aa18:	f7f5 fd84 	bl	8000524 <__aeabi_i2d>
 800aa1c:	3730      	adds	r7, #48	; 0x30
 800aa1e:	4602      	mov	r2, r0
 800aa20:	460b      	mov	r3, r1
 800aa22:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa26:	f7f5 fc2f 	bl	8000288 <__aeabi_dsub>
 800aa2a:	f806 7b01 	strb.w	r7, [r6], #1
 800aa2e:	42ae      	cmp	r6, r5
 800aa30:	e9cd 0100 	strd	r0, r1, [sp]
 800aa34:	f04f 0200 	mov.w	r2, #0
 800aa38:	d126      	bne.n	800aa88 <_dtoa_r+0x5e8>
 800aa3a:	4b1c      	ldr	r3, [pc, #112]	; (800aaac <_dtoa_r+0x60c>)
 800aa3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800aa40:	f7f5 fc24 	bl	800028c <__adddf3>
 800aa44:	4602      	mov	r2, r0
 800aa46:	460b      	mov	r3, r1
 800aa48:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa4c:	f7f6 f864 	bl	8000b18 <__aeabi_dcmpgt>
 800aa50:	2800      	cmp	r0, #0
 800aa52:	d174      	bne.n	800ab3e <_dtoa_r+0x69e>
 800aa54:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800aa58:	2000      	movs	r0, #0
 800aa5a:	4914      	ldr	r1, [pc, #80]	; (800aaac <_dtoa_r+0x60c>)
 800aa5c:	f7f5 fc14 	bl	8000288 <__aeabi_dsub>
 800aa60:	4602      	mov	r2, r0
 800aa62:	460b      	mov	r3, r1
 800aa64:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa68:	f7f6 f838 	bl	8000adc <__aeabi_dcmplt>
 800aa6c:	2800      	cmp	r0, #0
 800aa6e:	f43f af30 	beq.w	800a8d2 <_dtoa_r+0x432>
 800aa72:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800aa76:	2b30      	cmp	r3, #48	; 0x30
 800aa78:	f105 32ff 	add.w	r2, r5, #4294967295
 800aa7c:	d002      	beq.n	800aa84 <_dtoa_r+0x5e4>
 800aa7e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800aa82:	e04a      	b.n	800ab1a <_dtoa_r+0x67a>
 800aa84:	4615      	mov	r5, r2
 800aa86:	e7f4      	b.n	800aa72 <_dtoa_r+0x5d2>
 800aa88:	4b05      	ldr	r3, [pc, #20]	; (800aaa0 <_dtoa_r+0x600>)
 800aa8a:	f7f5 fdb5 	bl	80005f8 <__aeabi_dmul>
 800aa8e:	e9cd 0100 	strd	r0, r1, [sp]
 800aa92:	e7bc      	b.n	800aa0e <_dtoa_r+0x56e>
 800aa94:	0800cfc8 	.word	0x0800cfc8
 800aa98:	0800cfa0 	.word	0x0800cfa0
 800aa9c:	3ff00000 	.word	0x3ff00000
 800aaa0:	40240000 	.word	0x40240000
 800aaa4:	401c0000 	.word	0x401c0000
 800aaa8:	40140000 	.word	0x40140000
 800aaac:	3fe00000 	.word	0x3fe00000
 800aab0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800aab4:	465d      	mov	r5, fp
 800aab6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aaba:	4630      	mov	r0, r6
 800aabc:	4639      	mov	r1, r7
 800aabe:	f7f5 fec5 	bl	800084c <__aeabi_ddiv>
 800aac2:	f7f6 f849 	bl	8000b58 <__aeabi_d2iz>
 800aac6:	4680      	mov	r8, r0
 800aac8:	f7f5 fd2c 	bl	8000524 <__aeabi_i2d>
 800aacc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aad0:	f7f5 fd92 	bl	80005f8 <__aeabi_dmul>
 800aad4:	4602      	mov	r2, r0
 800aad6:	460b      	mov	r3, r1
 800aad8:	4630      	mov	r0, r6
 800aada:	4639      	mov	r1, r7
 800aadc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800aae0:	f7f5 fbd2 	bl	8000288 <__aeabi_dsub>
 800aae4:	f805 6b01 	strb.w	r6, [r5], #1
 800aae8:	eba5 060b 	sub.w	r6, r5, fp
 800aaec:	45b1      	cmp	r9, r6
 800aaee:	4602      	mov	r2, r0
 800aaf0:	460b      	mov	r3, r1
 800aaf2:	d139      	bne.n	800ab68 <_dtoa_r+0x6c8>
 800aaf4:	f7f5 fbca 	bl	800028c <__adddf3>
 800aaf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aafc:	4606      	mov	r6, r0
 800aafe:	460f      	mov	r7, r1
 800ab00:	f7f6 f80a 	bl	8000b18 <__aeabi_dcmpgt>
 800ab04:	b9c8      	cbnz	r0, 800ab3a <_dtoa_r+0x69a>
 800ab06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab0a:	4630      	mov	r0, r6
 800ab0c:	4639      	mov	r1, r7
 800ab0e:	f7f5 ffdb 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab12:	b110      	cbz	r0, 800ab1a <_dtoa_r+0x67a>
 800ab14:	f018 0f01 	tst.w	r8, #1
 800ab18:	d10f      	bne.n	800ab3a <_dtoa_r+0x69a>
 800ab1a:	9904      	ldr	r1, [sp, #16]
 800ab1c:	4620      	mov	r0, r4
 800ab1e:	f000 fac1 	bl	800b0a4 <_Bfree>
 800ab22:	2300      	movs	r3, #0
 800ab24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ab26:	702b      	strb	r3, [r5, #0]
 800ab28:	f10a 0301 	add.w	r3, sl, #1
 800ab2c:	6013      	str	r3, [r2, #0]
 800ab2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	f000 8241 	beq.w	800afb8 <_dtoa_r+0xb18>
 800ab36:	601d      	str	r5, [r3, #0]
 800ab38:	e23e      	b.n	800afb8 <_dtoa_r+0xb18>
 800ab3a:	f8cd a020 	str.w	sl, [sp, #32]
 800ab3e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ab42:	2a39      	cmp	r2, #57	; 0x39
 800ab44:	f105 33ff 	add.w	r3, r5, #4294967295
 800ab48:	d108      	bne.n	800ab5c <_dtoa_r+0x6bc>
 800ab4a:	459b      	cmp	fp, r3
 800ab4c:	d10a      	bne.n	800ab64 <_dtoa_r+0x6c4>
 800ab4e:	9b08      	ldr	r3, [sp, #32]
 800ab50:	3301      	adds	r3, #1
 800ab52:	9308      	str	r3, [sp, #32]
 800ab54:	2330      	movs	r3, #48	; 0x30
 800ab56:	f88b 3000 	strb.w	r3, [fp]
 800ab5a:	465b      	mov	r3, fp
 800ab5c:	781a      	ldrb	r2, [r3, #0]
 800ab5e:	3201      	adds	r2, #1
 800ab60:	701a      	strb	r2, [r3, #0]
 800ab62:	e78c      	b.n	800aa7e <_dtoa_r+0x5de>
 800ab64:	461d      	mov	r5, r3
 800ab66:	e7ea      	b.n	800ab3e <_dtoa_r+0x69e>
 800ab68:	2200      	movs	r2, #0
 800ab6a:	4b9b      	ldr	r3, [pc, #620]	; (800add8 <_dtoa_r+0x938>)
 800ab6c:	f7f5 fd44 	bl	80005f8 <__aeabi_dmul>
 800ab70:	2200      	movs	r2, #0
 800ab72:	2300      	movs	r3, #0
 800ab74:	4606      	mov	r6, r0
 800ab76:	460f      	mov	r7, r1
 800ab78:	f7f5 ffa6 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab7c:	2800      	cmp	r0, #0
 800ab7e:	d09a      	beq.n	800aab6 <_dtoa_r+0x616>
 800ab80:	e7cb      	b.n	800ab1a <_dtoa_r+0x67a>
 800ab82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab84:	2a00      	cmp	r2, #0
 800ab86:	f000 808b 	beq.w	800aca0 <_dtoa_r+0x800>
 800ab8a:	9a06      	ldr	r2, [sp, #24]
 800ab8c:	2a01      	cmp	r2, #1
 800ab8e:	dc6e      	bgt.n	800ac6e <_dtoa_r+0x7ce>
 800ab90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ab92:	2a00      	cmp	r2, #0
 800ab94:	d067      	beq.n	800ac66 <_dtoa_r+0x7c6>
 800ab96:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ab9a:	9f07      	ldr	r7, [sp, #28]
 800ab9c:	9d05      	ldr	r5, [sp, #20]
 800ab9e:	9a05      	ldr	r2, [sp, #20]
 800aba0:	2101      	movs	r1, #1
 800aba2:	441a      	add	r2, r3
 800aba4:	4620      	mov	r0, r4
 800aba6:	9205      	str	r2, [sp, #20]
 800aba8:	4498      	add	r8, r3
 800abaa:	f000 fb1b 	bl	800b1e4 <__i2b>
 800abae:	4606      	mov	r6, r0
 800abb0:	2d00      	cmp	r5, #0
 800abb2:	dd0c      	ble.n	800abce <_dtoa_r+0x72e>
 800abb4:	f1b8 0f00 	cmp.w	r8, #0
 800abb8:	dd09      	ble.n	800abce <_dtoa_r+0x72e>
 800abba:	4545      	cmp	r5, r8
 800abbc:	9a05      	ldr	r2, [sp, #20]
 800abbe:	462b      	mov	r3, r5
 800abc0:	bfa8      	it	ge
 800abc2:	4643      	movge	r3, r8
 800abc4:	1ad2      	subs	r2, r2, r3
 800abc6:	9205      	str	r2, [sp, #20]
 800abc8:	1aed      	subs	r5, r5, r3
 800abca:	eba8 0803 	sub.w	r8, r8, r3
 800abce:	9b07      	ldr	r3, [sp, #28]
 800abd0:	b1eb      	cbz	r3, 800ac0e <_dtoa_r+0x76e>
 800abd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d067      	beq.n	800aca8 <_dtoa_r+0x808>
 800abd8:	b18f      	cbz	r7, 800abfe <_dtoa_r+0x75e>
 800abda:	4631      	mov	r1, r6
 800abdc:	463a      	mov	r2, r7
 800abde:	4620      	mov	r0, r4
 800abe0:	f000 fba0 	bl	800b324 <__pow5mult>
 800abe4:	9a04      	ldr	r2, [sp, #16]
 800abe6:	4601      	mov	r1, r0
 800abe8:	4606      	mov	r6, r0
 800abea:	4620      	mov	r0, r4
 800abec:	f000 fb03 	bl	800b1f6 <__multiply>
 800abf0:	9904      	ldr	r1, [sp, #16]
 800abf2:	9008      	str	r0, [sp, #32]
 800abf4:	4620      	mov	r0, r4
 800abf6:	f000 fa55 	bl	800b0a4 <_Bfree>
 800abfa:	9b08      	ldr	r3, [sp, #32]
 800abfc:	9304      	str	r3, [sp, #16]
 800abfe:	9b07      	ldr	r3, [sp, #28]
 800ac00:	1bda      	subs	r2, r3, r7
 800ac02:	d004      	beq.n	800ac0e <_dtoa_r+0x76e>
 800ac04:	9904      	ldr	r1, [sp, #16]
 800ac06:	4620      	mov	r0, r4
 800ac08:	f000 fb8c 	bl	800b324 <__pow5mult>
 800ac0c:	9004      	str	r0, [sp, #16]
 800ac0e:	2101      	movs	r1, #1
 800ac10:	4620      	mov	r0, r4
 800ac12:	f000 fae7 	bl	800b1e4 <__i2b>
 800ac16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ac18:	4607      	mov	r7, r0
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	f000 81d0 	beq.w	800afc0 <_dtoa_r+0xb20>
 800ac20:	461a      	mov	r2, r3
 800ac22:	4601      	mov	r1, r0
 800ac24:	4620      	mov	r0, r4
 800ac26:	f000 fb7d 	bl	800b324 <__pow5mult>
 800ac2a:	9b06      	ldr	r3, [sp, #24]
 800ac2c:	2b01      	cmp	r3, #1
 800ac2e:	4607      	mov	r7, r0
 800ac30:	dc40      	bgt.n	800acb4 <_dtoa_r+0x814>
 800ac32:	9b00      	ldr	r3, [sp, #0]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d139      	bne.n	800acac <_dtoa_r+0x80c>
 800ac38:	9b01      	ldr	r3, [sp, #4]
 800ac3a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d136      	bne.n	800acb0 <_dtoa_r+0x810>
 800ac42:	9b01      	ldr	r3, [sp, #4]
 800ac44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ac48:	0d1b      	lsrs	r3, r3, #20
 800ac4a:	051b      	lsls	r3, r3, #20
 800ac4c:	b12b      	cbz	r3, 800ac5a <_dtoa_r+0x7ba>
 800ac4e:	9b05      	ldr	r3, [sp, #20]
 800ac50:	3301      	adds	r3, #1
 800ac52:	9305      	str	r3, [sp, #20]
 800ac54:	f108 0801 	add.w	r8, r8, #1
 800ac58:	2301      	movs	r3, #1
 800ac5a:	9307      	str	r3, [sp, #28]
 800ac5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d12a      	bne.n	800acb8 <_dtoa_r+0x818>
 800ac62:	2001      	movs	r0, #1
 800ac64:	e030      	b.n	800acc8 <_dtoa_r+0x828>
 800ac66:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ac68:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ac6c:	e795      	b.n	800ab9a <_dtoa_r+0x6fa>
 800ac6e:	9b07      	ldr	r3, [sp, #28]
 800ac70:	f109 37ff 	add.w	r7, r9, #4294967295
 800ac74:	42bb      	cmp	r3, r7
 800ac76:	bfbf      	itttt	lt
 800ac78:	9b07      	ldrlt	r3, [sp, #28]
 800ac7a:	9707      	strlt	r7, [sp, #28]
 800ac7c:	1afa      	sublt	r2, r7, r3
 800ac7e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800ac80:	bfbb      	ittet	lt
 800ac82:	189b      	addlt	r3, r3, r2
 800ac84:	930e      	strlt	r3, [sp, #56]	; 0x38
 800ac86:	1bdf      	subge	r7, r3, r7
 800ac88:	2700      	movlt	r7, #0
 800ac8a:	f1b9 0f00 	cmp.w	r9, #0
 800ac8e:	bfb5      	itete	lt
 800ac90:	9b05      	ldrlt	r3, [sp, #20]
 800ac92:	9d05      	ldrge	r5, [sp, #20]
 800ac94:	eba3 0509 	sublt.w	r5, r3, r9
 800ac98:	464b      	movge	r3, r9
 800ac9a:	bfb8      	it	lt
 800ac9c:	2300      	movlt	r3, #0
 800ac9e:	e77e      	b.n	800ab9e <_dtoa_r+0x6fe>
 800aca0:	9f07      	ldr	r7, [sp, #28]
 800aca2:	9d05      	ldr	r5, [sp, #20]
 800aca4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800aca6:	e783      	b.n	800abb0 <_dtoa_r+0x710>
 800aca8:	9a07      	ldr	r2, [sp, #28]
 800acaa:	e7ab      	b.n	800ac04 <_dtoa_r+0x764>
 800acac:	2300      	movs	r3, #0
 800acae:	e7d4      	b.n	800ac5a <_dtoa_r+0x7ba>
 800acb0:	9b00      	ldr	r3, [sp, #0]
 800acb2:	e7d2      	b.n	800ac5a <_dtoa_r+0x7ba>
 800acb4:	2300      	movs	r3, #0
 800acb6:	9307      	str	r3, [sp, #28]
 800acb8:	693b      	ldr	r3, [r7, #16]
 800acba:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800acbe:	6918      	ldr	r0, [r3, #16]
 800acc0:	f000 fa42 	bl	800b148 <__hi0bits>
 800acc4:	f1c0 0020 	rsb	r0, r0, #32
 800acc8:	4440      	add	r0, r8
 800acca:	f010 001f 	ands.w	r0, r0, #31
 800acce:	d047      	beq.n	800ad60 <_dtoa_r+0x8c0>
 800acd0:	f1c0 0320 	rsb	r3, r0, #32
 800acd4:	2b04      	cmp	r3, #4
 800acd6:	dd3b      	ble.n	800ad50 <_dtoa_r+0x8b0>
 800acd8:	9b05      	ldr	r3, [sp, #20]
 800acda:	f1c0 001c 	rsb	r0, r0, #28
 800acde:	4403      	add	r3, r0
 800ace0:	9305      	str	r3, [sp, #20]
 800ace2:	4405      	add	r5, r0
 800ace4:	4480      	add	r8, r0
 800ace6:	9b05      	ldr	r3, [sp, #20]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	dd05      	ble.n	800acf8 <_dtoa_r+0x858>
 800acec:	461a      	mov	r2, r3
 800acee:	9904      	ldr	r1, [sp, #16]
 800acf0:	4620      	mov	r0, r4
 800acf2:	f000 fb65 	bl	800b3c0 <__lshift>
 800acf6:	9004      	str	r0, [sp, #16]
 800acf8:	f1b8 0f00 	cmp.w	r8, #0
 800acfc:	dd05      	ble.n	800ad0a <_dtoa_r+0x86a>
 800acfe:	4639      	mov	r1, r7
 800ad00:	4642      	mov	r2, r8
 800ad02:	4620      	mov	r0, r4
 800ad04:	f000 fb5c 	bl	800b3c0 <__lshift>
 800ad08:	4607      	mov	r7, r0
 800ad0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ad0c:	b353      	cbz	r3, 800ad64 <_dtoa_r+0x8c4>
 800ad0e:	4639      	mov	r1, r7
 800ad10:	9804      	ldr	r0, [sp, #16]
 800ad12:	f000 fba9 	bl	800b468 <__mcmp>
 800ad16:	2800      	cmp	r0, #0
 800ad18:	da24      	bge.n	800ad64 <_dtoa_r+0x8c4>
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	220a      	movs	r2, #10
 800ad1e:	9904      	ldr	r1, [sp, #16]
 800ad20:	4620      	mov	r0, r4
 800ad22:	f000 f9d6 	bl	800b0d2 <__multadd>
 800ad26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad28:	9004      	str	r0, [sp, #16]
 800ad2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	f000 814d 	beq.w	800afce <_dtoa_r+0xb2e>
 800ad34:	2300      	movs	r3, #0
 800ad36:	4631      	mov	r1, r6
 800ad38:	220a      	movs	r2, #10
 800ad3a:	4620      	mov	r0, r4
 800ad3c:	f000 f9c9 	bl	800b0d2 <__multadd>
 800ad40:	9b02      	ldr	r3, [sp, #8]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	4606      	mov	r6, r0
 800ad46:	dc4f      	bgt.n	800ade8 <_dtoa_r+0x948>
 800ad48:	9b06      	ldr	r3, [sp, #24]
 800ad4a:	2b02      	cmp	r3, #2
 800ad4c:	dd4c      	ble.n	800ade8 <_dtoa_r+0x948>
 800ad4e:	e011      	b.n	800ad74 <_dtoa_r+0x8d4>
 800ad50:	d0c9      	beq.n	800ace6 <_dtoa_r+0x846>
 800ad52:	9a05      	ldr	r2, [sp, #20]
 800ad54:	331c      	adds	r3, #28
 800ad56:	441a      	add	r2, r3
 800ad58:	9205      	str	r2, [sp, #20]
 800ad5a:	441d      	add	r5, r3
 800ad5c:	4498      	add	r8, r3
 800ad5e:	e7c2      	b.n	800ace6 <_dtoa_r+0x846>
 800ad60:	4603      	mov	r3, r0
 800ad62:	e7f6      	b.n	800ad52 <_dtoa_r+0x8b2>
 800ad64:	f1b9 0f00 	cmp.w	r9, #0
 800ad68:	dc38      	bgt.n	800addc <_dtoa_r+0x93c>
 800ad6a:	9b06      	ldr	r3, [sp, #24]
 800ad6c:	2b02      	cmp	r3, #2
 800ad6e:	dd35      	ble.n	800addc <_dtoa_r+0x93c>
 800ad70:	f8cd 9008 	str.w	r9, [sp, #8]
 800ad74:	9b02      	ldr	r3, [sp, #8]
 800ad76:	b963      	cbnz	r3, 800ad92 <_dtoa_r+0x8f2>
 800ad78:	4639      	mov	r1, r7
 800ad7a:	2205      	movs	r2, #5
 800ad7c:	4620      	mov	r0, r4
 800ad7e:	f000 f9a8 	bl	800b0d2 <__multadd>
 800ad82:	4601      	mov	r1, r0
 800ad84:	4607      	mov	r7, r0
 800ad86:	9804      	ldr	r0, [sp, #16]
 800ad88:	f000 fb6e 	bl	800b468 <__mcmp>
 800ad8c:	2800      	cmp	r0, #0
 800ad8e:	f73f adcc 	bgt.w	800a92a <_dtoa_r+0x48a>
 800ad92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad94:	465d      	mov	r5, fp
 800ad96:	ea6f 0a03 	mvn.w	sl, r3
 800ad9a:	f04f 0900 	mov.w	r9, #0
 800ad9e:	4639      	mov	r1, r7
 800ada0:	4620      	mov	r0, r4
 800ada2:	f000 f97f 	bl	800b0a4 <_Bfree>
 800ada6:	2e00      	cmp	r6, #0
 800ada8:	f43f aeb7 	beq.w	800ab1a <_dtoa_r+0x67a>
 800adac:	f1b9 0f00 	cmp.w	r9, #0
 800adb0:	d005      	beq.n	800adbe <_dtoa_r+0x91e>
 800adb2:	45b1      	cmp	r9, r6
 800adb4:	d003      	beq.n	800adbe <_dtoa_r+0x91e>
 800adb6:	4649      	mov	r1, r9
 800adb8:	4620      	mov	r0, r4
 800adba:	f000 f973 	bl	800b0a4 <_Bfree>
 800adbe:	4631      	mov	r1, r6
 800adc0:	4620      	mov	r0, r4
 800adc2:	f000 f96f 	bl	800b0a4 <_Bfree>
 800adc6:	e6a8      	b.n	800ab1a <_dtoa_r+0x67a>
 800adc8:	2700      	movs	r7, #0
 800adca:	463e      	mov	r6, r7
 800adcc:	e7e1      	b.n	800ad92 <_dtoa_r+0x8f2>
 800adce:	f8dd a020 	ldr.w	sl, [sp, #32]
 800add2:	463e      	mov	r6, r7
 800add4:	e5a9      	b.n	800a92a <_dtoa_r+0x48a>
 800add6:	bf00      	nop
 800add8:	40240000 	.word	0x40240000
 800addc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adde:	f8cd 9008 	str.w	r9, [sp, #8]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	f000 80fa 	beq.w	800afdc <_dtoa_r+0xb3c>
 800ade8:	2d00      	cmp	r5, #0
 800adea:	dd05      	ble.n	800adf8 <_dtoa_r+0x958>
 800adec:	4631      	mov	r1, r6
 800adee:	462a      	mov	r2, r5
 800adf0:	4620      	mov	r0, r4
 800adf2:	f000 fae5 	bl	800b3c0 <__lshift>
 800adf6:	4606      	mov	r6, r0
 800adf8:	9b07      	ldr	r3, [sp, #28]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d04c      	beq.n	800ae98 <_dtoa_r+0x9f8>
 800adfe:	6871      	ldr	r1, [r6, #4]
 800ae00:	4620      	mov	r0, r4
 800ae02:	f000 f91b 	bl	800b03c <_Balloc>
 800ae06:	6932      	ldr	r2, [r6, #16]
 800ae08:	3202      	adds	r2, #2
 800ae0a:	4605      	mov	r5, r0
 800ae0c:	0092      	lsls	r2, r2, #2
 800ae0e:	f106 010c 	add.w	r1, r6, #12
 800ae12:	300c      	adds	r0, #12
 800ae14:	f7fe fe28 	bl	8009a68 <memcpy>
 800ae18:	2201      	movs	r2, #1
 800ae1a:	4629      	mov	r1, r5
 800ae1c:	4620      	mov	r0, r4
 800ae1e:	f000 facf 	bl	800b3c0 <__lshift>
 800ae22:	9b00      	ldr	r3, [sp, #0]
 800ae24:	f8cd b014 	str.w	fp, [sp, #20]
 800ae28:	f003 0301 	and.w	r3, r3, #1
 800ae2c:	46b1      	mov	r9, r6
 800ae2e:	9307      	str	r3, [sp, #28]
 800ae30:	4606      	mov	r6, r0
 800ae32:	4639      	mov	r1, r7
 800ae34:	9804      	ldr	r0, [sp, #16]
 800ae36:	f7ff faa7 	bl	800a388 <quorem>
 800ae3a:	4649      	mov	r1, r9
 800ae3c:	4605      	mov	r5, r0
 800ae3e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ae42:	9804      	ldr	r0, [sp, #16]
 800ae44:	f000 fb10 	bl	800b468 <__mcmp>
 800ae48:	4632      	mov	r2, r6
 800ae4a:	9000      	str	r0, [sp, #0]
 800ae4c:	4639      	mov	r1, r7
 800ae4e:	4620      	mov	r0, r4
 800ae50:	f000 fb24 	bl	800b49c <__mdiff>
 800ae54:	68c3      	ldr	r3, [r0, #12]
 800ae56:	4602      	mov	r2, r0
 800ae58:	bb03      	cbnz	r3, 800ae9c <_dtoa_r+0x9fc>
 800ae5a:	4601      	mov	r1, r0
 800ae5c:	9008      	str	r0, [sp, #32]
 800ae5e:	9804      	ldr	r0, [sp, #16]
 800ae60:	f000 fb02 	bl	800b468 <__mcmp>
 800ae64:	9a08      	ldr	r2, [sp, #32]
 800ae66:	4603      	mov	r3, r0
 800ae68:	4611      	mov	r1, r2
 800ae6a:	4620      	mov	r0, r4
 800ae6c:	9308      	str	r3, [sp, #32]
 800ae6e:	f000 f919 	bl	800b0a4 <_Bfree>
 800ae72:	9b08      	ldr	r3, [sp, #32]
 800ae74:	b9a3      	cbnz	r3, 800aea0 <_dtoa_r+0xa00>
 800ae76:	9a06      	ldr	r2, [sp, #24]
 800ae78:	b992      	cbnz	r2, 800aea0 <_dtoa_r+0xa00>
 800ae7a:	9a07      	ldr	r2, [sp, #28]
 800ae7c:	b982      	cbnz	r2, 800aea0 <_dtoa_r+0xa00>
 800ae7e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ae82:	d029      	beq.n	800aed8 <_dtoa_r+0xa38>
 800ae84:	9b00      	ldr	r3, [sp, #0]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	dd01      	ble.n	800ae8e <_dtoa_r+0x9ee>
 800ae8a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800ae8e:	9b05      	ldr	r3, [sp, #20]
 800ae90:	1c5d      	adds	r5, r3, #1
 800ae92:	f883 8000 	strb.w	r8, [r3]
 800ae96:	e782      	b.n	800ad9e <_dtoa_r+0x8fe>
 800ae98:	4630      	mov	r0, r6
 800ae9a:	e7c2      	b.n	800ae22 <_dtoa_r+0x982>
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	e7e3      	b.n	800ae68 <_dtoa_r+0x9c8>
 800aea0:	9a00      	ldr	r2, [sp, #0]
 800aea2:	2a00      	cmp	r2, #0
 800aea4:	db04      	blt.n	800aeb0 <_dtoa_r+0xa10>
 800aea6:	d125      	bne.n	800aef4 <_dtoa_r+0xa54>
 800aea8:	9a06      	ldr	r2, [sp, #24]
 800aeaa:	bb1a      	cbnz	r2, 800aef4 <_dtoa_r+0xa54>
 800aeac:	9a07      	ldr	r2, [sp, #28]
 800aeae:	bb0a      	cbnz	r2, 800aef4 <_dtoa_r+0xa54>
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	ddec      	ble.n	800ae8e <_dtoa_r+0x9ee>
 800aeb4:	2201      	movs	r2, #1
 800aeb6:	9904      	ldr	r1, [sp, #16]
 800aeb8:	4620      	mov	r0, r4
 800aeba:	f000 fa81 	bl	800b3c0 <__lshift>
 800aebe:	4639      	mov	r1, r7
 800aec0:	9004      	str	r0, [sp, #16]
 800aec2:	f000 fad1 	bl	800b468 <__mcmp>
 800aec6:	2800      	cmp	r0, #0
 800aec8:	dc03      	bgt.n	800aed2 <_dtoa_r+0xa32>
 800aeca:	d1e0      	bne.n	800ae8e <_dtoa_r+0x9ee>
 800aecc:	f018 0f01 	tst.w	r8, #1
 800aed0:	d0dd      	beq.n	800ae8e <_dtoa_r+0x9ee>
 800aed2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800aed6:	d1d8      	bne.n	800ae8a <_dtoa_r+0x9ea>
 800aed8:	9b05      	ldr	r3, [sp, #20]
 800aeda:	9a05      	ldr	r2, [sp, #20]
 800aedc:	1c5d      	adds	r5, r3, #1
 800aede:	2339      	movs	r3, #57	; 0x39
 800aee0:	7013      	strb	r3, [r2, #0]
 800aee2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800aee6:	2b39      	cmp	r3, #57	; 0x39
 800aee8:	f105 32ff 	add.w	r2, r5, #4294967295
 800aeec:	d04f      	beq.n	800af8e <_dtoa_r+0xaee>
 800aeee:	3301      	adds	r3, #1
 800aef0:	7013      	strb	r3, [r2, #0]
 800aef2:	e754      	b.n	800ad9e <_dtoa_r+0x8fe>
 800aef4:	9a05      	ldr	r2, [sp, #20]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	f102 0501 	add.w	r5, r2, #1
 800aefc:	dd06      	ble.n	800af0c <_dtoa_r+0xa6c>
 800aefe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800af02:	d0e9      	beq.n	800aed8 <_dtoa_r+0xa38>
 800af04:	f108 0801 	add.w	r8, r8, #1
 800af08:	9b05      	ldr	r3, [sp, #20]
 800af0a:	e7c2      	b.n	800ae92 <_dtoa_r+0x9f2>
 800af0c:	9a02      	ldr	r2, [sp, #8]
 800af0e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800af12:	eba5 030b 	sub.w	r3, r5, fp
 800af16:	4293      	cmp	r3, r2
 800af18:	d021      	beq.n	800af5e <_dtoa_r+0xabe>
 800af1a:	2300      	movs	r3, #0
 800af1c:	220a      	movs	r2, #10
 800af1e:	9904      	ldr	r1, [sp, #16]
 800af20:	4620      	mov	r0, r4
 800af22:	f000 f8d6 	bl	800b0d2 <__multadd>
 800af26:	45b1      	cmp	r9, r6
 800af28:	9004      	str	r0, [sp, #16]
 800af2a:	f04f 0300 	mov.w	r3, #0
 800af2e:	f04f 020a 	mov.w	r2, #10
 800af32:	4649      	mov	r1, r9
 800af34:	4620      	mov	r0, r4
 800af36:	d105      	bne.n	800af44 <_dtoa_r+0xaa4>
 800af38:	f000 f8cb 	bl	800b0d2 <__multadd>
 800af3c:	4681      	mov	r9, r0
 800af3e:	4606      	mov	r6, r0
 800af40:	9505      	str	r5, [sp, #20]
 800af42:	e776      	b.n	800ae32 <_dtoa_r+0x992>
 800af44:	f000 f8c5 	bl	800b0d2 <__multadd>
 800af48:	4631      	mov	r1, r6
 800af4a:	4681      	mov	r9, r0
 800af4c:	2300      	movs	r3, #0
 800af4e:	220a      	movs	r2, #10
 800af50:	4620      	mov	r0, r4
 800af52:	f000 f8be 	bl	800b0d2 <__multadd>
 800af56:	4606      	mov	r6, r0
 800af58:	e7f2      	b.n	800af40 <_dtoa_r+0xaa0>
 800af5a:	f04f 0900 	mov.w	r9, #0
 800af5e:	2201      	movs	r2, #1
 800af60:	9904      	ldr	r1, [sp, #16]
 800af62:	4620      	mov	r0, r4
 800af64:	f000 fa2c 	bl	800b3c0 <__lshift>
 800af68:	4639      	mov	r1, r7
 800af6a:	9004      	str	r0, [sp, #16]
 800af6c:	f000 fa7c 	bl	800b468 <__mcmp>
 800af70:	2800      	cmp	r0, #0
 800af72:	dcb6      	bgt.n	800aee2 <_dtoa_r+0xa42>
 800af74:	d102      	bne.n	800af7c <_dtoa_r+0xadc>
 800af76:	f018 0f01 	tst.w	r8, #1
 800af7a:	d1b2      	bne.n	800aee2 <_dtoa_r+0xa42>
 800af7c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800af80:	2b30      	cmp	r3, #48	; 0x30
 800af82:	f105 32ff 	add.w	r2, r5, #4294967295
 800af86:	f47f af0a 	bne.w	800ad9e <_dtoa_r+0x8fe>
 800af8a:	4615      	mov	r5, r2
 800af8c:	e7f6      	b.n	800af7c <_dtoa_r+0xadc>
 800af8e:	4593      	cmp	fp, r2
 800af90:	d105      	bne.n	800af9e <_dtoa_r+0xafe>
 800af92:	2331      	movs	r3, #49	; 0x31
 800af94:	f10a 0a01 	add.w	sl, sl, #1
 800af98:	f88b 3000 	strb.w	r3, [fp]
 800af9c:	e6ff      	b.n	800ad9e <_dtoa_r+0x8fe>
 800af9e:	4615      	mov	r5, r2
 800afa0:	e79f      	b.n	800aee2 <_dtoa_r+0xa42>
 800afa2:	f8df b064 	ldr.w	fp, [pc, #100]	; 800b008 <_dtoa_r+0xb68>
 800afa6:	e007      	b.n	800afb8 <_dtoa_r+0xb18>
 800afa8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800afaa:	f8df b060 	ldr.w	fp, [pc, #96]	; 800b00c <_dtoa_r+0xb6c>
 800afae:	b11b      	cbz	r3, 800afb8 <_dtoa_r+0xb18>
 800afb0:	f10b 0308 	add.w	r3, fp, #8
 800afb4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800afb6:	6013      	str	r3, [r2, #0]
 800afb8:	4658      	mov	r0, fp
 800afba:	b017      	add	sp, #92	; 0x5c
 800afbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afc0:	9b06      	ldr	r3, [sp, #24]
 800afc2:	2b01      	cmp	r3, #1
 800afc4:	f77f ae35 	ble.w	800ac32 <_dtoa_r+0x792>
 800afc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800afca:	9307      	str	r3, [sp, #28]
 800afcc:	e649      	b.n	800ac62 <_dtoa_r+0x7c2>
 800afce:	9b02      	ldr	r3, [sp, #8]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	dc03      	bgt.n	800afdc <_dtoa_r+0xb3c>
 800afd4:	9b06      	ldr	r3, [sp, #24]
 800afd6:	2b02      	cmp	r3, #2
 800afd8:	f73f aecc 	bgt.w	800ad74 <_dtoa_r+0x8d4>
 800afdc:	465d      	mov	r5, fp
 800afde:	4639      	mov	r1, r7
 800afe0:	9804      	ldr	r0, [sp, #16]
 800afe2:	f7ff f9d1 	bl	800a388 <quorem>
 800afe6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800afea:	f805 8b01 	strb.w	r8, [r5], #1
 800afee:	9a02      	ldr	r2, [sp, #8]
 800aff0:	eba5 030b 	sub.w	r3, r5, fp
 800aff4:	429a      	cmp	r2, r3
 800aff6:	ddb0      	ble.n	800af5a <_dtoa_r+0xaba>
 800aff8:	2300      	movs	r3, #0
 800affa:	220a      	movs	r2, #10
 800affc:	9904      	ldr	r1, [sp, #16]
 800affe:	4620      	mov	r0, r4
 800b000:	f000 f867 	bl	800b0d2 <__multadd>
 800b004:	9004      	str	r0, [sp, #16]
 800b006:	e7ea      	b.n	800afde <_dtoa_r+0xb3e>
 800b008:	0800cf6c 	.word	0x0800cf6c
 800b00c:	0800cf90 	.word	0x0800cf90

0800b010 <_localeconv_r>:
 800b010:	4b04      	ldr	r3, [pc, #16]	; (800b024 <_localeconv_r+0x14>)
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	6a18      	ldr	r0, [r3, #32]
 800b016:	4b04      	ldr	r3, [pc, #16]	; (800b028 <_localeconv_r+0x18>)
 800b018:	2800      	cmp	r0, #0
 800b01a:	bf08      	it	eq
 800b01c:	4618      	moveq	r0, r3
 800b01e:	30f0      	adds	r0, #240	; 0xf0
 800b020:	4770      	bx	lr
 800b022:	bf00      	nop
 800b024:	2000000c 	.word	0x2000000c
 800b028:	20000070 	.word	0x20000070

0800b02c <malloc>:
 800b02c:	4b02      	ldr	r3, [pc, #8]	; (800b038 <malloc+0xc>)
 800b02e:	4601      	mov	r1, r0
 800b030:	6818      	ldr	r0, [r3, #0]
 800b032:	f000 bb3b 	b.w	800b6ac <_malloc_r>
 800b036:	bf00      	nop
 800b038:	2000000c 	.word	0x2000000c

0800b03c <_Balloc>:
 800b03c:	b570      	push	{r4, r5, r6, lr}
 800b03e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b040:	4604      	mov	r4, r0
 800b042:	460e      	mov	r6, r1
 800b044:	b93d      	cbnz	r5, 800b056 <_Balloc+0x1a>
 800b046:	2010      	movs	r0, #16
 800b048:	f7ff fff0 	bl	800b02c <malloc>
 800b04c:	6260      	str	r0, [r4, #36]	; 0x24
 800b04e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b052:	6005      	str	r5, [r0, #0]
 800b054:	60c5      	str	r5, [r0, #12]
 800b056:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b058:	68eb      	ldr	r3, [r5, #12]
 800b05a:	b183      	cbz	r3, 800b07e <_Balloc+0x42>
 800b05c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b05e:	68db      	ldr	r3, [r3, #12]
 800b060:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b064:	b9b8      	cbnz	r0, 800b096 <_Balloc+0x5a>
 800b066:	2101      	movs	r1, #1
 800b068:	fa01 f506 	lsl.w	r5, r1, r6
 800b06c:	1d6a      	adds	r2, r5, #5
 800b06e:	0092      	lsls	r2, r2, #2
 800b070:	4620      	mov	r0, r4
 800b072:	f000 fabf 	bl	800b5f4 <_calloc_r>
 800b076:	b160      	cbz	r0, 800b092 <_Balloc+0x56>
 800b078:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800b07c:	e00e      	b.n	800b09c <_Balloc+0x60>
 800b07e:	2221      	movs	r2, #33	; 0x21
 800b080:	2104      	movs	r1, #4
 800b082:	4620      	mov	r0, r4
 800b084:	f000 fab6 	bl	800b5f4 <_calloc_r>
 800b088:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b08a:	60e8      	str	r0, [r5, #12]
 800b08c:	68db      	ldr	r3, [r3, #12]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d1e4      	bne.n	800b05c <_Balloc+0x20>
 800b092:	2000      	movs	r0, #0
 800b094:	bd70      	pop	{r4, r5, r6, pc}
 800b096:	6802      	ldr	r2, [r0, #0]
 800b098:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b09c:	2300      	movs	r3, #0
 800b09e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b0a2:	e7f7      	b.n	800b094 <_Balloc+0x58>

0800b0a4 <_Bfree>:
 800b0a4:	b570      	push	{r4, r5, r6, lr}
 800b0a6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b0a8:	4606      	mov	r6, r0
 800b0aa:	460d      	mov	r5, r1
 800b0ac:	b93c      	cbnz	r4, 800b0be <_Bfree+0x1a>
 800b0ae:	2010      	movs	r0, #16
 800b0b0:	f7ff ffbc 	bl	800b02c <malloc>
 800b0b4:	6270      	str	r0, [r6, #36]	; 0x24
 800b0b6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b0ba:	6004      	str	r4, [r0, #0]
 800b0bc:	60c4      	str	r4, [r0, #12]
 800b0be:	b13d      	cbz	r5, 800b0d0 <_Bfree+0x2c>
 800b0c0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b0c2:	686a      	ldr	r2, [r5, #4]
 800b0c4:	68db      	ldr	r3, [r3, #12]
 800b0c6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b0ca:	6029      	str	r1, [r5, #0]
 800b0cc:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b0d0:	bd70      	pop	{r4, r5, r6, pc}

0800b0d2 <__multadd>:
 800b0d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0d6:	690d      	ldr	r5, [r1, #16]
 800b0d8:	461f      	mov	r7, r3
 800b0da:	4606      	mov	r6, r0
 800b0dc:	460c      	mov	r4, r1
 800b0de:	f101 0c14 	add.w	ip, r1, #20
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	f8dc 0000 	ldr.w	r0, [ip]
 800b0e8:	b281      	uxth	r1, r0
 800b0ea:	fb02 7101 	mla	r1, r2, r1, r7
 800b0ee:	0c0f      	lsrs	r7, r1, #16
 800b0f0:	0c00      	lsrs	r0, r0, #16
 800b0f2:	fb02 7000 	mla	r0, r2, r0, r7
 800b0f6:	b289      	uxth	r1, r1
 800b0f8:	3301      	adds	r3, #1
 800b0fa:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b0fe:	429d      	cmp	r5, r3
 800b100:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b104:	f84c 1b04 	str.w	r1, [ip], #4
 800b108:	dcec      	bgt.n	800b0e4 <__multadd+0x12>
 800b10a:	b1d7      	cbz	r7, 800b142 <__multadd+0x70>
 800b10c:	68a3      	ldr	r3, [r4, #8]
 800b10e:	42ab      	cmp	r3, r5
 800b110:	dc12      	bgt.n	800b138 <__multadd+0x66>
 800b112:	6861      	ldr	r1, [r4, #4]
 800b114:	4630      	mov	r0, r6
 800b116:	3101      	adds	r1, #1
 800b118:	f7ff ff90 	bl	800b03c <_Balloc>
 800b11c:	6922      	ldr	r2, [r4, #16]
 800b11e:	3202      	adds	r2, #2
 800b120:	f104 010c 	add.w	r1, r4, #12
 800b124:	4680      	mov	r8, r0
 800b126:	0092      	lsls	r2, r2, #2
 800b128:	300c      	adds	r0, #12
 800b12a:	f7fe fc9d 	bl	8009a68 <memcpy>
 800b12e:	4621      	mov	r1, r4
 800b130:	4630      	mov	r0, r6
 800b132:	f7ff ffb7 	bl	800b0a4 <_Bfree>
 800b136:	4644      	mov	r4, r8
 800b138:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b13c:	3501      	adds	r5, #1
 800b13e:	615f      	str	r7, [r3, #20]
 800b140:	6125      	str	r5, [r4, #16]
 800b142:	4620      	mov	r0, r4
 800b144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b148 <__hi0bits>:
 800b148:	0c02      	lsrs	r2, r0, #16
 800b14a:	0412      	lsls	r2, r2, #16
 800b14c:	4603      	mov	r3, r0
 800b14e:	b9b2      	cbnz	r2, 800b17e <__hi0bits+0x36>
 800b150:	0403      	lsls	r3, r0, #16
 800b152:	2010      	movs	r0, #16
 800b154:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b158:	bf04      	itt	eq
 800b15a:	021b      	lsleq	r3, r3, #8
 800b15c:	3008      	addeq	r0, #8
 800b15e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b162:	bf04      	itt	eq
 800b164:	011b      	lsleq	r3, r3, #4
 800b166:	3004      	addeq	r0, #4
 800b168:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b16c:	bf04      	itt	eq
 800b16e:	009b      	lsleq	r3, r3, #2
 800b170:	3002      	addeq	r0, #2
 800b172:	2b00      	cmp	r3, #0
 800b174:	db06      	blt.n	800b184 <__hi0bits+0x3c>
 800b176:	005b      	lsls	r3, r3, #1
 800b178:	d503      	bpl.n	800b182 <__hi0bits+0x3a>
 800b17a:	3001      	adds	r0, #1
 800b17c:	4770      	bx	lr
 800b17e:	2000      	movs	r0, #0
 800b180:	e7e8      	b.n	800b154 <__hi0bits+0xc>
 800b182:	2020      	movs	r0, #32
 800b184:	4770      	bx	lr

0800b186 <__lo0bits>:
 800b186:	6803      	ldr	r3, [r0, #0]
 800b188:	f013 0207 	ands.w	r2, r3, #7
 800b18c:	4601      	mov	r1, r0
 800b18e:	d00b      	beq.n	800b1a8 <__lo0bits+0x22>
 800b190:	07da      	lsls	r2, r3, #31
 800b192:	d423      	bmi.n	800b1dc <__lo0bits+0x56>
 800b194:	0798      	lsls	r0, r3, #30
 800b196:	bf49      	itett	mi
 800b198:	085b      	lsrmi	r3, r3, #1
 800b19a:	089b      	lsrpl	r3, r3, #2
 800b19c:	2001      	movmi	r0, #1
 800b19e:	600b      	strmi	r3, [r1, #0]
 800b1a0:	bf5c      	itt	pl
 800b1a2:	600b      	strpl	r3, [r1, #0]
 800b1a4:	2002      	movpl	r0, #2
 800b1a6:	4770      	bx	lr
 800b1a8:	b298      	uxth	r0, r3
 800b1aa:	b9a8      	cbnz	r0, 800b1d8 <__lo0bits+0x52>
 800b1ac:	0c1b      	lsrs	r3, r3, #16
 800b1ae:	2010      	movs	r0, #16
 800b1b0:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b1b4:	bf04      	itt	eq
 800b1b6:	0a1b      	lsreq	r3, r3, #8
 800b1b8:	3008      	addeq	r0, #8
 800b1ba:	071a      	lsls	r2, r3, #28
 800b1bc:	bf04      	itt	eq
 800b1be:	091b      	lsreq	r3, r3, #4
 800b1c0:	3004      	addeq	r0, #4
 800b1c2:	079a      	lsls	r2, r3, #30
 800b1c4:	bf04      	itt	eq
 800b1c6:	089b      	lsreq	r3, r3, #2
 800b1c8:	3002      	addeq	r0, #2
 800b1ca:	07da      	lsls	r2, r3, #31
 800b1cc:	d402      	bmi.n	800b1d4 <__lo0bits+0x4e>
 800b1ce:	085b      	lsrs	r3, r3, #1
 800b1d0:	d006      	beq.n	800b1e0 <__lo0bits+0x5a>
 800b1d2:	3001      	adds	r0, #1
 800b1d4:	600b      	str	r3, [r1, #0]
 800b1d6:	4770      	bx	lr
 800b1d8:	4610      	mov	r0, r2
 800b1da:	e7e9      	b.n	800b1b0 <__lo0bits+0x2a>
 800b1dc:	2000      	movs	r0, #0
 800b1de:	4770      	bx	lr
 800b1e0:	2020      	movs	r0, #32
 800b1e2:	4770      	bx	lr

0800b1e4 <__i2b>:
 800b1e4:	b510      	push	{r4, lr}
 800b1e6:	460c      	mov	r4, r1
 800b1e8:	2101      	movs	r1, #1
 800b1ea:	f7ff ff27 	bl	800b03c <_Balloc>
 800b1ee:	2201      	movs	r2, #1
 800b1f0:	6144      	str	r4, [r0, #20]
 800b1f2:	6102      	str	r2, [r0, #16]
 800b1f4:	bd10      	pop	{r4, pc}

0800b1f6 <__multiply>:
 800b1f6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1fa:	4614      	mov	r4, r2
 800b1fc:	690a      	ldr	r2, [r1, #16]
 800b1fe:	6923      	ldr	r3, [r4, #16]
 800b200:	429a      	cmp	r2, r3
 800b202:	bfb8      	it	lt
 800b204:	460b      	movlt	r3, r1
 800b206:	4688      	mov	r8, r1
 800b208:	bfbc      	itt	lt
 800b20a:	46a0      	movlt	r8, r4
 800b20c:	461c      	movlt	r4, r3
 800b20e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b212:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b216:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b21a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b21e:	eb07 0609 	add.w	r6, r7, r9
 800b222:	42b3      	cmp	r3, r6
 800b224:	bfb8      	it	lt
 800b226:	3101      	addlt	r1, #1
 800b228:	f7ff ff08 	bl	800b03c <_Balloc>
 800b22c:	f100 0514 	add.w	r5, r0, #20
 800b230:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b234:	462b      	mov	r3, r5
 800b236:	2200      	movs	r2, #0
 800b238:	4573      	cmp	r3, lr
 800b23a:	d316      	bcc.n	800b26a <__multiply+0x74>
 800b23c:	f104 0214 	add.w	r2, r4, #20
 800b240:	f108 0114 	add.w	r1, r8, #20
 800b244:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b248:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b24c:	9300      	str	r3, [sp, #0]
 800b24e:	9b00      	ldr	r3, [sp, #0]
 800b250:	9201      	str	r2, [sp, #4]
 800b252:	4293      	cmp	r3, r2
 800b254:	d80c      	bhi.n	800b270 <__multiply+0x7a>
 800b256:	2e00      	cmp	r6, #0
 800b258:	dd03      	ble.n	800b262 <__multiply+0x6c>
 800b25a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d05d      	beq.n	800b31e <__multiply+0x128>
 800b262:	6106      	str	r6, [r0, #16]
 800b264:	b003      	add	sp, #12
 800b266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b26a:	f843 2b04 	str.w	r2, [r3], #4
 800b26e:	e7e3      	b.n	800b238 <__multiply+0x42>
 800b270:	f8b2 b000 	ldrh.w	fp, [r2]
 800b274:	f1bb 0f00 	cmp.w	fp, #0
 800b278:	d023      	beq.n	800b2c2 <__multiply+0xcc>
 800b27a:	4689      	mov	r9, r1
 800b27c:	46ac      	mov	ip, r5
 800b27e:	f04f 0800 	mov.w	r8, #0
 800b282:	f859 4b04 	ldr.w	r4, [r9], #4
 800b286:	f8dc a000 	ldr.w	sl, [ip]
 800b28a:	b2a3      	uxth	r3, r4
 800b28c:	fa1f fa8a 	uxth.w	sl, sl
 800b290:	fb0b a303 	mla	r3, fp, r3, sl
 800b294:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b298:	f8dc 4000 	ldr.w	r4, [ip]
 800b29c:	4443      	add	r3, r8
 800b29e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b2a2:	fb0b 840a 	mla	r4, fp, sl, r8
 800b2a6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b2aa:	46e2      	mov	sl, ip
 800b2ac:	b29b      	uxth	r3, r3
 800b2ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b2b2:	454f      	cmp	r7, r9
 800b2b4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b2b8:	f84a 3b04 	str.w	r3, [sl], #4
 800b2bc:	d82b      	bhi.n	800b316 <__multiply+0x120>
 800b2be:	f8cc 8004 	str.w	r8, [ip, #4]
 800b2c2:	9b01      	ldr	r3, [sp, #4]
 800b2c4:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b2c8:	3204      	adds	r2, #4
 800b2ca:	f1ba 0f00 	cmp.w	sl, #0
 800b2ce:	d020      	beq.n	800b312 <__multiply+0x11c>
 800b2d0:	682b      	ldr	r3, [r5, #0]
 800b2d2:	4689      	mov	r9, r1
 800b2d4:	46a8      	mov	r8, r5
 800b2d6:	f04f 0b00 	mov.w	fp, #0
 800b2da:	f8b9 c000 	ldrh.w	ip, [r9]
 800b2de:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b2e2:	fb0a 440c 	mla	r4, sl, ip, r4
 800b2e6:	445c      	add	r4, fp
 800b2e8:	46c4      	mov	ip, r8
 800b2ea:	b29b      	uxth	r3, r3
 800b2ec:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b2f0:	f84c 3b04 	str.w	r3, [ip], #4
 800b2f4:	f859 3b04 	ldr.w	r3, [r9], #4
 800b2f8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b2fc:	0c1b      	lsrs	r3, r3, #16
 800b2fe:	fb0a b303 	mla	r3, sl, r3, fp
 800b302:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b306:	454f      	cmp	r7, r9
 800b308:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b30c:	d805      	bhi.n	800b31a <__multiply+0x124>
 800b30e:	f8c8 3004 	str.w	r3, [r8, #4]
 800b312:	3504      	adds	r5, #4
 800b314:	e79b      	b.n	800b24e <__multiply+0x58>
 800b316:	46d4      	mov	ip, sl
 800b318:	e7b3      	b.n	800b282 <__multiply+0x8c>
 800b31a:	46e0      	mov	r8, ip
 800b31c:	e7dd      	b.n	800b2da <__multiply+0xe4>
 800b31e:	3e01      	subs	r6, #1
 800b320:	e799      	b.n	800b256 <__multiply+0x60>
	...

0800b324 <__pow5mult>:
 800b324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b328:	4615      	mov	r5, r2
 800b32a:	f012 0203 	ands.w	r2, r2, #3
 800b32e:	4606      	mov	r6, r0
 800b330:	460f      	mov	r7, r1
 800b332:	d007      	beq.n	800b344 <__pow5mult+0x20>
 800b334:	3a01      	subs	r2, #1
 800b336:	4c21      	ldr	r4, [pc, #132]	; (800b3bc <__pow5mult+0x98>)
 800b338:	2300      	movs	r3, #0
 800b33a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b33e:	f7ff fec8 	bl	800b0d2 <__multadd>
 800b342:	4607      	mov	r7, r0
 800b344:	10ad      	asrs	r5, r5, #2
 800b346:	d035      	beq.n	800b3b4 <__pow5mult+0x90>
 800b348:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b34a:	b93c      	cbnz	r4, 800b35c <__pow5mult+0x38>
 800b34c:	2010      	movs	r0, #16
 800b34e:	f7ff fe6d 	bl	800b02c <malloc>
 800b352:	6270      	str	r0, [r6, #36]	; 0x24
 800b354:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b358:	6004      	str	r4, [r0, #0]
 800b35a:	60c4      	str	r4, [r0, #12]
 800b35c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b360:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b364:	b94c      	cbnz	r4, 800b37a <__pow5mult+0x56>
 800b366:	f240 2171 	movw	r1, #625	; 0x271
 800b36a:	4630      	mov	r0, r6
 800b36c:	f7ff ff3a 	bl	800b1e4 <__i2b>
 800b370:	2300      	movs	r3, #0
 800b372:	f8c8 0008 	str.w	r0, [r8, #8]
 800b376:	4604      	mov	r4, r0
 800b378:	6003      	str	r3, [r0, #0]
 800b37a:	f04f 0800 	mov.w	r8, #0
 800b37e:	07eb      	lsls	r3, r5, #31
 800b380:	d50a      	bpl.n	800b398 <__pow5mult+0x74>
 800b382:	4639      	mov	r1, r7
 800b384:	4622      	mov	r2, r4
 800b386:	4630      	mov	r0, r6
 800b388:	f7ff ff35 	bl	800b1f6 <__multiply>
 800b38c:	4639      	mov	r1, r7
 800b38e:	4681      	mov	r9, r0
 800b390:	4630      	mov	r0, r6
 800b392:	f7ff fe87 	bl	800b0a4 <_Bfree>
 800b396:	464f      	mov	r7, r9
 800b398:	106d      	asrs	r5, r5, #1
 800b39a:	d00b      	beq.n	800b3b4 <__pow5mult+0x90>
 800b39c:	6820      	ldr	r0, [r4, #0]
 800b39e:	b938      	cbnz	r0, 800b3b0 <__pow5mult+0x8c>
 800b3a0:	4622      	mov	r2, r4
 800b3a2:	4621      	mov	r1, r4
 800b3a4:	4630      	mov	r0, r6
 800b3a6:	f7ff ff26 	bl	800b1f6 <__multiply>
 800b3aa:	6020      	str	r0, [r4, #0]
 800b3ac:	f8c0 8000 	str.w	r8, [r0]
 800b3b0:	4604      	mov	r4, r0
 800b3b2:	e7e4      	b.n	800b37e <__pow5mult+0x5a>
 800b3b4:	4638      	mov	r0, r7
 800b3b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3ba:	bf00      	nop
 800b3bc:	0800d090 	.word	0x0800d090

0800b3c0 <__lshift>:
 800b3c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3c4:	460c      	mov	r4, r1
 800b3c6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b3ca:	6923      	ldr	r3, [r4, #16]
 800b3cc:	6849      	ldr	r1, [r1, #4]
 800b3ce:	eb0a 0903 	add.w	r9, sl, r3
 800b3d2:	68a3      	ldr	r3, [r4, #8]
 800b3d4:	4607      	mov	r7, r0
 800b3d6:	4616      	mov	r6, r2
 800b3d8:	f109 0501 	add.w	r5, r9, #1
 800b3dc:	42ab      	cmp	r3, r5
 800b3de:	db32      	blt.n	800b446 <__lshift+0x86>
 800b3e0:	4638      	mov	r0, r7
 800b3e2:	f7ff fe2b 	bl	800b03c <_Balloc>
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	4680      	mov	r8, r0
 800b3ea:	f100 0114 	add.w	r1, r0, #20
 800b3ee:	461a      	mov	r2, r3
 800b3f0:	4553      	cmp	r3, sl
 800b3f2:	db2b      	blt.n	800b44c <__lshift+0x8c>
 800b3f4:	6920      	ldr	r0, [r4, #16]
 800b3f6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b3fa:	f104 0314 	add.w	r3, r4, #20
 800b3fe:	f016 021f 	ands.w	r2, r6, #31
 800b402:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b406:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b40a:	d025      	beq.n	800b458 <__lshift+0x98>
 800b40c:	f1c2 0e20 	rsb	lr, r2, #32
 800b410:	2000      	movs	r0, #0
 800b412:	681e      	ldr	r6, [r3, #0]
 800b414:	468a      	mov	sl, r1
 800b416:	4096      	lsls	r6, r2
 800b418:	4330      	orrs	r0, r6
 800b41a:	f84a 0b04 	str.w	r0, [sl], #4
 800b41e:	f853 0b04 	ldr.w	r0, [r3], #4
 800b422:	459c      	cmp	ip, r3
 800b424:	fa20 f00e 	lsr.w	r0, r0, lr
 800b428:	d814      	bhi.n	800b454 <__lshift+0x94>
 800b42a:	6048      	str	r0, [r1, #4]
 800b42c:	b108      	cbz	r0, 800b432 <__lshift+0x72>
 800b42e:	f109 0502 	add.w	r5, r9, #2
 800b432:	3d01      	subs	r5, #1
 800b434:	4638      	mov	r0, r7
 800b436:	f8c8 5010 	str.w	r5, [r8, #16]
 800b43a:	4621      	mov	r1, r4
 800b43c:	f7ff fe32 	bl	800b0a4 <_Bfree>
 800b440:	4640      	mov	r0, r8
 800b442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b446:	3101      	adds	r1, #1
 800b448:	005b      	lsls	r3, r3, #1
 800b44a:	e7c7      	b.n	800b3dc <__lshift+0x1c>
 800b44c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b450:	3301      	adds	r3, #1
 800b452:	e7cd      	b.n	800b3f0 <__lshift+0x30>
 800b454:	4651      	mov	r1, sl
 800b456:	e7dc      	b.n	800b412 <__lshift+0x52>
 800b458:	3904      	subs	r1, #4
 800b45a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b45e:	f841 2f04 	str.w	r2, [r1, #4]!
 800b462:	459c      	cmp	ip, r3
 800b464:	d8f9      	bhi.n	800b45a <__lshift+0x9a>
 800b466:	e7e4      	b.n	800b432 <__lshift+0x72>

0800b468 <__mcmp>:
 800b468:	6903      	ldr	r3, [r0, #16]
 800b46a:	690a      	ldr	r2, [r1, #16]
 800b46c:	1a9b      	subs	r3, r3, r2
 800b46e:	b530      	push	{r4, r5, lr}
 800b470:	d10c      	bne.n	800b48c <__mcmp+0x24>
 800b472:	0092      	lsls	r2, r2, #2
 800b474:	3014      	adds	r0, #20
 800b476:	3114      	adds	r1, #20
 800b478:	1884      	adds	r4, r0, r2
 800b47a:	4411      	add	r1, r2
 800b47c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b480:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b484:	4295      	cmp	r5, r2
 800b486:	d003      	beq.n	800b490 <__mcmp+0x28>
 800b488:	d305      	bcc.n	800b496 <__mcmp+0x2e>
 800b48a:	2301      	movs	r3, #1
 800b48c:	4618      	mov	r0, r3
 800b48e:	bd30      	pop	{r4, r5, pc}
 800b490:	42a0      	cmp	r0, r4
 800b492:	d3f3      	bcc.n	800b47c <__mcmp+0x14>
 800b494:	e7fa      	b.n	800b48c <__mcmp+0x24>
 800b496:	f04f 33ff 	mov.w	r3, #4294967295
 800b49a:	e7f7      	b.n	800b48c <__mcmp+0x24>

0800b49c <__mdiff>:
 800b49c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4a0:	460d      	mov	r5, r1
 800b4a2:	4607      	mov	r7, r0
 800b4a4:	4611      	mov	r1, r2
 800b4a6:	4628      	mov	r0, r5
 800b4a8:	4614      	mov	r4, r2
 800b4aa:	f7ff ffdd 	bl	800b468 <__mcmp>
 800b4ae:	1e06      	subs	r6, r0, #0
 800b4b0:	d108      	bne.n	800b4c4 <__mdiff+0x28>
 800b4b2:	4631      	mov	r1, r6
 800b4b4:	4638      	mov	r0, r7
 800b4b6:	f7ff fdc1 	bl	800b03c <_Balloc>
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b4c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4c4:	bfa4      	itt	ge
 800b4c6:	4623      	movge	r3, r4
 800b4c8:	462c      	movge	r4, r5
 800b4ca:	4638      	mov	r0, r7
 800b4cc:	6861      	ldr	r1, [r4, #4]
 800b4ce:	bfa6      	itte	ge
 800b4d0:	461d      	movge	r5, r3
 800b4d2:	2600      	movge	r6, #0
 800b4d4:	2601      	movlt	r6, #1
 800b4d6:	f7ff fdb1 	bl	800b03c <_Balloc>
 800b4da:	692b      	ldr	r3, [r5, #16]
 800b4dc:	60c6      	str	r6, [r0, #12]
 800b4de:	6926      	ldr	r6, [r4, #16]
 800b4e0:	f105 0914 	add.w	r9, r5, #20
 800b4e4:	f104 0214 	add.w	r2, r4, #20
 800b4e8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b4ec:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b4f0:	f100 0514 	add.w	r5, r0, #20
 800b4f4:	f04f 0e00 	mov.w	lr, #0
 800b4f8:	f852 ab04 	ldr.w	sl, [r2], #4
 800b4fc:	f859 4b04 	ldr.w	r4, [r9], #4
 800b500:	fa1e f18a 	uxtah	r1, lr, sl
 800b504:	b2a3      	uxth	r3, r4
 800b506:	1ac9      	subs	r1, r1, r3
 800b508:	0c23      	lsrs	r3, r4, #16
 800b50a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800b50e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b512:	b289      	uxth	r1, r1
 800b514:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b518:	45c8      	cmp	r8, r9
 800b51a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b51e:	4694      	mov	ip, r2
 800b520:	f845 3b04 	str.w	r3, [r5], #4
 800b524:	d8e8      	bhi.n	800b4f8 <__mdiff+0x5c>
 800b526:	45bc      	cmp	ip, r7
 800b528:	d304      	bcc.n	800b534 <__mdiff+0x98>
 800b52a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800b52e:	b183      	cbz	r3, 800b552 <__mdiff+0xb6>
 800b530:	6106      	str	r6, [r0, #16]
 800b532:	e7c5      	b.n	800b4c0 <__mdiff+0x24>
 800b534:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b538:	fa1e f381 	uxtah	r3, lr, r1
 800b53c:	141a      	asrs	r2, r3, #16
 800b53e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b542:	b29b      	uxth	r3, r3
 800b544:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b548:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800b54c:	f845 3b04 	str.w	r3, [r5], #4
 800b550:	e7e9      	b.n	800b526 <__mdiff+0x8a>
 800b552:	3e01      	subs	r6, #1
 800b554:	e7e9      	b.n	800b52a <__mdiff+0x8e>

0800b556 <__d2b>:
 800b556:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b55a:	460e      	mov	r6, r1
 800b55c:	2101      	movs	r1, #1
 800b55e:	ec59 8b10 	vmov	r8, r9, d0
 800b562:	4615      	mov	r5, r2
 800b564:	f7ff fd6a 	bl	800b03c <_Balloc>
 800b568:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b56c:	4607      	mov	r7, r0
 800b56e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b572:	bb34      	cbnz	r4, 800b5c2 <__d2b+0x6c>
 800b574:	9301      	str	r3, [sp, #4]
 800b576:	f1b8 0300 	subs.w	r3, r8, #0
 800b57a:	d027      	beq.n	800b5cc <__d2b+0x76>
 800b57c:	a802      	add	r0, sp, #8
 800b57e:	f840 3d08 	str.w	r3, [r0, #-8]!
 800b582:	f7ff fe00 	bl	800b186 <__lo0bits>
 800b586:	9900      	ldr	r1, [sp, #0]
 800b588:	b1f0      	cbz	r0, 800b5c8 <__d2b+0x72>
 800b58a:	9a01      	ldr	r2, [sp, #4]
 800b58c:	f1c0 0320 	rsb	r3, r0, #32
 800b590:	fa02 f303 	lsl.w	r3, r2, r3
 800b594:	430b      	orrs	r3, r1
 800b596:	40c2      	lsrs	r2, r0
 800b598:	617b      	str	r3, [r7, #20]
 800b59a:	9201      	str	r2, [sp, #4]
 800b59c:	9b01      	ldr	r3, [sp, #4]
 800b59e:	61bb      	str	r3, [r7, #24]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	bf14      	ite	ne
 800b5a4:	2102      	movne	r1, #2
 800b5a6:	2101      	moveq	r1, #1
 800b5a8:	6139      	str	r1, [r7, #16]
 800b5aa:	b1c4      	cbz	r4, 800b5de <__d2b+0x88>
 800b5ac:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b5b0:	4404      	add	r4, r0
 800b5b2:	6034      	str	r4, [r6, #0]
 800b5b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b5b8:	6028      	str	r0, [r5, #0]
 800b5ba:	4638      	mov	r0, r7
 800b5bc:	b003      	add	sp, #12
 800b5be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b5c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b5c6:	e7d5      	b.n	800b574 <__d2b+0x1e>
 800b5c8:	6179      	str	r1, [r7, #20]
 800b5ca:	e7e7      	b.n	800b59c <__d2b+0x46>
 800b5cc:	a801      	add	r0, sp, #4
 800b5ce:	f7ff fdda 	bl	800b186 <__lo0bits>
 800b5d2:	9b01      	ldr	r3, [sp, #4]
 800b5d4:	617b      	str	r3, [r7, #20]
 800b5d6:	2101      	movs	r1, #1
 800b5d8:	6139      	str	r1, [r7, #16]
 800b5da:	3020      	adds	r0, #32
 800b5dc:	e7e5      	b.n	800b5aa <__d2b+0x54>
 800b5de:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b5e2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b5e6:	6030      	str	r0, [r6, #0]
 800b5e8:	6918      	ldr	r0, [r3, #16]
 800b5ea:	f7ff fdad 	bl	800b148 <__hi0bits>
 800b5ee:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b5f2:	e7e1      	b.n	800b5b8 <__d2b+0x62>

0800b5f4 <_calloc_r>:
 800b5f4:	b538      	push	{r3, r4, r5, lr}
 800b5f6:	fb02 f401 	mul.w	r4, r2, r1
 800b5fa:	4621      	mov	r1, r4
 800b5fc:	f000 f856 	bl	800b6ac <_malloc_r>
 800b600:	4605      	mov	r5, r0
 800b602:	b118      	cbz	r0, 800b60c <_calloc_r+0x18>
 800b604:	4622      	mov	r2, r4
 800b606:	2100      	movs	r1, #0
 800b608:	f7fe fa39 	bl	8009a7e <memset>
 800b60c:	4628      	mov	r0, r5
 800b60e:	bd38      	pop	{r3, r4, r5, pc}

0800b610 <_free_r>:
 800b610:	b538      	push	{r3, r4, r5, lr}
 800b612:	4605      	mov	r5, r0
 800b614:	2900      	cmp	r1, #0
 800b616:	d045      	beq.n	800b6a4 <_free_r+0x94>
 800b618:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b61c:	1f0c      	subs	r4, r1, #4
 800b61e:	2b00      	cmp	r3, #0
 800b620:	bfb8      	it	lt
 800b622:	18e4      	addlt	r4, r4, r3
 800b624:	f000 fa29 	bl	800ba7a <__malloc_lock>
 800b628:	4a1f      	ldr	r2, [pc, #124]	; (800b6a8 <_free_r+0x98>)
 800b62a:	6813      	ldr	r3, [r2, #0]
 800b62c:	4610      	mov	r0, r2
 800b62e:	b933      	cbnz	r3, 800b63e <_free_r+0x2e>
 800b630:	6063      	str	r3, [r4, #4]
 800b632:	6014      	str	r4, [r2, #0]
 800b634:	4628      	mov	r0, r5
 800b636:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b63a:	f000 ba1f 	b.w	800ba7c <__malloc_unlock>
 800b63e:	42a3      	cmp	r3, r4
 800b640:	d90c      	bls.n	800b65c <_free_r+0x4c>
 800b642:	6821      	ldr	r1, [r4, #0]
 800b644:	1862      	adds	r2, r4, r1
 800b646:	4293      	cmp	r3, r2
 800b648:	bf04      	itt	eq
 800b64a:	681a      	ldreq	r2, [r3, #0]
 800b64c:	685b      	ldreq	r3, [r3, #4]
 800b64e:	6063      	str	r3, [r4, #4]
 800b650:	bf04      	itt	eq
 800b652:	1852      	addeq	r2, r2, r1
 800b654:	6022      	streq	r2, [r4, #0]
 800b656:	6004      	str	r4, [r0, #0]
 800b658:	e7ec      	b.n	800b634 <_free_r+0x24>
 800b65a:	4613      	mov	r3, r2
 800b65c:	685a      	ldr	r2, [r3, #4]
 800b65e:	b10a      	cbz	r2, 800b664 <_free_r+0x54>
 800b660:	42a2      	cmp	r2, r4
 800b662:	d9fa      	bls.n	800b65a <_free_r+0x4a>
 800b664:	6819      	ldr	r1, [r3, #0]
 800b666:	1858      	adds	r0, r3, r1
 800b668:	42a0      	cmp	r0, r4
 800b66a:	d10b      	bne.n	800b684 <_free_r+0x74>
 800b66c:	6820      	ldr	r0, [r4, #0]
 800b66e:	4401      	add	r1, r0
 800b670:	1858      	adds	r0, r3, r1
 800b672:	4282      	cmp	r2, r0
 800b674:	6019      	str	r1, [r3, #0]
 800b676:	d1dd      	bne.n	800b634 <_free_r+0x24>
 800b678:	6810      	ldr	r0, [r2, #0]
 800b67a:	6852      	ldr	r2, [r2, #4]
 800b67c:	605a      	str	r2, [r3, #4]
 800b67e:	4401      	add	r1, r0
 800b680:	6019      	str	r1, [r3, #0]
 800b682:	e7d7      	b.n	800b634 <_free_r+0x24>
 800b684:	d902      	bls.n	800b68c <_free_r+0x7c>
 800b686:	230c      	movs	r3, #12
 800b688:	602b      	str	r3, [r5, #0]
 800b68a:	e7d3      	b.n	800b634 <_free_r+0x24>
 800b68c:	6820      	ldr	r0, [r4, #0]
 800b68e:	1821      	adds	r1, r4, r0
 800b690:	428a      	cmp	r2, r1
 800b692:	bf04      	itt	eq
 800b694:	6811      	ldreq	r1, [r2, #0]
 800b696:	6852      	ldreq	r2, [r2, #4]
 800b698:	6062      	str	r2, [r4, #4]
 800b69a:	bf04      	itt	eq
 800b69c:	1809      	addeq	r1, r1, r0
 800b69e:	6021      	streq	r1, [r4, #0]
 800b6a0:	605c      	str	r4, [r3, #4]
 800b6a2:	e7c7      	b.n	800b634 <_free_r+0x24>
 800b6a4:	bd38      	pop	{r3, r4, r5, pc}
 800b6a6:	bf00      	nop
 800b6a8:	20000220 	.word	0x20000220

0800b6ac <_malloc_r>:
 800b6ac:	b570      	push	{r4, r5, r6, lr}
 800b6ae:	1ccd      	adds	r5, r1, #3
 800b6b0:	f025 0503 	bic.w	r5, r5, #3
 800b6b4:	3508      	adds	r5, #8
 800b6b6:	2d0c      	cmp	r5, #12
 800b6b8:	bf38      	it	cc
 800b6ba:	250c      	movcc	r5, #12
 800b6bc:	2d00      	cmp	r5, #0
 800b6be:	4606      	mov	r6, r0
 800b6c0:	db01      	blt.n	800b6c6 <_malloc_r+0x1a>
 800b6c2:	42a9      	cmp	r1, r5
 800b6c4:	d903      	bls.n	800b6ce <_malloc_r+0x22>
 800b6c6:	230c      	movs	r3, #12
 800b6c8:	6033      	str	r3, [r6, #0]
 800b6ca:	2000      	movs	r0, #0
 800b6cc:	bd70      	pop	{r4, r5, r6, pc}
 800b6ce:	f000 f9d4 	bl	800ba7a <__malloc_lock>
 800b6d2:	4a21      	ldr	r2, [pc, #132]	; (800b758 <_malloc_r+0xac>)
 800b6d4:	6814      	ldr	r4, [r2, #0]
 800b6d6:	4621      	mov	r1, r4
 800b6d8:	b991      	cbnz	r1, 800b700 <_malloc_r+0x54>
 800b6da:	4c20      	ldr	r4, [pc, #128]	; (800b75c <_malloc_r+0xb0>)
 800b6dc:	6823      	ldr	r3, [r4, #0]
 800b6de:	b91b      	cbnz	r3, 800b6e8 <_malloc_r+0x3c>
 800b6e0:	4630      	mov	r0, r6
 800b6e2:	f000 f98f 	bl	800ba04 <_sbrk_r>
 800b6e6:	6020      	str	r0, [r4, #0]
 800b6e8:	4629      	mov	r1, r5
 800b6ea:	4630      	mov	r0, r6
 800b6ec:	f000 f98a 	bl	800ba04 <_sbrk_r>
 800b6f0:	1c43      	adds	r3, r0, #1
 800b6f2:	d124      	bne.n	800b73e <_malloc_r+0x92>
 800b6f4:	230c      	movs	r3, #12
 800b6f6:	6033      	str	r3, [r6, #0]
 800b6f8:	4630      	mov	r0, r6
 800b6fa:	f000 f9bf 	bl	800ba7c <__malloc_unlock>
 800b6fe:	e7e4      	b.n	800b6ca <_malloc_r+0x1e>
 800b700:	680b      	ldr	r3, [r1, #0]
 800b702:	1b5b      	subs	r3, r3, r5
 800b704:	d418      	bmi.n	800b738 <_malloc_r+0x8c>
 800b706:	2b0b      	cmp	r3, #11
 800b708:	d90f      	bls.n	800b72a <_malloc_r+0x7e>
 800b70a:	600b      	str	r3, [r1, #0]
 800b70c:	50cd      	str	r5, [r1, r3]
 800b70e:	18cc      	adds	r4, r1, r3
 800b710:	4630      	mov	r0, r6
 800b712:	f000 f9b3 	bl	800ba7c <__malloc_unlock>
 800b716:	f104 000b 	add.w	r0, r4, #11
 800b71a:	1d23      	adds	r3, r4, #4
 800b71c:	f020 0007 	bic.w	r0, r0, #7
 800b720:	1ac3      	subs	r3, r0, r3
 800b722:	d0d3      	beq.n	800b6cc <_malloc_r+0x20>
 800b724:	425a      	negs	r2, r3
 800b726:	50e2      	str	r2, [r4, r3]
 800b728:	e7d0      	b.n	800b6cc <_malloc_r+0x20>
 800b72a:	428c      	cmp	r4, r1
 800b72c:	684b      	ldr	r3, [r1, #4]
 800b72e:	bf16      	itet	ne
 800b730:	6063      	strne	r3, [r4, #4]
 800b732:	6013      	streq	r3, [r2, #0]
 800b734:	460c      	movne	r4, r1
 800b736:	e7eb      	b.n	800b710 <_malloc_r+0x64>
 800b738:	460c      	mov	r4, r1
 800b73a:	6849      	ldr	r1, [r1, #4]
 800b73c:	e7cc      	b.n	800b6d8 <_malloc_r+0x2c>
 800b73e:	1cc4      	adds	r4, r0, #3
 800b740:	f024 0403 	bic.w	r4, r4, #3
 800b744:	42a0      	cmp	r0, r4
 800b746:	d005      	beq.n	800b754 <_malloc_r+0xa8>
 800b748:	1a21      	subs	r1, r4, r0
 800b74a:	4630      	mov	r0, r6
 800b74c:	f000 f95a 	bl	800ba04 <_sbrk_r>
 800b750:	3001      	adds	r0, #1
 800b752:	d0cf      	beq.n	800b6f4 <_malloc_r+0x48>
 800b754:	6025      	str	r5, [r4, #0]
 800b756:	e7db      	b.n	800b710 <_malloc_r+0x64>
 800b758:	20000220 	.word	0x20000220
 800b75c:	20000224 	.word	0x20000224

0800b760 <__ssputs_r>:
 800b760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b764:	688e      	ldr	r6, [r1, #8]
 800b766:	429e      	cmp	r6, r3
 800b768:	4682      	mov	sl, r0
 800b76a:	460c      	mov	r4, r1
 800b76c:	4690      	mov	r8, r2
 800b76e:	4699      	mov	r9, r3
 800b770:	d837      	bhi.n	800b7e2 <__ssputs_r+0x82>
 800b772:	898a      	ldrh	r2, [r1, #12]
 800b774:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b778:	d031      	beq.n	800b7de <__ssputs_r+0x7e>
 800b77a:	6825      	ldr	r5, [r4, #0]
 800b77c:	6909      	ldr	r1, [r1, #16]
 800b77e:	1a6f      	subs	r7, r5, r1
 800b780:	6965      	ldr	r5, [r4, #20]
 800b782:	2302      	movs	r3, #2
 800b784:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b788:	fb95 f5f3 	sdiv	r5, r5, r3
 800b78c:	f109 0301 	add.w	r3, r9, #1
 800b790:	443b      	add	r3, r7
 800b792:	429d      	cmp	r5, r3
 800b794:	bf38      	it	cc
 800b796:	461d      	movcc	r5, r3
 800b798:	0553      	lsls	r3, r2, #21
 800b79a:	d530      	bpl.n	800b7fe <__ssputs_r+0x9e>
 800b79c:	4629      	mov	r1, r5
 800b79e:	f7ff ff85 	bl	800b6ac <_malloc_r>
 800b7a2:	4606      	mov	r6, r0
 800b7a4:	b950      	cbnz	r0, 800b7bc <__ssputs_r+0x5c>
 800b7a6:	230c      	movs	r3, #12
 800b7a8:	f8ca 3000 	str.w	r3, [sl]
 800b7ac:	89a3      	ldrh	r3, [r4, #12]
 800b7ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7b2:	81a3      	strh	r3, [r4, #12]
 800b7b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b7b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7bc:	463a      	mov	r2, r7
 800b7be:	6921      	ldr	r1, [r4, #16]
 800b7c0:	f7fe f952 	bl	8009a68 <memcpy>
 800b7c4:	89a3      	ldrh	r3, [r4, #12]
 800b7c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b7ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7ce:	81a3      	strh	r3, [r4, #12]
 800b7d0:	6126      	str	r6, [r4, #16]
 800b7d2:	6165      	str	r5, [r4, #20]
 800b7d4:	443e      	add	r6, r7
 800b7d6:	1bed      	subs	r5, r5, r7
 800b7d8:	6026      	str	r6, [r4, #0]
 800b7da:	60a5      	str	r5, [r4, #8]
 800b7dc:	464e      	mov	r6, r9
 800b7de:	454e      	cmp	r6, r9
 800b7e0:	d900      	bls.n	800b7e4 <__ssputs_r+0x84>
 800b7e2:	464e      	mov	r6, r9
 800b7e4:	4632      	mov	r2, r6
 800b7e6:	4641      	mov	r1, r8
 800b7e8:	6820      	ldr	r0, [r4, #0]
 800b7ea:	f000 f92d 	bl	800ba48 <memmove>
 800b7ee:	68a3      	ldr	r3, [r4, #8]
 800b7f0:	1b9b      	subs	r3, r3, r6
 800b7f2:	60a3      	str	r3, [r4, #8]
 800b7f4:	6823      	ldr	r3, [r4, #0]
 800b7f6:	441e      	add	r6, r3
 800b7f8:	6026      	str	r6, [r4, #0]
 800b7fa:	2000      	movs	r0, #0
 800b7fc:	e7dc      	b.n	800b7b8 <__ssputs_r+0x58>
 800b7fe:	462a      	mov	r2, r5
 800b800:	f000 f93d 	bl	800ba7e <_realloc_r>
 800b804:	4606      	mov	r6, r0
 800b806:	2800      	cmp	r0, #0
 800b808:	d1e2      	bne.n	800b7d0 <__ssputs_r+0x70>
 800b80a:	6921      	ldr	r1, [r4, #16]
 800b80c:	4650      	mov	r0, sl
 800b80e:	f7ff feff 	bl	800b610 <_free_r>
 800b812:	e7c8      	b.n	800b7a6 <__ssputs_r+0x46>

0800b814 <_svfiprintf_r>:
 800b814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b818:	461d      	mov	r5, r3
 800b81a:	898b      	ldrh	r3, [r1, #12]
 800b81c:	061f      	lsls	r7, r3, #24
 800b81e:	b09d      	sub	sp, #116	; 0x74
 800b820:	4680      	mov	r8, r0
 800b822:	460c      	mov	r4, r1
 800b824:	4616      	mov	r6, r2
 800b826:	d50f      	bpl.n	800b848 <_svfiprintf_r+0x34>
 800b828:	690b      	ldr	r3, [r1, #16]
 800b82a:	b96b      	cbnz	r3, 800b848 <_svfiprintf_r+0x34>
 800b82c:	2140      	movs	r1, #64	; 0x40
 800b82e:	f7ff ff3d 	bl	800b6ac <_malloc_r>
 800b832:	6020      	str	r0, [r4, #0]
 800b834:	6120      	str	r0, [r4, #16]
 800b836:	b928      	cbnz	r0, 800b844 <_svfiprintf_r+0x30>
 800b838:	230c      	movs	r3, #12
 800b83a:	f8c8 3000 	str.w	r3, [r8]
 800b83e:	f04f 30ff 	mov.w	r0, #4294967295
 800b842:	e0c8      	b.n	800b9d6 <_svfiprintf_r+0x1c2>
 800b844:	2340      	movs	r3, #64	; 0x40
 800b846:	6163      	str	r3, [r4, #20]
 800b848:	2300      	movs	r3, #0
 800b84a:	9309      	str	r3, [sp, #36]	; 0x24
 800b84c:	2320      	movs	r3, #32
 800b84e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b852:	2330      	movs	r3, #48	; 0x30
 800b854:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b858:	9503      	str	r5, [sp, #12]
 800b85a:	f04f 0b01 	mov.w	fp, #1
 800b85e:	4637      	mov	r7, r6
 800b860:	463d      	mov	r5, r7
 800b862:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b866:	b10b      	cbz	r3, 800b86c <_svfiprintf_r+0x58>
 800b868:	2b25      	cmp	r3, #37	; 0x25
 800b86a:	d13e      	bne.n	800b8ea <_svfiprintf_r+0xd6>
 800b86c:	ebb7 0a06 	subs.w	sl, r7, r6
 800b870:	d00b      	beq.n	800b88a <_svfiprintf_r+0x76>
 800b872:	4653      	mov	r3, sl
 800b874:	4632      	mov	r2, r6
 800b876:	4621      	mov	r1, r4
 800b878:	4640      	mov	r0, r8
 800b87a:	f7ff ff71 	bl	800b760 <__ssputs_r>
 800b87e:	3001      	adds	r0, #1
 800b880:	f000 80a4 	beq.w	800b9cc <_svfiprintf_r+0x1b8>
 800b884:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b886:	4453      	add	r3, sl
 800b888:	9309      	str	r3, [sp, #36]	; 0x24
 800b88a:	783b      	ldrb	r3, [r7, #0]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	f000 809d 	beq.w	800b9cc <_svfiprintf_r+0x1b8>
 800b892:	2300      	movs	r3, #0
 800b894:	f04f 32ff 	mov.w	r2, #4294967295
 800b898:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b89c:	9304      	str	r3, [sp, #16]
 800b89e:	9307      	str	r3, [sp, #28]
 800b8a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b8a4:	931a      	str	r3, [sp, #104]	; 0x68
 800b8a6:	462f      	mov	r7, r5
 800b8a8:	2205      	movs	r2, #5
 800b8aa:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b8ae:	4850      	ldr	r0, [pc, #320]	; (800b9f0 <_svfiprintf_r+0x1dc>)
 800b8b0:	f7f4 fc8e 	bl	80001d0 <memchr>
 800b8b4:	9b04      	ldr	r3, [sp, #16]
 800b8b6:	b9d0      	cbnz	r0, 800b8ee <_svfiprintf_r+0xda>
 800b8b8:	06d9      	lsls	r1, r3, #27
 800b8ba:	bf44      	itt	mi
 800b8bc:	2220      	movmi	r2, #32
 800b8be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b8c2:	071a      	lsls	r2, r3, #28
 800b8c4:	bf44      	itt	mi
 800b8c6:	222b      	movmi	r2, #43	; 0x2b
 800b8c8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b8cc:	782a      	ldrb	r2, [r5, #0]
 800b8ce:	2a2a      	cmp	r2, #42	; 0x2a
 800b8d0:	d015      	beq.n	800b8fe <_svfiprintf_r+0xea>
 800b8d2:	9a07      	ldr	r2, [sp, #28]
 800b8d4:	462f      	mov	r7, r5
 800b8d6:	2000      	movs	r0, #0
 800b8d8:	250a      	movs	r5, #10
 800b8da:	4639      	mov	r1, r7
 800b8dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8e0:	3b30      	subs	r3, #48	; 0x30
 800b8e2:	2b09      	cmp	r3, #9
 800b8e4:	d94d      	bls.n	800b982 <_svfiprintf_r+0x16e>
 800b8e6:	b1b8      	cbz	r0, 800b918 <_svfiprintf_r+0x104>
 800b8e8:	e00f      	b.n	800b90a <_svfiprintf_r+0xf6>
 800b8ea:	462f      	mov	r7, r5
 800b8ec:	e7b8      	b.n	800b860 <_svfiprintf_r+0x4c>
 800b8ee:	4a40      	ldr	r2, [pc, #256]	; (800b9f0 <_svfiprintf_r+0x1dc>)
 800b8f0:	1a80      	subs	r0, r0, r2
 800b8f2:	fa0b f000 	lsl.w	r0, fp, r0
 800b8f6:	4318      	orrs	r0, r3
 800b8f8:	9004      	str	r0, [sp, #16]
 800b8fa:	463d      	mov	r5, r7
 800b8fc:	e7d3      	b.n	800b8a6 <_svfiprintf_r+0x92>
 800b8fe:	9a03      	ldr	r2, [sp, #12]
 800b900:	1d11      	adds	r1, r2, #4
 800b902:	6812      	ldr	r2, [r2, #0]
 800b904:	9103      	str	r1, [sp, #12]
 800b906:	2a00      	cmp	r2, #0
 800b908:	db01      	blt.n	800b90e <_svfiprintf_r+0xfa>
 800b90a:	9207      	str	r2, [sp, #28]
 800b90c:	e004      	b.n	800b918 <_svfiprintf_r+0x104>
 800b90e:	4252      	negs	r2, r2
 800b910:	f043 0302 	orr.w	r3, r3, #2
 800b914:	9207      	str	r2, [sp, #28]
 800b916:	9304      	str	r3, [sp, #16]
 800b918:	783b      	ldrb	r3, [r7, #0]
 800b91a:	2b2e      	cmp	r3, #46	; 0x2e
 800b91c:	d10c      	bne.n	800b938 <_svfiprintf_r+0x124>
 800b91e:	787b      	ldrb	r3, [r7, #1]
 800b920:	2b2a      	cmp	r3, #42	; 0x2a
 800b922:	d133      	bne.n	800b98c <_svfiprintf_r+0x178>
 800b924:	9b03      	ldr	r3, [sp, #12]
 800b926:	1d1a      	adds	r2, r3, #4
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	9203      	str	r2, [sp, #12]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	bfb8      	it	lt
 800b930:	f04f 33ff 	movlt.w	r3, #4294967295
 800b934:	3702      	adds	r7, #2
 800b936:	9305      	str	r3, [sp, #20]
 800b938:	4d2e      	ldr	r5, [pc, #184]	; (800b9f4 <_svfiprintf_r+0x1e0>)
 800b93a:	7839      	ldrb	r1, [r7, #0]
 800b93c:	2203      	movs	r2, #3
 800b93e:	4628      	mov	r0, r5
 800b940:	f7f4 fc46 	bl	80001d0 <memchr>
 800b944:	b138      	cbz	r0, 800b956 <_svfiprintf_r+0x142>
 800b946:	2340      	movs	r3, #64	; 0x40
 800b948:	1b40      	subs	r0, r0, r5
 800b94a:	fa03 f000 	lsl.w	r0, r3, r0
 800b94e:	9b04      	ldr	r3, [sp, #16]
 800b950:	4303      	orrs	r3, r0
 800b952:	3701      	adds	r7, #1
 800b954:	9304      	str	r3, [sp, #16]
 800b956:	7839      	ldrb	r1, [r7, #0]
 800b958:	4827      	ldr	r0, [pc, #156]	; (800b9f8 <_svfiprintf_r+0x1e4>)
 800b95a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b95e:	2206      	movs	r2, #6
 800b960:	1c7e      	adds	r6, r7, #1
 800b962:	f7f4 fc35 	bl	80001d0 <memchr>
 800b966:	2800      	cmp	r0, #0
 800b968:	d038      	beq.n	800b9dc <_svfiprintf_r+0x1c8>
 800b96a:	4b24      	ldr	r3, [pc, #144]	; (800b9fc <_svfiprintf_r+0x1e8>)
 800b96c:	bb13      	cbnz	r3, 800b9b4 <_svfiprintf_r+0x1a0>
 800b96e:	9b03      	ldr	r3, [sp, #12]
 800b970:	3307      	adds	r3, #7
 800b972:	f023 0307 	bic.w	r3, r3, #7
 800b976:	3308      	adds	r3, #8
 800b978:	9303      	str	r3, [sp, #12]
 800b97a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b97c:	444b      	add	r3, r9
 800b97e:	9309      	str	r3, [sp, #36]	; 0x24
 800b980:	e76d      	b.n	800b85e <_svfiprintf_r+0x4a>
 800b982:	fb05 3202 	mla	r2, r5, r2, r3
 800b986:	2001      	movs	r0, #1
 800b988:	460f      	mov	r7, r1
 800b98a:	e7a6      	b.n	800b8da <_svfiprintf_r+0xc6>
 800b98c:	2300      	movs	r3, #0
 800b98e:	3701      	adds	r7, #1
 800b990:	9305      	str	r3, [sp, #20]
 800b992:	4619      	mov	r1, r3
 800b994:	250a      	movs	r5, #10
 800b996:	4638      	mov	r0, r7
 800b998:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b99c:	3a30      	subs	r2, #48	; 0x30
 800b99e:	2a09      	cmp	r2, #9
 800b9a0:	d903      	bls.n	800b9aa <_svfiprintf_r+0x196>
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d0c8      	beq.n	800b938 <_svfiprintf_r+0x124>
 800b9a6:	9105      	str	r1, [sp, #20]
 800b9a8:	e7c6      	b.n	800b938 <_svfiprintf_r+0x124>
 800b9aa:	fb05 2101 	mla	r1, r5, r1, r2
 800b9ae:	2301      	movs	r3, #1
 800b9b0:	4607      	mov	r7, r0
 800b9b2:	e7f0      	b.n	800b996 <_svfiprintf_r+0x182>
 800b9b4:	ab03      	add	r3, sp, #12
 800b9b6:	9300      	str	r3, [sp, #0]
 800b9b8:	4622      	mov	r2, r4
 800b9ba:	4b11      	ldr	r3, [pc, #68]	; (800ba00 <_svfiprintf_r+0x1ec>)
 800b9bc:	a904      	add	r1, sp, #16
 800b9be:	4640      	mov	r0, r8
 800b9c0:	f7fe f8fa 	bl	8009bb8 <_printf_float>
 800b9c4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b9c8:	4681      	mov	r9, r0
 800b9ca:	d1d6      	bne.n	800b97a <_svfiprintf_r+0x166>
 800b9cc:	89a3      	ldrh	r3, [r4, #12]
 800b9ce:	065b      	lsls	r3, r3, #25
 800b9d0:	f53f af35 	bmi.w	800b83e <_svfiprintf_r+0x2a>
 800b9d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b9d6:	b01d      	add	sp, #116	; 0x74
 800b9d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9dc:	ab03      	add	r3, sp, #12
 800b9de:	9300      	str	r3, [sp, #0]
 800b9e0:	4622      	mov	r2, r4
 800b9e2:	4b07      	ldr	r3, [pc, #28]	; (800ba00 <_svfiprintf_r+0x1ec>)
 800b9e4:	a904      	add	r1, sp, #16
 800b9e6:	4640      	mov	r0, r8
 800b9e8:	f7fe fb9c 	bl	800a124 <_printf_i>
 800b9ec:	e7ea      	b.n	800b9c4 <_svfiprintf_r+0x1b0>
 800b9ee:	bf00      	nop
 800b9f0:	0800d09c 	.word	0x0800d09c
 800b9f4:	0800d0a2 	.word	0x0800d0a2
 800b9f8:	0800d0a6 	.word	0x0800d0a6
 800b9fc:	08009bb9 	.word	0x08009bb9
 800ba00:	0800b761 	.word	0x0800b761

0800ba04 <_sbrk_r>:
 800ba04:	b538      	push	{r3, r4, r5, lr}
 800ba06:	4c06      	ldr	r4, [pc, #24]	; (800ba20 <_sbrk_r+0x1c>)
 800ba08:	2300      	movs	r3, #0
 800ba0a:	4605      	mov	r5, r0
 800ba0c:	4608      	mov	r0, r1
 800ba0e:	6023      	str	r3, [r4, #0]
 800ba10:	f7f9 f84e 	bl	8004ab0 <_sbrk>
 800ba14:	1c43      	adds	r3, r0, #1
 800ba16:	d102      	bne.n	800ba1e <_sbrk_r+0x1a>
 800ba18:	6823      	ldr	r3, [r4, #0]
 800ba1a:	b103      	cbz	r3, 800ba1e <_sbrk_r+0x1a>
 800ba1c:	602b      	str	r3, [r5, #0]
 800ba1e:	bd38      	pop	{r3, r4, r5, pc}
 800ba20:	20000d44 	.word	0x20000d44

0800ba24 <__ascii_mbtowc>:
 800ba24:	b082      	sub	sp, #8
 800ba26:	b901      	cbnz	r1, 800ba2a <__ascii_mbtowc+0x6>
 800ba28:	a901      	add	r1, sp, #4
 800ba2a:	b142      	cbz	r2, 800ba3e <__ascii_mbtowc+0x1a>
 800ba2c:	b14b      	cbz	r3, 800ba42 <__ascii_mbtowc+0x1e>
 800ba2e:	7813      	ldrb	r3, [r2, #0]
 800ba30:	600b      	str	r3, [r1, #0]
 800ba32:	7812      	ldrb	r2, [r2, #0]
 800ba34:	1c10      	adds	r0, r2, #0
 800ba36:	bf18      	it	ne
 800ba38:	2001      	movne	r0, #1
 800ba3a:	b002      	add	sp, #8
 800ba3c:	4770      	bx	lr
 800ba3e:	4610      	mov	r0, r2
 800ba40:	e7fb      	b.n	800ba3a <__ascii_mbtowc+0x16>
 800ba42:	f06f 0001 	mvn.w	r0, #1
 800ba46:	e7f8      	b.n	800ba3a <__ascii_mbtowc+0x16>

0800ba48 <memmove>:
 800ba48:	4288      	cmp	r0, r1
 800ba4a:	b510      	push	{r4, lr}
 800ba4c:	eb01 0302 	add.w	r3, r1, r2
 800ba50:	d807      	bhi.n	800ba62 <memmove+0x1a>
 800ba52:	1e42      	subs	r2, r0, #1
 800ba54:	4299      	cmp	r1, r3
 800ba56:	d00a      	beq.n	800ba6e <memmove+0x26>
 800ba58:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba5c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ba60:	e7f8      	b.n	800ba54 <memmove+0xc>
 800ba62:	4283      	cmp	r3, r0
 800ba64:	d9f5      	bls.n	800ba52 <memmove+0xa>
 800ba66:	1881      	adds	r1, r0, r2
 800ba68:	1ad2      	subs	r2, r2, r3
 800ba6a:	42d3      	cmn	r3, r2
 800ba6c:	d100      	bne.n	800ba70 <memmove+0x28>
 800ba6e:	bd10      	pop	{r4, pc}
 800ba70:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ba74:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ba78:	e7f7      	b.n	800ba6a <memmove+0x22>

0800ba7a <__malloc_lock>:
 800ba7a:	4770      	bx	lr

0800ba7c <__malloc_unlock>:
 800ba7c:	4770      	bx	lr

0800ba7e <_realloc_r>:
 800ba7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba80:	4607      	mov	r7, r0
 800ba82:	4614      	mov	r4, r2
 800ba84:	460e      	mov	r6, r1
 800ba86:	b921      	cbnz	r1, 800ba92 <_realloc_r+0x14>
 800ba88:	4611      	mov	r1, r2
 800ba8a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ba8e:	f7ff be0d 	b.w	800b6ac <_malloc_r>
 800ba92:	b922      	cbnz	r2, 800ba9e <_realloc_r+0x20>
 800ba94:	f7ff fdbc 	bl	800b610 <_free_r>
 800ba98:	4625      	mov	r5, r4
 800ba9a:	4628      	mov	r0, r5
 800ba9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba9e:	f000 f821 	bl	800bae4 <_malloc_usable_size_r>
 800baa2:	42a0      	cmp	r0, r4
 800baa4:	d20f      	bcs.n	800bac6 <_realloc_r+0x48>
 800baa6:	4621      	mov	r1, r4
 800baa8:	4638      	mov	r0, r7
 800baaa:	f7ff fdff 	bl	800b6ac <_malloc_r>
 800baae:	4605      	mov	r5, r0
 800bab0:	2800      	cmp	r0, #0
 800bab2:	d0f2      	beq.n	800ba9a <_realloc_r+0x1c>
 800bab4:	4631      	mov	r1, r6
 800bab6:	4622      	mov	r2, r4
 800bab8:	f7fd ffd6 	bl	8009a68 <memcpy>
 800babc:	4631      	mov	r1, r6
 800babe:	4638      	mov	r0, r7
 800bac0:	f7ff fda6 	bl	800b610 <_free_r>
 800bac4:	e7e9      	b.n	800ba9a <_realloc_r+0x1c>
 800bac6:	4635      	mov	r5, r6
 800bac8:	e7e7      	b.n	800ba9a <_realloc_r+0x1c>

0800baca <__ascii_wctomb>:
 800baca:	b149      	cbz	r1, 800bae0 <__ascii_wctomb+0x16>
 800bacc:	2aff      	cmp	r2, #255	; 0xff
 800bace:	bf85      	ittet	hi
 800bad0:	238a      	movhi	r3, #138	; 0x8a
 800bad2:	6003      	strhi	r3, [r0, #0]
 800bad4:	700a      	strbls	r2, [r1, #0]
 800bad6:	f04f 30ff 	movhi.w	r0, #4294967295
 800bada:	bf98      	it	ls
 800badc:	2001      	movls	r0, #1
 800bade:	4770      	bx	lr
 800bae0:	4608      	mov	r0, r1
 800bae2:	4770      	bx	lr

0800bae4 <_malloc_usable_size_r>:
 800bae4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bae8:	1f18      	subs	r0, r3, #4
 800baea:	2b00      	cmp	r3, #0
 800baec:	bfbc      	itt	lt
 800baee:	580b      	ldrlt	r3, [r1, r0]
 800baf0:	18c0      	addlt	r0, r0, r3
 800baf2:	4770      	bx	lr
 800baf4:	0000      	movs	r0, r0
	...

0800baf8 <cos>:
 800baf8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bafa:	ec51 0b10 	vmov	r0, r1, d0
 800bafe:	4a1e      	ldr	r2, [pc, #120]	; (800bb78 <cos+0x80>)
 800bb00:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bb04:	4293      	cmp	r3, r2
 800bb06:	dc06      	bgt.n	800bb16 <cos+0x1e>
 800bb08:	ed9f 1b19 	vldr	d1, [pc, #100]	; 800bb70 <cos+0x78>
 800bb0c:	f000 fb80 	bl	800c210 <__kernel_cos>
 800bb10:	ec51 0b10 	vmov	r0, r1, d0
 800bb14:	e007      	b.n	800bb26 <cos+0x2e>
 800bb16:	4a19      	ldr	r2, [pc, #100]	; (800bb7c <cos+0x84>)
 800bb18:	4293      	cmp	r3, r2
 800bb1a:	dd09      	ble.n	800bb30 <cos+0x38>
 800bb1c:	ee10 2a10 	vmov	r2, s0
 800bb20:	460b      	mov	r3, r1
 800bb22:	f7f4 fbb1 	bl	8000288 <__aeabi_dsub>
 800bb26:	ec41 0b10 	vmov	d0, r0, r1
 800bb2a:	b005      	add	sp, #20
 800bb2c:	f85d fb04 	ldr.w	pc, [sp], #4
 800bb30:	4668      	mov	r0, sp
 800bb32:	f000 f8c9 	bl	800bcc8 <__ieee754_rem_pio2>
 800bb36:	f000 0003 	and.w	r0, r0, #3
 800bb3a:	2801      	cmp	r0, #1
 800bb3c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bb40:	ed9d 0b00 	vldr	d0, [sp]
 800bb44:	d007      	beq.n	800bb56 <cos+0x5e>
 800bb46:	2802      	cmp	r0, #2
 800bb48:	d00e      	beq.n	800bb68 <cos+0x70>
 800bb4a:	2800      	cmp	r0, #0
 800bb4c:	d0de      	beq.n	800bb0c <cos+0x14>
 800bb4e:	2001      	movs	r0, #1
 800bb50:	f000 ff66 	bl	800ca20 <__kernel_sin>
 800bb54:	e7dc      	b.n	800bb10 <cos+0x18>
 800bb56:	f000 ff63 	bl	800ca20 <__kernel_sin>
 800bb5a:	ec53 2b10 	vmov	r2, r3, d0
 800bb5e:	ee10 0a10 	vmov	r0, s0
 800bb62:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800bb66:	e7de      	b.n	800bb26 <cos+0x2e>
 800bb68:	f000 fb52 	bl	800c210 <__kernel_cos>
 800bb6c:	e7f5      	b.n	800bb5a <cos+0x62>
 800bb6e:	bf00      	nop
	...
 800bb78:	3fe921fb 	.word	0x3fe921fb
 800bb7c:	7fefffff 	.word	0x7fefffff

0800bb80 <sin>:
 800bb80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bb82:	ec51 0b10 	vmov	r0, r1, d0
 800bb86:	4a20      	ldr	r2, [pc, #128]	; (800bc08 <sin+0x88>)
 800bb88:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bb8c:	4293      	cmp	r3, r2
 800bb8e:	dc07      	bgt.n	800bba0 <sin+0x20>
 800bb90:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800bc00 <sin+0x80>
 800bb94:	2000      	movs	r0, #0
 800bb96:	f000 ff43 	bl	800ca20 <__kernel_sin>
 800bb9a:	ec51 0b10 	vmov	r0, r1, d0
 800bb9e:	e007      	b.n	800bbb0 <sin+0x30>
 800bba0:	4a1a      	ldr	r2, [pc, #104]	; (800bc0c <sin+0x8c>)
 800bba2:	4293      	cmp	r3, r2
 800bba4:	dd09      	ble.n	800bbba <sin+0x3a>
 800bba6:	ee10 2a10 	vmov	r2, s0
 800bbaa:	460b      	mov	r3, r1
 800bbac:	f7f4 fb6c 	bl	8000288 <__aeabi_dsub>
 800bbb0:	ec41 0b10 	vmov	d0, r0, r1
 800bbb4:	b005      	add	sp, #20
 800bbb6:	f85d fb04 	ldr.w	pc, [sp], #4
 800bbba:	4668      	mov	r0, sp
 800bbbc:	f000 f884 	bl	800bcc8 <__ieee754_rem_pio2>
 800bbc0:	f000 0003 	and.w	r0, r0, #3
 800bbc4:	2801      	cmp	r0, #1
 800bbc6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bbca:	ed9d 0b00 	vldr	d0, [sp]
 800bbce:	d004      	beq.n	800bbda <sin+0x5a>
 800bbd0:	2802      	cmp	r0, #2
 800bbd2:	d005      	beq.n	800bbe0 <sin+0x60>
 800bbd4:	b970      	cbnz	r0, 800bbf4 <sin+0x74>
 800bbd6:	2001      	movs	r0, #1
 800bbd8:	e7dd      	b.n	800bb96 <sin+0x16>
 800bbda:	f000 fb19 	bl	800c210 <__kernel_cos>
 800bbde:	e7dc      	b.n	800bb9a <sin+0x1a>
 800bbe0:	2001      	movs	r0, #1
 800bbe2:	f000 ff1d 	bl	800ca20 <__kernel_sin>
 800bbe6:	ec53 2b10 	vmov	r2, r3, d0
 800bbea:	ee10 0a10 	vmov	r0, s0
 800bbee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800bbf2:	e7dd      	b.n	800bbb0 <sin+0x30>
 800bbf4:	f000 fb0c 	bl	800c210 <__kernel_cos>
 800bbf8:	e7f5      	b.n	800bbe6 <sin+0x66>
 800bbfa:	bf00      	nop
 800bbfc:	f3af 8000 	nop.w
	...
 800bc08:	3fe921fb 	.word	0x3fe921fb
 800bc0c:	7fefffff 	.word	0x7fefffff

0800bc10 <sqrt>:
 800bc10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bc14:	ed2d 8b02 	vpush	{d8}
 800bc18:	b08b      	sub	sp, #44	; 0x2c
 800bc1a:	ec55 4b10 	vmov	r4, r5, d0
 800bc1e:	f000 fa45 	bl	800c0ac <__ieee754_sqrt>
 800bc22:	4b26      	ldr	r3, [pc, #152]	; (800bcbc <sqrt+0xac>)
 800bc24:	eeb0 8a40 	vmov.f32	s16, s0
 800bc28:	eef0 8a60 	vmov.f32	s17, s1
 800bc2c:	f993 6000 	ldrsb.w	r6, [r3]
 800bc30:	1c73      	adds	r3, r6, #1
 800bc32:	d02a      	beq.n	800bc8a <sqrt+0x7a>
 800bc34:	4622      	mov	r2, r4
 800bc36:	462b      	mov	r3, r5
 800bc38:	4620      	mov	r0, r4
 800bc3a:	4629      	mov	r1, r5
 800bc3c:	f7f4 ff76 	bl	8000b2c <__aeabi_dcmpun>
 800bc40:	4607      	mov	r7, r0
 800bc42:	bb10      	cbnz	r0, 800bc8a <sqrt+0x7a>
 800bc44:	f04f 0800 	mov.w	r8, #0
 800bc48:	f04f 0900 	mov.w	r9, #0
 800bc4c:	4642      	mov	r2, r8
 800bc4e:	464b      	mov	r3, r9
 800bc50:	4620      	mov	r0, r4
 800bc52:	4629      	mov	r1, r5
 800bc54:	f7f4 ff42 	bl	8000adc <__aeabi_dcmplt>
 800bc58:	b1b8      	cbz	r0, 800bc8a <sqrt+0x7a>
 800bc5a:	2301      	movs	r3, #1
 800bc5c:	9300      	str	r3, [sp, #0]
 800bc5e:	4b18      	ldr	r3, [pc, #96]	; (800bcc0 <sqrt+0xb0>)
 800bc60:	9301      	str	r3, [sp, #4]
 800bc62:	9708      	str	r7, [sp, #32]
 800bc64:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800bc68:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800bc6c:	b9b6      	cbnz	r6, 800bc9c <sqrt+0x8c>
 800bc6e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800bc72:	4668      	mov	r0, sp
 800bc74:	f001 f81c 	bl	800ccb0 <matherr>
 800bc78:	b1d0      	cbz	r0, 800bcb0 <sqrt+0xa0>
 800bc7a:	9b08      	ldr	r3, [sp, #32]
 800bc7c:	b11b      	cbz	r3, 800bc86 <sqrt+0x76>
 800bc7e:	f7fd fec9 	bl	8009a14 <__errno>
 800bc82:	9b08      	ldr	r3, [sp, #32]
 800bc84:	6003      	str	r3, [r0, #0]
 800bc86:	ed9d 8b06 	vldr	d8, [sp, #24]
 800bc8a:	eeb0 0a48 	vmov.f32	s0, s16
 800bc8e:	eef0 0a68 	vmov.f32	s1, s17
 800bc92:	b00b      	add	sp, #44	; 0x2c
 800bc94:	ecbd 8b02 	vpop	{d8}
 800bc98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc9c:	4642      	mov	r2, r8
 800bc9e:	464b      	mov	r3, r9
 800bca0:	4640      	mov	r0, r8
 800bca2:	4649      	mov	r1, r9
 800bca4:	f7f4 fdd2 	bl	800084c <__aeabi_ddiv>
 800bca8:	2e02      	cmp	r6, #2
 800bcaa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bcae:	d1e0      	bne.n	800bc72 <sqrt+0x62>
 800bcb0:	f7fd feb0 	bl	8009a14 <__errno>
 800bcb4:	2321      	movs	r3, #33	; 0x21
 800bcb6:	6003      	str	r3, [r0, #0]
 800bcb8:	e7df      	b.n	800bc7a <sqrt+0x6a>
 800bcba:	bf00      	nop
 800bcbc:	200001dc 	.word	0x200001dc
 800bcc0:	0800d1b8 	.word	0x0800d1b8
 800bcc4:	00000000 	.word	0x00000000

0800bcc8 <__ieee754_rem_pio2>:
 800bcc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bccc:	ec57 6b10 	vmov	r6, r7, d0
 800bcd0:	4bc3      	ldr	r3, [pc, #780]	; (800bfe0 <__ieee754_rem_pio2+0x318>)
 800bcd2:	b08d      	sub	sp, #52	; 0x34
 800bcd4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800bcd8:	4598      	cmp	r8, r3
 800bcda:	4604      	mov	r4, r0
 800bcdc:	9704      	str	r7, [sp, #16]
 800bcde:	dc07      	bgt.n	800bcf0 <__ieee754_rem_pio2+0x28>
 800bce0:	2200      	movs	r2, #0
 800bce2:	2300      	movs	r3, #0
 800bce4:	ed84 0b00 	vstr	d0, [r4]
 800bce8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800bcec:	2500      	movs	r5, #0
 800bcee:	e027      	b.n	800bd40 <__ieee754_rem_pio2+0x78>
 800bcf0:	4bbc      	ldr	r3, [pc, #752]	; (800bfe4 <__ieee754_rem_pio2+0x31c>)
 800bcf2:	4598      	cmp	r8, r3
 800bcf4:	dc75      	bgt.n	800bde2 <__ieee754_rem_pio2+0x11a>
 800bcf6:	9b04      	ldr	r3, [sp, #16]
 800bcf8:	4dbb      	ldr	r5, [pc, #748]	; (800bfe8 <__ieee754_rem_pio2+0x320>)
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	ee10 0a10 	vmov	r0, s0
 800bd00:	a3a9      	add	r3, pc, #676	; (adr r3, 800bfa8 <__ieee754_rem_pio2+0x2e0>)
 800bd02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd06:	4639      	mov	r1, r7
 800bd08:	dd36      	ble.n	800bd78 <__ieee754_rem_pio2+0xb0>
 800bd0a:	f7f4 fabd 	bl	8000288 <__aeabi_dsub>
 800bd0e:	45a8      	cmp	r8, r5
 800bd10:	4606      	mov	r6, r0
 800bd12:	460f      	mov	r7, r1
 800bd14:	d018      	beq.n	800bd48 <__ieee754_rem_pio2+0x80>
 800bd16:	a3a6      	add	r3, pc, #664	; (adr r3, 800bfb0 <__ieee754_rem_pio2+0x2e8>)
 800bd18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd1c:	f7f4 fab4 	bl	8000288 <__aeabi_dsub>
 800bd20:	4602      	mov	r2, r0
 800bd22:	460b      	mov	r3, r1
 800bd24:	e9c4 2300 	strd	r2, r3, [r4]
 800bd28:	4630      	mov	r0, r6
 800bd2a:	4639      	mov	r1, r7
 800bd2c:	f7f4 faac 	bl	8000288 <__aeabi_dsub>
 800bd30:	a39f      	add	r3, pc, #636	; (adr r3, 800bfb0 <__ieee754_rem_pio2+0x2e8>)
 800bd32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd36:	f7f4 faa7 	bl	8000288 <__aeabi_dsub>
 800bd3a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bd3e:	2501      	movs	r5, #1
 800bd40:	4628      	mov	r0, r5
 800bd42:	b00d      	add	sp, #52	; 0x34
 800bd44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd48:	a39b      	add	r3, pc, #620	; (adr r3, 800bfb8 <__ieee754_rem_pio2+0x2f0>)
 800bd4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd4e:	f7f4 fa9b 	bl	8000288 <__aeabi_dsub>
 800bd52:	a39b      	add	r3, pc, #620	; (adr r3, 800bfc0 <__ieee754_rem_pio2+0x2f8>)
 800bd54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd58:	4606      	mov	r6, r0
 800bd5a:	460f      	mov	r7, r1
 800bd5c:	f7f4 fa94 	bl	8000288 <__aeabi_dsub>
 800bd60:	4602      	mov	r2, r0
 800bd62:	460b      	mov	r3, r1
 800bd64:	e9c4 2300 	strd	r2, r3, [r4]
 800bd68:	4630      	mov	r0, r6
 800bd6a:	4639      	mov	r1, r7
 800bd6c:	f7f4 fa8c 	bl	8000288 <__aeabi_dsub>
 800bd70:	a393      	add	r3, pc, #588	; (adr r3, 800bfc0 <__ieee754_rem_pio2+0x2f8>)
 800bd72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd76:	e7de      	b.n	800bd36 <__ieee754_rem_pio2+0x6e>
 800bd78:	f7f4 fa88 	bl	800028c <__adddf3>
 800bd7c:	45a8      	cmp	r8, r5
 800bd7e:	4606      	mov	r6, r0
 800bd80:	460f      	mov	r7, r1
 800bd82:	d016      	beq.n	800bdb2 <__ieee754_rem_pio2+0xea>
 800bd84:	a38a      	add	r3, pc, #552	; (adr r3, 800bfb0 <__ieee754_rem_pio2+0x2e8>)
 800bd86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd8a:	f7f4 fa7f 	bl	800028c <__adddf3>
 800bd8e:	4602      	mov	r2, r0
 800bd90:	460b      	mov	r3, r1
 800bd92:	e9c4 2300 	strd	r2, r3, [r4]
 800bd96:	4630      	mov	r0, r6
 800bd98:	4639      	mov	r1, r7
 800bd9a:	f7f4 fa75 	bl	8000288 <__aeabi_dsub>
 800bd9e:	a384      	add	r3, pc, #528	; (adr r3, 800bfb0 <__ieee754_rem_pio2+0x2e8>)
 800bda0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda4:	f7f4 fa72 	bl	800028c <__adddf3>
 800bda8:	f04f 35ff 	mov.w	r5, #4294967295
 800bdac:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bdb0:	e7c6      	b.n	800bd40 <__ieee754_rem_pio2+0x78>
 800bdb2:	a381      	add	r3, pc, #516	; (adr r3, 800bfb8 <__ieee754_rem_pio2+0x2f0>)
 800bdb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb8:	f7f4 fa68 	bl	800028c <__adddf3>
 800bdbc:	a380      	add	r3, pc, #512	; (adr r3, 800bfc0 <__ieee754_rem_pio2+0x2f8>)
 800bdbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc2:	4606      	mov	r6, r0
 800bdc4:	460f      	mov	r7, r1
 800bdc6:	f7f4 fa61 	bl	800028c <__adddf3>
 800bdca:	4602      	mov	r2, r0
 800bdcc:	460b      	mov	r3, r1
 800bdce:	e9c4 2300 	strd	r2, r3, [r4]
 800bdd2:	4630      	mov	r0, r6
 800bdd4:	4639      	mov	r1, r7
 800bdd6:	f7f4 fa57 	bl	8000288 <__aeabi_dsub>
 800bdda:	a379      	add	r3, pc, #484	; (adr r3, 800bfc0 <__ieee754_rem_pio2+0x2f8>)
 800bddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bde0:	e7e0      	b.n	800bda4 <__ieee754_rem_pio2+0xdc>
 800bde2:	4b82      	ldr	r3, [pc, #520]	; (800bfec <__ieee754_rem_pio2+0x324>)
 800bde4:	4598      	cmp	r8, r3
 800bde6:	f300 80d0 	bgt.w	800bf8a <__ieee754_rem_pio2+0x2c2>
 800bdea:	f000 fed3 	bl	800cb94 <fabs>
 800bdee:	ec57 6b10 	vmov	r6, r7, d0
 800bdf2:	ee10 0a10 	vmov	r0, s0
 800bdf6:	a374      	add	r3, pc, #464	; (adr r3, 800bfc8 <__ieee754_rem_pio2+0x300>)
 800bdf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdfc:	4639      	mov	r1, r7
 800bdfe:	f7f4 fbfb 	bl	80005f8 <__aeabi_dmul>
 800be02:	2200      	movs	r2, #0
 800be04:	4b7a      	ldr	r3, [pc, #488]	; (800bff0 <__ieee754_rem_pio2+0x328>)
 800be06:	f7f4 fa41 	bl	800028c <__adddf3>
 800be0a:	f7f4 fea5 	bl	8000b58 <__aeabi_d2iz>
 800be0e:	4605      	mov	r5, r0
 800be10:	f7f4 fb88 	bl	8000524 <__aeabi_i2d>
 800be14:	a364      	add	r3, pc, #400	; (adr r3, 800bfa8 <__ieee754_rem_pio2+0x2e0>)
 800be16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be1e:	f7f4 fbeb 	bl	80005f8 <__aeabi_dmul>
 800be22:	4602      	mov	r2, r0
 800be24:	460b      	mov	r3, r1
 800be26:	4630      	mov	r0, r6
 800be28:	4639      	mov	r1, r7
 800be2a:	f7f4 fa2d 	bl	8000288 <__aeabi_dsub>
 800be2e:	a360      	add	r3, pc, #384	; (adr r3, 800bfb0 <__ieee754_rem_pio2+0x2e8>)
 800be30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be34:	4682      	mov	sl, r0
 800be36:	468b      	mov	fp, r1
 800be38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be3c:	f7f4 fbdc 	bl	80005f8 <__aeabi_dmul>
 800be40:	2d1f      	cmp	r5, #31
 800be42:	4606      	mov	r6, r0
 800be44:	460f      	mov	r7, r1
 800be46:	dc0c      	bgt.n	800be62 <__ieee754_rem_pio2+0x19a>
 800be48:	1e6a      	subs	r2, r5, #1
 800be4a:	4b6a      	ldr	r3, [pc, #424]	; (800bff4 <__ieee754_rem_pio2+0x32c>)
 800be4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be50:	4543      	cmp	r3, r8
 800be52:	d006      	beq.n	800be62 <__ieee754_rem_pio2+0x19a>
 800be54:	4632      	mov	r2, r6
 800be56:	463b      	mov	r3, r7
 800be58:	4650      	mov	r0, sl
 800be5a:	4659      	mov	r1, fp
 800be5c:	f7f4 fa14 	bl	8000288 <__aeabi_dsub>
 800be60:	e00e      	b.n	800be80 <__ieee754_rem_pio2+0x1b8>
 800be62:	4632      	mov	r2, r6
 800be64:	463b      	mov	r3, r7
 800be66:	4650      	mov	r0, sl
 800be68:	4659      	mov	r1, fp
 800be6a:	f7f4 fa0d 	bl	8000288 <__aeabi_dsub>
 800be6e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800be72:	9305      	str	r3, [sp, #20]
 800be74:	9a05      	ldr	r2, [sp, #20]
 800be76:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800be7a:	1ad3      	subs	r3, r2, r3
 800be7c:	2b10      	cmp	r3, #16
 800be7e:	dc02      	bgt.n	800be86 <__ieee754_rem_pio2+0x1be>
 800be80:	e9c4 0100 	strd	r0, r1, [r4]
 800be84:	e039      	b.n	800befa <__ieee754_rem_pio2+0x232>
 800be86:	a34c      	add	r3, pc, #304	; (adr r3, 800bfb8 <__ieee754_rem_pio2+0x2f0>)
 800be88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be90:	f7f4 fbb2 	bl	80005f8 <__aeabi_dmul>
 800be94:	4606      	mov	r6, r0
 800be96:	460f      	mov	r7, r1
 800be98:	4602      	mov	r2, r0
 800be9a:	460b      	mov	r3, r1
 800be9c:	4650      	mov	r0, sl
 800be9e:	4659      	mov	r1, fp
 800bea0:	f7f4 f9f2 	bl	8000288 <__aeabi_dsub>
 800bea4:	4602      	mov	r2, r0
 800bea6:	460b      	mov	r3, r1
 800bea8:	4680      	mov	r8, r0
 800beaa:	4689      	mov	r9, r1
 800beac:	4650      	mov	r0, sl
 800beae:	4659      	mov	r1, fp
 800beb0:	f7f4 f9ea 	bl	8000288 <__aeabi_dsub>
 800beb4:	4632      	mov	r2, r6
 800beb6:	463b      	mov	r3, r7
 800beb8:	f7f4 f9e6 	bl	8000288 <__aeabi_dsub>
 800bebc:	a340      	add	r3, pc, #256	; (adr r3, 800bfc0 <__ieee754_rem_pio2+0x2f8>)
 800bebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bec2:	4606      	mov	r6, r0
 800bec4:	460f      	mov	r7, r1
 800bec6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800beca:	f7f4 fb95 	bl	80005f8 <__aeabi_dmul>
 800bece:	4632      	mov	r2, r6
 800bed0:	463b      	mov	r3, r7
 800bed2:	f7f4 f9d9 	bl	8000288 <__aeabi_dsub>
 800bed6:	4602      	mov	r2, r0
 800bed8:	460b      	mov	r3, r1
 800beda:	4606      	mov	r6, r0
 800bedc:	460f      	mov	r7, r1
 800bede:	4640      	mov	r0, r8
 800bee0:	4649      	mov	r1, r9
 800bee2:	f7f4 f9d1 	bl	8000288 <__aeabi_dsub>
 800bee6:	9a05      	ldr	r2, [sp, #20]
 800bee8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800beec:	1ad3      	subs	r3, r2, r3
 800beee:	2b31      	cmp	r3, #49	; 0x31
 800bef0:	dc20      	bgt.n	800bf34 <__ieee754_rem_pio2+0x26c>
 800bef2:	e9c4 0100 	strd	r0, r1, [r4]
 800bef6:	46c2      	mov	sl, r8
 800bef8:	46cb      	mov	fp, r9
 800befa:	e9d4 8900 	ldrd	r8, r9, [r4]
 800befe:	4650      	mov	r0, sl
 800bf00:	4642      	mov	r2, r8
 800bf02:	464b      	mov	r3, r9
 800bf04:	4659      	mov	r1, fp
 800bf06:	f7f4 f9bf 	bl	8000288 <__aeabi_dsub>
 800bf0a:	463b      	mov	r3, r7
 800bf0c:	4632      	mov	r2, r6
 800bf0e:	f7f4 f9bb 	bl	8000288 <__aeabi_dsub>
 800bf12:	9b04      	ldr	r3, [sp, #16]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bf1a:	f6bf af11 	bge.w	800bd40 <__ieee754_rem_pio2+0x78>
 800bf1e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800bf22:	6063      	str	r3, [r4, #4]
 800bf24:	f8c4 8000 	str.w	r8, [r4]
 800bf28:	60a0      	str	r0, [r4, #8]
 800bf2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bf2e:	60e3      	str	r3, [r4, #12]
 800bf30:	426d      	negs	r5, r5
 800bf32:	e705      	b.n	800bd40 <__ieee754_rem_pio2+0x78>
 800bf34:	a326      	add	r3, pc, #152	; (adr r3, 800bfd0 <__ieee754_rem_pio2+0x308>)
 800bf36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf3e:	f7f4 fb5b 	bl	80005f8 <__aeabi_dmul>
 800bf42:	4606      	mov	r6, r0
 800bf44:	460f      	mov	r7, r1
 800bf46:	4602      	mov	r2, r0
 800bf48:	460b      	mov	r3, r1
 800bf4a:	4640      	mov	r0, r8
 800bf4c:	4649      	mov	r1, r9
 800bf4e:	f7f4 f99b 	bl	8000288 <__aeabi_dsub>
 800bf52:	4602      	mov	r2, r0
 800bf54:	460b      	mov	r3, r1
 800bf56:	4682      	mov	sl, r0
 800bf58:	468b      	mov	fp, r1
 800bf5a:	4640      	mov	r0, r8
 800bf5c:	4649      	mov	r1, r9
 800bf5e:	f7f4 f993 	bl	8000288 <__aeabi_dsub>
 800bf62:	4632      	mov	r2, r6
 800bf64:	463b      	mov	r3, r7
 800bf66:	f7f4 f98f 	bl	8000288 <__aeabi_dsub>
 800bf6a:	a31b      	add	r3, pc, #108	; (adr r3, 800bfd8 <__ieee754_rem_pio2+0x310>)
 800bf6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf70:	4606      	mov	r6, r0
 800bf72:	460f      	mov	r7, r1
 800bf74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf78:	f7f4 fb3e 	bl	80005f8 <__aeabi_dmul>
 800bf7c:	4632      	mov	r2, r6
 800bf7e:	463b      	mov	r3, r7
 800bf80:	f7f4 f982 	bl	8000288 <__aeabi_dsub>
 800bf84:	4606      	mov	r6, r0
 800bf86:	460f      	mov	r7, r1
 800bf88:	e764      	b.n	800be54 <__ieee754_rem_pio2+0x18c>
 800bf8a:	4b1b      	ldr	r3, [pc, #108]	; (800bff8 <__ieee754_rem_pio2+0x330>)
 800bf8c:	4598      	cmp	r8, r3
 800bf8e:	dd35      	ble.n	800bffc <__ieee754_rem_pio2+0x334>
 800bf90:	ee10 2a10 	vmov	r2, s0
 800bf94:	463b      	mov	r3, r7
 800bf96:	4630      	mov	r0, r6
 800bf98:	4639      	mov	r1, r7
 800bf9a:	f7f4 f975 	bl	8000288 <__aeabi_dsub>
 800bf9e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bfa2:	e9c4 0100 	strd	r0, r1, [r4]
 800bfa6:	e6a1      	b.n	800bcec <__ieee754_rem_pio2+0x24>
 800bfa8:	54400000 	.word	0x54400000
 800bfac:	3ff921fb 	.word	0x3ff921fb
 800bfb0:	1a626331 	.word	0x1a626331
 800bfb4:	3dd0b461 	.word	0x3dd0b461
 800bfb8:	1a600000 	.word	0x1a600000
 800bfbc:	3dd0b461 	.word	0x3dd0b461
 800bfc0:	2e037073 	.word	0x2e037073
 800bfc4:	3ba3198a 	.word	0x3ba3198a
 800bfc8:	6dc9c883 	.word	0x6dc9c883
 800bfcc:	3fe45f30 	.word	0x3fe45f30
 800bfd0:	2e000000 	.word	0x2e000000
 800bfd4:	3ba3198a 	.word	0x3ba3198a
 800bfd8:	252049c1 	.word	0x252049c1
 800bfdc:	397b839a 	.word	0x397b839a
 800bfe0:	3fe921fb 	.word	0x3fe921fb
 800bfe4:	4002d97b 	.word	0x4002d97b
 800bfe8:	3ff921fb 	.word	0x3ff921fb
 800bfec:	413921fb 	.word	0x413921fb
 800bff0:	3fe00000 	.word	0x3fe00000
 800bff4:	0800d1c0 	.word	0x0800d1c0
 800bff8:	7fefffff 	.word	0x7fefffff
 800bffc:	ea4f 5528 	mov.w	r5, r8, asr #20
 800c000:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800c004:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800c008:	4630      	mov	r0, r6
 800c00a:	460f      	mov	r7, r1
 800c00c:	f7f4 fda4 	bl	8000b58 <__aeabi_d2iz>
 800c010:	f7f4 fa88 	bl	8000524 <__aeabi_i2d>
 800c014:	4602      	mov	r2, r0
 800c016:	460b      	mov	r3, r1
 800c018:	4630      	mov	r0, r6
 800c01a:	4639      	mov	r1, r7
 800c01c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c020:	f7f4 f932 	bl	8000288 <__aeabi_dsub>
 800c024:	2200      	movs	r2, #0
 800c026:	4b1f      	ldr	r3, [pc, #124]	; (800c0a4 <__ieee754_rem_pio2+0x3dc>)
 800c028:	f7f4 fae6 	bl	80005f8 <__aeabi_dmul>
 800c02c:	460f      	mov	r7, r1
 800c02e:	4606      	mov	r6, r0
 800c030:	f7f4 fd92 	bl	8000b58 <__aeabi_d2iz>
 800c034:	f7f4 fa76 	bl	8000524 <__aeabi_i2d>
 800c038:	4602      	mov	r2, r0
 800c03a:	460b      	mov	r3, r1
 800c03c:	4630      	mov	r0, r6
 800c03e:	4639      	mov	r1, r7
 800c040:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c044:	f7f4 f920 	bl	8000288 <__aeabi_dsub>
 800c048:	2200      	movs	r2, #0
 800c04a:	4b16      	ldr	r3, [pc, #88]	; (800c0a4 <__ieee754_rem_pio2+0x3dc>)
 800c04c:	f7f4 fad4 	bl	80005f8 <__aeabi_dmul>
 800c050:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c054:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800c058:	f04f 0803 	mov.w	r8, #3
 800c05c:	2600      	movs	r6, #0
 800c05e:	2700      	movs	r7, #0
 800c060:	4632      	mov	r2, r6
 800c062:	463b      	mov	r3, r7
 800c064:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800c068:	f108 3aff 	add.w	sl, r8, #4294967295
 800c06c:	f7f4 fd2c 	bl	8000ac8 <__aeabi_dcmpeq>
 800c070:	b9b0      	cbnz	r0, 800c0a0 <__ieee754_rem_pio2+0x3d8>
 800c072:	4b0d      	ldr	r3, [pc, #52]	; (800c0a8 <__ieee754_rem_pio2+0x3e0>)
 800c074:	9301      	str	r3, [sp, #4]
 800c076:	2302      	movs	r3, #2
 800c078:	9300      	str	r3, [sp, #0]
 800c07a:	462a      	mov	r2, r5
 800c07c:	4643      	mov	r3, r8
 800c07e:	4621      	mov	r1, r4
 800c080:	a806      	add	r0, sp, #24
 800c082:	f000 f98d 	bl	800c3a0 <__kernel_rem_pio2>
 800c086:	9b04      	ldr	r3, [sp, #16]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	4605      	mov	r5, r0
 800c08c:	f6bf ae58 	bge.w	800bd40 <__ieee754_rem_pio2+0x78>
 800c090:	6863      	ldr	r3, [r4, #4]
 800c092:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c096:	6063      	str	r3, [r4, #4]
 800c098:	68e3      	ldr	r3, [r4, #12]
 800c09a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c09e:	e746      	b.n	800bf2e <__ieee754_rem_pio2+0x266>
 800c0a0:	46d0      	mov	r8, sl
 800c0a2:	e7dd      	b.n	800c060 <__ieee754_rem_pio2+0x398>
 800c0a4:	41700000 	.word	0x41700000
 800c0a8:	0800d240 	.word	0x0800d240

0800c0ac <__ieee754_sqrt>:
 800c0ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0b0:	4955      	ldr	r1, [pc, #340]	; (800c208 <__ieee754_sqrt+0x15c>)
 800c0b2:	ec55 4b10 	vmov	r4, r5, d0
 800c0b6:	43a9      	bics	r1, r5
 800c0b8:	462b      	mov	r3, r5
 800c0ba:	462a      	mov	r2, r5
 800c0bc:	d112      	bne.n	800c0e4 <__ieee754_sqrt+0x38>
 800c0be:	ee10 2a10 	vmov	r2, s0
 800c0c2:	ee10 0a10 	vmov	r0, s0
 800c0c6:	4629      	mov	r1, r5
 800c0c8:	f7f4 fa96 	bl	80005f8 <__aeabi_dmul>
 800c0cc:	4602      	mov	r2, r0
 800c0ce:	460b      	mov	r3, r1
 800c0d0:	4620      	mov	r0, r4
 800c0d2:	4629      	mov	r1, r5
 800c0d4:	f7f4 f8da 	bl	800028c <__adddf3>
 800c0d8:	4604      	mov	r4, r0
 800c0da:	460d      	mov	r5, r1
 800c0dc:	ec45 4b10 	vmov	d0, r4, r5
 800c0e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0e4:	2d00      	cmp	r5, #0
 800c0e6:	ee10 0a10 	vmov	r0, s0
 800c0ea:	4621      	mov	r1, r4
 800c0ec:	dc0f      	bgt.n	800c10e <__ieee754_sqrt+0x62>
 800c0ee:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c0f2:	4330      	orrs	r0, r6
 800c0f4:	d0f2      	beq.n	800c0dc <__ieee754_sqrt+0x30>
 800c0f6:	b155      	cbz	r5, 800c10e <__ieee754_sqrt+0x62>
 800c0f8:	ee10 2a10 	vmov	r2, s0
 800c0fc:	4620      	mov	r0, r4
 800c0fe:	4629      	mov	r1, r5
 800c100:	f7f4 f8c2 	bl	8000288 <__aeabi_dsub>
 800c104:	4602      	mov	r2, r0
 800c106:	460b      	mov	r3, r1
 800c108:	f7f4 fba0 	bl	800084c <__aeabi_ddiv>
 800c10c:	e7e4      	b.n	800c0d8 <__ieee754_sqrt+0x2c>
 800c10e:	151b      	asrs	r3, r3, #20
 800c110:	d073      	beq.n	800c1fa <__ieee754_sqrt+0x14e>
 800c112:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c116:	07dd      	lsls	r5, r3, #31
 800c118:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800c11c:	bf48      	it	mi
 800c11e:	0fc8      	lsrmi	r0, r1, #31
 800c120:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800c124:	bf44      	itt	mi
 800c126:	0049      	lslmi	r1, r1, #1
 800c128:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800c12c:	2500      	movs	r5, #0
 800c12e:	1058      	asrs	r0, r3, #1
 800c130:	0fcb      	lsrs	r3, r1, #31
 800c132:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800c136:	0049      	lsls	r1, r1, #1
 800c138:	2316      	movs	r3, #22
 800c13a:	462c      	mov	r4, r5
 800c13c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800c140:	19a7      	adds	r7, r4, r6
 800c142:	4297      	cmp	r7, r2
 800c144:	bfde      	ittt	le
 800c146:	19bc      	addle	r4, r7, r6
 800c148:	1bd2      	suble	r2, r2, r7
 800c14a:	19ad      	addle	r5, r5, r6
 800c14c:	0fcf      	lsrs	r7, r1, #31
 800c14e:	3b01      	subs	r3, #1
 800c150:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800c154:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c158:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c15c:	d1f0      	bne.n	800c140 <__ieee754_sqrt+0x94>
 800c15e:	f04f 0c20 	mov.w	ip, #32
 800c162:	469e      	mov	lr, r3
 800c164:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c168:	42a2      	cmp	r2, r4
 800c16a:	eb06 070e 	add.w	r7, r6, lr
 800c16e:	dc02      	bgt.n	800c176 <__ieee754_sqrt+0xca>
 800c170:	d112      	bne.n	800c198 <__ieee754_sqrt+0xec>
 800c172:	428f      	cmp	r7, r1
 800c174:	d810      	bhi.n	800c198 <__ieee754_sqrt+0xec>
 800c176:	2f00      	cmp	r7, #0
 800c178:	eb07 0e06 	add.w	lr, r7, r6
 800c17c:	da42      	bge.n	800c204 <__ieee754_sqrt+0x158>
 800c17e:	f1be 0f00 	cmp.w	lr, #0
 800c182:	db3f      	blt.n	800c204 <__ieee754_sqrt+0x158>
 800c184:	f104 0801 	add.w	r8, r4, #1
 800c188:	1b12      	subs	r2, r2, r4
 800c18a:	428f      	cmp	r7, r1
 800c18c:	bf88      	it	hi
 800c18e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800c192:	1bc9      	subs	r1, r1, r7
 800c194:	4433      	add	r3, r6
 800c196:	4644      	mov	r4, r8
 800c198:	0052      	lsls	r2, r2, #1
 800c19a:	f1bc 0c01 	subs.w	ip, ip, #1
 800c19e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800c1a2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c1a6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c1aa:	d1dd      	bne.n	800c168 <__ieee754_sqrt+0xbc>
 800c1ac:	430a      	orrs	r2, r1
 800c1ae:	d006      	beq.n	800c1be <__ieee754_sqrt+0x112>
 800c1b0:	1c5c      	adds	r4, r3, #1
 800c1b2:	bf13      	iteet	ne
 800c1b4:	3301      	addne	r3, #1
 800c1b6:	3501      	addeq	r5, #1
 800c1b8:	4663      	moveq	r3, ip
 800c1ba:	f023 0301 	bicne.w	r3, r3, #1
 800c1be:	106a      	asrs	r2, r5, #1
 800c1c0:	085b      	lsrs	r3, r3, #1
 800c1c2:	07e9      	lsls	r1, r5, #31
 800c1c4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800c1c8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800c1cc:	bf48      	it	mi
 800c1ce:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800c1d2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800c1d6:	461c      	mov	r4, r3
 800c1d8:	e780      	b.n	800c0dc <__ieee754_sqrt+0x30>
 800c1da:	0aca      	lsrs	r2, r1, #11
 800c1dc:	3815      	subs	r0, #21
 800c1de:	0549      	lsls	r1, r1, #21
 800c1e0:	2a00      	cmp	r2, #0
 800c1e2:	d0fa      	beq.n	800c1da <__ieee754_sqrt+0x12e>
 800c1e4:	02d6      	lsls	r6, r2, #11
 800c1e6:	d50a      	bpl.n	800c1fe <__ieee754_sqrt+0x152>
 800c1e8:	f1c3 0420 	rsb	r4, r3, #32
 800c1ec:	fa21 f404 	lsr.w	r4, r1, r4
 800c1f0:	1e5d      	subs	r5, r3, #1
 800c1f2:	4099      	lsls	r1, r3
 800c1f4:	4322      	orrs	r2, r4
 800c1f6:	1b43      	subs	r3, r0, r5
 800c1f8:	e78b      	b.n	800c112 <__ieee754_sqrt+0x66>
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	e7f0      	b.n	800c1e0 <__ieee754_sqrt+0x134>
 800c1fe:	0052      	lsls	r2, r2, #1
 800c200:	3301      	adds	r3, #1
 800c202:	e7ef      	b.n	800c1e4 <__ieee754_sqrt+0x138>
 800c204:	46a0      	mov	r8, r4
 800c206:	e7bf      	b.n	800c188 <__ieee754_sqrt+0xdc>
 800c208:	7ff00000 	.word	0x7ff00000
 800c20c:	00000000 	.word	0x00000000

0800c210 <__kernel_cos>:
 800c210:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c214:	ec59 8b10 	vmov	r8, r9, d0
 800c218:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800c21c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800c220:	ed2d 8b02 	vpush	{d8}
 800c224:	eeb0 8a41 	vmov.f32	s16, s2
 800c228:	eef0 8a61 	vmov.f32	s17, s3
 800c22c:	da07      	bge.n	800c23e <__kernel_cos+0x2e>
 800c22e:	ee10 0a10 	vmov	r0, s0
 800c232:	4649      	mov	r1, r9
 800c234:	f7f4 fc90 	bl	8000b58 <__aeabi_d2iz>
 800c238:	2800      	cmp	r0, #0
 800c23a:	f000 8089 	beq.w	800c350 <__kernel_cos+0x140>
 800c23e:	4642      	mov	r2, r8
 800c240:	464b      	mov	r3, r9
 800c242:	4640      	mov	r0, r8
 800c244:	4649      	mov	r1, r9
 800c246:	f7f4 f9d7 	bl	80005f8 <__aeabi_dmul>
 800c24a:	2200      	movs	r2, #0
 800c24c:	4b4e      	ldr	r3, [pc, #312]	; (800c388 <__kernel_cos+0x178>)
 800c24e:	4604      	mov	r4, r0
 800c250:	460d      	mov	r5, r1
 800c252:	f7f4 f9d1 	bl	80005f8 <__aeabi_dmul>
 800c256:	a340      	add	r3, pc, #256	; (adr r3, 800c358 <__kernel_cos+0x148>)
 800c258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c25c:	4682      	mov	sl, r0
 800c25e:	468b      	mov	fp, r1
 800c260:	4620      	mov	r0, r4
 800c262:	4629      	mov	r1, r5
 800c264:	f7f4 f9c8 	bl	80005f8 <__aeabi_dmul>
 800c268:	a33d      	add	r3, pc, #244	; (adr r3, 800c360 <__kernel_cos+0x150>)
 800c26a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c26e:	f7f4 f80d 	bl	800028c <__adddf3>
 800c272:	4622      	mov	r2, r4
 800c274:	462b      	mov	r3, r5
 800c276:	f7f4 f9bf 	bl	80005f8 <__aeabi_dmul>
 800c27a:	a33b      	add	r3, pc, #236	; (adr r3, 800c368 <__kernel_cos+0x158>)
 800c27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c280:	f7f4 f802 	bl	8000288 <__aeabi_dsub>
 800c284:	4622      	mov	r2, r4
 800c286:	462b      	mov	r3, r5
 800c288:	f7f4 f9b6 	bl	80005f8 <__aeabi_dmul>
 800c28c:	a338      	add	r3, pc, #224	; (adr r3, 800c370 <__kernel_cos+0x160>)
 800c28e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c292:	f7f3 fffb 	bl	800028c <__adddf3>
 800c296:	4622      	mov	r2, r4
 800c298:	462b      	mov	r3, r5
 800c29a:	f7f4 f9ad 	bl	80005f8 <__aeabi_dmul>
 800c29e:	a336      	add	r3, pc, #216	; (adr r3, 800c378 <__kernel_cos+0x168>)
 800c2a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2a4:	f7f3 fff0 	bl	8000288 <__aeabi_dsub>
 800c2a8:	4622      	mov	r2, r4
 800c2aa:	462b      	mov	r3, r5
 800c2ac:	f7f4 f9a4 	bl	80005f8 <__aeabi_dmul>
 800c2b0:	a333      	add	r3, pc, #204	; (adr r3, 800c380 <__kernel_cos+0x170>)
 800c2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2b6:	f7f3 ffe9 	bl	800028c <__adddf3>
 800c2ba:	4622      	mov	r2, r4
 800c2bc:	462b      	mov	r3, r5
 800c2be:	f7f4 f99b 	bl	80005f8 <__aeabi_dmul>
 800c2c2:	4622      	mov	r2, r4
 800c2c4:	462b      	mov	r3, r5
 800c2c6:	f7f4 f997 	bl	80005f8 <__aeabi_dmul>
 800c2ca:	ec53 2b18 	vmov	r2, r3, d8
 800c2ce:	4604      	mov	r4, r0
 800c2d0:	460d      	mov	r5, r1
 800c2d2:	4640      	mov	r0, r8
 800c2d4:	4649      	mov	r1, r9
 800c2d6:	f7f4 f98f 	bl	80005f8 <__aeabi_dmul>
 800c2da:	460b      	mov	r3, r1
 800c2dc:	4602      	mov	r2, r0
 800c2de:	4629      	mov	r1, r5
 800c2e0:	4620      	mov	r0, r4
 800c2e2:	f7f3 ffd1 	bl	8000288 <__aeabi_dsub>
 800c2e6:	4b29      	ldr	r3, [pc, #164]	; (800c38c <__kernel_cos+0x17c>)
 800c2e8:	429e      	cmp	r6, r3
 800c2ea:	4680      	mov	r8, r0
 800c2ec:	4689      	mov	r9, r1
 800c2ee:	dc11      	bgt.n	800c314 <__kernel_cos+0x104>
 800c2f0:	4602      	mov	r2, r0
 800c2f2:	460b      	mov	r3, r1
 800c2f4:	4650      	mov	r0, sl
 800c2f6:	4659      	mov	r1, fp
 800c2f8:	f7f3 ffc6 	bl	8000288 <__aeabi_dsub>
 800c2fc:	460b      	mov	r3, r1
 800c2fe:	4924      	ldr	r1, [pc, #144]	; (800c390 <__kernel_cos+0x180>)
 800c300:	4602      	mov	r2, r0
 800c302:	2000      	movs	r0, #0
 800c304:	f7f3 ffc0 	bl	8000288 <__aeabi_dsub>
 800c308:	ecbd 8b02 	vpop	{d8}
 800c30c:	ec41 0b10 	vmov	d0, r0, r1
 800c310:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c314:	4b1f      	ldr	r3, [pc, #124]	; (800c394 <__kernel_cos+0x184>)
 800c316:	491e      	ldr	r1, [pc, #120]	; (800c390 <__kernel_cos+0x180>)
 800c318:	429e      	cmp	r6, r3
 800c31a:	bfcc      	ite	gt
 800c31c:	4d1e      	ldrgt	r5, [pc, #120]	; (800c398 <__kernel_cos+0x188>)
 800c31e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800c322:	2400      	movs	r4, #0
 800c324:	4622      	mov	r2, r4
 800c326:	462b      	mov	r3, r5
 800c328:	2000      	movs	r0, #0
 800c32a:	f7f3 ffad 	bl	8000288 <__aeabi_dsub>
 800c32e:	4622      	mov	r2, r4
 800c330:	4606      	mov	r6, r0
 800c332:	460f      	mov	r7, r1
 800c334:	462b      	mov	r3, r5
 800c336:	4650      	mov	r0, sl
 800c338:	4659      	mov	r1, fp
 800c33a:	f7f3 ffa5 	bl	8000288 <__aeabi_dsub>
 800c33e:	4642      	mov	r2, r8
 800c340:	464b      	mov	r3, r9
 800c342:	f7f3 ffa1 	bl	8000288 <__aeabi_dsub>
 800c346:	4602      	mov	r2, r0
 800c348:	460b      	mov	r3, r1
 800c34a:	4630      	mov	r0, r6
 800c34c:	4639      	mov	r1, r7
 800c34e:	e7d9      	b.n	800c304 <__kernel_cos+0xf4>
 800c350:	2000      	movs	r0, #0
 800c352:	490f      	ldr	r1, [pc, #60]	; (800c390 <__kernel_cos+0x180>)
 800c354:	e7d8      	b.n	800c308 <__kernel_cos+0xf8>
 800c356:	bf00      	nop
 800c358:	be8838d4 	.word	0xbe8838d4
 800c35c:	bda8fae9 	.word	0xbda8fae9
 800c360:	bdb4b1c4 	.word	0xbdb4b1c4
 800c364:	3e21ee9e 	.word	0x3e21ee9e
 800c368:	809c52ad 	.word	0x809c52ad
 800c36c:	3e927e4f 	.word	0x3e927e4f
 800c370:	19cb1590 	.word	0x19cb1590
 800c374:	3efa01a0 	.word	0x3efa01a0
 800c378:	16c15177 	.word	0x16c15177
 800c37c:	3f56c16c 	.word	0x3f56c16c
 800c380:	5555554c 	.word	0x5555554c
 800c384:	3fa55555 	.word	0x3fa55555
 800c388:	3fe00000 	.word	0x3fe00000
 800c38c:	3fd33332 	.word	0x3fd33332
 800c390:	3ff00000 	.word	0x3ff00000
 800c394:	3fe90000 	.word	0x3fe90000
 800c398:	3fd20000 	.word	0x3fd20000
 800c39c:	00000000 	.word	0x00000000

0800c3a0 <__kernel_rem_pio2>:
 800c3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3a4:	ed2d 8b02 	vpush	{d8}
 800c3a8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800c3ac:	1ed4      	subs	r4, r2, #3
 800c3ae:	9308      	str	r3, [sp, #32]
 800c3b0:	9101      	str	r1, [sp, #4]
 800c3b2:	4bc5      	ldr	r3, [pc, #788]	; (800c6c8 <__kernel_rem_pio2+0x328>)
 800c3b4:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800c3b6:	9009      	str	r0, [sp, #36]	; 0x24
 800c3b8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c3bc:	9304      	str	r3, [sp, #16]
 800c3be:	9b08      	ldr	r3, [sp, #32]
 800c3c0:	3b01      	subs	r3, #1
 800c3c2:	9307      	str	r3, [sp, #28]
 800c3c4:	2318      	movs	r3, #24
 800c3c6:	fb94 f4f3 	sdiv	r4, r4, r3
 800c3ca:	f06f 0317 	mvn.w	r3, #23
 800c3ce:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800c3d2:	fb04 3303 	mla	r3, r4, r3, r3
 800c3d6:	eb03 0a02 	add.w	sl, r3, r2
 800c3da:	9b04      	ldr	r3, [sp, #16]
 800c3dc:	9a07      	ldr	r2, [sp, #28]
 800c3de:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800c6b8 <__kernel_rem_pio2+0x318>
 800c3e2:	eb03 0802 	add.w	r8, r3, r2
 800c3e6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800c3e8:	1aa7      	subs	r7, r4, r2
 800c3ea:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c3ee:	ae22      	add	r6, sp, #136	; 0x88
 800c3f0:	2500      	movs	r5, #0
 800c3f2:	4545      	cmp	r5, r8
 800c3f4:	dd13      	ble.n	800c41e <__kernel_rem_pio2+0x7e>
 800c3f6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800c6b8 <__kernel_rem_pio2+0x318>
 800c3fa:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800c3fe:	2600      	movs	r6, #0
 800c400:	9b04      	ldr	r3, [sp, #16]
 800c402:	429e      	cmp	r6, r3
 800c404:	dc32      	bgt.n	800c46c <__kernel_rem_pio2+0xcc>
 800c406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c408:	9302      	str	r3, [sp, #8]
 800c40a:	9b08      	ldr	r3, [sp, #32]
 800c40c:	199d      	adds	r5, r3, r6
 800c40e:	ab22      	add	r3, sp, #136	; 0x88
 800c410:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c414:	9306      	str	r3, [sp, #24]
 800c416:	ec59 8b18 	vmov	r8, r9, d8
 800c41a:	2700      	movs	r7, #0
 800c41c:	e01f      	b.n	800c45e <__kernel_rem_pio2+0xbe>
 800c41e:	42ef      	cmn	r7, r5
 800c420:	d407      	bmi.n	800c432 <__kernel_rem_pio2+0x92>
 800c422:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c426:	f7f4 f87d 	bl	8000524 <__aeabi_i2d>
 800c42a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c42e:	3501      	adds	r5, #1
 800c430:	e7df      	b.n	800c3f2 <__kernel_rem_pio2+0x52>
 800c432:	ec51 0b18 	vmov	r0, r1, d8
 800c436:	e7f8      	b.n	800c42a <__kernel_rem_pio2+0x8a>
 800c438:	9906      	ldr	r1, [sp, #24]
 800c43a:	9d02      	ldr	r5, [sp, #8]
 800c43c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800c440:	9106      	str	r1, [sp, #24]
 800c442:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800c446:	9502      	str	r5, [sp, #8]
 800c448:	f7f4 f8d6 	bl	80005f8 <__aeabi_dmul>
 800c44c:	4602      	mov	r2, r0
 800c44e:	460b      	mov	r3, r1
 800c450:	4640      	mov	r0, r8
 800c452:	4649      	mov	r1, r9
 800c454:	f7f3 ff1a 	bl	800028c <__adddf3>
 800c458:	3701      	adds	r7, #1
 800c45a:	4680      	mov	r8, r0
 800c45c:	4689      	mov	r9, r1
 800c45e:	9b07      	ldr	r3, [sp, #28]
 800c460:	429f      	cmp	r7, r3
 800c462:	dde9      	ble.n	800c438 <__kernel_rem_pio2+0x98>
 800c464:	e8eb 8902 	strd	r8, r9, [fp], #8
 800c468:	3601      	adds	r6, #1
 800c46a:	e7c9      	b.n	800c400 <__kernel_rem_pio2+0x60>
 800c46c:	9b04      	ldr	r3, [sp, #16]
 800c46e:	aa0e      	add	r2, sp, #56	; 0x38
 800c470:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c474:	930c      	str	r3, [sp, #48]	; 0x30
 800c476:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800c478:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c47c:	9c04      	ldr	r4, [sp, #16]
 800c47e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c480:	ab9a      	add	r3, sp, #616	; 0x268
 800c482:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800c486:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c48a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c48e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800c492:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800c496:	ab9a      	add	r3, sp, #616	; 0x268
 800c498:	445b      	add	r3, fp
 800c49a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800c49e:	2500      	movs	r5, #0
 800c4a0:	1b63      	subs	r3, r4, r5
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	dc78      	bgt.n	800c598 <__kernel_rem_pio2+0x1f8>
 800c4a6:	4650      	mov	r0, sl
 800c4a8:	ec49 8b10 	vmov	d0, r8, r9
 800c4ac:	f000 fc04 	bl	800ccb8 <scalbn>
 800c4b0:	ec57 6b10 	vmov	r6, r7, d0
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800c4ba:	ee10 0a10 	vmov	r0, s0
 800c4be:	4639      	mov	r1, r7
 800c4c0:	f7f4 f89a 	bl	80005f8 <__aeabi_dmul>
 800c4c4:	ec41 0b10 	vmov	d0, r0, r1
 800c4c8:	f000 fb6e 	bl	800cba8 <floor>
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	ec51 0b10 	vmov	r0, r1, d0
 800c4d2:	4b7e      	ldr	r3, [pc, #504]	; (800c6cc <__kernel_rem_pio2+0x32c>)
 800c4d4:	f7f4 f890 	bl	80005f8 <__aeabi_dmul>
 800c4d8:	4602      	mov	r2, r0
 800c4da:	460b      	mov	r3, r1
 800c4dc:	4630      	mov	r0, r6
 800c4de:	4639      	mov	r1, r7
 800c4e0:	f7f3 fed2 	bl	8000288 <__aeabi_dsub>
 800c4e4:	460f      	mov	r7, r1
 800c4e6:	4606      	mov	r6, r0
 800c4e8:	f7f4 fb36 	bl	8000b58 <__aeabi_d2iz>
 800c4ec:	9006      	str	r0, [sp, #24]
 800c4ee:	f7f4 f819 	bl	8000524 <__aeabi_i2d>
 800c4f2:	4602      	mov	r2, r0
 800c4f4:	460b      	mov	r3, r1
 800c4f6:	4630      	mov	r0, r6
 800c4f8:	4639      	mov	r1, r7
 800c4fa:	f7f3 fec5 	bl	8000288 <__aeabi_dsub>
 800c4fe:	f1ba 0f00 	cmp.w	sl, #0
 800c502:	4606      	mov	r6, r0
 800c504:	460f      	mov	r7, r1
 800c506:	dd6c      	ble.n	800c5e2 <__kernel_rem_pio2+0x242>
 800c508:	1e62      	subs	r2, r4, #1
 800c50a:	ab0e      	add	r3, sp, #56	; 0x38
 800c50c:	f1ca 0118 	rsb	r1, sl, #24
 800c510:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c514:	9d06      	ldr	r5, [sp, #24]
 800c516:	fa40 f301 	asr.w	r3, r0, r1
 800c51a:	441d      	add	r5, r3
 800c51c:	408b      	lsls	r3, r1
 800c51e:	1ac0      	subs	r0, r0, r3
 800c520:	ab0e      	add	r3, sp, #56	; 0x38
 800c522:	9506      	str	r5, [sp, #24]
 800c524:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800c528:	f1ca 0317 	rsb	r3, sl, #23
 800c52c:	fa40 f303 	asr.w	r3, r0, r3
 800c530:	9302      	str	r3, [sp, #8]
 800c532:	9b02      	ldr	r3, [sp, #8]
 800c534:	2b00      	cmp	r3, #0
 800c536:	dd62      	ble.n	800c5fe <__kernel_rem_pio2+0x25e>
 800c538:	9b06      	ldr	r3, [sp, #24]
 800c53a:	2200      	movs	r2, #0
 800c53c:	3301      	adds	r3, #1
 800c53e:	9306      	str	r3, [sp, #24]
 800c540:	4615      	mov	r5, r2
 800c542:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800c546:	4294      	cmp	r4, r2
 800c548:	f300 8095 	bgt.w	800c676 <__kernel_rem_pio2+0x2d6>
 800c54c:	f1ba 0f00 	cmp.w	sl, #0
 800c550:	dd07      	ble.n	800c562 <__kernel_rem_pio2+0x1c2>
 800c552:	f1ba 0f01 	cmp.w	sl, #1
 800c556:	f000 80a2 	beq.w	800c69e <__kernel_rem_pio2+0x2fe>
 800c55a:	f1ba 0f02 	cmp.w	sl, #2
 800c55e:	f000 80c1 	beq.w	800c6e4 <__kernel_rem_pio2+0x344>
 800c562:	9b02      	ldr	r3, [sp, #8]
 800c564:	2b02      	cmp	r3, #2
 800c566:	d14a      	bne.n	800c5fe <__kernel_rem_pio2+0x25e>
 800c568:	4632      	mov	r2, r6
 800c56a:	463b      	mov	r3, r7
 800c56c:	2000      	movs	r0, #0
 800c56e:	4958      	ldr	r1, [pc, #352]	; (800c6d0 <__kernel_rem_pio2+0x330>)
 800c570:	f7f3 fe8a 	bl	8000288 <__aeabi_dsub>
 800c574:	4606      	mov	r6, r0
 800c576:	460f      	mov	r7, r1
 800c578:	2d00      	cmp	r5, #0
 800c57a:	d040      	beq.n	800c5fe <__kernel_rem_pio2+0x25e>
 800c57c:	4650      	mov	r0, sl
 800c57e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800c6c0 <__kernel_rem_pio2+0x320>
 800c582:	f000 fb99 	bl	800ccb8 <scalbn>
 800c586:	4630      	mov	r0, r6
 800c588:	4639      	mov	r1, r7
 800c58a:	ec53 2b10 	vmov	r2, r3, d0
 800c58e:	f7f3 fe7b 	bl	8000288 <__aeabi_dsub>
 800c592:	4606      	mov	r6, r0
 800c594:	460f      	mov	r7, r1
 800c596:	e032      	b.n	800c5fe <__kernel_rem_pio2+0x25e>
 800c598:	2200      	movs	r2, #0
 800c59a:	4b4e      	ldr	r3, [pc, #312]	; (800c6d4 <__kernel_rem_pio2+0x334>)
 800c59c:	4640      	mov	r0, r8
 800c59e:	4649      	mov	r1, r9
 800c5a0:	f7f4 f82a 	bl	80005f8 <__aeabi_dmul>
 800c5a4:	f7f4 fad8 	bl	8000b58 <__aeabi_d2iz>
 800c5a8:	f7f3 ffbc 	bl	8000524 <__aeabi_i2d>
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	4b4a      	ldr	r3, [pc, #296]	; (800c6d8 <__kernel_rem_pio2+0x338>)
 800c5b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c5b4:	f7f4 f820 	bl	80005f8 <__aeabi_dmul>
 800c5b8:	4602      	mov	r2, r0
 800c5ba:	460b      	mov	r3, r1
 800c5bc:	4640      	mov	r0, r8
 800c5be:	4649      	mov	r1, r9
 800c5c0:	f7f3 fe62 	bl	8000288 <__aeabi_dsub>
 800c5c4:	f7f4 fac8 	bl	8000b58 <__aeabi_d2iz>
 800c5c8:	ab0e      	add	r3, sp, #56	; 0x38
 800c5ca:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800c5ce:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800c5d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c5d6:	f7f3 fe59 	bl	800028c <__adddf3>
 800c5da:	3501      	adds	r5, #1
 800c5dc:	4680      	mov	r8, r0
 800c5de:	4689      	mov	r9, r1
 800c5e0:	e75e      	b.n	800c4a0 <__kernel_rem_pio2+0x100>
 800c5e2:	d105      	bne.n	800c5f0 <__kernel_rem_pio2+0x250>
 800c5e4:	1e63      	subs	r3, r4, #1
 800c5e6:	aa0e      	add	r2, sp, #56	; 0x38
 800c5e8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c5ec:	15c3      	asrs	r3, r0, #23
 800c5ee:	e79f      	b.n	800c530 <__kernel_rem_pio2+0x190>
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	4b3a      	ldr	r3, [pc, #232]	; (800c6dc <__kernel_rem_pio2+0x33c>)
 800c5f4:	f7f4 fa86 	bl	8000b04 <__aeabi_dcmpge>
 800c5f8:	2800      	cmp	r0, #0
 800c5fa:	d139      	bne.n	800c670 <__kernel_rem_pio2+0x2d0>
 800c5fc:	9002      	str	r0, [sp, #8]
 800c5fe:	2200      	movs	r2, #0
 800c600:	2300      	movs	r3, #0
 800c602:	4630      	mov	r0, r6
 800c604:	4639      	mov	r1, r7
 800c606:	f7f4 fa5f 	bl	8000ac8 <__aeabi_dcmpeq>
 800c60a:	2800      	cmp	r0, #0
 800c60c:	f000 80c7 	beq.w	800c79e <__kernel_rem_pio2+0x3fe>
 800c610:	1e65      	subs	r5, r4, #1
 800c612:	462b      	mov	r3, r5
 800c614:	2200      	movs	r2, #0
 800c616:	9904      	ldr	r1, [sp, #16]
 800c618:	428b      	cmp	r3, r1
 800c61a:	da6a      	bge.n	800c6f2 <__kernel_rem_pio2+0x352>
 800c61c:	2a00      	cmp	r2, #0
 800c61e:	f000 8088 	beq.w	800c732 <__kernel_rem_pio2+0x392>
 800c622:	ab0e      	add	r3, sp, #56	; 0x38
 800c624:	f1aa 0a18 	sub.w	sl, sl, #24
 800c628:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	f000 80b4 	beq.w	800c79a <__kernel_rem_pio2+0x3fa>
 800c632:	4650      	mov	r0, sl
 800c634:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800c6c0 <__kernel_rem_pio2+0x320>
 800c638:	f000 fb3e 	bl	800ccb8 <scalbn>
 800c63c:	00ec      	lsls	r4, r5, #3
 800c63e:	ab72      	add	r3, sp, #456	; 0x1c8
 800c640:	191e      	adds	r6, r3, r4
 800c642:	ec59 8b10 	vmov	r8, r9, d0
 800c646:	f106 0a08 	add.w	sl, r6, #8
 800c64a:	462f      	mov	r7, r5
 800c64c:	2f00      	cmp	r7, #0
 800c64e:	f280 80df 	bge.w	800c810 <__kernel_rem_pio2+0x470>
 800c652:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800c6b8 <__kernel_rem_pio2+0x318>
 800c656:	f04f 0a00 	mov.w	sl, #0
 800c65a:	eba5 030a 	sub.w	r3, r5, sl
 800c65e:	2b00      	cmp	r3, #0
 800c660:	f2c0 810a 	blt.w	800c878 <__kernel_rem_pio2+0x4d8>
 800c664:	f8df b078 	ldr.w	fp, [pc, #120]	; 800c6e0 <__kernel_rem_pio2+0x340>
 800c668:	ec59 8b18 	vmov	r8, r9, d8
 800c66c:	2700      	movs	r7, #0
 800c66e:	e0f5      	b.n	800c85c <__kernel_rem_pio2+0x4bc>
 800c670:	2302      	movs	r3, #2
 800c672:	9302      	str	r3, [sp, #8]
 800c674:	e760      	b.n	800c538 <__kernel_rem_pio2+0x198>
 800c676:	ab0e      	add	r3, sp, #56	; 0x38
 800c678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c67c:	b94d      	cbnz	r5, 800c692 <__kernel_rem_pio2+0x2f2>
 800c67e:	b12b      	cbz	r3, 800c68c <__kernel_rem_pio2+0x2ec>
 800c680:	a80e      	add	r0, sp, #56	; 0x38
 800c682:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800c686:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800c68a:	2301      	movs	r3, #1
 800c68c:	3201      	adds	r2, #1
 800c68e:	461d      	mov	r5, r3
 800c690:	e759      	b.n	800c546 <__kernel_rem_pio2+0x1a6>
 800c692:	a80e      	add	r0, sp, #56	; 0x38
 800c694:	1acb      	subs	r3, r1, r3
 800c696:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800c69a:	462b      	mov	r3, r5
 800c69c:	e7f6      	b.n	800c68c <__kernel_rem_pio2+0x2ec>
 800c69e:	1e62      	subs	r2, r4, #1
 800c6a0:	ab0e      	add	r3, sp, #56	; 0x38
 800c6a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6a6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c6aa:	a90e      	add	r1, sp, #56	; 0x38
 800c6ac:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c6b0:	e757      	b.n	800c562 <__kernel_rem_pio2+0x1c2>
 800c6b2:	bf00      	nop
 800c6b4:	f3af 8000 	nop.w
	...
 800c6c4:	3ff00000 	.word	0x3ff00000
 800c6c8:	0800d388 	.word	0x0800d388
 800c6cc:	40200000 	.word	0x40200000
 800c6d0:	3ff00000 	.word	0x3ff00000
 800c6d4:	3e700000 	.word	0x3e700000
 800c6d8:	41700000 	.word	0x41700000
 800c6dc:	3fe00000 	.word	0x3fe00000
 800c6e0:	0800d348 	.word	0x0800d348
 800c6e4:	1e62      	subs	r2, r4, #1
 800c6e6:	ab0e      	add	r3, sp, #56	; 0x38
 800c6e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6ec:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c6f0:	e7db      	b.n	800c6aa <__kernel_rem_pio2+0x30a>
 800c6f2:	a90e      	add	r1, sp, #56	; 0x38
 800c6f4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c6f8:	3b01      	subs	r3, #1
 800c6fa:	430a      	orrs	r2, r1
 800c6fc:	e78b      	b.n	800c616 <__kernel_rem_pio2+0x276>
 800c6fe:	3301      	adds	r3, #1
 800c700:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800c704:	2900      	cmp	r1, #0
 800c706:	d0fa      	beq.n	800c6fe <__kernel_rem_pio2+0x35e>
 800c708:	9a08      	ldr	r2, [sp, #32]
 800c70a:	4422      	add	r2, r4
 800c70c:	00d2      	lsls	r2, r2, #3
 800c70e:	a922      	add	r1, sp, #136	; 0x88
 800c710:	18e3      	adds	r3, r4, r3
 800c712:	9206      	str	r2, [sp, #24]
 800c714:	440a      	add	r2, r1
 800c716:	9302      	str	r3, [sp, #8]
 800c718:	f10b 0108 	add.w	r1, fp, #8
 800c71c:	f102 0308 	add.w	r3, r2, #8
 800c720:	1c66      	adds	r6, r4, #1
 800c722:	910a      	str	r1, [sp, #40]	; 0x28
 800c724:	2500      	movs	r5, #0
 800c726:	930d      	str	r3, [sp, #52]	; 0x34
 800c728:	9b02      	ldr	r3, [sp, #8]
 800c72a:	42b3      	cmp	r3, r6
 800c72c:	da04      	bge.n	800c738 <__kernel_rem_pio2+0x398>
 800c72e:	461c      	mov	r4, r3
 800c730:	e6a6      	b.n	800c480 <__kernel_rem_pio2+0xe0>
 800c732:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c734:	2301      	movs	r3, #1
 800c736:	e7e3      	b.n	800c700 <__kernel_rem_pio2+0x360>
 800c738:	9b06      	ldr	r3, [sp, #24]
 800c73a:	18ef      	adds	r7, r5, r3
 800c73c:	ab22      	add	r3, sp, #136	; 0x88
 800c73e:	441f      	add	r7, r3
 800c740:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c742:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c746:	f7f3 feed 	bl	8000524 <__aeabi_i2d>
 800c74a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c74c:	461c      	mov	r4, r3
 800c74e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c750:	e9c7 0100 	strd	r0, r1, [r7]
 800c754:	eb03 0b05 	add.w	fp, r3, r5
 800c758:	2700      	movs	r7, #0
 800c75a:	f04f 0800 	mov.w	r8, #0
 800c75e:	f04f 0900 	mov.w	r9, #0
 800c762:	9b07      	ldr	r3, [sp, #28]
 800c764:	429f      	cmp	r7, r3
 800c766:	dd08      	ble.n	800c77a <__kernel_rem_pio2+0x3da>
 800c768:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c76a:	aa72      	add	r2, sp, #456	; 0x1c8
 800c76c:	18eb      	adds	r3, r5, r3
 800c76e:	4413      	add	r3, r2
 800c770:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800c774:	3601      	adds	r6, #1
 800c776:	3508      	adds	r5, #8
 800c778:	e7d6      	b.n	800c728 <__kernel_rem_pio2+0x388>
 800c77a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800c77e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800c782:	f7f3 ff39 	bl	80005f8 <__aeabi_dmul>
 800c786:	4602      	mov	r2, r0
 800c788:	460b      	mov	r3, r1
 800c78a:	4640      	mov	r0, r8
 800c78c:	4649      	mov	r1, r9
 800c78e:	f7f3 fd7d 	bl	800028c <__adddf3>
 800c792:	3701      	adds	r7, #1
 800c794:	4680      	mov	r8, r0
 800c796:	4689      	mov	r9, r1
 800c798:	e7e3      	b.n	800c762 <__kernel_rem_pio2+0x3c2>
 800c79a:	3d01      	subs	r5, #1
 800c79c:	e741      	b.n	800c622 <__kernel_rem_pio2+0x282>
 800c79e:	f1ca 0000 	rsb	r0, sl, #0
 800c7a2:	ec47 6b10 	vmov	d0, r6, r7
 800c7a6:	f000 fa87 	bl	800ccb8 <scalbn>
 800c7aa:	ec57 6b10 	vmov	r6, r7, d0
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	4b99      	ldr	r3, [pc, #612]	; (800ca18 <__kernel_rem_pio2+0x678>)
 800c7b2:	ee10 0a10 	vmov	r0, s0
 800c7b6:	4639      	mov	r1, r7
 800c7b8:	f7f4 f9a4 	bl	8000b04 <__aeabi_dcmpge>
 800c7bc:	b1f8      	cbz	r0, 800c7fe <__kernel_rem_pio2+0x45e>
 800c7be:	2200      	movs	r2, #0
 800c7c0:	4b96      	ldr	r3, [pc, #600]	; (800ca1c <__kernel_rem_pio2+0x67c>)
 800c7c2:	4630      	mov	r0, r6
 800c7c4:	4639      	mov	r1, r7
 800c7c6:	f7f3 ff17 	bl	80005f8 <__aeabi_dmul>
 800c7ca:	f7f4 f9c5 	bl	8000b58 <__aeabi_d2iz>
 800c7ce:	4680      	mov	r8, r0
 800c7d0:	f7f3 fea8 	bl	8000524 <__aeabi_i2d>
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	4b90      	ldr	r3, [pc, #576]	; (800ca18 <__kernel_rem_pio2+0x678>)
 800c7d8:	f7f3 ff0e 	bl	80005f8 <__aeabi_dmul>
 800c7dc:	460b      	mov	r3, r1
 800c7de:	4602      	mov	r2, r0
 800c7e0:	4639      	mov	r1, r7
 800c7e2:	4630      	mov	r0, r6
 800c7e4:	f7f3 fd50 	bl	8000288 <__aeabi_dsub>
 800c7e8:	f7f4 f9b6 	bl	8000b58 <__aeabi_d2iz>
 800c7ec:	1c65      	adds	r5, r4, #1
 800c7ee:	ab0e      	add	r3, sp, #56	; 0x38
 800c7f0:	f10a 0a18 	add.w	sl, sl, #24
 800c7f4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c7f8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800c7fc:	e719      	b.n	800c632 <__kernel_rem_pio2+0x292>
 800c7fe:	4630      	mov	r0, r6
 800c800:	4639      	mov	r1, r7
 800c802:	f7f4 f9a9 	bl	8000b58 <__aeabi_d2iz>
 800c806:	ab0e      	add	r3, sp, #56	; 0x38
 800c808:	4625      	mov	r5, r4
 800c80a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c80e:	e710      	b.n	800c632 <__kernel_rem_pio2+0x292>
 800c810:	ab0e      	add	r3, sp, #56	; 0x38
 800c812:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800c816:	f7f3 fe85 	bl	8000524 <__aeabi_i2d>
 800c81a:	4642      	mov	r2, r8
 800c81c:	464b      	mov	r3, r9
 800c81e:	f7f3 feeb 	bl	80005f8 <__aeabi_dmul>
 800c822:	2200      	movs	r2, #0
 800c824:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800c828:	4b7c      	ldr	r3, [pc, #496]	; (800ca1c <__kernel_rem_pio2+0x67c>)
 800c82a:	4640      	mov	r0, r8
 800c82c:	4649      	mov	r1, r9
 800c82e:	f7f3 fee3 	bl	80005f8 <__aeabi_dmul>
 800c832:	3f01      	subs	r7, #1
 800c834:	4680      	mov	r8, r0
 800c836:	4689      	mov	r9, r1
 800c838:	e708      	b.n	800c64c <__kernel_rem_pio2+0x2ac>
 800c83a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800c83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c842:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800c846:	f7f3 fed7 	bl	80005f8 <__aeabi_dmul>
 800c84a:	4602      	mov	r2, r0
 800c84c:	460b      	mov	r3, r1
 800c84e:	4640      	mov	r0, r8
 800c850:	4649      	mov	r1, r9
 800c852:	f7f3 fd1b 	bl	800028c <__adddf3>
 800c856:	3701      	adds	r7, #1
 800c858:	4680      	mov	r8, r0
 800c85a:	4689      	mov	r9, r1
 800c85c:	9b04      	ldr	r3, [sp, #16]
 800c85e:	429f      	cmp	r7, r3
 800c860:	dc01      	bgt.n	800c866 <__kernel_rem_pio2+0x4c6>
 800c862:	45ba      	cmp	sl, r7
 800c864:	dae9      	bge.n	800c83a <__kernel_rem_pio2+0x49a>
 800c866:	ab4a      	add	r3, sp, #296	; 0x128
 800c868:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c86c:	e9c3 8900 	strd	r8, r9, [r3]
 800c870:	f10a 0a01 	add.w	sl, sl, #1
 800c874:	3e08      	subs	r6, #8
 800c876:	e6f0      	b.n	800c65a <__kernel_rem_pio2+0x2ba>
 800c878:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800c87a:	2b03      	cmp	r3, #3
 800c87c:	d85b      	bhi.n	800c936 <__kernel_rem_pio2+0x596>
 800c87e:	e8df f003 	tbb	[pc, r3]
 800c882:	264a      	.short	0x264a
 800c884:	0226      	.short	0x0226
 800c886:	ab9a      	add	r3, sp, #616	; 0x268
 800c888:	441c      	add	r4, r3
 800c88a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800c88e:	46a2      	mov	sl, r4
 800c890:	46ab      	mov	fp, r5
 800c892:	f1bb 0f00 	cmp.w	fp, #0
 800c896:	dc6c      	bgt.n	800c972 <__kernel_rem_pio2+0x5d2>
 800c898:	46a2      	mov	sl, r4
 800c89a:	46ab      	mov	fp, r5
 800c89c:	f1bb 0f01 	cmp.w	fp, #1
 800c8a0:	f300 8086 	bgt.w	800c9b0 <__kernel_rem_pio2+0x610>
 800c8a4:	2000      	movs	r0, #0
 800c8a6:	2100      	movs	r1, #0
 800c8a8:	2d01      	cmp	r5, #1
 800c8aa:	f300 80a0 	bgt.w	800c9ee <__kernel_rem_pio2+0x64e>
 800c8ae:	9b02      	ldr	r3, [sp, #8]
 800c8b0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800c8b4:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	f040 809e 	bne.w	800c9fa <__kernel_rem_pio2+0x65a>
 800c8be:	9b01      	ldr	r3, [sp, #4]
 800c8c0:	e9c3 7800 	strd	r7, r8, [r3]
 800c8c4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800c8c8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c8cc:	e033      	b.n	800c936 <__kernel_rem_pio2+0x596>
 800c8ce:	3408      	adds	r4, #8
 800c8d0:	ab4a      	add	r3, sp, #296	; 0x128
 800c8d2:	441c      	add	r4, r3
 800c8d4:	462e      	mov	r6, r5
 800c8d6:	2000      	movs	r0, #0
 800c8d8:	2100      	movs	r1, #0
 800c8da:	2e00      	cmp	r6, #0
 800c8dc:	da3a      	bge.n	800c954 <__kernel_rem_pio2+0x5b4>
 800c8de:	9b02      	ldr	r3, [sp, #8]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d03d      	beq.n	800c960 <__kernel_rem_pio2+0x5c0>
 800c8e4:	4602      	mov	r2, r0
 800c8e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c8ea:	9c01      	ldr	r4, [sp, #4]
 800c8ec:	e9c4 2300 	strd	r2, r3, [r4]
 800c8f0:	4602      	mov	r2, r0
 800c8f2:	460b      	mov	r3, r1
 800c8f4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800c8f8:	f7f3 fcc6 	bl	8000288 <__aeabi_dsub>
 800c8fc:	ae4c      	add	r6, sp, #304	; 0x130
 800c8fe:	2401      	movs	r4, #1
 800c900:	42a5      	cmp	r5, r4
 800c902:	da30      	bge.n	800c966 <__kernel_rem_pio2+0x5c6>
 800c904:	9b02      	ldr	r3, [sp, #8]
 800c906:	b113      	cbz	r3, 800c90e <__kernel_rem_pio2+0x56e>
 800c908:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c90c:	4619      	mov	r1, r3
 800c90e:	9b01      	ldr	r3, [sp, #4]
 800c910:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c914:	e00f      	b.n	800c936 <__kernel_rem_pio2+0x596>
 800c916:	ab9a      	add	r3, sp, #616	; 0x268
 800c918:	441c      	add	r4, r3
 800c91a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800c91e:	2000      	movs	r0, #0
 800c920:	2100      	movs	r1, #0
 800c922:	2d00      	cmp	r5, #0
 800c924:	da10      	bge.n	800c948 <__kernel_rem_pio2+0x5a8>
 800c926:	9b02      	ldr	r3, [sp, #8]
 800c928:	b113      	cbz	r3, 800c930 <__kernel_rem_pio2+0x590>
 800c92a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c92e:	4619      	mov	r1, r3
 800c930:	9b01      	ldr	r3, [sp, #4]
 800c932:	e9c3 0100 	strd	r0, r1, [r3]
 800c936:	9b06      	ldr	r3, [sp, #24]
 800c938:	f003 0007 	and.w	r0, r3, #7
 800c93c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800c940:	ecbd 8b02 	vpop	{d8}
 800c944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c948:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c94c:	f7f3 fc9e 	bl	800028c <__adddf3>
 800c950:	3d01      	subs	r5, #1
 800c952:	e7e6      	b.n	800c922 <__kernel_rem_pio2+0x582>
 800c954:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c958:	f7f3 fc98 	bl	800028c <__adddf3>
 800c95c:	3e01      	subs	r6, #1
 800c95e:	e7bc      	b.n	800c8da <__kernel_rem_pio2+0x53a>
 800c960:	4602      	mov	r2, r0
 800c962:	460b      	mov	r3, r1
 800c964:	e7c1      	b.n	800c8ea <__kernel_rem_pio2+0x54a>
 800c966:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800c96a:	f7f3 fc8f 	bl	800028c <__adddf3>
 800c96e:	3401      	adds	r4, #1
 800c970:	e7c6      	b.n	800c900 <__kernel_rem_pio2+0x560>
 800c972:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800c976:	ed3a 7b02 	vldmdb	sl!, {d7}
 800c97a:	4640      	mov	r0, r8
 800c97c:	ec53 2b17 	vmov	r2, r3, d7
 800c980:	4649      	mov	r1, r9
 800c982:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c986:	f7f3 fc81 	bl	800028c <__adddf3>
 800c98a:	4602      	mov	r2, r0
 800c98c:	460b      	mov	r3, r1
 800c98e:	4606      	mov	r6, r0
 800c990:	460f      	mov	r7, r1
 800c992:	4640      	mov	r0, r8
 800c994:	4649      	mov	r1, r9
 800c996:	f7f3 fc77 	bl	8000288 <__aeabi_dsub>
 800c99a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c99e:	f7f3 fc75 	bl	800028c <__adddf3>
 800c9a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c9a6:	e9ca 0100 	strd	r0, r1, [sl]
 800c9aa:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800c9ae:	e770      	b.n	800c892 <__kernel_rem_pio2+0x4f2>
 800c9b0:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800c9b4:	ed3a 7b02 	vldmdb	sl!, {d7}
 800c9b8:	4630      	mov	r0, r6
 800c9ba:	ec53 2b17 	vmov	r2, r3, d7
 800c9be:	4639      	mov	r1, r7
 800c9c0:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c9c4:	f7f3 fc62 	bl	800028c <__adddf3>
 800c9c8:	4602      	mov	r2, r0
 800c9ca:	460b      	mov	r3, r1
 800c9cc:	4680      	mov	r8, r0
 800c9ce:	4689      	mov	r9, r1
 800c9d0:	4630      	mov	r0, r6
 800c9d2:	4639      	mov	r1, r7
 800c9d4:	f7f3 fc58 	bl	8000288 <__aeabi_dsub>
 800c9d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c9dc:	f7f3 fc56 	bl	800028c <__adddf3>
 800c9e0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c9e4:	e9ca 0100 	strd	r0, r1, [sl]
 800c9e8:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800c9ec:	e756      	b.n	800c89c <__kernel_rem_pio2+0x4fc>
 800c9ee:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c9f2:	f7f3 fc4b 	bl	800028c <__adddf3>
 800c9f6:	3d01      	subs	r5, #1
 800c9f8:	e756      	b.n	800c8a8 <__kernel_rem_pio2+0x508>
 800c9fa:	9b01      	ldr	r3, [sp, #4]
 800c9fc:	9a01      	ldr	r2, [sp, #4]
 800c9fe:	601f      	str	r7, [r3, #0]
 800ca00:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800ca04:	605c      	str	r4, [r3, #4]
 800ca06:	609d      	str	r5, [r3, #8]
 800ca08:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ca0c:	60d3      	str	r3, [r2, #12]
 800ca0e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ca12:	6110      	str	r0, [r2, #16]
 800ca14:	6153      	str	r3, [r2, #20]
 800ca16:	e78e      	b.n	800c936 <__kernel_rem_pio2+0x596>
 800ca18:	41700000 	.word	0x41700000
 800ca1c:	3e700000 	.word	0x3e700000

0800ca20 <__kernel_sin>:
 800ca20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca24:	ec55 4b10 	vmov	r4, r5, d0
 800ca28:	b085      	sub	sp, #20
 800ca2a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ca2e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800ca32:	ed8d 1b00 	vstr	d1, [sp]
 800ca36:	9002      	str	r0, [sp, #8]
 800ca38:	da06      	bge.n	800ca48 <__kernel_sin+0x28>
 800ca3a:	ee10 0a10 	vmov	r0, s0
 800ca3e:	4629      	mov	r1, r5
 800ca40:	f7f4 f88a 	bl	8000b58 <__aeabi_d2iz>
 800ca44:	2800      	cmp	r0, #0
 800ca46:	d051      	beq.n	800caec <__kernel_sin+0xcc>
 800ca48:	4622      	mov	r2, r4
 800ca4a:	462b      	mov	r3, r5
 800ca4c:	4620      	mov	r0, r4
 800ca4e:	4629      	mov	r1, r5
 800ca50:	f7f3 fdd2 	bl	80005f8 <__aeabi_dmul>
 800ca54:	4682      	mov	sl, r0
 800ca56:	468b      	mov	fp, r1
 800ca58:	4602      	mov	r2, r0
 800ca5a:	460b      	mov	r3, r1
 800ca5c:	4620      	mov	r0, r4
 800ca5e:	4629      	mov	r1, r5
 800ca60:	f7f3 fdca 	bl	80005f8 <__aeabi_dmul>
 800ca64:	a341      	add	r3, pc, #260	; (adr r3, 800cb6c <__kernel_sin+0x14c>)
 800ca66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca6a:	4680      	mov	r8, r0
 800ca6c:	4689      	mov	r9, r1
 800ca6e:	4650      	mov	r0, sl
 800ca70:	4659      	mov	r1, fp
 800ca72:	f7f3 fdc1 	bl	80005f8 <__aeabi_dmul>
 800ca76:	a33f      	add	r3, pc, #252	; (adr r3, 800cb74 <__kernel_sin+0x154>)
 800ca78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca7c:	f7f3 fc04 	bl	8000288 <__aeabi_dsub>
 800ca80:	4652      	mov	r2, sl
 800ca82:	465b      	mov	r3, fp
 800ca84:	f7f3 fdb8 	bl	80005f8 <__aeabi_dmul>
 800ca88:	a33c      	add	r3, pc, #240	; (adr r3, 800cb7c <__kernel_sin+0x15c>)
 800ca8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca8e:	f7f3 fbfd 	bl	800028c <__adddf3>
 800ca92:	4652      	mov	r2, sl
 800ca94:	465b      	mov	r3, fp
 800ca96:	f7f3 fdaf 	bl	80005f8 <__aeabi_dmul>
 800ca9a:	a33a      	add	r3, pc, #232	; (adr r3, 800cb84 <__kernel_sin+0x164>)
 800ca9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caa0:	f7f3 fbf2 	bl	8000288 <__aeabi_dsub>
 800caa4:	4652      	mov	r2, sl
 800caa6:	465b      	mov	r3, fp
 800caa8:	f7f3 fda6 	bl	80005f8 <__aeabi_dmul>
 800caac:	a337      	add	r3, pc, #220	; (adr r3, 800cb8c <__kernel_sin+0x16c>)
 800caae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cab2:	f7f3 fbeb 	bl	800028c <__adddf3>
 800cab6:	9b02      	ldr	r3, [sp, #8]
 800cab8:	4606      	mov	r6, r0
 800caba:	460f      	mov	r7, r1
 800cabc:	b9db      	cbnz	r3, 800caf6 <__kernel_sin+0xd6>
 800cabe:	4602      	mov	r2, r0
 800cac0:	460b      	mov	r3, r1
 800cac2:	4650      	mov	r0, sl
 800cac4:	4659      	mov	r1, fp
 800cac6:	f7f3 fd97 	bl	80005f8 <__aeabi_dmul>
 800caca:	a325      	add	r3, pc, #148	; (adr r3, 800cb60 <__kernel_sin+0x140>)
 800cacc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cad0:	f7f3 fbda 	bl	8000288 <__aeabi_dsub>
 800cad4:	4642      	mov	r2, r8
 800cad6:	464b      	mov	r3, r9
 800cad8:	f7f3 fd8e 	bl	80005f8 <__aeabi_dmul>
 800cadc:	4602      	mov	r2, r0
 800cade:	460b      	mov	r3, r1
 800cae0:	4620      	mov	r0, r4
 800cae2:	4629      	mov	r1, r5
 800cae4:	f7f3 fbd2 	bl	800028c <__adddf3>
 800cae8:	4604      	mov	r4, r0
 800caea:	460d      	mov	r5, r1
 800caec:	ec45 4b10 	vmov	d0, r4, r5
 800caf0:	b005      	add	sp, #20
 800caf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caf6:	2200      	movs	r2, #0
 800caf8:	4b1b      	ldr	r3, [pc, #108]	; (800cb68 <__kernel_sin+0x148>)
 800cafa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cafe:	f7f3 fd7b 	bl	80005f8 <__aeabi_dmul>
 800cb02:	4632      	mov	r2, r6
 800cb04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb08:	463b      	mov	r3, r7
 800cb0a:	4640      	mov	r0, r8
 800cb0c:	4649      	mov	r1, r9
 800cb0e:	f7f3 fd73 	bl	80005f8 <__aeabi_dmul>
 800cb12:	4602      	mov	r2, r0
 800cb14:	460b      	mov	r3, r1
 800cb16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb1a:	f7f3 fbb5 	bl	8000288 <__aeabi_dsub>
 800cb1e:	4652      	mov	r2, sl
 800cb20:	465b      	mov	r3, fp
 800cb22:	f7f3 fd69 	bl	80005f8 <__aeabi_dmul>
 800cb26:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb2a:	f7f3 fbad 	bl	8000288 <__aeabi_dsub>
 800cb2e:	a30c      	add	r3, pc, #48	; (adr r3, 800cb60 <__kernel_sin+0x140>)
 800cb30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb34:	4606      	mov	r6, r0
 800cb36:	460f      	mov	r7, r1
 800cb38:	4640      	mov	r0, r8
 800cb3a:	4649      	mov	r1, r9
 800cb3c:	f7f3 fd5c 	bl	80005f8 <__aeabi_dmul>
 800cb40:	4602      	mov	r2, r0
 800cb42:	460b      	mov	r3, r1
 800cb44:	4630      	mov	r0, r6
 800cb46:	4639      	mov	r1, r7
 800cb48:	f7f3 fba0 	bl	800028c <__adddf3>
 800cb4c:	4602      	mov	r2, r0
 800cb4e:	460b      	mov	r3, r1
 800cb50:	4620      	mov	r0, r4
 800cb52:	4629      	mov	r1, r5
 800cb54:	f7f3 fb98 	bl	8000288 <__aeabi_dsub>
 800cb58:	e7c6      	b.n	800cae8 <__kernel_sin+0xc8>
 800cb5a:	bf00      	nop
 800cb5c:	f3af 8000 	nop.w
 800cb60:	55555549 	.word	0x55555549
 800cb64:	3fc55555 	.word	0x3fc55555
 800cb68:	3fe00000 	.word	0x3fe00000
 800cb6c:	5acfd57c 	.word	0x5acfd57c
 800cb70:	3de5d93a 	.word	0x3de5d93a
 800cb74:	8a2b9ceb 	.word	0x8a2b9ceb
 800cb78:	3e5ae5e6 	.word	0x3e5ae5e6
 800cb7c:	57b1fe7d 	.word	0x57b1fe7d
 800cb80:	3ec71de3 	.word	0x3ec71de3
 800cb84:	19c161d5 	.word	0x19c161d5
 800cb88:	3f2a01a0 	.word	0x3f2a01a0
 800cb8c:	1110f8a6 	.word	0x1110f8a6
 800cb90:	3f811111 	.word	0x3f811111

0800cb94 <fabs>:
 800cb94:	ec51 0b10 	vmov	r0, r1, d0
 800cb98:	ee10 2a10 	vmov	r2, s0
 800cb9c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cba0:	ec43 2b10 	vmov	d0, r2, r3
 800cba4:	4770      	bx	lr
	...

0800cba8 <floor>:
 800cba8:	ec51 0b10 	vmov	r0, r1, d0
 800cbac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbb0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800cbb4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800cbb8:	2e13      	cmp	r6, #19
 800cbba:	460c      	mov	r4, r1
 800cbbc:	ee10 5a10 	vmov	r5, s0
 800cbc0:	4680      	mov	r8, r0
 800cbc2:	dc34      	bgt.n	800cc2e <floor+0x86>
 800cbc4:	2e00      	cmp	r6, #0
 800cbc6:	da16      	bge.n	800cbf6 <floor+0x4e>
 800cbc8:	a335      	add	r3, pc, #212	; (adr r3, 800cca0 <floor+0xf8>)
 800cbca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbce:	f7f3 fb5d 	bl	800028c <__adddf3>
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	f7f3 ff9f 	bl	8000b18 <__aeabi_dcmpgt>
 800cbda:	b148      	cbz	r0, 800cbf0 <floor+0x48>
 800cbdc:	2c00      	cmp	r4, #0
 800cbde:	da59      	bge.n	800cc94 <floor+0xec>
 800cbe0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800cbe4:	4a30      	ldr	r2, [pc, #192]	; (800cca8 <floor+0x100>)
 800cbe6:	432b      	orrs	r3, r5
 800cbe8:	2500      	movs	r5, #0
 800cbea:	42ab      	cmp	r3, r5
 800cbec:	bf18      	it	ne
 800cbee:	4614      	movne	r4, r2
 800cbf0:	4621      	mov	r1, r4
 800cbf2:	4628      	mov	r0, r5
 800cbf4:	e025      	b.n	800cc42 <floor+0x9a>
 800cbf6:	4f2d      	ldr	r7, [pc, #180]	; (800ccac <floor+0x104>)
 800cbf8:	4137      	asrs	r7, r6
 800cbfa:	ea01 0307 	and.w	r3, r1, r7
 800cbfe:	4303      	orrs	r3, r0
 800cc00:	d01f      	beq.n	800cc42 <floor+0x9a>
 800cc02:	a327      	add	r3, pc, #156	; (adr r3, 800cca0 <floor+0xf8>)
 800cc04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc08:	f7f3 fb40 	bl	800028c <__adddf3>
 800cc0c:	2200      	movs	r2, #0
 800cc0e:	2300      	movs	r3, #0
 800cc10:	f7f3 ff82 	bl	8000b18 <__aeabi_dcmpgt>
 800cc14:	2800      	cmp	r0, #0
 800cc16:	d0eb      	beq.n	800cbf0 <floor+0x48>
 800cc18:	2c00      	cmp	r4, #0
 800cc1a:	bfbe      	ittt	lt
 800cc1c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800cc20:	fa43 f606 	asrlt.w	r6, r3, r6
 800cc24:	19a4      	addlt	r4, r4, r6
 800cc26:	ea24 0407 	bic.w	r4, r4, r7
 800cc2a:	2500      	movs	r5, #0
 800cc2c:	e7e0      	b.n	800cbf0 <floor+0x48>
 800cc2e:	2e33      	cmp	r6, #51	; 0x33
 800cc30:	dd0b      	ble.n	800cc4a <floor+0xa2>
 800cc32:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800cc36:	d104      	bne.n	800cc42 <floor+0x9a>
 800cc38:	ee10 2a10 	vmov	r2, s0
 800cc3c:	460b      	mov	r3, r1
 800cc3e:	f7f3 fb25 	bl	800028c <__adddf3>
 800cc42:	ec41 0b10 	vmov	d0, r0, r1
 800cc46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc4a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800cc4e:	f04f 33ff 	mov.w	r3, #4294967295
 800cc52:	fa23 f707 	lsr.w	r7, r3, r7
 800cc56:	4207      	tst	r7, r0
 800cc58:	d0f3      	beq.n	800cc42 <floor+0x9a>
 800cc5a:	a311      	add	r3, pc, #68	; (adr r3, 800cca0 <floor+0xf8>)
 800cc5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc60:	f7f3 fb14 	bl	800028c <__adddf3>
 800cc64:	2200      	movs	r2, #0
 800cc66:	2300      	movs	r3, #0
 800cc68:	f7f3 ff56 	bl	8000b18 <__aeabi_dcmpgt>
 800cc6c:	2800      	cmp	r0, #0
 800cc6e:	d0bf      	beq.n	800cbf0 <floor+0x48>
 800cc70:	2c00      	cmp	r4, #0
 800cc72:	da02      	bge.n	800cc7a <floor+0xd2>
 800cc74:	2e14      	cmp	r6, #20
 800cc76:	d103      	bne.n	800cc80 <floor+0xd8>
 800cc78:	3401      	adds	r4, #1
 800cc7a:	ea25 0507 	bic.w	r5, r5, r7
 800cc7e:	e7b7      	b.n	800cbf0 <floor+0x48>
 800cc80:	2301      	movs	r3, #1
 800cc82:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800cc86:	fa03 f606 	lsl.w	r6, r3, r6
 800cc8a:	4435      	add	r5, r6
 800cc8c:	4545      	cmp	r5, r8
 800cc8e:	bf38      	it	cc
 800cc90:	18e4      	addcc	r4, r4, r3
 800cc92:	e7f2      	b.n	800cc7a <floor+0xd2>
 800cc94:	2500      	movs	r5, #0
 800cc96:	462c      	mov	r4, r5
 800cc98:	e7aa      	b.n	800cbf0 <floor+0x48>
 800cc9a:	bf00      	nop
 800cc9c:	f3af 8000 	nop.w
 800cca0:	8800759c 	.word	0x8800759c
 800cca4:	7e37e43c 	.word	0x7e37e43c
 800cca8:	bff00000 	.word	0xbff00000
 800ccac:	000fffff 	.word	0x000fffff

0800ccb0 <matherr>:
 800ccb0:	2000      	movs	r0, #0
 800ccb2:	4770      	bx	lr
 800ccb4:	0000      	movs	r0, r0
	...

0800ccb8 <scalbn>:
 800ccb8:	b570      	push	{r4, r5, r6, lr}
 800ccba:	ec55 4b10 	vmov	r4, r5, d0
 800ccbe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ccc2:	4606      	mov	r6, r0
 800ccc4:	462b      	mov	r3, r5
 800ccc6:	b9aa      	cbnz	r2, 800ccf4 <scalbn+0x3c>
 800ccc8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cccc:	4323      	orrs	r3, r4
 800ccce:	d03b      	beq.n	800cd48 <scalbn+0x90>
 800ccd0:	4b31      	ldr	r3, [pc, #196]	; (800cd98 <scalbn+0xe0>)
 800ccd2:	4629      	mov	r1, r5
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	ee10 0a10 	vmov	r0, s0
 800ccda:	f7f3 fc8d 	bl	80005f8 <__aeabi_dmul>
 800ccde:	4b2f      	ldr	r3, [pc, #188]	; (800cd9c <scalbn+0xe4>)
 800cce0:	429e      	cmp	r6, r3
 800cce2:	4604      	mov	r4, r0
 800cce4:	460d      	mov	r5, r1
 800cce6:	da12      	bge.n	800cd0e <scalbn+0x56>
 800cce8:	a327      	add	r3, pc, #156	; (adr r3, 800cd88 <scalbn+0xd0>)
 800ccea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccee:	f7f3 fc83 	bl	80005f8 <__aeabi_dmul>
 800ccf2:	e009      	b.n	800cd08 <scalbn+0x50>
 800ccf4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ccf8:	428a      	cmp	r2, r1
 800ccfa:	d10c      	bne.n	800cd16 <scalbn+0x5e>
 800ccfc:	ee10 2a10 	vmov	r2, s0
 800cd00:	4620      	mov	r0, r4
 800cd02:	4629      	mov	r1, r5
 800cd04:	f7f3 fac2 	bl	800028c <__adddf3>
 800cd08:	4604      	mov	r4, r0
 800cd0a:	460d      	mov	r5, r1
 800cd0c:	e01c      	b.n	800cd48 <scalbn+0x90>
 800cd0e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800cd12:	460b      	mov	r3, r1
 800cd14:	3a36      	subs	r2, #54	; 0x36
 800cd16:	4432      	add	r2, r6
 800cd18:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800cd1c:	428a      	cmp	r2, r1
 800cd1e:	dd0b      	ble.n	800cd38 <scalbn+0x80>
 800cd20:	ec45 4b11 	vmov	d1, r4, r5
 800cd24:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800cd90 <scalbn+0xd8>
 800cd28:	f000 f83c 	bl	800cda4 <copysign>
 800cd2c:	a318      	add	r3, pc, #96	; (adr r3, 800cd90 <scalbn+0xd8>)
 800cd2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd32:	ec51 0b10 	vmov	r0, r1, d0
 800cd36:	e7da      	b.n	800ccee <scalbn+0x36>
 800cd38:	2a00      	cmp	r2, #0
 800cd3a:	dd08      	ble.n	800cd4e <scalbn+0x96>
 800cd3c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cd40:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cd44:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cd48:	ec45 4b10 	vmov	d0, r4, r5
 800cd4c:	bd70      	pop	{r4, r5, r6, pc}
 800cd4e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800cd52:	da0d      	bge.n	800cd70 <scalbn+0xb8>
 800cd54:	f24c 3350 	movw	r3, #50000	; 0xc350
 800cd58:	429e      	cmp	r6, r3
 800cd5a:	ec45 4b11 	vmov	d1, r4, r5
 800cd5e:	dce1      	bgt.n	800cd24 <scalbn+0x6c>
 800cd60:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800cd88 <scalbn+0xd0>
 800cd64:	f000 f81e 	bl	800cda4 <copysign>
 800cd68:	a307      	add	r3, pc, #28	; (adr r3, 800cd88 <scalbn+0xd0>)
 800cd6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd6e:	e7e0      	b.n	800cd32 <scalbn+0x7a>
 800cd70:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cd74:	3236      	adds	r2, #54	; 0x36
 800cd76:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cd7a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cd7e:	4620      	mov	r0, r4
 800cd80:	4629      	mov	r1, r5
 800cd82:	2200      	movs	r2, #0
 800cd84:	4b06      	ldr	r3, [pc, #24]	; (800cda0 <scalbn+0xe8>)
 800cd86:	e7b2      	b.n	800ccee <scalbn+0x36>
 800cd88:	c2f8f359 	.word	0xc2f8f359
 800cd8c:	01a56e1f 	.word	0x01a56e1f
 800cd90:	8800759c 	.word	0x8800759c
 800cd94:	7e37e43c 	.word	0x7e37e43c
 800cd98:	43500000 	.word	0x43500000
 800cd9c:	ffff3cb0 	.word	0xffff3cb0
 800cda0:	3c900000 	.word	0x3c900000

0800cda4 <copysign>:
 800cda4:	ec51 0b10 	vmov	r0, r1, d0
 800cda8:	ee11 0a90 	vmov	r0, s3
 800cdac:	ee10 2a10 	vmov	r2, s0
 800cdb0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800cdb4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800cdb8:	ea41 0300 	orr.w	r3, r1, r0
 800cdbc:	ec43 2b10 	vmov	d0, r2, r3
 800cdc0:	4770      	bx	lr
	...

0800cdc4 <_init>:
 800cdc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdc6:	bf00      	nop
 800cdc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdca:	bc08      	pop	{r3}
 800cdcc:	469e      	mov	lr, r3
 800cdce:	4770      	bx	lr

0800cdd0 <_fini>:
 800cdd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdd2:	bf00      	nop
 800cdd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdd6:	bc08      	pop	{r3}
 800cdd8:	469e      	mov	lr, r3
 800cdda:	4770      	bx	lr
